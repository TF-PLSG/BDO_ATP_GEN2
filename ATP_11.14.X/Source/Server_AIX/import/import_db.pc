/******************************************************************************
  
   Module:           importdb.pc
  
   Title:            import DB Routines
  
   Description:
   
   Application:      Equitable Bank

   Authour:          F. Arad.

******************************************************************************/
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <time.h>
#include <sys/timeb.h>

#include "basictyp.h"
#include "pte.h"
#include "ptemsg.h"
#include "ptetimer.h"
#include "app_info.h"
#include "equitdb.h"
#include "dc_dbstruct.h"
#include "dc_database.h"

#include "tx_dbstruct.h"
#include "tx_database.h"

#include "import.h"

#include "dbcommon.h"
#include "txutils.h"
#include "ptetime.h"

#define NULL_COLUMN_DATA -1405
#define NO_DATA_FOUND    1403
#define TABLE_RESOURCE_BUSY -54
/* Oracle error codes */
#define NULL_COLUMN_DATA                -1405
#define NO_DATA_FOUND                   1403
#define NOT_CONNECTED_TO_DB             -3114
#define NOT_LOGGED_INTO_DB              -1012
#define TNS_PACKET_WRITER_FAILED        -12571
#define SHUTDOWN_OR_STARTUP_IN_PROGRESS -1033

#define MID_TID_STATE_RESTRICTED_VALUE "R"

EXEC SQL INCLUDE sqlca;


EXEC ORACLE OPTION (MAXOPENCURSORS=100);
EXEC ORACLE OPTION (HOLD_CURSOR=YES);
EXEC ORACLE OPTION (RELEASE_CURSOR=NO);

/* For DB statics added by raghu */
extern BYTE DB_MsgSubtype2 ;
extern BYTE DB_MsgSubtype1 ;
char DB_Tmr_Lgng_Buf[512];
double start_time;
double end_time  ;
double duration  ; 
extern INT db_error_statics_flag;
extern double db_error_statics_value;
char er_buf[512];
BYTE DB_rcode;
extern CHAR  DB_Logging_Filename[256];
extern CHAR  DB_module_file_name[256];
extern CHAR  DB_file_path[256];
/* End   */

extern CHAR AppName   [80];

typedef struct
{
   WORD len;
   BYTE pin_data[100];
}RAWPINDATA;




EXEC SQL BEGIN DECLARE SECTION;

   /* error code variable */
   long    SQLCODE;
   long    SQL_CODE;

/*****************************************************/

EXEC SQL TYPE RAWPINDATA is VARRAW(5000);

struct
{
   char  device_id                                 [9];
   char  short_name                                [10];
   char  phone                                     [18];
   char  industry_code                             [4];
   char  category_code                             [5];
   char  contact                                   [21];
   char  device_type                               [3];
   char  date_added                                [9];
   char  current_bus_date                          [9];
   char  dept_nbr                                  [3];
   char  organization_id                           [5];
   char  merchant_id                               [16];
   char  aba_nbr                                   [10];
   char  status                                    [2];
   char  totals_ind                                [2];
   char  statistics_ind                            [2];
   char  valid_transactions                        [41];  /* 8583 table 'Y' or 'N' */
   char  draft_capture_type                        [2];
   char  amex_charge_desc                          [24];
   char  diners_charge_desc                        [24];
   char  additional_pos_information                [7];
   char  batch_nbr                                 [7];
   char  rental_program                            [4];
   char  nsp_process                               [16];
   char  pin_type                                  [2];
   char  kc                                        [17];
   char  encr_type                                 [2];
   char  pad_char                                  [2];
   char  keyxchange_cnt                            [4];
   char  txn_cnt                                   [4];
   char  cwk                                       [49];
   char  kek                                       [17];
   char  retired_cwk                               [49];
   char  icv                                       [17];

   char  pin_block_format                          [2];
   char  encryption_method                         [2];
   char  pin_key                                   [17];
   char  communication_key                         [17];
   char  auto_init_activation					   [2];
   char  auto_init_time                            [6];
   char  auto_init_ref_number					   [7];
   char  auto_program_load_activation			   [2];
   char  auto_program_load_time					   [6];
   char  auto_program_load_ref_number              [7];
   char  auto_icepac_activation                    [2];

}pte_dcf01;


struct
{
   varchar  device_id                                 [9];
   varchar  short_name                                [10];
   varchar  phone                                     [18];
   varchar  industry_code                             [4];
   varchar  category_code                             [5];
   varchar  contact                                   [21];
   varchar  device_type                               [3];
   varchar  date_added                                [9];
   varchar  current_bus_date                          [9];
   varchar  dept_nbr                                  [3];
   varchar  organization_id                           [5];
   varchar  merchant_id                               [16];
   varchar  aba_nbr                                   [10];
   varchar  status                                    [2];
   varchar  totals_ind                                [2];
   varchar  statistics_ind                            [2];
   varchar  valid_transactions                        [41];  /* 8583 table 'Y' or 'N' */
   varchar  draft_capture_type                        [2];
   varchar  amex_charge_desc                          [24];
   varchar  diners_charge_desc                        [24];
   varchar  additional_pos_information                [7];
   varchar  batch_nbr                                 [7];
   varchar  rental_program                            [4];
   varchar  nsp_process                               [16];
   varchar  pin_type                                  [2];
   varchar  kc                                        [17];
   varchar  encr_type                                 [2];
   varchar  pad_char                                  [2];
   varchar  keyxchange_cnt                            [4];
   varchar  txn_cnt                                   [4];
   varchar  cwk                                       [49];
   varchar  kek                                       [17];
   varchar  retired_cwk                               [49];
   varchar  icv                                       [17];

   varchar  pin_block_format                          [2];
   varchar  encryption_method                         [2];
   varchar  pin_key                                   [17];
   varchar  communication_key                         [17];
   varchar  auto_init_activation					  [2];
   varchar  auto_init_time                            [6];
   varchar  auto_init_ref_number					  [7];
   varchar  auto_program_load_activation			  [2];
   varchar  auto_program_load_time					  [6];
   varchar  auto_program_load_ref_number              [7];
   varchar  auto_icepac_activation                    [2];


}db_dcf01;


   struct
   {
      char  primary_acct_nbr                          [20];

      char  name_dba                                  [151];
      char  address1                                  [31];
      char  address2                                  [31];
      char  city                                      [21];
      char  state                                     [4];
      char  zip_code                                  [11];
      char  home_phone                                [31];
      char  work_phone                                [31];
      char  status                                    [3];
      char  caf_profile_id                            [5];
      char  type                                      [2];
      char  corp_acct_nbr                             [11];
      char  block_status                              [5]; 
      char  account_name                              [31];
      char  past_due_amount                           [13]; 
      char  min_pay_code                              [2];  
	  char	Credit_limit							  [11];   /* TF Phani - For Falcon */
	  char	Custr_nbr								  [13];
	  char	APP_Source								  [11];  
	  char	COMP_Name								  [101];

   }pte_paf01;

   struct
   {
      varchar  primary_acct_nbr                          [20];

      varchar  name_dba                                  [150];
      varchar  address1                                  [31];
      varchar  address2                                  [31];
      varchar  city                                      [21];
      varchar  state                                     [4];
      varchar  zip_code                                  [11];
      varchar  home_phone                                [30];
      varchar  work_phone                                [30];
      varchar  status                                    [3];
      varchar  caf_profile_id                            [5];
	   varchar  type                                     [2];
      varchar  corp_acct_nbr                             [11];
      varchar  block_status                              [5]; 
      varchar  account_name                              [31];
      varchar  past_due_amount                           [13]; 
      varchar  min_pay_code                              [2];  
	  varchar	Credit_limit							 [11];   /* TF Phani - For Falcon */
	  varchar	Custr_nbr								 [13];
	  varchar	APP_Source								 [11];  
	  varchar	COMP_Name								 [100];

   }db_paf01;

   struct
   {
      char  account_type                              [3];
      char  account_nbr                               [20];

      char  status                                    [3];
      char  date_added                                [9];
      char  maint_date                                [9];
      char  changed_by                                [21];
      char  credit_limit                              [13];
      char  available                                 [13];
      char  outstanding                               [13];
      char  ledger_balance                            [13];
      char  cash_limit                                [13]; 
      char  cash_available                            [13]; 
      char  cash_outstanding                          [13]; 


   }pte_acf01;

   struct
   {
      varchar  account_type                              [3];
      varchar  account_nbr                               [20];

      varchar  status                                    [3];
      varchar  date_added                                [9];
      varchar  maint_date                                [9];
      varchar  changed_by                                [21];
      varchar  credit_limit                              [13];
      varchar  available                                 [13];
      varchar  outstanding                               [13];
      varchar  ledger_balance                            [13];
      varchar  cash_limit                                [13]; 
      varchar  cash_available                            [13]; 
      varchar  cash_outstanding                          [13]; 


   }db_acf01;


   struct
   {
      char  card_type                                 [2];
      char  card_nbr                                  [20];

      char  primary_acct_nbr                          [20];
      char  name_dba                                  [151];
      char  address1                                  [31];
      char  address2                                  [31];
      char  city                                      [21];
      char  state                                     [4];
      char  zip_code                                  [11];
      char  home_phone                                [31];
      char  work_phone                                [31];
      char  dob                                       [9];
      char  profession                                [21];
      char  country                                   [21];
      char  nbr_cards                                 [3];
      char  status                                    [3];
      char  sex                                       [2];  
      char  mother_maiden_name                        [31]; 
      char  membership_id                             [10]; 
      char  cardholder_id                             [20]; 
      char  block_status                              [5];  
      char  specialty_code                            [3];  
      char  vip_acct_code                             [2];  

   }pte_ccf01;

   struct
   {
      varchar  card_type                                 [2];
      varchar  card_nbr                                  [20];

      varchar  primary_acct_nbr                          [20];
      varchar  name_dba                                  [150];
      varchar  address1                                  [31];
      varchar  address2                                  [31];
      varchar  city                                      [21];
      varchar  state                                     [4];
      varchar  zip_code                                  [11];
      varchar  home_phone                                [30];
      varchar  work_phone                                [30];
      varchar  dob                                       [9];
      varchar  profession                                [21];
      varchar  country                                   [21];
      varchar  nbr_cards                                 [3];
      varchar  status                                    [3];
      varchar  sex                                       [2];  
      varchar  mother_maiden_name                        [31]; 
      varchar  membership_id                             [10]; 
      varchar  cardholder_id                             [20]; 
      varchar  block_status                              [5];  
      varchar  specialty_code                            [3];  
      varchar  vip_acct_code                             [2];  

   }db_ccf01;

   struct
   {
      char  card_type                                 [2];
      char  card_nbr                                  [20];

      char  primary_acct_nbr                          [20];
      char  caf_profile_id                            [5];
      char  status                                    [3];
      char  pin_offset                                [9];
      char  date_added                                [9];
      char  maint_date                                [9];
      char  changed_by                                [21];
      char  card_class                                [2];
      char  expire_date                               [5];
      char  effect_date                               [9];
      char  percent_deposit                           [3];
      char  percent_avail_allowed                     [3];
      char  credit_line                               [13];
      char  outstanding_auths                         [13];
      char  allowed                                   [17];
      char  currency_code                             [4];
      char  country_code                              [4];
      char  peso_saving_acct                          [13]; 
      char  peso_current_acct                         [13]; 
      char  dollar_saving_acct                        [13]; 
      char  dollar_current_acct                       [13]; 
      char  product_codes                             [21]; 
      char  cash_bonus_eligible                       [2];  
      char  visa_purchase_card                        [2];
      char  related_acct_type_1                       [3];
      char  related_acct_nbr_1                        [20];
      char  related_acct_type_2                       [3];
      char  related_acct_nbr_2                        [20];
      char  related_acct_type_3                       [3];
      char  related_acct_nbr_3                        [20];
      char  related_acct_type_4                       [3];
      char  related_acct_nbr_4                        [20];
      char  related_acct_type_5                       [3];
      char  related_acct_nbr_5                        [20];
      char  related_acct_type_6                       [3];
      char  related_acct_nbr_6                        [20];
      char  related_acct_type_7                       [3];
      char  related_acct_nbr_7                        [20];
      char  related_acct_type_8                       [3];
      char  related_acct_nbr_8                        [20];
      char  related_acct_type_9                       [3];
      char  related_acct_nbr_9                        [20];
      char  related_acct_type_10                      [3];
      char  related_acct_nbr_10                       [20];

      char  pin_verification_override                 [2];
      char  pin                                       [101];
      char  pvki                                      [3] ;     /* Modified by SDG on Feb 17 */
      char  add_on_rate                               [6];
      char  add_on_term                               [4];
	  char  peso_tran_limit							  [13];
	  char	dollar_tran_limit						  [13];

   }pte_ccf02p;

   struct
   {
      varchar  card_type                                 [2];
      varchar  card_nbr                                  [20];

      varchar  primary_acct_nbr                          [20];
      varchar  caf_profile_id                            [5];
      varchar  status                                    [3];
      varchar  pin_offset                                [9];
      varchar  date_added                                [9];
      varchar  maint_date                                [9];
      varchar  changed_by                                [21];
      varchar  card_class                                [2];
      varchar  expire_date                               [5];
      varchar  effect_date                               [9];
      varchar  percent_deposit                           [3];
      varchar  percent_avail_allowed                     [3];
      varchar  credit_line                               [13];
      varchar  outstanding_auths                         [13];
      varchar  allowed                                   [17];
      varchar  currency_code                             [4];
      varchar  country_code                              [4];
      varchar  peso_saving_acct                          [13]; 
      varchar  peso_current_acct                         [13]; 
      varchar  dollar_saving_acct                        [13]; 
      varchar  dollar_current_acct                       [13]; 
      varchar  product_codes                             [21]; 
      varchar  cash_bonus_eligible                       [2];  
      varchar  visa_purchase_card                        [2];
      varchar  related_acct_type_1                       [3];
      varchar  related_acct_nbr_1                        [20];
      varchar  related_acct_type_2                       [3];
      varchar  related_acct_nbr_2                        [20];
      varchar  related_acct_type_3                       [3];
      varchar  related_acct_nbr_3                        [20];
      varchar  related_acct_type_4                       [3];
      varchar  related_acct_nbr_4                        [20];
      varchar  related_acct_type_5                       [3];
      varchar  related_acct_nbr_5                        [20];
      varchar  related_acct_type_6                       [3];
      varchar  related_acct_nbr_6                        [20];
      varchar  related_acct_type_7                       [3];
      varchar  related_acct_nbr_7                        [20];
      varchar  related_acct_type_8                       [3];
      varchar  related_acct_nbr_8                        [20];
      varchar  related_acct_type_9                       [3];
      varchar  related_acct_nbr_9                        [20];
      varchar  related_acct_type_10                      [3];
      varchar  related_acct_nbr_10                       [20];

      varchar  pin_verification_override                 [2];
      varchar  pin                                       [100];
      varchar  pvki                                      [3] ;  /* Modified by SDG on Feb 17*/
      varchar  add_on_rate                               [6];
      varchar  add_on_term                               [4];
	  varchar  peso_tran_limit							 [13];
	  varchar  dollar_tran_limit                         [13];

   }db_ccf02p;



   struct
   {
      char  organization_id                           [5];
      char  merchant_id                               [16];

      char  status                                    [2];
      char  name01                                    [31];
      char  name02                                    [31];
      char  address01                                 [31];
      char  address02                                 [31];
      char  city                                      [21];
      char  country                                   [21];
      char  state                                     [3];
      char  zip_code                                  [11];
      char  intl_code                                 [4];
      char  currency_code                             [4];
      char  contact                                   [31];
      char  phone01                                   [18];
      char  phone02                                   [18];
      char  invoice_batch                             [4];
      char  invoice_subcode                           [3];
      char  process_control_id                        [7];
      char  date_added                                [9];

      char  region_nbr                                [4];  
      char  division_nbr                              [4];  
      char  password                                  [8];  
      char  rps_merchant                              [2];  
      char  house_card_merchant                       [2];  
      char  procurement_merchant                      [2];  
      char  deferred_merchant                         [2];  
      char  cash_bonus_eligible                       [2];  
      char  vip_code                                  [5];  
      char  pos_code                                  [2];  
      char  vs_tcc_code                               [2];  
      char  mc_fcc_code                               [2];  
      char  jcb_sub_code                              [3];  
      char  mall_code                                 [4];  
      char  hc_code                                   [4];  
      char  solicit_code                              [4]; 
       
      char  block_start_date                          [9];
      char  block_end_date                            [9];
      char  credit_purch_max                          [13];
      char  credit_auth_max                           [13];
      char  credit_return_max                         [13];
      char  credit_cash_adv_max                       [13];
      char  credit_man_entry_max                      [13];
      char  credit_cash_back_max                      [13];
      char  debit_purch_max                           [13];
      char  debit_auth_max                            [13];
      char  debit_return_max                          [13];
      char  debit_cash_adv_max                        [13];
      char  debit_man_entry_max                       [13];
      char  debit_cash_back_max                       [13];
      char  aver_purch_amount                         [13];
      char  max_num_returns                           [5];
      char  amount_returns                            [13];
      char  number_man_entries                        [5];
      char  amount_deposits                           [13];
      char  pan_same                                  [3];
      char  totals_ind                                [2];
      char  statistics_ind                            [2];

      char  network_priority_routing_1                [10];
      char  network_priority_routing_2                [10];
      char  network_priority_routing_3                [10];
      char  network_priority_routing_4                [10];
      char  network_priority_routing_5                [10];
      char  network_priority_routing_6                [10];
      char  network_priority_routing_7                [10];
      char  network_priority_routing_8                [10];
      char  network_priority_routing_9                [10];
      char  network_priority_routing_10               [10];
      char  negative_group_id                         [11];
      char  voice_category_code                       [5];
      char  class_code                                [4];
      char  deferred_start_date                       [9];
      char  deferred_end_date                         [9];
      char  group_outlet_code                         [6];
      char  group_type                                [5];
	  char  reload_merchant							  [2];
   
   }pte_mcf01;

   struct
   {
      varchar  organization_id                           [5];
      varchar  merchant_id                               [16];

      varchar  status                                    [2];
      varchar  name01                                    [31];
      varchar  name02                                    [31];
      varchar  address01                                 [31];
      varchar  address02                                 [31];
      varchar  city                                      [21];
      varchar  country                                   [21];
      varchar  state                                     [3];
      varchar  zip_code                                  [11];
      varchar  intl_code                                 [4];
      varchar  currency_code                             [4];
      varchar  contact                                   [31];
      varchar  phone01                                   [18];
      varchar  phone02                                   [18];
      varchar  invoice_batch                             [4];
      varchar  invoice_subcode                           [3];
      varchar  process_control_id                        [7];
      varchar  date_added                                [9];

      varchar  region_nbr                                [4];  
      varchar  division_nbr                              [4];  
      varchar  password                                  [8];  
      varchar  rps_merchant                              [2];  
      varchar  house_card_merchant                       [2];  
      varchar  procurement_merchant                      [2];  
      varchar  deferred_merchant                         [2];  
      varchar  cash_bonus_eligible                       [2];  
      varchar  vip_code                                  [5];  
      varchar  pos_code                                  [2];  
      varchar  vs_tcc_code                               [2];  
      varchar  mc_fcc_code                               [2];  
      varchar  jcb_sub_code                              [3];  
      varchar  mall_code                                 [4];  
      varchar  hc_code                                   [4];  
      varchar  solicit_code                              [4]; 

      varchar  block_start_date                          [9];
      varchar  block_end_date                            [9];
      varchar  credit_purch_max                          [13];
      varchar  credit_auth_max                           [13];
      varchar  credit_return_max                         [13];
      varchar  credit_cash_adv_max                       [13];
      varchar  credit_man_entry_max                      [13];
      varchar  credit_cash_back_max                      [13];
      varchar  debit_purch_max                           [13];
      varchar  debit_auth_max                            [13];
      varchar  debit_return_max                          [13];
      varchar  debit_cash_adv_max                        [13];
      varchar  debit_man_entry_max                       [13];
      varchar  debit_cash_back_max                       [13];
      varchar  aver_purch_amount                         [13];
      varchar  max_num_returns                           [5];
      varchar  amount_returns                            [13];
      varchar  number_man_entries                        [5];
      varchar  amount_deposits                           [13];
      varchar  pan_same                                  [3];
      varchar  totals_ind                                [2];
      varchar  statistics_ind                            [2];

      varchar  network_priority_routing_1                [10];
      varchar  network_priority_routing_2                [10];
      varchar  network_priority_routing_3                [10];
      varchar  network_priority_routing_4                [10];
      varchar  network_priority_routing_5                [10];
      varchar  network_priority_routing_6                [10];
      varchar  network_priority_routing_7                [10];
      varchar  network_priority_routing_8                [10];
      varchar  network_priority_routing_9                [10];
      varchar  network_priority_routing_10               [10];
      varchar  negative_group_id                         [11];
      varchar  voice_category_code                       [5];
      varchar  class_code                                [4];
      varchar  deferred_start_date                       [9];
      varchar  deferred_end_date                         [9];
      varchar  group_outlet_code                         [6];
      varchar  group_type                                [5];
	  varchar  reload_merchant							 [2];

   }db_mcf01;


   struct
   {
      char  card_type                                 [5];
      char  merchant_id                               [16];
      char  organization_id                           [5];

      char  acquirer_id                               [7];
      char  corporate_id                              [7];
      char  settlement_id                             [17];
      char  floor_limit                               [13];

   }pte_mct01;

   struct
   {
      varchar  card_type                                 [5];
      varchar  merchant_id                               [16];
      varchar  organization_id                           [5];

      varchar  acquirer_id                               [7];
      varchar  corporate_id                              [7];
      varchar  settlement_id                             [17];
      varchar  floor_limit                               [13];

   }db_mct01;

   struct
   {
      char  organization_id                        [5];
      char  merchant_id                            [16];
      char  term_length                            [4];
      char  factor                                 [8];
      char  deferred_min_amount                    [11];
      char  deferred_max_amount                    [11];

   }pte_def01;

   struct
   {
      varchar  organization_id                        [5];
      varchar  merchant_id                            [16];
      varchar  term_length                            [4];
      varchar  factor                                 [8]; 
      varchar  deferred_min_amount                    [11];
      varchar  deferred_max_amount                    [11];

   }db_def01;

	struct
	{
	  char	   mcc										  [6];
	  char     bin_low                                    [17];
	  char     bin_high                                   [17];
	  int      pan_length                                 ;
	  int      bin_length								  ;
	  char     country_code                               [4];

	}pte_negative_fraud;


	struct
	{ 
	  varchar     mcc  									  [6];
	  varchar     bin_low                                 [17];
	  varchar     bin_high                                [17];
	  int         pan_length                               ;
	  int         bin_length							   ;
	  varchar     country_code                            [4];
	}db_negative_fraud;

struct
{
   char  unique_id                                 [18];
   char  file_name                                 [10];
   char  file_primary_key                          [51];
   char  changed_by                                [21];
   char  date_modified                             [9];
   char  time_modified                             [7];
   char  field_tag                                 [40];
   char  previous_data                             [51];
   char  current_data                              [51];
   char  reserved                                  [21];
}pte_hst01;


struct
{
   varchar  unique_id                                 [18];
   varchar  file_name                                 [10];
   varchar  file_primary_key                          [51];
   varchar  changed_by                                [21];
   varchar  date_modified                             [9];
   varchar  time_modified                             [7];
   varchar  field_tag                                 [40];
   varchar  previous_data                             [51];
   varchar  current_data                              [51];
   varchar  reserved                                  [21];
}db_hst01;



/* structure of the pte_mppara. */



struct
{
	 char product_code		 				[5];
	 char minmajpurchamt			 		[13];
	 char maxmajpurchamt			 		[13];
	 char mininstamt				 		[13];
	 char maxinstamt				 		[13];
	 char minmajpurchlmt			 		[11];
	 char minpenaltyamt 			 		[16];
	 char maxpenaltyamt 			 		[16];
	 char penaltyper				 		[8];
	 char penaltyday				 		[4];
	 char minamtofaging 			 		[19];
	 char mntowrtof 				 		[3];
	 char BPIminamt 				 		[13];
	 char brokenperdinst			 		[2];
	 char minfreepurchamt			 		[13];
	 char errorunauthamt			 		[16];
	 char fixedmpfee				 		[16];
	 char mpfeepercnt				 		[7];
	 char earlyrepayfeeper			 		[9];
	 char effective_date			 		[9];
	 char maxtrnperday				 		[3];
	 char maxamtperday				 		[16];
	 char authoverlimit 			 		[8];
	 char authpara_response_code_1        	[3];
 	 char authpara_message_1         	  	[3];
 	 char authpara_response_code_2        	[3];
  	 char authpara_message_2         		[3];
 	 char authpara_response_code_3        	[3];
 	 char authpara_message_3         		[3];
}pte_mppara01;


/* structure of the db_mppara. */

struct
{
	  varchar product_code					 [4];
	  varchar minmajpurchamt				 [12];
	  varchar maxmajpurchamt				 [12];
	  varchar mininstamt					 [12];
	  varchar maxinstamt					 [12];
	  varchar minmajpurchlmt				 [10];
	  varchar minpenaltyamt					 [15];
	  varchar maxpenaltyamt					 [15];
	  varchar penaltyper					 [7];
	  varchar penaltyday					 [3];
	  varchar minamtofaging					 [18];
	  varchar mntowrtof						 [2];
	  varchar BPIminamt						 [12];
	  varchar brokenperdinst				 [1];
	  varchar minfreepurchamt				 [12];
	  varchar errorunauthamt				 [15];
	  varchar fixedmpfee					 [15];
	  varchar mpfeepercnt					 [6];
	  varchar earlyrepayfeeper 				 [8];
	  varchar effective_date				 [8];
	  varchar maxtrnperday 					 [2];
	  varchar maxamtperday 					 [15];
	  varchar authoverlimit					 [7];
	  varchar authpara_response_code_1 		 [2];
	  varchar authpara_message_1			 [2];
	  varchar authpara_response_code_2 		 [2];
  	  varchar authpara_message_2			 [2];
	  varchar authpara_response_code_3 		 [2];
	  varchar authpara_message_3			 [2];
}db_mppara01;

/* structure of the pte_mgf01. */

struct
{
	 char merchant_group_id 						[16];
	 char effective_date							[9];
	 
	 char merchgrp_Amount_limit_1					[13];
	 char merchgrepint_nbr_of_months_1				[3];
	 char merchgrepint_INT_rate_1					[8];
	 char merchgrepint_MSF_rate_1					[8];
	 char merchgrepint_nbr_of_months_2				[3];
	 char merchgrepint_INT_rate_2					[8];
	 char merchgrepint_MSF_rate_2					[8];
	 char merchgrepint_nbr_of_months_3				[3];
	 char merchgrepint_INT_rate_3					[8];
	 char merchgrepint_MSF_rate_3					[8];
	 char merchgrepint_nbr_of_months_4				[3];
	 char merchgrepint_INT_rate_4					[8];
	 char merchgrepint_MSF_rate_4					[8];
	 char merchgrepint_nbr_of_months_5				[3];
	 char merchgrepint_INT_rate_5					[8];
	 char merchgrepint_MSF_rate_5					[8];
	 char merchgrepint_nbr_of_months_6				[3];
	 char merchgrepint_INT_rate_6					[8];
	 char merchgrepint_MSF_rate_6					[8];
	 char merchgrepint_nbr_of_months_7				[3];
	 char merchgrepint_INT_rate_7					[8];
	 char merchgrepint_MSF_rate_7					[8];
	 char merchgrepint_nbr_of_months_8				[3];
	 char merchgrepint_INT_rate_8					[8];
	 char merchgrepint_MSF_rate_8					[8];
	 char merchgrepint_nbr_of_months_9				[3];
	 char merchgrepint_INT_rate_9					[8];
	 char merchgrepint_MSF_rate_9					[8];
	 char merchgrepint_nbr_of_months_10 			[3];
	 char merchgrepint_INT_rate_10					[8];
	 char merchgrepint_MSF_rate_10					[8];
	 char merchgrepint_nbr_of_months_10A 			[3];
	 char merchgrepint_INT_rate_10A					[8];
	 char merchgrepint_MSF_rate_10A					[8];
	 char merchgrepint_nbr_of_months_10B 			[3];
	 char merchgrepint_INT_rate_10B					[8];
	 char merchgrepint_MSF_rate_10B					[8];
	 
	 char merchgrp_Amount_limit_2					[13];
	 char merchgrepint_nbr_of_months_11 			[3];
	 char merchgrepint_INT_rate_11					[8];
	 char merchgrepint_MSF_rate_11					[8];
	 char merchgrepint_nbr_of_months_12 			[3];
	 char merchgrepint_INT_rate_12					[8];
	 char merchgrepint_MSF_rate_12					[8];
	 char merchgrepint_nbr_of_months_13 			[3];
	 char merchgrepint_INT_rate_13					[8];
	 char merchgrepint_MSF_rate_13					[8];
	 char merchgrepint_nbr_of_months_14 			[3];
	 char merchgrepint_INT_rate_14					[8];
	 char merchgrepint_MSF_rate_14					[8];
	 char merchgrepint_nbr_of_months_15 			[3];
	 char merchgrepint_INT_rate_15					[8];
	 char merchgrepint_MSF_rate_15					[8];
	 char merchgrepint_nbr_of_months_16 			[3];
	 char merchgrepint_INT_rate_16					[8];
	 char merchgrepint_MSF_rate_16					[8];
	 char merchgrepint_nbr_of_months_17 			[3];
	 char merchgrepint_INT_rate_17					[8];
	 char merchgrepint_MSF_rate_17					[8];
	 char merchgrepint_nbr_of_months_18 			[3];
	 char merchgrepint_INT_rate_18					[8];
	 char merchgrepint_MSF_rate_18					[8];
	 char merchgrepint_nbr_of_months_19 			[3];
	 char merchgrepint_INT_rate_19					[8];
	 char merchgrepint_MSF_rate_19					[8];
	 char merchgrepint_nbr_of_months_20 			[3];
	 char merchgrepint_INT_rate_20					[8];
	 char merchgrepint_MSF_rate_20					[8];
	 char merchgrepint_nbr_of_months_20A 			[3];
	 char merchgrepint_INT_rate_20A					[8];
	 char merchgrepint_MSF_rate_20A					[8];
	 char merchgrepint_nbr_of_months_20B 			[3];
	 char merchgrepint_INT_rate_20B					[8];
	 char merchgrepint_MSF_rate_20B					[8];
	 
	 char merchgrp_Amount_limit_3					[13];
	 char merchgrepint_nbr_of_months_21 			[3];
	 char merchgrepint_INT_rate_21					[8];
	 char merchgrepint_MSF_rate_21					[8];
	 char merchgrepint_nbr_of_months_22 			[3];
	 char merchgrepint_INT_rate_22					[8];
	 char merchgrepint_MSF_rate_22					[8];
	 char merchgrepint_nbr_of_months_23 			[3];
	 char merchgrepint_INT_rate_23					[8];
	 char merchgrepint_MSF_rate_23					[8];
	 char merchgrepint_nbr_of_months_24 			[3];
	 char merchgrepint_INT_rate_24					[8];
	 char merchgrepint_MSF_rate_24					[8];
	 char merchgrepint_nbr_of_months_25 			[3];
	 char merchgrepint_INT_rate_25					[8];
	 char merchgrepint_MSF_rate_25					[8];
	 char merchgrepint_nbr_of_months_26 			[3];
	 char merchgrepint_INT_rate_26					[8];
	 char merchgrepint_MSF_rate_26					[8];
	 char merchgrepint_nbr_of_months_27 			[3];
	 char merchgrepint_INT_rate_27					[8];
	 char merchgrepint_MSF_rate_27					[8];
	 char merchgrepint_nbr_of_months_28 			[3];
	 char merchgrepint_INT_rate_28					[8];
	 char merchgrepint_MSF_rate_28					[8];
	 char merchgrepint_nbr_of_months_29 			[3];
	 char merchgrepint_INT_rate_29					[8];
	 char merchgrepint_MSF_rate_29					[8];	 
	 char merchgrepint_nbr_of_months_30 			[3];
	 char merchgrepint_INT_rate_30					[8];
	 char merchgrepint_MSF_rate_30					[8];
	 char merchgrepint_nbr_of_months_30A 			[3];
	 char merchgrepint_INT_rate_30A					[8];
	 char merchgrepint_MSF_rate_30A					[8];
	 char merchgrepint_nbr_of_months_30B 			[3];
	 char merchgrepint_INT_rate_30B					[8];
	 char merchgrepint_MSF_rate_30B					[8];
	 
	 char merchgrp_Amount_limit_4					[13];
	 char merchgrepint_nbr_of_months_31 			[3];
 	 char merchgrepint_INT_rate_31					[8];
	 char merchgrepint_MSF_rate_31					[8];
	 char merchgrepint_nbr_of_months_32 			[3];
	 char merchgrepint_INT_rate_32					[8];
	 char merchgrepint_MSF_rate_32					[8];
	 char merchgrepint_nbr_of_months_33 			[3];
	 char merchgrepint_INT_rate_33					[8];
	 char merchgrepint_MSF_rate_33					[8];
	 char merchgrepint_nbr_of_months_34 			[3];
	 char merchgrepint_INT_rate_34					[8];
	 char merchgrepint_MSF_rate_34					[8];
	 char merchgrepint_nbr_of_months_35 			[3];
	 char merchgrepint_INT_rate_35					[8];
	 char merchgrepint_MSF_rate_35					[8];
	 char merchgrepint_nbr_of_months_36 			[3];
	 char merchgrepint_INT_rate_36					[8];
	 char merchgrepint_MSF_rate_36					[8];
	 char merchgrepint_nbr_of_months_37 			[3];
	 char merchgrepint_INT_rate_37					[8];
	 char merchgrepint_MSF_rate_37					[8];
	 char merchgrepint_nbr_of_months_38 			[3];
	 char merchgrepint_INT_rate_38					[8];
	 char merchgrepint_MSF_rate_38					[8];
	 char merchgrepint_nbr_of_months_39 			[3];
	 char merchgrepint_INT_rate_39					[8];
	 char merchgrepint_MSF_rate_39					[8];
	 char merchgrepint_nbr_of_months_40 			[3];
	 char merchgrepint_INT_rate_40					[8];
	 char merchgrepint_MSF_rate_40					[8];
	 char merchgrepint_nbr_of_months_40A			[3];
	 char merchgrepint_INT_rate_40A					[8];
	 char merchgrepint_MSF_rate_40A					[8];
	 char merchgrepint_nbr_of_months_40B 			[3];
	 char merchgrepint_INT_rate_40B					[8];
	 char merchgrepint_MSF_rate_40B					[8];
}pte_mgf01;

/* structure of the db_mgf01. */


struct
{
	 varchar merchant_group_id 					[15];
	 varchar effective_date						[8];
	 
	 varchar merchgrp_Amount_limit_1			[12];
	 varchar merchgrepint_nbr_of_months_1		[2];
	 varchar merchgrepint_INT_rate_1			[7];
	 varchar merchgrepint_MSF_rate_1			[7];
	 varchar merchgrepint_nbr_of_months_2		[2];
	 varchar merchgrepint_INT_rate_2			[7];
	 varchar merchgrepint_MSF_rate_2			[7];
	 varchar merchgrepint_nbr_of_months_3		[2];
	 varchar merchgrepint_INT_rate_3			[7];
	 varchar merchgrepint_MSF_rate_3			[7];
	 varchar merchgrepint_nbr_of_months_4		[2];
	 varchar merchgrepint_INT_rate_4			[7];
	 varchar merchgrepint_MSF_rate_4			[7];
	 varchar merchgrepint_nbr_of_months_5		[2];
	 varchar merchgrepint_INT_rate_5			[7];
	 varchar merchgrepint_MSF_rate_5			[7];
	 varchar merchgrepint_nbr_of_months_6		[2];
	 varchar merchgrepint_INT_rate_6			[7];
	 varchar merchgrepint_MSF_rate_6			[7];
	 varchar merchgrepint_nbr_of_months_7		[2];
	 varchar merchgrepint_INT_rate_7			[7];
	 varchar merchgrepint_MSF_rate_7			[7];
	 varchar merchgrepint_nbr_of_months_8		[2];
	 varchar merchgrepint_INT_rate_8			[7];
	 varchar merchgrepint_MSF_rate_8			[7];
	 varchar merchgrepint_nbr_of_months_9		[2];
	 varchar merchgrepint_INT_rate_9			[7];
	 varchar merchgrepint_MSF_rate_9			[7];
	 varchar merchgrepint_nbr_of_months_10		[2];
	 varchar merchgrepint_INT_rate_10			[7];
	 varchar merchgrepint_MSF_rate_10			[7];
	 varchar merchgrepint_nbr_of_months_10A		[2];
	 varchar merchgrepint_INT_rate_10A			[7];
	 varchar merchgrepint_MSF_rate_10A			[7];
	 varchar merchgrepint_nbr_of_months_10B		[2];
	 varchar merchgrepint_INT_rate_10B			[7];
	 varchar merchgrepint_MSF_rate_10B			[7];
	 
 	 varchar merchgrp_Amount_limit_2			[12];
	 varchar merchgrepint_nbr_of_months_11		[2];
	 varchar merchgrepint_INT_rate_11			[7];
	 varchar merchgrepint_MSF_rate_11			[7];
	 varchar merchgrepint_nbr_of_months_12		[2];
	 varchar merchgrepint_INT_rate_12			[7];
	 varchar merchgrepint_MSF_rate_12			[7];
	 varchar merchgrepint_nbr_of_months_13		[2];
	 varchar merchgrepint_INT_rate_13			[7];
	 varchar merchgrepint_MSF_rate_13			[7];
	 varchar merchgrepint_nbr_of_months_14		[2];
	 varchar merchgrepint_INT_rate_14			[7];
	 varchar merchgrepint_MSF_rate_14			[7];
	 varchar merchgrepint_nbr_of_months_15		[2];
	 varchar merchgrepint_INT_rate_15			[7];
	 varchar merchgrepint_MSF_rate_15			[7];
	 varchar merchgrepint_nbr_of_months_16		[2];
	 varchar merchgrepint_INT_rate_16			[7];
	 varchar merchgrepint_MSF_rate_16			[7];
	 varchar merchgrepint_nbr_of_months_17		[2];
	 varchar merchgrepint_INT_rate_17			[7];
	 varchar merchgrepint_MSF_rate_17			[7];
	 varchar merchgrepint_nbr_of_months_18		[2];
	 varchar merchgrepint_INT_rate_18			[7];
	 varchar merchgrepint_MSF_rate_18			[7];
	 varchar merchgrepint_nbr_of_months_19		[2];
	 varchar merchgrepint_INT_rate_19			[7];
	 varchar merchgrepint_MSF_rate_19			[7];
	 varchar merchgrepint_nbr_of_months_20		[2];
	 varchar merchgrepint_INT_rate_20			[7];
	 varchar merchgrepint_MSF_rate_20			[7];
	 varchar merchgrepint_nbr_of_months_20A		[2];
	 varchar merchgrepint_INT_rate_20A			[7];
	 varchar merchgrepint_MSF_rate_20A			[7];
	 varchar merchgrepint_nbr_of_months_20B		[2];
	 varchar merchgrepint_INT_rate_20B			[7];
	 varchar merchgrepint_MSF_rate_20B			[7];
 	 
 	 varchar merchgrp_Amount_limit_3			[12];
	 varchar merchgrepint_nbr_of_months_21		[2];
	 varchar merchgrepint_INT_rate_21			[7];
	 varchar merchgrepint_MSF_rate_21			[7];
	 varchar merchgrepint_nbr_of_months_22		[2];
	 varchar merchgrepint_INT_rate_22			[7];
	 varchar merchgrepint_MSF_rate_22			[7];
	 varchar merchgrepint_nbr_of_months_23		[2];
	 varchar merchgrepint_INT_rate_23			[7];
	 varchar merchgrepint_MSF_rate_23			[7];
	 varchar merchgrepint_nbr_of_months_24		[2];
	 varchar merchgrepint_INT_rate_24			[7];
	 varchar merchgrepint_MSF_rate_24			[7];
	 varchar merchgrepint_nbr_of_months_25		[2];
	 varchar merchgrepint_INT_rate_25			[7];
	 varchar merchgrepint_MSF_rate_25			[7];
	 varchar merchgrepint_nbr_of_months_26		[2];
	 varchar merchgrepint_INT_rate_26			[7];
	 varchar merchgrepint_MSF_rate_26			[7];
	 varchar merchgrepint_nbr_of_months_27		[2];
	 varchar merchgrepint_INT_rate_27			[7];
	 varchar merchgrepint_MSF_rate_27			[7];
	 varchar merchgrepint_nbr_of_months_28		[2];
	 varchar merchgrepint_INT_rate_28			[7];
	 varchar merchgrepint_MSF_rate_28			[7];
	 varchar merchgrepint_nbr_of_months_29		[2];
	 varchar merchgrepint_INT_rate_29			[7];
	 varchar merchgrepint_MSF_rate_29			[7];
	 varchar merchgrepint_nbr_of_months_30		[2];
	 varchar merchgrepint_INT_rate_30			[7];
	 varchar merchgrepint_MSF_rate_30			[7];
	 varchar merchgrepint_nbr_of_months_30A		[2];
	 varchar merchgrepint_INT_rate_30A			[7];
	 varchar merchgrepint_MSF_rate_30A			[7];
	 varchar merchgrepint_nbr_of_months_30B		[2];
	 varchar merchgrepint_INT_rate_30B			[7];
	 varchar merchgrepint_MSF_rate_30B			[7];
	 
 	 varchar merchgrp_Amount_limit_4			[12];
	 varchar merchgrepint_nbr_of_months_31		[2];
	 varchar merchgrepint_INT_rate_31			[7];
	 varchar merchgrepint_MSF_rate_31			[7];
	 varchar merchgrepint_nbr_of_months_32		[2];
	 varchar merchgrepint_INT_rate_32			[7];
	 varchar merchgrepint_MSF_rate_32			[7];
	 varchar merchgrepint_nbr_of_months_33		[2];
	 varchar merchgrepint_INT_rate_33			[7];
	 varchar merchgrepint_MSF_rate_33			[7];
	 varchar merchgrepint_nbr_of_months_34		[2];
	 varchar merchgrepint_INT_rate_34			[7];
	 varchar merchgrepint_MSF_rate_34			[7];
	 varchar merchgrepint_nbr_of_months_35		[2];
	 varchar merchgrepint_INT_rate_35			[7];
	 varchar merchgrepint_MSF_rate_35			[7];
	 varchar merchgrepint_nbr_of_months_36		[2];
	 varchar merchgrepint_INT_rate_36			[7];
	 varchar merchgrepint_MSF_rate_36			[7];
	 varchar merchgrepint_nbr_of_months_37		[2];
	 varchar merchgrepint_INT_rate_37			[7];
	 varchar merchgrepint_MSF_rate_37			[7];
	 varchar merchgrepint_nbr_of_months_38		[2];
	 varchar merchgrepint_INT_rate_38			[7];
	 varchar merchgrepint_MSF_rate_38			[7];
	 varchar merchgrepint_nbr_of_months_39		[2];
	 varchar merchgrepint_INT_rate_39			[7];
	 varchar merchgrepint_MSF_rate_39			[7];
	 varchar merchgrepint_nbr_of_months_40		[2];
	 varchar merchgrepint_INT_rate_40			[7];
	 varchar merchgrepint_MSF_rate_40			[7];
	 varchar merchgrepint_nbr_of_months_40A		[2];
	 varchar merchgrepint_INT_rate_40A			[7];
	 varchar merchgrepint_MSF_rate_40A			[7];
	 varchar merchgrepint_nbr_of_months_40B		[2];
	 varchar merchgrepint_INT_rate_40B			[7];
	 varchar merchgrepint_MSF_rate_40B			[7];
	 
 }db_mgf01;





EXEC SQL END DECLARE SECTION;


/****************************************************************************/
/*********************************************************************************/
void db_to_paf01 ( pPAF01 paf01_ptr )
{
   memset(paf01_ptr, 0, sizeof(PAF01));
   memcpy(paf01_ptr->primary_key.primary_acct_nbr, db_paf01.primary_acct_nbr.arr, db_paf01.primary_acct_nbr.len);
   memcpy(paf01_ptr->name_dba, db_paf01.name_dba.arr, db_paf01.name_dba.len);
   memcpy(paf01_ptr->address1, db_paf01.address1.arr, db_paf01.address1.len);
   memcpy(paf01_ptr->address2, db_paf01.address2.arr, db_paf01.address2.len);
   memcpy(paf01_ptr->city, db_paf01.city.arr, db_paf01.city.len);
   memcpy(paf01_ptr->state, db_paf01.state.arr, db_paf01.state.len);
   memcpy(paf01_ptr->zip_code, db_paf01.zip_code.arr, db_paf01.zip_code.len);
   memcpy(paf01_ptr->home_phone, db_paf01.home_phone.arr, db_paf01.home_phone.len);
   memcpy(paf01_ptr->work_phone, db_paf01.work_phone.arr, db_paf01.work_phone.len);
   memcpy(paf01_ptr->status, db_paf01.status.arr, db_paf01.status.len);
   memcpy(paf01_ptr->caf_profile_id, db_paf01.caf_profile_id.arr, db_paf01.caf_profile_id.len);
   memcpy(paf01_ptr->type, db_paf01.type.arr, db_paf01.type.len);
   memcpy(paf01_ptr->block_status, db_paf01.block_status.arr, db_paf01.block_status.len);
   memcpy(paf01_ptr->corp_acct_nbr, db_paf01.corp_acct_nbr.arr, db_paf01.corp_acct_nbr.len);
   memcpy(paf01_ptr->account_name, db_paf01.account_name.arr, db_paf01.account_name.len);
   memcpy(paf01_ptr->past_due_amount, db_paf01.past_due_amount.arr, db_paf01.past_due_amount.len);
   memcpy(paf01_ptr->min_pay_code, db_paf01.min_pay_code.arr, db_paf01.min_pay_code.len);
   memcpy(paf01_ptr->Credit_limit, db_paf01.Credit_limit.arr, db_paf01.Credit_limit.len);
   memcpy(paf01_ptr->Custr_nbr, db_paf01.Custr_nbr.arr, db_paf01.Custr_nbr.len);
   memcpy(paf01_ptr->APP_Source, db_paf01.APP_Source.arr, db_paf01.APP_Source.len);
   memcpy(paf01_ptr->COMP_Name, db_paf01.COMP_Name.arr, db_paf01.COMP_Name.len);
}

/*************************************************************************************/
/*************************************************************************************/
void db_to_dcf01 ( pDCF01 dcf01_ptr )
{
   memset(dcf01_ptr, 0, sizeof(DCF01));
   memcpy(dcf01_ptr->primary_key.device_id, db_dcf01.device_id.arr, db_dcf01.device_id.len);
   memcpy(dcf01_ptr->short_name, db_dcf01.short_name.arr, db_dcf01.short_name.len);
   memcpy(dcf01_ptr->phone, db_dcf01.phone.arr, db_dcf01.phone.len);
   memcpy(dcf01_ptr->industry_code, db_dcf01.industry_code.arr, db_dcf01.industry_code.len);
   memcpy(dcf01_ptr->category_code, db_dcf01.category_code.arr, db_dcf01.category_code.len);
   memcpy(dcf01_ptr->contact, db_dcf01.contact.arr, db_dcf01.contact.len);
   memcpy(dcf01_ptr->device_type, db_dcf01.device_type.arr, db_dcf01.device_type.len);
   memcpy(dcf01_ptr->date_added, db_dcf01.date_added.arr, db_dcf01.date_added.len);
   memcpy(dcf01_ptr->current_bus_date, db_dcf01.current_bus_date.arr, db_dcf01.current_bus_date.len);
   memcpy(dcf01_ptr->dept_nbr, db_dcf01.dept_nbr.arr, db_dcf01.dept_nbr.len);
   memcpy(dcf01_ptr->organization_id, db_dcf01.organization_id.arr, db_dcf01.organization_id.len);
   memcpy(dcf01_ptr->merchant_id, db_dcf01.merchant_id.arr, db_dcf01.merchant_id.len);
   memcpy(dcf01_ptr->aba_nbr, db_dcf01.aba_nbr.arr, db_dcf01.aba_nbr.len);
   memcpy(dcf01_ptr->status, db_dcf01.status.arr, db_dcf01.status.len);
   memcpy(dcf01_ptr->totals_ind, db_dcf01.totals_ind.arr, db_dcf01.totals_ind.len);
   memcpy(dcf01_ptr->statistics_ind, db_dcf01.statistics_ind.arr, db_dcf01.statistics_ind.len);
   memcpy(dcf01_ptr->valid_transactions, db_dcf01.valid_transactions.arr, db_dcf01.valid_transactions.len);
   memcpy(dcf01_ptr->draft_capture_type, db_dcf01.draft_capture_type.arr, db_dcf01.draft_capture_type.len);
   memcpy(dcf01_ptr->amex_charge_desc, db_dcf01.amex_charge_desc.arr, db_dcf01.amex_charge_desc.len);
   memcpy(dcf01_ptr->diners_charge_desc, db_dcf01.diners_charge_desc.arr, db_dcf01.diners_charge_desc.len);
   memcpy(dcf01_ptr->additional_pos_information, db_dcf01.additional_pos_information.arr, db_dcf01.additional_pos_information.len);
   memcpy(dcf01_ptr->batch_nbr, db_dcf01.batch_nbr.arr, db_dcf01.batch_nbr.len);
   memcpy(dcf01_ptr->rental_program, db_dcf01.rental_program.arr, db_dcf01.rental_program.len);
   memcpy(dcf01_ptr->nsp_process, db_dcf01.nsp_process.arr, db_dcf01.nsp_process.len);
   memcpy(dcf01_ptr->pin_type, db_dcf01.pin_type.arr, db_dcf01.pin_type.len);
   memcpy(dcf01_ptr->kc, db_dcf01.kc.arr, db_dcf01.kc.len);
   memcpy(dcf01_ptr->encr_type, db_dcf01.encr_type.arr, db_dcf01.encr_type.len);
   memcpy(dcf01_ptr->pad_char, db_dcf01.pad_char.arr, db_dcf01.pad_char.len);
   memcpy(dcf01_ptr->keyxchange_cnt, db_dcf01.keyxchange_cnt.arr, db_dcf01.keyxchange_cnt.len);
   memcpy(dcf01_ptr->txn_cnt, db_dcf01.txn_cnt.arr, db_dcf01.txn_cnt.len);
   memcpy(dcf01_ptr->cwk, db_dcf01.cwk.arr, db_dcf01.cwk.len);
   memcpy(dcf01_ptr->kek, db_dcf01.kek.arr, db_dcf01.kek.len);
   memcpy(dcf01_ptr->retired_cwk, db_dcf01.retired_cwk.arr, db_dcf01.retired_cwk.len);
   memcpy(dcf01_ptr->icv, db_dcf01.icv.arr, db_dcf01.icv.len);

   memcpy(dcf01_ptr->pin_block_format, db_dcf01.pin_block_format.arr, db_dcf01.pin_block_format.len);                                
   memcpy(dcf01_ptr->encryption_method, db_dcf01.encryption_method.arr, db_dcf01.encryption_method.len);
   memcpy(dcf01_ptr->pin_key, db_dcf01.pin_key.arr, db_dcf01.pin_key.len);
   memcpy(dcf01_ptr->communication_key, db_dcf01.communication_key.arr, db_dcf01.communication_key.len);
   memcpy(dcf01_ptr->auto_init_activation, db_dcf01.auto_init_activation.arr, db_dcf01.auto_init_activation.len);
   memcpy(dcf01_ptr->auto_init_time, db_dcf01.auto_init_time.arr, db_dcf01.auto_init_time.len);
   memcpy(dcf01_ptr->auto_init_ref_number, db_dcf01.auto_init_ref_number.arr, db_dcf01.auto_init_ref_number.len);
   memcpy(dcf01_ptr->auto_program_load_activation, db_dcf01.auto_program_load_activation.arr, db_dcf01.auto_program_load_activation.len);
   memcpy(dcf01_ptr->auto_program_load_time, db_dcf01.auto_program_load_time.arr, db_dcf01.auto_program_load_time.len);
   memcpy(dcf01_ptr->auto_program_load_ref_number, db_dcf01.auto_program_load_ref_number.arr, db_dcf01.auto_program_load_ref_number.len);
   memcpy(dcf01_ptr->auto_icepac_activation, db_dcf01.auto_icepac_activation.arr, db_dcf01.auto_icepac_activation.len);
  
}

/*************************************************************************************/
/*************************************************************************************/
void db_to_acf01 ( pACF01 acf01_ptr )
{
   memset(acf01_ptr, 0, sizeof(ACF01));
   memcpy(acf01_ptr->primary_key.account_type, db_acf01.account_type.arr, db_acf01.account_type.len);
   memcpy(acf01_ptr->primary_key.account_nbr, db_acf01.account_nbr.arr, db_acf01.account_nbr.len);
   memcpy(acf01_ptr->status, db_acf01.status.arr, db_acf01.status.len);
   memcpy(acf01_ptr->date_added, db_acf01.date_added.arr, db_acf01.date_added.len);
   memcpy(acf01_ptr->maint_date, db_acf01.maint_date.arr, db_acf01.maint_date.len);
   memcpy(acf01_ptr->changed_by, db_acf01.changed_by.arr, db_acf01.changed_by.len);
   memcpy(acf01_ptr->credit_limit, db_acf01.credit_limit.arr, db_acf01.credit_limit.len);
   memcpy(acf01_ptr->available, db_acf01.available.arr, db_acf01.available.len);
   memcpy(acf01_ptr->outstanding, db_acf01.outstanding.arr, db_acf01.outstanding.len);
   memcpy(acf01_ptr->ledger_balance, db_acf01.ledger_balance.arr, db_acf01.ledger_balance.len);
   memcpy(acf01_ptr->cash_limit, db_acf01.cash_limit.arr, db_acf01.cash_limit.len);
   memcpy(acf01_ptr->cash_available, db_acf01.cash_available.arr, db_acf01.cash_available.len);
   memcpy(acf01_ptr->cash_outstanding, db_acf01.cash_outstanding.arr, db_acf01.cash_outstanding.len);

}


/*************************************************************************************/
/*************************************************************************************/
void db_to_ccf01 ( pCCF01 ccf01_ptr )
{
   memset(ccf01_ptr, 0, sizeof(CCF01));
   memcpy(ccf01_ptr->primary_key.card_type, db_ccf01.card_type.arr, db_ccf01.card_type.len);
   memcpy(ccf01_ptr->primary_key.card_nbr, db_ccf01.card_nbr.arr, db_ccf01.card_nbr.len);
   memcpy(ccf01_ptr->primary_acct_nbr, db_ccf01.primary_acct_nbr.arr, db_ccf01.primary_acct_nbr.len);
   memcpy(ccf01_ptr->name_dba, db_ccf01.name_dba.arr, db_ccf01.name_dba.len);
   memcpy(ccf01_ptr->address1, db_ccf01.address1.arr, db_ccf01.address1.len);
   memcpy(ccf01_ptr->address2, db_ccf01.address2.arr, db_ccf01.address2.len);
   memcpy(ccf01_ptr->city, db_ccf01.city.arr, db_ccf01.city.len);
   memcpy(ccf01_ptr->state, db_ccf01.state.arr, db_ccf01.state.len);
   memcpy(ccf01_ptr->zip_code, db_ccf01.zip_code.arr, db_ccf01.zip_code.len);
   memcpy(ccf01_ptr->home_phone, db_ccf01.home_phone.arr, db_ccf01.home_phone.len);
   memcpy(ccf01_ptr->work_phone, db_ccf01.work_phone.arr, db_ccf01.work_phone.len);
   memcpy(ccf01_ptr->dob, db_ccf01.dob.arr, db_ccf01.dob.len);
   memcpy(ccf01_ptr->profession, db_ccf01.profession.arr, db_ccf01.profession.len);
   memcpy(ccf01_ptr->country, db_ccf01.country.arr, db_ccf01.country.len);
   memcpy(ccf01_ptr->nbr_cards, db_ccf01.nbr_cards.arr, db_ccf01.nbr_cards.len);
   memcpy(ccf01_ptr->status, db_ccf01.status.arr, db_ccf01.status.len);
   memcpy(ccf01_ptr->sex, db_ccf01.sex.arr, db_ccf01.sex.len);
   memcpy(ccf01_ptr->mother_maiden_name, db_ccf01.mother_maiden_name.arr, db_ccf01.mother_maiden_name.len);
   memcpy(ccf01_ptr->membership_id, db_ccf01.membership_id.arr, db_ccf01.membership_id.len);
   memcpy(ccf01_ptr->cardholder_id, db_ccf01.cardholder_id.arr, db_ccf01.cardholder_id.len);
   memcpy(ccf01_ptr->block_status, db_ccf01.block_status.arr, db_ccf01.block_status.len);
   memcpy(ccf01_ptr->specialty_code, db_ccf01.specialty_code.arr, db_ccf01.specialty_code.len);
   memcpy(ccf01_ptr->vip_acct_code, db_ccf01.vip_acct_code.arr, db_ccf01.vip_acct_code.len);
}

/*************************************************************************************/
/*************************************************************************************/
void db_to_ccf02p ( pCCF02P ccf02p_ptr )
{
   memset(ccf02p_ptr, 0, sizeof(CCF02P));
   memcpy(ccf02p_ptr->primary_key.card_type, db_ccf02p.card_type.arr, db_ccf02p.card_type.len);
   memcpy(ccf02p_ptr->primary_key.card_nbr, db_ccf02p.card_nbr.arr, db_ccf02p.card_nbr.len);
   memcpy(ccf02p_ptr->primary_acct_nbr, db_ccf02p.primary_acct_nbr.arr, db_ccf02p.primary_acct_nbr.len);
   memcpy(ccf02p_ptr->pin_offset, db_ccf02p.pin_offset.arr, db_ccf02p.pin_offset.len);
   memcpy(ccf02p_ptr->caf_profile_id, db_ccf02p.caf_profile_id.arr, db_ccf02p.caf_profile_id.len);
   memcpy(ccf02p_ptr->status, db_ccf02p.status.arr, db_ccf02p.status.len);
   memcpy(ccf02p_ptr->date_added, db_ccf02p.date_added.arr, db_ccf02p.date_added.len);
   memcpy(ccf02p_ptr->maint_date, db_ccf02p.maint_date.arr, db_ccf02p.maint_date.len);
   memcpy(ccf02p_ptr->changed_by, db_ccf02p.changed_by.arr, db_ccf02p.changed_by.len);
   memcpy(ccf02p_ptr->card_class, db_ccf02p.card_class.arr, db_ccf02p.card_class.len);
   memcpy(ccf02p_ptr->expire_date, db_ccf02p.expire_date.arr, db_ccf02p.expire_date.len);
   memcpy(ccf02p_ptr->effect_date, db_ccf02p.effect_date.arr, db_ccf02p.effect_date.len);
   memcpy(ccf02p_ptr->percent_deposit, db_ccf02p.percent_deposit.arr, db_ccf02p.percent_deposit.len);
   memcpy(ccf02p_ptr->percent_avail_allowed, db_ccf02p.percent_avail_allowed.arr, db_ccf02p.percent_avail_allowed.len);
   memcpy(ccf02p_ptr->credit_line, db_ccf02p.credit_line.arr, db_ccf02p.credit_line.len);
   memcpy(ccf02p_ptr->outstanding_auths, db_ccf02p.outstanding_auths.arr, db_ccf02p.outstanding_auths.len);
   memcpy(ccf02p_ptr->allowed, db_ccf02p.allowed.arr, db_ccf02p.allowed.len);
   memcpy(ccf02p_ptr->currency_code, db_ccf02p.currency_code.arr, db_ccf02p.currency_code.len);
   memcpy(ccf02p_ptr->country_code, db_ccf02p.country_code.arr, db_ccf02p.country_code.len);
   memcpy(ccf02p_ptr->peso_saving_acct, db_ccf02p.peso_saving_acct.arr, db_ccf02p.peso_saving_acct.len);
   memcpy(ccf02p_ptr->peso_current_acct, db_ccf02p.peso_current_acct.arr, db_ccf02p.peso_current_acct.len);
   memcpy(ccf02p_ptr->dollar_saving_acct, db_ccf02p.dollar_saving_acct.arr, db_ccf02p.dollar_saving_acct.len);
   memcpy(ccf02p_ptr->dollar_current_acct, db_ccf02p.dollar_current_acct.arr, db_ccf02p.dollar_current_acct.len);
   memcpy(ccf02p_ptr->product_codes, db_ccf02p.product_codes.arr, db_ccf02p.product_codes.len);
   memcpy(ccf02p_ptr->cash_bonus_eligible, db_ccf02p.cash_bonus_eligible.arr, db_ccf02p.cash_bonus_eligible.len);
   memcpy(ccf02p_ptr->visa_purchase_card, db_ccf02p.visa_purchase_card.arr, db_ccf02p.visa_purchase_card.len);
   memcpy(ccf02p_ptr->related_acct[0].type, db_ccf02p.related_acct_type_1.arr, db_ccf02p.related_acct_type_1.len);
   memcpy(ccf02p_ptr->related_acct[0].nbr, db_ccf02p.related_acct_nbr_1.arr, db_ccf02p.related_acct_nbr_1.len);
   memcpy(ccf02p_ptr->related_acct[1].type, db_ccf02p.related_acct_type_2.arr, db_ccf02p.related_acct_type_2.len);
   memcpy(ccf02p_ptr->related_acct[1].nbr, db_ccf02p.related_acct_nbr_2.arr, db_ccf02p.related_acct_nbr_2.len);
   memcpy(ccf02p_ptr->related_acct[2].type, db_ccf02p.related_acct_type_3.arr, db_ccf02p.related_acct_type_3.len);
   memcpy(ccf02p_ptr->related_acct[2].nbr, db_ccf02p.related_acct_nbr_3.arr, db_ccf02p.related_acct_nbr_3.len);
   memcpy(ccf02p_ptr->related_acct[3].type, db_ccf02p.related_acct_type_4.arr, db_ccf02p.related_acct_type_4.len);
   memcpy(ccf02p_ptr->related_acct[3].nbr, db_ccf02p.related_acct_nbr_4.arr, db_ccf02p.related_acct_nbr_4.len);
   memcpy(ccf02p_ptr->related_acct[4].type, db_ccf02p.related_acct_type_5.arr, db_ccf02p.related_acct_type_5.len);
   memcpy(ccf02p_ptr->related_acct[4].nbr, db_ccf02p.related_acct_nbr_5.arr, db_ccf02p.related_acct_nbr_5.len);
   memcpy(ccf02p_ptr->related_acct[5].type, db_ccf02p.related_acct_type_6.arr, db_ccf02p.related_acct_type_6.len);
   memcpy(ccf02p_ptr->related_acct[5].nbr, db_ccf02p.related_acct_nbr_6.arr, db_ccf02p.related_acct_nbr_6.len);
   memcpy(ccf02p_ptr->related_acct[6].type, db_ccf02p.related_acct_type_7.arr, db_ccf02p.related_acct_type_7.len);
   memcpy(ccf02p_ptr->related_acct[6].nbr, db_ccf02p.related_acct_nbr_7.arr, db_ccf02p.related_acct_nbr_7.len);
   memcpy(ccf02p_ptr->related_acct[7].type, db_ccf02p.related_acct_type_8.arr, db_ccf02p.related_acct_type_8.len);
   memcpy(ccf02p_ptr->related_acct[7].nbr, db_ccf02p.related_acct_nbr_8.arr, db_ccf02p.related_acct_nbr_8.len);
   memcpy(ccf02p_ptr->related_acct[8].type, db_ccf02p.related_acct_type_9.arr, db_ccf02p.related_acct_type_9.len);
   memcpy(ccf02p_ptr->related_acct[8].nbr, db_ccf02p.related_acct_nbr_9.arr, db_ccf02p.related_acct_nbr_9.len);
   memcpy(ccf02p_ptr->related_acct[9].type, db_ccf02p.related_acct_type_10.arr, db_ccf02p.related_acct_type_10.len);
   memcpy(ccf02p_ptr->related_acct[9].nbr, db_ccf02p.related_acct_nbr_10.arr, db_ccf02p.related_acct_nbr_10.len);
   memcpy(ccf02p_ptr->pin_verification_override, db_ccf02p.pin_verification_override.arr, db_ccf02p.pin_verification_override.len);
   memcpy(ccf02p_ptr->pin, db_ccf02p.pin.arr, db_ccf02p.pin.len);
   memcpy(ccf02p_ptr->pvki, db_ccf02p.pvki.arr, db_ccf02p.pvki.len);  /* Added by SDG on Feb 14*/
   memcpy(ccf02p_ptr->add_on_rate, db_ccf02p.add_on_rate.arr, db_ccf02p.add_on_rate.len);
   memcpy(ccf02p_ptr->add_on_term, db_ccf02p.add_on_term.arr, db_ccf02p.add_on_term.len);
   memcpy(ccf02p_ptr->peso_tran_limit, db_ccf02p.peso_tran_limit.arr, db_ccf02p.peso_tran_limit.len);
   memcpy(ccf02p_ptr->dollar_tran_limit, db_ccf02p.dollar_tran_limit.arr, db_ccf02p.dollar_tran_limit.len);
} 

/*************************************************************************************/
/*************************************************************************************/
void db_to_mcf01 ( pMCF01 mcf01_ptr )
{
   memset(mcf01_ptr, 0, sizeof(MCF01));
   memcpy(mcf01_ptr->primary_key.organization_id, db_mcf01.organization_id.arr, db_mcf01.organization_id.len);
   memcpy(mcf01_ptr->primary_key.merchant_id, db_mcf01.merchant_id.arr, db_mcf01.merchant_id.len);

   memcpy(mcf01_ptr->status, db_mcf01.status.arr, db_mcf01.status.len);
   memcpy(mcf01_ptr->name01, db_mcf01.name01.arr, db_mcf01.name01.len);
   memcpy(mcf01_ptr->name02, db_mcf01.name02.arr, db_mcf01.name02.len);
   memcpy(mcf01_ptr->address01, db_mcf01.address01.arr, db_mcf01.address01.len);
   memcpy(mcf01_ptr->address02, db_mcf01.address02.arr, db_mcf01.address02.len);
   memcpy(mcf01_ptr->city, db_mcf01.city.arr, db_mcf01.city.len);
   memcpy(mcf01_ptr->country, db_mcf01.country.arr, db_mcf01.country.len);
   memcpy(mcf01_ptr->state, db_mcf01.state.arr, db_mcf01.state.len);
   memcpy(mcf01_ptr->zip_code, db_mcf01.zip_code.arr, db_mcf01.zip_code.len);
   memcpy(mcf01_ptr->intl_code, db_mcf01.intl_code.arr, db_mcf01.intl_code.len);
   memcpy(mcf01_ptr->currency_code, db_mcf01.currency_code.arr, db_mcf01.currency_code.len);
   memcpy(mcf01_ptr->contact, db_mcf01.contact.arr, db_mcf01.contact.len);
   memcpy(mcf01_ptr->phone01, db_mcf01.phone01.arr, db_mcf01.phone01.len);
   memcpy(mcf01_ptr->phone02, db_mcf01.phone02.arr, db_mcf01.phone02.len);
   memcpy(mcf01_ptr->invoice_batch, db_mcf01.invoice_batch.arr, db_mcf01.invoice_batch.len);
   memcpy(mcf01_ptr->invoice_subcode, db_mcf01.invoice_subcode.arr, db_mcf01.invoice_subcode.len);
   memcpy(mcf01_ptr->process_control_id, db_mcf01.process_control_id.arr, db_mcf01.process_control_id.len);
   memcpy(mcf01_ptr->date_added, db_mcf01.date_added.arr, db_mcf01.date_added.len);
   
   memcpy(mcf01_ptr->region_nbr, db_mcf01.region_nbr.arr, db_mcf01.region_nbr.len);
   memcpy(mcf01_ptr->division_nbr, db_mcf01.division_nbr.arr, db_mcf01.division_nbr.len);
   memcpy(mcf01_ptr->password, db_mcf01.password.arr, db_mcf01.password.len);
   memcpy(mcf01_ptr->rps_merchant, db_mcf01.rps_merchant.arr, db_mcf01.rps_merchant.len);
   memcpy(mcf01_ptr->house_card_merchant, db_mcf01.house_card_merchant.arr, db_mcf01.house_card_merchant.len);
   memcpy(mcf01_ptr->procurement_merchant, db_mcf01.procurement_merchant.arr, db_mcf01.procurement_merchant.len);
   memcpy(mcf01_ptr->deferred_merchant, db_mcf01.deferred_merchant.arr, db_mcf01.deferred_merchant.len);
   memcpy(mcf01_ptr->cash_bonus_eligible, db_mcf01.cash_bonus_eligible.arr, db_mcf01.cash_bonus_eligible.len);
   memcpy(mcf01_ptr->vip_code, db_mcf01.vip_code.arr, db_mcf01.vip_code.len);
   memcpy(mcf01_ptr->pos_code, db_mcf01.pos_code.arr, db_mcf01.pos_code.len);
   memcpy(mcf01_ptr->vs_tcc_code, db_mcf01.vs_tcc_code.arr, db_mcf01.vs_tcc_code.len);
   memcpy(mcf01_ptr->mc_fcc_code, db_mcf01.mc_fcc_code.arr, db_mcf01.mc_fcc_code.len);
   memcpy(mcf01_ptr->jcb_sub_code, db_mcf01.jcb_sub_code.arr, db_mcf01.jcb_sub_code.len);
   memcpy(mcf01_ptr->mall_code, db_mcf01.mall_code.arr, db_mcf01.mall_code.len);
   memcpy(mcf01_ptr->hc_code, db_mcf01.hc_code.arr, db_mcf01.hc_code.len);
   memcpy(mcf01_ptr->solicit_code, db_mcf01.solicit_code.arr, db_mcf01.solicit_code.len);
   
   
   memcpy(mcf01_ptr->block_start_date, db_mcf01.block_start_date.arr, db_mcf01.block_start_date.len);
   memcpy(mcf01_ptr->block_end_date, db_mcf01.block_end_date.arr, db_mcf01.block_end_date.len);
   memcpy(mcf01_ptr->credit_purch_max, db_mcf01.credit_purch_max.arr, db_mcf01.credit_purch_max.len);
   memcpy(mcf01_ptr->credit_auth_max, db_mcf01.credit_auth_max.arr, db_mcf01.credit_auth_max.len);
   memcpy(mcf01_ptr->credit_return_max, db_mcf01.credit_return_max.arr, db_mcf01.credit_return_max.len);
   memcpy(mcf01_ptr->credit_cash_adv_max, db_mcf01.credit_cash_adv_max.arr, db_mcf01.credit_cash_adv_max.len);
   memcpy(mcf01_ptr->credit_man_entry_max, db_mcf01.credit_man_entry_max.arr, db_mcf01.credit_man_entry_max.len);
   memcpy(mcf01_ptr->credit_cash_back_max, db_mcf01.credit_cash_back_max.arr, db_mcf01.credit_cash_back_max.len);
   memcpy(mcf01_ptr->debit_purch_max, db_mcf01.debit_purch_max.arr, db_mcf01.debit_purch_max.len);
   memcpy(mcf01_ptr->debit_auth_max, db_mcf01.debit_auth_max.arr, db_mcf01.debit_auth_max.len);
   memcpy(mcf01_ptr->debit_return_max, db_mcf01.debit_return_max.arr, db_mcf01.debit_return_max.len);
   memcpy(mcf01_ptr->debit_cash_adv_max, db_mcf01.debit_cash_adv_max.arr, db_mcf01.debit_cash_adv_max.len);
   memcpy(mcf01_ptr->debit_man_entry_max, db_mcf01.debit_man_entry_max.arr, db_mcf01.debit_man_entry_max.len);
   memcpy(mcf01_ptr->debit_cash_back_max, db_mcf01.debit_cash_back_max.arr, db_mcf01.debit_cash_back_max.len);
   memcpy(mcf01_ptr->aver_purch_amount, db_mcf01.aver_purch_amount.arr, db_mcf01.aver_purch_amount.len);
   memcpy(mcf01_ptr->max_num_returns, db_mcf01.max_num_returns.arr, db_mcf01.max_num_returns.len);
   memcpy(mcf01_ptr->amount_returns, db_mcf01.amount_returns.arr, db_mcf01.amount_returns.len);
   memcpy(mcf01_ptr->number_man_entries, db_mcf01.number_man_entries.arr, db_mcf01.number_man_entries.len);
   memcpy(mcf01_ptr->amount_deposits, db_mcf01.amount_deposits.arr, db_mcf01.amount_deposits.len);
   memcpy(mcf01_ptr->pan_same, db_mcf01.pan_same.arr, db_mcf01.pan_same.len);
   memcpy(mcf01_ptr->totals_ind, db_mcf01.totals_ind.arr, db_mcf01.totals_ind.len);
   memcpy(mcf01_ptr->statistics_ind, db_mcf01.statistics_ind.arr, db_mcf01.statistics_ind.len);         
  
   memcpy(mcf01_ptr->network[0].priority_routing, db_mcf01.network_priority_routing_1.arr, db_mcf01.network_priority_routing_1.len);
   memcpy(mcf01_ptr->network[1].priority_routing, db_mcf01.network_priority_routing_2.arr, db_mcf01.network_priority_routing_2.len);
   memcpy(mcf01_ptr->network[2].priority_routing, db_mcf01.network_priority_routing_3.arr, db_mcf01.network_priority_routing_3.len);
   memcpy(mcf01_ptr->network[3].priority_routing, db_mcf01.network_priority_routing_4.arr, db_mcf01.network_priority_routing_4.len);
   memcpy(mcf01_ptr->network[4].priority_routing, db_mcf01.network_priority_routing_5.arr, db_mcf01.network_priority_routing_5.len);
   memcpy(mcf01_ptr->network[5].priority_routing, db_mcf01.network_priority_routing_6.arr, db_mcf01.network_priority_routing_6.len);
   memcpy(mcf01_ptr->network[6].priority_routing, db_mcf01.network_priority_routing_7.arr, db_mcf01.network_priority_routing_7.len);
   memcpy(mcf01_ptr->network[7].priority_routing, db_mcf01.network_priority_routing_8.arr, db_mcf01.network_priority_routing_8.len);
   memcpy(mcf01_ptr->network[8].priority_routing, db_mcf01.network_priority_routing_9.arr, db_mcf01.network_priority_routing_9.len);
   memcpy(mcf01_ptr->network[9].priority_routing, db_mcf01.network_priority_routing_10.arr, db_mcf01.network_priority_routing_10.len);
   memcpy(mcf01_ptr->negative_group_id, db_mcf01.negative_group_id.arr, db_mcf01.negative_group_id.len);
   memcpy(mcf01_ptr->voice_category_code, db_mcf01.voice_category_code.arr, db_mcf01.voice_category_code.len);
   memcpy(mcf01_ptr->class_code, db_mcf01.class_code.arr, db_mcf01.class_code.len);
   memcpy(mcf01_ptr->deferred_start_date, db_mcf01.deferred_start_date.arr, db_mcf01.deferred_start_date.len);
   memcpy(mcf01_ptr->deferred_end_date,   db_mcf01.deferred_end_date.arr,   db_mcf01.deferred_end_date.len);
   memcpy(mcf01_ptr->group_outlet_code,   db_mcf01.group_outlet_code.arr,   db_mcf01.group_outlet_code.len);
   memcpy(mcf01_ptr->group_type,          db_mcf01.group_type.arr,          db_mcf01.group_type.len);
   memcpy(mcf01_ptr->reload_merchant,     db_mcf01.reload_merchant.arr,     db_mcf01.reload_merchant.len);
 
}

/*************************************************************************************/
/*************************************************************************************/
void db_to_def01 ( pDEF01 def01_ptr )
{
   memset(def01_ptr, 0, sizeof(DEF01));
   
   memcpy(def01_ptr->primary_key.organization_id, db_def01.organization_id.arr, db_def01.organization_id.len);
   memcpy(def01_ptr->primary_key.merchant_id, db_def01.merchant_id.arr, db_def01.merchant_id.len);
   memcpy(def01_ptr->primary_key.term_length, db_def01.term_length.arr, db_def01.term_length.len);
   memcpy(def01_ptr->factor, db_def01.factor.arr, db_def01.factor.len);
   memcpy(def01_ptr->deferred_min_amount, db_def01.deferred_min_amount.arr, db_def01.deferred_min_amount.len);
   memcpy(def01_ptr->deferred_max_amount, db_def01.deferred_max_amount.arr, db_def01.deferred_max_amount.len);
}

/*************************************************************************************/
/*************************************************************************************/
void db_to_mct01 ( pMCT01 mct01_ptr )
{
   memset(mct01_ptr, 0, sizeof(MCT01));
   memcpy(mct01_ptr->primary_key.card_type, db_mct01.card_type.arr, db_mct01.card_type.len);
   memcpy(mct01_ptr->primary_key.merchant_id, db_mct01.merchant_id.arr, db_mct01.merchant_id.len);
   memcpy(mct01_ptr->primary_key.organization_id, db_mct01.organization_id.arr, db_mct01.organization_id.len);
   memcpy(mct01_ptr->acquirer_id, db_mct01.acquirer_id.arr, db_mct01.acquirer_id.len);
   memcpy(mct01_ptr->corporate_id, db_mct01.corporate_id.arr, db_mct01.corporate_id.len);
   memcpy(mct01_ptr->settlement_id, db_mct01.settlement_id.arr, db_mct01.settlement_id.len);
   memcpy(mct01_ptr->floor_limit, db_mct01.floor_limit.arr, db_mct01.floor_limit.len);
   
}

/*************************************************************************************/
/*************************************************************************************/
void dcf01_to_db( pDCF01 dcf01_ptr )
{
  memcpy (&pte_dcf01, dcf01_ptr, sizeof(pte_dcf01));
}

/*************************************************************************************/
void hst01_to_db( pHST01 hst01_ptr )
{

	memcpy (&pte_hst01,hst01_ptr, sizeof(pte_hst01));
 	memcpy (pte_hst01.current_data, hst01_ptr->current_data, sizeof(pte_hst01.current_data)-1);

 
}
/*************************************************************************************/

void paf01_to_db( pPAF01 paf01_ptr )
{
  memcpy (&pte_paf01, paf01_ptr, sizeof(pte_paf01));
}

void acf01_to_db( pACF01 acf01_ptr )
{
  //memcpy (&pte_acf01, acf01_ptr, sizeof(pte_acf01));
  memcpy(pte_acf01.account_type, acf01_ptr->primary_key.account_type, sizeof(pte_acf01.account_type));
  memcpy(pte_acf01.account_nbr, acf01_ptr->primary_key.account_nbr, sizeof(pte_acf01.account_nbr));

   memcpy(pte_acf01.status          , acf01_ptr->status          , sizeof(pte_acf01.status          ));
 memcpy(pte_acf01.date_added      , acf01_ptr->date_added      , sizeof(pte_acf01.date_added      ));
 memcpy(pte_acf01.maint_date      , acf01_ptr->maint_date      , sizeof(pte_acf01.maint_date      ));
 memcpy(pte_acf01.changed_by      , acf01_ptr->changed_by      , sizeof(pte_acf01.changed_by      ));
 memcpy(pte_acf01.credit_limit    , acf01_ptr->credit_limit    , sizeof(pte_acf01.credit_limit    ));
 memcpy(pte_acf01.available       , acf01_ptr->available       , sizeof(pte_acf01.available       ));
 memcpy(pte_acf01.outstanding     , acf01_ptr->outstanding     , sizeof(pte_acf01.outstanding     ));
 memcpy(pte_acf01.ledger_balance  , acf01_ptr->ledger_balance  , sizeof(pte_acf01.ledger_balance  ));
 memcpy(pte_acf01.cash_limit      , acf01_ptr->cash_limit      , sizeof(pte_acf01.cash_limit      ));
 memcpy(pte_acf01.cash_available  , acf01_ptr->cash_available  , sizeof(pte_acf01.cash_available  ));
 memcpy(pte_acf01.cash_outstanding, acf01_ptr->cash_outstanding, sizeof(pte_acf01.cash_outstanding));

}

/*************************************************************************************/
/*NAME:      db_to_mppara01*/
/*************************************************************************************/
  void db_to_mppara01(pMPPARA01 mppara01_ptr)
   {
   	 memset(mppara01_ptr, 0, sizeof(MPPARA01));
	 memcpy(mppara01_ptr->primary_key.product_code,  db_mppara01.product_code.arr, 			   db_mppara01.product_code.len);
	 memcpy(mppara01_ptr->minmajpurchamt, 			 db_mppara01.minmajpurchamt.arr, 		   db_mppara01.minmajpurchamt.len);
   	 memcpy(mppara01_ptr->maxmajpurchamt, 			 db_mppara01.maxmajpurchamt.arr, 		   db_mppara01.maxmajpurchamt.len);
     memcpy(mppara01_ptr->mininstamt, 				 db_mppara01.mininstamt.arr, 			   db_mppara01.mininstamt.len);
	 memcpy(mppara01_ptr->maxinstamt, 				 db_mppara01.maxinstamt.arr, 		       db_mppara01.maxinstamt.len);
	 memcpy(mppara01_ptr->minmajpurchlmt, 			 db_mppara01.minmajpurchlmt.arr, 		   db_mppara01.minmajpurchlmt.len);
	 memcpy(mppara01_ptr->minpenaltyamt, 			 db_mppara01.minpenaltyamt.arr, 		   db_mppara01.minpenaltyamt.len);
	 memcpy(mppara01_ptr->maxpenaltyamt, 			 db_mppara01.maxpenaltyamt.arr, 		   db_mppara01.maxpenaltyamt.len);
	 memcpy(mppara01_ptr->penaltyper, 				 db_mppara01.penaltyper.arr, 			   db_mppara01.penaltyper.len);
	 memcpy(mppara01_ptr->penaltyday, 				 db_mppara01.penaltyday.arr, 			   db_mppara01.penaltyday.len);
	 memcpy(mppara01_ptr->minamtofaging, 			 db_mppara01.minamtofaging.arr, 		   db_mppara01.minamtofaging.len);
	 memcpy(mppara01_ptr->mntowrtof, 				 db_mppara01.mntowrtof.arr, 			   db_mppara01.mntowrtof.len);
	 memcpy(mppara01_ptr->BPIminamt, 				 db_mppara01.BPIminamt.arr, 			   db_mppara01.BPIminamt.len);
	 memcpy(mppara01_ptr->brokenperdinst, 			 db_mppara01.brokenperdinst.arr, 		   db_mppara01.brokenperdinst.len);
	 memcpy(mppara01_ptr->minfreepurchamt, 			 db_mppara01.minfreepurchamt.arr, 		   db_mppara01.minfreepurchamt.len);
	 memcpy(mppara01_ptr->errorunauthamt, 			 db_mppara01.errorunauthamt.arr, 		   db_mppara01.errorunauthamt.len);
	 memcpy(mppara01_ptr->fixedmpfee, 				 db_mppara01.fixedmpfee.arr,			   db_mppara01.fixedmpfee.len);
	 memcpy(mppara01_ptr->mpfeepercnt, 				 db_mppara01.mpfeepercnt.arr, 			   db_mppara01.mpfeepercnt.len);
	 memcpy(mppara01_ptr->earlyrepayfeeper, 		 db_mppara01.earlyrepayfeeper.arr,         db_mppara01.earlyrepayfeeper.len);
	 memcpy(mppara01_ptr->effective_date, 			 db_mppara01.effective_date.arr,           db_mppara01.effective_date.len);
	 memcpy(mppara01_ptr->maxtrnperday, 			 db_mppara01.maxtrnperday.arr,             db_mppara01.maxtrnperday.len);
	 memcpy(mppara01_ptr->maxamtperday, 			 db_mppara01.maxamtperday.arr,             db_mppara01.maxamtperday.len);
	 memcpy(mppara01_ptr->authoverlimit, 			 db_mppara01.authoverlimit.arr,            db_mppara01.authoverlimit.len);
	 memcpy(mppara01_ptr->authpara[0].response_code, db_mppara01.authpara_response_code_1.arr, db_mppara01.authpara_response_code_1.len);
	 memcpy(mppara01_ptr->authpara[0].message,		 db_mppara01.authpara_message_1.arr, 	   db_mppara01.authpara_message_1.len);
	 memcpy(mppara01_ptr->authpara[1].response_code, db_mppara01.authpara_response_code_2.arr, db_mppara01.authpara_response_code_2.len);
	 memcpy(mppara01_ptr->authpara[1].message, 		 db_mppara01.authpara_message_2.arr,       db_mppara01.authpara_message_2.len);
	 memcpy(mppara01_ptr->authpara[2].response_code, db_mppara01.authpara_response_code_3.arr, db_mppara01.authpara_response_code_3.len);
	 memcpy(mppara01_ptr->authpara[2].message, 		 db_mppara01.authpara_message_3.arr,       db_mppara01.authpara_message_3.len);

   
   }
   /*end of  db_to_mppara01 */
/*************************************************************************************/

/*************************************************************************************/
/*NAME:       mppara01_to_db */
/*************************************************************************************/
void mppara01_to_db( pMPPARA01 mppara01_ptr )
{
	memcpy (&pte_mppara01, mppara01_ptr, sizeof(pte_mppara01));
}
/*end of mppara01_to_db  */
/*************************************************************************************/

 /*************************************************************************************/
 
 void db_to_mgf01(pMGF01 mgf01_ptr)
  {
	 memset(mgf01_ptr, 0, sizeof(MGF01));
	 memcpy(mgf01_ptr->primary_key.merchant_group_id, db_mgf01.merchant_group_id.arr, db_mgf01.merchant_group_id.len);
	 memcpy(mgf01_ptr->effective_date, db_mgf01.effective_date.arr, db_mgf01.effective_date.len);
	 
	 memcpy(mgf01_ptr->merchgrp[0].Amount_limit,                    db_mgf01.merchgrp_Amount_limit_1.arr,                db_mgf01.merchgrp_Amount_limit_1.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[0].nbr_of_months,   db_mgf01.merchgrepint_nbr_of_months_1.arr,	 db_mgf01.merchgrepint_nbr_of_months_1.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[0].INT_rate,  	    db_mgf01.merchgrepint_INT_rate_1.arr,       db_mgf01.merchgrepint_INT_rate_1.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[0].MSF_rate,        db_mgf01.merchgrepint_MSF_rate_1.arr,       db_mgf01.merchgrepint_MSF_rate_1.len);
	  
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[1].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_2.arr,  db_mgf01.merchgrepint_nbr_of_months_2.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[1].INT_rate,        db_mgf01.merchgrepint_INT_rate_2.arr,       db_mgf01.merchgrepint_INT_rate_2.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[1].MSF_rate,        db_mgf01.merchgrepint_MSF_rate_2.arr,       db_mgf01.merchgrepint_MSF_rate_2.len);
	  
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[2].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_3.arr,  db_mgf01.merchgrepint_nbr_of_months_3.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[2].INT_rate,        db_mgf01.merchgrepint_INT_rate_3.arr,       db_mgf01.merchgrepint_INT_rate_3.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[2].MSF_rate,        db_mgf01.merchgrepint_MSF_rate_3.arr,       db_mgf01.merchgrepint_MSF_rate_3.len);
	  
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[3].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_4.arr,  db_mgf01.merchgrepint_nbr_of_months_4.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[3].INT_rate,        db_mgf01.merchgrepint_INT_rate_4.arr,       db_mgf01.merchgrepint_INT_rate_4.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[3].MSF_rate,        db_mgf01.merchgrepint_MSF_rate_4.arr,       db_mgf01.merchgrepint_MSF_rate_4.len);
	 
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[4].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_5.arr,  db_mgf01.merchgrepint_nbr_of_months_5.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[4].INT_rate,        db_mgf01.merchgrepint_INT_rate_5.arr,       db_mgf01.merchgrepint_INT_rate_5.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[4].MSF_rate,        db_mgf01.merchgrepint_MSF_rate_5.arr,       db_mgf01.merchgrepint_MSF_rate_5.len);
	 
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[5].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_6.arr,  db_mgf01.merchgrepint_nbr_of_months_6.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[5].INT_rate,        db_mgf01.merchgrepint_INT_rate_6.arr,       db_mgf01.merchgrepint_INT_rate_6.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[5].MSF_rate,        db_mgf01.merchgrepint_MSF_rate_6.arr,       db_mgf01.merchgrepint_MSF_rate_6.len);
	 
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[6].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_7.arr,  db_mgf01.merchgrepint_nbr_of_months_7.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[6].INT_rate,        db_mgf01.merchgrepint_INT_rate_7.arr,       db_mgf01.merchgrepint_INT_rate_7.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[6].MSF_rate,        db_mgf01.merchgrepint_MSF_rate_7.arr,       db_mgf01.merchgrepint_MSF_rate_7.len);
	 
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[7].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_8.arr,  db_mgf01.merchgrepint_nbr_of_months_8.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[7].INT_rate,        db_mgf01.merchgrepint_INT_rate_8.arr,       db_mgf01.merchgrepint_INT_rate_8.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[7].MSF_rate,        db_mgf01.merchgrepint_MSF_rate_8.arr,       db_mgf01.merchgrepint_MSF_rate_8.len);
	 
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[8].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_9.arr,  db_mgf01.merchgrepint_nbr_of_months_8.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[8].INT_rate,        db_mgf01.merchgrepint_INT_rate_9.arr,       db_mgf01.merchgrepint_INT_rate_9.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[8].MSF_rate,        db_mgf01.merchgrepint_MSF_rate_9.arr,       db_mgf01.merchgrepint_MSF_rate_9.len);
	 
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[9].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_10.arr, db_mgf01.merchgrepint_nbr_of_months_10.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[9].INT_rate,        db_mgf01.merchgrepint_INT_rate_10.arr,      db_mgf01.merchgrepint_INT_rate_10.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[9].MSF_rate,        db_mgf01.merchgrepint_MSF_rate_10.arr,      db_mgf01.merchgrepint_MSF_rate_10.len);

	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[10].nbr_of_months,	 db_mgf01.merchgrepint_nbr_of_months_10A.arr, db_mgf01.merchgrepint_nbr_of_months_10A.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[10].INT_rate,        db_mgf01.merchgrepint_INT_rate_10A.arr,      db_mgf01.merchgrepint_INT_rate_10A.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[10].MSF_rate,        db_mgf01.merchgrepint_MSF_rate_10A.arr,      db_mgf01.merchgrepint_MSF_rate_10A.len);

	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[11].nbr_of_months,	 db_mgf01.merchgrepint_nbr_of_months_10B.arr, db_mgf01.merchgrepint_nbr_of_months_10B.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[11].INT_rate,        db_mgf01.merchgrepint_INT_rate_10B.arr,      db_mgf01.merchgrepint_INT_rate_10B.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[11].MSF_rate,        db_mgf01.merchgrepint_MSF_rate_10B.arr,      db_mgf01.merchgrepint_MSF_rate_10B.len);
			  
	 memcpy(mgf01_ptr->merchgrp[1].Amount_limit,                    db_mgf01.merchgrp_Amount_limit_2.arr,                db_mgf01.merchgrp_Amount_limit_2.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[0].nbr_of_months,   db_mgf01.merchgrepint_nbr_of_months_11.arr, db_mgf01.merchgrepint_nbr_of_months_11.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[0].INT_rate,		db_mgf01.merchgrepint_INT_rate_11.arr,		 db_mgf01.merchgrepint_INT_rate_11.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[0].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_11.arr,		 db_mgf01.merchgrepint_MSF_rate_11.len);
		   
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[1].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_12.arr, db_mgf01.merchgrepint_nbr_of_months_12.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[1].INT_rate,		db_mgf01.merchgrepint_INT_rate_12.arr, 	 db_mgf01.merchgrepint_INT_rate_12.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[1].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_12.arr, 	 db_mgf01.merchgrepint_MSF_rate_12.len);
	  
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[2].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_13.arr, db_mgf01.merchgrepint_nbr_of_months_13.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[2].INT_rate,		db_mgf01.merchgrepint_INT_rate_13.arr, 	 db_mgf01.merchgrepint_INT_rate_13.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[2].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_13.arr, 	 db_mgf01.merchgrepint_MSF_rate_13.len);
		   
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[3].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_14.arr, db_mgf01.merchgrepint_nbr_of_months_14.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[3].INT_rate,		db_mgf01.merchgrepint_INT_rate_14.arr, 	 db_mgf01.merchgrepint_INT_rate_14.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[3].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_14.arr, 	 db_mgf01.merchgrepint_MSF_rate_14.len);
		  
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[4].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_15.arr, db_mgf01.merchgrepint_nbr_of_months_15.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[4].INT_rate,		db_mgf01.merchgrepint_INT_rate_15.arr, 	 db_mgf01.merchgrepint_INT_rate_15.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[4].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_15.arr, 	 db_mgf01.merchgrepint_MSF_rate_15.len);
		  
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[5].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_16.arr, db_mgf01.merchgrepint_nbr_of_months_16.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[5].INT_rate,		db_mgf01.merchgrepint_INT_rate_16.arr, 	 db_mgf01.merchgrepint_INT_rate_16.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[5].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_16.arr, 	 db_mgf01.merchgrepint_MSF_rate_16.len);
		  
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[6].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_17.arr, db_mgf01.merchgrepint_nbr_of_months_17.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[6].INT_rate,		db_mgf01.merchgrepint_INT_rate_17.arr, 	 db_mgf01.merchgrepint_INT_rate_17.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[6].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_17.arr, 	 db_mgf01.merchgrepint_MSF_rate_17.len);
		  
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[7].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_18.arr, db_mgf01.merchgrepint_nbr_of_months_18.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[7].INT_rate,		db_mgf01.merchgrepint_INT_rate_18.arr, 	 db_mgf01.merchgrepint_INT_rate_18.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[7].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_18.arr, 	 db_mgf01.merchgrepint_MSF_rate_18.len);
		  
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[8].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_19.arr, db_mgf01.merchgrepint_nbr_of_months_19.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[8].INT_rate,		db_mgf01.merchgrepint_INT_rate_19.arr, 	 db_mgf01.merchgrepint_INT_rate_19.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[8].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_19.arr, 	 db_mgf01.merchgrepint_MSF_rate_19.len);
		  
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[9].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_20.arr, db_mgf01.merchgrepint_nbr_of_months_20.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[9].INT_rate,		db_mgf01.merchgrepint_INT_rate_20.arr,      db_mgf01.merchgrepint_INT_rate_20.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[9].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_20.arr,      db_mgf01.merchgrepint_MSF_rate_20.len);

	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[10].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_20A.arr, db_mgf01.merchgrepint_nbr_of_months_20A.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[10].INT_rate,		db_mgf01.merchgrepint_INT_rate_20A.arr,      db_mgf01.merchgrepint_INT_rate_20A.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[10].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_20A.arr,      db_mgf01.merchgrepint_MSF_rate_20A.len);

	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[11].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_20B.arr, db_mgf01.merchgrepint_nbr_of_months_20B.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[11].INT_rate,		db_mgf01.merchgrepint_INT_rate_20B.arr,      db_mgf01.merchgrepint_INT_rate_20B.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[11].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_20B.arr,      db_mgf01.merchgrepint_MSF_rate_20B.len);
	
			   
	 memcpy(mgf01_ptr->merchgrp[2].Amount_limit,                    db_mgf01.merchgrp_Amount_limit_3.arr,                db_mgf01.merchgrp_Amount_limit_3.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[0].nbr_of_months,   db_mgf01.merchgrepint_nbr_of_months_21.arr, db_mgf01.merchgrepint_nbr_of_months_21.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[0].INT_rate,		db_mgf01.merchgrepint_INT_rate_21.arr,		 db_mgf01.merchgrepint_INT_rate_21.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[0].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_21.arr,		 db_mgf01.merchgrepint_MSF_rate_21.len);
		   
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[1].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_22.arr, db_mgf01.merchgrepint_nbr_of_months_22.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[1].INT_rate,		db_mgf01.merchgrepint_INT_rate_22.arr, 	 db_mgf01.merchgrepint_INT_rate_22.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[1].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_22.arr, 	 db_mgf01.merchgrepint_MSF_rate_22.len);
	  
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[2].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_23.arr, db_mgf01.merchgrepint_nbr_of_months_23.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[2].INT_rate,		db_mgf01.merchgrepint_INT_rate_23.arr, 	 db_mgf01.merchgrepint_INT_rate_23.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[2].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_23.arr, 	 db_mgf01.merchgrepint_MSF_rate_23.len);
		   
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[3].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_24.arr, db_mgf01.merchgrepint_nbr_of_months_24.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[3].INT_rate,		db_mgf01.merchgrepint_INT_rate_24.arr, 	 db_mgf01.merchgrepint_INT_rate_24.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[3].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_24.arr, 	 db_mgf01.merchgrepint_MSF_rate_24.len);
		  
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[4].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_25.arr, db_mgf01.merchgrepint_nbr_of_months_25.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[4].INT_rate,		db_mgf01.merchgrepint_INT_rate_25.arr, 	 db_mgf01.merchgrepint_INT_rate_25.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[4].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_25.arr, 	 db_mgf01.merchgrepint_MSF_rate_25.len);
		  
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[5].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_26.arr, db_mgf01.merchgrepint_nbr_of_months_26.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[5].INT_rate,		db_mgf01.merchgrepint_INT_rate_26.arr, 	 db_mgf01.merchgrepint_INT_rate_26.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[5].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_26.arr, 	 db_mgf01.merchgrepint_MSF_rate_26.len);
		  
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[6].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_27.arr, db_mgf01.merchgrepint_nbr_of_months_27.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[6].INT_rate,		db_mgf01.merchgrepint_INT_rate_27.arr, 	 db_mgf01.merchgrepint_INT_rate_27.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[6].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_27.arr, 	 db_mgf01.merchgrepint_MSF_rate_27.len);
		  
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[7].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_28.arr, db_mgf01.merchgrepint_nbr_of_months_28.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[7].INT_rate,		db_mgf01.merchgrepint_INT_rate_28.arr, 	 db_mgf01.merchgrepint_INT_rate_28.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[7].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_28.arr, 	 db_mgf01.merchgrepint_MSF_rate_28.len);
		  
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[8].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_29.arr, db_mgf01.merchgrepint_nbr_of_months_29.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[8].INT_rate,		db_mgf01.merchgrepint_INT_rate_29.arr, 	 db_mgf01.merchgrepint_INT_rate_29.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[8].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_29.arr, 	 db_mgf01.merchgrepint_MSF_rate_29.len);
		  
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[9].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_30.arr, db_mgf01.merchgrepint_nbr_of_months_30.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[9].INT_rate,		db_mgf01.merchgrepint_INT_rate_30.arr,      db_mgf01.merchgrepint_INT_rate_30.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[9].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_30.arr,      db_mgf01.merchgrepint_MSF_rate_30.len);

	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[10].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_30A.arr, db_mgf01.merchgrepint_nbr_of_months_30A.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[10].INT_rate,		db_mgf01.merchgrepint_INT_rate_30A.arr,      db_mgf01.merchgrepint_INT_rate_30A.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[10].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_30A.arr,      db_mgf01.merchgrepint_MSF_rate_30A.len);

	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[11].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_30B.arr, db_mgf01.merchgrepint_nbr_of_months_30B.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[11].INT_rate,		db_mgf01.merchgrepint_INT_rate_30B.arr,      db_mgf01.merchgrepint_INT_rate_30B.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[11].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_30B.arr,      db_mgf01.merchgrepint_MSF_rate_30B.len);
	
	 memcpy(mgf01_ptr->merchgrp[3].Amount_limit,                    db_mgf01.merchgrp_Amount_limit_4.arr,                db_mgf01.merchgrp_Amount_limit_4.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[0].nbr_of_months,   db_mgf01.merchgrepint_nbr_of_months_31.arr, db_mgf01.merchgrepint_nbr_of_months_31.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[0].INT_rate,		db_mgf01.merchgrepint_INT_rate_31.arr,		 db_mgf01.merchgrepint_INT_rate_31.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[0].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_31.arr,		 db_mgf01.merchgrepint_MSF_rate_31.len);
		   
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[1].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_32.arr, db_mgf01.merchgrepint_nbr_of_months_32.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[1].INT_rate,		db_mgf01.merchgrepint_INT_rate_32.arr, 	 db_mgf01.merchgrepint_INT_rate_32.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[1].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_32.arr, 	 db_mgf01.merchgrepint_MSF_rate_32.len);
	  
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[2].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_33.arr, db_mgf01.merchgrepint_nbr_of_months_33.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[2].INT_rate,		db_mgf01.merchgrepint_INT_rate_33.arr, 	 db_mgf01.merchgrepint_INT_rate_33.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[2].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_33.arr, 	 db_mgf01.merchgrepint_MSF_rate_33.len);
		   
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[3].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_34.arr, db_mgf01.merchgrepint_nbr_of_months_34.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[3].INT_rate,		db_mgf01.merchgrepint_INT_rate_34.arr, 	 db_mgf01.merchgrepint_INT_rate_34.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[3].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_34.arr, 	 db_mgf01.merchgrepint_MSF_rate_34.len);
		  
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[4].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_35.arr, db_mgf01.merchgrepint_nbr_of_months_35.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[4].INT_rate,		db_mgf01.merchgrepint_INT_rate_35.arr, 	 db_mgf01.merchgrepint_INT_rate_35.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[4].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_35.arr, 	 db_mgf01.merchgrepint_MSF_rate_35.len);
		  
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[5].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_36.arr, db_mgf01.merchgrepint_nbr_of_months_36.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[5].INT_rate,		db_mgf01.merchgrepint_INT_rate_36.arr, 	 db_mgf01.merchgrepint_INT_rate_36.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[5].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_36.arr, 	 db_mgf01.merchgrepint_MSF_rate_36.len);
		  
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[6].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_37.arr, db_mgf01.merchgrepint_nbr_of_months_37.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[6].INT_rate,		db_mgf01.merchgrepint_INT_rate_37.arr, 	 db_mgf01.merchgrepint_INT_rate_37.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[6].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_37.arr, 	 db_mgf01.merchgrepint_MSF_rate_37.len);
		  
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[7].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_38.arr, db_mgf01.merchgrepint_nbr_of_months_38.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[7].INT_rate,		db_mgf01.merchgrepint_INT_rate_38.arr, 	 db_mgf01.merchgrepint_INT_rate_38.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[7].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_38.arr, 	 db_mgf01.merchgrepint_MSF_rate_38.len);
		  
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[8].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_39.arr, db_mgf01.merchgrepint_nbr_of_months_39.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[8].INT_rate,		db_mgf01.merchgrepint_INT_rate_39.arr, 	 db_mgf01.merchgrepint_INT_rate_39.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[8].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_39.arr, 	 db_mgf01.merchgrepint_MSF_rate_39.len);
		  
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[9].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_40.arr, db_mgf01.merchgrepint_nbr_of_months_40.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[9].INT_rate,		db_mgf01.merchgrepint_INT_rate_40.arr,      db_mgf01.merchgrepint_INT_rate_40.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[9].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_40.arr,      db_mgf01.merchgrepint_MSF_rate_40.len);

	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[10].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_40A.arr, db_mgf01.merchgrepint_nbr_of_months_40A.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[10].INT_rate,		db_mgf01.merchgrepint_INT_rate_40A.arr,      db_mgf01.merchgrepint_INT_rate_40A.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[10].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_40A.arr,      db_mgf01.merchgrepint_MSF_rate_40A.len);

	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[11].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_40B.arr, db_mgf01.merchgrepint_nbr_of_months_40B.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[11].INT_rate,		db_mgf01.merchgrepint_INT_rate_40B.arr,      db_mgf01.merchgrepint_INT_rate_40B.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[11].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_40B.arr,      db_mgf01.merchgrepint_MSF_rate_40.len);

}

/*************************************************************************************/
 
  
  void mgf01_to_db( pMGF01 mgf01_ptr )
  {
	memcpy (&pte_mgf01, mgf01_ptr, sizeof(pte_mgf01));
  }



/*************************************************************************************/



void ccf01_to_db( pCCF01 ccf01_ptr )
{
  memcpy (&pte_ccf01, ccf01_ptr, sizeof(pte_ccf01));
}

void ccf02p_to_db( pCCF02P ccf02p_ptr )
{
  memcpy (&pte_ccf02p, ccf02p_ptr, sizeof(pte_ccf02p));
}

void mcf01_to_db( pMCF01 mcf01_ptr )
{
  memcpy (&pte_mcf01, mcf01_ptr, sizeof(pte_mcf01));
}

void mct01_to_db( pMCT01 mct01_ptr )
{
  memcpy (&pte_mct01, mct01_ptr, sizeof(pte_mct01));
}

void def01_to_db( pDEF01 def01_ptr )
{
  memcpy (&pte_def01, def01_ptr, sizeof(pte_def01));
}

void negative_fraud_to_db( pNEGATIVE_FRAUD negfraud_ptr)
{
  memcpy (&pte_negative_fraud, negfraud_ptr, sizeof(pte_negative_fraud));
}


/************************************************************/
/**************************************************************/
BYTE db_select_dcf01_with_merchant (  pCHAR          device, 
						pCHAR 		   merchant_id,
                        pDCF01         dcf01_ptr, 
                        pCHAR          ErrorMsg )
{
   strncpy( pte_dcf01.device_id, device, sizeof(pte_dcf01.device_id) );
   strncpy( pte_dcf01.merchant_id, merchant_id, sizeof(pte_dcf01.merchant_id) );
   
	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
   EXEC SQL SELECT device_id 
   INTO :db_dcf01.device_id
   FROM dcf01
   WHERE device_id = :pte_dcf01.device_id AND merchant_id = :pte_dcf01.merchant_id ;
   
   	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : DCF01 ,Fun_Name : db_select_dcf01_with_merchant , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}

   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_dcf01_with_merchant,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}

/************************************************************/
/**************************************************************/
BYTE db_update_dcf01( pDCF01 dcf01_ptr, pCHAR ErrorMsg )
{
   dcf01_to_db( dcf01_ptr );
   
   	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}

   EXEC SQL UPDATE dcf01 
   SET device_id           = :pte_dcf01.device_id,                              
       short_name          = :pte_dcf01.short_name,                 
       phone               = :pte_dcf01.phone,           
       industry_code       = :pte_dcf01.industry_code,
       category_code       = :pte_dcf01.category_code,
       contact             = :pte_dcf01.contact,
       device_type         = :pte_dcf01.device_type,
       date_added          = :pte_dcf01.date_added,
       current_bus_date    = :pte_dcf01.current_bus_date,
       dept_nbr            = :pte_dcf01.dept_nbr,
       organization_id     = :pte_dcf01.organization_id,
       merchant_id         = :pte_dcf01.merchant_id,
       aba_nbr             = :pte_dcf01.aba_nbr,
       status              = :pte_dcf01.status,
       totals_ind          = :pte_dcf01.totals_ind,
       statistics_ind      = :pte_dcf01.statistics_ind,
       valid_transactions  = :pte_dcf01.valid_transactions,
       draft_capture_type  = :pte_dcf01.draft_capture_type,
       amex_charge_desc    = :pte_dcf01.amex_charge_desc,
       diners_charge_desc  = :pte_dcf01.diners_charge_desc,
       additional_pos_information    = :pte_dcf01.additional_pos_information,
       batch_nbr           = :pte_dcf01.batch_nbr,
       rental_program      = :pte_dcf01.rental_program,
       nsp_process         = :pte_dcf01.nsp_process,
       pin_type            = :pte_dcf01.pin_type,
       kc                  = :pte_dcf01.kc,
       encr_type           = :pte_dcf01.encr_type,
       pad_char            = :pte_dcf01.pad_char,
       keyxchange_cnt      = :pte_dcf01.keyxchange_cnt,
       txn_cnt             = :pte_dcf01.txn_cnt,
       cwk                 = :pte_dcf01.cwk,
       kek                 = :pte_dcf01.kek,
       retired_cwk         = :pte_dcf01.retired_cwk,
       icv                 = :pte_dcf01.icv,

       pin_block_format				= :pte_dcf01.pin_block_format,
       encryption_method			= :pte_dcf01.encryption_method,
       pin_key						= :pte_dcf01.pin_key,
       communication_key			= :pte_dcf01.communication_key,
	   auto_init_activation			= :pte_dcf01.auto_init_activation,
	   auto_init_time				= :pte_dcf01.auto_init_time,
	   auto_init_ref_number			= :pte_dcf01.auto_init_ref_number,
	   auto_program_load_activation = :pte_dcf01.auto_program_load_activation,
	   auto_program_load_time		= :pte_dcf01.auto_program_load_time,
	   auto_program_load_ref_number = :pte_dcf01.auto_program_load_ref_number,
	   auto_icepac_activation		= :pte_dcf01.auto_icepac_activation
                    
   WHERE device_id = :pte_dcf01.device_id AND merchant_id = :pte_dcf01.merchant_id;
   
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : DCF01 ,Fun_Name : db_update_dcf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}
       
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_dcf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}


/*************************************************************************************/

/*************************************************************************************/
BYTE db_update_dcf01_EDTR( pDCF01 dcf01_ptr, pCHAR ErrorMsg )
{
   dcf01_to_db( dcf01_ptr );

	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
   EXEC SQL UPDATE dcf01 
   SET 
       category_code       = :pte_dcf01.category_code,
       device_type      = :pte_dcf01.device_type,
       status              = :pte_dcf01.status 
       
   WHERE device_id = :pte_dcf01.device_id AND 
		 merchant_id = :pte_dcf01.merchant_id AND
		 organization_id = :pte_dcf01.organization_id;;
		 
	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : DCF01 ,Fun_Name : db_update_dcf01_EDTR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}	 
       
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_dcf01_EDTR,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}
/*************************************************************************************/

/*************************************************************************************/
BYTE db_insert_dcf01( pDCF01 dcf01_ptr, pCHAR ErrorMsg )
{
   dcf01_to_db( dcf01_ptr );

	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
   EXEC SQL INSERT INTO dcf01
      ( device_id, short_name, phone, industry_code, category_code,
        contact, device_type, date_added, current_bus_date,
        dept_nbr, organization_id, merchant_id, aba_nbr, 
        status, totals_ind, statistics_ind, valid_transactions,
        draft_capture_type, amex_charge_desc, diners_charge_desc, additional_pos_information, batch_nbr,
        rental_program, nsp_process, pin_type, kc,
        encr_type, pad_char, keyxchange_cnt, txn_cnt,
        cwk, kek, retired_cwk, icv,pin_block_format,encryption_method,pin_key,communication_key, 
		auto_init_activation, auto_init_time, auto_init_ref_number,
		auto_program_load_activation, auto_program_load_time, auto_program_load_ref_number, auto_icepac_activation
      )
   VALUES
      ( :pte_dcf01.device_id, :pte_dcf01.short_name, :pte_dcf01.phone, :pte_dcf01.industry_code, :pte_dcf01.category_code,
        :pte_dcf01.contact, :pte_dcf01.device_type, :pte_dcf01.date_added, :pte_dcf01.current_bus_date,
        :pte_dcf01.dept_nbr, :pte_dcf01.organization_id, :pte_dcf01.merchant_id, :pte_dcf01.aba_nbr, 
        :pte_dcf01.status, :pte_dcf01.totals_ind, :pte_dcf01.statistics_ind, :pte_dcf01.valid_transactions,
        :pte_dcf01.draft_capture_type, :pte_dcf01.amex_charge_desc, :pte_dcf01.diners_charge_desc, :pte_dcf01.additional_pos_information, 
        :pte_dcf01.batch_nbr,
        :pte_dcf01.rental_program, :pte_dcf01.nsp_process, :pte_dcf01.pin_type, :pte_dcf01.kc,
        :pte_dcf01.encr_type, :pte_dcf01.pad_char, :pte_dcf01.keyxchange_cnt, :pte_dcf01.txn_cnt,
        :pte_dcf01.cwk, :pte_dcf01.kek, :pte_dcf01.retired_cwk, :pte_dcf01.icv, :pte_dcf01.pin_block_format,
        :pte_dcf01.encryption_method, :pte_dcf01.pin_key, :pte_dcf01.communication_key,
		:pte_dcf01.auto_init_activation, :pte_dcf01.auto_init_time, :pte_dcf01.auto_init_ref_number,
		:pte_dcf01.auto_program_load_activation, :pte_dcf01.auto_program_load_time, :pte_dcf01.auto_program_load_ref_number,
		:pte_dcf01.auto_icepac_activation        

      );
      
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : DCF01 ,Fun_Name : db_insert_dcf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	} 

   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_dcf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}


/*************************************************************************************/

/*************************************************************************************/
BYTE db_insert_dcf01_EDTR( pDCF01 dcf01_ptr, pCHAR ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
	char temp_mc_fcc_code[2]="";
   EXEC SQL END DECLARE SECTION;

   dcf01_to_db( dcf01_ptr );
   
   	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
    EXEC SQL SELECT
	  mc_fcc_code INTO :temp_mc_fcc_code
	  FROM mcf01
	  WHERE merchant_id = :pte_dcf01.merchant_id AND 
	  	    organization_id = :pte_dcf01.organization_id;
	  	    
	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : MCF01 ,Fun_Name : db_insert_dcf01_EDTR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}  	    

	if( 0 ==strncmp(temp_mc_fcc_code,"Y",1))
	{
		strncpy(pte_dcf01.industry_code,"800",3);
	}
	else if( 0 ==strncmp(temp_mc_fcc_code,"R",1))
	{
		strncpy(pte_dcf01.industry_code,"100",3);
	}
	else if( 0 ==strncmp(temp_mc_fcc_code,"F",1))
	{
		strncpy(pte_dcf01.industry_code,"101",3);
	}
	else if( 0 ==strncmp(temp_mc_fcc_code,"O",1))
	{
		strncpy(pte_dcf01.industry_code,"110",3);
	}
	else if( 0 ==strncmp(temp_mc_fcc_code,"X",1))
	{
		strncpy(pte_dcf01.industry_code,"200",3);
	}
	else if( 0 ==strncmp(temp_mc_fcc_code,"H",1))
	{
		strncpy(pte_dcf01.industry_code,"300",3);
	}
	else if( 0 ==strncmp(temp_mc_fcc_code,"A",1))
	{
		strncpy(pte_dcf01.industry_code,"400",3);
	}
	else if( 0 ==strncmp(temp_mc_fcc_code,"T",1))
	{
		strncpy(pte_dcf01.industry_code,"500",3);
	}
	else if( 0 ==strncmp(temp_mc_fcc_code,"C",1))
	{
		strncpy(pte_dcf01.industry_code,"900",3);
	}
	else if( 0 ==strncmp(temp_mc_fcc_code,"Z",1))
	{
		strncpy(pte_dcf01.industry_code,"900",3);
	}
	else if( 0 ==strncmp(temp_mc_fcc_code,"U",1))
	{
		strncpy(pte_dcf01.industry_code,"902",3);
	}
	else
	{
		memset(pte_dcf01.industry_code,0x00,3);
	}
												

	/*
		We need to Find a logic to map industry code from Merchant MCC code.
		case
	when rps_merchant = 'Y' then '800'
	when mc_fcc_code = 'R' then '100'
	when mc_fcc_code = 'F' then '101'
	when mc_fcc_code = 'O' then '110'
	when mc_fcc_code = 'X' then '200'
	when mc_fcc_code = 'H' then '300'
	when mc_fcc_code = 'A' then '400'
	when mc_fcc_code = 'T' then '500'
	when mc_fcc_code = 'C' then '900'
	when mc_fcc_code = 'Z' then '900'
	when mc_fcc_code = 'U' then '902'
	when mc_fcc_code is NULL then '   '
	end case,
   strncpy(pte_dcf01.industry_code,temp_industry_code,3);

   */
   	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
   EXEC SQL INSERT INTO dcf01
      ( device_id, short_name, phone, industry_code, category_code,
        contact, device_type, date_added, current_bus_date,
        dept_nbr, organization_id, merchant_id, aba_nbr, 
        status, totals_ind, statistics_ind, valid_transactions,
        draft_capture_type, amex_charge_desc, diners_charge_desc, additional_pos_information, batch_nbr,
        rental_program, nsp_process, pin_type, kc,
        encr_type, pad_char, keyxchange_cnt, txn_cnt,
        cwk, kek, retired_cwk, icv,pin_block_format,encryption_method,pin_key,communication_key, 
		auto_init_activation, auto_init_time, auto_init_ref_number,
		auto_program_load_activation, auto_program_load_time, auto_program_load_ref_number, auto_icepac_activation
      )
   VALUES
      ( :pte_dcf01.device_id, :pte_dcf01.short_name, :pte_dcf01.phone, :pte_dcf01.industry_code, :pte_dcf01.category_code,
        :pte_dcf01.contact, :pte_dcf01.device_type, :pte_dcf01.date_added, :pte_dcf01.current_bus_date,
        :pte_dcf01.dept_nbr, :pte_dcf01.organization_id, :pte_dcf01.merchant_id, :pte_dcf01.aba_nbr, 
        :pte_dcf01.status, :pte_dcf01.totals_ind, :pte_dcf01.statistics_ind, :pte_dcf01.valid_transactions,
        :pte_dcf01.draft_capture_type, :pte_dcf01.amex_charge_desc, :pte_dcf01.diners_charge_desc, :pte_dcf01.additional_pos_information, 
        :pte_dcf01.batch_nbr,
        :pte_dcf01.rental_program, :pte_dcf01.nsp_process, :pte_dcf01.pin_type, :pte_dcf01.kc,
        :pte_dcf01.encr_type, :pte_dcf01.pad_char, :pte_dcf01.keyxchange_cnt, :pte_dcf01.txn_cnt,
        :pte_dcf01.cwk, :pte_dcf01.kek, :pte_dcf01.retired_cwk, :pte_dcf01.icv, :pte_dcf01.pin_block_format,
        :pte_dcf01.encryption_method, :pte_dcf01.pin_key, :pte_dcf01.communication_key,
		:pte_dcf01.auto_init_activation, :pte_dcf01.auto_init_time, :pte_dcf01.auto_init_ref_number,
		:pte_dcf01.auto_program_load_activation, :pte_dcf01.auto_program_load_time, :pte_dcf01.auto_program_load_ref_number,
		:pte_dcf01.auto_icepac_activation        

      );
      
   	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : DCF01 ,Fun_Name : db_insert_dcf01_EDTR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}    

   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_dcf01_EDTR,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}


/*************************************************************************************/


BYTE db_insert_hst01( pHST01 hst01_ptr, pCHAR ErrorMsg)
{

   hst01_to_db( hst01_ptr );

   EXEC SQL INSERT INTO hst01

      ( unique_id, file_name, file_primary_key, changed_by, date_modified, time_modified,

        field_tag, previous_data, current_data, reserved

      )

   VALUES(:pte_hst01.unique_id, :pte_hst01.file_name, :pte_hst01.file_primary_key,

        :pte_hst01.changed_by, :pte_hst01.date_modified, :pte_hst01.time_modified,    

        :pte_hst01.field_tag, :pte_hst01.previous_data, :pte_hst01.current_data, :pte_hst01.reserved

      );

   	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : HST01 ,Fun_Name : db_insert_hst01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}

   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_hst01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }


   return PTEMSG_OK;

}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_select_paf01 (  pCHAR          Primary_key, 
                        pPAF01         paf01_ptr, 
                        pCHAR          ErrorMsg )
{
   strncpy( pte_paf01.primary_acct_nbr, Primary_key, sizeof(pte_paf01.primary_acct_nbr) );

	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
   EXEC SQL SELECT primary_acct_nbr
   INTO :db_paf01.primary_acct_nbr
   FROM paf01
   WHERE primary_acct_nbr = :pte_paf01.primary_acct_nbr;
   
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : PAF01 ,Fun_Name : db_select_paf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}
      
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_paf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_paf01( pPAF01 paf01_ptr, pCHAR ErrorMsg )
{
   paf01_to_db( paf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_paf01
      FROM   PAF01
      WHERE  primary_acct_nbr = :pte_paf01.primary_acct_nbr AND
      		 rownum           = 1
      For Update NOWAIT;
      
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : PAF01 ,Fun_Name : db_update_paf01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */    
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_paf01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		if(SQLCODE == TABLE_RESOURCE_BUSY)
			return RESOURCE_BUSY;
		else
			return DB_rcode;    
   }
   
	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
   EXEC SQL UPDATE paf01 
   SET  primary_acct_nbr                     = :pte_paf01.primary_acct_nbr,
        name_dba                             = :pte_paf01.name_dba,
        address1                             = :pte_paf01.address1,
        address2                             = :pte_paf01.address2,
        city                                 = :pte_paf01.city,
        state                                = :pte_paf01.state,
        zip_code                             = :pte_paf01.zip_code,
        home_phone                           = :pte_paf01.home_phone,
        work_phone                           = :pte_paf01.work_phone,
        status                               = :pte_paf01.status,
        caf_profile_id                       = :pte_paf01.caf_profile_id,
		type                                 = :pte_paf01.type,
        block_status                         = :pte_paf01.block_status,
        corp_acct_nbr                        = :pte_paf01.corp_acct_nbr,
        account_name                         = :pte_paf01.account_name,
        past_due_amount                      = :pte_paf01.past_due_amount,      
        min_pay_code                         = :pte_paf01.min_pay_code,
        Credit_limit						 = :pte_paf01.Credit_limit,
        Custr_nbr						     = :pte_paf01.Custr_nbr,
        APP_Source		  					 = :pte_paf01.APP_Source,
        COMP_Name							 = :pte_paf01.COMP_Name
                  
   WHERE primary_acct_nbr = :pte_paf01.primary_acct_nbr;
   
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : PAF01 ,Fun_Name : db_update_paf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}
       
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_paf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_paf01( pPAF01 paf01_ptr, pCHAR ErrorMsg )
{
   paf01_to_db( paf01_ptr );

	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
   EXEC SQL INSERT INTO paf01
     (  primary_acct_nbr,
        name_dba, address1, address2, city, state, zip_code, home_phone, work_phone,
        status, caf_profile_id, type, corp_acct_nbr,block_status,  account_name, 
        past_due_amount, min_pay_code , Credit_limit,Custr_nbr  ,APP_Source,COMP_Name   
     )               
   VALUES(  :pte_paf01.primary_acct_nbr, :pte_paf01.name_dba, :pte_paf01.address1, :pte_paf01.address2,
            :pte_paf01.city, :pte_paf01.state, :pte_paf01.zip_code, :pte_paf01.home_phone, :pte_paf01.work_phone,
            :pte_paf01.status, :pte_paf01.caf_profile_id, :pte_paf01.type,  
            :pte_paf01.corp_acct_nbr, :pte_paf01.block_status,:pte_paf01.account_name, 
            :pte_paf01.past_due_amount, :pte_paf01.min_pay_code  ,
            :pte_paf01.Credit_limit,:pte_paf01.Custr_nbr  ,:pte_paf01.APP_Source,:pte_paf01.COMP_Name
      );
      
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : PAF01 ,Fun_Name : db_insert_paf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}

   if ( SQLCODE != 0 ) 
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_paf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE my_db_select_acf01 ( pCHAR          Primary_key1,
                          pCHAR          Primary_key2, 
                          pACF01         acf01_ptr, 
                          pCHAR          ErrorMsg )
{
   strncpy( pte_acf01.account_type, Primary_key1, sizeof(pte_acf01.account_type) );
   strncpy( pte_acf01.account_nbr , Primary_key2 , sizeof(pte_acf01.account_nbr) );

	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
   EXEC SQL SELECT account_type
   INTO :db_acf01.account_type
   FROM acf01
   WHERE account_nbr = :pte_acf01.account_nbr AND account_type = :pte_acf01.account_type;
      
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : ACF01 ,Fun_Name : my_db_select_acf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  my_db_select_acf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_acf01( pACF01 acf01_ptr, pCHAR ErrorMsg )
{
    char info_buff[256] = {0};
    char Ava_bal [13] = {0};
    INT  cardlen = 0;
    CHAR tempcard[21] = {0};
    INT  nIndex = 0;
   	
   	acf01_to_db( acf01_ptr );
   		
    if ( db_error_statics_flag == true )
    {
    	start_time = ptetime_get_time();
    }
   
    EXEC SQL SELECT *
    INTO :db_acf01
    FROM acf01
    WHERE account_nbr  = :pte_acf01.account_nbr AND 
   		  account_type = :pte_acf01.account_type;
	
   if ( db_error_statics_flag == true )
   {
       end_time = ptetime_get_time();
       duration = end_time - start_time;
       if(duration >= db_error_statics_value)
	   {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d ,Data_Type : ACF01 ,Fun_Name : db_update_acf01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	   }
   }
   
   if(SQLCODE == NO_DATA_FOUND)
   {
   		// No record is present, lets insert the record in db
   	   if ( db_error_statics_flag == true )
	   {
      		start_time = ptetime_get_time();
   	   }
	   
	   EXEC SQL INSERT INTO acf01
	     (  account_type,
	        account_nbr,
	        status,
	        date_added,
	        maint_date,
	        changed_by,
	        credit_limit,
	        available,
	        outstanding,
	        ledger_balance,
	        cash_limit,      
	        cash_available,  
	        cash_outstanding
	     )               
	   VALUES(  :pte_acf01.account_type,
	       :pte_acf01.account_nbr,
	       :pte_acf01.status,
	       :pte_acf01.date_added,
	       :pte_acf01.maint_date,
	       :pte_acf01.changed_by,
	       :pte_acf01.credit_limit,
	       :pte_acf01.available,
	       :pte_acf01.outstanding,
	       :pte_acf01.ledger_balance,
	       :pte_acf01.cash_limit,      
	       :pte_acf01.cash_available,  
	       :pte_acf01.cash_outstanding
	      );
	      
	    if ( db_error_statics_flag == true )
		{
			end_time = ptetime_get_time();
			duration = end_time - start_time;
			if(duration >= db_error_statics_value)
			{
				memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : ACF01 ,Fun_Name : db_update_acf01_I , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
			}
		}   
	
	   if ( SQLCODE != 0 )
	   {
			memset(er_buf,0x00,sizeof(er_buf));
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In  db_update_acf01,ST1: %d , ST2: %d _1",DB_MsgSubtype1,DB_MsgSubtype2);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
	   }
	   else
	   {
	   		// Insert Successfull.
	   		/*We are able to update the record Lets print Availabe before update
    		if (strlen(pte_acf01.account_nbr)> 0)
			{
				// Masking card number first 5 and last 4 in clear form remaining all masked. 
				cardlen = strlen( pte_acf01.account_nbr );
				strncpy( tempcard, pte_acf01.account_nbr, cardlen);
				for ( nIndex = cardlen-5; nIndex >= cardlen-11; nIndex-- )
				{
					tempcard[nIndex] = '*';
				}
			}
	   		sprintf(info_buff,"AVL BAL after insert:%s for A/C No %s & type %s",pte_acf01.available,tempcard,pte_acf01.account_type);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(info_buff);*/
	   		return PTEMSG_OK;
	   }
	   
   }
   
   else if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_acf01 ,ST1: %d ,ST2 : %d _2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
  /* else
   {
   		We are able to access the record Lets print Availabe before update
   		memcpy(Ava_bal, db_acf01.available.arr, db_acf01.available.len);
    }*/
        	
	if ( db_error_statics_flag == true )
 	{
 		 start_time = ptetime_get_time();
	}
  
   EXEC SQL UPDATE acf01 
   SET  account_type                         = :pte_acf01.account_type,
        account_nbr                          = :pte_acf01.account_nbr,
        status                               = :pte_acf01.status,
        date_added                           = :pte_acf01.date_added,
        maint_date                           = :pte_acf01.maint_date,
        changed_by                           = :pte_acf01.changed_by,
        credit_limit                         = :pte_acf01.credit_limit,
        available                            = :pte_acf01.available,
        outstanding                          = :pte_acf01.outstanding,
        ledger_balance                       = :pte_acf01.ledger_balance,
        cash_limit                           = :pte_acf01.cash_limit,           
        cash_available                       = :pte_acf01.cash_available,       
        cash_outstanding                     = :pte_acf01.cash_outstanding     
                  
   WHERE account_nbr = :pte_acf01.account_nbr AND account_type = :pte_acf01.account_type;
       
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : ACF01 ,Fun_Name : db_update_acf01_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_acf01,ST1: %d , ST2: %d _3",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
 
   // We are able to update the record. Lets check value in db and file are same
  
   EXEC SQL SELECT *
   INTO :db_acf01
   FROM acf01
   WHERE  account_nbr  = :pte_acf01.account_nbr AND 
   		  account_type = :pte_acf01.account_type;
	
	if ( db_error_statics_flag == true )
    {
       end_time = ptetime_get_time();
       duration = end_time - start_time;
       if(duration >= db_error_statics_value)
	   {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d ,Data_Type : ACF01 ,Fun_Name : db_update_acf01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	   }
    }
   
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_acf01 ,ST1: %d ,ST2 : %d _4",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   else
   {
   		memcpy(Ava_bal, db_acf01.available.arr, db_acf01.available.len);
   		if(0  == strncmp(pte_acf01.available,Ava_bal, 12))
   		{
   			// Every thing seems to good no need to log it.
   		}
   		else
   		{
   			if (strlen(pte_acf01.account_nbr)> 0)
			{
				/* Masking card number first 5 and last 4 in clear form remaining all masked. */
				cardlen = strlen( pte_acf01.account_nbr );
				strncpy( tempcard, pte_acf01.account_nbr, cardlen);
				for ( nIndex = cardlen-5; nIndex >= cardlen-11; nIndex-- )
				{
					tempcard[nIndex] = '*';
				}
			}
			sprintf(info_buff,"AVL BAL in Cardfile %s & DB %s for A/C No %s & type %s",
					pte_acf01.available,Ava_bal,tempcard,pte_acf01.account_type);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(info_buff);
		}
	}
	
   	//sprintf(info_buff,"AVL BAL before %s & after %s for A/C No %s & type %s",Ava_bal,pte_acf01.available,tempcard,pte_acf01.account_type);
	//Log_Db_Statics_And_Oracle_Db_Error_To_File(info_buff);

     /*We are able to update the record Lets print Availabe before update
    if (strlen(pte_acf01.account_nbr)> 0)
	{
			// Masking card number first 5 and last 4 in clear form remaining all masked.
			cardlen = strlen( pte_acf01.account_nbr );
			strncpy( tempcard, pte_acf01.account_nbr, cardlen);
			for ( nIndex = cardlen-5; nIndex >= cardlen-11; nIndex-- )
			{
				tempcard[nIndex] = '*';
			}
	}
    sprintf(info_buff,"AVL BAL before %s & after %s for A/C No %s & type %s",Ava_bal,pte_acf01.available,tempcard,pte_acf01.account_type);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(info_buff);*/
   
   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_acf01( pACF01 acf01_ptr, pCHAR ErrorMsg )
{
   acf01_to_db( acf01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO acf01
     (  account_type,
        account_nbr,
        status,
        date_added,
        maint_date,
        changed_by,
        credit_limit,
        available,
        outstanding,
        ledger_balance,
        cash_limit,      
        cash_available,  
        cash_outstanding
     )               
   VALUES(  :pte_acf01.account_type,
       :pte_acf01.account_nbr,
       :pte_acf01.status,
       :pte_acf01.date_added,
       :pte_acf01.maint_date,
       :pte_acf01.changed_by,
       :pte_acf01.credit_limit,
       :pte_acf01.available,
       :pte_acf01.outstanding,
       :pte_acf01.ledger_balance,
       :pte_acf01.cash_limit,      
       :pte_acf01.cash_available,  
       :pte_acf01.cash_outstanding
      );
      
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : ACF01 ,Fun_Name : db_insert_acf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}   

   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_acf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE my_db_select_ccf01 ( pCHAR          Primary_key1,
                          pCHAR          Primary_key2,
                          pCCF01         ccf01_ptr, 
                          pCHAR          ErrorMsg )
{
   strncpy( pte_ccf01.card_type, Primary_key1, sizeof(pte_ccf01.card_type) );
   strncpy( pte_ccf01.card_nbr , Primary_key2, sizeof(pte_ccf01.card_nbr) );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL SELECT card_type  
   INTO :db_ccf01.card_type
   FROM ccf01
   WHERE card_nbr = :pte_ccf01.card_nbr AND card_type = :pte_ccf01.card_type;
      
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : CCF01 ,Fun_Name : my_db_select_ccf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	} 
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  my_db_select_ccf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_ccf01( pCCF01 ccf01_ptr, pCHAR ErrorMsg )
{
   ccf01_to_db( ccf01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE ccf01 
   SET  card_type                   = :pte_ccf01.card_type,
        card_nbr                    = :pte_ccf01.card_nbr,
        primary_acct_nbr            = :pte_ccf01.primary_acct_nbr,
        name_dba                    = :pte_ccf01.name_dba,
        address1                    = :pte_ccf01.address1,
        address2                    = :pte_ccf01.address2,
        city                        = :pte_ccf01.city,
        state                       = :pte_ccf01.state,
        zip_code                    = :pte_ccf01.zip_code,
        home_phone                  = :pte_ccf01.home_phone,
        work_phone                  = :pte_ccf01.work_phone,
        dob                         = :pte_ccf01.dob,
        profession                  = :pte_ccf01.profession,
        country                     = :pte_ccf01.country,
        nbr_cards                   = :pte_ccf01.nbr_cards,
        status                      = :pte_ccf01.status,
        sex                         = :pte_ccf01.sex,
        mother_maiden_name          = :pte_ccf01.mother_maiden_name,
        membership_id               = :pte_ccf01.membership_id,     
        cardholder_id               = :pte_ccf01.cardholder_id,     
        block_status                = :pte_ccf01.block_status,      
        specialty_code              = :pte_ccf01.specialty_code,    
        vip_acct_code               = :pte_ccf01.vip_acct_code     
                  
   WHERE card_nbr = :pte_ccf01.card_nbr AND card_type = :pte_ccf01.card_type;
       
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : CCF01 ,Fun_Name : db_update_ccf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_ccf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_ccf01( pCCF01 ccf01_ptr, pCHAR ErrorMsg )
{
   ccf01_to_db( ccf01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO ccf01
     (  card_type,
        card_nbr,
        primary_acct_nbr,
        name_dba,
        address1,
        address2,
        city,
        state,
        zip_code,
        home_phone,
        work_phone,
        dob,
        profession,
        country,
        nbr_cards,
        status,
        sex,               
        mother_maiden_name,
        membership_id,     
        cardholder_id,     
        block_status,      
        specialty_code,    
        vip_acct_code     
     )               
   VALUES(  :pte_ccf01.card_type,
       :pte_ccf01.card_nbr,
       :pte_ccf01.primary_acct_nbr,
       :pte_ccf01.name_dba,
       :pte_ccf01.address1,
       :pte_ccf01.address2,
       :pte_ccf01.city,
       :pte_ccf01.state,
       :pte_ccf01.zip_code,
       :pte_ccf01.home_phone,
       :pte_ccf01.work_phone,
       :pte_ccf01.dob,
       :pte_ccf01.profession,
       :pte_ccf01.country,
       :pte_ccf01.nbr_cards,
       :pte_ccf01.status,
       :pte_ccf01.sex,               
       :pte_ccf01.mother_maiden_name,
       :pte_ccf01.membership_id,     
       :pte_ccf01.cardholder_id,     
       :pte_ccf01.block_status,      
       :pte_ccf01.specialty_code,    
       :pte_ccf01.vip_acct_code     
      );

    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : CCF01 ,Fun_Name : db_insert_ccf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_ccf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE my_db_select_ccf02p (  pCHAR          Primary_key1, 
                            pCHAR          Primary_key2,
                            pCCF02P        ccf02p_ptr, 
                            pCHAR          ErrorMsg )
{
   strncpy( pte_ccf02p.card_type, Primary_key1, sizeof(pte_ccf02p.card_type) );
   strncpy( pte_ccf02p.card_nbr , Primary_key2, sizeof(pte_ccf02p.card_nbr) );

    if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL SELECT card_type
   INTO :db_ccf02p.card_type
   FROM ccf02p
   WHERE card_nbr = :pte_ccf02p.card_nbr AND card_type = :pte_ccf02p.card_type;
    
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : CCF02P ,Fun_Name : my_db_select_ccf02p , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}   
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  my_db_select_ccf02p,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_ccf02p( pCCF02P ccf02p_ptr, pCHAR ErrorMsg )
{
   ccf02p_to_db( ccf02p_ptr );
   /*  db_ccf02p.pin.len =100;
   memcpy(db_ccf02p.pin.pin_data, pte_ccf02p.pin, sizeof(pte_ccf02p.pin)); */

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_ccf02p
      FROM   ccf02p
      WHERE  card_nbr  = :pte_ccf02p.card_nbr   AND  
      		 card_type = :pte_ccf02p.card_type  AND
      		 rownum    = 1
      For Update NOWAIT;
      
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF02P ,Fun_Name : db_update_ccf02p_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_ccf02p ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		if(SQLCODE == TABLE_RESOURCE_BUSY)
			return RESOURCE_BUSY;
		else
			return DB_rcode;    
   }
   
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE ccf02p 
   SET card_type                    = :pte_ccf02p.card_type,                              
       card_nbr                     = :pte_ccf02p.card_nbr,
       primary_acct_nbr             = :pte_ccf02p.primary_acct_nbr,
       pin_offset                   = :pte_ccf02p.pin_offset,
       caf_profile_id               = :pte_ccf02p.caf_profile_id,
       status                       = :pte_ccf02p.status,           
       date_added                   = :pte_ccf02p.date_added,           
       maint_date                   = :pte_ccf02p.maint_date,
       changed_by                   = :pte_ccf02p.changed_by,           
       card_class                   = :pte_ccf02p.card_class,           
       expire_date                  = :pte_ccf02p.expire_date,           
       effect_date                  = :pte_ccf02p.effect_date,
       percent_deposit              = :pte_ccf02p.percent_deposit,           
       percent_avail_allowed        = :pte_ccf02p.percent_avail_allowed,           
       credit_line                  = :pte_ccf02p.credit_line,           
       outstanding_auths            = :pte_ccf02p.outstanding_auths,           
       allowed                      = :pte_ccf02p.allowed, 
       country_code                 = :pte_ccf02p.country_code,          
       currency_code                = :pte_ccf02p.currency_code,
       peso_saving_acct             = :pte_ccf02p.peso_saving_acct,    
       peso_current_acct            = :pte_ccf02p.peso_current_acct,  
       dollar_saving_acct           = :pte_ccf02p.dollar_saving_acct, 
       dollar_current_acct          = :pte_ccf02p.dollar_current_acct,
       product_codes                = :pte_ccf02p.product_codes,    
       cash_bonus_eligible          = :pte_ccf02p.cash_bonus_eligible,
       visa_purchase_card           = :pte_ccf02p.visa_purchase_card,    
       related_acct_type_1          = :pte_ccf02p.related_acct_type_1,           
       related_acct_nbr_1           = :pte_ccf02p.related_acct_nbr_1,           
       related_acct_type_2          = :pte_ccf02p.related_acct_type_2,           
       related_acct_nbr_2           = :pte_ccf02p.related_acct_nbr_2,           
       related_acct_type_3          = :pte_ccf02p.related_acct_type_3,           
       related_acct_nbr_3           = :pte_ccf02p.related_acct_nbr_3,           
       related_acct_type_4          = :pte_ccf02p.related_acct_type_4,           
       related_acct_nbr_4           = :pte_ccf02p.related_acct_nbr_4,           
       related_acct_type_5          = :pte_ccf02p.related_acct_type_5,           
       related_acct_nbr_5           = :pte_ccf02p.related_acct_nbr_5,           
       related_acct_type_6          = :pte_ccf02p.related_acct_type_6,           
       related_acct_nbr_6           = :pte_ccf02p.related_acct_nbr_6,           
       related_acct_type_7          = :pte_ccf02p.related_acct_type_7,           
       related_acct_nbr_7           = :pte_ccf02p.related_acct_nbr_7,           
       related_acct_type_8          = :pte_ccf02p.related_acct_type_8,           
       related_acct_nbr_8           = :pte_ccf02p.related_acct_nbr_8,           
       related_acct_type_9          = :pte_ccf02p.related_acct_type_9,           
       related_acct_nbr_9           = :pte_ccf02p.related_acct_nbr_9,           
       related_acct_type_10         = :pte_ccf02p.related_acct_type_10,           
       related_acct_nbr_10          = :pte_ccf02p.related_acct_nbr_10,           
       pin_verification_override    = :pte_ccf02p.pin_verification_override,           
       pin                          = :pte_ccf02p.pin,
       pvki                         = :pte_ccf02p.pvki,
       add_on_rate                  = :pte_ccf02p.add_on_rate,
       add_on_term                  = :pte_ccf02p.add_on_term,
	   peso_tran_limit				= :pte_ccf02p.peso_tran_limit,
	   dollar_tran_limit			= :pte_ccf02p.dollar_tran_limit
                  
   WHERE card_nbr = :pte_ccf02p.card_nbr AND card_type = :pte_ccf02p.card_type;
       
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : CCF02P ,Fun_Name : db_update_ccf02p , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	} 
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_ccf02p,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_ccf02p( pCCF02P ccf02p_ptr, pCHAR ErrorMsg )
{
   ccf02p_to_db( ccf02p_ptr );

/*   db_ccf02p.pin.len =100;
   memcpy(db_ccf02p.pin.pin_data, pte_ccf02p.pin, sizeof(pte_ccf02p.pin)); */

   	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO ccf02p
     ( card_type,               
       card_nbr,
       primary_acct_nbr,
       pin_offset,
       caf_profile_id,
       status,     
       date_added,    
       maint_date, 
       changed_by,           
       card_class,          
       expire_date,          
       effect_date,    
       percent_deposit,
       percent_avail_allowed,
       credit_line,
       outstanding_auths,
       allowed,
       country_code,
       currency_code,
       peso_saving_acct,   
       peso_current_acct,  
       dollar_saving_acct, 
       dollar_current_acct,
       product_codes, 
       cash_bonus_eligible,     
       visa_purchase_card, 
       related_acct_type_1,
       related_acct_nbr_1,
       related_acct_type_2,
       related_acct_nbr_2,
       related_acct_type_3,
       related_acct_nbr_3,
       related_acct_type_4,
       related_acct_nbr_4,
       related_acct_type_5,
       related_acct_nbr_5,
       related_acct_type_6,
       related_acct_nbr_6,
       related_acct_type_7,
       related_acct_nbr_7,
       related_acct_type_8,
       related_acct_nbr_8, 
       related_acct_type_9,
       related_acct_nbr_9,
       related_acct_type_10,
       related_acct_nbr_10,
       pin_verification_override,
       pin,
       pvki,
       add_on_rate,
       add_on_term,
	   peso_tran_limit,
	   dollar_tran_limit
     )               
   VALUES(  :pte_ccf02p.card_type,
            :pte_ccf02p.card_nbr,
            :pte_ccf02p.primary_acct_nbr,
            :pte_ccf02p.pin_offset,
            :pte_ccf02p.caf_profile_id,
            :pte_ccf02p.status,           
            :pte_ccf02p.date_added,           
            :pte_ccf02p.maint_date,           
            :pte_ccf02p.changed_by,           
            :pte_ccf02p.card_class,           
            :pte_ccf02p.expire_date,           
            :pte_ccf02p.effect_date,           
            :pte_ccf02p.percent_deposit,           
            :pte_ccf02p.percent_avail_allowed,           
            :pte_ccf02p.credit_line,           
            :pte_ccf02p.outstanding_auths,           
            :pte_ccf02p.allowed,           
            :pte_ccf02p.country_code,           
            :pte_ccf02p.currency_code,
            :pte_ccf02p.peso_saving_acct,   
            :pte_ccf02p.peso_current_acct,  
            :pte_ccf02p.dollar_saving_acct, 
            :pte_ccf02p.dollar_current_acct,
            :pte_ccf02p.product_codes,   
            :pte_ccf02p.cash_bonus_eligible,   
            :pte_ccf02p.visa_purchase_card,      
            :pte_ccf02p.related_acct_type_1,           
            :pte_ccf02p.related_acct_nbr_1,           
            :pte_ccf02p.related_acct_type_2,           
            :pte_ccf02p.related_acct_nbr_2,           
            :pte_ccf02p.related_acct_type_3,           
            :pte_ccf02p.related_acct_nbr_3,           
            :pte_ccf02p.related_acct_type_4,           
            :pte_ccf02p.related_acct_nbr_4,           
            :pte_ccf02p.related_acct_type_5,           
            :pte_ccf02p.related_acct_nbr_5,           
            :pte_ccf02p.related_acct_type_6,           
            :pte_ccf02p.related_acct_nbr_6,           
            :pte_ccf02p.related_acct_type_7,           
            :pte_ccf02p.related_acct_nbr_7,           
            :pte_ccf02p.related_acct_type_8,           
            :pte_ccf02p.related_acct_nbr_8,           
            :pte_ccf02p.related_acct_type_9,           
            :pte_ccf02p.related_acct_nbr_9,           
            :pte_ccf02p.related_acct_type_10,           
            :pte_ccf02p.related_acct_nbr_10,           
            :pte_ccf02p.pin_verification_override,           
            :pte_ccf02p.pin,
            :pte_ccf02p.pvki,
            :pte_ccf02p.add_on_rate,
            :pte_ccf02p.add_on_term,
			:pte_ccf02p.peso_tran_limit,
			:pte_ccf02p.dollar_tran_limit
      );

    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : CCF02P ,Fun_Name : db_insert_ccf02p , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	} 
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_ccf02p,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE my_db_select_mcf01 ( pCHAR          Primary_key1, 
                          pCHAR          Primary_key2,
                          pMCF01         mcf01_ptr, 
                          pCHAR          ErrorMsg )
{
   strncpy( pte_mcf01.organization_id, Primary_key1, sizeof(pte_mcf01.organization_id) );
   strncpy( pte_mcf01.merchant_id    , Primary_key2, sizeof(pte_mcf01.merchant_id) );

    if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL SELECT organization_id
   INTO :db_mcf01.organization_id
   FROM mcf01
   WHERE merchant_id = :pte_mcf01.merchant_id AND organization_id = :pte_mcf01.organization_id;
      
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : MCF01 ,Fun_Name : my_db_select_mcf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	} 
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  my_db_select_mcf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_mcf01( pMCF01 mcf01_ptr, pCHAR ErrorMsg )
{
  
   char ErrorMsg1[100] = {0};
  
   mcf01_to_db( mcf01_ptr );
   memset( &db_dcf01, 0x00, sizeof( db_dcf01 ) );

    if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
	if((pte_mcf01.network_priority_routing_9[0] != '\0' && 
	   pte_mcf01.network_priority_routing_10[0] != '\0') &&
	   pte_mcf01.password[0] != '\0' )
	   { /* both visa mvv and mc mco preesent*/
   EXEC SQL UPDATE mcf01 
   SET organization_id              = :pte_mcf01.organization_id,
       merchant_id                  = :pte_mcf01.merchant_id,                              
       status                       = :pte_mcf01.status,
       name01                       = :pte_mcf01.name01,
       name02                       = :pte_mcf01.name02,
       address01                    = :pte_mcf01.address01,
       address02                    = :pte_mcf01.address02,
       city                         = :pte_mcf01.city,
       country                      = :pte_mcf01.country,
       state                        = :pte_mcf01.state,
       zip_code                     = :pte_mcf01.zip_code,
       intl_code                    = :pte_mcf01.intl_code,
       currency_code                = :pte_mcf01.currency_code,
       contact                      = :pte_mcf01.contact,
       phone01                      = :pte_mcf01.phone01,
       phone02                      = :pte_mcf01.phone02,
       invoice_batch                = :pte_mcf01.invoice_batch,
       invoice_subcode              = :pte_mcf01.invoice_subcode,
       process_control_id           = :pte_mcf01.process_control_id,
       date_added                   = :pte_mcf01.date_added,
       region_nbr                   = :pte_mcf01.region_nbr,          
       division_nbr                 = :pte_mcf01.division_nbr,                    
       password                     = :pte_mcf01.password,                   
       rps_merchant                 = :pte_mcf01.rps_merchant,             
       house_card_merchant          = :pte_mcf01.house_card_merchant,    
       procurement_merchant         = :pte_mcf01.procurement_merchant,   
       deferred_merchant            = :pte_mcf01.deferred_merchant,    
       cash_bonus_eligible          = :pte_mcf01.cash_bonus_eligible,    
       vip_code                     = :pte_mcf01.vip_code,                      
       pos_code                     = :pte_mcf01.pos_code,                      
       vs_tcc_code                  = :pte_mcf01.vs_tcc_code,                
       mc_fcc_code                  = :pte_mcf01.mc_fcc_code,                
       jcb_sub_code                 = :pte_mcf01.jcb_sub_code,               
       mall_code                    = :pte_mcf01.mall_code,                    
       hc_code                      = :pte_mcf01.hc_code,                       
       solicit_code                 = :pte_mcf01.solicit_code,         
       block_start_date             = :pte_mcf01.block_start_date,
       block_end_date               = :pte_mcf01.block_end_date,
       credit_purch_max             = :pte_mcf01.credit_purch_max,
       credit_auth_max              = :pte_mcf01.credit_auth_max,
       credit_return_max            = :pte_mcf01.credit_return_max,
       credit_cash_adv_max          = :pte_mcf01.credit_cash_adv_max,
       credit_man_entry_max         = :pte_mcf01.credit_man_entry_max,
       credit_cash_back_max         = :pte_mcf01.credit_cash_back_max,
       debit_purch_max              = :pte_mcf01.debit_purch_max,
       debit_auth_max               = :pte_mcf01.debit_auth_max,
       debit_return_max             = :pte_mcf01.debit_return_max,
       debit_cash_adv_max           = :pte_mcf01.debit_cash_adv_max,
       debit_man_entry_max          = :pte_mcf01.debit_man_entry_max,
       debit_cash_back_max          = :pte_mcf01.debit_cash_back_max,
       aver_purch_amount            = :pte_mcf01.aver_purch_amount,
       max_num_returns              = :pte_mcf01.max_num_returns,
       amount_returns               = :pte_mcf01.amount_returns,
       number_man_entries           = :pte_mcf01.number_man_entries,
       amount_deposits              = :pte_mcf01.amount_deposits,
       pan_same                     = :pte_mcf01.pan_same,
       totals_ind                   = :pte_mcf01.totals_ind,
       statistics_ind               = :pte_mcf01.statistics_ind,
       network_priority_routing_1   = :pte_mcf01.network_priority_routing_1,
       network_priority_routing_2   = :pte_mcf01.network_priority_routing_2,
       network_priority_routing_3   = :pte_mcf01.network_priority_routing_3,
       network_priority_routing_4   = :pte_mcf01.network_priority_routing_4,
       network_priority_routing_5   = :pte_mcf01.network_priority_routing_5,
       network_priority_routing_6   = :pte_mcf01.network_priority_routing_6,
       network_priority_routing_7   = :pte_mcf01.network_priority_routing_7,
       network_priority_routing_8   = :pte_mcf01.network_priority_routing_8,
       network_priority_routing_9   = :pte_mcf01.network_priority_routing_9,
       network_priority_routing_10  = :pte_mcf01.network_priority_routing_10,
       negative_group_id            = :pte_mcf01.negative_group_id,
       voice_category_code          = :pte_mcf01.voice_category_code,
       class_code                   = :pte_mcf01.class_code,
       deferred_start_date          = :pte_mcf01.deferred_start_date,
       deferred_end_date            = :pte_mcf01.deferred_end_date,
       group_outlet_code            = :pte_mcf01.group_outlet_code,
       group_type                   = :pte_mcf01.group_type,
	   reload_merchant              = :pte_mcf01.reload_merchant
   WHERE merchant_id = :pte_mcf01.merchant_id AND organization_id = :pte_mcf01.organization_id;
       
	   }
	   else if((pte_mcf01.network_priority_routing_9[0] != '\0' && 
	   			pte_mcf01.network_priority_routing_10[0] != '\0') &&
	   			pte_mcf01.password[0] == '\0')
	   { /*  visa mvv present and mc mco not preesent*/
	   
	   		EXEC SQL UPDATE mcf01 
   SET organization_id              = :pte_mcf01.organization_id,
       merchant_id                  = :pte_mcf01.merchant_id,                              
       status                       = :pte_mcf01.status,
       name01                       = :pte_mcf01.name01,
       name02                       = :pte_mcf01.name02,
       address01                    = :pte_mcf01.address01,
       address02                    = :pte_mcf01.address02,
       city                         = :pte_mcf01.city,
       country                      = :pte_mcf01.country,
       state                        = :pte_mcf01.state,
       zip_code                     = :pte_mcf01.zip_code,
       intl_code                    = :pte_mcf01.intl_code,
       currency_code                = :pte_mcf01.currency_code,
       contact                      = :pte_mcf01.contact,
       phone01                      = :pte_mcf01.phone01,
       phone02                      = :pte_mcf01.phone02,
       invoice_batch                = :pte_mcf01.invoice_batch,
       invoice_subcode              = :pte_mcf01.invoice_subcode,
       process_control_id           = :pte_mcf01.process_control_id,
       date_added                   = :pte_mcf01.date_added,
       region_nbr                   = :pte_mcf01.region_nbr,          
       division_nbr                 = :pte_mcf01.division_nbr,                                      
       rps_merchant                 = :pte_mcf01.rps_merchant,             
       house_card_merchant          = :pte_mcf01.house_card_merchant,    
       procurement_merchant         = :pte_mcf01.procurement_merchant,   
       deferred_merchant            = :pte_mcf01.deferred_merchant,    
       cash_bonus_eligible          = :pte_mcf01.cash_bonus_eligible,    
       vip_code                     = :pte_mcf01.vip_code,                      
       pos_code                     = :pte_mcf01.pos_code,                      
       vs_tcc_code                  = :pte_mcf01.vs_tcc_code,                
       mc_fcc_code                  = :pte_mcf01.mc_fcc_code,                
       jcb_sub_code                 = :pte_mcf01.jcb_sub_code,               
       mall_code                    = :pte_mcf01.mall_code,                    
       hc_code                      = :pte_mcf01.hc_code,                       
       solicit_code                 = :pte_mcf01.solicit_code,         
       block_start_date             = :pte_mcf01.block_start_date,
       block_end_date               = :pte_mcf01.block_end_date,
       credit_purch_max             = :pte_mcf01.credit_purch_max,
       credit_auth_max              = :pte_mcf01.credit_auth_max,
       credit_return_max            = :pte_mcf01.credit_return_max,
       credit_cash_adv_max          = :pte_mcf01.credit_cash_adv_max,
       credit_man_entry_max         = :pte_mcf01.credit_man_entry_max,
       credit_cash_back_max         = :pte_mcf01.credit_cash_back_max,
       debit_purch_max              = :pte_mcf01.debit_purch_max,
       debit_auth_max               = :pte_mcf01.debit_auth_max,
       debit_return_max             = :pte_mcf01.debit_return_max,
       debit_cash_adv_max           = :pte_mcf01.debit_cash_adv_max,
       debit_man_entry_max          = :pte_mcf01.debit_man_entry_max,
       debit_cash_back_max          = :pte_mcf01.debit_cash_back_max,
       aver_purch_amount            = :pte_mcf01.aver_purch_amount,
       max_num_returns              = :pte_mcf01.max_num_returns,
       amount_returns               = :pte_mcf01.amount_returns,
       number_man_entries           = :pte_mcf01.number_man_entries,
       amount_deposits              = :pte_mcf01.amount_deposits,
       pan_same                     = :pte_mcf01.pan_same,
       totals_ind                   = :pte_mcf01.totals_ind,
       statistics_ind               = :pte_mcf01.statistics_ind,
       network_priority_routing_1   = :pte_mcf01.network_priority_routing_1,
       network_priority_routing_2   = :pte_mcf01.network_priority_routing_2,
       network_priority_routing_3   = :pte_mcf01.network_priority_routing_3,
       network_priority_routing_4   = :pte_mcf01.network_priority_routing_4,
       network_priority_routing_5   = :pte_mcf01.network_priority_routing_5,
       network_priority_routing_6   = :pte_mcf01.network_priority_routing_6,
       network_priority_routing_7   = :pte_mcf01.network_priority_routing_7,
       network_priority_routing_8   = :pte_mcf01.network_priority_routing_8,
       network_priority_routing_9   = :pte_mcf01.network_priority_routing_9,
       network_priority_routing_10  = :pte_mcf01.network_priority_routing_10,
       negative_group_id            = :pte_mcf01.negative_group_id,
       voice_category_code          = :pte_mcf01.voice_category_code,
       class_code                   = :pte_mcf01.class_code,
       deferred_start_date          = :pte_mcf01.deferred_start_date,
       deferred_end_date            = :pte_mcf01.deferred_end_date,
       group_outlet_code            = :pte_mcf01.group_outlet_code,
       group_type                   = :pte_mcf01.group_type,
	   reload_merchant              = :pte_mcf01.reload_merchant
   WHERE merchant_id = :pte_mcf01.merchant_id AND organization_id = :pte_mcf01.organization_id;
	   		
	   
	   }
	   else if(pte_mcf01.network_priority_routing_9[0] == '\0' &&
	   			pte_mcf01.password[0] != '\0')
	   	{ /* both visa mvv not present and mc mco preesent*/
	   		EXEC SQL UPDATE mcf01 
   SET organization_id              = :pte_mcf01.organization_id,
       merchant_id                  = :pte_mcf01.merchant_id,                              
       status                       = :pte_mcf01.status,
       name01                       = :pte_mcf01.name01,
       name02                       = :pte_mcf01.name02,
       address01                    = :pte_mcf01.address01,
       address02                    = :pte_mcf01.address02,
       city                         = :pte_mcf01.city,
       country                      = :pte_mcf01.country,
       state                        = :pte_mcf01.state,
       zip_code                     = :pte_mcf01.zip_code,
       intl_code                    = :pte_mcf01.intl_code,
       currency_code                = :pte_mcf01.currency_code,
       contact                      = :pte_mcf01.contact,
       phone01                      = :pte_mcf01.phone01,
       phone02                      = :pte_mcf01.phone02,
       invoice_batch                = :pte_mcf01.invoice_batch,
       invoice_subcode              = :pte_mcf01.invoice_subcode,
       process_control_id           = :pte_mcf01.process_control_id,
       date_added                   = :pte_mcf01.date_added,
       region_nbr                   = :pte_mcf01.region_nbr,          
       division_nbr                 = :pte_mcf01.division_nbr,                    
       password                     = :pte_mcf01.password,                   
       rps_merchant                 = :pte_mcf01.rps_merchant,             
       house_card_merchant          = :pte_mcf01.house_card_merchant,    
       procurement_merchant         = :pte_mcf01.procurement_merchant,   
       deferred_merchant            = :pte_mcf01.deferred_merchant,    
       cash_bonus_eligible          = :pte_mcf01.cash_bonus_eligible,    
       vip_code                     = :pte_mcf01.vip_code,                      
       pos_code                     = :pte_mcf01.pos_code,                      
       vs_tcc_code                  = :pte_mcf01.vs_tcc_code,                
       mc_fcc_code                  = :pte_mcf01.mc_fcc_code,                
       jcb_sub_code                 = :pte_mcf01.jcb_sub_code,               
       mall_code                    = :pte_mcf01.mall_code,                    
       hc_code                      = :pte_mcf01.hc_code,                       
       solicit_code                 = :pte_mcf01.solicit_code,         
       block_start_date             = :pte_mcf01.block_start_date,
       block_end_date               = :pte_mcf01.block_end_date,
       credit_purch_max             = :pte_mcf01.credit_purch_max,
       credit_auth_max              = :pte_mcf01.credit_auth_max,
       credit_return_max            = :pte_mcf01.credit_return_max,
       credit_cash_adv_max          = :pte_mcf01.credit_cash_adv_max,
       credit_man_entry_max         = :pte_mcf01.credit_man_entry_max,
       credit_cash_back_max         = :pte_mcf01.credit_cash_back_max,
       debit_purch_max              = :pte_mcf01.debit_purch_max,
       debit_auth_max               = :pte_mcf01.debit_auth_max,
       debit_return_max             = :pte_mcf01.debit_return_max,
       debit_cash_adv_max           = :pte_mcf01.debit_cash_adv_max,
       debit_man_entry_max          = :pte_mcf01.debit_man_entry_max,
       debit_cash_back_max          = :pte_mcf01.debit_cash_back_max,
       aver_purch_amount            = :pte_mcf01.aver_purch_amount,
       max_num_returns              = :pte_mcf01.max_num_returns,
       amount_returns               = :pte_mcf01.amount_returns,
       number_man_entries           = :pte_mcf01.number_man_entries,
       amount_deposits              = :pte_mcf01.amount_deposits,
       pan_same                     = :pte_mcf01.pan_same,
       totals_ind                   = :pte_mcf01.totals_ind,
       statistics_ind               = :pte_mcf01.statistics_ind,
       network_priority_routing_1   = :pte_mcf01.network_priority_routing_1,
       network_priority_routing_2   = :pte_mcf01.network_priority_routing_2,
       network_priority_routing_3   = :pte_mcf01.network_priority_routing_3,
       network_priority_routing_4   = :pte_mcf01.network_priority_routing_4,
       network_priority_routing_5   = :pte_mcf01.network_priority_routing_5,
       network_priority_routing_6   = :pte_mcf01.network_priority_routing_6,
       network_priority_routing_7   = :pte_mcf01.network_priority_routing_7,
       network_priority_routing_8   = :pte_mcf01.network_priority_routing_8,
       negative_group_id            = :pte_mcf01.negative_group_id,
       voice_category_code          = :pte_mcf01.voice_category_code,
       class_code                   = :pte_mcf01.class_code,
       deferred_start_date          = :pte_mcf01.deferred_start_date,
       deferred_end_date            = :pte_mcf01.deferred_end_date,
       group_outlet_code            = :pte_mcf01.group_outlet_code,
       group_type                   = :pte_mcf01.group_type,
	   reload_merchant              = :pte_mcf01.reload_merchant
   WHERE merchant_id = :pte_mcf01.merchant_id AND organization_id = :pte_mcf01.organization_id;
	
	   	}
	   	else
	   	{ /* both visa mvv and mc mco not preesent*/
	   	
	   			   		EXEC SQL UPDATE mcf01 
   SET organization_id              = :pte_mcf01.organization_id,
       merchant_id                  = :pte_mcf01.merchant_id,                              
       status                       = :pte_mcf01.status,
       name01                       = :pte_mcf01.name01,
       name02                       = :pte_mcf01.name02,
       address01                    = :pte_mcf01.address01,
       address02                    = :pte_mcf01.address02,
       city                         = :pte_mcf01.city,
       country                      = :pte_mcf01.country,
       state                        = :pte_mcf01.state,
       zip_code                     = :pte_mcf01.zip_code,
       intl_code                    = :pte_mcf01.intl_code,
       currency_code                = :pte_mcf01.currency_code,
       contact                      = :pte_mcf01.contact,
       phone01                      = :pte_mcf01.phone01,
       phone02                      = :pte_mcf01.phone02,
       invoice_batch                = :pte_mcf01.invoice_batch,
       invoice_subcode              = :pte_mcf01.invoice_subcode,
       process_control_id           = :pte_mcf01.process_control_id,
       date_added                   = :pte_mcf01.date_added,
       region_nbr                   = :pte_mcf01.region_nbr,          
       division_nbr                 = :pte_mcf01.division_nbr,                                      
       rps_merchant                 = :pte_mcf01.rps_merchant,             
       house_card_merchant          = :pte_mcf01.house_card_merchant,    
       procurement_merchant         = :pte_mcf01.procurement_merchant,   
       deferred_merchant            = :pte_mcf01.deferred_merchant,    
       cash_bonus_eligible          = :pte_mcf01.cash_bonus_eligible,    
       vip_code                     = :pte_mcf01.vip_code,                      
       pos_code                     = :pte_mcf01.pos_code,                      
       vs_tcc_code                  = :pte_mcf01.vs_tcc_code,                
       mc_fcc_code                  = :pte_mcf01.mc_fcc_code,                
       jcb_sub_code                 = :pte_mcf01.jcb_sub_code,               
       mall_code                    = :pte_mcf01.mall_code,                    
       hc_code                      = :pte_mcf01.hc_code,                       
       solicit_code                 = :pte_mcf01.solicit_code,         
       block_start_date             = :pte_mcf01.block_start_date,
       block_end_date               = :pte_mcf01.block_end_date,
       credit_purch_max             = :pte_mcf01.credit_purch_max,
       credit_auth_max              = :pte_mcf01.credit_auth_max,
       credit_return_max            = :pte_mcf01.credit_return_max,
       credit_cash_adv_max          = :pte_mcf01.credit_cash_adv_max,
       credit_man_entry_max         = :pte_mcf01.credit_man_entry_max,
       credit_cash_back_max         = :pte_mcf01.credit_cash_back_max,
       debit_purch_max              = :pte_mcf01.debit_purch_max,
       debit_auth_max               = :pte_mcf01.debit_auth_max,
       debit_return_max             = :pte_mcf01.debit_return_max,
       debit_cash_adv_max           = :pte_mcf01.debit_cash_adv_max,
       debit_man_entry_max          = :pte_mcf01.debit_man_entry_max,
       debit_cash_back_max          = :pte_mcf01.debit_cash_back_max,
       aver_purch_amount            = :pte_mcf01.aver_purch_amount,
       max_num_returns              = :pte_mcf01.max_num_returns,
       amount_returns               = :pte_mcf01.amount_returns,
       number_man_entries           = :pte_mcf01.number_man_entries,
       amount_deposits              = :pte_mcf01.amount_deposits,
       pan_same                     = :pte_mcf01.pan_same,
       totals_ind                   = :pte_mcf01.totals_ind,
       statistics_ind               = :pte_mcf01.statistics_ind,
       network_priority_routing_1   = :pte_mcf01.network_priority_routing_1,
       network_priority_routing_2   = :pte_mcf01.network_priority_routing_2,
       network_priority_routing_3   = :pte_mcf01.network_priority_routing_3,
       network_priority_routing_4   = :pte_mcf01.network_priority_routing_4,
       network_priority_routing_5   = :pte_mcf01.network_priority_routing_5,
       network_priority_routing_6   = :pte_mcf01.network_priority_routing_6,
       network_priority_routing_7   = :pte_mcf01.network_priority_routing_7,
       network_priority_routing_8   = :pte_mcf01.network_priority_routing_8,
       negative_group_id            = :pte_mcf01.negative_group_id,
       voice_category_code          = :pte_mcf01.voice_category_code,
       class_code                   = :pte_mcf01.class_code,
       deferred_start_date          = :pte_mcf01.deferred_start_date,
       deferred_end_date            = :pte_mcf01.deferred_end_date,
       group_outlet_code            = :pte_mcf01.group_outlet_code,
       group_type                   = :pte_mcf01.group_type,
	   reload_merchant              = :pte_mcf01.reload_merchant
   WHERE merchant_id = :pte_mcf01.merchant_id AND organization_id = :pte_mcf01.organization_id;
	
	   	}
   		
          
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : MCF01 ,Fun_Name : db_update_mcf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	} 
	 
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_mcf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if(strncmp(pte_mcf01.status,MID_TID_STATE_RESTRICTED_VALUE,1) == 0)
   {
	   if ( db_error_statics_flag == true )
	   {
	          start_time = ptetime_get_time();
	   }
	   EXEC SQL SELECT *
	   INTO :db_dcf01
	   FROM dcf01
	   WHERE merchant_id = :pte_mcf01.merchant_id  AND
	   		 rownum    		 = 1
      		 For Update NOWAIT;
	   
	   if ( db_error_statics_flag == true )
	   {
	         end_time = ptetime_get_time();
	      	 duration = end_time - start_time;
	      	 if(duration >= db_error_statics_value)
		  	 {
		  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : DCF01 ,Fun_Name : db_update_mcf01_Select_DCF01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		  	 }
	   }  
		  
	 	//No record found, no TID for the restricted Merchant ID
		 if(SQLCODE == NO_DATA_FOUND)
		 {
		 	return PTEMSG_OK;
		 }
		 //There is issue in select query except NULL colum data
		 //Error in Select query or Columns might have null values
		 else if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
		 {
		 	return PTEMSG_OK;
		 }
		
		 // Terminal assosiated with This MID is present.Lets updated.
	  	 else 
		 {
		   if ( db_error_statics_flag == true )
		   {
		      start_time = ptetime_get_time();
		   }
	  
			EXEC SQL UPDATE dcf01
			SET status = :pte_mcf01.status 
			WHERE merchant_id = :pte_mcf01.merchant_id ;
		}
		
		if ( db_error_statics_flag == true )
	   	{
	         end_time = ptetime_get_time();
	      	 duration = end_time - start_time;
	      	 if(duration >= db_error_statics_value)
		  	 {
		  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : Updating DCF01 ,Fun_Name : db_update_mcf01_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		  	 }
	  	}  
	  	
	   if ( SQLCODE != 0 )
	   {
			memset(er_buf,0x00,sizeof(er_buf));
			sprintf(er_buf,"While updating status of TID in DCF01, ST1 : %d , ST2 : %d_5",DB_MsgSubtype1,DB_MsgSubtype2);
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			strncpy(ErrorMsg1," TID Import Update ",20);
			strcat(ErrorMsg1,ErrorMsg);
			memset(ErrorMsg,0x00,sizeof(ErrorMsg));
			strcpy(ErrorMsg,ErrorMsg1);
			strcat(er_buf, ErrorMsg );
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
		}
	}

   return PTEMSG_OK;
}


BYTE db_insert_mcf01( pMCF01 mcf01_ptr, pCHAR ErrorMsg )
{
   mcf01_to_db( mcf01_ptr );

    if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO mcf01
     ( organization_id, 
       merchant_id, 
       status, 
       name01, 
       name02, 
       address01, 
       address02, 
       city,               
       country, 
       state, 
       zip_code, 
       intl_code, 
       currency_code, 
       contact, 
       phone01,               
       phone02,               
       invoice_batch,               
       invoice_subcode,               
       process_control_id,               
       date_added,
               
       region_nbr,           
       division_nbr,         
       password,             
       rps_merchant,         
       house_card_merchant,  
       procurement_merchant, 
       deferred_merchant,    
       cash_bonus_eligible,  
       vip_code,             
       pos_code,             
       vs_tcc_code,          
       mc_fcc_code,          
       jcb_sub_code,         
       mall_code,            
       hc_code,              
       solicit_code,         

       block_start_date,               
       block_end_date,               
       credit_purch_max,               
       credit_auth_max,               
       credit_return_max,               
       credit_cash_adv_max,
       credit_man_entry_max,               
       credit_cash_back_max,               
       debit_purch_max,               
       debit_auth_max,               
       debit_return_max,               
       debit_cash_adv_max,               
       debit_man_entry_max,               
       debit_cash_back_max,               
       aver_purch_amount,               
       max_num_returns,               
       amount_returns,               
       number_man_entries,               
       amount_deposits,               
       pan_same,               
               
       totals_ind,               
       statistics_ind,               
       network_priority_routing_1,               
       network_priority_routing_2,               
       network_priority_routing_3,               
       network_priority_routing_4,               
       network_priority_routing_5,               
       network_priority_routing_6,               
       network_priority_routing_7,               
       network_priority_routing_8,               
       network_priority_routing_9,               
       network_priority_routing_10,
       negative_group_id,
       voice_category_code,
       class_code,
       deferred_start_date,
       deferred_end_date,
       group_outlet_code,
       group_type,
	   reload_merchant
     )               
   VALUES(  :pte_mcf01.organization_id,
       :pte_mcf01.merchant_id,
       :pte_mcf01.status,
       :pte_mcf01.name01,
       :pte_mcf01.name02,               
       :pte_mcf01.address01,               
       :pte_mcf01.address02,               
       :pte_mcf01.city,               
       :pte_mcf01.country,               
       :pte_mcf01.state,               
       :pte_mcf01.zip_code,               
       :pte_mcf01.intl_code,               
       :pte_mcf01.currency_code,               
       :pte_mcf01.contact,               
       :pte_mcf01.phone01,               
       :pte_mcf01.phone02,               
       :pte_mcf01.invoice_batch,               
       :pte_mcf01.invoice_subcode,               
       :pte_mcf01.process_control_id,               
       :pte_mcf01.date_added,
                     
       :pte_mcf01.region_nbr,           
       :pte_mcf01.division_nbr,         
       :pte_mcf01.password,             
       :pte_mcf01.rps_merchant,         
       :pte_mcf01.house_card_merchant,  
       :pte_mcf01.procurement_merchant, 
       :pte_mcf01.deferred_merchant,    
       :pte_mcf01.cash_bonus_eligible,  
       :pte_mcf01.vip_code,             
       :pte_mcf01.pos_code,             
       :pte_mcf01.vs_tcc_code,          
       :pte_mcf01.mc_fcc_code,          
       :pte_mcf01.jcb_sub_code,         
       :pte_mcf01.mall_code,            
       :pte_mcf01.hc_code,              
       :pte_mcf01.solicit_code,         

       :pte_mcf01.block_start_date,               
       :pte_mcf01.block_end_date,               
       :pte_mcf01.credit_purch_max,               
       :pte_mcf01.credit_auth_max,               
       :pte_mcf01.credit_return_max,               
       :pte_mcf01.credit_cash_adv_max,               
       :pte_mcf01.credit_man_entry_max,               
       :pte_mcf01.credit_cash_back_max,               
       :pte_mcf01.debit_purch_max,               
       :pte_mcf01.debit_auth_max,               
       :pte_mcf01.debit_return_max,               
       :pte_mcf01.debit_cash_adv_max,               
       :pte_mcf01.debit_man_entry_max,               
       :pte_mcf01.debit_cash_back_max,
       :pte_mcf01.aver_purch_amount,               
       :pte_mcf01.max_num_returns,               
       :pte_mcf01.amount_returns,               
       :pte_mcf01.number_man_entries,               
       :pte_mcf01.amount_deposits,               
       :pte_mcf01.pan_same,               
       :pte_mcf01.totals_ind,               
       :pte_mcf01.statistics_ind,               
                     
       :pte_mcf01.network_priority_routing_1,               
       :pte_mcf01.network_priority_routing_2,               
       :pte_mcf01.network_priority_routing_3,               
       :pte_mcf01.network_priority_routing_4,               
       :pte_mcf01.network_priority_routing_5,               
       :pte_mcf01.network_priority_routing_6,               
       :pte_mcf01.network_priority_routing_7,               
       :pte_mcf01.network_priority_routing_8,               
       :pte_mcf01.network_priority_routing_9,               
       :pte_mcf01.network_priority_routing_10,
       :pte_mcf01.negative_group_id,
       :pte_mcf01.voice_category_code,
       :pte_mcf01.class_code,
       :pte_mcf01.deferred_start_date,
       :pte_mcf01.deferred_end_date,
       :pte_mcf01.group_outlet_code,
       :pte_mcf01.group_type,
	   :pte_mcf01.reload_merchant
	   
      );
      
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : MCF01 ,Fun_Name : db_insert_mcf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_mcf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE my_db_select_mct01 ( pCHAR          Primary_key1,
                          pCHAR          Primary_key2,
						              pCHAR          Primary_key3, 
                          pMCT01         mct01_ptr, 
                          pCHAR          ErrorMsg )
{
   strncpy( pte_mct01.card_type      , Primary_key1, sizeof(pte_mct01.card_type) );
   strncpy( pte_mct01.merchant_id    , Primary_key2, sizeof(pte_mct01.merchant_id) );
   strncpy( pte_mct01.organization_id, Primary_key3, sizeof(pte_mct01.organization_id) );

   /*farad 7/12/1999  modified the select statment to increase performance.*/

    if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL SELECT card_type
   INTO :db_mct01.card_type
   FROM mct01
   WHERE merchant_id = :pte_mct01.merchant_id AND organization_id = :pte_mct01.organization_id AND card_type = :pte_mct01.card_type;
      
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : MCF01 ,Fun_Name : my_db_select_mct01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}   
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  my_db_select_mct01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}

/*************************************************************************************/
BYTE db_clear_mct01( pMCT01 mct01_ptr, pCHAR ErrorMsg )
{
   mct01_to_db( mct01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL delete from mct01 
                  
   WHERE merchant_id = :pte_mct01.merchant_id AND organization_id = :pte_mct01.organization_id ;
   
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : MCT01 ,Fun_Name : db_clear_mct01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	} 
   if ( SQLCODE != 0 )
   {/* No need to report error..record may not exist*/
   } 

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_mct01( pMCT01 mct01_ptr, pCHAR ErrorMsg )
{
   mct01_to_db( mct01_ptr );

    if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE mct01 
   SET card_type                    = :pte_mct01.card_type,
       merchant_id                  = :pte_mct01.merchant_id,                              
       organization_id              = :pte_mct01.organization_id,                              
       acquirer_id                  = :pte_mct01.acquirer_id,                              
       corporate_id                 = :pte_mct01.corporate_id,                              
       settlement_id                = :pte_mct01.settlement_id,           
       floor_limit                  = :pte_mct01.floor_limit           
                  
   WHERE merchant_id = :pte_mct01.merchant_id AND organization_id = :pte_mct01.organization_id AND card_type = :pte_mct01.card_type;
       
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : MCT01 ,Fun_Name : db_update_mct01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}    
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_mct01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_mct01( pMCT01 mct01_ptr, pCHAR ErrorMsg )
{
   mct01_to_db( mct01_ptr );

    if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO mct01
     ( card_type,
       merchant_id,
       organization_id,
       acquirer_id,
       corporate_id,               
       settlement_id,
       floor_limit
     )               
   VALUES(  :pte_mct01.card_type,
       :pte_mct01.merchant_id,
       :pte_mct01.organization_id,
       :pte_mct01.acquirer_id,
       :pte_mct01.corporate_id,
       :pte_mct01.settlement_id,
       :pte_mct01.floor_limit
      );

    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : MCT01 ,Fun_Name : db_insert_mct01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_mct01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE my_db_select_def01 ( pCHAR          Primary_key1,
                          pCHAR          Primary_key2,
			              pCHAR          Primary_key3,
                          pDEF01         def01_ptr, 
                          pCHAR          ErrorMsg )
{
   strncpy( pte_def01.organization_id, Primary_key1, sizeof(pte_def01.organization_id) );
   strncpy( pte_def01.merchant_id,     Primary_key2, sizeof(pte_def01.merchant_id) );
   strncpy( pte_def01.term_length,     Primary_key3, sizeof(pte_def01.term_length) );

   /*farad 7/12/1999  modified the select statment to increase performance.*/

    if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL SELECT organization_id   
   INTO :db_def01.organization_id
   FROM def01
   WHERE organization_id = :pte_def01.organization_id AND merchant_id = :pte_def01.merchant_id AND
         term_length = :pte_def01.term_length;
      
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : DEF01 ,Fun_Name : my_db_select_def01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_dcf01_EDTR,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}

/*************************************************************************************/

/**************************************************************************************/
BYTE db_select_dcf01_EDTR ( 	pDCF01	dcf01_ptr, 
                        				pCHAR    ErrorMsg )
{
   memset( &db_dcf01, 0, sizeof( db_dcf01 ) );
   strncpy( pte_dcf01.device_id, dcf01_ptr->primary_key.device_id, sizeof(pte_dcf01.device_id) );
   strncpy( pte_dcf01.merchant_id, dcf01_ptr->merchant_id , sizeof(pte_dcf01.merchant_id) );
   strncpy(pte_dcf01.organization_id, dcf01_ptr->organization_id,sizeof(pte_dcf01.organization_id));
   
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *
   INTO :db_dcf01 
   FROM dcf01
   WHERE device_id = :pte_dcf01.device_id AND 
		 merchant_id = :pte_dcf01.merchant_id AND
		 organization_id = :pte_dcf01.organization_id;
   
     if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : DCF01 ,Fun_Name : db_select_dcf01_EDTR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_dcf01_EDTR,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   db_to_dcf01 (dcf01_ptr);

   return PTEMSG_OK;
}

/*************************************************************************************/

/**************************************************************************************/
BYTE db_select_dcf01_EMVC ( 	pDCF01	dcf01_ptr, 
                        		pCHAR    ErrorMsg )
{
   memset( &db_dcf01, 0, sizeof( db_dcf01 ) );
   strncpy( pte_dcf01.device_id, dcf01_ptr->primary_key.device_id, sizeof(pte_dcf01.device_id) );
   strncpy( pte_dcf01.merchant_id, dcf01_ptr->merchant_id , sizeof(pte_dcf01.merchant_id) );
   strncpy(pte_dcf01.organization_id, dcf01_ptr->organization_id,sizeof(pte_dcf01.organization_id));
   
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *
   INTO :db_dcf01 
   FROM dcf01
   WHERE device_id = :pte_dcf01.device_id AND 
		 merchant_id = :pte_dcf01.merchant_id AND
		 organization_id = :pte_dcf01.organization_id;
   
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : DCF01 ,Fun_Name : db_select_dcf01_EMVC , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}
 
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_def01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   db_to_dcf01 (dcf01_ptr);

   return PTEMSG_OK;
}
/*************************************************************************************/

/*************************************************************************************/
BYTE db_select_mcf01_MPAV (pMCF01 mcf01_ptr, pCHAR  ErrorMsg )
{
   strncpy( pte_mcf01.organization_id, mcf01_ptr->primary_key.organization_id , sizeof(pte_mcf01.organization_id) );
   strncpy( pte_mcf01.merchant_id    , mcf01_ptr->primary_key.merchant_id, sizeof(pte_mcf01.merchant_id) );

    if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *
   INTO :db_mcf01 
   FROM mcf01
   WHERE merchant_id = :pte_mcf01.merchant_id AND
		 organization_id = :pte_mcf01.organization_id;
    
     if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : MCF01 ,Fun_Name : db_select_mcf01_MPAV , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	} 
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_def01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   db_to_mcf01 (mcf01_ptr);
   return PTEMSG_OK;
}

/*************************************************************************************/

/*************************************************************************************/
BYTE db_update_def01( pDEF01 def01_ptr, pCHAR ErrorMsg )
{
   def01_to_db( def01_ptr );

    if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE def01 
   SET   factor                               = :pte_def01.factor,
         deferred_min_amount                  = :pte_def01.deferred_min_amount,
         deferred_max_amount                  = :pte_def01.deferred_max_amount
                   
   WHERE organization_id  = :pte_def01.organization_id AND
         merchant_id = :pte_def01.merchant_id AND
         term_length = :pte_def01.term_length;

     if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : DEF01 ,Fun_Name : db_update_def01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	} 
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_def01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_def01( pDEF01 def01_ptr, pCHAR ErrorMsg )
{
   def01_to_db( def01_ptr );

    if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO def01
     (  
       organization_id, merchant_id, term_length,          
       factor, deferred_min_amount, deferred_max_amount 
     )               
   VALUES(  
           :pte_def01.organization_id, :pte_def01.merchant_id, :pte_def01.term_length,          
           :pte_def01.factor, :pte_def01.deferred_min_amount, :pte_def01.deferred_max_amount 
      );
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : DEF01 ,Fun_Name : db_update_def01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}   

   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_def01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}

BYTE dbcommon_oracle_to_pte_rcode ( LONG oracle_rcode, pCHAR ErrorMsg )
{
   switch (oracle_rcode)
      {
	    case NO_DATA_FOUND:
            strcpy (ErrorMsg, "The Specified row was not found");
            return (PTEMSG_NOT_FOUND);

	    case NOT_CONNECTED_TO_DB:
            case NOT_LOGGED_INTO_DB:
            case TNS_PACKET_WRITER_FAILED:
	    case SHUTDOWN_OR_STARTUP_IN_PROGRESS:
	    strcpy (ErrorMsg, "Not Connected to Database");
	    return (PTEMSG_NOT_CONNECTED_TO_DB);
            default:
            sprintf(ErrorMsg, "% .70s", sqlca.sqlerrm.sqlerrmc);
            return (PTEMSG_DATABASE_ERROR);
   }
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_select_neg_fraud (  pNEGATIVE_FRAUD     Primary_key, 
                            pCHAR               ErrorMsg )
{
   strncpy( pte_negative_fraud.bin_low,  Primary_key->primary_key.bin_low, sizeof(pte_negative_fraud.bin_low) );
   strncpy( pte_negative_fraud.bin_high, Primary_key->primary_key.bin_high, sizeof(pte_negative_fraud.bin_high) );
   pte_negative_fraud.pan_length =       Primary_key->primary_key.pan_length;
   strncpy( pte_negative_fraud.bin_high, Primary_key->primary_key.bin_high, sizeof(pte_negative_fraud.bin_high) );
   pte_negative_fraud.bin_length =       Primary_key->bin_length;

    if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL SELECT bin_low
   INTO :db_negative_fraud.bin_low
   FROM NEGATIVE_FRAUD
   WHERE	bin_low    =  :pte_negative_fraud.bin_low AND
		    bin_high   =  :pte_negative_fraud.bin_high AND
			pan_length =  :pte_negative_fraud.pan_length AND
            mcc        =  :pte_negative_fraud.mcc AND
            bin_length =  :pte_negative_fraud.bin_length;
   
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : NEGATIVE_FRAUD ,Fun_Name : db_select_neg_fraud , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}    
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
  {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_neg_fraud,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_neg_fraud( pNEGATIVE_FRAUD neg_fraud_ptr, pCHAR ErrorMsg )
{
   negative_fraud_to_db( neg_fraud_ptr );

    if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE negative_fraud 
   SET  bin_low                     = :pte_negative_fraud.bin_low,
        bin_high                    = :pte_negative_fraud.bin_high,
        pan_length                  = :pte_negative_fraud.pan_length,
        mcc                         = :pte_negative_fraud.mcc,
        bin_length                  = :pte_negative_fraud.bin_length,
        country_code                = :pte_negative_fraud.country_code
                  
   WHERE	bin_low     =  :pte_negative_fraud.bin_low AND
		    bin_high    =  :pte_negative_fraud.bin_high AND
			pan_length  =  :pte_negative_fraud.pan_length AND
            mcc         =  :pte_negative_fraud.mcc AND
            bin_length  =  :pte_negative_fraud.bin_length;
       
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : NEGATIVE_FRAUD ,Fun_Name : db_update_neg_fraud , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}     
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_neg_fraud,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_neg_fraud( pNEGATIVE_FRAUD negfraud_ptr, pCHAR ErrorMsg )
{
   negative_fraud_to_db( negfraud_ptr );

    if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO negative_fraud
     (  bin_low,
		bin_high,
		pan_length,
		mcc,
		bin_length,
		country_code
     )               
   VALUES(  :pte_negative_fraud.bin_low, 
            :pte_negative_fraud.bin_high, 
            :pte_negative_fraud.pan_length,
            :pte_negative_fraud.mcc,
            :pte_negative_fraud.bin_length,
			:pte_negative_fraud.country_code
      );

    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : NEGATIVE_FRAUD ,Fun_Name : db_insert_neg_fraud , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}
   if ( SQLCODE != 0 ) 
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_neg_fraud,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/




/*added by farad on 8/5/1999 to get the import going on HP*/
BYTE dbcommon_disconnect( pCHAR ErrorMsg )
{
   /* Disconnect from ORACLE. */
   
   EXEC SQL COMMIT WORK RELEASE;
   
   if (SQLCODE < 0)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  dbcommon_disconnect,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}
void dbcommon_commit()
{
  EXEC SQL COMMIT WORK;
}


/*db_set_import_rollback_segment_online - SCR935  LM 02/13/03*/
BYTE db_set_rollback_segment_online(pCHAR ErrorMsg)
{
	EXEC SQL	COMMIT WORK;
	EXEC SQL	ALTER ROLLBACK SEGMENT "RBS37" ONLINE;
	if (SQLCODE < 0)
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_set_rollback_segment_online,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

	EXEC SQL	SET TRANSACTION USE ROLLBACK SEGMENT RBS37;
	if (SQLCODE < 0)
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_set_rollback_segment_online,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

	return PTEMSG_OK;
}

/*db_set_import_rollback_segment_offline - SCR935  LM 02/13/03*/
BYTE db_set_rollback_segment_offline( pCHAR ErrorMsg)
{
	EXEC SQL	ALTER ROLLBACK SEGMENT "RBS37" OFFLINE;

	if (SQLCODE < 0)
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_set_rollback_segment_offline,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

	return PTEMSG_OK;
}


/*************************************************************************************/

/*NAME:        db_update_mppara01   */


/*************************************************************************************/

BYTE db_update_mppara01( pMPPARA01 mppara01_ptr, pCHAR ErrorMsg )

{
   mppara01_to_db( mppara01_ptr );

    if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE mppara01 

	SET product_code	   			= :pte_mppara01.product_code,		
		minmajpurchamt	  			= :pte_mppara01.minmajpurchamt,		 		
		maxmajpurchamt				= :pte_mppara01.maxmajpurchamt,			
		mininstamt					= :pte_mppara01.mininstamt,		
		maxinstamt					= :pte_mppara01.maxinstamt,			
		minmajpurchlmt				= :pte_mppara01.minmajpurchlmt,			
		minpenaltyamt				= :pte_mppara01.minpenaltyamt,			
		maxpenaltyamt				= :pte_mppara01.maxpenaltyamt,			
		penaltyper					= :pte_mppara01.penaltyper,			
		penaltyday					= :pte_mppara01.penaltyday,			
		minamtofaging				= :pte_mppara01.minamtofaging,		
		mntowrtof					= :pte_mppara01.mntowrtof,			
		BPIminamt					= :pte_mppara01.BPIminamt,			
		brokenperdinst				= :pte_mppara01.brokenperdinst,			
		minfreepurchamt				= :pte_mppara01.minfreepurchamt,			
		errorunauthamt				= :pte_mppara01.errorunauthamt,			
		fixedmpfee					= :pte_mppara01.fixedmpfee,			
		mpfeepercnt					= :pte_mppara01.mpfeepercnt,			
		earlyrepayfeeper 			= :pte_mppara01.earlyrepayfeeper,			
		effective_date				= :pte_mppara01.effective_date,		
		maxtrnperday 				= :pte_mppara01.maxtrnperday,			
		maxamtperday 				= :pte_mppara01.maxamtperday,			
		authoverlimit				= :pte_mppara01.authoverlimit,			
		authpara_response_code_1 	= :pte_mppara01.authpara_response_code_1,
		authpara_message_1			= :pte_mppara01.authpara_message_1,	
		authpara_response_code_2	= :pte_mppara01.authpara_response_code_2,
		authpara_message_2			= :pte_mppara01.authpara_message_2,		
		authpara_response_code_3 	= :pte_mppara01.authpara_response_code_3,			
		authpara_message_3			= :pte_mppara01.authpara_message_3		 

                  

   WHERE product_code = :pte_mppara01.product_code;

    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : MPPARA01 ,Fun_Name : db_update_mppara01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}

   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_mppara01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }



   return PTEMSG_OK;

}


/*end of db_update_mppara01 */


/*************************************************************************************/


/*NAME:        db_insert_mppara01   */


/*************************************************************************************/
BYTE db_insert_mppara01( pMPPARA01 mppara01_ptr, pCHAR ErrorMsg )
{
   mppara01_to_db( mppara01_ptr );

    if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO mppara01
     (  product_code,			
		minmajpurchamt,		
		maxmajpurchamt,		
		mininstamt,			
		maxinstamt,			
		minmajpurchlmt,		
		minpenaltyamt,			
		maxpenaltyamt,			
		penaltyper,			
		penaltyday,			
		minamtofaging,			
		mntowrtof,			
		BPIminamt,			
		brokenperdinst,		
		minfreepurchamt,		
		errorunauthamt,		
		fixedmpfee,			
		mpfeepercnt,			
		earlyrepayfeeper, 		
		effective_date,		
		maxtrnperday, 			
		maxamtperday, 			
		authoverlimit,			
		authpara_response_code_1, 	
		authpara_message_1,		
		authpara_response_code_2, 
		authpara_message_2,	
		authpara_response_code_3, 	
		authpara_message_3
     )               
   VALUES(  
   		:pte_mppara01.product_code,			
		:pte_mppara01.minmajpurchamt,		
		:pte_mppara01.maxmajpurchamt,		
		:pte_mppara01.mininstamt,			
		:pte_mppara01.maxinstamt,			
		:pte_mppara01.minmajpurchlmt,		
		:pte_mppara01.minpenaltyamt,			
		:pte_mppara01.maxpenaltyamt,			
		:pte_mppara01.penaltyper,			
		:pte_mppara01.penaltyday,			
		:pte_mppara01.minamtofaging,			
		:pte_mppara01.mntowrtof,			
		:pte_mppara01.BPIminamt,			
		:pte_mppara01.brokenperdinst,		
		:pte_mppara01.minfreepurchamt,		
		:pte_mppara01.errorunauthamt,		
		:pte_mppara01.fixedmpfee,			
		:pte_mppara01.mpfeepercnt,			
		:pte_mppara01.earlyrepayfeeper, 		
		:pte_mppara01.effective_date,		
		:pte_mppara01.maxtrnperday, 			
		:pte_mppara01.maxamtperday, 			
		:pte_mppara01.authoverlimit,			
		:pte_mppara01.authpara_response_code_1, 
		:pte_mppara01.authpara_message_1,		
		:pte_mppara01.authpara_response_code_2, 
		:pte_mppara01.authpara_message_2,
		:pte_mppara01.authpara_response_code_3, 	
		:pte_mppara01.authpara_message_3
      );

    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : MPPARA01 ,Fun_Name : db_insert_mppara01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_mppara01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}



/*end of db_insert_mppara01 */


/*************************************************************************************/


/*NAME:        db_update_mgf01   */


/*************************************************************************************/

BYTE db_update_mgf01( pMGF01 mgf01_ptr, pCHAR ErrorMsg )

{

   mgf01_to_db( mgf01_ptr );

    if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE MGF01 
   SET  merchant_group_id					=:pte_mgf01.merchant_group_id, 	
		effective_date						=:pte_mgf01.effective_date,
		
		merchgrp_Amount_limit_1				=:pte_mgf01.merchgrp_Amount_limit_1,
		merchgrepint_nbr_of_months_1		=:pte_mgf01.merchgrepint_nbr_of_months_1,
		merchgrepint_INT_rate_1				=:pte_mgf01.merchgrepint_INT_rate_1,
		merchgrepint_MSF_rate_1				=:pte_mgf01.merchgrepint_MSF_rate_1,
		merchgrepint_nbr_of_months_2	   	=:pte_mgf01.merchgrepint_nbr_of_months_2,
		merchgrepint_INT_rate_2	   			=:pte_mgf01.merchgrepint_INT_rate_2,
		merchgrepint_MSF_rate_2	   			=:pte_mgf01.merchgrepint_MSF_rate_2,
		merchgrepint_nbr_of_months_3		=:pte_mgf01.merchgrepint_nbr_of_months_3,
		merchgrepint_INT_rate_3				=:pte_mgf01.merchgrepint_INT_rate_3,
		merchgrepint_MSF_rate_3				=:pte_mgf01.merchgrepint_MSF_rate_3,
		merchgrepint_nbr_of_months_4	   	=:pte_mgf01.merchgrepint_nbr_of_months_4,
		merchgrepint_INT_rate_4	   			=:pte_mgf01.merchgrepint_INT_rate_4,
		merchgrepint_MSF_rate_4	   			=:pte_mgf01.merchgrepint_MSF_rate_4,
		merchgrepint_nbr_of_months_5		=:pte_mgf01.merchgrepint_nbr_of_months_5,
		merchgrepint_INT_rate_5				=:pte_mgf01.merchgrepint_INT_rate_5,
		merchgrepint_MSF_rate_5				=:pte_mgf01.merchgrepint_MSF_rate_5,
		merchgrepint_nbr_of_months_6	   	=:pte_mgf01.merchgrepint_nbr_of_months_6,
		merchgrepint_INT_rate_6	   			=:pte_mgf01.merchgrepint_INT_rate_6,
		merchgrepint_MSF_rate_6	   			=:pte_mgf01.merchgrepint_MSF_rate_6,
		merchgrepint_nbr_of_months_7		=:pte_mgf01.merchgrepint_nbr_of_months_7,
		merchgrepint_INT_rate_7				=:pte_mgf01.merchgrepint_INT_rate_7,
		merchgrepint_MSF_rate_7				=:pte_mgf01.merchgrepint_MSF_rate_7,
		merchgrepint_nbr_of_months_8	   	=:pte_mgf01.merchgrepint_nbr_of_months_8,
		merchgrepint_INT_rate_8	  			=:pte_mgf01.merchgrepint_INT_rate_8,
		merchgrepint_MSF_rate_8	   			=:pte_mgf01.merchgrepint_MSF_rate_8,
		merchgrepint_nbr_of_months_9		=:pte_mgf01.merchgrepint_nbr_of_months_9,
		merchgrepint_INT_rate_9				=:pte_mgf01.merchgrepint_INT_rate_9,
		merchgrepint_MSF_rate_9				=:pte_mgf01.merchgrepint_MSF_rate_9,
		merchgrepint_nbr_of_months_10		=:pte_mgf01.merchgrepint_nbr_of_months_10,
		merchgrepint_INT_rate_10			=:pte_mgf01.merchgrepint_INT_rate_10,
		merchgrepint_MSF_rate_10			=:pte_mgf01.merchgrepint_MSF_rate_10,
		merchgrepint_nbr_of_months_10A		=:pte_mgf01.merchgrepint_nbr_of_months_10A,
		merchgrepint_INT_rate_10A			=:pte_mgf01.merchgrepint_INT_rate_10A,
		merchgrepint_MSF_rate_10A			=:pte_mgf01.merchgrepint_MSF_rate_10A,
		merchgrepint_nbr_of_months_10B		=:pte_mgf01.merchgrepint_nbr_of_months_10B,
		merchgrepint_INT_rate_10B			=:pte_mgf01.merchgrepint_INT_rate_10B,
		merchgrepint_MSF_rate_10B			=:pte_mgf01.merchgrepint_MSF_rate_10B,
		

		merchgrp_Amount_limit_2				= :pte_mgf01.merchgrp_Amount_limit_2,
		merchgrepint_nbr_of_months_11		=:pte_mgf01.merchgrepint_nbr_of_months_11,
		merchgrepint_INT_rate_11			=:pte_mgf01.merchgrepint_INT_rate_11,
		merchgrepint_MSF_rate_11			=:pte_mgf01.merchgrepint_MSF_rate_11,
		merchgrepint_nbr_of_months_12	   	=:pte_mgf01.merchgrepint_nbr_of_months_12,
		merchgrepint_INT_rate_12	   		=:pte_mgf01.merchgrepint_INT_rate_12,
		merchgrepint_MSF_rate_12	   		=:pte_mgf01.merchgrepint_MSF_rate_12,
		merchgrepint_nbr_of_months_13		=:pte_mgf01.merchgrepint_nbr_of_months_13,
		merchgrepint_INT_rate_13			=:pte_mgf01.merchgrepint_INT_rate_13,
		merchgrepint_MSF_rate_13			=:pte_mgf01.merchgrepint_MSF_rate_13,
		merchgrepint_nbr_of_months_14	   	=:pte_mgf01.merchgrepint_nbr_of_months_14,
		merchgrepint_INT_rate_14	   		=:pte_mgf01.merchgrepint_INT_rate_14,
		merchgrepint_MSF_rate_14	   		=:pte_mgf01.merchgrepint_MSF_rate_14,
		merchgrepint_nbr_of_months_15		=:pte_mgf01.merchgrepint_nbr_of_months_15,
		merchgrepint_INT_rate_15			=:pte_mgf01.merchgrepint_INT_rate_15,
		merchgrepint_MSF_rate_15			=:pte_mgf01.merchgrepint_MSF_rate_15,
		merchgrepint_nbr_of_months_16	   	=:pte_mgf01.merchgrepint_nbr_of_months_16,
		merchgrepint_INT_rate_16	   		=:pte_mgf01.merchgrepint_INT_rate_16,
		merchgrepint_MSF_rate_16	   		=:pte_mgf01.merchgrepint_MSF_rate_16,
		merchgrepint_nbr_of_months_17		=:pte_mgf01.merchgrepint_nbr_of_months_17,
		merchgrepint_INT_rate_17			=:pte_mgf01.merchgrepint_INT_rate_17,
		merchgrepint_MSF_rate_17			=:pte_mgf01.merchgrepint_MSF_rate_17,
		merchgrepint_nbr_of_months_18	   	=:pte_mgf01.merchgrepint_nbr_of_months_18,
		merchgrepint_INT_rate_18	   		=:pte_mgf01.merchgrepint_INT_rate_18,
		merchgrepint_MSF_rate_18	   		=:pte_mgf01.merchgrepint_MSF_rate_18,
		merchgrepint_nbr_of_months_19		=:pte_mgf01.merchgrepint_nbr_of_months_19,
		merchgrepint_INT_rate_19			=:pte_mgf01.merchgrepint_INT_rate_19,
		merchgrepint_MSF_rate_19			=:pte_mgf01.merchgrepint_MSF_rate_19,
		merchgrepint_nbr_of_months_20		=:pte_mgf01.merchgrepint_nbr_of_months_20,
		merchgrepint_INT_rate_20			=:pte_mgf01.merchgrepint_INT_rate_20,
		merchgrepint_MSF_rate_20			=:pte_mgf01.merchgrepint_MSF_rate_20,
		merchgrepint_nbr_of_months_20A		=:pte_mgf01.merchgrepint_nbr_of_months_20A,
		merchgrepint_INT_rate_20A			=:pte_mgf01.merchgrepint_INT_rate_20A,
		merchgrepint_MSF_rate_20A			=:pte_mgf01.merchgrepint_MSF_rate_20A,
		merchgrepint_nbr_of_months_20B		=:pte_mgf01.merchgrepint_nbr_of_months_20B,
		merchgrepint_INT_rate_20B			=:pte_mgf01.merchgrepint_INT_rate_20B,
		merchgrepint_MSF_rate_20B			=:pte_mgf01.merchgrepint_MSF_rate_20B,
		
		merchgrp_Amount_limit_3				= :pte_mgf01.merchgrp_Amount_limit_3,	
		merchgrepint_nbr_of_months_21		=:pte_mgf01.merchgrepint_nbr_of_months_21,
		merchgrepint_INT_rate_21			=:pte_mgf01.merchgrepint_INT_rate_21,
		merchgrepint_MSF_rate_21			=:pte_mgf01.merchgrepint_MSF_rate_21,
		merchgrepint_nbr_of_months_22	   	=:pte_mgf01.merchgrepint_nbr_of_months_22,
		merchgrepint_INT_rate_22	   		=:pte_mgf01.merchgrepint_INT_rate_22,
		merchgrepint_MSF_rate_22	   		=:pte_mgf01.merchgrepint_MSF_rate_22,
		merchgrepint_nbr_of_months_23		=:pte_mgf01.merchgrepint_nbr_of_months_23,
		merchgrepint_INT_rate_23			=:pte_mgf01.merchgrepint_INT_rate_23,
		merchgrepint_MSF_rate_23			=:pte_mgf01.merchgrepint_MSF_rate_23,
		merchgrepint_nbr_of_months_24	   	=:pte_mgf01.merchgrepint_nbr_of_months_24,
		merchgrepint_INT_rate_24	   		=:pte_mgf01.merchgrepint_INT_rate_24,
		merchgrepint_MSF_rate_24	   		=:pte_mgf01.merchgrepint_MSF_rate_24,
		merchgrepint_nbr_of_months_25		=:pte_mgf01.merchgrepint_nbr_of_months_25,
		merchgrepint_INT_rate_25			=:pte_mgf01.merchgrepint_INT_rate_25,
		merchgrepint_MSF_rate_25			=:pte_mgf01.merchgrepint_MSF_rate_25,
		merchgrepint_nbr_of_months_26	   	=:pte_mgf01.merchgrepint_nbr_of_months_26,
		merchgrepint_INT_rate_26	   		=:pte_mgf01.merchgrepint_INT_rate_26,
		merchgrepint_MSF_rate_26	   		=:pte_mgf01.merchgrepint_MSF_rate_26,
		merchgrepint_nbr_of_months_27		=:pte_mgf01.merchgrepint_nbr_of_months_27,
		merchgrepint_INT_rate_27			=:pte_mgf01.merchgrepint_INT_rate_27,
		merchgrepint_MSF_rate_27			=:pte_mgf01.merchgrepint_MSF_rate_27,
		merchgrepint_nbr_of_months_28	   	=:pte_mgf01.merchgrepint_nbr_of_months_28,
		merchgrepint_INT_rate_28	   		=:pte_mgf01.merchgrepint_INT_rate_28,
		merchgrepint_MSF_rate_28	   		=:pte_mgf01.merchgrepint_MSF_rate_28,
		merchgrepint_nbr_of_months_29		=:pte_mgf01.merchgrepint_nbr_of_months_29,
		merchgrepint_INT_rate_29			=:pte_mgf01.merchgrepint_INT_rate_29,
		merchgrepint_MSF_rate_29			=:pte_mgf01.merchgrepint_MSF_rate_29,
		merchgrepint_nbr_of_months_30		=:pte_mgf01.merchgrepint_nbr_of_months_30,
		merchgrepint_INT_rate_30			=:pte_mgf01.merchgrepint_INT_rate_30,
		merchgrepint_MSF_rate_30			=:pte_mgf01.merchgrepint_MSF_rate_30,
		merchgrepint_nbr_of_months_30A		=:pte_mgf01.merchgrepint_nbr_of_months_30A,
		merchgrepint_INT_rate_30A			=:pte_mgf01.merchgrepint_INT_rate_30A,
		merchgrepint_MSF_rate_30A			=:pte_mgf01.merchgrepint_MSF_rate_30A,
		merchgrepint_nbr_of_months_30B		=:pte_mgf01.merchgrepint_nbr_of_months_30A,
		merchgrepint_INT_rate_30B			=:pte_mgf01.merchgrepint_INT_rate_30A,
		merchgrepint_MSF_rate_30B			=:pte_mgf01.merchgrepint_MSF_rate_30A,
		
		merchgrp_Amount_limit_4				= :pte_mgf01.merchgrp_Amount_limit_4,			
		merchgrepint_nbr_of_months_31		=:pte_mgf01.merchgrepint_nbr_of_months_31,
		merchgrepint_INT_rate_31			=:pte_mgf01.merchgrepint_INT_rate_31,
		merchgrepint_MSF_rate_31			=:pte_mgf01.merchgrepint_MSF_rate_31,
		merchgrepint_nbr_of_months_32	   	=:pte_mgf01.merchgrepint_nbr_of_months_32,
		merchgrepint_INT_rate_32	   		=:pte_mgf01.merchgrepint_INT_rate_32,
		merchgrepint_MSF_rate_32	   		=:pte_mgf01.merchgrepint_MSF_rate_32,
		merchgrepint_nbr_of_months_33		=:pte_mgf01.merchgrepint_nbr_of_months_33,
		merchgrepint_INT_rate_33			=:pte_mgf01.merchgrepint_INT_rate_33,
		merchgrepint_MSF_rate_33			=:pte_mgf01.merchgrepint_MSF_rate_33,
		merchgrepint_nbr_of_months_34	   	=:pte_mgf01.merchgrepint_nbr_of_months_34,
		merchgrepint_INT_rate_34	   		=:pte_mgf01.merchgrepint_INT_rate_34,
		merchgrepint_MSF_rate_34	   		=:pte_mgf01.merchgrepint_MSF_rate_34,
		merchgrepint_nbr_of_months_35		=:pte_mgf01.merchgrepint_nbr_of_months_35,
		merchgrepint_INT_rate_35			=:pte_mgf01.merchgrepint_INT_rate_35,
		merchgrepint_MSF_rate_35			=:pte_mgf01.merchgrepint_MSF_rate_35,
		merchgrepint_nbr_of_months_36	   	=:pte_mgf01.merchgrepint_nbr_of_months_36,
		merchgrepint_INT_rate_36	   		=:pte_mgf01.merchgrepint_INT_rate_36,
		merchgrepint_MSF_rate_36	   		=:pte_mgf01.merchgrepint_MSF_rate_36,
		merchgrepint_nbr_of_months_37		=:pte_mgf01.merchgrepint_nbr_of_months_37,
		merchgrepint_INT_rate_37			=:pte_mgf01.merchgrepint_INT_rate_37,
		merchgrepint_MSF_rate_37			=:pte_mgf01.merchgrepint_MSF_rate_37,
		merchgrepint_nbr_of_months_38	   	=:pte_mgf01.merchgrepint_nbr_of_months_38,
		merchgrepint_INT_rate_38	   		=:pte_mgf01.merchgrepint_INT_rate_38,
		merchgrepint_MSF_rate_38	   		=:pte_mgf01.merchgrepint_MSF_rate_38,
		merchgrepint_nbr_of_months_39		=:pte_mgf01.merchgrepint_nbr_of_months_39,
		merchgrepint_INT_rate_39			=:pte_mgf01.merchgrepint_INT_rate_39,
		merchgrepint_MSF_rate_39			=:pte_mgf01.merchgrepint_MSF_rate_39,
		merchgrepint_nbr_of_months_40		=:pte_mgf01.merchgrepint_nbr_of_months_40,
		merchgrepint_INT_rate_40			=:pte_mgf01.merchgrepint_INT_rate_40,
		merchgrepint_MSF_rate_40			=:pte_mgf01.merchgrepint_MSF_rate_40,
		merchgrepint_nbr_of_months_40A		=:pte_mgf01.merchgrepint_nbr_of_months_40A,
		merchgrepint_INT_rate_40A			=:pte_mgf01.merchgrepint_INT_rate_40A,
		merchgrepint_MSF_rate_40A			=:pte_mgf01.merchgrepint_MSF_rate_40A,
		merchgrepint_nbr_of_months_40B		=:pte_mgf01.merchgrepint_nbr_of_months_40B,
		merchgrepint_INT_rate_40B			=:pte_mgf01.merchgrepint_INT_rate_40B,
		merchgrepint_MSF_rate_40B			=:pte_mgf01.merchgrepint_MSF_rate_40B
			

   WHERE merchant_group_id = :pte_mgf01.merchant_group_id ;
       
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : MGF01 ,Fun_Name : db_update_mgf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}    
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_mgf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}


/*end of db_update_mgf01 */

/*************************************************************************************/


/*NAME:        db_insert_mgf01   */


/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_mgf01( pMGF01 mgf01_ptr, pCHAR ErrorMsg )
{

   mgf01_to_db( mgf01_ptr );

    if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO mgf01
     ( 
		merchant_group_id, 			
		effective_date,		
		
		merchgrp_Amount_limit_1,			
		merchgrepint_nbr_of_months_1,	
		merchgrepint_INT_rate_1,	
		merchgrepint_MSF_rate_1,	
		merchgrepint_nbr_of_months_2,	
		merchgrepint_INT_rate_2,	
		merchgrepint_MSF_rate_2,	
		merchgrepint_nbr_of_months_3,	
		merchgrepint_INT_rate_3,	
		merchgrepint_MSF_rate_3,	
		merchgrepint_nbr_of_months_4,	
		merchgrepint_INT_rate_4,	
		merchgrepint_MSF_rate_4,	
		merchgrepint_nbr_of_months_5,	
		merchgrepint_INT_rate_5,	
		merchgrepint_MSF_rate_5,	
		merchgrepint_nbr_of_months_6,	
		merchgrepint_INT_rate_6,	
		merchgrepint_MSF_rate_6,	
		merchgrepint_nbr_of_months_7,	
		merchgrepint_INT_rate_7,	
		merchgrepint_MSF_rate_7,	
		merchgrepint_nbr_of_months_8,	
		merchgrepint_INT_rate_8,	
		merchgrepint_MSF_rate_8,	
		merchgrepint_nbr_of_months_9,
		merchgrepint_INT_rate_9,	
		merchgrepint_MSF_rate_9,	
		merchgrepint_nbr_of_months_10, 	
		merchgrepint_INT_rate_10,	
		merchgrepint_MSF_rate_10,	
		merchgrepint_nbr_of_months_10A, 	
		merchgrepint_INT_rate_10A,	
		merchgrepint_MSF_rate_10A,	
		merchgrepint_nbr_of_months_10B, 	
		merchgrepint_INT_rate_10B,	
		merchgrepint_MSF_rate_10B,	
		
		merchgrp_Amount_limit_2,			
		merchgrepint_nbr_of_months_11, 	
		merchgrepint_INT_rate_11,	
		merchgrepint_MSF_rate_11,	
		merchgrepint_nbr_of_months_12, 	
		merchgrepint_INT_rate_12,	
		merchgrepint_MSF_rate_12,	
		merchgrepint_nbr_of_months_13, 	
		merchgrepint_INT_rate_13,	
		merchgrepint_MSF_rate_13,	
		merchgrepint_nbr_of_months_14, 	
		merchgrepint_INT_rate_14,	
		merchgrepint_MSF_rate_14,	
		merchgrepint_nbr_of_months_15, 	
		merchgrepint_INT_rate_15,	
		merchgrepint_MSF_rate_15,	
		merchgrepint_nbr_of_months_16, 	
		merchgrepint_INT_rate_16,	
		merchgrepint_MSF_rate_16,	
		merchgrepint_nbr_of_months_17, 	
		merchgrepint_INT_rate_17,	
		merchgrepint_MSF_rate_17,	
		merchgrepint_nbr_of_months_18, 	
		merchgrepint_INT_rate_18,	
		merchgrepint_MSF_rate_18,	
		merchgrepint_nbr_of_months_19, 	
		merchgrepint_INT_rate_19,	
		merchgrepint_MSF_rate_19,	
		merchgrepint_nbr_of_months_20, 	
		merchgrepint_INT_rate_20,	
		merchgrepint_MSF_rate_20,
		merchgrepint_nbr_of_months_20A, 	
		merchgrepint_INT_rate_20A,	
		merchgrepint_MSF_rate_20A,	
		merchgrepint_nbr_of_months_20B, 	
		merchgrepint_INT_rate_20B,	
		merchgrepint_MSF_rate_20B,	
		
		merchgrp_Amount_limit_3,			
		merchgrepint_nbr_of_months_21,	
		merchgrepint_INT_rate_21,	
		merchgrepint_MSF_rate_21,	
		merchgrepint_nbr_of_months_22, 	
		merchgrepint_INT_rate_22,	
		merchgrepint_MSF_rate_22,	
		merchgrepint_nbr_of_months_23, 	
		merchgrepint_INT_rate_23,	
		merchgrepint_MSF_rate_23,	
		merchgrepint_nbr_of_months_24, 	
		merchgrepint_INT_rate_24,	
		merchgrepint_MSF_rate_24,	
		merchgrepint_nbr_of_months_25, 	
		merchgrepint_INT_rate_25,	
		merchgrepint_MSF_rate_25,	
		merchgrepint_nbr_of_months_26, 	
		merchgrepint_INT_rate_26,	
		merchgrepint_MSF_rate_26,	
		merchgrepint_nbr_of_months_27, 	
		merchgrepint_INT_rate_27,	
		merchgrepint_MSF_rate_27,	
		merchgrepint_nbr_of_months_28, 	
		merchgrepint_INT_rate_28,	
		merchgrepint_MSF_rate_28,	
		merchgrepint_nbr_of_months_29, 	
		merchgrepint_INT_rate_29,	
		merchgrepint_MSF_rate_29,	
		merchgrepint_nbr_of_months_30, 	
		merchgrepint_INT_rate_30,	
		merchgrepint_MSF_rate_30,	
		merchgrepint_nbr_of_months_30A, 	
		merchgrepint_INT_rate_30A,	
		merchgrepint_MSF_rate_30A,	
		merchgrepint_nbr_of_months_30B, 	
		merchgrepint_INT_rate_30B,	
		merchgrepint_MSF_rate_30B,	
		
		merchgrp_Amount_limit_4,			
		merchgrepint_nbr_of_months_31, 	
		merchgrepint_INT_rate_31,	
		merchgrepint_MSF_rate_31,	
		merchgrepint_nbr_of_months_32, 	
		merchgrepint_INT_rate_32,	
		merchgrepint_MSF_rate_32,	
		merchgrepint_nbr_of_months_33, 	
		merchgrepint_INT_rate_33,	
		merchgrepint_MSF_rate_33,	
		merchgrepint_nbr_of_months_34, 	
		merchgrepint_INT_rate_34,	
		merchgrepint_MSF_rate_34,	
		merchgrepint_nbr_of_months_35, 	
		merchgrepint_INT_rate_35,	
		merchgrepint_MSF_rate_35,	
		merchgrepint_nbr_of_months_36, 	
		merchgrepint_INT_rate_36,	
		merchgrepint_MSF_rate_36,	
		merchgrepint_nbr_of_months_37, 	
		merchgrepint_INT_rate_37,	
		merchgrepint_MSF_rate_37,	
		merchgrepint_nbr_of_months_38, 	
		merchgrepint_INT_rate_38,	
		merchgrepint_MSF_rate_38,	
		merchgrepint_nbr_of_months_39, 	
		merchgrepint_INT_rate_39,	
		merchgrepint_MSF_rate_39,	
		merchgrepint_nbr_of_months_40, 	
		merchgrepint_INT_rate_40,	
		merchgrepint_MSF_rate_40,
		merchgrepint_nbr_of_months_40A, 	
		merchgrepint_INT_rate_40A,	
		merchgrepint_MSF_rate_40A,
		merchgrepint_nbr_of_months_40B, 	
		merchgrepint_INT_rate_40B,	
		merchgrepint_MSF_rate_40B	
     )               
   VALUES(  :pte_mgf01.merchant_group_id, 			
			:pte_mgf01.effective_date,	
			
			:pte_mgf01.merchgrp_Amount_limit_1,			
			:pte_mgf01.merchgrepint_nbr_of_months_1,	
			:pte_mgf01.merchgrepint_INT_rate_1,	
			:pte_mgf01.merchgrepint_MSF_rate_1,	
			:pte_mgf01.merchgrepint_nbr_of_months_2,	
			:pte_mgf01.merchgrepint_INT_rate_2,	
			:pte_mgf01.merchgrepint_MSF_rate_2,	
			:pte_mgf01.merchgrepint_nbr_of_months_3,	
			:pte_mgf01.merchgrepint_INT_rate_3,	
			:pte_mgf01.merchgrepint_MSF_rate_3,	
			:pte_mgf01.merchgrepint_nbr_of_months_4,	
			:pte_mgf01.merchgrepint_INT_rate_4,	
			:pte_mgf01.merchgrepint_MSF_rate_4,	
			:pte_mgf01.merchgrepint_nbr_of_months_5,	
			:pte_mgf01.merchgrepint_INT_rate_5,	
			:pte_mgf01.merchgrepint_MSF_rate_5,	
			:pte_mgf01.merchgrepint_nbr_of_months_6,	
			:pte_mgf01.merchgrepint_INT_rate_6,	
			:pte_mgf01.merchgrepint_MSF_rate_6,	
			:pte_mgf01.merchgrepint_nbr_of_months_7,	
			:pte_mgf01.merchgrepint_INT_rate_7,	
			:pte_mgf01.merchgrepint_MSF_rate_7,	
			:pte_mgf01.merchgrepint_nbr_of_months_8,	
			:pte_mgf01.merchgrepint_INT_rate_8,	
			:pte_mgf01.merchgrepint_MSF_rate_8,	
			:pte_mgf01.merchgrepint_nbr_of_months_9,
			:pte_mgf01.merchgrepint_INT_rate_9,	
			:pte_mgf01.merchgrepint_MSF_rate_9,	
			:pte_mgf01.merchgrepint_nbr_of_months_10, 	
			:pte_mgf01.merchgrepint_INT_rate_10,	
			:pte_mgf01.merchgrepint_MSF_rate_10,
			:pte_mgf01.merchgrepint_nbr_of_months_10A, 	
			:pte_mgf01.merchgrepint_INT_rate_10A,	
			:pte_mgf01.merchgrepint_MSF_rate_10A,	
			:pte_mgf01.merchgrepint_nbr_of_months_10B, 	
			:pte_mgf01.merchgrepint_INT_rate_10B,	
			:pte_mgf01.merchgrepint_MSF_rate_10B,	
			
			:pte_mgf01.merchgrp_Amount_limit_2,			
			:pte_mgf01.merchgrepint_nbr_of_months_11, 	
			:pte_mgf01.merchgrepint_INT_rate_11,	
			:pte_mgf01.merchgrepint_MSF_rate_11,	
			:pte_mgf01.merchgrepint_nbr_of_months_12, 	
			:pte_mgf01.merchgrepint_INT_rate_12,	
			:pte_mgf01.merchgrepint_MSF_rate_12,	
			:pte_mgf01.merchgrepint_nbr_of_months_13, 	
			:pte_mgf01.merchgrepint_INT_rate_13,	
			:pte_mgf01.merchgrepint_MSF_rate_13,	
			:pte_mgf01.merchgrepint_nbr_of_months_14, 	
			:pte_mgf01.merchgrepint_INT_rate_14,	
			:pte_mgf01.merchgrepint_MSF_rate_14,	
			:pte_mgf01.merchgrepint_nbr_of_months_15, 	
			:pte_mgf01.merchgrepint_INT_rate_15,	
			:pte_mgf01.merchgrepint_MSF_rate_15,	
			:pte_mgf01.merchgrepint_nbr_of_months_16, 	
			:pte_mgf01.merchgrepint_INT_rate_16,	
			:pte_mgf01.merchgrepint_MSF_rate_16,	
			:pte_mgf01.merchgrepint_nbr_of_months_17, 	
			:pte_mgf01.merchgrepint_INT_rate_17,	
			:pte_mgf01.merchgrepint_MSF_rate_17,	
			:pte_mgf01.merchgrepint_nbr_of_months_18, 	
			:pte_mgf01.merchgrepint_INT_rate_18,	
			:pte_mgf01.merchgrepint_MSF_rate_18,	
			:pte_mgf01.merchgrepint_nbr_of_months_19, 	
			:pte_mgf01.merchgrepint_INT_rate_19,	
			:pte_mgf01.merchgrepint_MSF_rate_19,	
			:pte_mgf01.merchgrepint_nbr_of_months_20, 	
			:pte_mgf01.merchgrepint_INT_rate_20,	
			:pte_mgf01.merchgrepint_MSF_rate_20,
			:pte_mgf01.merchgrepint_nbr_of_months_20A, 	
			:pte_mgf01.merchgrepint_INT_rate_20A,	
			:pte_mgf01.merchgrepint_MSF_rate_20A,
			:pte_mgf01.merchgrepint_nbr_of_months_20B, 	
			:pte_mgf01.merchgrepint_INT_rate_20B,	
			:pte_mgf01.merchgrepint_MSF_rate_20B,
			
			:pte_mgf01.merchgrp_Amount_limit_3,			
			:pte_mgf01.merchgrepint_nbr_of_months_21,	
			:pte_mgf01.merchgrepint_INT_rate_21,	
			:pte_mgf01.merchgrepint_MSF_rate_21,	
			:pte_mgf01.merchgrepint_nbr_of_months_22, 	
			:pte_mgf01.merchgrepint_INT_rate_22,	
			:pte_mgf01.merchgrepint_MSF_rate_22,	
			:pte_mgf01.merchgrepint_nbr_of_months_23, 	
			:pte_mgf01.merchgrepint_INT_rate_23,	
			:pte_mgf01.merchgrepint_MSF_rate_23,	
			:pte_mgf01.merchgrepint_nbr_of_months_24, 	
			:pte_mgf01.merchgrepint_INT_rate_24,	
			:pte_mgf01.merchgrepint_MSF_rate_24,	
			:pte_mgf01.merchgrepint_nbr_of_months_25, 	
			:pte_mgf01.merchgrepint_INT_rate_25,	
			:pte_mgf01.merchgrepint_MSF_rate_25,	
			:pte_mgf01.merchgrepint_nbr_of_months_26, 	
			:pte_mgf01.merchgrepint_INT_rate_26,	
			:pte_mgf01.merchgrepint_MSF_rate_26,	
			:pte_mgf01.merchgrepint_nbr_of_months_27, 	
			:pte_mgf01.merchgrepint_INT_rate_27,	
			:pte_mgf01.merchgrepint_MSF_rate_27,	
			:pte_mgf01.merchgrepint_nbr_of_months_28, 	
			:pte_mgf01.merchgrepint_INT_rate_28,	
			:pte_mgf01.merchgrepint_MSF_rate_28,	
			:pte_mgf01.merchgrepint_nbr_of_months_29, 	
			:pte_mgf01.merchgrepint_INT_rate_29,	
			:pte_mgf01.merchgrepint_MSF_rate_29,	
			:pte_mgf01.merchgrepint_nbr_of_months_30, 	
			:pte_mgf01.merchgrepint_INT_rate_30,	
			:pte_mgf01.merchgrepint_MSF_rate_30,	
			:pte_mgf01.merchgrepint_nbr_of_months_30A, 	
			:pte_mgf01.merchgrepint_INT_rate_30A,	
			:pte_mgf01.merchgrepint_MSF_rate_30A,	
			:pte_mgf01.merchgrepint_nbr_of_months_30B, 	
			:pte_mgf01.merchgrepint_INT_rate_30B,	
			:pte_mgf01.merchgrepint_MSF_rate_30B,	
			
			:pte_mgf01.merchgrp_Amount_limit_4,			
			:pte_mgf01.merchgrepint_nbr_of_months_31, 	
			:pte_mgf01.merchgrepint_INT_rate_31,	
			:pte_mgf01.merchgrepint_MSF_rate_31,	
			:pte_mgf01.merchgrepint_nbr_of_months_32, 	
			:pte_mgf01.merchgrepint_INT_rate_32,	
			:pte_mgf01.merchgrepint_MSF_rate_32,	
			:pte_mgf01.merchgrepint_nbr_of_months_33, 	
			:pte_mgf01.merchgrepint_INT_rate_33,	
			:pte_mgf01.merchgrepint_MSF_rate_33,	
			:pte_mgf01.merchgrepint_nbr_of_months_34, 	
			:pte_mgf01.merchgrepint_INT_rate_34,	
			:pte_mgf01.merchgrepint_MSF_rate_34,	
			:pte_mgf01.merchgrepint_nbr_of_months_35, 	
			:pte_mgf01.merchgrepint_INT_rate_35,	
			:pte_mgf01.merchgrepint_MSF_rate_35,	
			:pte_mgf01.merchgrepint_nbr_of_months_36, 	
			:pte_mgf01.merchgrepint_INT_rate_36,	
			:pte_mgf01.merchgrepint_MSF_rate_36,	
			:pte_mgf01.merchgrepint_nbr_of_months_37, 	
			:pte_mgf01.merchgrepint_INT_rate_37,	
			:pte_mgf01.merchgrepint_MSF_rate_37,	
			:pte_mgf01.merchgrepint_nbr_of_months_38, 	
			:pte_mgf01.merchgrepint_INT_rate_38,	
			:pte_mgf01.merchgrepint_MSF_rate_38,	
			:pte_mgf01.merchgrepint_nbr_of_months_39, 	
			:pte_mgf01.merchgrepint_INT_rate_39,	
			:pte_mgf01.merchgrepint_MSF_rate_39,	
			:pte_mgf01.merchgrepint_nbr_of_months_40, 	
			:pte_mgf01.merchgrepint_INT_rate_40,	
			:pte_mgf01.merchgrepint_MSF_rate_40,
			:pte_mgf01.merchgrepint_nbr_of_months_40A, 	
			:pte_mgf01.merchgrepint_INT_rate_40A,	
			:pte_mgf01.merchgrepint_MSF_rate_40A,
			:pte_mgf01.merchgrepint_nbr_of_months_40B, 	
			:pte_mgf01.merchgrepint_INT_rate_40B,	
			:pte_mgf01.merchgrepint_MSF_rate_40B
	 	   
      );
      
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Import, ST1:%d,ST2:%d,Data_Type : MGF01 ,Fun_Name : db_insert_mgf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	} 

   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_mgf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*end of db_insert_mgf01 */

/*************************************************************************************/

