/******************************************************************************

   Module:           tx_database.pc

   Title:            Transaction Server Dataserver DB Routines

   Description:

   Application:      Equitable

   Revision History: 1.0

   $Log:   N:\POS\PVCS6.6\EPICPORTZ\PTE\Equitable\trands\tx_database.pc  $  

******************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#ifdef WIN32
#include <sqlproto.h>
#endif
#include <math.h>
#include <time.h>
#include <sys/timeb.h>
#include <ctype.h>

#include "basictyp.h"
#include "pte.h"
#include "pteipc.h"
#include "ptemsg.h"
#include "ptetimer.h"
#include "tx_database.h"
#include "dbcommon.h"
#include "txutils.h"
#include "ptetime.h"
#include "ntutils.h"
#include "memmnger.h"
#include "trands.h"

#define VISA7 1
#define MC12_OCT2023 1
#define MC13_OCT2023 1

#ifdef MC12_OCT2023
#define MC_CATEGORY_CODE "1234"
#endif

#ifdef MC13_OCT2023
#define MAC_CATEGORY_CODE "1111"
#endif

#ifdef HCTS2
extern BYTE card_activation_flag;
extern BYTE card_updating_status [5];
extern BYTE card_current_status [51][5];
extern INT  total_card_current_status;
BOOLEAN verify_card_current_status(char *, char *);
void populate_change_history_table(char *, char *, char*, char *);
#endif

/* Function prototypes */
extern long Txutils_Calculate_Julian_Date(BYTE * );
extern void Txutils_Calculate_Gregorian_Date(LONG , pCHAR );
extern void genutil_format_date(pCHAR temp);

/* For DB statics added by raghu */
extern BYTE DB_MsgSubtype2 ;
extern BYTE DB_MsgSubtype1 ;
char DB_Tmr_Lgng_Buf[512];
double start_time;
double end_time  ;
double duration  ; 
extern INT db_error_statics_flag;
extern double db_error_statics_value;
char er_buf[512];
BYTE DB_rcode;
extern CHAR  DB_Logging_Filename[256];
extern CHAR  DB_module_file_name[256];
extern CHAR  DB_file_path[256];
/* End   */

extern CHAR User_status_Control_Report_file_name[256];

int Convert_Amt_To_Auth_Tx_String_Format 
                              (double nAmount, char* strAmount) ;

void LeftFill_String_With_Character (unsigned int destination_array_size,
     char* strAmount,
     unsigned char fill_character) ;


/* Oracle error codes */
#define NULL_COLUMN_DATA -1405
#define NO_DATA_FOUND    1403


EXEC SQL INCLUDE sqlca;

extern CHAR AppName[];
INT    rtnval;
SQL01  Sql01;

extern DB_bin01_count;

typedef struct
{
   WORD len;
   BYTE pin_data[100];
}RAWPINDATA;


EXEC SQL BEGIN DECLARE SECTION;

   /* error code variable */
   long    SQLCODE;
   long    SQL_CODE;


EXEC SQL TYPE RAWPINDATA is VARRAW(5000);


struct
{
   char  status                                    [3];
   char  description                               [15];
   char  iso_resp_code                             [3];
   char  resp_text_msg                             [21];
   char  mac_value                             	   [3];
}pte_csf01;

struct
{
   varchar  status                                    [3];
   varchar  description                               [15];
   varchar  iso_resp_code                             [3];
   varchar  resp_text_msg                             [21];
   varchar  mac_value                                 [3];
}db_csf01;

struct
{
      char  caf_profile_id                            [5];
      char  key3ds                                     [121];                
	}pte_key3ds01; 
     
     	struct
   {
      varchar  caf_profile_id                            [5];
      varchar  key3ds                                    [121];
	}db_key3ds01;
        
struct
{
   char  app_name                                    [16];
   char  exe_name                                    [16];
   char  path                                        [100];
   char  parameters                                  [100];
}pte_apf01;

struct
{
   varchar  app_name                                    [16];
   varchar  exe_name                                    [16];
   varchar  path                                        [100];
   varchar  parameters                                  [100];
}db_apf01;


struct
{
   char  job_id                                     [16];
   char  time_to_run                                [21];
   char  status                                     [2];
   char  last_run                                   [31];
   char  app_name                                   [16];
}pte_jbf01;

struct
{
   varchar  job_id                                     [16];
   varchar  time_to_run                                [21];
   varchar  status                                     [2];
   varchar  last_run                                   [31];
   varchar  app_name                                   [16];
}db_jbf01;

struct

   {
	varchar    rule_id                         [11];
	 varchar   rule_bin_high                  [20];
      varchar   rule_bin_low                   [20];
      varchar   rulename                       [31];
      varchar   status                         [3];
      varchar   rule_processing                [3]; 
      varchar   single_amtlimit                [13];
      varchar   acc_amtlimit                   [13];
      varchar  acc_amtlimit_counter			   [13];
      varchar   acc_transactionlimit           [13];
      varchar  acc_transactionlimit_counter    [13];
      varchar   response_code                  [4]; 	
	  varchar  	 exception_cardnum_1           [20];
	  varchar 	 exception_cardnum_2           [20];    
	  varchar 	 exception_cardnum_3           [20];    
	  varchar 	 exception_cardnum_4            [20];   
	  varchar 	 exception_cardnum_5            [20];   
	  varchar 	 exception_cardnum_6            [20];   
	  varchar 	 exception_cardnum_7           [20];    
	  varchar 	 exception_cardnum_8           [20];    
	  varchar 	 exception_cardnum_9           [20];    
	  varchar    exception_cardnum_10      	   [20];    
	  varchar 	 exception_cardnum_11           [20];
	  varchar 	 exception_cardnum_12           [20];
	  varchar 	 exception_cardnum_13          [20];
	  varchar 	 exception_cardnum_14          [20];
	  varchar 	 exception_cardnum_15          [20]; 
	  varchar 	 exception_cardnum_16           [20];
	  varchar 	 exception_cardnum_17           [20];
	  varchar 	 exception_cardnum_18           [20];
	  varchar 	 exception_cardnum_19          [20];
	  varchar 	 exception_cardnum_20          [20];
	  varchar 	 exception_cardnum_21          [20]; 
	  varchar 	 exception_cardnum_22           [20];
	  varchar 	 exception_cardnum_23           [20];
	  varchar 	 exception_cardnum_24           [20];
	  varchar 	 exception_cardnum_25           [20];
	  varchar 	 exception_cardnum_26           [20];
	  varchar 	 exception_cardnum_27           [20]; 
	  varchar 	 exception_cardnum_28            [20];
	  varchar 	 exception_cardnum_29            [20];
	  varchar 	 exception_cardnum_30            [20];
	  varchar 	 exception_cardnum_31           [20];
	  varchar 	 exception_cardnum_32           [20];
	  varchar 	 exception_cardnum_33           [20]; 
	  varchar 	 exception_cardnum_34            [20];
	  varchar 	 exception_cardnum_35            [20];
	  varchar 	 exception_cardnum_36            [20];
	  varchar 	 exception_cardnum_37           [20];
	  varchar 	 exception_cardnum_38           [20];
	  varchar 	 exception_cardnum_39           [20]; 
	  varchar 	 exception_cardnum_40            [20];
	  varchar 	 exception_cardnum_41            [20];
	  varchar 	 exception_cardnum_42            [20];
	  varchar 	 exception_cardnum_43           [20];
	  varchar 	 exception_cardnum_44           [20];
	  varchar 	 exception_cardnum_45           [20]; 
	  varchar	 exception_cardnum_46            [20];
	  varchar	 exception_cardnum_47            [20];
	  varchar	 exception_cardnum_48            [20];
	  varchar	 exception_cardnum_49 			[20];
	  varchar	 exception_cardnum_50			[20];
      varchar  future_use_1                   [12];
      varchar  future_use_2                   [12];
      varchar  future_use_3                   [12];
      varchar  future_use_4                   [12];
      varchar  future_use_5                   [12]; 
      varchar  future_use_6                   [12];
      varchar  future_use_7                   [12];
	  varchar  future_use_8                   [12];
      varchar  future_use_9                   [12];
      varchar  future_use_10                  [12];
   }db_cr01;


struct

   {
      char    rule_id                         [11];
      char   rule_bin_high                  [20];
      char   rule_bin_low                   [20];
      char   rulename                       [31];
      char   status                         [3];
      char   rule_processing                [3]; 
      char   single_amtlimit                [13];
      char   acc_amtlimit                   [13];
      char  acc_amtlimit_counter			   [13];
      char   acc_transactionlimit           [13];
      char  acc_transactionlimit_counter    [13];
      char   response_code                  [4]; 	
	  char  	 exception_cardnum_1           [20];
	  char 	 exception_cardnum_2           [20];    
	  char 	 exception_cardnum_3           [20];    
	  char 	 exception_cardnum_4            [20];   
	  char 	 exception_cardnum_5            [20];   
	  char 	 exception_cardnum_6            [20];   
	  char 	 exception_cardnum_7           [20];    
	  char 	 exception_cardnum_8           [20];    
	  char 	 exception_cardnum_9           [20];    
	  char    exception_cardnum_10      	   [20];    
	  char 	 exception_cardnum_11           [20];
	  char 	 exception_cardnum_12           [20];
	  char 	 exception_cardnum_13          [20];
	  char 	 exception_cardnum_14          [20];
	  char 	 exception_cardnum_15          [20]; 
	  char 	 exception_cardnum_16           [20];
	  char 	 exception_cardnum_17           [20];
	  char 	 exception_cardnum_18           [20];
	  char 	 exception_cardnum_19          [20];
	  char 	 exception_cardnum_20          [20];
	  char 	 exception_cardnum_21          [20]; 
	  char 	 exception_cardnum_22           [20];
	  char 	 exception_cardnum_23           [20];
	  char 	 exception_cardnum_24           [20];
	  char 	 exception_cardnum_25           [20];
	  char 	 exception_cardnum_26           [20];
	  char 	 exception_cardnum_27           [20]; 
	  char 	 exception_cardnum_28            [20];
	  char 	 exception_cardnum_29            [20];
	  char 	 exception_cardnum_30            [20];
	  char 	 exception_cardnum_31           [20];
	  char 	 exception_cardnum_32           [20];
	  char 	 exception_cardnum_33           [20]; 
	  char 	 exception_cardnum_34            [20];
	  char 	 exception_cardnum_35            [20];
	  char 	 exception_cardnum_36            [20];
	  char 	 exception_cardnum_37           [20];
	  char 	 exception_cardnum_38           [20];
	  char 	 exception_cardnum_39           [20]; 
	  char 	 exception_cardnum_40            [20];
	  char 	 exception_cardnum_41            [20];
	  char 	 exception_cardnum_42            [20];
	  char 	 exception_cardnum_43           [20];
	  char 	 exception_cardnum_44           [20];
	  char 	 exception_cardnum_45           [20]; 
	  char	 exception_cardnum_46            [20];
	  char	 exception_cardnum_47            [20];
	  char	 exception_cardnum_48            [20];
	  char	 exception_cardnum_49 			[20];
	  char	 exception_cardnum_50			[20];
      char  future_use_1                   [12];
      char  future_use_2                   [12];
      char  future_use_3                   [12];
      char  future_use_4                   [12];
      char  future_use_5                   [12]; 
      char  future_use_6                   [12];
      char  future_use_7                   [12];
	  char  future_use_8                   [12];
      char  future_use_9                   [12];
      char  future_use_10                  [12];

   }pte_cr01;

struct
{
   char  profile_id                                [16];
   char  job_id                                    [16];
}pte_bpf01;


struct
{
   varchar  profile_id                                [16];
   varchar  job_id                                    [16];
}db_bpf01;


struct
{
   char  year                                       [5];
   char month                                       [3];
   char  working_day_1                              [2];
   char  profile_id_1                               [16];
   char  working_day_2                              [2];
   char  profile_id_2                               [16];
   char  working_day_3                              [2];
   char  profile_id_3                               [16];
   char  working_day_4                              [2];
   char  profile_id_4                               [16];
   char  working_day_5                              [2];
   char  profile_id_5                               [16];
   char  working_day_6                              [2];
   char  profile_id_6                               [16];
   char  working_day_7                              [2];
   char  profile_id_7                               [16];
   char  working_day_8                              [2];
   char  profile_id_8                               [16];
   char  working_day_9                              [2];
   char  profile_id_9                               [16];
   char  working_day_10                             [2];
   char  profile_id_10                              [16];
   char  working_day_11                             [2];
   char  profile_id_11                              [16];
   char  working_day_12                             [2];
   char  profile_id_12                              [16];
   char  working_day_13                             [2];
   char  profile_id_13                              [16];
   char  working_day_14                             [2];
   char  profile_id_14                              [16];
   char  working_day_15                             [2];
   char  profile_id_15                              [16];
   char  working_day_16                             [2];
   char  profile_id_16                              [16];
   char  working_day_17                             [2];
   char  profile_id_17                              [16];
   char  working_day_18                             [2];
   char  profile_id_18                              [16];
   char  working_day_19                             [2];
   char  profile_id_19                              [16];
   char  working_day_20                             [2];
   char  profile_id_20                              [16];
   char  working_day_21                             [2];
   char  profile_id_21                              [16];
   char  working_day_22                             [2];
   char  profile_id_22                              [16];
   char  working_day_23                             [2];
   char  profile_id_23                              [16];
   char  working_day_24                             [2];
   char  profile_id_24                              [16];
   char  working_day_25                             [2];
   char  profile_id_25                              [16];
   char  working_day_26                             [2];
   char  profile_id_26                              [16];
   char  working_day_27                             [2];
   char  profile_id_27                              [16];
   char  working_day_28                             [2];
   char  profile_id_28                              [16];
   char  working_day_29                             [2];
   char  profile_id_29                              [16];
   char  working_day_30                             [2];
   char  profile_id_30                              [16];
   char  working_day_31                             [2];
   char  profile_id_31                              [16];
}pte_clf01;


struct
{
   varchar  year                                       [5];
   varchar month                                       [3];
   varchar  working_day_1                              [2];
   varchar  profile_id_1                               [16];
   varchar  working_day_2                              [2];
   varchar  profile_id_2                               [16];
   varchar  working_day_3                              [2];
   varchar  profile_id_3                               [16];
   varchar  working_day_4                              [2];
   varchar  profile_id_4                               [16];
   varchar  working_day_5                              [2];
   varchar  profile_id_5                               [16];
   varchar  working_day_6                              [2];
   varchar  profile_id_6                               [16];
   varchar  working_day_7                              [2];
   varchar  profile_id_7                               [16];
   varchar  working_day_8                              [2];
   varchar  profile_id_8                               [16];
   varchar  working_day_9                              [2];
   varchar  profile_id_9                               [16];
   varchar  working_day_10                             [2];
   varchar  profile_id_10                              [16];
   varchar  working_day_11                             [2];
   varchar  profile_id_11                              [16];
   varchar  working_day_12                             [2];
   varchar  profile_id_12                              [16];
   varchar  working_day_13                             [2];
   varchar  profile_id_13                              [16];
   varchar  working_day_14                             [2];
   varchar  profile_id_14                              [16];
   varchar  working_day_15                             [2];
   varchar  profile_id_15                              [16];
   varchar  working_day_16                             [2];
   varchar  profile_id_16                              [16];
   varchar  working_day_17                             [2];
   varchar  profile_id_17                              [16];
   varchar  working_day_18                             [2];
   varchar  profile_id_18                              [16];
   varchar  working_day_19                             [2];
   varchar  profile_id_19                              [16];
   varchar  working_day_20                             [2];
   varchar  profile_id_20                              [16];
   varchar  working_day_21                             [2];
   varchar  profile_id_21                              [16];
   varchar  working_day_22                             [2];
   varchar  profile_id_22                              [16];
   varchar  working_day_23                             [2];
   varchar  profile_id_23                              [16];
   varchar  working_day_24                             [2];
   varchar  profile_id_24                              [16];
   varchar  working_day_25                             [2];
   varchar  profile_id_25                              [16];
   varchar  working_day_26                             [2];
   varchar  profile_id_26                              [16];
   varchar  working_day_27                             [2];
   varchar  profile_id_27                              [16];
   varchar  working_day_28                             [2];
   varchar  profile_id_28                              [16];
   varchar  working_day_29                             [2];
   varchar  profile_id_29                              [16];
   varchar  working_day_30                             [2];
   varchar  profile_id_30                              [16];
   varchar  working_day_31                             [2];
   varchar  profile_id_31                              [16];
}db_clf01;

struct
{
	char	merchant_id				[16];
	char	card_nbr				[20];
	char	max_repeat				[11];
	char	repeated				[11];
	char	expiry_date				[9];
	char    peso_amt_limit				[13];
	char	usd_amt_limit				[13];
	char	bypass					[9]; 
	char	future_use1				[33];
	char	future_use2				[33];
	char	future_use3				[33];
	char	future_use4				[33];
}pte_omc01;

struct
{
	varchar	merchant_id				[16];
	varchar	card_nbr				[20];
	varchar	max_repeat				[11];
	varchar	repeated				[11];
	varchar	expiry_date				[9];
	varchar peso_amt_limit				[13];
	varchar	usd_amt_limit				[13];
	varchar	bypass					[9]; 
	varchar	future_use1				[33];
	varchar	future_use2				[33];
	varchar	future_use3				[33];
	varchar	future_use4				[33];
}db_omc01;

struct
{
	char	low				[11];
	char	high			[11];
	char	allow			[2];
}pte_mcc01;

struct
{
	varchar	low				[11];
	varchar	high			[11];
	varchar	allow			[2];
	
}db_mcc01;

   struct
   {
      char  organization_id                           [5];
      char  merchant_id                               [16];

      char  status                                    [2];
      char  name01                                    [31];
      char  name02                                    [31];
      char  address01                                 [31];
      char  address02                                 [31];
      char  city                                      [21];
      char  country                                   [21];
      char  state                                     [3];
      char  zip_code                                  [11];
      char  intl_code                                 [4];
      char  currency_code                             [4];
      char  contact                                   [31];
      char  phone01                                   [18];
      char  phone02                                   [18];
      char  invoice_batch                             [4];
      char  invoice_subcode                           [3];
      char  process_control_id                        [7];
      char  date_added                                [9];

      char  region_nbr                                [4];  
      char  division_nbr                              [4];  
      char  password                                  [8];  
      char  rps_merchant                              [2];  
      char  house_card_merchant                       [2];  
      char  procurement_merchant                      [2];  
      char  deferred_merchant                         [2];  
      char  cash_bonus_eligible                       [2];  
      char  vip_code                                  [5];  
      char  pos_code                                  [2];  
      char  vs_tcc_code                               [2];  
      char  mc_fcc_code                               [2];  
      char  jcb_sub_code                              [3];  
      char  mall_code                                 [4];  
      char  hc_code                                   [4];  
      char  solicit_code                              [4]; 
       
      char  block_start_date                          [9];
      char  block_end_date                            [9];
      char  credit_purch_max                          [13];
      char  credit_auth_max                           [13];
      char  credit_return_max                         [13];
      char  credit_cash_adv_max                       [13];
      char  credit_man_entry_max                      [13];
      char  credit_cash_back_max                      [13];
      char  debit_purch_max                           [13];
      char  debit_auth_max                            [13];
      char  debit_return_max                          [13];
      char  debit_cash_adv_max                        [13];
      char  debit_man_entry_max                       [13];
      char  debit_cash_back_max                       [13];
      char  aver_purch_amount                         [13];
      char  max_num_returns                           [5];
      char  amount_returns                            [13];
      char  number_man_entries                        [5];
      char  amount_deposits                           [13];
      char  pan_same                                  [3];
      char  totals_ind                                [2];
      char  statistics_ind                            [2];

      char  network_priority_routing_1                [10];
      char  network_priority_routing_2                [10];
      char  network_priority_routing_3                [10];
      char  network_priority_routing_4                [10];
      char  network_priority_routing_5                [10];
      char  network_priority_routing_6                [10];
      char  network_priority_routing_7                [10];
      char  network_priority_routing_8                [10];
      char  network_priority_routing_9                [10];
      char  network_priority_routing_10               [10];
      char  negative_group_id                         [11];
      char  voice_category_code                       [5];
      char  class_code                                [4];
      char  deferred_start_date                       [9];
      char  deferred_end_date                         [9];
      char  group_outlet_code                         [6];
      char  group_type                                [5];
      char  reload_merchant                           [2];
   
   }pte_mcf01;

   struct
   {
      varchar  organization_id                           [5];
      varchar  merchant_id                               [16];

      varchar  status                                    [2];
      varchar  name01                                    [31];
      varchar  name02                                    [31];
      varchar  address01                                 [31];
      varchar  address02                                 [31];
      varchar  city                                      [21];
      varchar  country                                   [21];
      varchar  state                                     [3];
      varchar  zip_code                                  [11];
      varchar  intl_code                                 [4];
      varchar  currency_code                             [4];
      varchar  contact                                   [31];
      varchar  phone01                                   [18];
      varchar  phone02                                   [18];
      varchar  invoice_batch                             [4];
      varchar  invoice_subcode                           [3];
      varchar  process_control_id                        [7];
      varchar  date_added                                [9];

      varchar  region_nbr                                [4];  
      varchar  division_nbr                              [4];  
      varchar  password                                  [8];  
      varchar  rps_merchant                              [2];  
      varchar  house_card_merchant                       [2];  
      varchar  procurement_merchant                      [2];  
      varchar  deferred_merchant                         [2];  
      varchar  cash_bonus_eligible                       [2];  
      varchar  vip_code                                  [5];  
      varchar  pos_code                                  [2];  
      varchar  vs_tcc_code                               [2];  
      varchar  mc_fcc_code                               [2];  
      varchar  jcb_sub_code                              [3];  
      varchar  mall_code                                 [4];  
      varchar  hc_code                                   [4];  
      varchar  solicit_code                              [4]; 

      varchar  block_start_date                          [9];
      varchar  block_end_date                            [9];
      varchar  credit_purch_max                          [13];
      varchar  credit_auth_max                           [13];
      varchar  credit_return_max                         [13];
      varchar  credit_cash_adv_max                       [13];
      varchar  credit_man_entry_max                      [13];
      varchar  credit_cash_back_max                      [13];
      varchar  debit_purch_max                           [13];
      varchar  debit_auth_max                            [13];
      varchar  debit_return_max                          [13];
      varchar  debit_cash_adv_max                        [13];
      varchar  debit_man_entry_max                       [13];
      varchar  debit_cash_back_max                       [13];
      varchar  aver_purch_amount                         [13];
      varchar  max_num_returns                           [5];
      varchar  amount_returns                            [13];
      varchar  number_man_entries                        [5];
      varchar  amount_deposits                           [13];
      varchar  pan_same                                  [3];
      varchar  totals_ind                                [2];
      varchar  statistics_ind                            [2];

      varchar  network_priority_routing_1                [10];
      varchar  network_priority_routing_2                [10];
      varchar  network_priority_routing_3                [10];
      varchar  network_priority_routing_4                [10];
      varchar  network_priority_routing_5                [10];
      varchar  network_priority_routing_6                [10];
      varchar  network_priority_routing_7                [10];
      varchar  network_priority_routing_8                [10];
      varchar  network_priority_routing_9                [10];
      varchar  network_priority_routing_10               [10];
      varchar  negative_group_id                         [11];
      varchar  voice_category_code                       [5];
      varchar  class_code                                [4];
      varchar  deferred_start_date                       [9];
      varchar  deferred_end_date                         [9];
      varchar  group_outlet_code                         [6];
      varchar  group_type                                [5];
      varchar  reload_merchant                           [2];

   }db_mcf01;

struct
{
   char  caf_profile_id                         [5];
   char  velocity1_amount                       [13];
   char  velocity1_from_time                    [5];
   char  velocity1_to_time                      [5];
   char  velocity2_amount                       [13];
   char  velocity2_from_time                    [5];
   char  velocity2_to_time                      [5];
   char  velocity3_amount                       [13];
   char  velocity3_from_time                    [5];
   char  velocity3_to_time                      [5];
   char  velocity4_amount                       [13];
   char  velocity4_from_time                    [5];
   char  velocity4_to_time                      [5];
   char  velocity5_amount                       [13];
   char  velocity5_from_time                    [5];
   char  velocity5_to_time                      [5];
   char  velocity6_amount                       [13];
   char  velocity6_from_time                    [5];
   char  velocity6_to_time                      [5];
   char  velocity7_amount                       [13];
   char  velocity7_from_time                    [5];
   char  velocity7_to_time                      [5];
   char  velocity8_amount                       [13];
   char  velocity8_from_time                    [5];
   char  velocity8_to_time                      [5];
   char  velocity9_amount                       [13];
   char  velocity9_from_time                    [5];
   char  velocity9_to_time                      [5];
   char  velocity10_amount                      [13];
   char  velocity10_from_time                   [5];
   char  velocity10_to_time                     [5];
}pte_faf01;


struct
{
   varchar  caf_profile_id                         [5];
   varchar  velocity1_amount                       [13];
   varchar  velocity1_from_time                    [5];
   varchar  velocity1_to_time                      [5];
   varchar  velocity2_amount                       [13];
   varchar  velocity2_from_time                    [5];
   varchar  velocity2_to_time                      [5];
   varchar  velocity3_amount                       [13];
   varchar  velocity3_from_time                    [5];
   varchar  velocity3_to_time                      [5];
   varchar  velocity4_amount                       [13];
   varchar  velocity4_from_time                    [5];
   varchar  velocity4_to_time                      [5];
   varchar  velocity5_amount                       [13];
   varchar  velocity5_from_time                    [5];
   varchar  velocity5_to_time                      [5];
   varchar  velocity6_amount                       [13];
   varchar  velocity6_from_time                    [5];
   varchar  velocity6_to_time                      [5];
   varchar  velocity7_amount                       [13];
   varchar  velocity7_from_time                    [5];
   varchar  velocity7_to_time                      [5];
   varchar  velocity8_amount                       [13];
   varchar  velocity8_from_time                    [5];
   varchar  velocity8_to_time                      [5];
   varchar  velocity9_amount                       [13];
   varchar  velocity9_from_time                    [5];
   varchar  velocity9_to_time                      [5];
   varchar  velocity10_amount                      [13];
   varchar  velocity10_from_time                   [5];
   varchar  velocity10_to_time                     [5];
}db_faf01;


struct
{
      char  retrieval_ref_num                         [13];
      char  card_nbr                                  [20];
      char  processing_code                           [7];
      char  primary_acct_nbr                          [20];
      char  tran_amount                               [13];
      char  response_code                             [3];
      char  auth_number                               [7];
      char  tran_date                                 [9];
      char  tran_time                                 [7];
}pte_ccf10;

struct
{
      varchar  retrieval_ref_num                         [13];
      varchar  card_nbr                                  [20];
      varchar  processing_code                           [7];
      varchar  primary_acct_nbr                          [20];
      varchar  tran_amount                               [13];
      varchar  response_code                             [3];
      varchar  auth_number                               [7];
      varchar  tran_date                                 [9];
      varchar  tran_time                                 [7];
}db_ccf10;

struct 
{
	char merch_id				[16];
	char system_date			[9];
	char total_amount			[13];
	char total_transcn_cnt		[13];
	char total_aprvd_amount		[13];
	char total_reversed_amount	[13];
	char total_aprvd_transcn_count		[13];
	char total_reversed_transcn_count	[13];
	char field_1				[13];
	char field_2				[13];
	char field_3				[13];
	char field_4				[13];
	char field_5				[13];
	char field_6				[13];
	char field_7				[13];
	char field_8				[13];
	char field_9				[13];
	char field_10				[13];
}pte_mcf03p;

struct
{
	varchar merch_id				[15];
	varchar system_date			[8];
	varchar total_amount			[12];
	varchar total_transcn_cnt		[12];
	varchar total_aprvd_amount		[12];
	varchar total_reversed_amount	[12];
	varchar total_aprvd_transcn_count		[12];
	varchar total_reversed_transcn_count	[12];
	varchar field_1				[12];
	varchar field_2				[12];
	varchar field_3				[12];
	varchar field_4				[12];
	varchar field_5				[12];
	varchar field_6				[12];
	varchar field_7				[12];
	varchar field_8				[12];
	varchar field_9				[12];
	varchar field_10			[12];

}db_mcf03p;

struct
{
      char  minimum_amount                            [13];
      char  program_start_date                        [8]; 
      char  program_end_date                          [8];
      char  transaction_threshold                     [8];
      char  transaction_counter                       [8];
      char  maximum_reward                            [13];
      char  response_message                          [41];
}pte_bon01;


struct
{
      varchar  minimum_amount                            [13];
      varchar  program_start_date                        [8]; 
      varchar  program_end_date                          [8];
      varchar  transaction_threshold                     [8];
      varchar  transaction_counter                       [8];
      varchar  maximum_reward                            [13];
      varchar  response_message                          [41];
}db_bon01;


struct
{
   char cash_id              [21];
   char tag_id               [2];
   char cash_desc            [121];
   char program_start_date   [9];
   char program_end_date     [9];
   char tran_threshold       [10];
   char tran_ctr             [10];
   char time_period          [5];
   char max_period_winners   [7];
   char period_win_ctr       [7];
   char max_program_winners  [7];
   char program_win_ctr      [7];

   char low_amount1          [13];
   char high_amount1         [13];
   char resp_text1           [121];
   char win_type1            [2];
   char reward_amount1       [13];

   char low_amount2          [13];
   char high_amount2         [13];
   char resp_text2           [121];
   char win_type2            [2];
   char reward_amount2       [13];

   char low_amount3          [13];
   char high_amount3         [13];
   char resp_text3           [121];
   char win_type3            [2];
   char reward_amount3       [13];

   char low_amount4          [13];
   char high_amount4         [13];
   char resp_text4           [121];
   char win_type4            [2];
   char reward_amount4       [13];

   char low_amount5          [13];
   char high_amount5         [13];
   char resp_text5           [121];
   char win_type5            [2];
   char reward_amount5       [13];

   char multi_winner_text    [121];
   char multi_winners_allowed[2];

}pte_bon02;

struct
{
   varchar cash_id              [21];
   varchar tag_id               [2];
   varchar cash_desc            [121];
   varchar program_start_date   [9];
   varchar program_end_date     [9];
   varchar tran_threshold       [10];
   varchar tran_ctr             [10];
   varchar time_period          [5];
   varchar max_period_winners   [7];
   varchar period_win_ctr       [7];
   varchar max_program_winners  [7];
   varchar program_win_ctr      [7];

   varchar low_amount1          [13];
   varchar high_amount1         [13];
   varchar resp_text1           [121];
   varchar win_type1            [2];
   varchar reward_amount1       [13];

   varchar low_amount2          [13];
   varchar high_amount2         [13];
   varchar resp_text2           [121];
   varchar win_type2            [2];
   varchar reward_amount2       [13];

   varchar low_amount3          [13];
   varchar high_amount3         [13];
   varchar resp_text3           [121];
   varchar win_type3            [2];
   varchar reward_amount3       [13];

   varchar low_amount4          [13];
   varchar high_amount4         [13];
   varchar resp_text4           [121];
   varchar win_type4            [2];
   varchar reward_amount4       [13];

   varchar low_amount5          [13];
   varchar high_amount5         [13];
   varchar resp_text5           [121];
   varchar win_type5            [2];
   varchar reward_amount5       [13];

   varchar multi_winner_text    [121];
   varchar multi_winners_allowed[2];

}db_bon02;


struct 
{
   char auth_id [7] ;
} pte_uag01 ;


struct 
{
   varchar auth_id [7] ;
} db_uag01 ;


struct 
{
		varchar available[13] ;
		varchar outstanding[13] ;
} db_acf01_deferred ;


   struct
   {
      char  card_type                                 [2];
      char  card_nbr                                  [20];
      char  primary_acct_nbr                          [20];
      char  name_dba                                  [151];
      char  address1                                  [31];
      char  address2                                  [31];
      char  city                                      [21];
      char  state                                     [4];
      char  zip_code                                  [11];
      char  home_phone                                [31];
      char  work_phone                                [31];
      char  dob                                       [9];
      char  profession                                [21];
      char  country                                   [21];
      char  nbr_cards                                 [3];
      char  status                                    [3];
      char  sex                                       [2];  
      char  mother_maiden_name                        [31]; 
      char  membership_id                             [10]; 
      char  cardholder_id                             [20]; 
      char  block_status                              [5];  
      char  specialty_code                            [3];  
      char  vip_acct_code                             [2];  
   }pte_ccf01;

   struct
   {
      varchar  card_type                                 [2];
      varchar  card_nbr                                  [20];
      varchar  primary_acct_nbr                          [20];
      varchar  name_dba                                  [150];
      varchar  address1                                  [31];
      varchar  address2                                  [31];
      varchar  city                                      [21];
      varchar  state                                     [4];
      varchar  zip_code                                  [11];
      varchar  home_phone                                [30];
      varchar  work_phone                                [30];
      varchar  dob                                       [9];
      varchar  profession                                [21];
      varchar  country                                   [21];
      varchar  nbr_cards                                 [3];
      varchar  status                                    [3];
      varchar  sex                                       [2];  
      varchar  mother_maiden_name                        [31]; 
      varchar  membership_id                             [10]; 
      varchar  cardholder_id                             [20]; 
      varchar  block_status                              [5];  
      varchar  specialty_code                            [3];  
      varchar  vip_acct_code                             [2];  
   }db_ccf01;


   struct

   {

      char  account_type                              [3];

      char  account_nbr                               [20];



      char  status                                    [3];

      char  date_added                                [9];

      char  maint_date                                [9];

      char  changed_by                                [21];

      char  credit_limit                              [13];

      char  available                                 [13];

      char  outstanding                               [13];

      char  ledger_balance                            [13];

      char  cash_limit                                [13]; 

      char  cash_available                            [13]; 

      char  cash_outstanding                          [13]; 





   }pte_acf01;



   struct

   {

      varchar  account_type                              [3];

      varchar  account_nbr                               [20];



      varchar  status                                    [3];

      varchar  date_added                                [9];

      varchar  maint_date                                [9];

      varchar  changed_by                                [21];

      varchar  credit_limit                              [13];

      varchar  available                                 [13];

      varchar  outstanding                               [13];

      varchar  ledger_balance                            [13];

      varchar  cash_limit                                [13]; 

      varchar  cash_available                            [13]; 

      varchar  cash_outstanding                          [13]; 





   }db_acf01;


	struct	
	{
		char	currency_value		[4];
		
		char	currency_code		[4];
		
		char 	currency_decimal_places	[2];
		
		char	currency_name		[15];
		
		char future_field1				[20];
		
		char future_field2				[30];
		
		char future_field3				[50];
		
	}pte_ccl01;
	
	
	struct
	{
		varchar		currency_value		[3];
		
		varchar		currency_code		[3];
		
		varchar 	currency_decimal_places	[1];
		
		varchar		currency_name		[14];
		
		varchar		future_field1		[19];
		
		varchar 	future_field2		[29];
		
		varchar 	future_field3		[49];
		
	}db_ccl01;

	struct
	{
		char 	card_brand		[11];
		
		char 	bdk_key			[65];
		
		char 	future_field1	[33];
		
		char 	future_field2	[33];
		
		char 	future_field3	[67];
		
	}pte_bdkkey01;
	
	struct
	{
		varchar 	card_brand		[10];
		
		varchar 	bdk_key			[64];
		
		varchar 	future_field1	[32];
		
		varchar 	future_field2	[32];
		
		varchar 	future_field3	[66];
	}db_bdkkey01;


	struct
	{
		char Caf_Profile_id			[5];
		
		char Type					[2];
		
		char Cvk_Mag_Keyblock		[129];
		
		char Cvk_Acq_3DS_Keyblock	[129];
		
		char Cvk_Pin_Verification	[129];
		
		char Cvk_Mkac_Keyblock		[129];
		
		char Csck_Iss_3ds_Keyblock	[129];
		
		char Csck_Mag_Keyblock		[129];
		
		char Dci_3ds_Keyblock		[129];
		
		char Cvk_3ds_Cak_Keyblock	[129];
		
		char Future_Field1			[129];
		
		char Future_Field2			[129];
		
		char Future_Field3			[129];
		
		char Future_Field4			[129];
		
		char Future_Field5			[129];
	
	}pte_caf01_keyblock01;
	
	
	struct
	{
		varchar Caf_Profile_id			[4];
		
		varchar Type					[1];
		
		varchar Cvk_Mag_Keyblock		[128];
		
		varchar Cvk_Acq_3DS_Keyblock	[128];
		
		varchar Cvk_Pin_Verification	[128];
		
		varchar Cvk_Mkac_Keyblock		[128];
		
		varchar Csck_Iss_3ds_Keyblock	[128];
		
		varchar Csck_Mag_Keyblock		[128];
		
		varchar Dci_3ds_Keyblock		[128];
		
		varchar Cvk_3ds_Cak_Keyblock	[128];
		
		varchar Future_Field1			[128];
		
		varchar Future_Field2			[128];
		
		varchar Future_Field3			[128];
		
		varchar Future_Field4			[128];
		
		varchar Future_Field5			[128];
	
	}db_caf01_keyblock01;
	
   struct
   {

      char  currency_code                             [4];

      char  conversion_rate                           [10];

	  char  currency_name                             [11];
   
   }pte_crf01;

   struct
   {

      varchar  currency_code                             [4];

      varchar  conversion_rate                           [10];

 	  varchar  currency_name                             [11];

   }db_crf01;

   struct
   {
      char  primary_acct_nbr                          [20];
      char  name_dba                                  [151];
      char  address1                                  [31];
      char  address2                                  [31];
      char  city                                      [21];
      char  state                                     [4];
      char  zip_code                                  [11];
      char  home_phone                                [31];
      char  work_phone                                [31];
      char  status                                    [3];
      char  caf_profile_id                            [5];
	  char  type                                      [2];
      char  corp_acct_nbr                             [11];
      char  block_status                              [5]; 
      char  account_name                              [31];
      char  past_due_amount                           [13]; 
      char  min_pay_code                              [2];  
   	  char  Credit_limit  					   		  [11];   /* TF Phani - For Falcon */
	  char  Custr_nbr      					   		  [13];
	  char  APP_Source     					   		  [11];  
	  char  COMP_Name      					   		  [101];
   }pte_paf01;

   struct
   {
      varchar  primary_acct_nbr                          [20];
      varchar  name_dba                                  [150];
      varchar  address1                                  [31];
      varchar  address2                                  [31];
      varchar  city                                      [21];
      varchar  state                                     [4];
      varchar  zip_code                                  [11];
      varchar  home_phone                                [30];
      varchar  work_phone                                [30];
      varchar  status                                    [3];
      varchar  caf_profile_id                            [5];
      varchar  type                                      [2];
      varchar  corp_acct_nbr                             [11];
      varchar  block_status                              [5]; 
      varchar  account_name                              [31];
      varchar  past_due_amount                           [13]; 
      varchar  min_pay_code                              [2];  
	  varchar  Credit_limit							     [11];  
	  varchar  Custr_nbr								 [13];
	  varchar  APP_Source								 [11];  
	  varchar  COMP_Name								 [100];
   }db_paf01;







   struct

   {

      char  organization_id                        [5];

      char  merchant_id                            [16];

      char  term_length                            [4];



      char  factor                                 [8];

      char  deferred_min_amount                    [11];

      char  deferred_max_amount                    [11];



   }pte_def01;



   struct

   {

      varchar  organization_id                        [5];

      varchar  merchant_id                            [16];

      varchar  term_length                            [4];



      varchar  factor                                 [8]; 

      varchar  deferred_min_amount                    [11];

      varchar  deferred_max_amount                    [11];



   }db_def01;





   struct

   {

      char  card_type                                 [2];

      char  card_nbr                                  [20];



      char  primary_acct_nbr                          [20];

      char  daily_amt_usage                           [13];

      char  julian_date                               [8];

      char  peso_julian_date                          [8];

      char  dollar_julian_date                        [8];



      char  peso_usage1_nbr_usage                          [4];

      char  peso_usage1_amt_usage                          [13];

      char  peso_usage2_nbr_usage                          [4];

      char  peso_usage2_amt_usage                          [13];

      char  peso_usage3_nbr_usage                          [4];

      char  peso_usage3_amt_usage                          [13];

      char  peso_usage4_nbr_usage                          [4];

      char  peso_usage4_amt_usage                          [13];

      char  peso_usage5_nbr_usage                          [4];

      char  peso_usage5_amt_usage                          [13];

      char  peso_usage6_nbr_usage                          [4];

      char  peso_usage6_amt_usage                          [13];

      char  peso_usage7_nbr_usage                          [4];

      char  peso_usage7_amt_usage                          [13];

      char  peso_usage8_nbr_usage                          [4];

      char  peso_usage8_amt_usage                          [13];

      char  peso_usage9_nbr_usage                          [4];

      char  peso_usage9_amt_usage                          [13];

      char  peso_usage10_nbr_usage                         [4];

      char  peso_usage10_amt_usage                         [13];

      char  peso_usage11_nbr_usage                         [4];

      char  peso_usage11_amt_usage                         [13];

      char  peso_usage12_nbr_usage                         [4];

      char  peso_usage12_amt_usage                         [13];

      char  peso_usage13_nbr_usage                         [4];

      char  peso_usage13_amt_usage                         [13];

      char  peso_usage14_nbr_usage                         [4];

      char  peso_usage14_amt_usage                         [13];



      char  dollar_usage1_nbr_usage                          [4];

      char  dollar_usage1_amt_usage                          [13];

      char  dollar_usage2_nbr_usage                          [4];

      char  dollar_usage2_amt_usage                          [13];

      char  dollar_usage3_nbr_usage                          [4];

      char  dollar_usage3_amt_usage                          [13];

      char  dollar_usage4_nbr_usage                          [4];

      char  dollar_usage4_amt_usage                          [13];

      char  dollar_usage5_nbr_usage                          [4];

      char  dollar_usage5_amt_usage                          [13];

      char  dollar_usage6_nbr_usage                          [4];

      char  dollar_usage6_amt_usage                          [13];

      char  dollar_usage7_nbr_usage                          [4];

      char  dollar_usage7_amt_usage                          [13];

      char  dollar_usage8_nbr_usage                          [4];

      char  dollar_usage8_amt_usage                          [13];

      char  dollar_usage9_nbr_usage                          [4];

      char  dollar_usage9_amt_usage                          [13];

      char  dollar_usage10_nbr_usage                         [4];

      char  dollar_usage10_amt_usage                         [13];

      char  dollar_usage11_nbr_usage                         [4];

      char  dollar_usage11_amt_usage                         [13];

      char  dollar_usage12_nbr_usage                         [4];

      char  dollar_usage12_amt_usage                         [13];

      char  dollar_usage13_nbr_usage                         [4];

      char  dollar_usage13_amt_usage                         [13];

      char  dollar_usage14_nbr_usage                         [4];

      char  dollar_usage14_amt_usage                         [13];



      char  failed_pin_attempts                       [2];

      char  date_added                                [9];

      char  last_maint                                [9];

      char  status                                    [3];



      char  mcc1_code                                 [5];

      char  mcc1_usage                                [4];

      char  mcc2_code                                 [5];

      char  mcc2_usage                                [4];

      char  mcc3_code                                 [5];

      char  mcc3_usage                                [4];

      char  mcc4_code                                 [5];

      char  mcc4_usage                                [4];

      char  mcc5_code                                 [5];

      char  mcc5_usage                                [4];

      char  mcc6_code                                 [5];

      char  mcc6_usage                                [4];

      char  mcc7_code                                 [5];

      char  mcc7_usage                                [4];

      char  mcc8_code                                 [5];

      char  mcc8_usage                                [4];

      char  mcc9_code                                 [5];

      char  mcc9_usage                                [4];

      char  mcc10_code                                [5];

      char  mcc10_usage                               [4];

      char  mcc11_code                                [5];

      char  mcc11_usage                               [4];

      char  mcc12_code                                [5];

      char  mcc12_usage                               [4];

      char  mcc13_code                                [5];

      char  mcc13_usage                               [4];

      char  mcc14_code                                [5];

      char  mcc14_usage                               [4];

      char  mcc15_code                                [5];

      char  mcc15_usage                               [4];

      char  mcc16_code                                [5];

      char  mcc16_usage                               [4];

      char  mcc17_code                                [5];

      char  mcc17_usage                               [4];

      char  mcc18_code                                [5];

      char  mcc18_usage                               [4];

      char  mcc19_code                                [5];

      char  mcc19_usage                               [4];

      char  mcc20_code                                [5];

      char  mcc20_usage                               [4];



      char  repeat1_merchant_id                       [16];

      char  repeat1_nbr_uses                          [4];

      char  repeat2_merchant_id                       [16];

      char  repeat2_nbr_uses                          [4];

      char  repeat3_merchant_id                       [16];

      char  repeat3_nbr_uses                          [4];

      char  repeat4_merchant_id                       [16];

      char  repeat4_nbr_uses                          [4];

      char  repeat5_merchant_id                       [16];

      char  repeat5_nbr_uses                          [4];

      char  repeat6_merchant_id                       [16];

      char  repeat6_nbr_uses                          [4];

      char  repeat7_merchant_id                       [16];

      char  repeat7_nbr_uses                          [4];

      char  repeat8_merchant_id                       [16];

      char  repeat8_nbr_uses                          [4];

      char  repeat9_merchant_id                       [16];

      char  repeat9_nbr_uses                          [4];

      char  repeat10_merchant_id                      [16];

      char  repeat10_nbr_uses                         [4];

      char  repeat11_merchant_id                      [16];

      char  repeat11_nbr_uses                         [4];

      char  repeat12_merchant_id                      [16];

      char  repeat12_nbr_uses                         [4];

      char  repeat13_merchant_id                      [16];

      char  repeat13_nbr_uses                         [4];

      char  repeat14_merchant_id                      [16];

      char  repeat14_nbr_uses                         [4];

      char  repeat15_merchant_id                      [16];

      char  repeat15_nbr_uses                         [4];

      char  repeat16_merchant_id                      [16];

      char  repeat16_nbr_uses                         [4];

      char  repeat17_merchant_id                      [16];

      char  repeat17_nbr_uses                         [4];

      char  repeat18_merchant_id                      [16];

      char  repeat18_nbr_uses                         [4];

      char  repeat19_merchant_id                      [16];

      char  repeat19_nbr_uses                         [4];

      char  repeat20_merchant_id                      [16];

      char  repeat20_nbr_uses                         [4];



   }pte_ccf03p;



   struct

   {

      varchar  card_type                                 [2];

      varchar  card_nbr                                  [20];



      varchar  primary_acct_nbr                          [20];

      varchar  daily_amt_usage                           [13];

      varchar  julian_date                               [8];

      varchar  peso_julian_date                          [8];

      varchar  dollar_julian_date                        [8];

       

      varchar  peso_usage1_nbr_usage                          [4];

      varchar  peso_usage1_amt_usage                          [13];

      varchar  peso_usage2_nbr_usage                          [4];

      varchar  peso_usage2_amt_usage                          [13];

      varchar  peso_usage3_nbr_usage                          [4];

      varchar  peso_usage3_amt_usage                          [13];

      varchar  peso_usage4_nbr_usage                          [4];

      varchar  peso_usage4_amt_usage                          [13];

      varchar  peso_usage5_nbr_usage                          [4];

      varchar  peso_usage5_amt_usage                          [13];

      varchar  peso_usage6_nbr_usage                          [4];

      varchar  peso_usage6_amt_usage                          [13];

      varchar  peso_usage7_nbr_usage                          [4];

      varchar  peso_usage7_amt_usage                          [13];

      varchar  peso_usage8_nbr_usage                          [4];

      varchar  peso_usage8_amt_usage                          [13];

      varchar  peso_usage9_nbr_usage                          [4];

      varchar  peso_usage9_amt_usage                          [13];

      varchar  peso_usage10_nbr_usage                         [4];

      varchar  peso_usage10_amt_usage                         [13];

      varchar  peso_usage11_nbr_usage                         [4];

      varchar  peso_usage11_amt_usage                         [13];

      varchar  peso_usage12_nbr_usage                         [4];

      varchar  peso_usage12_amt_usage                         [13];

      varchar  peso_usage13_nbr_usage                         [4];

      varchar  peso_usage13_amt_usage                         [13];

      varchar  peso_usage14_nbr_usage                         [4];

      varchar  peso_usage14_amt_usage                         [13];



      varchar  dollar_usage1_nbr_usage                          [4];

      varchar  dollar_usage1_amt_usage                          [13];

      varchar  dollar_usage2_nbr_usage                          [4];

      varchar  dollar_usage2_amt_usage                          [13];

      varchar  dollar_usage3_nbr_usage                          [4];

      varchar  dollar_usage3_amt_usage                          [13];

      varchar  dollar_usage4_nbr_usage                          [4];

      varchar  dollar_usage4_amt_usage                          [13];

      varchar  dollar_usage5_nbr_usage                          [4];

      varchar  dollar_usage5_amt_usage                          [13];

      varchar  dollar_usage6_nbr_usage                          [4];

      varchar  dollar_usage6_amt_usage                          [13];

      varchar  dollar_usage7_nbr_usage                          [4];

      varchar  dollar_usage7_amt_usage                          [13];

      varchar  dollar_usage8_nbr_usage                          [4];

      varchar  dollar_usage8_amt_usage                          [13];

      varchar  dollar_usage9_nbr_usage                          [4];

      varchar  dollar_usage9_amt_usage                          [13];

      varchar  dollar_usage10_nbr_usage                         [4];

      varchar  dollar_usage10_amt_usage                         [13];

      varchar  dollar_usage11_nbr_usage                         [4];

      varchar  dollar_usage11_amt_usage                         [13];

      varchar  dollar_usage12_nbr_usage                         [4];

      varchar  dollar_usage12_amt_usage                         [13];

      varchar  dollar_usage13_nbr_usage                         [4];

      varchar  dollar_usage13_amt_usage                         [13];

      varchar  dollar_usage14_nbr_usage                         [4];

      varchar  dollar_usage14_amt_usage                         [13];



      varchar  failed_pin_attempts                       [2];

      varchar  date_added                                [9];

      varchar  last_maint                                [9];

      varchar  status                                    [3];



      varchar  mcc1_code                                 [5];

      varchar  mcc1_usage                                [4];

      varchar  mcc2_code                                 [5];

      varchar  mcc2_usage                                [4];

      varchar  mcc3_code                                 [5];

      varchar  mcc3_usage                                [4];

      varchar  mcc4_code                                 [5];

      varchar  mcc4_usage                                [4];

      varchar  mcc5_code                                 [5];

      varchar  mcc5_usage                                [4];

      varchar  mcc6_code                                 [5];

      varchar  mcc6_usage                                [4];

      varchar  mcc7_code                                 [5];

      varchar  mcc7_usage                                [4];

      varchar  mcc8_code                                 [5];

      varchar  mcc8_usage                                [4];

      varchar  mcc9_code                                 [5];

      varchar  mcc9_usage                                [4];

      varchar  mcc10_code                                [5];

      varchar  mcc10_usage                               [4];

      varchar  mcc11_code                                [5];

      varchar  mcc11_usage                               [4];

      varchar  mcc12_code                                [5];

      varchar  mcc12_usage                               [4];

      varchar  mcc13_code                                [5];

      varchar  mcc13_usage                               [4];

      varchar  mcc14_code                                [5];

      varchar  mcc14_usage                               [4];

      varchar  mcc15_code                                [5];

      varchar  mcc15_usage                               [4];

      varchar  mcc16_code                                [5];

      varchar  mcc16_usage                               [4];

      varchar  mcc17_code                                [5];

      varchar  mcc17_usage                               [4];

      varchar  mcc18_code                                [5];

      varchar  mcc18_usage                               [4];

      varchar  mcc19_code                                [5];

      varchar  mcc19_usage                               [4];

      varchar  mcc20_code                                [5];

      varchar  mcc20_usage                               [4];



      varchar  repeat1_merchant_id                       [16];

      varchar  repeat1_nbr_uses                          [4];

      varchar  repeat2_merchant_id                       [16];

      varchar  repeat2_nbr_uses                          [4];

      varchar  repeat3_merchant_id                       [16];

      varchar  repeat3_nbr_uses                          [4];

      varchar  repeat4_merchant_id                       [16];

      varchar  repeat4_nbr_uses                          [4];

      varchar  repeat5_merchant_id                       [16];

      varchar  repeat5_nbr_uses                          [4];

      varchar  repeat6_merchant_id                       [16];

      varchar  repeat6_nbr_uses                          [4];

      varchar  repeat7_merchant_id                       [16];

      varchar  repeat7_nbr_uses                          [4];

      varchar  repeat8_merchant_id                       [16];

      varchar  repeat8_nbr_uses                          [4];

      varchar  repeat9_merchant_id                       [16];

      varchar  repeat9_nbr_uses                          [4];

      varchar  repeat10_merchant_id                      [16];

      varchar  repeat10_nbr_uses                         [4];

      varchar  repeat11_merchant_id                      [16];

      varchar  repeat11_nbr_uses                         [4];

      varchar  repeat12_merchant_id                      [16];

      varchar  repeat12_nbr_uses                         [4];

      varchar  repeat13_merchant_id                      [16];

      varchar  repeat13_nbr_uses                         [4];

      varchar  repeat14_merchant_id                      [16];

      varchar  repeat14_nbr_uses                         [4];

      varchar  repeat15_merchant_id                      [16];

      varchar  repeat15_nbr_uses                         [4];

      varchar  repeat16_merchant_id                      [16];

      varchar  repeat16_nbr_uses                         [4];

      varchar  repeat17_merchant_id                      [16];

      varchar  repeat17_nbr_uses                         [4];

      varchar  repeat18_merchant_id                      [16];

      varchar  repeat18_nbr_uses                         [4];

      varchar  repeat19_merchant_id                      [16];

      varchar  repeat19_nbr_uses                         [4];

      varchar  repeat20_merchant_id                      [16];

      varchar  repeat20_nbr_uses                         [4];



   }db_ccf03p;








   struct

   {

      char  card_type                                 [2];

      char  card_nbr                                  [20];



      char  primary_acct_nbr                          [20];

      char  daily_amt_usage                           [13];

      char  julian_date                               [8];

      char  peso_julian_date                          [8];

      char  dollar_julian_date                        [8];



      char  peso_usage1_nbr_usage                          [4];

      char  peso_usage1_amt_usage                          [13];

      char  peso_usage2_nbr_usage                          [4];

      char  peso_usage2_amt_usage                          [13];

      char  peso_usage3_nbr_usage                          [4];

      char  peso_usage3_amt_usage                          [13];

      char  peso_usage4_nbr_usage                          [4];

      char  peso_usage4_amt_usage                          [13];

      char  peso_usage5_nbr_usage                          [4];

      char  peso_usage5_amt_usage                          [13];

      char  peso_usage6_nbr_usage                          [4];

      char  peso_usage6_amt_usage                          [13];

      char  peso_usage7_nbr_usage                          [4];

      char  peso_usage7_amt_usage                          [13];

      char  peso_usage8_nbr_usage                          [4];

      char  peso_usage8_amt_usage                          [13];

      char  peso_usage9_nbr_usage                          [4];

      char  peso_usage9_amt_usage                          [13];

      char  peso_usage10_nbr_usage                         [4];

      char  peso_usage10_amt_usage                         [13];

      char  peso_usage11_nbr_usage                         [4];

      char  peso_usage11_amt_usage                         [13];

      char  peso_usage12_nbr_usage                         [4];

      char  peso_usage12_amt_usage                         [13];

      char  peso_usage13_nbr_usage                         [4];

      char  peso_usage13_amt_usage                         [13];

      char  peso_usage14_nbr_usage                         [4];

      char  peso_usage14_amt_usage                         [13];



      char  dollar_usage1_nbr_usage                          [4];

      char  dollar_usage1_amt_usage                          [13];

      char  dollar_usage2_nbr_usage                          [4];

      char  dollar_usage2_amt_usage                          [13];

      char  dollar_usage3_nbr_usage                          [4];

      char  dollar_usage3_amt_usage                          [13];

      char  dollar_usage4_nbr_usage                          [4];

      char  dollar_usage4_amt_usage                          [13];

      char  dollar_usage5_nbr_usage                          [4];

      char  dollar_usage5_amt_usage                          [13];

      char  dollar_usage6_nbr_usage                          [4];

      char  dollar_usage6_amt_usage                          [13];

      char  dollar_usage7_nbr_usage                          [4];

      char  dollar_usage7_amt_usage                          [13];

      char  dollar_usage8_nbr_usage                          [4];

      char  dollar_usage8_amt_usage                          [13];

      char  dollar_usage9_nbr_usage                          [4];

      char  dollar_usage9_amt_usage                          [13];

      char  dollar_usage10_nbr_usage                         [4];

      char  dollar_usage10_amt_usage                         [13];

      char  dollar_usage11_nbr_usage                         [4];

      char  dollar_usage11_amt_usage                         [13];

      char  dollar_usage12_nbr_usage                         [4];

      char  dollar_usage12_amt_usage                         [13];

      char  dollar_usage13_nbr_usage                         [4];

      char  dollar_usage13_amt_usage                         [13];

      char  dollar_usage14_nbr_usage                         [4];

      char  dollar_usage14_amt_usage                         [13];



      char  failed_pin_attempts                       [2];

      char  date_added                                [9];

      char  last_maint                                [9];

      char  status                                    [3];



      char  mcc1_code                                 [5];

      char  mcc1_usage                                [4];

      char  mcc2_code                                 [5];

      char  mcc2_usage                                [4];

      char  mcc3_code                                 [5];

      char  mcc3_usage                                [4];

      char  mcc4_code                                 [5];

      char  mcc4_usage                                [4];

      char  mcc5_code                                 [5];

      char  mcc5_usage                                [4];

      char  mcc6_code                                 [5];

      char  mcc6_usage                                [4];

      char  mcc7_code                                 [5];

      char  mcc7_usage                                [4];

      char  mcc8_code                                 [5];

      char  mcc8_usage                                [4];

      char  mcc9_code                                 [5];

      char  mcc9_usage                                [4];

      char  mcc10_code                                [5];

      char  mcc10_usage                               [4];

      char  mcc11_code                                [5];

      char  mcc11_usage                               [4];

      char  mcc12_code                                [5];

      char  mcc12_usage                               [4];

      char  mcc13_code                                [5];

      char  mcc13_usage                               [4];

      char  mcc14_code                                [5];

      char  mcc14_usage                               [4];

      char  mcc15_code                                [5];

      char  mcc15_usage                               [4];

      char  mcc16_code                                [5];

      char  mcc16_usage                               [4];

      char  mcc17_code                                [5];

      char  mcc17_usage                               [4];

      char  mcc18_code                                [5];

      char  mcc18_usage                               [4];

      char  mcc19_code                                [5];

      char  mcc19_usage                               [4];

      char  mcc20_code                                [5];

      char  mcc20_usage                               [4];



      char  repeat1_merchant_id                       [16];

      char  repeat1_nbr_uses                          [4];

      char  repeat2_merchant_id                       [16];

      char  repeat2_nbr_uses                          [4];

      char  repeat3_merchant_id                       [16];

      char  repeat3_nbr_uses                          [4];

      char  repeat4_merchant_id                       [16];

      char  repeat4_nbr_uses                          [4];

      char  repeat5_merchant_id                       [16];

      char  repeat5_nbr_uses                          [4];

      char  repeat6_merchant_id                       [16];

      char  repeat6_nbr_uses                          [4];

      char  repeat7_merchant_id                       [16];

      char  repeat7_nbr_uses                          [4];

      char  repeat8_merchant_id                       [16];

      char  repeat8_nbr_uses                          [4];

      char  repeat9_merchant_id                       [16];

      char  repeat9_nbr_uses                          [4];

      char  repeat10_merchant_id                      [16];

      char  repeat10_nbr_uses                         [4];

      char  repeat11_merchant_id                      [16];

      char  repeat11_nbr_uses                         [4];
      char  repeat12_merchant_id                      [16];
      char  repeat12_nbr_uses                         [4];
      char  repeat13_merchant_id                      [16];
      char  repeat13_nbr_uses                         [4];
      char  repeat14_merchant_id                      [16];
      char  repeat14_nbr_uses                         [4];
      char  repeat15_merchant_id                      [16];
      char  repeat15_nbr_uses                         [4];
      char  repeat16_merchant_id                      [16];
      char  repeat16_nbr_uses                         [4];
      char  repeat17_merchant_id                      [16];
      char  repeat17_nbr_uses                         [4];
      char  repeat18_merchant_id                      [16];
      char  repeat18_nbr_uses                         [4];
      char  repeat19_merchant_id                      [16];
      char  repeat19_nbr_uses                         [4];
      char  repeat20_merchant_id                      [16];
      char  repeat20_nbr_uses                         [4];


   }pte_offus_velocity;



   struct

   {

      varchar  card_type                                 [2];

      varchar  card_nbr                                  [20];



      varchar  primary_acct_nbr                          [20];

      varchar  daily_amt_usage                           [13];

      varchar  julian_date                               [8];

      varchar  peso_julian_date                          [8];

      varchar  dollar_julian_date                        [8];

       

      varchar  peso_usage1_nbr_usage                          [4];

      varchar  peso_usage1_amt_usage                          [13];

      varchar  peso_usage2_nbr_usage                          [4];

      varchar  peso_usage2_amt_usage                          [13];

      varchar  peso_usage3_nbr_usage                          [4];

      varchar  peso_usage3_amt_usage                          [13];

      varchar  peso_usage4_nbr_usage                          [4];

      varchar  peso_usage4_amt_usage                          [13];

      varchar  peso_usage5_nbr_usage                          [4];

      varchar  peso_usage5_amt_usage                          [13];

      varchar  peso_usage6_nbr_usage                          [4];

      varchar  peso_usage6_amt_usage                          [13];

      varchar  peso_usage7_nbr_usage                          [4];

      varchar  peso_usage7_amt_usage                          [13];

      varchar  peso_usage8_nbr_usage                          [4];

      varchar  peso_usage8_amt_usage                          [13];

      varchar  peso_usage9_nbr_usage                          [4];

      varchar  peso_usage9_amt_usage                          [13];

      varchar  peso_usage10_nbr_usage                         [4];

      varchar  peso_usage10_amt_usage                         [13];

      varchar  peso_usage11_nbr_usage                         [4];

      varchar  peso_usage11_amt_usage                         [13];

      varchar  peso_usage12_nbr_usage                         [4];

      varchar  peso_usage12_amt_usage                         [13];

      varchar  peso_usage13_nbr_usage                         [4];

      varchar  peso_usage13_amt_usage                         [13];

      varchar  peso_usage14_nbr_usage                         [4];

      varchar  peso_usage14_amt_usage                         [13];



      varchar  dollar_usage1_nbr_usage                          [4];

      varchar  dollar_usage1_amt_usage                          [13];

      varchar  dollar_usage2_nbr_usage                          [4];

      varchar  dollar_usage2_amt_usage                          [13];

      varchar  dollar_usage3_nbr_usage                          [4];

      varchar  dollar_usage3_amt_usage                          [13];

      varchar  dollar_usage4_nbr_usage                          [4];

      varchar  dollar_usage4_amt_usage                          [13];

      varchar  dollar_usage5_nbr_usage                          [4];

      varchar  dollar_usage5_amt_usage                          [13];

      varchar  dollar_usage6_nbr_usage                          [4];

      varchar  dollar_usage6_amt_usage                          [13];

      varchar  dollar_usage7_nbr_usage                          [4];

      varchar  dollar_usage7_amt_usage                          [13];

      varchar  dollar_usage8_nbr_usage                          [4];

      varchar  dollar_usage8_amt_usage                          [13];

      varchar  dollar_usage9_nbr_usage                          [4];

      varchar  dollar_usage9_amt_usage                          [13];

      varchar  dollar_usage10_nbr_usage                         [4];

      varchar  dollar_usage10_amt_usage                         [13];

      varchar  dollar_usage11_nbr_usage                         [4];

      varchar  dollar_usage11_amt_usage                         [13];

      varchar  dollar_usage12_nbr_usage                         [4];

      varchar  dollar_usage12_amt_usage                         [13];

      varchar  dollar_usage13_nbr_usage                         [4];

      varchar  dollar_usage13_amt_usage                         [13];

      varchar  dollar_usage14_nbr_usage                         [4];

      varchar  dollar_usage14_amt_usage                         [13];



      varchar  failed_pin_attempts                       [2];

      varchar  date_added                                [9];

      varchar  last_maint                                [9];

      varchar  status                                    [3];



      varchar  mcc1_code                                 [5];

      varchar  mcc1_usage                                [4];

      varchar  mcc2_code                                 [5];

      varchar  mcc2_usage                                [4];

      varchar  mcc3_code                                 [5];

      varchar  mcc3_usage                                [4];

      varchar  mcc4_code                                 [5];

      varchar  mcc4_usage                                [4];

      varchar  mcc5_code                                 [5];

      varchar  mcc5_usage                                [4];

      varchar  mcc6_code                                 [5];

      varchar  mcc6_usage                                [4];

      varchar  mcc7_code                                 [5];

      varchar  mcc7_usage                                [4];

      varchar  mcc8_code                                 [5];

      varchar  mcc8_usage                                [4];

      varchar  mcc9_code                                 [5];

      varchar  mcc9_usage                                [4];

      varchar  mcc10_code                                [5];

      varchar  mcc10_usage                               [4];

      varchar  mcc11_code                                [5];

      varchar  mcc11_usage                               [4];

      varchar  mcc12_code                                [5];

      varchar  mcc12_usage                               [4];

      varchar  mcc13_code                                [5];

      varchar  mcc13_usage                               [4];

      varchar  mcc14_code                                [5];

      varchar  mcc14_usage                               [4];

      varchar  mcc15_code                                [5];

      varchar  mcc15_usage                               [4];

      varchar  mcc16_code                                [5];

      varchar  mcc16_usage                               [4];

      varchar  mcc17_code                                [5];

      varchar  mcc17_usage                               [4];

      varchar  mcc18_code                                [5];

      varchar  mcc18_usage                               [4];

      varchar  mcc19_code                                [5];

      varchar  mcc19_usage                               [4];

      varchar  mcc20_code                                [5];

      varchar  mcc20_usage                               [4];



      varchar  repeat1_merchant_id                       [16];

      varchar  repeat1_nbr_uses                          [4];

      varchar  repeat2_merchant_id                       [16];

      varchar  repeat2_nbr_uses                          [4];

      varchar  repeat3_merchant_id                       [16];

      varchar  repeat3_nbr_uses                          [4];

      varchar  repeat4_merchant_id                       [16];

      varchar  repeat4_nbr_uses                          [4];

      varchar  repeat5_merchant_id                       [16];

      varchar  repeat5_nbr_uses                          [4];

      varchar  repeat6_merchant_id                       [16];

      varchar  repeat6_nbr_uses                          [4];

      varchar  repeat7_merchant_id                       [16];

      varchar  repeat7_nbr_uses                          [4];

      varchar  repeat8_merchant_id                       [16];

      varchar  repeat8_nbr_uses                          [4];

      varchar  repeat9_merchant_id                       [16];

      varchar  repeat9_nbr_uses                          [4];

      varchar  repeat10_merchant_id                      [16];

      varchar  repeat10_nbr_uses                         [4];

      varchar  repeat11_merchant_id                      [16];

      varchar  repeat11_nbr_uses                         [4];

      varchar  repeat12_merchant_id                      [16];

      varchar  repeat12_nbr_uses                         [4];

      varchar  repeat13_merchant_id                      [16];

      varchar  repeat13_nbr_uses                         [4];
      varchar  repeat14_merchant_id                      [16];
      varchar  repeat14_nbr_uses                         [4];
      varchar  repeat15_merchant_id                      [16];
      varchar  repeat15_nbr_uses                         [4];
      varchar  repeat16_merchant_id                      [16];
      varchar  repeat16_nbr_uses                         [4];
      varchar  repeat17_merchant_id                      [16];
      varchar  repeat17_nbr_uses                         [4];
      varchar  repeat18_merchant_id                      [16];
      varchar  repeat18_nbr_uses                         [4];
      varchar  repeat19_merchant_id                      [16];
      varchar  repeat19_nbr_uses                         [4];
      varchar  repeat20_merchant_id                      [16];
      varchar  repeat20_nbr_uses                         [4];

   }db_offus_velocity;





   struct

   {

      char  card_type                                 [5];

      char  merchant_id                               [16];

      char  organization_id                           [5];



      char  acquirer_id                               [7];

      char  corporate_id                              [7];

      char  settlement_id                             [17];

      char  floor_limit                               [13];



   }pte_mct01;



   struct

   {

      varchar  card_type                                 [5];

      varchar  merchant_id                               [16];

      varchar  organization_id                           [5];



      varchar  acquirer_id                               [7];

      varchar  corporate_id                              [7];

      varchar  settlement_id                             [17];

      varchar  floor_limit                               [13];



   }db_mct01;



   struct

   {

      char  card_type                                 [5];



      char  description                               [31];

   }pte_ctf01;



   struct

   {

      varchar  card_type                                 [5];



      varchar  description                               [31];

   }db_ctf01;



   struct
   {
      char  caf_profile_id                            [5];
      char  type                                      [2];
      char  authorization_location                    [2];
      char  authorization_method                      [2];
      char  destination_name                          [11];
      char  iso_nbr                                   [10];
      char  iso_length                                [2];
      char  aba_nbr                                   [9];
      char  name                                      [31];
      char  contact                                   [21];
      char  phone                                     [18];
      char  date_added                                [9];
      char  last_maint                                [9];
      char  changed_by                                [21];
      char  status                                    [3];
      char  max_pin_retries                           [2];
      char  pin_capture_ind                           [2];
      char  track_offset                              [3];
      char  pin_offset_location                       [2];
      char  nsp_process                               [16];
      char  expiration_date_check                     [2];
      char  expiration_date_location                  [2];
      char  merchant_same                             [3];
      char  day_period1                               [3];
      char  velocity1_nbr_usage_1                     [4];
      char  velocity1_nbr_usage_2                     [4];
      char  velocity1_amt_usage_1                     [13];
      char  velocity1_amt_usage_2                     [13];
      char  day_period2                               [3];
      char  velocity2_nbr_usage_1                     [4];
      char  velocity2_nbr_usage_2                     [4];
      char  velocity2_amt_usage_1                     [13];
      char  velocity2_amt_usage_2                     [13];
      char  day_period3                               [3];
      char  velocity3_nbr_usage_1                     [4];
      char  velocity3_nbr_usage_2                     [4];
      char  velocity3_amt_usage_1                     [13];
      char  velocity3_amt_usage_2                     [13];
      char  pin_verification_method                   [2]; 
      char  pin                                       [100];
      char  cvv_processing                            [2] ;
      char  cvkA_1                                    [17] ;
      char  cvkB_1                                    [17] ;
      char  cvkA_2                                    [17] ;
      char  cvkB_2                                    [17] ;
      char  cvkA_3                                    [17] ;
      char  cvkB_3                                    [17] ;
      char  cvkA_4                                    [17] ;
      char  cvkB_4                                    [17] ;
      char  cvkA_5                                    [17] ;
      char  cvkB_5                                    [17] ;
      char  cvkA_6                                    [17] ;
      char  cvkB_6                                    [17] ;
      char  service_code_offset_tr1                   [3] ;
      char  service_code_offset_tr2                   [3] ; 
      char  cvv_offset_tr1                            [3] ;
      char  cvv_offset_tr2                            [3] ;
      char  cvv_length                                [3] ;
      char  csck                                      [33] ;
      char  floor_limit                               [13] ;
	  char  country_limits_flag                       [2]; 
   }pte_caf01;
	

   struct
   {
      varchar  caf_profile_id                            [5];
      varchar  type                                      [2];
      varchar  authorization_location                    [2];
      varchar  authorization_method                      [2];
      varchar  destination_name                          [11];
      varchar  iso_nbr                                   [10];
      varchar  iso_length                                [2];
      varchar  aba_nbr                                   [9];
      varchar  name                                      [31];
      varchar  contact                                   [21];
      varchar  phone                                     [18];
      varchar  date_added                                [9];
      varchar  last_maint                                [9];
      varchar  changed_by                                [21];
      varchar  status                                    [3];
      varchar  max_pin_retries                           [2];
      varchar  pin_capture_ind                           [2];
      varchar  track_offset                              [3];
      varchar  pin_offset_location                       [2];
      varchar  nsp_process	                             [16];
      varchar  expiration_date_check                     [2];
      varchar  expiration_date_location                  [2];
      varchar  merchant_same                             [3];
      varchar  day_period1                               [3];
      varchar  velocity1_nbr_usage_1                     [4];
      varchar  velocity1_nbr_usage_2                     [4];
      varchar  velocity1_amt_usage_1                     [13];
      varchar  velocity1_amt_usage_2                     [13];
      varchar  day_period2                               [3];
      varchar  velocity2_nbr_usage_1                     [4];
      varchar  velocity2_nbr_usage_2                     [4];
      varchar  velocity2_amt_usage_1                     [13];
      varchar  velocity2_amt_usage_2                     [13];
      varchar  day_period3                               [3];
      varchar  velocity3_nbr_usage_1                     [4];
      varchar  velocity3_nbr_usage_2                     [4];
      varchar  velocity3_amt_usage_1                     [13];
      varchar  velocity3_amt_usage_2                     [13];
      varchar  pin_verification_method                   [2];  
      RAWPINDATA  pin                                    ;
      varchar	cvv_processing                           [2] ;
      varchar	cvkA_1                                   [17] ;
      varchar	cvkB_1                                   [17] ;
      varchar	cvkA_2                                   [17] ;
      varchar	cvkB_2                                   [17] ;
      varchar	cvkA_3                                   [17] ;
      varchar	cvkB_3                                   [17] ;
      varchar	cvkA_4                                   [17] ;
      varchar	cvkB_4                                   [17] ;
      varchar	cvkA_5                                   [17] ;
      varchar	cvkB_5                                   [17] ;
      varchar	cvkA_6                                   [17] ;
      varchar	cvkB_6                                   [17] ;
      varchar	service_code_offset_tr1                  [3] ;
      varchar	service_code_offset_tr2                  [3] ; 
      varchar	cvv_offset_tr1                           [3] ;
      varchar	cvv_offset_tr2                           [3] ;
      varchar	cvv_length                               [3] ;
      varchar   csck                                     [33] ;
      varchar	floor_limit                              [13] ;
	  varchar   country_limits_flag						 [2];
   }db_caf01;

/* CAF01_EMV - TF Phani*/
struct
{
	BYTE  caf_profile_id                         [5];
	BYTE  type                                   [2];
	struct
	{
		char  service_code_offset              [3];
		char  icvc_offset                      [3];
		char  pan_seq_nbr_offset               [3];
	}cc_tk[2];
	struct
	{
		char  service_code_offset          [3];
		char  icvc_offset                  [3];
		char  pan_seq_nbr_offset           [3];
	}ccless_tk[2];
	struct
	{
		char  service_code_offset           [3];
		char  icvc_offset                   [3];
		char  pan_seq_nbr_offset            [3];
		char  atc_offset                    [3];
		char  unpre_nbr_offset              [3];
	}mcless_tk[2]; 
	 char  MC_CVC3_code 			    [33];
	 char  MK_AC_code			    [33];
	 char  future_key1			    [33];
	 char  future_key2			    [33];
	 char  future_key3			    [33];
	 char  future_key4			    [33];
	 char  future_key5			    [33];
	 char  temp1				    [11];
	 char  temp2				    [11];
	 char  temp3				    [11];
	 char  temp4				    [11];
	 char  temp5				    [11];
} pte_caf01_emv;
   
struct
{
	varchar caf_profile_id					[5];
	varchar  type						[2];
	varchar cc_tk1_service_code_offset			[3];
	varchar  cc_tk1_icvc_offset 				[3];
	varchar  cc_tk1_pan_seq_nbr_offset			[3];
	varchar  cc_tk2_service_code_offset 			[3];
	varchar  cc_tk2_icvc_offset 				[3];
	varchar  cc_tk2_pan_seq_nbr_offset			[3];
	varchar  ccless_tk1_service_code_offset			[3];
	varchar  ccless_tk1_icvc_offset 			[3];
	varchar  ccless_tk1_pan_seq_nbr_offset			[3];
	varchar  ccless_tk2_service_code_offset			[3];
	varchar  ccless_tk2_icvc_offset 			 [3];
	varchar  ccless_tk2_pan_seq_nbr_offset			 [3];
	varchar  mcless_tk1_service_code_offset 		 [3];
	varchar  mcless_tk1_icvc_offset 			 [3];
	varchar  mcless_tk1_pan_seq_nbr_offset			 [3];
	varchar mcless_tk1_atc_offset				 [3];
	varchar  mcless_tk1_unpre_nbr_offset			 [3];
	varchar  mcless_tk2_service_code_offset 		 [3];
	varchar  mcless_tk2_icvc_offset 			 [3];
	varchar  mcless_tk2_pan_seq_nbr_offset			 [3];
	varchar  mcless_tk2_atc_offset				 [3];
	varchar  mcless_tk2_unpre_nbr_offset			 [3];
	varchar  MC_CVC3_code					 [33];
	varchar  MK_AC_code 					 [33];
   	varchar  future_key1					 [33];
	varchar  future_key2					 [33];
	varchar  future_key3 					 [33];
	varchar  future_key4					 [33];
	varchar  future_key5					 [33];
	varchar  temp1						 [11];
	varchar  temp2						 [11];
	varchar  temp3						 [11];
	varchar  temp4						 [11];
	varchar  temp5						 [11];
} db_caf01_emv;


   /**************
    * MCC LIMITS *
    **************/
   struct
   {
      char  caf_profile_id     [5];
      char  type               [2];
      char  mcc                [6];
      char  usage              [5];
      char  peso_amt_limit     [13];
      char  usd_amt_limit      [13];
   }pte_mcc_limits;

   struct
   {
      varchar  caf_profile_id  [5];
      varchar  type            [2];
      varchar  mcc             [6];
      varchar  usage           [5];
      varchar  peso_amt_limit  [13];
      varchar  usd_amt_limit   [13];
   }db_mcc_limits;

   /***********************
    Country Amount Limits
    **********************/
   struct
   {
      char  caf_profile_id     [5];
      char  type               [2];
      char  country_code       [4];
      char  amount_limit       [13];
   }pte_country_amt_limits;

   struct
   {
      varchar  caf_profile_id  [5];
      varchar  type            [2];
      varchar  country_code    [4];
      varchar  amount_limit    [13];
   }db_country_amt_limits;



   struct

   {

      char  card_type                                 [2];
      char  card_nbr                                  [20];
      char  primary_acct_nbr                          [20];
      char  caf_profile_id                            [5];
      char  status                                    [3];
      char  pin_offset                                [9];
      char  date_added                                [9];
      char  maint_date                                [9];
      char  changed_by                                [21];
      char  card_class                                [2];
      char  expire_date                               [5];
      char  effect_date                               [9];
      char  percent_deposit                           [3];
      char  percent_avail_allowed                     [3];
      char  credit_line                               [13];
      char  outstanding_auths                         [13];
      char  allowed                                   [17];
      char  currency_code                             [4];
      char  country_code                              [4];
      char  peso_saving_acct                          [13]; 
      char  peso_current_acct                         [13]; 
      char  dollar_saving_acct                        [13]; 
      char  dollar_current_acct                       [13]; 
      char  product_codes                             [21]; 
      char  cash_bonus_eligible                       [2];  
      char  visa_purchase_card                        [2];
      char  related_acct_type_1                       [3];
      char  related_acct_nbr_1                        [20];
      char  related_acct_type_2                       [3];
      char  related_acct_nbr_2                        [20];
      char  related_acct_type_3                       [3];
      char  related_acct_nbr_3                        [20];
      char  related_acct_type_4                       [3];
      char  related_acct_nbr_4                        [20];
      char  related_acct_type_5                       [3];
      char  related_acct_nbr_5                        [20];
      char  related_acct_type_6                       [3];
      char  related_acct_nbr_6                        [20];
      char  related_acct_type_7                       [3];
      char  related_acct_nbr_7                        [20];
      char  related_acct_type_8                       [3];
      char  related_acct_nbr_8                        [20];
      char  related_acct_type_9                       [3];
      char  related_acct_nbr_9                        [20];
      char  related_acct_type_10                      [3];
      char  related_acct_nbr_10                       [20];
      char  pin_verification_override                 [2];
      char  pin                                       [101];
      char  pvki                                      [3];     /* Modified by SDG on Feb 17 */
      char  add_on_rate                               [6];
      char  add_on_term                               [4];
      char  peso_tran_limit                           [13];
      char  dollar_tran_limit                         [13];
   }pte_ccf02p;



   struct

   {
      varchar  card_type                                 [2];
      varchar  card_nbr                                  [20];
      varchar  primary_acct_nbr                          [20];
      varchar  caf_profile_id                            [5];
      varchar  status                                    [3];
      varchar  pin_offset                                [9];
      varchar  date_added                                [9];
      varchar  maint_date                                [9];
      varchar  changed_by                                [21];
      varchar  card_class                                [2];
      varchar  expire_date                               [5];
      varchar  effect_date                               [9];
      varchar  percent_deposit                           [3];
      varchar  percent_avail_allowed                     [3];
      varchar  credit_line                               [13];
      varchar  outstanding_auths                         [13];
      varchar  allowed                                   [17];
      varchar  currency_code                             [4];
      varchar  country_code                              [4];
      varchar  peso_saving_acct                          [13]; 
      varchar  peso_current_acct                         [13]; 
      varchar  dollar_saving_acct                        [13]; 
      varchar  dollar_current_acct                       [13]; 
      varchar  product_codes                             [21]; 
      varchar  cash_bonus_eligible                       [2];  
      varchar  visa_purchase_card                        [2];
      varchar  related_acct_type_1                       [3];
      varchar  related_acct_nbr_1                        [20];
      varchar  related_acct_type_2                       [3];
      varchar  related_acct_nbr_2                        [20];
      varchar  related_acct_type_3                       [3];
      varchar  related_acct_nbr_3                        [20];
      varchar  related_acct_type_4                       [3];
      varchar  related_acct_nbr_4                        [20];
      varchar  related_acct_type_5                       [3];
      varchar  related_acct_nbr_5                        [20];
      varchar  related_acct_type_6                       [3];
      varchar  related_acct_nbr_6                        [20];
      varchar  related_acct_type_7                       [3];
      varchar  related_acct_nbr_7                        [20];
      varchar  related_acct_type_8                       [3];
      varchar  related_acct_nbr_8                        [20];
      varchar  related_acct_type_9                       [3];
      varchar  related_acct_nbr_9                        [20];
      varchar  related_acct_type_10                      [3];
      varchar  related_acct_nbr_10                       [20];
      varchar  pin_verification_override                 [2];
      varchar  pin                                       [100];
	  varchar pvki										 [3] ;  /* Modified by SDG on Feb 17*/
      varchar  add_on_rate                               [6];
      varchar  add_on_term                               [4];
      varchar  peso_tran_limit                           [13];
      varchar  dollar_tran_limit                         [13];
   }db_ccf02p;



   struct

   {

     char card_type                                      [2];

     char card_nbr                                       [20];  

  

     char caf_profile_id                                  [5];

     char status                                          [3];

     char date_added                                      [9];

     char maint_date                                      [9];

     char changed_by                                      [8];



   }pte_ccf02h;

    

    struct

    {

      varchar card_type                                      [2];

      varchar card_nbr                                       [20];

  

      varchar caf_profile_id                                  [5];

      varchar status                                          [3];

      varchar date_added                                      [9];

      varchar maint_date                                      [9];

      varchar changed_by                                      [8];



    }db_ccf02h;



   struct

   {

      char  card_type                                 [2];

      char  card_nbr                                  [20];



      char  action_code                               [2];

      char  crind_autocard                            [2];

      char  odometer_required                         [2];

      char  order_number_required                     [2];

      char  signature_required                        [2];

      char  driver_flag                               [2];

      char  vehicle_id_flag                           [2];

      char  fleet_id_flag                             [2];

      char  driver_id_flag                            [2];

      char  registration_number                       [11];

      char  super                                     [2];

      char  super_low_lead                            [2];

      char  gold                                      [2];

      char  autogas                                   [2];

      char  unleaded                                  [2];

      char  diesel                                    [2];

      char  oil                                       [2];

      char  service                                   [2];

      char  accessories                               [2];

      char  tires                                     [2];

      char  batteries                                 [2];

      char  repairs_maint                             [2];

      char  shop                                      [2];

      char  clean_and_go                              [2];

      char  accident_and_damage                       [2];

      char  meals                                     [2];

      char  parking                                   [2];

      char  last_odometer_reading                     [7];

      char  value_limits                              [3];

      char  litre_limits                              [3];

      char  time_limits                               [3];



   }pte_fcf02;



   struct

   {

      varchar  card_type                                 [2];

      varchar  card_nbr                                  [20];



      varchar  action_code                               [2];

      varchar  crind_autocard                            [2];

      varchar  odometer_required                         [2];

      varchar  order_number_required                     [2];

      varchar  signature_required                        [2];

      varchar  driver_flag                               [2];

      varchar  vehicle_id_flag                           [2];

      varchar  fleet_id_flag                             [2];

      varchar  driver_id_flag                            [2];

      varchar  registration_number                       [11];

      varchar  super                                     [2];

      varchar  super_low_lead                            [2];

      varchar  gold                                      [2];

      varchar  autogas                                   [2];

      varchar  unleaded                                  [2];

      varchar  diesel                                    [2];

      varchar  oil                                       [2];

      varchar  service                                   [2];

      varchar  accessories                               [2];

      varchar  tires                                     [2];

      varchar  batteries                                 [2];

      varchar  repairs_maint                             [2];

      varchar  shop                                      [2];

      varchar  clean_and_go                              [2];

      varchar  accident_and_damage                       [2];

      varchar  meals                                     [2];

      varchar  parking                                   [2];

      varchar  last_odometer_reading                     [7];

      varchar  value_limits                              [3];

      varchar  litre_limits                              [3];

      varchar  time_limits                               [3];



   }db_fcf02;



   struct

   {

      char  workstation_id                            [21];



      char  workstation_status                        [3];

   

   }pte_atp02;



   struct

   {

      varchar  workstation_id                            [21];



      varchar  workstation_status                        [3];

   

   }db_atp02;



   /* user control file 01 */

   struct

   {

      char  name                                    [51];

      char  password                                [51];

      char  date_added                              [9];

      char  group_id                                [16];

      char  subsystem_name_1                        [31];

      char  action_1                                [6];

      char  subsystem_name_2                        [31];

      char  action_2                                [6];

      char  subsystem_name_3                        [31];

      char  action_3                                [6];

      char  subsystem_name_4                        [31];

      char  action_4                                [6];

      char  subsystem_name_5                        [31];

      char  action_5                                [6];

      char  subsystem_name_6                        [31];

      char  action_6                                [6];

      char  subsystem_name_7                        [31];

      char  action_7                                [6];

      char  subsystem_name_8                        [31];

      char  action_8                                [6];

      char  subsystem_name_9                        [31];

      char  action_9                                [6];

      char  subsystem_name_10                       [31];

      char  action_10                               [6];

      char  subsystem_name_11                       [31];

      char  action_11                               [6];

      char  subsystem_name_12                       [31];

      char  action_12                               [6];

      char  subsystem_name_13                       [31];

      char  action_13                               [6];

      char  subsystem_name_14                       [31];

      char  action_14                               [6];

      char  subsystem_name_15                       [31];

      char  action_15                               [6];

	      char  subsystem_name_16                        [31];

	      char  action_16                                [6];

	      char  subsystem_name_17                        [31];

	      char  action_17                                [6];

	      char  subsystem_name_18                        [31];

	      char  action_18                                [6];

	      char  subsystem_name_19                        [31];

	      char  action_19                                [6];

	      char  subsystem_name_20                       [31];

	      char  action_20                               [6];

      char  terminals_1                             [21];

      char  terminals_2                             [21];

      char  terminals_3                             [21];

      char  terminals_4                             [21];

      char  terminals_5                             [21];

      char  terminals_6                             [21];

      char  terminals_7                             [21];

      char  terminals_8                             [21];

      char  terminals_9                             [21];

      char  terminals_10                            [21];

	  char password_1								[51];

	  char password_2							   [51];    

	  char password_3							   [51];
	  
	  char password_4							   [51];
	  
	  char accountstatus							[11];  

	  char password_modified_date 					[9];

	  char user_info_1								[11];         

	  char user_info_2								[11];         

	  char user_info_3								[11];        

	  char user_info_4								[11];    

	  char user_info_5								[11];    

	  char user_info_6								[11];    

	  char user_info_7								[11];    

	  char ekey										[51];		 

	  char dekey									[51];
   
	      char  buffer                                  [501];
	      
	  //ramya
	char Login_WorkStationId						[31];
	
	char Login_Status								[31];
	
	char User_Status								[10];
	
	char Days_Inactive                               [5];
	
	char Login_Date                                 [20];
	
	char User_Expiry_Date                           [11];
	
	char Date_Of_Deactivation						 [11];
	
	char password_5									[51];
		
	char password_6									[51];    
	
	char password_7									[51];
	
	char password_8									[51];
	
	char password_9									[51];
	
	char password_10								[51];   
	
	char Logout_Date                                [20]; 

   } pte_ucf01;

 

   struct

   {

      varchar  name                                    [51];

      varchar  password                                [51];

      varchar  date_added                              [9];

      varchar  group_id                                [16];

      varchar  subsystem_name_1                        [31];

      varchar  action_1                                [6];

      varchar  subsystem_name_2                        [31];

      varchar  action_2                                [6];

      varchar  subsystem_name_3                        [31];

      varchar  action_3                                [6];

      varchar  subsystem_name_4                        [31];

      varchar  action_4                                [6];

      varchar  subsystem_name_5                        [31];

      varchar  action_5                                [6];

      varchar  subsystem_name_6                        [31];

      varchar  action_6                                [6];

      varchar  subsystem_name_7                        [31];

      varchar  action_7                                [6];

      varchar  subsystem_name_8                        [31];

      varchar  action_8                                [6];

      varchar  subsystem_name_9                        [31];

      varchar  action_9                                [6];

      varchar  subsystem_name_10                       [31];

      varchar  action_10                               [6];

      varchar  subsystem_name_11                       [31];

      varchar  action_11                               [6];

      varchar  subsystem_name_12                       [31];

      varchar  action_12                               [6];

      varchar  subsystem_name_13                       [31];

      varchar  action_13                               [6];

      varchar  subsystem_name_14                       [31];

      varchar  action_14                               [6];

      varchar  subsystem_name_15                       [31];

      varchar  action_15                               [6];

      varchar  terminals_1                             [21];

      varchar  terminals_2                             [21];

      varchar  terminals_3                             [21];

      varchar  terminals_4                             [21];

      varchar  terminals_5                             [21];

      varchar  terminals_6                             [21];

      varchar  terminals_7                             [21];

      varchar  terminals_8                             [21];

      varchar  terminals_9                             [21];

      varchar  terminals_10                            [21];

	/* New fields of UCF01 in ATPGen2*/

	  varchar password_1							   [51];

	  varchar password_2							   [51];    

	  varchar password_3							   [51];
	  
	  varchar password_4							   [51];
	  
      varchar accountstatus								[11];  

	  varchar password_modified_date					[9];

	  varchar user_info_1								[11];         

	  varchar user_info_2								[11];         

	  varchar user_info_3								[11];        

	  varchar user_info_4								[11];    

	  varchar user_info_5								[11];    

	  varchar user_info_6								[11];    

	  varchar user_info_7								[11];    

	  varchar ekey										[51];		 

	  varchar dekey										[51];

	      varchar  subsystem_name_16                       [31];

	      varchar  action_16                               [6];

	      varchar  subsystem_name_17                       [31];

	      varchar  action_17                               [6];

	      varchar  subsystem_name_18                       [31];

	      varchar  action_18                               [6];

	      varchar  subsystem_name_19                       [31];

	      varchar  action_19                               [6];

	      varchar  subsystem_name_20                       [31];

	      varchar  action_20                               [6];

	      varchar  buffer                                  [501];
	      
	      varchar Login_WorkStationId					   [30];
	      
	      varchar Login_Status                             [30];
	      
	      varchar User_Status							   [9];
	      
	      varchar Days_Inactive                            [4];
	      
	      varchar Login_Date                               [19];
	      
	      varchar User_Expiry_Date                         [9];
	      
	      varchar Date_Of_Deactivation						 [9];
	      
	      varchar password_5									[51];
	
		varchar password_6									[51];    
		
		varchar password_7									[51];
		
		varchar password_8									[51];
		
		varchar password_9									[51];
		
		varchar password_10								[51]; 
		
		varchar Logout_Date                             [19];
	      

   } db_ucf01;

 
/*Added UCF03 Table for PCI Changes by TF-Srikanth */
/* user control file  */

   struct

   {
      char  name                                     [21];
      char  password_1                               [16];
	  char  password_2                               [16];
	  char  password_3                               [16];
	  char  password_4                               [16];
	  char  accountstatus                            [9];
      char  password_modified_date                   [9];  
  	  char  user_info_1 		          [11]; 
	  char  user_info_2                   [11]; 
	  char  user_info_3                   [11]; 
	  char  user_info_4                   [11];     
	  char  ekey		                  [13];     
	  char  dekey		                  [25];     


   } pte_ucf03; 

   struct

   {

      varchar  name                                     [21];
      varchar  password_1                               [16];
	  varchar  password_2                               [16];
	  varchar  password_3                               [16];
	  varchar  password_4                               [16];
	  varchar  accountstatus                            [9];
      varchar  password_modified_date                   [9];     
      varchar  user_info_1 		          [11]; 
	  varchar  user_info_2 		          [11]; 
	  varchar  user_info_3 		          [11]; 
	  varchar  user_info_4 		          [11];
	  varchar  ekey		                  [13];     
	  varchar  dekey		              [25]; 

   } db_ucf03;

   /* user control file 02 */

   struct

   {

      char  group_id                                [16];

      char  date_added                              [9];

      char  subsystem_name_1                        [31];

      char  action_1                                [6];

      char  subsystem_name_2                        [31];

      char  action_2                                [6];

      char  subsystem_name_3                        [31];

      char  action_3                                [6];

      char  subsystem_name_4                        [31];

      char  action_4                                [6];

      char  subsystem_name_5                        [31];

      char  action_5                                [6];

      char  subsystem_name_6                        [31];

      char  action_6                                [6];

      char  subsystem_name_7                        [31];

      char  action_7                                [6];

      char  subsystem_name_8                        [31];

      char  action_8                                [6];

      char  subsystem_name_9                        [31];

      char  action_9                                [6];

      char  subsystem_name_10                       [31];

      char  action_10                               [6];

      char  subsystem_name_11                       [31];

      char  action_11                               [6];

      char  subsystem_name_12                       [31];

      char  action_12                               [6];

      char  subsystem_name_13                       [31];

      char  action_13                               [6];

      char  subsystem_name_14                       [31];

      char  action_14                               [6];

      char  subsystem_name_15                       [31];

      char  action_15                               [6];

	      char  subsystem_name_16                        [31];

	      char  action_16                                [6];

	      char  subsystem_name_17                        [31];

	      char  action_17                                [6];

	      char  subsystem_name_18                        [31];

	      char  action_18                                [6];

	      char  subsystem_name_19                        [31];

	      char  action_19                                [6];

	      char  subsystem_name_20                       [31];

	      char  action_20                               [6];

      char  terminals_1                             [21];

      char  terminals_2                             [21];

      char  terminals_3                             [21];

      char  terminals_4                             [21];

      char  terminals_5                             [21];

      char  terminals_6                             [21];

      char  terminals_7                             [21];

      char  terminals_8                             [21];

      char  terminals_9                             [21];

      char  terminals_10                            [21];

	      char  buffer                                  [501];

   }pte_ucf02;

      

   struct

   {

      varchar  group_id                                [16];

      varchar  date_added                              [9];

      varchar  subsystem_name_1                        [31];

      varchar  action_1                                [6];

      varchar  subsystem_name_2                        [31];

      varchar  action_2                                [6];

      varchar  subsystem_name_3                        [31];

      varchar  action_3                                [6];

      varchar  subsystem_name_4                        [31];

      varchar  action_4                                [6];

      varchar  subsystem_name_5                        [31];

      varchar  action_5                                [6];

      varchar  subsystem_name_6                        [31];

      varchar  action_6                                [6];

      varchar  subsystem_name_7                        [31];

      varchar  action_7                                [6];

      varchar  subsystem_name_8                        [31];

      varchar  action_8                                [6];

      varchar  subsystem_name_9                        [31];

      varchar  action_9                                [6];

      varchar  subsystem_name_10                       [31];

      varchar  action_10                               [6];

      varchar  subsystem_name_11                       [31];

      varchar  action_11                               [6];

      varchar  subsystem_name_12                       [31];

      varchar  action_12                               [6];

      varchar  subsystem_name_13                       [31];

      varchar  action_13                               [6];

      varchar  subsystem_name_14                       [31];

      varchar  action_14                               [6];

      varchar  subsystem_name_15                       [31];

      varchar  action_15                               [6];

      varchar  terminals_1                             [21];

      varchar  terminals_2                             [21];

      varchar  terminals_3                             [21];

      varchar  terminals_4                             [21];

      varchar  terminals_5                             [21];

      varchar  terminals_6                             [21];

      varchar  terminals_7                             [21];

      varchar  terminals_8                             [21];

      varchar  terminals_9                             [21];

      varchar  terminals_10                            [21];

	      varchar  subsystem_name_16                       [31];

	      varchar  action_16                               [6];

	      varchar  subsystem_name_17                       [31];

	      varchar  action_17                               [6];

	      varchar  subsystem_name_18                       [31];

	      varchar  action_18                               [6];

	      varchar  subsystem_name_19                       [31];

	      varchar  action_19                               [6];

	      varchar  subsystem_name_20                       [31];

	      varchar  action_20                               [6];

	      varchar  buffer                                  [501];

   } db_ucf02;

 
 
/* ccf04  - 20050321*/
struct
{

      char  card_type                              [2];
      char  card_nbr                               [20];
      char  mcc_lo_range                           [5];
      char  mcc_hi_range                           [5];
}pte_ccf04;


/* ccf04 - 20050321*/
struct

   {

      varchar  card_type                              [2];
      varchar  card_nbr                               [20];
      varchar  mcc_lo_range                           [5];
      varchar  mcc_hi_range                           [5];
} db_ccf04;



struct

{

   char  length                                    [3];

   char  low                                       [17];

   char  type                                      [2];



   char  high                                      [17];

   char  pan_length                                [3];

   char  auth_ind                                  [2]; /* auth_ind=0 passthru to destination_name */

                                                        /* auth_ind=1 require profile number       */

   char  caf_profile_id                            [5];

   char  destination_name                          [11];

   char  alt_destination_name                      [11]; 

   char  credit_subtype                            [2];  

   char  description                               [31];

   char  card_type                                 [5];

   char  settle_file_prefix                        [7];

   char  card_family                               [3] ;
   char  acquirer_id1                               [12] ;
   char  acquirer_id2                               [12] ;
   char  acquirer_id3                               [12] ;
   char  acquirer_id4                               [12] ;
   char  acquirer_id5                               [12] ;
   char  acquirer_id6                               [12] ;
   char  acquirer_id7                               [12] ;
   char  acquirer_id8                               [12] ;
   char  acquirer_id9                               [12] ;
   char  acquirer_id10                               [12] ;
   char  acquirer_id11                               [12] ;
   char  acquirer_id12                               [12] ;
   char  acquirer_id13                               [12] ;
   char  acquirer_id14                               [12] ;
   char  acquirer_id15                               [12] ;
   char  acquirer_id16                               [12] ;
   char  acquirer_id17                               [12] ;
   char  acquirer_id18                               [12] ;
   char  acquirer_id19                               [12] ;
   char  acquirer_id20                               [12] ;

   char mcc1_low                                    [6];   
   char mcc2_low                                    [6];   
   char mcc3_low                                    [6];   
   char mcc4_low                                    [6];   
   char mcc5_low                                    [6];   
   char mcc6_low                                    [6];   
   char mcc7_low                                    [6];   
   char mcc8_low                                    [6];   
   char mcc9_low                                    [6];
   char mcc10_low                                   [6];
   char mcc1_high                                   [6];
   char mcc2_high                                   [6];
   char mcc3_high                                   [6];
   char mcc4_high                                   [6];
   char mcc5_high                                   [6];
   char mcc6_high                                   [6];
   char mcc7_high                                   [6];
   char mcc8_high                                   [6];
   char mcc9_high                                    [6];
   char mcc10_high                                  [6];
   char mod_check						[2];

}pte_bin01;



struct
{
   varchar  length                                    [3];
   varchar  low                                       [17];
   varchar  type                                      [2];
   varchar  high                                      [17];
   varchar  pan_length                                [3];
   varchar  auth_ind                                  [2]; /* auth_ind=0 passthru to destination_name */
                                                           /* auth_ind=1 require profile number       */
   varchar  caf_profile_id                            [5];
   varchar  destination_name                          [11];
   varchar  alt_destination_name                      [11]; 
   varchar  credit_subtype                            [2];  
   varchar  description                               [31];
   varchar  card_type                                 [5];
   varchar  settle_file_prefix                        [7];
   varchar  card_family                               [3] ;
   varchar  acquirer_id1                               [12] ;
   varchar  acquirer_id2                               [12] ;
   varchar  acquirer_id3                               [12] ;
   varchar  acquirer_id4                               [12] ;
   varchar  acquirer_id5                               [12] ;
   varchar  acquirer_id6                               [12] ;
   varchar  acquirer_id7                               [12] ;
   varchar  acquirer_id8                               [12] ;
   varchar  acquirer_id9                               [12] ;
   varchar  acquirer_id10                               [12] ;
   varchar  acquirer_id11                               [12] ;
   varchar  acquirer_id12                               [12] ;
   varchar  acquirer_id13                               [12] ;
   varchar  acquirer_id14                               [12] ;
   varchar  acquirer_id15                               [12] ;
   varchar  acquirer_id16                               [12] ;
   varchar  acquirer_id17                               [12] ;
   varchar  acquirer_id18                               [12] ;
   varchar  acquirer_id19                               [12] ;
   varchar  acquirer_id20                               [12] ;
   
   varchar mcc1_low                                    [6]; 
   varchar mcc1_high                                   [6];  
   varchar mcc2_low                                    [6];
   varchar mcc2_high                                   [6];   
   varchar mcc3_low                                    [6];  
   varchar mcc3_high                                   [6]; 
   varchar mcc4_low                                    [6]; 
   varchar mcc4_high                                   [6];  
   varchar mcc5_low                                    [6]; 
   varchar mcc5_high                                   [6];  
   varchar mcc6_low                                    [6]; 
   varchar mcc6_high                                   [6];  
   varchar mcc7_low                                    [6];
   varchar mcc7_high                                   [6];   
   varchar mcc8_low                                    [6];
   varchar mcc8_high                                   [6];   
   varchar mcc9_low                                    [6];  
   varchar mcc9_high                                   [6]; 
   varchar mcc10_low                                   [6]; 
   varchar mcc10_high                                  [6];
   varchar mod_check								   [2];

}db_bin01;


/*Country Code limits table*/
/*struct
{
   char  caf_profile_id                            [5];
   char  type                                      [2];
   char  country_code                              [4];
   char  amount_limit                              [13];
}pte_country_amt_limits;
*/

/*Country Code limits table*/
/*struct
{
   varchar  caf_profile_id                         [5];
   varchar  type                                   [2];
   varchar  country_code                           [4];
   varchar  amount_limit                           [13];
}db_country_amt_limits;
*/
struct

{

   char  unique_id                                 [18];
   char  file_name                                 [10];
   char  file_primary_key                          [51];
   char  changed_by                                [21];
   char  date_modified                             [9];
   char  time_modified                             [7];
   char  field_tag                                 [40];
   char  previous_data                             [151];
   char  current_data                              [151];
   char  reserved                                  [21];
}pte_hst01;



struct

{
   varchar  unique_id                                 [18];
   varchar  file_name                                 [10];
   varchar  file_primary_key                          [51];
   varchar  changed_by                                [21];
   varchar  date_modified                             [9];
   varchar  time_modified                             [7];
   varchar  field_tag                                 [40];
   varchar  previous_data                             [151];
   varchar  current_data                              [151];
   varchar  reserved                                  [21];
}db_hst01;







/* atp configuration file */

struct

{

   char  site_name                                 [31];

   char  tlf_log_date                              [9];

   char  subsystem_name_1                          [31];

   char  subsystem_name_2                          [31];

   char  subsystem_name_3                          [31];

   char  subsystem_name_4                          [31];

   char  subsystem_name_5                          [31];

   char  subsystem_name_6                          [31];

   char  subsystem_name_7                          [31];

   char  subsystem_name_8                          [31];

   char  subsystem_name_9                          [31];

   char  subsystem_name_10                         [31];

   char  subsystem_name_11                         [31];

   char  subsystem_name_12                         [31];

   char  subsystem_name_13                         [31];

   char  subsystem_name_14                         [31];

   char  subsystem_name_15                         [31];

/*New fields for additional sub systems*/
   char  subsystem_name_16                         [31];

   char  subsystem_name_17                         [31];

   char  subsystem_name_18                         [31];

   char  subsystem_name_19                         [31];

   char  subsystem_name_20                         [31];

}pte_atp01;



struct

{

   varchar  site_name                                 [31];

   varchar  tlf_log_date                              [9];

   varchar  subsystem_name_1                          [31];

   varchar  subsystem_name_2                          [31];

   varchar  subsystem_name_3                          [31];

   varchar  subsystem_name_4                          [31];

   varchar  subsystem_name_5                          [31];

   varchar  subsystem_name_6                          [31];

   varchar  subsystem_name_7                          [31];

   varchar  subsystem_name_8                          [31];

   varchar  subsystem_name_9                          [31];

   varchar  subsystem_name_10                         [31];

   varchar  subsystem_name_11                         [31];

   varchar  subsystem_name_12                         [31];

   varchar  subsystem_name_13                         [31];

   varchar  subsystem_name_14                         [31];

   varchar  subsystem_name_15                         [31];

   varchar  subsystem_name_16                         [31];

   varchar  subsystem_name_17                         [31];

   varchar  subsystem_name_18                         [31];

   varchar  subsystem_name_19                         [31];

   varchar  subsystem_name_20                         [31];


}db_atp01;



struct 

{

	char length [3] ;

	char lo [17] ;

	char high [17] ;

	char pan_length [3] ;

	char destination_name [11] ;

	char description [31] ;

} pte_bin02 ;



struct 

{

	varchar length [3] ;

	varchar lo [17] ;

	varchar high [17] ;

	varchar pan_length [3] ;

	varchar destination_name [11] ;

	varchar description [31] ;

} db_bin02 ;


/* -------------------------------- */
/* Fraudguard Raw Data Transactions */
/* -------------------------------- */
struct
{
   char  transaction_id  [21];
   char  system_date      [9];
   char  length           [5];
   char  raw_data      [1500];
}pte_fgraw;

struct
{
   varchar  transaction_id  [21];
   varchar  system_date      [9];
   varchar  length           [5];
   varchar  raw_data      [1500];
}db_fgraw;

struct
{
	 char product_code		 				[5];
	 char minmajpurchamt			 		[13];
	 char maxmajpurchamt			 		[13];
	 char mininstamt				 		[13];
	 char maxinstamt				 		[13];
	 char minmajpurchlmt			 		[11];
	 char minpenaltyamt 			 		[16];
	 char maxpenaltyamt 			 		[16];
	 char penaltyper				 		[8];
	 char penaltyday				 		[4];
	 char minamtofaging 			 		[19];
	 char mntowrtof 				 		[3];
	 char BPIminamt 				 		[13];
	 char brokenperdinst			 		[2];
	 char minfreepurchamt			 		[13];
	 char errorunauthamt			 		[16];
	 char fixedmpfee				 		[16];
	 char mpfeepercnt				 		[7];
	 char earlyrepayfeeper			 		[9];
	 char effective_date			 		[9];
	 char maxtrnperday				 		[3];
	 char maxamtperday				 		[16];
	 char authoverlimit 			 		[8];
	 char authpara_response_code_1        	[3];
 	 char authpara_message_1         	  	[3];
 	 char authpara_response_code_2        	[3];
  	 char authpara_message_2         		[3];
 	 char authpara_response_code_3        	[3];
 	 char authpara_message_3         		[3];
}pte_mppara01;

struct
{
	  varchar product_code					 [4];
	  varchar minmajpurchamt				 [12];
	  varchar maxmajpurchamt				 [12];
	  varchar mininstamt					 [12];
	  varchar maxinstamt					 [12];
	  varchar minmajpurchlmt				 [10];
	  varchar minpenaltyamt					 [15];
	  varchar maxpenaltyamt					 [15];
	  varchar penaltyper					 [7];
	  varchar penaltyday					 [3];
	  varchar minamtofaging					 [18];
	  varchar mntowrtof						 [2];
	  varchar BPIminamt						 [12];
	  varchar brokenperdinst				 [1];
	  varchar minfreepurchamt				 [12];
	  varchar errorunauthamt				 [15];
	  varchar fixedmpfee					 [15];
	  varchar mpfeepercnt					 [6];
	  varchar earlyrepayfeeper 				 [8];
	  varchar effective_date				 [8];
	  varchar maxtrnperday 					 [2];
	  varchar maxamtperday 					 [15];
	  varchar authoverlimit					 [7];
	  varchar authpara_response_code_1 		 [2];
	  varchar authpara_message_1			 [2];
	  varchar authpara_response_code_2 		 [2];
  	  varchar authpara_message_2			 [2];
	  varchar authpara_response_code_3 		 [2];
	  varchar authpara_message_3			 [2];
}db_mppara01;

struct 
{
	char pan_length								[4];
	char bin_low								[18];
	char card_type								[3];
	char bin_high								[18];
	char bin_length								[4];
	char mid_block_1							[16];
	char mid_block_2							[16];
	char mid_block_3							[16];
	char mid_block_4							[16];
	char mid_block_5							[16];
	char mid_block_6							[16];
	char mid_block_7							[16];
	char mid_block_8							[16];
	char mid_block_9							[16];
	char mid_block_10							[16];
	char mid_block_11							[16];
	char mid_block_12							[16];
	char mid_block_13							[16];
	char mid_block_14							[16];
	char mid_block_15							[16];
	char mid_block_16							[16];
	char mid_block_17							[16];
	char mid_block_18							[16];
	char mid_block_19							[16];
	char mid_block_20							[16];
	char mid_block_21							[16];
	char mid_block_22							[16];
	char mid_block_23							[16];
	char mid_block_24							[16];
	char mid_block_25							[16];
	char mid_block_26							[16];
	char mid_block_27							[16];
	char mid_block_28							[16];
	char mid_block_29							[16];
	char mid_block_30							[16];
	char mid_block_31							[16];
	char mid_block_32							[16];
	char mid_block_33							[16];
	char mid_block_34							[16];
	char mid_block_35							[16];
	char mid_block_36							[16];
	char mid_block_37							[16];
	char mid_block_38							[16];
	char mid_block_39							[16];
	char mid_block_40							[16];
	char mid_block_41							[16];
	char mid_block_42							[16];
	char mid_block_43							[16];
	char mid_block_44							[16];
	char mid_block_45							[16];
	char mid_block_46							[16];
	char mid_block_47							[16];
	char mid_block_48							[16];
	char mid_block_49							[16];
	char mid_block_50							[16];
}pte_binblkmid01;

struct 
{
	varchar pan_length								[3];
	varchar bin_low									[17];
	varchar card_type								[2];
	varchar bin_high								[17];
	varchar bin_length								[3];
	varchar mid_block_1								[15];
	varchar mid_block_2								[15];
	varchar mid_block_3								[15];
	varchar mid_block_4								[15];
	varchar mid_block_5								[15];
	varchar mid_block_6								[15];
	varchar mid_block_7								[15];
	varchar mid_block_8								[15];
	varchar mid_block_9								[15];
	varchar mid_block_10							[15];
	varchar mid_block_11							[15];
	varchar mid_block_12							[15];
	varchar mid_block_13							[15];
	varchar mid_block_14							[15];
	varchar mid_block_15							[15];
	varchar mid_block_16							[15];
	varchar mid_block_17							[15];
	varchar mid_block_18							[15];
	varchar mid_block_19							[15];
	varchar mid_block_20							[15];
	varchar mid_block_21							[15];
	varchar mid_block_22							[15];
	varchar mid_block_23							[15];
	varchar mid_block_24							[15];
	varchar mid_block_25							[15];
	varchar mid_block_26							[15];
	varchar mid_block_27							[15];
	varchar mid_block_28							[15];
	varchar mid_block_29							[15];
	varchar mid_block_30							[15];
	varchar mid_block_31							[15];
	varchar mid_block_32							[15];
	varchar mid_block_33							[15];
	varchar mid_block_34							[15];
	varchar mid_block_35							[15];
	varchar mid_block_36							[15];
	varchar mid_block_37							[15];
	varchar mid_block_38							[15];
	varchar mid_block_39							[15];
	varchar mid_block_40							[15];
	varchar mid_block_41							[15];
	varchar mid_block_42							[15];
	varchar mid_block_43							[15];
	varchar mid_block_44							[15];
	varchar mid_block_45							[15];
	varchar mid_block_46							[15];
	varchar mid_block_47							[15];
	varchar mid_block_48							[15];
	varchar mid_block_49							[15];
	varchar mid_block_50							[15];
}db_binblkmid01;

struct
{
	char days_inactive								[5];
	char max_prev_passwords_not_allowed             [3];
	char max_password_retries                       [2];
	char min_password_length                        [3];
	char days_before_expiration						[5];
	char user_status_cntrl_tmeout_val				[5];
}pte_gpcf01;

struct
{
	varchar days_inactive							  [4];
	varchar max_prev_passwords_not_allowed            [2];
	varchar max_password_retries                      [1];
	varchar min_password_length                       [2];
	varchar days_before_expiration					  [4];
	varchar user_status_cntrl_tmeout_val			  [4];	
}db_gpcf01;

struct
{
	char self_validation_ac			        [4];
	char authentication_result_code_ac      [4];
	char authentication_attempt_ac          [4];
    char authentication_attempt_verify_flag [2];
	char csc_validation_flag				[2];

}pte_amex3ds2;

struct
{
	varchar self_validation_ac			        [4];
	varchar authentication_result_code_ac      [4];
	varchar authentication_attempt_ac          [4];
    varchar authentication_attempt_verify_flag [2];
	varchar csc_validation_flag				[2];

}db_amex3ds2;


struct
{
	char self_validation_pass_cavv_rc [3];
	char self_validation_cavv_rc [3];
	char authentication_result_code_ac [4];
	char authentication_result_code_cavv_rc [3];
	char authentication_attmpt_ac [4];
	char cvv2_validation_flag [2];
	char authentication_attempt_verify_flag [2];	
}pte_dci3ds2;



struct
{
	varchar self_validation_pass_cavv_rc [3];
	varchar self_validation_cavv_rc [3];
	varchar authentication_result_code_ac [4];
	varchar authentication_result_code_cavv_rc [3];
	varchar authentication_attmpt_ac [4];
	varchar cvv2_validation_flag [2];
    	varchar authentication_attempt_verify_flag [2];	
}db_dci3ds2;

struct
{
	char av_verification_rc			        [3];
	char authentication_attempt_rc          [3];
	char cvn2_validation_flag				[2];
	char av_validation_flag				    [2];
	char cup_authentication_attempt_verify_flag	 [2];
}pte_cup3ds2;

struct
{
	varchar av_verification_rc			       [3];
	varchar authentication_attempt_rc          [3];
	varchar cvn2_validation_flag			   [2];
	varchar av_validation_flag				   [2];
	varchar cup_authentication_attempt_verify_flag	[2];

}db_cup3ds2;


struct
{
	varchar auth_result_code_value [3];
	varchar response_code [3];
	varchar validation_flag [2];
}db_jcb3ds2;

struct
{
	char auth_result_code_value [3];
	char response_code [3];
	char validation_flag [2];
}pte_jcb3ds2;

#ifdef VISA7
struct
{
   varchar  merchant_id   		[16];
   varchar  card_nbr      		[20];
   varchar  category_cd   		[5];
   varchar  c1_block            [2];
   varchar  c2_block            [2];
   varchar  c3_block            [2];
   varchar  c4_block            [2];
   varchar	c1_count			[3];
   varchar  c1_block_start_date [9];
   varchar  c1_block_end_date   [9];
   varchar	c2_count			[3];
   varchar  c2_block_start_date [9];
   varchar  c2_block_end_date   [9];
   varchar	c3_count			[3];
   varchar  c3_block_start_date [9];
   varchar  c3_block_end_date   [9];
   varchar	c4_count			[3];
   varchar  c4_block_start_date [9];
   varchar  c4_block_end_date   [9];
   varchar  block_reset_date	[9];
   varchar  last_declined_rc    [3];
   varchar first_reattempt_date [9];
   varchar  reattempts_date		[200];


}db_merch_int_param;

struct
{
   char  merchant_id   		 [16];
   char  card_nbr      		 [20];
   char  category_cd   		 [5];
   char  c1_block            [2];
   char  c2_block            [2];
   char  c3_block            [2];
   char  c4_block            [2];
   char	 c1_count			 [3];
   char  c1_block_start_date [9];
   char  c1_block_end_date   [9];
   char	 c2_count			 [3];
   char  c2_block_start_date [9];
   char  c2_block_end_date   [9];
   char	 c3_count			 [3];
   char  c3_block_start_date [9];
   char  c3_block_end_date   [9];
   char	 c4_count			 [3];
   char  c4_block_start_date [9];
   char  c4_block_end_date   [9];
   char  block_reset_date	 [9];
   char  last_declined_rc    [3];
   char  first_reattempt_date[9];
   char  reattempts_date	 [200];


}pte_merch_int_param;
#endif

EXEC SQL END DECLARE SECTION;


/*************************************************************************************/
/*************************************************************************************/
void clf01_to_db( pCLF01 clf01_ptr )
{
  memcpy (&pte_clf01, clf01_ptr, sizeof(pte_clf01));
}

/*************************************************************************************/
/*************************************************************************************/
void fgraw_to_db( pFG_RAW fgraw_ptr )
{
   memcpy( &pte_fgraw, fgraw_ptr, sizeof(pte_fgraw));
   return;
}

/*************************************************************************************/
/*************************************************************************************/
void bpf01_to_db( pBPF01 bpf01_ptr )
{
  memcpy (&pte_bpf01, bpf01_ptr, sizeof(pte_bpf01));
}




/*************************************************************************************/

/*************************************************************************************/

void jbf01_to_db( pJBF01 jbf01_ptr )

{

  memcpy (&pte_jbf01, jbf01_ptr, sizeof(pte_jbf01));

}



/*************************************************************************************/

/*************************************************************************************/

void apf01_to_db( pAPF01 apf01_ptr )

{

  memcpy (&pte_apf01, apf01_ptr, sizeof(pte_apf01));

}



/*************************************************************************************/

/*************************************************************************************/

void faf01_to_db( pFAF01 faf01_ptr )

{

  memcpy (&pte_faf01, faf01_ptr, sizeof(pte_faf01));

}





/*************************************************************************************/

/*************************************************************************************/

void ccf10_to_db( pCCF10 ccf10_ptr )

{

  memcpy (&pte_ccf10, ccf10_ptr, sizeof(pte_ccf10));

}





/******************************************************************************/
/******************************************************************************/
void bon01_to_db( pBON01 bon01_ptr )
{
  memcpy (&pte_bon01, bon01_ptr, sizeof(pte_bon01));
}


/******************************************************************************/
/******************************************************************************/
void bon02_to_db( pBON02 bon02_ptr )
{
  memcpy (&pte_bon02, bon02_ptr, sizeof(pte_bon02));
}


void uag01_to_db (pUAG01 uag01_ptr)
{
	memcpy (&pte_uag01, uag01_ptr, sizeof(pte_uag01));	
}


/*************************************************************************************/

/*************************************************************************************/

void ccf01_to_db( pCCF01 ccf01_ptr )

{

  memcpy (&pte_ccf01, ccf01_ptr, sizeof(pte_ccf01));

}





/*************************************************************************************/

/*************************************************************************************/

void acf01_to_db( pACF01 acf01_ptr )

{

  memcpy (&pte_acf01, acf01_ptr, sizeof(pte_acf01));

}


void ccl01_to_db (pCCL01 ccl01_ptr )
{

memcpy (&pte_ccl01, ccl01_ptr, sizeof(pte_ccl01));

}

/*************************************************************************************/

/*************************************************************************************/

void caf01_keyblock01_to_db (pCAF01_KEYBLOCK caf01_keyblock01_ptr )
{

	memcpy (&pte_caf01_keyblock01, caf01_keyblock01_ptr, sizeof(pte_caf01_keyblock01));

}


/*************************************************************************************/

/*************************************************************************************/

void bdkkey01_to_db (pBDKKEY01 bdkkey01_ptr )
{

	memcpy (&pte_bdkkey01, bdkkey01_ptr, sizeof(pte_bdkkey01));

}

/*************************************************************************************/

/*************************************************************************************/

void crf01_to_db( pCRF01 crf01_ptr )

{

  memcpy (&pte_crf01, crf01_ptr, sizeof(pte_crf01));

}



/*************************************************************************************/

/*************************************************************************************/

void csf01_to_db( pCSF01 csf01_ptr )

{

  memcpy (&pte_csf01, csf01_ptr, sizeof(pte_csf01));

}



/*************************************************************************************/

/*************************************************************************************/

void paf01_to_db( pPAF01 paf01_ptr )

{

  memcpy (&pte_paf01, paf01_ptr, sizeof(pte_paf01));

}





/*************************************************************************************/

/*************************************************************************************/

void def01_to_db( pDEF01 def01_ptr )

{

  memcpy (&pte_def01, def01_ptr, sizeof(pte_def01));

}




void cr01_to_db( pCR01 cr01_ptr )

{
	memset( &pte_cr01, 0, sizeof( pte_cr01 ) );
  memcpy (&pte_cr01, cr01_ptr, sizeof(pte_cr01));

}
/*************************************************************************************/

/*************************************************************************************/

void ccf03p_to_db( pCCF03 ccf03p_ptr )

{

  memcpy (&pte_ccf03p, ccf03p_ptr, sizeof(pte_ccf03p));

}


/*************************************************************************************/

/*************************************************************************************/

void offus_velocity_to_db( pOffus_velocity offus_velocity_ptr )
{
  memcpy (&pte_offus_velocity, offus_velocity_ptr, sizeof(pte_offus_velocity));
}





/*************************************************************************************/

/*************************************************************************************/

void mct01_to_db( pMCT01 mct01_ptr )

{

  memcpy (&pte_mct01, mct01_ptr, sizeof(pte_mct01));

}



/*************************************************************************************/

/*************************************************************************************/

void ctf01_to_db( pCTF01 ctf01_ptr )

{

  memcpy (&pte_ctf01, ctf01_ptr, sizeof(pte_ctf01));

}



/*************************************************************************************/
/*************************************************************************************/
void caf01_to_db( pCAF01 caf01_ptr )
{
   memcpy (&pte_caf01, caf01_ptr, sizeof(pte_caf01));
}


void key3ds01_to_db( pKEY3DS01 key3ds01_ptr )
{
   memcpy (&pte_key3ds01, key3ds01_ptr, sizeof(pte_key3ds01));
}
/*************************************************************************************/
/*************************************************************************************/

void caf01_emv_to_db( pCAF01_EMV caf01_emv_ptr )
{
  memcpy (&pte_caf01_emv, caf01_emv_ptr, sizeof(pte_caf01_emv));
}


/*************************************************************************************/
/*************************************************************************************/
void mcc_limits_to_db( pMCC_LIMITS mcc_limits_ptr )
{
   memcpy (&pte_mcc_limits, mcc_limits_ptr, sizeof(pte_mcc_limits));
}


/*************************************************************************************/
/*************************************************************************************/
void country_amt_limits_to_db( pCOUNTRY_AMT_LIMITS country_amt_limits_ptr )
{
   memcpy (&pte_country_amt_limits, country_amt_limits_ptr, sizeof(pte_country_amt_limits));
}



/*************************************************************************************/

/*************************************************************************************/

void fcf02_to_db( pFCF02 fcf02_ptr )

{

  memcpy (&pte_fcf02, fcf02_ptr, sizeof(pte_fcf02));

}



/*************************************************************************************/

/*************************************************************************************/

void omc01_to_db( pOMC01 omc01_ptr )

{

  memcpy (&pte_omc01, omc01_ptr, sizeof(pte_omc01));

}

/*************************************************************************************/
/*************************************************************************************/

void mcc01_to_db( pMCC01 mcc01_ptr )

{

  memcpy (&pte_mcc01, mcc01_ptr, sizeof(pte_mcc01));

}

/*************************************************************************************/

/*************************************************************************************/

void ccf02p_to_db( pCCF02P ccf02p_ptr )

{

  memcpy (&pte_ccf02p, ccf02p_ptr, sizeof(pte_ccf02p));

}

/*************************************************************************************/

/*************************************************************************************/

void ccf02h_to_db(pCCF02H ccf02h_ptr )

{

   memcpy (&pte_ccf02h, ccf02h_ptr, sizeof(pte_ccf02h));

}

/*************************************************************************************/

/*************************************************************************************/

void atp02_to_db( pATP02 atp02_ptr )

{

  memcpy (&pte_atp02, atp02_ptr, sizeof(pte_atp02));

}

/*************************************************************************************/

/*************************************************************************************/

void atp01_to_db( pATP01 atp01_ptr )

{

  memcpy (&pte_atp01, atp01_ptr, sizeof(pte_atp01));

}





/*************************************************************************************/

/*************************************************************************************/

void hst01_to_db( pHST01 hst01_ptr )

{

  memcpy (&pte_hst01, hst01_ptr, sizeof(pte_hst01));

}



/*************************************************************************************/

/*************************************************************************************/

void bin01_to_db( pBIN01 bin01_ptr )

{

  memcpy (&pte_bin01, bin01_ptr, sizeof(pte_bin01));

}

/*************************************************************************************/

/*************************************************************************************/

void ucf01_to_db( pUCF01 ucf01_ptr )

{

  memcpy (&pte_ucf01, ucf01_ptr, sizeof(pte_ucf01));

}
/*************************************************************************************/
/*Added UCF03 Table for PCI Changes by TF-Srikanth */

void ucf03_to_db( pUCF03 ucf03_ptr )

{

  memcpy (&pte_ucf03, ucf03_ptr, sizeof(pte_ucf03));

}
/*************************************************************************************/

/*************************************************************************************/

void ucf02_to_db( pUCF02 ucf02_ptr )

{

  memcpy (&pte_ucf02, ucf02_ptr, sizeof(pte_ucf02));

}





/*************************************************************************************/

/*************************************************************************************/

void ccf04_to_db( pCCF04 ccf04_ptr )

{

  memcpy (&pte_ccf04, ccf04_ptr, sizeof(pte_ccf04));

}



/*************************************************************************************/

/*************************************************************************************/
  void mppara01_to_db( pMPPARA01 mppara01_ptr )
  {
	memcpy (&pte_mppara01, mppara01_ptr, sizeof(pte_mppara01));
  }
/*************************************************************************************/


/*************************************************************************************/

void db_to_apf01 ( pAPF01 apf01_ptr )

{

   memset(apf01_ptr, 0, sizeof(APF01));

   memcpy(apf01_ptr->primary_key.app_name, db_apf01.app_name.arr, db_apf01.app_name.len);

   memcpy(apf01_ptr->exe_name, db_apf01.exe_name.arr, db_apf01.exe_name.len);

   memcpy(apf01_ptr->path, db_apf01.path.arr, db_apf01.path.len);

   memcpy(apf01_ptr->parameters, db_apf01.parameters.arr, db_apf01.parameters.len);

}



/*************************************************************************************/

/*************************************************************************************/

void db_to_jbf01 ( pJBF01 jbf01_ptr )

{

   memset(jbf01_ptr, 0, sizeof(JBF01));

   memcpy(jbf01_ptr->primary_key.job_id, db_jbf01.job_id.arr, db_jbf01.job_id.len);

   memcpy(jbf01_ptr->time_to_run, db_jbf01.time_to_run.arr, db_jbf01.time_to_run.len);

   memcpy(jbf01_ptr->status, db_jbf01.status.arr, db_jbf01.status.len);

   memcpy(jbf01_ptr->last_run, db_jbf01.last_run.arr, db_jbf01.last_run.len);

   memcpy(jbf01_ptr->app_name, db_jbf01.app_name.arr, db_jbf01.app_name.len);

}





/*************************************************************************************/
/*************************************************************************************/
void db_to_bpf01 ( pBPF01 bpf01_ptr )
{
   memset(bpf01_ptr, 0, sizeof(BPF01));
   memcpy(bpf01_ptr->primary_key.profile_id, db_bpf01.profile_id.arr, db_bpf01.profile_id.len);
   memcpy(bpf01_ptr->primary_key.job_id, db_bpf01.job_id.arr, db_bpf01.job_id.len);
}




/*************************************************************************************/
/*************************************************************************************/
void db_to_fgraw( pFG_RAW fgraw_ptr )
{
   memset( fgraw_ptr, 0x00, sizeof(FG_RAW) );
   memcpy( fgraw_ptr->transaction_id, db_fgraw.transaction_id.arr, db_fgraw.transaction_id.len);
   memcpy( fgraw_ptr->system_date,    db_fgraw.system_date.arr,    db_fgraw.system_date.len   );
   memcpy( fgraw_ptr->length,         db_fgraw.length.arr,         db_fgraw.length.len        );
   memcpy( fgraw_ptr->raw_data,       db_fgraw.raw_data.arr,       db_fgraw.raw_data.len      );
   return;
}

/*************************************************************************************/
/*************************************************************************************/
void db_to_mcf01_id ( pMCF01 mcf01_ptr )
{
   memset(mcf01_ptr, 0, sizeof(MCF01));
   memcpy(mcf01_ptr->primary_key.organization_id, db_mcf01.organization_id.arr, db_mcf01.organization_id.len);
   memcpy(mcf01_ptr->primary_key.merchant_id, db_mcf01.merchant_id.arr, db_mcf01.merchant_id.len);

   memcpy(mcf01_ptr->status, db_mcf01.status.arr, db_mcf01.status.len);
   memcpy(mcf01_ptr->name01, db_mcf01.name01.arr, db_mcf01.name01.len);
   memcpy(mcf01_ptr->name02, db_mcf01.name02.arr, db_mcf01.name02.len);
   memcpy(mcf01_ptr->address01, db_mcf01.address01.arr, db_mcf01.address01.len);
   memcpy(mcf01_ptr->address02, db_mcf01.address02.arr, db_mcf01.address02.len);
   memcpy(mcf01_ptr->city, db_mcf01.city.arr, db_mcf01.city.len);
   memcpy(mcf01_ptr->country, db_mcf01.country.arr, db_mcf01.country.len);
   memcpy(mcf01_ptr->state, db_mcf01.state.arr, db_mcf01.state.len);
   memcpy(mcf01_ptr->zip_code, db_mcf01.zip_code.arr, db_mcf01.zip_code.len);
   memcpy(mcf01_ptr->intl_code, db_mcf01.intl_code.arr, db_mcf01.intl_code.len);
   memcpy(mcf01_ptr->currency_code, db_mcf01.currency_code.arr, db_mcf01.currency_code.len);
   memcpy(mcf01_ptr->contact, db_mcf01.contact.arr, db_mcf01.contact.len);
   memcpy(mcf01_ptr->phone01, db_mcf01.phone01.arr, db_mcf01.phone01.len);
   memcpy(mcf01_ptr->phone02, db_mcf01.phone02.arr, db_mcf01.phone02.len);
   memcpy(mcf01_ptr->invoice_batch, db_mcf01.invoice_batch.arr, db_mcf01.invoice_batch.len);
   memcpy(mcf01_ptr->invoice_subcode, db_mcf01.invoice_subcode.arr, db_mcf01.invoice_subcode.len);
   memcpy(mcf01_ptr->process_control_id, db_mcf01.process_control_id.arr, db_mcf01.process_control_id.len);
   memcpy(mcf01_ptr->date_added, db_mcf01.date_added.arr, db_mcf01.date_added.len);
   
   memcpy(mcf01_ptr->region_nbr, db_mcf01.region_nbr.arr, db_mcf01.region_nbr.len);
   memcpy(mcf01_ptr->division_nbr, db_mcf01.division_nbr.arr, db_mcf01.division_nbr.len);
   memcpy(mcf01_ptr->password, db_mcf01.password.arr, db_mcf01.password.len);
   memcpy(mcf01_ptr->rps_merchant, db_mcf01.rps_merchant.arr, db_mcf01.rps_merchant.len);
   memcpy(mcf01_ptr->house_card_merchant, db_mcf01.house_card_merchant.arr, db_mcf01.house_card_merchant.len);
   memcpy(mcf01_ptr->procurement_merchant, db_mcf01.procurement_merchant.arr, db_mcf01.procurement_merchant.len);
   memcpy(mcf01_ptr->deferred_merchant, db_mcf01.deferred_merchant.arr, db_mcf01.deferred_merchant.len);
   memcpy(mcf01_ptr->cash_bonus_eligible, db_mcf01.cash_bonus_eligible.arr, db_mcf01.cash_bonus_eligible.len);
   memcpy(mcf01_ptr->vip_code, db_mcf01.vip_code.arr, db_mcf01.vip_code.len);
   memcpy(mcf01_ptr->pos_code, db_mcf01.pos_code.arr, db_mcf01.pos_code.len);
   memcpy(mcf01_ptr->vs_tcc_code, db_mcf01.vs_tcc_code.arr, db_mcf01.vs_tcc_code.len);
   memcpy(mcf01_ptr->mc_fcc_code, db_mcf01.mc_fcc_code.arr, db_mcf01.mc_fcc_code.len);
   memcpy(mcf01_ptr->jcb_sub_code, db_mcf01.jcb_sub_code.arr, db_mcf01.jcb_sub_code.len);
   memcpy(mcf01_ptr->mall_code, db_mcf01.mall_code.arr, db_mcf01.mall_code.len);
   memcpy(mcf01_ptr->hc_code, db_mcf01.hc_code.arr, db_mcf01.hc_code.len);
   memcpy(mcf01_ptr->solicit_code, db_mcf01.solicit_code.arr, db_mcf01.solicit_code.len);
   
   
   memcpy(mcf01_ptr->block_start_date, db_mcf01.block_start_date.arr, db_mcf01.block_start_date.len);
   memcpy(mcf01_ptr->block_end_date, db_mcf01.block_end_date.arr, db_mcf01.block_end_date.len);
   memcpy(mcf01_ptr->credit_purch_max, db_mcf01.credit_purch_max.arr, db_mcf01.credit_purch_max.len);
   memcpy(mcf01_ptr->credit_auth_max, db_mcf01.credit_auth_max.arr, db_mcf01.credit_auth_max.len);
   memcpy(mcf01_ptr->credit_return_max, db_mcf01.credit_return_max.arr, db_mcf01.credit_return_max.len);
   memcpy(mcf01_ptr->credit_cash_adv_max, db_mcf01.credit_cash_adv_max.arr, db_mcf01.credit_cash_adv_max.len);
   memcpy(mcf01_ptr->credit_man_entry_max, db_mcf01.credit_man_entry_max.arr, db_mcf01.credit_man_entry_max.len);
   memcpy(mcf01_ptr->credit_cash_back_max, db_mcf01.credit_cash_back_max.arr, db_mcf01.credit_cash_back_max.len);
   memcpy(mcf01_ptr->debit_purch_max, db_mcf01.debit_purch_max.arr, db_mcf01.debit_purch_max.len);
   memcpy(mcf01_ptr->debit_auth_max, db_mcf01.debit_auth_max.arr, db_mcf01.debit_auth_max.len);
   memcpy(mcf01_ptr->debit_return_max, db_mcf01.debit_return_max.arr, db_mcf01.debit_return_max.len);
   memcpy(mcf01_ptr->debit_cash_adv_max, db_mcf01.debit_cash_adv_max.arr, db_mcf01.debit_cash_adv_max.len);
   memcpy(mcf01_ptr->debit_man_entry_max, db_mcf01.debit_man_entry_max.arr, db_mcf01.debit_man_entry_max.len);
   memcpy(mcf01_ptr->debit_cash_back_max, db_mcf01.debit_cash_back_max.arr, db_mcf01.debit_cash_back_max.len);
   memcpy(mcf01_ptr->aver_purch_amount, db_mcf01.aver_purch_amount.arr, db_mcf01.aver_purch_amount.len);
   memcpy(mcf01_ptr->max_num_returns, db_mcf01.max_num_returns.arr, db_mcf01.max_num_returns.len);
   memcpy(mcf01_ptr->amount_returns, db_mcf01.amount_returns.arr, db_mcf01.amount_returns.len);
   memcpy(mcf01_ptr->number_man_entries, db_mcf01.number_man_entries.arr, db_mcf01.number_man_entries.len);
   memcpy(mcf01_ptr->amount_deposits, db_mcf01.amount_deposits.arr, db_mcf01.amount_deposits.len);
   memcpy(mcf01_ptr->pan_same, db_mcf01.pan_same.arr, db_mcf01.pan_same.len);
   memcpy(mcf01_ptr->totals_ind, db_mcf01.totals_ind.arr, db_mcf01.totals_ind.len);
   memcpy(mcf01_ptr->statistics_ind, db_mcf01.statistics_ind.arr, db_mcf01.statistics_ind.len);         

   memcpy(mcf01_ptr->network[0].priority_routing, db_mcf01.network_priority_routing_1.arr, db_mcf01.network_priority_routing_1.len);
   memcpy(mcf01_ptr->network[1].priority_routing, db_mcf01.network_priority_routing_2.arr, db_mcf01.network_priority_routing_2.len);
   memcpy(mcf01_ptr->network[2].priority_routing, db_mcf01.network_priority_routing_3.arr, db_mcf01.network_priority_routing_3.len);
   memcpy(mcf01_ptr->network[3].priority_routing, db_mcf01.network_priority_routing_4.arr, db_mcf01.network_priority_routing_4.len);
   memcpy(mcf01_ptr->network[4].priority_routing, db_mcf01.network_priority_routing_5.arr, db_mcf01.network_priority_routing_5.len);
   memcpy(mcf01_ptr->network[5].priority_routing, db_mcf01.network_priority_routing_6.arr, db_mcf01.network_priority_routing_6.len);
   memcpy(mcf01_ptr->network[6].priority_routing, db_mcf01.network_priority_routing_7.arr, db_mcf01.network_priority_routing_7.len);
   memcpy(mcf01_ptr->network[7].priority_routing, db_mcf01.network_priority_routing_8.arr, db_mcf01.network_priority_routing_8.len);
   memcpy(mcf01_ptr->network[8].priority_routing, db_mcf01.network_priority_routing_9.arr, db_mcf01.network_priority_routing_9.len);
   memcpy(mcf01_ptr->network[9].priority_routing, db_mcf01.network_priority_routing_10.arr, db_mcf01.network_priority_routing_10.len);
   memcpy(mcf01_ptr->negative_group_id, db_mcf01.negative_group_id.arr, db_mcf01.negative_group_id.len);
   memcpy(mcf01_ptr->voice_category_code, db_mcf01.voice_category_code.arr, db_mcf01.voice_category_code.len);
   memcpy(mcf01_ptr->class_code, db_mcf01.class_code.arr, db_mcf01.class_code.len);
   memcpy(mcf01_ptr->deferred_start_date, db_mcf01.deferred_start_date.arr, db_mcf01.deferred_start_date.len);
   memcpy(mcf01_ptr->deferred_end_date, db_mcf01.deferred_end_date.arr, db_mcf01.deferred_end_date.len);
   memcpy(mcf01_ptr->group_outlet_code, db_mcf01.group_outlet_code.arr, db_mcf01.group_outlet_code.len);
   memcpy(mcf01_ptr->group_type, db_mcf01.group_type.arr, db_mcf01.group_type.len);
   memcpy(mcf01_ptr->reload_merchant, db_mcf01.reload_merchant.arr, db_mcf01.reload_merchant.len);

}

/*************************************************************************************/
/*************************************************************************************/
void db_to_omc01 ( pOMC01 omc01_ptr )
{
	memset(omc01_ptr, 0, sizeof(OMC01));
	memcpy(omc01_ptr->primary_key.merchant_id, db_omc01.merchant_id.arr, db_omc01.merchant_id.len);
	memcpy(omc01_ptr->primary_key.card_nbr, db_omc01.card_nbr.arr, db_omc01.card_nbr.len);
	memcpy(omc01_ptr->primary_key.max_repeat, db_omc01.max_repeat.arr, db_omc01.max_repeat.len);
	memcpy(omc01_ptr->primary_key.repeated, db_omc01.repeated.arr, db_omc01.repeated.len);
	memcpy(omc01_ptr->primary_key.expiry_date, db_omc01.expiry_date.arr, db_omc01.expiry_date.len);
	memcpy(omc01_ptr->primary_key.peso_amt_limit, db_omc01.peso_amt_limit.arr, db_omc01.peso_amt_limit.len);
	memcpy(omc01_ptr->primary_key.usd_amt_limit, db_omc01.usd_amt_limit.arr, db_omc01.usd_amt_limit.len);

	memcpy(omc01_ptr->bypass, db_omc01.bypass.arr, db_omc01.bypass.len);               
	memcpy(omc01_ptr->future_use1, db_omc01.future_use1.arr, db_omc01.future_use1.len);
	memcpy(omc01_ptr->future_use2, db_omc01.future_use2.arr, db_omc01.future_use2.len);
	memcpy(omc01_ptr->future_use3, db_omc01.future_use3.arr, db_omc01.future_use3.len);
	memcpy(omc01_ptr->future_use4, db_omc01.future_use4.arr, db_omc01.future_use4.len);
}

/*************************************************************************************/
/*************************************************************************************/
void db_to_mcc01 ( pMCC01 mcc01_ptr )
{
	memset(mcc01_ptr, 0, sizeof(MCC01));
	memcpy(mcc01_ptr->primary_key.low,	db_mcc01.low.arr,	db_mcc01.low.len);
	memcpy(mcc01_ptr->primary_key.high, db_mcc01.high.arr,	db_mcc01.high.len);
	memcpy(mcc01_ptr->allow,			db_mcc01.allow.arr, db_mcc01.allow.len);
}

/*************************************************************************************/
/*************************************************************************************/
void db_to_clf01 ( pCLF01 clf01_ptr )
{
   memset(clf01_ptr, 0, sizeof(CLF01));
   memcpy(clf01_ptr->primary_key.year, db_clf01.year.arr, db_clf01.year.len);
   memcpy(clf01_ptr->primary_key.month, db_clf01.month.arr, db_clf01.month.len);
   memcpy(clf01_ptr->day[0].working_day, db_clf01.working_day_1.arr, db_clf01.working_day_1.len);
   memcpy(clf01_ptr->day[0].profile_id, db_clf01.profile_id_1.arr, db_clf01.profile_id_1.len);
   memcpy(clf01_ptr->day[1].working_day, db_clf01.working_day_2.arr, db_clf01.working_day_2.len);
   memcpy(clf01_ptr->day[1].profile_id, db_clf01.profile_id_2.arr, db_clf01.profile_id_2.len);
   memcpy(clf01_ptr->day[2].working_day, db_clf01.working_day_3.arr, db_clf01.working_day_3.len);
   memcpy(clf01_ptr->day[2].profile_id, db_clf01.profile_id_3.arr, db_clf01.profile_id_3.len);
   memcpy(clf01_ptr->day[3].working_day, db_clf01.working_day_4.arr, db_clf01.working_day_4.len);
   memcpy(clf01_ptr->day[3].profile_id, db_clf01.profile_id_4.arr, db_clf01.profile_id_4.len);
   memcpy(clf01_ptr->day[4].working_day, db_clf01.working_day_5.arr, db_clf01.working_day_5.len);
   memcpy(clf01_ptr->day[4].profile_id, db_clf01.profile_id_5.arr, db_clf01.profile_id_5.len);
   memcpy(clf01_ptr->day[5].working_day, db_clf01.working_day_6.arr, db_clf01.working_day_6.len);
   memcpy(clf01_ptr->day[5].profile_id, db_clf01.profile_id_6.arr, db_clf01.profile_id_6.len);
   memcpy(clf01_ptr->day[6].working_day, db_clf01.working_day_7.arr, db_clf01.working_day_7.len);
   memcpy(clf01_ptr->day[6].profile_id, db_clf01.profile_id_7.arr, db_clf01.profile_id_7.len);
   memcpy(clf01_ptr->day[7].working_day, db_clf01.working_day_8.arr, db_clf01.working_day_8.len);
   memcpy(clf01_ptr->day[7].profile_id, db_clf01.profile_id_8.arr, db_clf01.profile_id_8.len);
   memcpy(clf01_ptr->day[8].working_day, db_clf01.working_day_9.arr, db_clf01.working_day_9.len);
   memcpy(clf01_ptr->day[8].profile_id, db_clf01.profile_id_9.arr, db_clf01.profile_id_9.len);
   memcpy(clf01_ptr->day[9].working_day, db_clf01.working_day_10.arr, db_clf01.working_day_10.len);
   memcpy(clf01_ptr->day[9].profile_id, db_clf01.profile_id_10.arr, db_clf01.profile_id_10.len);
   memcpy(clf01_ptr->day[10].working_day, db_clf01.working_day_11.arr, db_clf01.working_day_11.len);
   memcpy(clf01_ptr->day[10].profile_id, db_clf01.profile_id_11.arr, db_clf01.profile_id_11.len);
   memcpy(clf01_ptr->day[11].working_day, db_clf01.working_day_12.arr, db_clf01.working_day_12.len);
   memcpy(clf01_ptr->day[11].profile_id, db_clf01.profile_id_12.arr, db_clf01.profile_id_12.len);
   memcpy(clf01_ptr->day[12].working_day, db_clf01.working_day_13.arr, db_clf01.working_day_13.len);
   memcpy(clf01_ptr->day[12].profile_id, db_clf01.profile_id_13.arr, db_clf01.profile_id_13.len);
   memcpy(clf01_ptr->day[13].working_day, db_clf01.working_day_14.arr, db_clf01.working_day_14.len);
   memcpy(clf01_ptr->day[13].profile_id, db_clf01.profile_id_14.arr, db_clf01.profile_id_14.len);
   memcpy(clf01_ptr->day[14].working_day, db_clf01.working_day_15.arr, db_clf01.working_day_15.len);
   memcpy(clf01_ptr->day[14].profile_id, db_clf01.profile_id_15.arr, db_clf01.profile_id_15.len);
   memcpy(clf01_ptr->day[15].working_day, db_clf01.working_day_16.arr, db_clf01.working_day_16.len);
   memcpy(clf01_ptr->day[15].profile_id, db_clf01.profile_id_16.arr, db_clf01.profile_id_16.len);
   memcpy(clf01_ptr->day[16].working_day, db_clf01.working_day_17.arr, db_clf01.working_day_17.len);
   memcpy(clf01_ptr->day[16].profile_id, db_clf01.profile_id_17.arr, db_clf01.profile_id_17.len);
   memcpy(clf01_ptr->day[17].working_day, db_clf01.working_day_18.arr, db_clf01.working_day_18.len);
   memcpy(clf01_ptr->day[17].profile_id, db_clf01.profile_id_18.arr, db_clf01.profile_id_18.len);
   memcpy(clf01_ptr->day[18].working_day, db_clf01.working_day_19.arr, db_clf01.working_day_19.len);
   memcpy(clf01_ptr->day[18].profile_id, db_clf01.profile_id_19.arr, db_clf01.profile_id_19.len);
   memcpy(clf01_ptr->day[19].working_day, db_clf01.working_day_20.arr, db_clf01.working_day_20.len);
   memcpy(clf01_ptr->day[19].profile_id, db_clf01.profile_id_20.arr, db_clf01.profile_id_20.len);
   memcpy(clf01_ptr->day[20].working_day, db_clf01.working_day_21.arr, db_clf01.working_day_21.len);
   memcpy(clf01_ptr->day[20].profile_id, db_clf01.profile_id_21.arr, db_clf01.profile_id_21.len);
   memcpy(clf01_ptr->day[21].working_day, db_clf01.working_day_22.arr, db_clf01.working_day_22.len);
   memcpy(clf01_ptr->day[21].profile_id, db_clf01.profile_id_22.arr, db_clf01.profile_id_22.len);
   memcpy(clf01_ptr->day[22].working_day, db_clf01.working_day_23.arr, db_clf01.working_day_23.len);
   memcpy(clf01_ptr->day[22].profile_id, db_clf01.profile_id_23.arr, db_clf01.profile_id_23.len);
   memcpy(clf01_ptr->day[23].working_day, db_clf01.working_day_24.arr, db_clf01.working_day_24.len);
   memcpy(clf01_ptr->day[23].profile_id, db_clf01.profile_id_24.arr, db_clf01.profile_id_24.len);
   memcpy(clf01_ptr->day[24].working_day, db_clf01.working_day_25.arr, db_clf01.working_day_25.len);
   memcpy(clf01_ptr->day[24].profile_id, db_clf01.profile_id_25.arr, db_clf01.profile_id_25.len);
   memcpy(clf01_ptr->day[25].working_day, db_clf01.working_day_26.arr, db_clf01.working_day_26.len);
   memcpy(clf01_ptr->day[25].profile_id, db_clf01.profile_id_26.arr, db_clf01.profile_id_26.len);
   memcpy(clf01_ptr->day[26].working_day, db_clf01.working_day_27.arr, db_clf01.working_day_27.len);
   memcpy(clf01_ptr->day[26].profile_id, db_clf01.profile_id_27.arr, db_clf01.profile_id_27.len);
   memcpy(clf01_ptr->day[27].working_day, db_clf01.working_day_28.arr, db_clf01.working_day_28.len);
   memcpy(clf01_ptr->day[27].profile_id, db_clf01.profile_id_28.arr, db_clf01.profile_id_28.len);
   memcpy(clf01_ptr->day[28].working_day, db_clf01.working_day_29.arr, db_clf01.working_day_29.len);
   memcpy(clf01_ptr->day[28].profile_id, db_clf01.profile_id_29.arr, db_clf01.profile_id_29.len);
   memcpy(clf01_ptr->day[29].working_day, db_clf01.working_day_30.arr, db_clf01.working_day_30.len);
   memcpy(clf01_ptr->day[29].profile_id, db_clf01.profile_id_30.arr, db_clf01.profile_id_30.len);
   memcpy(clf01_ptr->day[30].working_day, db_clf01.working_day_31.arr, db_clf01.working_day_31.len);
   memcpy(clf01_ptr->day[30].profile_id, db_clf01.profile_id_31.arr, db_clf01.profile_id_31.len);
}



/*************************************************************************************/

/*************************************************************************************/

void db_to_faf01 ( pFAF01 faf01_ptr )

{

   memset(faf01_ptr, 0, sizeof(FAF01));

   memcpy(faf01_ptr->primary_key.caf_profile_id, db_faf01.caf_profile_id.arr, db_faf01.caf_profile_id.len);

   memcpy(faf01_ptr->velocity[0].amount, db_faf01.velocity1_amount.arr, db_faf01.velocity1_amount.len);

   memcpy(faf01_ptr->velocity[0].from_time, db_faf01.velocity1_from_time.arr, db_faf01.velocity1_from_time.len);

   memcpy(faf01_ptr->velocity[0].to_time, db_faf01.velocity1_to_time.arr, db_faf01.velocity1_to_time.len);

   memcpy(faf01_ptr->velocity[1].amount, db_faf01.velocity2_amount.arr, db_faf01.velocity2_amount.len);

   memcpy(faf01_ptr->velocity[1].from_time, db_faf01.velocity2_from_time.arr, db_faf01.velocity2_from_time.len);

   memcpy(faf01_ptr->velocity[1].to_time, db_faf01.velocity2_to_time.arr, db_faf01.velocity2_to_time.len);

   memcpy(faf01_ptr->velocity[2].amount, db_faf01.velocity3_amount.arr, db_faf01.velocity3_amount.len);

   memcpy(faf01_ptr->velocity[2].from_time, db_faf01.velocity3_from_time.arr, db_faf01.velocity3_from_time.len);

   memcpy(faf01_ptr->velocity[2].to_time, db_faf01.velocity3_to_time.arr, db_faf01.velocity3_to_time.len);

   memcpy(faf01_ptr->velocity[3].amount, db_faf01.velocity4_amount.arr, db_faf01.velocity4_amount.len);

   memcpy(faf01_ptr->velocity[3].from_time, db_faf01.velocity4_from_time.arr, db_faf01.velocity4_from_time.len);

   memcpy(faf01_ptr->velocity[3].to_time, db_faf01.velocity4_to_time.arr, db_faf01.velocity4_to_time.len);

   memcpy(faf01_ptr->velocity[4].amount, db_faf01.velocity5_amount.arr, db_faf01.velocity5_amount.len);

   memcpy(faf01_ptr->velocity[4].from_time, db_faf01.velocity5_from_time.arr, db_faf01.velocity5_from_time.len);

   memcpy(faf01_ptr->velocity[4].to_time, db_faf01.velocity5_to_time.arr, db_faf01.velocity5_to_time.len);

   memcpy(faf01_ptr->velocity[5].amount, db_faf01.velocity6_amount.arr, db_faf01.velocity6_amount.len);

   memcpy(faf01_ptr->velocity[5].from_time, db_faf01.velocity6_from_time.arr, db_faf01.velocity6_from_time.len);

   memcpy(faf01_ptr->velocity[5].to_time, db_faf01.velocity6_to_time.arr, db_faf01.velocity6_to_time.len);

   memcpy(faf01_ptr->velocity[6].amount, db_faf01.velocity7_amount.arr, db_faf01.velocity7_amount.len);

   memcpy(faf01_ptr->velocity[6].from_time, db_faf01.velocity7_from_time.arr, db_faf01.velocity7_from_time.len);

   memcpy(faf01_ptr->velocity[6].to_time, db_faf01.velocity7_to_time.arr, db_faf01.velocity7_to_time.len);

   memcpy(faf01_ptr->velocity[7].amount, db_faf01.velocity8_amount.arr, db_faf01.velocity8_amount.len);

   memcpy(faf01_ptr->velocity[7].from_time, db_faf01.velocity8_from_time.arr, db_faf01.velocity8_from_time.len);

   memcpy(faf01_ptr->velocity[7].to_time, db_faf01.velocity8_to_time.arr, db_faf01.velocity8_to_time.len);

   memcpy(faf01_ptr->velocity[8].amount, db_faf01.velocity9_amount.arr, db_faf01.velocity9_amount.len);

   memcpy(faf01_ptr->velocity[8].from_time, db_faf01.velocity9_from_time.arr, db_faf01.velocity9_from_time.len);

   memcpy(faf01_ptr->velocity[8].to_time, db_faf01.velocity9_to_time.arr, db_faf01.velocity9_to_time.len);

   memcpy(faf01_ptr->velocity[9].amount, db_faf01.velocity10_amount.arr, db_faf01.velocity10_amount.len);

   memcpy(faf01_ptr->velocity[9].from_time, db_faf01.velocity10_from_time.arr, db_faf01.velocity10_from_time.len);

   memcpy(faf01_ptr->velocity[9].to_time, db_faf01.velocity10_to_time.arr, db_faf01.velocity10_to_time.len);



}





/*************************************************************************************/

/*************************************************************************************/

void db_to_ccf10 ( pCCF10 ccf10_ptr )

{

   memset(ccf10_ptr, 0, sizeof(CCF10));

   memcpy(ccf10_ptr->primary_key.card_nbr, db_ccf10.card_nbr.arr, db_ccf10.card_nbr.len);

   memcpy(ccf10_ptr->primary_key.retrieval_ref_num, db_ccf10.retrieval_ref_num.arr, db_ccf10.retrieval_ref_num.len);

   memcpy(ccf10_ptr->primary_acct_nbr, db_ccf10.primary_acct_nbr.arr, db_ccf10.primary_acct_nbr.len);

   memcpy(ccf10_ptr->processing_code, db_ccf10.processing_code.arr, db_ccf10.processing_code.len);

   memcpy(ccf10_ptr->tran_amount, db_ccf10.tran_amount.arr, db_ccf10.tran_amount.len);

   memcpy(ccf10_ptr->response_code, db_ccf10.response_code.arr, db_ccf10.response_code.len);

   memcpy(ccf10_ptr->auth_number, db_ccf10.auth_number.arr, db_ccf10.auth_number.len);

   memcpy(ccf10_ptr->tran_date, db_ccf10.tran_date.arr, db_ccf10.tran_date.len);

   memcpy(ccf10_ptr->tran_time, db_ccf10.tran_time.arr, db_ccf10.tran_time.len);



}

/*************************************************************************************/

/*************************************************************************************/

void db_to_mcf03p ( pMCF03P mcf03p_ptr )

{

   memset(mcf03p_ptr, 0, sizeof(MCF03P));

   memcpy(mcf03p_ptr->merch_id, db_mcf03p.merch_id.arr, db_mcf03p.merch_id.len);

   memcpy(mcf03p_ptr->system_date, db_mcf03p.system_date.arr, db_mcf03p.system_date.len);

   memcpy(mcf03p_ptr->total_amount, db_mcf03p.total_amount.arr, db_mcf03p.total_amount.len);

   memcpy(mcf03p_ptr->total_transcn_cnt, db_mcf03p.total_transcn_cnt.arr, db_mcf03p.total_transcn_cnt.len);

   memcpy(mcf03p_ptr->total_aprvd_amount, db_mcf03p.total_aprvd_amount.arr, db_mcf03p.total_aprvd_amount.len);

   memcpy(mcf03p_ptr->total_reversed_amount, db_mcf03p.total_reversed_amount.arr, db_mcf03p.total_reversed_amount.len);

   memcpy(mcf03p_ptr->total_aprvd_transcn_count, db_mcf03p.total_aprvd_transcn_count.arr, db_mcf03p.total_aprvd_transcn_count.len);

   memcpy(mcf03p_ptr->total_reversed_transcn_count, db_mcf03p.total_reversed_transcn_count.arr, db_mcf03p.total_reversed_transcn_count.len);

   memcpy(mcf03p_ptr->field_1, db_mcf03p.field_1.arr, db_mcf03p.field_1.len);
   memcpy(mcf03p_ptr->field_2, db_mcf03p.field_2.arr, db_mcf03p.field_2.len);
   memcpy(mcf03p_ptr->field_3, db_mcf03p.field_3.arr, db_mcf03p.field_3.len);
   memcpy(mcf03p_ptr->field_4, db_mcf03p.field_4.arr, db_mcf03p.field_4.len);
   memcpy(mcf03p_ptr->field_5, db_mcf03p.field_5.arr, db_mcf03p.field_5.len);
   memcpy(mcf03p_ptr->field_6, db_mcf03p.field_6.arr, db_mcf03p.field_6.len);
   memcpy(mcf03p_ptr->field_7, db_mcf03p.field_7.arr, db_mcf03p.field_7.len);
   memcpy(mcf03p_ptr->field_8, db_mcf03p.field_8.arr, db_mcf03p.field_8.len);
   memcpy(mcf03p_ptr->field_9, db_mcf03p.field_9.arr, db_mcf03p.field_9.len);
   memcpy(mcf03p_ptr->field_10, db_mcf03p.field_10.arr, db_mcf03p.field_10.len);

}


/******************************************************************************/
/******************************************************************************/
void db_to_bon01 ( pBON01 bon01_ptr )
{
   memset(bon01_ptr, 0, sizeof(BON01));
   memcpy(bon01_ptr->minimum_amount, db_bon01.minimum_amount.arr, db_bon01.minimum_amount.len);
   memcpy(bon01_ptr->program_start_date, db_bon01.program_start_date.arr, db_bon01.program_start_date.len);
   memcpy(bon01_ptr->program_end_date, db_bon01.program_end_date.arr, db_bon01.program_end_date.len);
   memcpy(bon01_ptr->transaction_threshold, db_bon01.transaction_threshold.arr, db_bon01.transaction_threshold.len);
   memcpy(bon01_ptr->transaction_counter, db_bon01.transaction_counter.arr, db_bon01.transaction_counter.len);
   memcpy(bon01_ptr->maximum_reward, db_bon01.maximum_reward.arr, db_bon01.maximum_reward.len);
   memcpy(bon01_ptr->response_message , db_bon01.response_message.arr, db_bon01.response_message.len);
}

/******************************************************************************/
/******************************************************************************/
void db_to_bon02( pBON02 bon02_ptr )
{
   memset(bon02_ptr, 0, sizeof(BON02));
   memcpy(bon02_ptr->cash_id,            db_bon02.cash_id.arr,            db_bon02.cash_id.len            );
   memcpy(bon02_ptr->tag_id,             db_bon02.tag_id.arr,             db_bon02.tag_id.len             );
   memcpy(bon02_ptr->cash_desc,          db_bon02.cash_desc.arr,          db_bon02.cash_desc.len          );
   memcpy(bon02_ptr->program_start_date, db_bon02.program_start_date.arr, db_bon02.program_start_date.len );
   memcpy(bon02_ptr->program_end_date,   db_bon02.program_end_date.arr,   db_bon02.program_end_date.len   );
   memcpy(bon02_ptr->tran_threshold,     db_bon02.tran_threshold.arr,     db_bon02.tran_threshold.len     );
   memcpy(bon02_ptr->tran_ctr,           db_bon02.tran_ctr.arr,           db_bon02.tran_ctr.len           );
   memcpy(bon02_ptr->time_period,        db_bon02.time_period.arr,        db_bon02.time_period.len        );
   memcpy(bon02_ptr->max_period_winners, db_bon02.max_period_winners.arr, db_bon02.max_period_winners.len );
   memcpy(bon02_ptr->period_win_ctr,     db_bon02.period_win_ctr.arr,     db_bon02.period_win_ctr.len     );
   memcpy(bon02_ptr->max_program_winners,db_bon02.max_program_winners.arr,db_bon02.max_program_winners.len);
   memcpy(bon02_ptr->program_win_ctr,    db_bon02.program_win_ctr.arr,    db_bon02.program_win_ctr.len    );

   memcpy(bon02_ptr->amount_range[0].low_amount,    db_bon02.low_amount1.arr,   db_bon02.low_amount1.len   );
   memcpy(bon02_ptr->amount_range[0].high_amount,   db_bon02.high_amount1.arr,  db_bon02.high_amount1.len  );
   memcpy(bon02_ptr->amount_range[0].resp_text,     db_bon02.resp_text1.arr,    db_bon02.resp_text1.len    );
   memcpy(bon02_ptr->amount_range[0].win_type,      db_bon02.win_type1.arr,     db_bon02.win_type1.len     );
   memcpy(bon02_ptr->amount_range[0].reward_amount, db_bon02.reward_amount1.arr,db_bon02.reward_amount1.len);

   memcpy(bon02_ptr->amount_range[1].low_amount,    db_bon02.low_amount2.arr,   db_bon02.low_amount2.len   );
   memcpy(bon02_ptr->amount_range[1].high_amount,   db_bon02.high_amount2.arr,  db_bon02.high_amount2.len  );
   memcpy(bon02_ptr->amount_range[1].resp_text,     db_bon02.resp_text2.arr,    db_bon02.resp_text2.len    );
   memcpy(bon02_ptr->amount_range[1].win_type,      db_bon02.win_type2.arr,     db_bon02.win_type2.len     );
   memcpy(bon02_ptr->amount_range[1].reward_amount, db_bon02.reward_amount2.arr,db_bon02.reward_amount2.len);

   memcpy(bon02_ptr->amount_range[2].low_amount,    db_bon02.low_amount3.arr,   db_bon02.low_amount3.len   );
   memcpy(bon02_ptr->amount_range[2].high_amount,   db_bon02.high_amount3.arr,  db_bon02.high_amount3.len  );
   memcpy(bon02_ptr->amount_range[2].resp_text,     db_bon02.resp_text3.arr,    db_bon02.resp_text3.len    );
   memcpy(bon02_ptr->amount_range[2].win_type,      db_bon02.win_type3.arr,     db_bon02.win_type3.len     );
   memcpy(bon02_ptr->amount_range[2].reward_amount, db_bon02.reward_amount3.arr,db_bon02.reward_amount3.len);

   memcpy(bon02_ptr->amount_range[3].low_amount,    db_bon02.low_amount4.arr,   db_bon02.low_amount4.len   );
   memcpy(bon02_ptr->amount_range[3].high_amount,   db_bon02.high_amount4.arr,  db_bon02.high_amount4.len  );
   memcpy(bon02_ptr->amount_range[3].resp_text,     db_bon02.resp_text4.arr,    db_bon02.resp_text4.len    );
   memcpy(bon02_ptr->amount_range[3].win_type,      db_bon02.win_type4.arr,     db_bon02.win_type4.len     );
   memcpy(bon02_ptr->amount_range[3].reward_amount, db_bon02.reward_amount4.arr,db_bon02.reward_amount4.len);

   memcpy(bon02_ptr->amount_range[4].low_amount,    db_bon02.low_amount5.arr,   db_bon02.low_amount5.len   );
   memcpy(bon02_ptr->amount_range[4].high_amount,   db_bon02.high_amount5.arr,  db_bon02.high_amount5.len  );
   memcpy(bon02_ptr->amount_range[4].resp_text,     db_bon02.resp_text5.arr,    db_bon02.resp_text5.len    );
   memcpy(bon02_ptr->amount_range[4].win_type,      db_bon02.win_type5.arr,     db_bon02.win_type5.len     );
   memcpy(bon02_ptr->amount_range[4].reward_amount, db_bon02.reward_amount5.arr,db_bon02.reward_amount5.len);

   memcpy(bon02_ptr->multi_winner_text,     db_bon02.multi_winner_text.arr,     db_bon02.multi_winner_text.len     );
   memcpy(bon02_ptr->multi_winners_allowed, db_bon02.multi_winners_allowed.arr, db_bon02.multi_winners_allowed.len );
}


void db_to_uag01 (pUAG01 uag01_ptr)
{
   memset(uag01_ptr, 0, sizeof(UAG01)) ;
   memcpy(uag01_ptr->auth_id, db_uag01.auth_id.arr, db_uag01.auth_id.len) ;
}



/*************************************************************************************/

/*************************************************************************************/

void db_to_ccf01 ( pCCF01 ccf01_ptr )

{

   memset(ccf01_ptr, 0, sizeof(CCF01));

   memcpy(ccf01_ptr->primary_key.card_type, db_ccf01.card_type.arr, db_ccf01.card_type.len);

   memcpy(ccf01_ptr->primary_key.card_nbr, db_ccf01.card_nbr.arr, db_ccf01.card_nbr.len);

   memcpy(ccf01_ptr->primary_acct_nbr, db_ccf01.primary_acct_nbr.arr, db_ccf01.primary_acct_nbr.len);

   memcpy(ccf01_ptr->name_dba, db_ccf01.name_dba.arr, db_ccf01.name_dba.len);

   memcpy(ccf01_ptr->address1, db_ccf01.address1.arr, db_ccf01.address1.len);

   memcpy(ccf01_ptr->address2, db_ccf01.address2.arr, db_ccf01.address2.len);

   memcpy(ccf01_ptr->city, db_ccf01.city.arr, db_ccf01.city.len);

   memcpy(ccf01_ptr->state, db_ccf01.state.arr, db_ccf01.state.len);

   memcpy(ccf01_ptr->zip_code, db_ccf01.zip_code.arr, db_ccf01.zip_code.len);

   memcpy(ccf01_ptr->home_phone, db_ccf01.home_phone.arr, db_ccf01.home_phone.len);

   memcpy(ccf01_ptr->work_phone, db_ccf01.work_phone.arr, db_ccf01.work_phone.len);

   memcpy(ccf01_ptr->dob, db_ccf01.dob.arr, db_ccf01.dob.len);

   memcpy(ccf01_ptr->profession, db_ccf01.profession.arr, db_ccf01.profession.len);

   memcpy(ccf01_ptr->country, db_ccf01.country.arr, db_ccf01.country.len);

   memcpy(ccf01_ptr->nbr_cards, db_ccf01.nbr_cards.arr, db_ccf01.nbr_cards.len);

   memcpy(ccf01_ptr->status, db_ccf01.status.arr, db_ccf01.status.len);

   memcpy(ccf01_ptr->sex, db_ccf01.sex.arr, db_ccf01.sex.len);

   memcpy(ccf01_ptr->mother_maiden_name, db_ccf01.mother_maiden_name.arr, db_ccf01.mother_maiden_name.len);

   memcpy(ccf01_ptr->membership_id, db_ccf01.membership_id.arr, db_ccf01.membership_id.len);

   memcpy(ccf01_ptr->cardholder_id, db_ccf01.cardholder_id.arr, db_ccf01.cardholder_id.len);

   memcpy(ccf01_ptr->block_status, db_ccf01.block_status.arr, db_ccf01.block_status.len);

   memcpy(ccf01_ptr->specialty_code, db_ccf01.specialty_code.arr, db_ccf01.specialty_code.len);

   memcpy(ccf01_ptr->vip_acct_code, db_ccf01.vip_acct_code.arr, db_ccf01.vip_acct_code.len);

}







/*************************************************************************************/

/*************************************************************************************/

void db_to_acf01 ( pACF01 acf01_ptr )

{

   memset(acf01_ptr, 0, sizeof(ACF01));

   memcpy(acf01_ptr->primary_key.account_type, db_acf01.account_type.arr, db_acf01.account_type.len);

   memcpy(acf01_ptr->primary_key.account_nbr, db_acf01.account_nbr.arr, db_acf01.account_nbr.len);

   memcpy(acf01_ptr->status, db_acf01.status.arr, db_acf01.status.len);

   memcpy(acf01_ptr->date_added, db_acf01.date_added.arr, db_acf01.date_added.len);

   memcpy(acf01_ptr->maint_date, db_acf01.maint_date.arr, db_acf01.maint_date.len);

   memcpy(acf01_ptr->changed_by, db_acf01.changed_by.arr, db_acf01.changed_by.len);

   memcpy(acf01_ptr->credit_limit, db_acf01.credit_limit.arr, db_acf01.credit_limit.len);

   memcpy(acf01_ptr->available, db_acf01.available.arr, db_acf01.available.len);

   memcpy(acf01_ptr->outstanding, db_acf01.outstanding.arr, db_acf01.outstanding.len);

   memcpy(acf01_ptr->ledger_balance, db_acf01.ledger_balance.arr, db_acf01.ledger_balance.len);

   memcpy(acf01_ptr->cash_limit, db_acf01.cash_limit.arr, db_acf01.cash_limit.len);

   memcpy(acf01_ptr->cash_available, db_acf01.cash_available.arr, db_acf01.cash_available.len);

   memcpy(acf01_ptr->cash_outstanding, db_acf01.cash_outstanding.arr, db_acf01.cash_outstanding.len);



}

void db_to_ccl01 ( pCCL01 ccl01_ptr )
{

	memset(ccl01_ptr, 0, sizeof(CCL01));
	
	memcpy(ccl01_ptr->currency_value, db_ccl01.currency_value.arr, db_ccl01.currency_value.len );
	
	memcpy(ccl01_ptr->currency_code, db_ccl01.currency_code.arr, db_ccl01.currency_code.len);
	
	memcpy(ccl01_ptr->currency_decimal_places, db_ccl01.currency_decimal_places.arr, db_ccl01.currency_decimal_places.len);
	
	memcpy(ccl01_ptr->currency_name, db_ccl01.currency_name.arr, db_ccl01.currency_name.len);
	
	memcpy(ccl01_ptr->future_field1, db_ccl01.future_field1.arr, db_ccl01.future_field1.len);
	
	memcpy(ccl01_ptr->future_field2, db_ccl01.future_field2.arr, db_ccl01.future_field2.len);
		
	memcpy(ccl01_ptr->future_field3, db_ccl01.future_field3.arr, db_ccl01.future_field3.len);
		
}

/*************************************************************************************/

/*************************************************************************************/

void db_to_bdkkey01 ( pBDKKEY01 bdkkey01_ptr )
{

	memset(bdkkey01_ptr, 0, sizeof(BDKKEY01));
	
	memcpy(bdkkey01_ptr->card_brand, db_bdkkey01.card_brand.arr, db_bdkkey01.card_brand.len );
	
	memcpy(bdkkey01_ptr->bdk_key, db_bdkkey01.bdk_key.arr, db_bdkkey01.bdk_key.len);

	memcpy(bdkkey01_ptr->future_field1, db_bdkkey01.future_field1.arr, db_bdkkey01.future_field1.len);
	
	memcpy(bdkkey01_ptr->future_field2, db_bdkkey01.future_field2.arr, db_bdkkey01.future_field2.len);
		
	memcpy(bdkkey01_ptr->future_field3, db_bdkkey01.future_field3.arr, db_bdkkey01.future_field3.len);
		
}


/*************************************************************************************/

/*************************************************************************************/

void db_to_caf01_keyblock01 ( pCAF01_KEYBLOCK caf01_keyblock01_ptr )
{

	memset(caf01_keyblock01_ptr, 0, sizeof(CAF01_KEYBLOCK));
	
	memcpy(caf01_keyblock01_ptr->primary_key.Caf_Profile_id, db_caf01_keyblock01.Caf_Profile_id.arr, db_caf01_keyblock01.Caf_Profile_id.len );
	
	memcpy(caf01_keyblock01_ptr->primary_key.Type, db_caf01_keyblock01.Type.arr, db_caf01_keyblock01.Type.len);
	
	
	memcpy(caf01_keyblock01_ptr->Cvk_Mag_Keyblock, db_caf01_keyblock01.Cvk_Mag_Keyblock.arr, db_caf01_keyblock01.Cvk_Mag_Keyblock.len);
	
	memcpy(caf01_keyblock01_ptr->Cvk_Acq_3DS_Keyblock, db_caf01_keyblock01.Cvk_Acq_3DS_Keyblock.arr, db_caf01_keyblock01.Cvk_Acq_3DS_Keyblock.len);
	
	memcpy(caf01_keyblock01_ptr->Cvk_Pin_Verification, db_caf01_keyblock01.Cvk_Pin_Verification.arr, db_caf01_keyblock01.Cvk_Pin_Verification.len);
	
	memcpy(caf01_keyblock01_ptr->Cvk_Mkac_Keyblock, db_caf01_keyblock01.Cvk_Mkac_Keyblock.arr, db_caf01_keyblock01.Cvk_Mkac_Keyblock.len);
	
	memcpy(caf01_keyblock01_ptr->Csck_Iss_3ds_Keyblock, db_caf01_keyblock01.Csck_Iss_3ds_Keyblock.arr, db_caf01_keyblock01.Csck_Iss_3ds_Keyblock.len);
	
	memcpy(caf01_keyblock01_ptr->Csck_Mag_Keyblock, db_caf01_keyblock01.Csck_Mag_Keyblock.arr, db_caf01_keyblock01.Csck_Mag_Keyblock.len);
	
	memcpy(caf01_keyblock01_ptr->Dci_3ds_Keyblock, db_caf01_keyblock01.Dci_3ds_Keyblock.arr, db_caf01_keyblock01.Dci_3ds_Keyblock.len);
	
	memcpy(caf01_keyblock01_ptr->Cvk_3ds_Cak_Keyblock, db_caf01_keyblock01.Cvk_3ds_Cak_Keyblock.arr, db_caf01_keyblock01.Cvk_3ds_Cak_Keyblock.len);
	
	
	memcpy(caf01_keyblock01_ptr->Future_Field1, db_caf01_keyblock01.Future_Field1.arr, db_caf01_keyblock01.Future_Field1.len);
	
	memcpy(caf01_keyblock01_ptr->Future_Field2, db_caf01_keyblock01.Future_Field2.arr, db_caf01_keyblock01.Future_Field2.len);
		
	memcpy(caf01_keyblock01_ptr->Future_Field3, db_caf01_keyblock01.Future_Field3.arr, db_caf01_keyblock01.Future_Field3.len);
	
	memcpy(caf01_keyblock01_ptr->Future_Field4, db_caf01_keyblock01.Future_Field4.arr, db_caf01_keyblock01.Future_Field4.len);
		
	memcpy(caf01_keyblock01_ptr->Future_Field5, db_caf01_keyblock01.Future_Field4.arr, db_caf01_keyblock01.Future_Field5.len);
		
}
/*************************************************************************************/

/*************************************************************************************/

void db_to_crf01 ( pCRF01 crf01_ptr )

{

   memset(crf01_ptr, 0, sizeof(CRF01));

   memcpy(crf01_ptr->primary_key.currency_code, db_crf01.currency_code.arr, db_crf01.currency_code.len);



   memcpy(crf01_ptr->conversion_rate, db_crf01.conversion_rate.arr, db_crf01.conversion_rate.len);

   memcpy(crf01_ptr->currency_name, db_crf01.currency_name.arr, db_crf01.currency_name.len);



}



/*************************************************************************************/

/*************************************************************************************/

void db_to_csf01 ( pCSF01 csf01_ptr )

{

   memset(csf01_ptr, 0, sizeof(CSF01));

   memcpy(csf01_ptr->primary_key.status, db_csf01.status.arr, db_csf01.status.len);



   memcpy(csf01_ptr->description, db_csf01.description.arr, db_csf01.description.len);

   memcpy(csf01_ptr->iso_resp_code, db_csf01.iso_resp_code.arr, db_csf01.iso_resp_code.len);
   
   memcpy(csf01_ptr->resp_text_msg, db_csf01.resp_text_msg.arr, db_csf01.resp_text_msg.len);
   
   memcpy(csf01_ptr->mac_value, db_csf01.mac_value.arr, db_csf01.mac_value.len);

}



/*************************************************************************************/

/*************************************************************************************/

void db_to_paf01 ( pPAF01 paf01_ptr )

{

   memset(paf01_ptr, 0, sizeof(PAF01));

   memcpy(paf01_ptr->primary_key.primary_acct_nbr, db_paf01.primary_acct_nbr.arr, db_paf01.primary_acct_nbr.len);



   memcpy(paf01_ptr->name_dba, db_paf01.name_dba.arr, db_paf01.name_dba.len);

   memcpy(paf01_ptr->address1, db_paf01.address1.arr, db_paf01.address1.len);

   memcpy(paf01_ptr->address2, db_paf01.address2.arr, db_paf01.address2.len);

   memcpy(paf01_ptr->city, db_paf01.city.arr, db_paf01.city.len);

   memcpy(paf01_ptr->state, db_paf01.state.arr, db_paf01.state.len);

   memcpy(paf01_ptr->zip_code, db_paf01.zip_code.arr, db_paf01.zip_code.len);

   memcpy(paf01_ptr->home_phone, db_paf01.home_phone.arr, db_paf01.home_phone.len);

   memcpy(paf01_ptr->work_phone, db_paf01.work_phone.arr, db_paf01.work_phone.len);

   memcpy(paf01_ptr->status, db_paf01.status.arr, db_paf01.status.len);

   memcpy(paf01_ptr->caf_profile_id, db_paf01.caf_profile_id.arr, db_paf01.caf_profile_id.len);

   memcpy(paf01_ptr->type, db_paf01.type.arr, db_paf01.type.len);

   memcpy(paf01_ptr->block_status, db_paf01.block_status.arr, db_paf01.block_status.len);

   memcpy(paf01_ptr->corp_acct_nbr, db_paf01.corp_acct_nbr.arr, db_paf01.corp_acct_nbr.len);

   memcpy(paf01_ptr->account_name, db_paf01.account_name.arr, db_paf01.account_name.len);

   memcpy(paf01_ptr->past_due_amount, db_paf01.past_due_amount.arr, db_paf01.past_due_amount.len);

   memcpy(paf01_ptr->min_pay_code, db_paf01.min_pay_code.arr, db_paf01.min_pay_code.len);
 	
   memcpy(paf01_ptr->Credit_limit, db_paf01.Credit_limit.arr, db_paf01.Credit_limit.len);
   
   memcpy(paf01_ptr->Custr_nbr, db_paf01.Custr_nbr.arr, db_paf01.Custr_nbr.len);

   memcpy(paf01_ptr->APP_Source, db_paf01.APP_Source.arr, db_paf01.APP_Source.len);

   memcpy(paf01_ptr->COMP_Name, db_paf01.COMP_Name.arr, db_paf01.COMP_Name.len);
}

     



/*************************************************************************************/

/*************************************************************************************/

void db_to_def01 ( pDEF01 def01_ptr )

{

   memset(def01_ptr, 0, sizeof(DEF01));

   

   memcpy(def01_ptr->primary_key.organization_id, db_def01.organization_id.arr, db_def01.organization_id.len);

   memcpy(def01_ptr->primary_key.merchant_id, db_def01.merchant_id.arr, db_def01.merchant_id.len);

   memcpy(def01_ptr->primary_key.term_length, db_def01.term_length.arr, db_def01.term_length.len);

   memcpy(def01_ptr->factor, db_def01.factor.arr, db_def01.factor.len);

   memcpy(def01_ptr->deferred_min_amount, db_def01.deferred_min_amount.arr, db_def01.deferred_min_amount.len);

   memcpy(def01_ptr->deferred_max_amount, db_def01.deferred_max_amount.arr, db_def01.deferred_max_amount.len);

}





/*************************************************************************************/

/*************************************************************************************/

void db_to_ccf03p ( pCCF03 ccf03p_ptr )

{

   memset(ccf03p_ptr, 0, sizeof(CCF03));

   memcpy(ccf03p_ptr->primary_key.card_type, db_ccf03p.card_type.arr, db_ccf03p.card_type.len);

   memcpy(ccf03p_ptr->primary_key.card_nbr, db_ccf03p.card_nbr.arr, db_ccf03p.card_nbr.len);



   memcpy(ccf03p_ptr->primary_acct_nbr, db_ccf03p.primary_acct_nbr.arr, db_ccf03p.primary_acct_nbr.len);

   memcpy(ccf03p_ptr->daily_amt_usage, db_ccf03p.daily_amt_usage.arr, db_ccf03p.daily_amt_usage.len);

   memcpy(ccf03p_ptr->julian_date, db_ccf03p.julian_date.arr, db_ccf03p.julian_date.len);

   memcpy(ccf03p_ptr->peso_julian_date, db_ccf03p.peso_julian_date.arr, db_ccf03p.peso_julian_date.len);

   memcpy(ccf03p_ptr->dollar_julian_date, db_ccf03p.dollar_julian_date.arr, db_ccf03p.dollar_julian_date.len);

   memcpy(ccf03p_ptr->peso_usage[0].nbr_usage, db_ccf03p.peso_usage1_nbr_usage.arr, db_ccf03p.peso_usage1_nbr_usage.len);

   memcpy(ccf03p_ptr->peso_usage[0].amt_usage, db_ccf03p.peso_usage1_amt_usage.arr, db_ccf03p.peso_usage1_amt_usage.len);

   memcpy(ccf03p_ptr->peso_usage[1].nbr_usage, db_ccf03p.peso_usage2_nbr_usage.arr, db_ccf03p.peso_usage2_nbr_usage.len);

   memcpy(ccf03p_ptr->peso_usage[1].amt_usage, db_ccf03p.peso_usage2_amt_usage.arr, db_ccf03p.peso_usage2_amt_usage.len);

   memcpy(ccf03p_ptr->peso_usage[2].nbr_usage, db_ccf03p.peso_usage3_nbr_usage.arr, db_ccf03p.peso_usage3_nbr_usage.len);

   memcpy(ccf03p_ptr->peso_usage[2].amt_usage, db_ccf03p.peso_usage3_amt_usage.arr, db_ccf03p.peso_usage3_amt_usage.len);

   memcpy(ccf03p_ptr->peso_usage[3].nbr_usage, db_ccf03p.peso_usage4_nbr_usage.arr, db_ccf03p.peso_usage4_nbr_usage.len);

   memcpy(ccf03p_ptr->peso_usage[3].amt_usage, db_ccf03p.peso_usage4_amt_usage.arr, db_ccf03p.peso_usage4_amt_usage.len);

   memcpy(ccf03p_ptr->peso_usage[4].nbr_usage, db_ccf03p.peso_usage5_nbr_usage.arr, db_ccf03p.peso_usage5_nbr_usage.len);

   memcpy(ccf03p_ptr->peso_usage[4].amt_usage, db_ccf03p.peso_usage5_amt_usage.arr, db_ccf03p.peso_usage5_amt_usage.len);

   memcpy(ccf03p_ptr->peso_usage[5].nbr_usage, db_ccf03p.peso_usage6_nbr_usage.arr, db_ccf03p.peso_usage6_nbr_usage.len);

   memcpy(ccf03p_ptr->peso_usage[5].amt_usage, db_ccf03p.peso_usage6_amt_usage.arr, db_ccf03p.peso_usage6_amt_usage.len);

   memcpy(ccf03p_ptr->peso_usage[6].nbr_usage, db_ccf03p.peso_usage7_nbr_usage.arr, db_ccf03p.peso_usage7_nbr_usage.len);

   memcpy(ccf03p_ptr->peso_usage[6].amt_usage, db_ccf03p.peso_usage7_amt_usage.arr, db_ccf03p.peso_usage7_amt_usage.len);

   memcpy(ccf03p_ptr->peso_usage[7].nbr_usage, db_ccf03p.peso_usage8_nbr_usage.arr, db_ccf03p.peso_usage8_nbr_usage.len);

   memcpy(ccf03p_ptr->peso_usage[7].amt_usage, db_ccf03p.peso_usage8_amt_usage.arr, db_ccf03p.peso_usage8_amt_usage.len);

   memcpy(ccf03p_ptr->peso_usage[8].nbr_usage, db_ccf03p.peso_usage9_nbr_usage.arr, db_ccf03p.peso_usage9_nbr_usage.len);

   memcpy(ccf03p_ptr->peso_usage[8].amt_usage, db_ccf03p.peso_usage9_amt_usage.arr, db_ccf03p.peso_usage9_amt_usage.len);

   memcpy(ccf03p_ptr->peso_usage[9].nbr_usage, db_ccf03p.peso_usage10_nbr_usage.arr, db_ccf03p.peso_usage10_nbr_usage.len);

   memcpy(ccf03p_ptr->peso_usage[9].amt_usage, db_ccf03p.peso_usage10_amt_usage.arr, db_ccf03p.peso_usage10_amt_usage.len);

   memcpy(ccf03p_ptr->peso_usage[10].nbr_usage, db_ccf03p.peso_usage11_nbr_usage.arr, db_ccf03p.peso_usage11_nbr_usage.len);

   memcpy(ccf03p_ptr->peso_usage[10].amt_usage, db_ccf03p.peso_usage11_amt_usage.arr, db_ccf03p.peso_usage11_amt_usage.len);

   memcpy(ccf03p_ptr->peso_usage[11].nbr_usage, db_ccf03p.peso_usage12_nbr_usage.arr, db_ccf03p.peso_usage12_nbr_usage.len);

   memcpy(ccf03p_ptr->peso_usage[11].amt_usage, db_ccf03p.peso_usage12_amt_usage.arr, db_ccf03p.peso_usage12_amt_usage.len);

   memcpy(ccf03p_ptr->peso_usage[12].nbr_usage, db_ccf03p.peso_usage13_nbr_usage.arr, db_ccf03p.peso_usage13_nbr_usage.len);

   memcpy(ccf03p_ptr->peso_usage[12].amt_usage, db_ccf03p.peso_usage13_amt_usage.arr, db_ccf03p.peso_usage13_amt_usage.len);

   memcpy(ccf03p_ptr->peso_usage[13].nbr_usage, db_ccf03p.peso_usage14_nbr_usage.arr, db_ccf03p.peso_usage14_nbr_usage.len);

   memcpy(ccf03p_ptr->peso_usage[13].amt_usage, db_ccf03p.peso_usage14_amt_usage.arr, db_ccf03p.peso_usage14_amt_usage.len);



   memcpy(ccf03p_ptr->dollar_usage[0].nbr_usage, db_ccf03p.dollar_usage1_nbr_usage.arr, db_ccf03p.dollar_usage1_nbr_usage.len);

   memcpy(ccf03p_ptr->dollar_usage[0].amt_usage, db_ccf03p.dollar_usage1_amt_usage.arr, db_ccf03p.dollar_usage1_amt_usage.len);

   memcpy(ccf03p_ptr->dollar_usage[1].nbr_usage, db_ccf03p.dollar_usage2_nbr_usage.arr, db_ccf03p.dollar_usage2_nbr_usage.len);

   memcpy(ccf03p_ptr->dollar_usage[1].amt_usage, db_ccf03p.dollar_usage2_amt_usage.arr, db_ccf03p.dollar_usage2_amt_usage.len);

   memcpy(ccf03p_ptr->dollar_usage[2].nbr_usage, db_ccf03p.dollar_usage3_nbr_usage.arr, db_ccf03p.dollar_usage3_nbr_usage.len);

   memcpy(ccf03p_ptr->dollar_usage[2].amt_usage, db_ccf03p.dollar_usage3_amt_usage.arr, db_ccf03p.dollar_usage3_amt_usage.len);

   memcpy(ccf03p_ptr->dollar_usage[3].nbr_usage, db_ccf03p.dollar_usage4_nbr_usage.arr, db_ccf03p.dollar_usage4_nbr_usage.len);

   memcpy(ccf03p_ptr->dollar_usage[3].amt_usage, db_ccf03p.dollar_usage4_amt_usage.arr, db_ccf03p.dollar_usage4_amt_usage.len);

   memcpy(ccf03p_ptr->dollar_usage[4].nbr_usage, db_ccf03p.dollar_usage5_nbr_usage.arr, db_ccf03p.dollar_usage5_nbr_usage.len);

   memcpy(ccf03p_ptr->dollar_usage[4].amt_usage, db_ccf03p.dollar_usage5_amt_usage.arr, db_ccf03p.dollar_usage5_amt_usage.len);

   memcpy(ccf03p_ptr->dollar_usage[5].nbr_usage, db_ccf03p.dollar_usage6_nbr_usage.arr, db_ccf03p.dollar_usage6_nbr_usage.len);

   memcpy(ccf03p_ptr->dollar_usage[5].amt_usage, db_ccf03p.dollar_usage6_amt_usage.arr, db_ccf03p.dollar_usage6_amt_usage.len);

   memcpy(ccf03p_ptr->dollar_usage[6].nbr_usage, db_ccf03p.dollar_usage7_nbr_usage.arr, db_ccf03p.dollar_usage7_nbr_usage.len);

   memcpy(ccf03p_ptr->dollar_usage[6].amt_usage, db_ccf03p.dollar_usage7_amt_usage.arr, db_ccf03p.dollar_usage7_amt_usage.len);

   memcpy(ccf03p_ptr->dollar_usage[7].nbr_usage, db_ccf03p.dollar_usage8_nbr_usage.arr, db_ccf03p.dollar_usage8_nbr_usage.len);

   memcpy(ccf03p_ptr->dollar_usage[7].amt_usage, db_ccf03p.dollar_usage8_amt_usage.arr, db_ccf03p.dollar_usage8_amt_usage.len);

   memcpy(ccf03p_ptr->dollar_usage[8].nbr_usage, db_ccf03p.dollar_usage9_nbr_usage.arr, db_ccf03p.dollar_usage9_nbr_usage.len);

   memcpy(ccf03p_ptr->dollar_usage[8].amt_usage, db_ccf03p.dollar_usage9_amt_usage.arr, db_ccf03p.dollar_usage9_amt_usage.len);

   memcpy(ccf03p_ptr->dollar_usage[9].nbr_usage, db_ccf03p.dollar_usage10_nbr_usage.arr, db_ccf03p.dollar_usage10_nbr_usage.len);

   memcpy(ccf03p_ptr->dollar_usage[9].amt_usage, db_ccf03p.dollar_usage10_amt_usage.arr, db_ccf03p.dollar_usage10_amt_usage.len);

   memcpy(ccf03p_ptr->dollar_usage[10].nbr_usage, db_ccf03p.dollar_usage11_nbr_usage.arr, db_ccf03p.dollar_usage11_nbr_usage.len);

   memcpy(ccf03p_ptr->dollar_usage[10].amt_usage, db_ccf03p.dollar_usage11_amt_usage.arr, db_ccf03p.dollar_usage11_amt_usage.len);

   memcpy(ccf03p_ptr->dollar_usage[11].nbr_usage, db_ccf03p.dollar_usage12_nbr_usage.arr, db_ccf03p.dollar_usage12_nbr_usage.len);

   memcpy(ccf03p_ptr->dollar_usage[11].amt_usage, db_ccf03p.dollar_usage12_amt_usage.arr, db_ccf03p.dollar_usage12_amt_usage.len);

   memcpy(ccf03p_ptr->dollar_usage[12].nbr_usage, db_ccf03p.dollar_usage13_nbr_usage.arr, db_ccf03p.dollar_usage13_nbr_usage.len);

   memcpy(ccf03p_ptr->dollar_usage[12].amt_usage, db_ccf03p.dollar_usage13_amt_usage.arr, db_ccf03p.dollar_usage13_amt_usage.len);

   memcpy(ccf03p_ptr->dollar_usage[13].nbr_usage, db_ccf03p.dollar_usage14_nbr_usage.arr, db_ccf03p.dollar_usage14_nbr_usage.len);

   memcpy(ccf03p_ptr->dollar_usage[13].amt_usage, db_ccf03p.dollar_usage14_amt_usage.arr, db_ccf03p.dollar_usage14_amt_usage.len);



   memcpy(ccf03p_ptr->failed_pin_attempts, db_ccf03p.failed_pin_attempts.arr, db_ccf03p.failed_pin_attempts.len);

   memcpy(ccf03p_ptr->date_added, db_ccf03p.date_added.arr, db_ccf03p.date_added.len);

   memcpy(ccf03p_ptr->last_maint, db_ccf03p.last_maint.arr, db_ccf03p.last_maint.len);

   memcpy(ccf03p_ptr->status, db_ccf03p.status.arr, db_ccf03p.status.len);

   memcpy(ccf03p_ptr->mcc[0].category_code, db_ccf03p.mcc1_code.arr, db_ccf03p.mcc1_code.len);

   memcpy(ccf03p_ptr->mcc[0].usage, db_ccf03p.mcc1_usage.arr, db_ccf03p.mcc1_usage.len);

   memcpy(ccf03p_ptr->mcc[1].category_code, db_ccf03p.mcc2_code.arr, db_ccf03p.mcc2_code.len);

   memcpy(ccf03p_ptr->mcc[1].usage, db_ccf03p.mcc2_usage.arr, db_ccf03p.mcc2_usage.len);

   memcpy(ccf03p_ptr->mcc[2].category_code, db_ccf03p.mcc3_code.arr, db_ccf03p.mcc3_code.len);

   memcpy(ccf03p_ptr->mcc[2].usage, db_ccf03p.mcc3_usage.arr, db_ccf03p.mcc3_usage.len);

   memcpy(ccf03p_ptr->mcc[3].category_code, db_ccf03p.mcc4_code.arr, db_ccf03p.mcc4_code.len);

   memcpy(ccf03p_ptr->mcc[3].usage, db_ccf03p.mcc4_usage.arr, db_ccf03p.mcc4_usage.len);

   memcpy(ccf03p_ptr->mcc[4].category_code, db_ccf03p.mcc5_code.arr, db_ccf03p.mcc5_code.len);

   memcpy(ccf03p_ptr->mcc[4].usage, db_ccf03p.mcc5_usage.arr, db_ccf03p.mcc5_usage.len);

   memcpy(ccf03p_ptr->mcc[5].category_code, db_ccf03p.mcc6_code.arr, db_ccf03p.mcc6_code.len);

   memcpy(ccf03p_ptr->mcc[5].usage, db_ccf03p.mcc6_usage.arr, db_ccf03p.mcc6_usage.len);

   memcpy(ccf03p_ptr->mcc[6].category_code, db_ccf03p.mcc7_code.arr, db_ccf03p.mcc7_code.len);

   memcpy(ccf03p_ptr->mcc[6].usage, db_ccf03p.mcc7_usage.arr, db_ccf03p.mcc7_usage.len);

   memcpy(ccf03p_ptr->mcc[7].category_code, db_ccf03p.mcc8_code.arr, db_ccf03p.mcc8_code.len);

   memcpy(ccf03p_ptr->mcc[7].usage, db_ccf03p.mcc8_usage.arr, db_ccf03p.mcc8_usage.len);

   memcpy(ccf03p_ptr->mcc[8].category_code, db_ccf03p.mcc9_code.arr, db_ccf03p.mcc9_code.len);

   memcpy(ccf03p_ptr->mcc[8].usage, db_ccf03p.mcc9_usage.arr, db_ccf03p.mcc9_usage.len);

   memcpy(ccf03p_ptr->mcc[9].category_code, db_ccf03p.mcc10_code.arr, db_ccf03p.mcc10_code.len);

   memcpy(ccf03p_ptr->mcc[9].usage, db_ccf03p.mcc10_usage.arr, db_ccf03p.mcc10_usage.len);

   memcpy(ccf03p_ptr->mcc[10].category_code, db_ccf03p.mcc11_code.arr, db_ccf03p.mcc11_code.len);

   memcpy(ccf03p_ptr->mcc[10].usage, db_ccf03p.mcc11_usage.arr, db_ccf03p.mcc11_usage.len);

   memcpy(ccf03p_ptr->mcc[11].category_code, db_ccf03p.mcc12_code.arr, db_ccf03p.mcc12_code.len);

   memcpy(ccf03p_ptr->mcc[11].usage, db_ccf03p.mcc12_usage.arr, db_ccf03p.mcc12_usage.len);

   memcpy(ccf03p_ptr->mcc[12].category_code, db_ccf03p.mcc13_code.arr, db_ccf03p.mcc13_code.len);

   memcpy(ccf03p_ptr->mcc[12].usage, db_ccf03p.mcc13_usage.arr, db_ccf03p.mcc13_usage.len);

   memcpy(ccf03p_ptr->mcc[13].category_code, db_ccf03p.mcc14_code.arr, db_ccf03p.mcc14_code.len);

   memcpy(ccf03p_ptr->mcc[13].usage, db_ccf03p.mcc14_usage.arr, db_ccf03p.mcc14_usage.len);

   memcpy(ccf03p_ptr->mcc[14].category_code, db_ccf03p.mcc15_code.arr, db_ccf03p.mcc15_code.len);

   memcpy(ccf03p_ptr->mcc[14].usage, db_ccf03p.mcc15_usage.arr, db_ccf03p.mcc15_usage.len);

   memcpy(ccf03p_ptr->mcc[15].category_code, db_ccf03p.mcc16_code.arr, db_ccf03p.mcc16_code.len);

   memcpy(ccf03p_ptr->mcc[15].usage, db_ccf03p.mcc16_usage.arr, db_ccf03p.mcc16_usage.len);

   memcpy(ccf03p_ptr->mcc[16].category_code, db_ccf03p.mcc17_code.arr, db_ccf03p.mcc17_code.len);

   memcpy(ccf03p_ptr->mcc[16].usage, db_ccf03p.mcc17_usage.arr, db_ccf03p.mcc17_usage.len);

   memcpy(ccf03p_ptr->mcc[17].category_code, db_ccf03p.mcc18_code.arr, db_ccf03p.mcc18_code.len);

   memcpy(ccf03p_ptr->mcc[17].usage, db_ccf03p.mcc18_usage.arr, db_ccf03p.mcc18_usage.len);

   memcpy(ccf03p_ptr->mcc[18].category_code, db_ccf03p.mcc19_code.arr, db_ccf03p.mcc19_code.len);

   memcpy(ccf03p_ptr->mcc[18].usage, db_ccf03p.mcc19_usage.arr, db_ccf03p.mcc19_usage.len);

   memcpy(ccf03p_ptr->mcc[19].category_code, db_ccf03p.mcc20_code.arr, db_ccf03p.mcc20_code.len);

   memcpy(ccf03p_ptr->mcc[19].usage, db_ccf03p.mcc20_usage.arr, db_ccf03p.mcc20_usage.len);

   memcpy(ccf03p_ptr->repeat[0].merchant_id, db_ccf03p.repeat1_merchant_id.arr, db_ccf03p.repeat1_merchant_id.len);

   memcpy(ccf03p_ptr->repeat[0].nbr_uses, db_ccf03p.repeat1_nbr_uses.arr, db_ccf03p.repeat1_nbr_uses.len);

   memcpy(ccf03p_ptr->repeat[1].merchant_id, db_ccf03p.repeat2_merchant_id.arr, db_ccf03p.repeat2_merchant_id.len);

   memcpy(ccf03p_ptr->repeat[1].nbr_uses, db_ccf03p.repeat2_nbr_uses.arr, db_ccf03p.repeat2_nbr_uses.len);

   memcpy(ccf03p_ptr->repeat[2].merchant_id, db_ccf03p.repeat3_merchant_id.arr, db_ccf03p.repeat3_merchant_id.len);

   memcpy(ccf03p_ptr->repeat[2].nbr_uses, db_ccf03p.repeat3_nbr_uses.arr, db_ccf03p.repeat3_nbr_uses.len);

   memcpy(ccf03p_ptr->repeat[3].merchant_id, db_ccf03p.repeat4_merchant_id.arr, db_ccf03p.repeat4_merchant_id.len);

   memcpy(ccf03p_ptr->repeat[3].nbr_uses, db_ccf03p.repeat4_nbr_uses.arr, db_ccf03p.repeat4_nbr_uses.len);

   memcpy(ccf03p_ptr->repeat[4].merchant_id, db_ccf03p.repeat5_merchant_id.arr, db_ccf03p.repeat5_merchant_id.len);

   memcpy(ccf03p_ptr->repeat[4].nbr_uses, db_ccf03p.repeat5_nbr_uses.arr, db_ccf03p.repeat5_nbr_uses.len);

   memcpy(ccf03p_ptr->repeat[5].merchant_id, db_ccf03p.repeat6_merchant_id.arr, db_ccf03p.repeat6_merchant_id.len);

   memcpy(ccf03p_ptr->repeat[5].nbr_uses, db_ccf03p.repeat6_nbr_uses.arr, db_ccf03p.repeat6_nbr_uses.len);

   memcpy(ccf03p_ptr->repeat[6].merchant_id, db_ccf03p.repeat7_merchant_id.arr, db_ccf03p.repeat7_merchant_id.len);

   memcpy(ccf03p_ptr->repeat[6].nbr_uses, db_ccf03p.repeat7_nbr_uses.arr, db_ccf03p.repeat7_nbr_uses.len);

   memcpy(ccf03p_ptr->repeat[7].merchant_id, db_ccf03p.repeat8_merchant_id.arr, db_ccf03p.repeat8_merchant_id.len);

   memcpy(ccf03p_ptr->repeat[7].nbr_uses, db_ccf03p.repeat8_nbr_uses.arr, db_ccf03p.repeat8_nbr_uses.len);

   memcpy(ccf03p_ptr->repeat[8].merchant_id, db_ccf03p.repeat9_merchant_id.arr, db_ccf03p.repeat9_merchant_id.len);

   memcpy(ccf03p_ptr->repeat[8].nbr_uses, db_ccf03p.repeat9_nbr_uses.arr, db_ccf03p.repeat9_nbr_uses.len);

   memcpy(ccf03p_ptr->repeat[9].merchant_id, db_ccf03p.repeat10_merchant_id.arr, db_ccf03p.repeat10_merchant_id.len);

   memcpy(ccf03p_ptr->repeat[9].nbr_uses, db_ccf03p.repeat10_nbr_uses.arr, db_ccf03p.repeat10_nbr_uses.len);

   memcpy(ccf03p_ptr->repeat[10].merchant_id, db_ccf03p.repeat11_merchant_id.arr, db_ccf03p.repeat11_merchant_id.len);

   memcpy(ccf03p_ptr->repeat[10].nbr_uses, db_ccf03p.repeat11_nbr_uses.arr, db_ccf03p.repeat11_nbr_uses.len);

   memcpy(ccf03p_ptr->repeat[11].merchant_id, db_ccf03p.repeat12_merchant_id.arr, db_ccf03p.repeat11_merchant_id.len);

   memcpy(ccf03p_ptr->repeat[11].nbr_uses, db_ccf03p.repeat12_nbr_uses.arr, db_ccf03p.repeat11_nbr_uses.len);

   memcpy(ccf03p_ptr->repeat[12].merchant_id, db_ccf03p.repeat13_merchant_id.arr, db_ccf03p.repeat11_merchant_id.len);

   memcpy(ccf03p_ptr->repeat[12].nbr_uses, db_ccf03p.repeat13_nbr_uses.arr, db_ccf03p.repeat11_nbr_uses.len);

   memcpy(ccf03p_ptr->repeat[13].merchant_id, db_ccf03p.repeat14_merchant_id.arr, db_ccf03p.repeat11_merchant_id.len);

   memcpy(ccf03p_ptr->repeat[13].nbr_uses, db_ccf03p.repeat14_nbr_uses.arr, db_ccf03p.repeat11_nbr_uses.len);

   memcpy(ccf03p_ptr->repeat[14].merchant_id, db_ccf03p.repeat15_merchant_id.arr, db_ccf03p.repeat11_merchant_id.len);

   memcpy(ccf03p_ptr->repeat[14].nbr_uses, db_ccf03p.repeat15_nbr_uses.arr, db_ccf03p.repeat11_nbr_uses.len);

   memcpy(ccf03p_ptr->repeat[15].merchant_id, db_ccf03p.repeat16_merchant_id.arr, db_ccf03p.repeat11_merchant_id.len);

   memcpy(ccf03p_ptr->repeat[15].nbr_uses, db_ccf03p.repeat16_nbr_uses.arr, db_ccf03p.repeat11_nbr_uses.len);

   memcpy(ccf03p_ptr->repeat[16].merchant_id, db_ccf03p.repeat17_merchant_id.arr, db_ccf03p.repeat11_merchant_id.len);

   memcpy(ccf03p_ptr->repeat[16].nbr_uses, db_ccf03p.repeat17_nbr_uses.arr, db_ccf03p.repeat11_nbr_uses.len);

   memcpy(ccf03p_ptr->repeat[17].merchant_id, db_ccf03p.repeat18_merchant_id.arr, db_ccf03p.repeat11_merchant_id.len);

   memcpy(ccf03p_ptr->repeat[17].nbr_uses, db_ccf03p.repeat18_nbr_uses.arr, db_ccf03p.repeat11_nbr_uses.len);

   memcpy(ccf03p_ptr->repeat[18].merchant_id, db_ccf03p.repeat19_merchant_id.arr, db_ccf03p.repeat11_merchant_id.len);

   memcpy(ccf03p_ptr->repeat[18].nbr_uses, db_ccf03p.repeat19_nbr_uses.arr, db_ccf03p.repeat11_nbr_uses.len);

   memcpy(ccf03p_ptr->repeat[19].merchant_id, db_ccf03p.repeat20_merchant_id.arr, db_ccf03p.repeat11_merchant_id.len);

   memcpy(ccf03p_ptr->repeat[19].nbr_uses, db_ccf03p.repeat20_nbr_uses.arr, db_ccf03p.repeat11_nbr_uses.len);

}

/*************************************************************************************/

/*************************************************************************************/

void db_to_offus_velocity ( pOffus_velocity offus_velocity_ptr )

{

   memset(offus_velocity_ptr, 0, sizeof(Offus_velocity));

   memcpy(offus_velocity_ptr->primary_key.card_type, db_offus_velocity.card_type.arr, db_offus_velocity.card_type.len);
   memcpy(offus_velocity_ptr->primary_key.card_nbr, db_offus_velocity.card_nbr.arr, db_offus_velocity.card_nbr.len);

   memcpy(offus_velocity_ptr->primary_acct_nbr, db_offus_velocity.primary_acct_nbr.arr, db_offus_velocity.primary_acct_nbr.len);
   memcpy(offus_velocity_ptr->daily_amt_usage, db_offus_velocity.daily_amt_usage.arr, db_offus_velocity.daily_amt_usage.len);
   memcpy(offus_velocity_ptr->julian_date, db_offus_velocity.julian_date.arr, db_offus_velocity.julian_date.len);
   memcpy(offus_velocity_ptr->peso_julian_date, db_offus_velocity.peso_julian_date.arr, db_offus_velocity.peso_julian_date.len);
   memcpy(offus_velocity_ptr->dollar_julian_date, db_offus_velocity.dollar_julian_date.arr, db_offus_velocity.dollar_julian_date.len);
   memcpy(offus_velocity_ptr->peso_usage[0].nbr_usage, db_offus_velocity.peso_usage1_nbr_usage.arr, db_offus_velocity.peso_usage1_nbr_usage.len);
   memcpy(offus_velocity_ptr->peso_usage[0].amt_usage, db_offus_velocity.peso_usage1_amt_usage.arr, db_offus_velocity.peso_usage1_amt_usage.len);
   memcpy(offus_velocity_ptr->peso_usage[1].nbr_usage, db_offus_velocity.peso_usage2_nbr_usage.arr, db_offus_velocity.peso_usage2_nbr_usage.len);
   memcpy(offus_velocity_ptr->peso_usage[1].amt_usage, db_offus_velocity.peso_usage2_amt_usage.arr, db_offus_velocity.peso_usage2_amt_usage.len);
   memcpy(offus_velocity_ptr->peso_usage[2].nbr_usage, db_offus_velocity.peso_usage3_nbr_usage.arr, db_offus_velocity.peso_usage3_nbr_usage.len);
   memcpy(offus_velocity_ptr->peso_usage[2].amt_usage, db_offus_velocity.peso_usage3_amt_usage.arr, db_offus_velocity.peso_usage3_amt_usage.len);
   memcpy(offus_velocity_ptr->peso_usage[3].nbr_usage, db_offus_velocity.peso_usage4_nbr_usage.arr, db_offus_velocity.peso_usage4_nbr_usage.len);
   memcpy(offus_velocity_ptr->peso_usage[3].amt_usage, db_offus_velocity.peso_usage4_amt_usage.arr, db_offus_velocity.peso_usage4_amt_usage.len);
   memcpy(offus_velocity_ptr->peso_usage[4].nbr_usage, db_offus_velocity.peso_usage5_nbr_usage.arr, db_offus_velocity.peso_usage5_nbr_usage.len);
   memcpy(offus_velocity_ptr->peso_usage[4].amt_usage, db_offus_velocity.peso_usage5_amt_usage.arr, db_offus_velocity.peso_usage5_amt_usage.len);
   memcpy(offus_velocity_ptr->peso_usage[5].nbr_usage, db_offus_velocity.peso_usage6_nbr_usage.arr, db_offus_velocity.peso_usage6_nbr_usage.len);
   memcpy(offus_velocity_ptr->peso_usage[5].amt_usage, db_offus_velocity.peso_usage6_amt_usage.arr, db_offus_velocity.peso_usage6_amt_usage.len);
   memcpy(offus_velocity_ptr->peso_usage[6].nbr_usage, db_offus_velocity.peso_usage7_nbr_usage.arr, db_offus_velocity.peso_usage7_nbr_usage.len);
   memcpy(offus_velocity_ptr->peso_usage[6].amt_usage, db_offus_velocity.peso_usage7_amt_usage.arr, db_offus_velocity.peso_usage7_amt_usage.len);
   memcpy(offus_velocity_ptr->peso_usage[7].nbr_usage, db_offus_velocity.peso_usage8_nbr_usage.arr, db_offus_velocity.peso_usage8_nbr_usage.len);
   memcpy(offus_velocity_ptr->peso_usage[7].amt_usage, db_offus_velocity.peso_usage8_amt_usage.arr, db_offus_velocity.peso_usage8_amt_usage.len);
   memcpy(offus_velocity_ptr->peso_usage[8].nbr_usage, db_offus_velocity.peso_usage9_nbr_usage.arr, db_offus_velocity.peso_usage9_nbr_usage.len);
   memcpy(offus_velocity_ptr->peso_usage[8].amt_usage, db_offus_velocity.peso_usage9_amt_usage.arr, db_offus_velocity.peso_usage9_amt_usage.len);
   memcpy(offus_velocity_ptr->peso_usage[9].nbr_usage, db_offus_velocity.peso_usage10_nbr_usage.arr, db_offus_velocity.peso_usage10_nbr_usage.len);
   memcpy(offus_velocity_ptr->peso_usage[9].amt_usage, db_offus_velocity.peso_usage10_amt_usage.arr, db_offus_velocity.peso_usage10_amt_usage.len);
   memcpy(offus_velocity_ptr->peso_usage[10].nbr_usage, db_offus_velocity.peso_usage11_nbr_usage.arr, db_offus_velocity.peso_usage11_nbr_usage.len);
   memcpy(offus_velocity_ptr->peso_usage[10].amt_usage, db_offus_velocity.peso_usage11_amt_usage.arr, db_offus_velocity.peso_usage11_amt_usage.len);
   memcpy(offus_velocity_ptr->peso_usage[11].nbr_usage, db_offus_velocity.peso_usage12_nbr_usage.arr, db_offus_velocity.peso_usage12_nbr_usage.len);
   memcpy(offus_velocity_ptr->peso_usage[11].amt_usage, db_offus_velocity.peso_usage12_amt_usage.arr, db_offus_velocity.peso_usage12_amt_usage.len);
   memcpy(offus_velocity_ptr->peso_usage[12].nbr_usage, db_offus_velocity.peso_usage13_nbr_usage.arr, db_offus_velocity.peso_usage13_nbr_usage.len);
   memcpy(offus_velocity_ptr->peso_usage[12].amt_usage, db_offus_velocity.peso_usage13_amt_usage.arr, db_offus_velocity.peso_usage13_amt_usage.len);
   memcpy(offus_velocity_ptr->peso_usage[13].nbr_usage, db_offus_velocity.peso_usage14_nbr_usage.arr, db_offus_velocity.peso_usage14_nbr_usage.len);
   memcpy(offus_velocity_ptr->peso_usage[13].amt_usage, db_offus_velocity.peso_usage14_amt_usage.arr, db_offus_velocity.peso_usage14_amt_usage.len);

   memcpy(offus_velocity_ptr->dollar_usage[0].nbr_usage, db_offus_velocity.dollar_usage1_nbr_usage.arr, db_offus_velocity.dollar_usage1_nbr_usage.len);
   memcpy(offus_velocity_ptr->dollar_usage[0].amt_usage, db_offus_velocity.dollar_usage1_amt_usage.arr, db_offus_velocity.dollar_usage1_amt_usage.len);
   memcpy(offus_velocity_ptr->dollar_usage[1].nbr_usage, db_offus_velocity.dollar_usage2_nbr_usage.arr, db_offus_velocity.dollar_usage2_nbr_usage.len);
   memcpy(offus_velocity_ptr->dollar_usage[1].amt_usage, db_offus_velocity.dollar_usage2_amt_usage.arr, db_offus_velocity.dollar_usage2_amt_usage.len);
   memcpy(offus_velocity_ptr->dollar_usage[2].nbr_usage, db_offus_velocity.dollar_usage3_nbr_usage.arr, db_offus_velocity.dollar_usage3_nbr_usage.len);
   memcpy(offus_velocity_ptr->dollar_usage[2].amt_usage, db_offus_velocity.dollar_usage3_amt_usage.arr, db_offus_velocity.dollar_usage3_amt_usage.len);
   memcpy(offus_velocity_ptr->dollar_usage[3].nbr_usage, db_offus_velocity.dollar_usage4_nbr_usage.arr, db_offus_velocity.dollar_usage4_nbr_usage.len);
   memcpy(offus_velocity_ptr->dollar_usage[3].amt_usage, db_offus_velocity.dollar_usage4_amt_usage.arr, db_offus_velocity.dollar_usage4_amt_usage.len);
   memcpy(offus_velocity_ptr->dollar_usage[4].nbr_usage, db_offus_velocity.dollar_usage5_nbr_usage.arr, db_offus_velocity.dollar_usage5_nbr_usage.len);
   memcpy(offus_velocity_ptr->dollar_usage[4].amt_usage, db_offus_velocity.dollar_usage5_amt_usage.arr, db_offus_velocity.dollar_usage5_amt_usage.len);
   memcpy(offus_velocity_ptr->dollar_usage[5].nbr_usage, db_offus_velocity.dollar_usage6_nbr_usage.arr, db_offus_velocity.dollar_usage6_nbr_usage.len);
   memcpy(offus_velocity_ptr->dollar_usage[5].amt_usage, db_offus_velocity.dollar_usage6_amt_usage.arr, db_offus_velocity.dollar_usage6_amt_usage.len);
   memcpy(offus_velocity_ptr->dollar_usage[6].nbr_usage, db_offus_velocity.dollar_usage7_nbr_usage.arr, db_offus_velocity.dollar_usage7_nbr_usage.len);
   memcpy(offus_velocity_ptr->dollar_usage[6].amt_usage, db_offus_velocity.dollar_usage7_amt_usage.arr, db_offus_velocity.dollar_usage7_amt_usage.len);
   memcpy(offus_velocity_ptr->dollar_usage[7].nbr_usage, db_offus_velocity.dollar_usage8_nbr_usage.arr, db_offus_velocity.dollar_usage8_nbr_usage.len);
   memcpy(offus_velocity_ptr->dollar_usage[7].amt_usage, db_offus_velocity.dollar_usage8_amt_usage.arr, db_offus_velocity.dollar_usage8_amt_usage.len);
   memcpy(offus_velocity_ptr->dollar_usage[8].nbr_usage, db_offus_velocity.dollar_usage9_nbr_usage.arr, db_offus_velocity.dollar_usage9_nbr_usage.len);
   memcpy(offus_velocity_ptr->dollar_usage[8].amt_usage, db_offus_velocity.dollar_usage9_amt_usage.arr, db_offus_velocity.dollar_usage9_amt_usage.len);
   memcpy(offus_velocity_ptr->dollar_usage[9].nbr_usage, db_offus_velocity.dollar_usage10_nbr_usage.arr, db_offus_velocity.dollar_usage10_nbr_usage.len);
   memcpy(offus_velocity_ptr->dollar_usage[9].amt_usage, db_offus_velocity.dollar_usage10_amt_usage.arr, db_offus_velocity.dollar_usage10_amt_usage.len);
   memcpy(offus_velocity_ptr->dollar_usage[10].nbr_usage, db_offus_velocity.dollar_usage11_nbr_usage.arr, db_offus_velocity.dollar_usage11_nbr_usage.len);
   memcpy(offus_velocity_ptr->dollar_usage[10].amt_usage, db_offus_velocity.dollar_usage11_amt_usage.arr, db_offus_velocity.dollar_usage11_amt_usage.len);
   memcpy(offus_velocity_ptr->dollar_usage[11].nbr_usage, db_offus_velocity.dollar_usage12_nbr_usage.arr, db_offus_velocity.dollar_usage12_nbr_usage.len);
   memcpy(offus_velocity_ptr->dollar_usage[11].amt_usage, db_offus_velocity.dollar_usage12_amt_usage.arr, db_offus_velocity.dollar_usage12_amt_usage.len);
   memcpy(offus_velocity_ptr->dollar_usage[12].nbr_usage, db_offus_velocity.dollar_usage13_nbr_usage.arr, db_offus_velocity.dollar_usage13_nbr_usage.len);
   memcpy(offus_velocity_ptr->dollar_usage[12].amt_usage, db_offus_velocity.dollar_usage13_amt_usage.arr, db_offus_velocity.dollar_usage13_amt_usage.len);
   memcpy(offus_velocity_ptr->dollar_usage[13].nbr_usage, db_offus_velocity.dollar_usage14_nbr_usage.arr, db_offus_velocity.dollar_usage14_nbr_usage.len);
   memcpy(offus_velocity_ptr->dollar_usage[13].amt_usage, db_offus_velocity.dollar_usage14_amt_usage.arr, db_offus_velocity.dollar_usage14_amt_usage.len);

   memcpy(offus_velocity_ptr->failed_pin_attempts, db_offus_velocity.failed_pin_attempts.arr, db_offus_velocity.failed_pin_attempts.len);
   memcpy(offus_velocity_ptr->date_added, db_offus_velocity.date_added.arr, db_offus_velocity.date_added.len);
   memcpy(offus_velocity_ptr->last_maint, db_offus_velocity.last_maint.arr, db_offus_velocity.last_maint.len);
   memcpy(offus_velocity_ptr->status, db_offus_velocity.status.arr, db_offus_velocity.status.len);
   memcpy(offus_velocity_ptr->mcc[0].category_code, db_offus_velocity.mcc1_code.arr, db_offus_velocity.mcc1_code.len);
   memcpy(offus_velocity_ptr->mcc[0].usage, db_offus_velocity.mcc1_usage.arr, db_offus_velocity.mcc1_usage.len);
   memcpy(offus_velocity_ptr->mcc[1].category_code, db_offus_velocity.mcc2_code.arr, db_offus_velocity.mcc2_code.len);
   memcpy(offus_velocity_ptr->mcc[1].usage, db_offus_velocity.mcc2_usage.arr, db_offus_velocity.mcc2_usage.len);
   memcpy(offus_velocity_ptr->mcc[2].category_code, db_offus_velocity.mcc3_code.arr, db_offus_velocity.mcc3_code.len);
   memcpy(offus_velocity_ptr->mcc[2].usage, db_offus_velocity.mcc3_usage.arr, db_offus_velocity.mcc3_usage.len);
   memcpy(offus_velocity_ptr->mcc[3].category_code, db_offus_velocity.mcc4_code.arr, db_offus_velocity.mcc4_code.len);
   memcpy(offus_velocity_ptr->mcc[3].usage, db_offus_velocity.mcc4_usage.arr, db_offus_velocity.mcc4_usage.len);
   memcpy(offus_velocity_ptr->mcc[4].category_code, db_offus_velocity.mcc5_code.arr, db_offus_velocity.mcc5_code.len);
   memcpy(offus_velocity_ptr->mcc[4].usage, db_offus_velocity.mcc5_usage.arr, db_offus_velocity.mcc5_usage.len);
   memcpy(offus_velocity_ptr->mcc[5].category_code, db_offus_velocity.mcc6_code.arr, db_offus_velocity.mcc6_code.len);
   memcpy(offus_velocity_ptr->mcc[5].usage, db_offus_velocity.mcc6_usage.arr, db_offus_velocity.mcc6_usage.len);
   memcpy(offus_velocity_ptr->mcc[6].category_code, db_offus_velocity.mcc7_code.arr, db_offus_velocity.mcc7_code.len);
   memcpy(offus_velocity_ptr->mcc[6].usage, db_offus_velocity.mcc7_usage.arr, db_offus_velocity.mcc7_usage.len);
   memcpy(offus_velocity_ptr->mcc[7].category_code, db_offus_velocity.mcc8_code.arr, db_offus_velocity.mcc8_code.len);
   memcpy(offus_velocity_ptr->mcc[7].usage, db_offus_velocity.mcc8_usage.arr, db_offus_velocity.mcc8_usage.len);
   memcpy(offus_velocity_ptr->mcc[8].category_code, db_offus_velocity.mcc9_code.arr, db_offus_velocity.mcc9_code.len);
   memcpy(offus_velocity_ptr->mcc[8].usage, db_offus_velocity.mcc9_usage.arr, db_offus_velocity.mcc9_usage.len);
   memcpy(offus_velocity_ptr->mcc[9].category_code, db_offus_velocity.mcc10_code.arr, db_offus_velocity.mcc10_code.len);
   memcpy(offus_velocity_ptr->mcc[9].usage, db_offus_velocity.mcc10_usage.arr, db_offus_velocity.mcc10_usage.len);
   memcpy(offus_velocity_ptr->mcc[10].category_code, db_offus_velocity.mcc11_code.arr, db_offus_velocity.mcc11_code.len);
   memcpy(offus_velocity_ptr->mcc[10].usage, db_offus_velocity.mcc11_usage.arr, db_offus_velocity.mcc11_usage.len);
   memcpy(offus_velocity_ptr->mcc[11].category_code, db_offus_velocity.mcc12_code.arr, db_offus_velocity.mcc12_code.len);
   memcpy(offus_velocity_ptr->mcc[11].usage, db_offus_velocity.mcc12_usage.arr, db_offus_velocity.mcc12_usage.len);
   memcpy(offus_velocity_ptr->mcc[12].category_code, db_offus_velocity.mcc13_code.arr, db_offus_velocity.mcc13_code.len);
   memcpy(offus_velocity_ptr->mcc[12].usage, db_offus_velocity.mcc13_usage.arr, db_offus_velocity.mcc13_usage.len);
   memcpy(offus_velocity_ptr->mcc[13].category_code, db_offus_velocity.mcc14_code.arr, db_offus_velocity.mcc14_code.len);
   memcpy(offus_velocity_ptr->mcc[13].usage, db_offus_velocity.mcc14_usage.arr, db_offus_velocity.mcc14_usage.len);
   memcpy(offus_velocity_ptr->mcc[14].category_code, db_offus_velocity.mcc15_code.arr, db_offus_velocity.mcc15_code.len);
   memcpy(offus_velocity_ptr->mcc[14].usage, db_offus_velocity.mcc15_usage.arr, db_offus_velocity.mcc15_usage.len);
   memcpy(offus_velocity_ptr->mcc[15].category_code, db_offus_velocity.mcc16_code.arr, db_offus_velocity.mcc16_code.len);
   memcpy(offus_velocity_ptr->mcc[15].usage, db_offus_velocity.mcc16_usage.arr, db_offus_velocity.mcc16_usage.len);
   memcpy(offus_velocity_ptr->mcc[16].category_code, db_offus_velocity.mcc17_code.arr, db_offus_velocity.mcc17_code.len);
   memcpy(offus_velocity_ptr->mcc[16].usage, db_offus_velocity.mcc17_usage.arr, db_offus_velocity.mcc17_usage.len);
   memcpy(offus_velocity_ptr->mcc[17].category_code, db_offus_velocity.mcc18_code.arr, db_offus_velocity.mcc18_code.len);
   memcpy(offus_velocity_ptr->mcc[17].usage, db_offus_velocity.mcc18_usage.arr, db_offus_velocity.mcc18_usage.len);
   memcpy(offus_velocity_ptr->mcc[18].category_code, db_offus_velocity.mcc19_code.arr, db_offus_velocity.mcc19_code.len);
   memcpy(offus_velocity_ptr->mcc[18].usage, db_offus_velocity.mcc19_usage.arr, db_offus_velocity.mcc19_usage.len);
   memcpy(offus_velocity_ptr->mcc[19].category_code, db_offus_velocity.mcc20_code.arr, db_offus_velocity.mcc20_code.len);
   memcpy(offus_velocity_ptr->mcc[19].usage, db_offus_velocity.mcc20_usage.arr, db_offus_velocity.mcc20_usage.len);
   memcpy(offus_velocity_ptr->repeat[0].merchant_id, db_offus_velocity.repeat1_merchant_id.arr, db_offus_velocity.repeat1_merchant_id.len);
   memcpy(offus_velocity_ptr->repeat[0].nbr_uses, db_offus_velocity.repeat1_nbr_uses.arr, db_offus_velocity.repeat1_nbr_uses.len);
   memcpy(offus_velocity_ptr->repeat[1].merchant_id, db_offus_velocity.repeat2_merchant_id.arr, db_offus_velocity.repeat2_merchant_id.len);
   memcpy(offus_velocity_ptr->repeat[1].nbr_uses, db_offus_velocity.repeat2_nbr_uses.arr, db_offus_velocity.repeat2_nbr_uses.len);
   memcpy(offus_velocity_ptr->repeat[2].merchant_id, db_offus_velocity.repeat3_merchant_id.arr, db_offus_velocity.repeat3_merchant_id.len);
   memcpy(offus_velocity_ptr->repeat[2].nbr_uses, db_offus_velocity.repeat3_nbr_uses.arr, db_offus_velocity.repeat3_nbr_uses.len);
   memcpy(offus_velocity_ptr->repeat[3].merchant_id, db_offus_velocity.repeat4_merchant_id.arr, db_offus_velocity.repeat4_merchant_id.len);
   memcpy(offus_velocity_ptr->repeat[3].nbr_uses, db_offus_velocity.repeat4_nbr_uses.arr, db_offus_velocity.repeat4_nbr_uses.len);
   memcpy(offus_velocity_ptr->repeat[4].merchant_id, db_offus_velocity.repeat5_merchant_id.arr, db_offus_velocity.repeat5_merchant_id.len);
   memcpy(offus_velocity_ptr->repeat[4].nbr_uses, db_offus_velocity.repeat5_nbr_uses.arr, db_offus_velocity.repeat5_nbr_uses.len);
   memcpy(offus_velocity_ptr->repeat[5].merchant_id, db_offus_velocity.repeat6_merchant_id.arr, db_offus_velocity.repeat6_merchant_id.len);
   memcpy(offus_velocity_ptr->repeat[5].nbr_uses, db_offus_velocity.repeat6_nbr_uses.arr, db_offus_velocity.repeat6_nbr_uses.len);
   memcpy(offus_velocity_ptr->repeat[6].merchant_id, db_offus_velocity.repeat7_merchant_id.arr, db_offus_velocity.repeat7_merchant_id.len);
   memcpy(offus_velocity_ptr->repeat[6].nbr_uses, db_offus_velocity.repeat7_nbr_uses.arr, db_offus_velocity.repeat7_nbr_uses.len);
   memcpy(offus_velocity_ptr->repeat[7].merchant_id, db_offus_velocity.repeat8_merchant_id.arr, db_offus_velocity.repeat8_merchant_id.len);
   memcpy(offus_velocity_ptr->repeat[7].nbr_uses, db_offus_velocity.repeat8_nbr_uses.arr, db_offus_velocity.repeat8_nbr_uses.len);
   memcpy(offus_velocity_ptr->repeat[8].merchant_id, db_offus_velocity.repeat9_merchant_id.arr, db_offus_velocity.repeat9_merchant_id.len);
   memcpy(offus_velocity_ptr->repeat[8].nbr_uses, db_offus_velocity.repeat9_nbr_uses.arr, db_offus_velocity.repeat9_nbr_uses.len);
   memcpy(offus_velocity_ptr->repeat[9].merchant_id, db_offus_velocity.repeat10_merchant_id.arr, db_offus_velocity.repeat10_merchant_id.len);
   memcpy(offus_velocity_ptr->repeat[9].nbr_uses, db_offus_velocity.repeat10_nbr_uses.arr, db_offus_velocity.repeat10_nbr_uses.len);
   memcpy(offus_velocity_ptr->repeat[10].merchant_id, db_offus_velocity.repeat11_merchant_id.arr, db_offus_velocity.repeat11_merchant_id.len);
   memcpy(offus_velocity_ptr->repeat[10].nbr_uses, db_offus_velocity.repeat11_nbr_uses.arr, db_offus_velocity.repeat11_nbr_uses.len);
   memcpy(offus_velocity_ptr->repeat[11].merchant_id, db_offus_velocity.repeat12_merchant_id.arr, db_offus_velocity.repeat11_merchant_id.len);
   memcpy(offus_velocity_ptr->repeat[11].nbr_uses, db_offus_velocity.repeat12_nbr_uses.arr, db_offus_velocity.repeat11_nbr_uses.len);
   memcpy(offus_velocity_ptr->repeat[12].merchant_id, db_offus_velocity.repeat13_merchant_id.arr, db_offus_velocity.repeat11_merchant_id.len);
   memcpy(offus_velocity_ptr->repeat[12].nbr_uses, db_offus_velocity.repeat13_nbr_uses.arr, db_offus_velocity.repeat11_nbr_uses.len);
   memcpy(offus_velocity_ptr->repeat[13].merchant_id, db_offus_velocity.repeat14_merchant_id.arr, db_offus_velocity.repeat11_merchant_id.len);
   memcpy(offus_velocity_ptr->repeat[13].nbr_uses, db_offus_velocity.repeat14_nbr_uses.arr, db_offus_velocity.repeat11_nbr_uses.len);
   memcpy(offus_velocity_ptr->repeat[14].merchant_id, db_offus_velocity.repeat15_merchant_id.arr, db_offus_velocity.repeat11_merchant_id.len);
   memcpy(offus_velocity_ptr->repeat[14].nbr_uses, db_offus_velocity.repeat15_nbr_uses.arr, db_offus_velocity.repeat11_nbr_uses.len);
   memcpy(offus_velocity_ptr->repeat[15].merchant_id, db_offus_velocity.repeat16_merchant_id.arr, db_offus_velocity.repeat11_merchant_id.len);
   memcpy(offus_velocity_ptr->repeat[15].nbr_uses, db_offus_velocity.repeat16_nbr_uses.arr, db_offus_velocity.repeat11_nbr_uses.len);
   memcpy(offus_velocity_ptr->repeat[16].merchant_id, db_offus_velocity.repeat17_merchant_id.arr, db_offus_velocity.repeat11_merchant_id.len);
   memcpy(offus_velocity_ptr->repeat[16].nbr_uses, db_offus_velocity.repeat17_nbr_uses.arr, db_offus_velocity.repeat11_nbr_uses.len);
   memcpy(offus_velocity_ptr->repeat[17].merchant_id, db_offus_velocity.repeat18_merchant_id.arr, db_offus_velocity.repeat11_merchant_id.len);
   memcpy(offus_velocity_ptr->repeat[17].nbr_uses, db_offus_velocity.repeat18_nbr_uses.arr, db_offus_velocity.repeat11_nbr_uses.len);
   memcpy(offus_velocity_ptr->repeat[18].merchant_id, db_offus_velocity.repeat19_merchant_id.arr, db_offus_velocity.repeat11_merchant_id.len);
   memcpy(offus_velocity_ptr->repeat[18].nbr_uses, db_offus_velocity.repeat19_nbr_uses.arr, db_offus_velocity.repeat11_nbr_uses.len);
   memcpy(offus_velocity_ptr->repeat[19].merchant_id, db_offus_velocity.repeat20_merchant_id.arr, db_offus_velocity.repeat11_merchant_id.len);
   memcpy(offus_velocity_ptr->repeat[19].nbr_uses, db_offus_velocity.repeat20_nbr_uses.arr, db_offus_velocity.repeat11_nbr_uses.len);

}





/*************************************************************************************/

/*************************************************************************************/

void db_to_mct01 ( pMCT01 mct01_ptr )

{

   memset(mct01_ptr, 0, sizeof(MCT01));

   memcpy(mct01_ptr->primary_key.card_type, db_mct01.card_type.arr, db_mct01.card_type.len);

   memcpy(mct01_ptr->primary_key.merchant_id, db_mct01.merchant_id.arr, db_mct01.merchant_id.len);

   memcpy(mct01_ptr->primary_key.organization_id, db_mct01.organization_id.arr, db_mct01.organization_id.len);

   memcpy(mct01_ptr->acquirer_id, db_mct01.acquirer_id.arr, db_mct01.acquirer_id.len);

   memcpy(mct01_ptr->corporate_id, db_mct01.corporate_id.arr, db_mct01.corporate_id.len);

   memcpy(mct01_ptr->settlement_id, db_mct01.settlement_id.arr, db_mct01.settlement_id.len);

   memcpy(mct01_ptr->floor_limit, db_mct01.floor_limit.arr, db_mct01.floor_limit.len);

   

}



/*************************************************************************************/

/*************************************************************************************/

void db_to_ctf01 ( pCTF01 ctf01_ptr )

{

   memset(ctf01_ptr, 0, sizeof(CTF01));

   memcpy(ctf01_ptr->primary_key.card_type, db_ctf01.card_type.arr, db_ctf01.card_type.len);

   memcpy(ctf01_ptr->description, db_ctf01.description.arr, db_ctf01.description.len);

   

}

void db_to_key3ds01 ( pKEY3DS01 key3ds01_ptr )
{
   memset(key3ds01_ptr, 0, sizeof(KEY3DS01));
   memcpy(key3ds01_ptr->caf_profile_id, db_key3ds01.caf_profile_id.arr, db_key3ds01.caf_profile_id.len);
   memcpy(key3ds01_ptr->key3ds, db_key3ds01.key3ds.arr, db_key3ds01.key3ds.len);
   return;
}

/*************************************************************************************/
/*************************************************************************************/
void db_to_caf01 ( pCAF01 caf01_ptr )
{
   memset(caf01_ptr, 0, sizeof(CAF01));

   memcpy(caf01_ptr->primary_key.caf_profile_id, db_caf01.caf_profile_id.arr, db_caf01.caf_profile_id.len);
   memcpy(caf01_ptr->primary_key.type, db_caf01.type.arr, db_caf01.type.len);
   memcpy(caf01_ptr->authorization_location, db_caf01.authorization_location.arr, db_caf01.authorization_location.len);
   memcpy(caf01_ptr->authorization_method, db_caf01.authorization_method.arr, db_caf01.authorization_method.len);
   memcpy(caf01_ptr->destination_name, db_caf01.destination_name.arr, db_caf01.destination_name.len);
   memcpy(caf01_ptr->iso_nbr, db_caf01.iso_nbr.arr, db_caf01.iso_nbr.len);
   memcpy(caf01_ptr->iso_length, db_caf01.iso_length.arr, db_caf01.iso_length.len);
   memcpy(caf01_ptr->aba_nbr, db_caf01.aba_nbr.arr, db_caf01.aba_nbr.len);
   memcpy(caf01_ptr->name, db_caf01.name.arr, db_caf01.name.len);
   memcpy(caf01_ptr->contact, db_caf01.contact.arr, db_caf01.contact.len);
   memcpy(caf01_ptr->phone, db_caf01.phone.arr, db_caf01.phone.len);
   memcpy(caf01_ptr->date_added, db_caf01.date_added.arr, db_caf01.date_added.len);
   memcpy(caf01_ptr->last_maint, db_caf01.last_maint.arr, db_caf01.last_maint.len);
   memcpy(caf01_ptr->changed_by, db_caf01.changed_by.arr, db_caf01.changed_by.len);
   memcpy(caf01_ptr->status, db_caf01.status.arr, db_caf01.status.len);
   memcpy(caf01_ptr->max_pin_retries, db_caf01.max_pin_retries.arr, db_caf01.max_pin_retries.len);
   memcpy(caf01_ptr->pin_capture_ind, db_caf01.pin_capture_ind.arr, db_caf01.pin_capture_ind.len);
   memcpy(caf01_ptr->track_offset, db_caf01.track_offset.arr, db_caf01.track_offset.len);
   memcpy(caf01_ptr->pin_offset_location, db_caf01.pin_offset_location.arr, db_caf01.pin_offset_location.len);
   memcpy(caf01_ptr->nsp_process, db_caf01.nsp_process.arr, db_caf01.nsp_process.len);
   memcpy(caf01_ptr->expiration_date_check, db_caf01.expiration_date_check.arr, db_caf01.expiration_date_check.len);
   memcpy(caf01_ptr->expiration_date_location, db_caf01.expiration_date_location.arr, db_caf01.expiration_date_location.len);
   memcpy(caf01_ptr->merchant_same, db_caf01.merchant_same.arr, db_caf01.merchant_same.len);
   memcpy(caf01_ptr->velocity[0].day_period, db_caf01.day_period1.arr, db_caf01.day_period1.len);
   memcpy(caf01_ptr->velocity[0].nbr_usage[0], db_caf01.velocity1_nbr_usage_1.arr, db_caf01.velocity1_nbr_usage_1.len);
   memcpy(caf01_ptr->velocity[0].nbr_usage[1], db_caf01.velocity1_nbr_usage_2.arr, db_caf01.velocity1_nbr_usage_2.len);
   memcpy(caf01_ptr->velocity[0].amt_usage[0], db_caf01.velocity1_amt_usage_1.arr, db_caf01.velocity1_amt_usage_1.len);
   memcpy(caf01_ptr->velocity[0].amt_usage[1], db_caf01.velocity1_amt_usage_2.arr, db_caf01.velocity1_amt_usage_2.len);
   memcpy(caf01_ptr->velocity[1].day_period, db_caf01.day_period2.arr, db_caf01.day_period2.len);
   memcpy(caf01_ptr->velocity[1].nbr_usage[0], db_caf01.velocity2_nbr_usage_1.arr, db_caf01.velocity2_nbr_usage_1.len);
   memcpy(caf01_ptr->velocity[1].nbr_usage[1], db_caf01.velocity2_nbr_usage_2.arr, db_caf01.velocity2_nbr_usage_2.len);
   memcpy(caf01_ptr->velocity[1].amt_usage[0], db_caf01.velocity2_amt_usage_1.arr, db_caf01.velocity2_amt_usage_1.len);
   memcpy(caf01_ptr->velocity[1].amt_usage[1], db_caf01.velocity2_amt_usage_2.arr, db_caf01.velocity2_amt_usage_2.len);
   memcpy(caf01_ptr->velocity[2].day_period, db_caf01.day_period3.arr, db_caf01.day_period3.len);
   memcpy(caf01_ptr->velocity[2].nbr_usage[0], db_caf01.velocity3_nbr_usage_1.arr, db_caf01.velocity3_nbr_usage_1.len);
   memcpy(caf01_ptr->velocity[2].nbr_usage[1], db_caf01.velocity3_nbr_usage_2.arr, db_caf01.velocity3_nbr_usage_2.len);
   memcpy(caf01_ptr->velocity[2].amt_usage[0], db_caf01.velocity3_amt_usage_1.arr, db_caf01.velocity3_amt_usage_1.len);
   memcpy(caf01_ptr->velocity[2].amt_usage[1], db_caf01.velocity3_amt_usage_2.arr, db_caf01.velocity3_amt_usage_2.len);
   memcpy(caf01_ptr->pin_verification_method, db_caf01.pin_verification_method.arr, db_caf01.pin_verification_method.len);
   memcpy(&caf01_ptr->pin, db_caf01.pin.pin_data, db_caf01.pin.len);
   memcpy(&caf01_ptr->cvk[0].cvkA			, db_caf01.cvkA_1.arr						, db_caf01.cvkA_1						.len);
   memcpy(&caf01_ptr->cvk[0].cvkB			, db_caf01.cvkB_1.arr						, db_caf01.cvkB_1						.len);
   memcpy(&caf01_ptr->cvk[1].cvkA			, db_caf01.cvkA_2.arr						, db_caf01.cvkA_2						.len);
   memcpy(&caf01_ptr->cvk[1].cvkB			, db_caf01.cvkB_2.arr						, db_caf01.cvkB_2						.len);
   memcpy(&caf01_ptr->cvk[2].cvkA			, db_caf01.cvkA_3.arr						, db_caf01.cvkA_3						.len);
   memcpy(&caf01_ptr->cvk[2].cvkB			, db_caf01.cvkB_3.arr						, db_caf01.cvkB_3						.len);
   memcpy(&caf01_ptr->cvk[3].cvkA			, db_caf01.cvkA_4.arr						, db_caf01.cvkA_4						.len);
   memcpy(&caf01_ptr->cvk[3].cvkB			, db_caf01.cvkB_4.arr						, db_caf01.cvkB_4						.len);
   memcpy(&caf01_ptr->cvk[4].cvkA			, db_caf01.cvkA_5.arr						, db_caf01.cvkA_5						.len);
   memcpy(&caf01_ptr->cvk[4].cvkB			, db_caf01.cvkB_5.arr						, db_caf01.cvkB_5						.len);
   memcpy(&caf01_ptr->cvk[5].cvkA			, db_caf01.cvkA_6.arr						, db_caf01.cvkA_6						.len);
   memcpy(&caf01_ptr->cvk[5].cvkB			, db_caf01.cvkB_6.arr						, db_caf01.cvkB_6						.len);
   memcpy(&caf01_ptr->cvv_processing        , db_caf01.cvv_processing.arr				, db_caf01.cvv_processing						.len);
   memcpy(&caf01_ptr->service_code_offset_tr1	, db_caf01.service_code_offset_tr1.arr	, db_caf01.service_code_offset_tr1	.len);
   memcpy(&caf01_ptr->service_code_offset_tr2	, db_caf01.service_code_offset_tr2.arr	, db_caf01.service_code_offset_tr2	.len);
   memcpy(&caf01_ptr->cvv_offset_tr1			, db_caf01.cvv_offset_tr1.arr			, db_caf01.cvv_offset_tr1			.len);
   memcpy(&caf01_ptr->cvv_offset_tr2			, db_caf01.cvv_offset_tr2.arr			, db_caf01.cvv_offset_tr2			.len);
   memcpy(&caf01_ptr->cvv_length				, db_caf01.cvv_length.arr				, db_caf01.cvv_length				.len);
   memcpy(&caf01_ptr->csck, db_caf01.csck.arr, db_caf01.csck.len) ;
   memcpy(&caf01_ptr->floor_limit, db_caf01.floor_limit.arr, db_caf01.floor_limit.len) ;
   memcpy(&caf01_ptr->country_limits_flag, db_caf01.country_limits_flag.arr, db_caf01.country_limits_flag.len);
   return;
}

void db_to_caf01_emv ( pCAF01_EMV caf01_emv_ptr )
{

memset(caf01_emv_ptr, 0, sizeof(CAF01_EMV));
memcpy(caf01_emv_ptr->primary_key.caf_profile_id ,db_caf01_emv.caf_profile_id.arr,db_caf01_emv.caf_profile_id.len);
memcpy(caf01_emv_ptr->primary_key.type, db_caf01_emv.type.arr, db_caf01_emv.type.len);

memcpy(&caf01_emv_ptr->cc_tk[0].service_code_offset,  db_caf01_emv.cc_tk1_service_code_offset.arr, db_caf01_emv.cc_tk1_service_code_offset.len);
memcpy(&caf01_emv_ptr->cc_tk[0].icvc_offset  , db_caf01_emv.cc_tk1_icvc_offset.arr, db_caf01_emv.cc_tk1_icvc_offset.len);
memcpy(&caf01_emv_ptr->cc_tk[0].pan_seq_nbr_offset  , db_caf01_emv.cc_tk1_pan_seq_nbr_offset.arr, db_caf01_emv.cc_tk1_pan_seq_nbr_offset.len);
memcpy(&caf01_emv_ptr->cc_tk[1].service_code_offset   , db_caf01_emv.cc_tk2_service_code_offset.arr, db_caf01_emv.cc_tk2_service_code_offset.len);
memcpy(&caf01_emv_ptr->cc_tk[1].icvc_offset , db_caf01_emv.cc_tk2_icvc_offset.arr, db_caf01_emv.cc_tk2_icvc_offset.len);
memcpy(&caf01_emv_ptr->cc_tk[1].pan_seq_nbr_offset , db_caf01_emv.cc_tk2_pan_seq_nbr_offset.arr, db_caf01_emv.cc_tk2_pan_seq_nbr_offset.len);

memcpy(&caf01_emv_ptr->ccless_tk[0].service_code_offset , db_caf01_emv.ccless_tk1_service_code_offset.arr, db_caf01_emv.ccless_tk1_service_code_offset.len);
memcpy(&caf01_emv_ptr->ccless_tk[0].icvc_offset   , db_caf01_emv.ccless_tk1_icvc_offset.arr, db_caf01_emv.ccless_tk1_icvc_offset.len);
memcpy(&caf01_emv_ptr->ccless_tk[0].pan_seq_nbr_offset   , db_caf01_emv.ccless_tk1_pan_seq_nbr_offset.arr, db_caf01_emv.ccless_tk1_pan_seq_nbr_offset.len);
memcpy(&caf01_emv_ptr->ccless_tk[1].service_code_offset  , db_caf01_emv.ccless_tk2_service_code_offset.arr, db_caf01_emv.ccless_tk2_service_code_offset.len);
memcpy(&caf01_emv_ptr->ccless_tk[1].icvc_offset ,db_caf01_emv.ccless_tk2_icvc_offset.arr, db_caf01_emv.ccless_tk2_icvc_offset.len);
memcpy(&caf01_emv_ptr->ccless_tk[1].pan_seq_nbr_offset ,db_caf01_emv.ccless_tk2_pan_seq_nbr_offset.arr, db_caf01_emv.ccless_tk2_pan_seq_nbr_offset.len);

memcpy(&caf01_emv_ptr->mcless_tk[0].service_code_offset ,db_caf01_emv. mcless_tk1_service_code_offset.arr, db_caf01_emv.mcless_tk1_service_code_offset.len);
memcpy(&caf01_emv_ptr->mcless_tk[0].icvc_offset , db_caf01_emv. mcless_tk1_icvc_offset.arr, db_caf01_emv.mcless_tk1_icvc_offset.len);
memcpy(&caf01_emv_ptr->mcless_tk[0].pan_seq_nbr_offset ,db_caf01_emv.mcless_tk1_pan_seq_nbr_offset.arr,db_caf01_emv.mcless_tk1_pan_seq_nbr_offset.len);
memcpy(&caf01_emv_ptr->mcless_tk[0].atc_offset, db_caf01_emv.mcless_tk1_atc_offset.arr, db_caf01_emv.mcless_tk1_atc_offset.len);
memcpy(&caf01_emv_ptr->mcless_tk[0].unpre_nbr_offset ,db_caf01_emv.mcless_tk1_unpre_nbr_offset.arr, db_caf01_emv.mcless_tk1_unpre_nbr_offset.len);
memcpy(&caf01_emv_ptr->mcless_tk[1].service_code_offset , db_caf01_emv.mcless_tk2_service_code_offset.arr, db_caf01_emv.mcless_tk2_service_code_offset.len);
memcpy(&caf01_emv_ptr->mcless_tk[1].icvc_offset  ,db_caf01_emv.mcless_tk2_icvc_offset.arr, db_caf01_emv.mcless_tk2_icvc_offset.len);
memcpy(&caf01_emv_ptr->mcless_tk[1].pan_seq_nbr_offset ,db_caf01_emv.mcless_tk2_pan_seq_nbr_offset.arr, db_caf01_emv.mcless_tk2_pan_seq_nbr_offset.len);
memcpy(&caf01_emv_ptr->mcless_tk[1].atc_offset , db_caf01_emv.mcless_tk2_atc_offset.arr, db_caf01_emv.mcless_tk2_atc_offset.len);
memcpy(&caf01_emv_ptr->mcless_tk[1].unpre_nbr_offset , db_caf01_emv.mcless_tk2_unpre_nbr_offset.arr, db_caf01_emv.mcless_tk2_unpre_nbr_offset.len);

memcpy(caf01_emv_ptr->MC_CVC3_code , db_caf01_emv.MC_CVC3_code.arr, db_caf01_emv.MC_CVC3_code.len);
memcpy(caf01_emv_ptr->MK_AC_code  , db_caf01_emv.MK_AC_code.arr, db_caf01_emv.MK_AC_code.len);
memcpy(caf01_emv_ptr->future_key1 , db_caf01_emv.future_key1.arr, db_caf01_emv.future_key1.len);

memcpy(caf01_emv_ptr->future_key2 , db_caf01_emv.future_key2.arr, db_caf01_emv.future_key2.len);
memcpy(caf01_emv_ptr->future_key3 , db_caf01_emv.future_key3.arr, db_caf01_emv.future_key3.len);

memcpy(caf01_emv_ptr->future_key4 , db_caf01_emv.future_key4.arr, db_caf01_emv.future_key4.len);
memcpy(caf01_emv_ptr->future_key5  , db_caf01_emv.future_key5.arr, db_caf01_emv.future_key5.len);
memcpy(caf01_emv_ptr->temp1 ,db_caf01_emv.temp1.arr, db_caf01_emv.temp1.len);

memcpy(caf01_emv_ptr->temp2 , db_caf01_emv.temp2.arr, db_caf01_emv.temp2.len);
memcpy(caf01_emv_ptr->temp3 , db_caf01_emv.temp3.arr, db_caf01_emv.temp3.len);
memcpy(caf01_emv_ptr->temp4 , db_caf01_emv.temp4.arr, db_caf01_emv.temp4.len);
memcpy(caf01_emv_ptr->temp5 , db_caf01_emv.temp5.arr, db_caf01_emv.temp5.len);

}


/******************************************************************************/
/******************************************************************************/
void db_to_mcc_limits( pMCC_LIMITS mcc_limits_ptr )
{
   memset( mcc_limits_ptr, 0x00, sizeof(MCC_LIMITS));

   memcpy( mcc_limits_ptr->primary_key.caf_profile_id,
           db_mcc_limits.caf_profile_id.arr,
           db_mcc_limits.caf_profile_id.len);

   memcpy( mcc_limits_ptr->primary_key.type,
           db_mcc_limits.type.arr,
           db_mcc_limits.type.len);

   memcpy( mcc_limits_ptr->primary_key.mcc,
           db_mcc_limits.mcc.arr,
           db_mcc_limits.mcc.len);

   memcpy( mcc_limits_ptr->usage,
           db_mcc_limits.usage.arr,
           db_mcc_limits.usage.len);

   memcpy( mcc_limits_ptr->peso_amt_limit,
           db_mcc_limits.peso_amt_limit.arr,
           db_mcc_limits.peso_amt_limit.len);

   memcpy( mcc_limits_ptr->usd_amt_limit,
           db_mcc_limits.usd_amt_limit.arr,
           db_mcc_limits.usd_amt_limit.len);

   return;
}

/*************************************************************************************/
/******************************************************************************/
void db_to_country_amt_limits( pCOUNTRY_AMT_LIMITS country_amt_limits_ptr )
{
   memset( country_amt_limits_ptr, 0x00, sizeof(COUNTRY_AMT_LIMITS));

   memcpy( country_amt_limits_ptr->primary_key.caf_profile_id,
           db_country_amt_limits.caf_profile_id.arr,
           db_country_amt_limits.caf_profile_id.len);

   memcpy( country_amt_limits_ptr->primary_key.type,
           db_country_amt_limits.type.arr,
           db_country_amt_limits.type.len);

   memcpy( country_amt_limits_ptr->country_code,
           db_country_amt_limits.country_code.arr,
           db_country_amt_limits.country_code.len);

   memcpy( country_amt_limits_ptr->amount_limit,
           db_country_amt_limits.amount_limit.arr,
           db_country_amt_limits.amount_limit.len);

   return;
}

/*************************************************************************************/
/*************************************************************************************/

void db_to_fcf02 ( pFCF02 fcf02_ptr )

{

   memset(fcf02_ptr, 0, sizeof(FCF02));

   memcpy(fcf02_ptr->primary_key.card_type, db_fcf02.card_type.arr, db_fcf02.card_type.len);

   memcpy(fcf02_ptr->primary_key.card_nbr, db_fcf02.card_nbr.arr, db_fcf02.card_nbr.len);

   memcpy(fcf02_ptr->action_code, db_fcf02.action_code.arr, db_fcf02.action_code.len);

   memcpy(fcf02_ptr->crind_autocard, db_fcf02.crind_autocard.arr, db_fcf02.crind_autocard.len);

   memcpy(fcf02_ptr->odometer_required, db_fcf02.odometer_required.arr, db_fcf02.odometer_required.len);

   memcpy(fcf02_ptr->order_number_required, db_fcf02.order_number_required.arr, db_fcf02.order_number_required.len);

   memcpy(fcf02_ptr->signature_required, db_fcf02.signature_required.arr, db_fcf02.signature_required.len);

   memcpy(fcf02_ptr->driver_flag, db_fcf02.driver_flag.arr, db_fcf02.driver_flag.len);

   memcpy(fcf02_ptr->vehicle_id_flag, db_fcf02.vehicle_id_flag.arr, db_fcf02.vehicle_id_flag.len);

   memcpy(fcf02_ptr->fleet_id_flag, db_fcf02.fleet_id_flag.arr, db_fcf02.fleet_id_flag.len);

   memcpy(fcf02_ptr->driver_id_flag, db_fcf02.driver_id_flag.arr, db_fcf02.driver_id_flag.len);

   memcpy(fcf02_ptr->registration_number, db_fcf02.registration_number.arr, db_fcf02.registration_number.len);

   memcpy(fcf02_ptr->super, db_fcf02.super.arr, db_fcf02.super.len);

   memcpy(fcf02_ptr->super_low_lead, db_fcf02.super_low_lead.arr, db_fcf02.super_low_lead.len);

   memcpy(fcf02_ptr->gold, db_fcf02.gold.arr, db_fcf02.gold.len);

   memcpy(fcf02_ptr->autogas, db_fcf02.autogas.arr, db_fcf02.autogas.len);

   memcpy(fcf02_ptr->unleaded, db_fcf02.unleaded.arr, db_fcf02.unleaded.len);

   memcpy(fcf02_ptr->diesel, db_fcf02.diesel.arr, db_fcf02.diesel.len);

   memcpy(fcf02_ptr->oil, db_fcf02.oil.arr, db_fcf02.oil.len);

   memcpy(fcf02_ptr->service, db_fcf02.service.arr, db_fcf02.service.len);

   memcpy(fcf02_ptr->accessories, db_fcf02.accessories.arr, db_fcf02.accessories.len);

   memcpy(fcf02_ptr->tires, db_fcf02.tires.arr, db_fcf02.tires.len);

   memcpy(fcf02_ptr->batteries, db_fcf02.batteries.arr, db_fcf02.batteries.len);

   memcpy(fcf02_ptr->repairs_maint, db_fcf02.repairs_maint.arr, db_fcf02.repairs_maint.len);

   memcpy(fcf02_ptr->shop, db_fcf02.shop.arr, db_fcf02.shop.len);

   memcpy(fcf02_ptr->clean_and_go, db_fcf02.clean_and_go.arr, db_fcf02.clean_and_go.len);

   memcpy(fcf02_ptr->accident_and_damage, db_fcf02.accident_and_damage.arr, db_fcf02.accident_and_damage.len);

   memcpy(fcf02_ptr->meals, db_fcf02.meals.arr, db_fcf02.meals.len);

   memcpy(fcf02_ptr->parking, db_fcf02.parking.arr, db_fcf02.parking.len);

   memcpy(fcf02_ptr->last_odometer_reading, db_fcf02.last_odometer_reading.arr, db_fcf02.last_odometer_reading.len);

   memcpy(fcf02_ptr->value_limits, db_fcf02.value_limits.arr, db_fcf02.value_limits.len);

   memcpy(fcf02_ptr->litre_limits, db_fcf02.litre_limits.arr, db_fcf02.litre_limits.len);

   memcpy(fcf02_ptr->time_limits, db_fcf02.time_limits.arr, db_fcf02.time_limits.len);



}



/*************************************************************************************/

/*************************************************************************************/

void db_to_ccf02p ( pCCF02P ccf02p_ptr )

{

   memset(ccf02p_ptr, 0, sizeof(CCF02P));
   memcpy(ccf02p_ptr->primary_key.card_type, db_ccf02p.card_type.arr, db_ccf02p.card_type.len);
   memcpy(ccf02p_ptr->primary_key.card_nbr, db_ccf02p.card_nbr.arr, db_ccf02p.card_nbr.len);
   memcpy(ccf02p_ptr->primary_acct_nbr, db_ccf02p.primary_acct_nbr.arr, db_ccf02p.primary_acct_nbr.len);
   memcpy(ccf02p_ptr->pin_offset, db_ccf02p.pin_offset.arr, db_ccf02p.pin_offset.len);
   memcpy(ccf02p_ptr->caf_profile_id, db_ccf02p.caf_profile_id.arr, db_ccf02p.caf_profile_id.len);
   memcpy(ccf02p_ptr->status, db_ccf02p.status.arr, db_ccf02p.status.len);
   memcpy(ccf02p_ptr->date_added, db_ccf02p.date_added.arr, db_ccf02p.date_added.len);
   memcpy(ccf02p_ptr->maint_date, db_ccf02p.maint_date.arr, db_ccf02p.maint_date.len);
   memcpy(ccf02p_ptr->changed_by, db_ccf02p.changed_by.arr, db_ccf02p.changed_by.len);
   memcpy(ccf02p_ptr->card_class, db_ccf02p.card_class.arr, db_ccf02p.card_class.len);
   memcpy(ccf02p_ptr->expire_date, db_ccf02p.expire_date.arr, db_ccf02p.expire_date.len);
   memcpy(ccf02p_ptr->effect_date, db_ccf02p.effect_date.arr, db_ccf02p.effect_date.len);
   memcpy(ccf02p_ptr->percent_deposit, db_ccf02p.percent_deposit.arr, db_ccf02p.percent_deposit.len);
   memcpy(ccf02p_ptr->percent_avail_allowed, db_ccf02p.percent_avail_allowed.arr, db_ccf02p.percent_avail_allowed.len);
   memcpy(ccf02p_ptr->credit_line, db_ccf02p.credit_line.arr, db_ccf02p.credit_line.len);
   memcpy(ccf02p_ptr->outstanding_auths, db_ccf02p.outstanding_auths.arr, db_ccf02p.outstanding_auths.len);
   memcpy(ccf02p_ptr->allowed, db_ccf02p.allowed.arr, db_ccf02p.allowed.len);
   memcpy(ccf02p_ptr->currency_code, db_ccf02p.currency_code.arr, db_ccf02p.currency_code.len);
   memcpy(ccf02p_ptr->country_code, db_ccf02p.country_code.arr, db_ccf02p.country_code.len);
   memcpy(ccf02p_ptr->peso_saving_acct, db_ccf02p.peso_saving_acct.arr, db_ccf02p.peso_saving_acct.len);
   memcpy(ccf02p_ptr->peso_current_acct, db_ccf02p.peso_current_acct.arr, db_ccf02p.peso_current_acct.len);
   memcpy(ccf02p_ptr->dollar_saving_acct, db_ccf02p.dollar_saving_acct.arr, db_ccf02p.dollar_saving_acct.len);
   memcpy(ccf02p_ptr->dollar_current_acct, db_ccf02p.dollar_current_acct.arr, db_ccf02p.dollar_current_acct.len);
   memcpy(ccf02p_ptr->product_codes, db_ccf02p.product_codes.arr, db_ccf02p.product_codes.len);
   memcpy(ccf02p_ptr->cash_bonus_eligible, db_ccf02p.cash_bonus_eligible.arr, db_ccf02p.cash_bonus_eligible.len);
   memcpy(ccf02p_ptr->visa_purchase_card, db_ccf02p.visa_purchase_card.arr, db_ccf02p.visa_purchase_card.len);
   memcpy(ccf02p_ptr->related_acct[0].type, db_ccf02p.related_acct_type_1.arr, db_ccf02p.related_acct_type_1.len);
   memcpy(ccf02p_ptr->related_acct[0].nbr, db_ccf02p.related_acct_nbr_1.arr, db_ccf02p.related_acct_nbr_1.len);
   memcpy(ccf02p_ptr->related_acct[1].type, db_ccf02p.related_acct_type_2.arr, db_ccf02p.related_acct_type_2.len);
   memcpy(ccf02p_ptr->related_acct[1].nbr, db_ccf02p.related_acct_nbr_2.arr, db_ccf02p.related_acct_nbr_2.len);
   memcpy(ccf02p_ptr->related_acct[2].type, db_ccf02p.related_acct_type_3.arr, db_ccf02p.related_acct_type_3.len);
   memcpy(ccf02p_ptr->related_acct[2].nbr, db_ccf02p.related_acct_nbr_3.arr, db_ccf02p.related_acct_nbr_3.len);
   memcpy(ccf02p_ptr->related_acct[3].type, db_ccf02p.related_acct_type_4.arr, db_ccf02p.related_acct_type_4.len);
   memcpy(ccf02p_ptr->related_acct[3].nbr, db_ccf02p.related_acct_nbr_4.arr, db_ccf02p.related_acct_nbr_4.len);
   memcpy(ccf02p_ptr->related_acct[4].type, db_ccf02p.related_acct_type_5.arr, db_ccf02p.related_acct_type_5.len);
   memcpy(ccf02p_ptr->related_acct[4].nbr, db_ccf02p.related_acct_nbr_5.arr, db_ccf02p.related_acct_nbr_5.len);
   memcpy(ccf02p_ptr->related_acct[5].type, db_ccf02p.related_acct_type_6.arr, db_ccf02p.related_acct_type_6.len);
   memcpy(ccf02p_ptr->related_acct[5].nbr, db_ccf02p.related_acct_nbr_6.arr, db_ccf02p.related_acct_nbr_6.len);
   memcpy(ccf02p_ptr->related_acct[6].type, db_ccf02p.related_acct_type_7.arr, db_ccf02p.related_acct_type_7.len);
   memcpy(ccf02p_ptr->related_acct[6].nbr, db_ccf02p.related_acct_nbr_7.arr, db_ccf02p.related_acct_nbr_7.len);
   memcpy(ccf02p_ptr->related_acct[7].type, db_ccf02p.related_acct_type_8.arr, db_ccf02p.related_acct_type_8.len);
   memcpy(ccf02p_ptr->related_acct[7].nbr, db_ccf02p.related_acct_nbr_8.arr, db_ccf02p.related_acct_nbr_8.len);
   memcpy(ccf02p_ptr->related_acct[8].type, db_ccf02p.related_acct_type_9.arr, db_ccf02p.related_acct_type_9.len);
   memcpy(ccf02p_ptr->related_acct[8].nbr, db_ccf02p.related_acct_nbr_9.arr, db_ccf02p.related_acct_nbr_9.len);
   memcpy(ccf02p_ptr->related_acct[9].type, db_ccf02p.related_acct_type_10.arr, db_ccf02p.related_acct_type_10.len);
   memcpy(ccf02p_ptr->related_acct[9].nbr, db_ccf02p.related_acct_nbr_10.arr, db_ccf02p.related_acct_nbr_10.len);
   memcpy(ccf02p_ptr->pin_verification_override, db_ccf02p.pin_verification_override.arr, db_ccf02p.pin_verification_override.len);
   memcpy(ccf02p_ptr->pin, db_ccf02p.pin.arr, db_ccf02p.pin.len);
   memcpy(ccf02p_ptr->pvki, db_ccf02p.pvki.arr, db_ccf02p.pvki.len);  /* Added by SDG on Feb 14*/
   memcpy(ccf02p_ptr->add_on_rate, db_ccf02p.add_on_rate.arr, db_ccf02p.add_on_rate.len);
   memcpy(ccf02p_ptr->add_on_term, db_ccf02p.add_on_term.arr, db_ccf02p.add_on_term.len);
   memcpy(ccf02p_ptr->peso_tran_limit, db_ccf02p.peso_tran_limit.arr, db_ccf02p.peso_tran_limit.len);/*20050321 LM*/
   memcpy(ccf02p_ptr->dollar_tran_limit, db_ccf02p.dollar_tran_limit.arr, db_ccf02p.dollar_tran_limit.len);/*20050321 LM*/
} 



/*************************************************************************************/

/*************************************************************************************/

void db_to_ccf02h ( pCCF02H ccf02h_ptr )

{



   memset(ccf02h_ptr, 0, sizeof(CCF02PH));

   memcpy(ccf02h_ptr->primary_key.card_type, db_ccf02h.card_type.arr, db_ccf02h.card_type.len);

   memcpy(ccf02h_ptr->primary_key.card_nbr, db_ccf02h.card_nbr.arr, db_ccf02h.card_nbr.len);

   

   memcpy(ccf02h_ptr->caf_profile_id, db_ccf02h.caf_profile_id.arr, db_ccf02h.caf_profile_id.len);

   memcpy(ccf02h_ptr->status, db_ccf02h.status.arr, db_ccf02h.status.len);

   memcpy(ccf02h_ptr->date_added, db_ccf02h.date_added.arr, db_ccf02h.date_added.len);

   memcpy(ccf02h_ptr->maint_date, db_ccf02h.maint_date.arr, db_ccf02h.maint_date.len);

   memcpy(ccf02h_ptr->changed_by, db_ccf02h.changed_by.arr, db_ccf02h.changed_by.len);

}

/*************************************************************************************/  

/*************************************************************************************/

void db_to_atp02 ( pATP02 atp02_ptr )

{

   memset(atp02_ptr, 0, sizeof(ATP02));

   memcpy(atp02_ptr->primary_key.workstation_id, db_atp02.workstation_id.arr, db_atp02.workstation_id.len);

   memcpy(atp02_ptr->workstation_status, db_atp02.workstation_status.arr, db_atp02.workstation_status.len);

   

}

/*************************************************************************************/

/*************************************************************************************/

void db_to_atp01 ( pATP01 atp01_ptr )

{

   memset(atp01_ptr, 0, sizeof(ATP01));

   memcpy(atp01_ptr->site_name, db_atp01.site_name.arr, db_atp01.site_name.len);

   memcpy(atp01_ptr->tlf_log_date, db_atp01.tlf_log_date.arr, db_atp01.tlf_log_date.len);

   memcpy(atp01_ptr->system_components[0].subsystem_name, db_atp01.subsystem_name_1.arr, db_atp01.subsystem_name_1.len);

   memcpy(atp01_ptr->system_components[1].subsystem_name, db_atp01.subsystem_name_2.arr, db_atp01.subsystem_name_2.len);

   memcpy(atp01_ptr->system_components[2].subsystem_name, db_atp01.subsystem_name_3.arr, db_atp01.subsystem_name_3.len);

   memcpy(atp01_ptr->system_components[3].subsystem_name, db_atp01.subsystem_name_4.arr, db_atp01.subsystem_name_4.len);

   memcpy(atp01_ptr->system_components[4].subsystem_name, db_atp01.subsystem_name_5.arr, db_atp01.subsystem_name_5.len);

   memcpy(atp01_ptr->system_components[5].subsystem_name, db_atp01.subsystem_name_6.arr, db_atp01.subsystem_name_6.len);

   memcpy(atp01_ptr->system_components[6].subsystem_name, db_atp01.subsystem_name_7.arr, db_atp01.subsystem_name_7.len);

   memcpy(atp01_ptr->system_components[7].subsystem_name, db_atp01.subsystem_name_8.arr, db_atp01.subsystem_name_8.len);

   memcpy(atp01_ptr->system_components[8].subsystem_name, db_atp01.subsystem_name_9.arr, db_atp01.subsystem_name_9.len);

   memcpy(atp01_ptr->system_components[9].subsystem_name, db_atp01.subsystem_name_10.arr, db_atp01.subsystem_name_10.len);

   memcpy(atp01_ptr->system_components[10].subsystem_name, db_atp01.subsystem_name_11.arr, db_atp01.subsystem_name_11.len);

   memcpy(atp01_ptr->system_components[11].subsystem_name, db_atp01.subsystem_name_12.arr, db_atp01.subsystem_name_12.len);

   memcpy(atp01_ptr->system_components[12].subsystem_name, db_atp01.subsystem_name_13.arr, db_atp01.subsystem_name_13.len);

   memcpy(atp01_ptr->system_components[13].subsystem_name, db_atp01.subsystem_name_14.arr, db_atp01.subsystem_name_14.len);

   memcpy(atp01_ptr->system_components[14].subsystem_name, db_atp01.subsystem_name_15.arr, db_atp01.subsystem_name_15.len);

   memcpy(atp01_ptr->system_components[15].subsystem_name, db_atp01.subsystem_name_16.arr, db_atp01.subsystem_name_16.len);

   memcpy(atp01_ptr->system_components[16].subsystem_name, db_atp01.subsystem_name_17.arr, db_atp01.subsystem_name_17.len);

   memcpy(atp01_ptr->system_components[17].subsystem_name, db_atp01.subsystem_name_18.arr, db_atp01.subsystem_name_18.len);

   memcpy(atp01_ptr->system_components[18].subsystem_name, db_atp01.subsystem_name_19.arr, db_atp01.subsystem_name_19.len);

   memcpy(atp01_ptr->system_components[19].subsystem_name, db_atp01.subsystem_name_20.arr, db_atp01.subsystem_name_20.len);
}

 



/*************************************************************************************/

/*************************************************************************************/

void db_to_hst01 ( pHST01 hst01_ptr)

{

   memset(hst01_ptr, 0, sizeof(HST01));

   memcpy(hst01_ptr->primary_key.unique_id, db_hst01.unique_id.arr, db_hst01.unique_id.len);

   memcpy(hst01_ptr->file_name, db_hst01.file_name.arr, db_hst01.file_name.len);

   memcpy(hst01_ptr->file_primary_key, db_hst01.file_primary_key.arr, db_hst01.file_primary_key.len);

   memcpy(hst01_ptr->changed_by, db_hst01.changed_by.arr, db_hst01.changed_by.len);

   memcpy(hst01_ptr->date_modified, db_hst01.date_modified.arr, db_hst01.date_modified.len);

   memcpy(hst01_ptr->time_modified, db_hst01.time_modified.arr, db_hst01.time_modified.len);

   memcpy(hst01_ptr->field_tag, db_hst01.field_tag.arr, db_hst01.field_tag.len);

   memcpy(hst01_ptr->previous_data, db_hst01.previous_data.arr, db_hst01.previous_data.len);

   memcpy(hst01_ptr->current_data, db_hst01.current_data.arr, db_hst01.current_data.len);

   memcpy(hst01_ptr->reserved, db_hst01.reserved.arr, db_hst01.reserved.len);

}

#ifdef VISA7
void db_to_merch_int_param ( pMERCH_INT_PARAMS mip_ptr)
{
   memset(mip_ptr, 0, sizeof(MERCH_INT_PARAMS));
   memcpy(mip_ptr->primary_key.merchant_id, db_merch_int_param.merchant_id.arr, 	db_merch_int_param.merchant_id.len);
   memcpy(mip_ptr->primary_key.card_nbr, 	db_merch_int_param.card_nbr.arr, 		db_merch_int_param.card_nbr.len);
   memcpy(mip_ptr->primary_key.category_cd, db_merch_int_param.category_cd.arr, 	db_merch_int_param.category_cd.len);
   memcpy(mip_ptr->c1_block, 			db_merch_int_param.c1_block.arr, 			db_merch_int_param.c1_block.len);
   memcpy(mip_ptr->c2_block, 			db_merch_int_param.c2_block.arr, 			db_merch_int_param.c2_block.len);
   memcpy(mip_ptr->c3_block, 			db_merch_int_param.c3_block.arr, 			db_merch_int_param.c3_block.len);
   memcpy(mip_ptr->c4_block, 			db_merch_int_param.c4_block.arr, 			db_merch_int_param.c4_block.len);
   memcpy(mip_ptr->c1_count, 			db_merch_int_param.c1_count.arr, 			db_merch_int_param.c1_count.len);
   memcpy(mip_ptr->c1_block_start_date, db_merch_int_param.c1_block_start_date.arr, db_merch_int_param.c1_block_start_date.len);
   memcpy(mip_ptr->c1_block_end_date, 	db_merch_int_param.c1_block_end_date.arr, 	db_merch_int_param.c1_block_end_date.len);
   memcpy(mip_ptr->c2_count, 			db_merch_int_param.c2_count.arr, 			db_merch_int_param.c2_count.len);
   memcpy(mip_ptr->c2_block_start_date, db_merch_int_param.c2_block_start_date.arr, db_merch_int_param.c2_block_start_date.len);
   memcpy(mip_ptr->c2_block_end_date, 	db_merch_int_param.c2_block_end_date.arr, 	db_merch_int_param.c2_block_end_date.len);
   memcpy(mip_ptr->c3_count, 			db_merch_int_param.c3_count.arr, 			db_merch_int_param.c3_count.len);
   memcpy(mip_ptr->c3_block_start_date, db_merch_int_param.c3_block_start_date.arr, db_merch_int_param.c3_block_start_date.len);
   memcpy(mip_ptr->c3_block_end_date, 	db_merch_int_param.c3_block_end_date.arr, 	db_merch_int_param.c3_block_end_date.len);
   memcpy(mip_ptr->c4_count, 			db_merch_int_param.c4_count.arr, 			db_merch_int_param.c4_count.len);
   memcpy(mip_ptr->c4_block_start_date, db_merch_int_param.c4_block_start_date.arr, db_merch_int_param.c4_block_start_date.len);
   memcpy(mip_ptr->c4_block_end_date, 	db_merch_int_param.c4_block_end_date.arr,	db_merch_int_param.c4_block_end_date.len);
   memcpy(mip_ptr->block_reset_date, 	db_merch_int_param.block_reset_date.arr, 	db_merch_int_param.block_reset_date.len);
   memcpy(mip_ptr->last_declined_rc, 	db_merch_int_param.last_declined_rc.arr, 	db_merch_int_param.last_declined_rc.len);
   memcpy(mip_ptr->reattempts_date, 	db_merch_int_param.reattempts_date.arr, 	db_merch_int_param.reattempts_date.len); 
   memcpy(mip_ptr->first_reattempt_date, 	db_merch_int_param.first_reattempt_date.arr, 	db_merch_int_param.first_reattempt_date.len);
}
#endif
/*************************************************************************************/

/*************************************************************************************/

void db_to_bin01 ( pBIN01 bin01_ptr)

{

   memset(bin01_ptr, 0, sizeof(BIN01));

   memcpy(bin01_ptr->primary_key.type, db_bin01.type.arr, db_bin01.type.len);

   memcpy(bin01_ptr->primary_key.low, db_bin01.low.arr, db_bin01.low.len);

   memcpy(bin01_ptr->primary_key.length, db_bin01.length.arr, db_bin01.length.len);

   memcpy(bin01_ptr->high, db_bin01.high.arr, db_bin01.high.len);

   memcpy(bin01_ptr->primary_key.length, db_bin01.length.arr, db_bin01.length.len);

   memcpy(bin01_ptr->pan_length, db_bin01.pan_length.arr, db_bin01.pan_length.len);

   memcpy(bin01_ptr->auth_ind, db_bin01.auth_ind.arr, db_bin01.auth_ind.len);

   memcpy(bin01_ptr->caf_profile_id, db_bin01.caf_profile_id.arr, db_bin01.caf_profile_id.len);

   memcpy(bin01_ptr->destination_name, db_bin01.destination_name.arr, db_bin01.destination_name.len);

   memcpy(bin01_ptr->alt_destination_name, db_bin01.alt_destination_name.arr, db_bin01.alt_destination_name.len);

   memcpy(bin01_ptr->credit_subtype, db_bin01.credit_subtype.arr, db_bin01.credit_subtype.len);

   memcpy(bin01_ptr->description, db_bin01.description.arr, db_bin01.description.len);

   memcpy(bin01_ptr->card_type, db_bin01.card_type.arr, db_bin01.card_type.len);

   memcpy(bin01_ptr->settle_file_prefix, db_bin01.settle_file_prefix.arr, db_bin01.settle_file_prefix.len);

   memcpy(bin01_ptr->card_family, db_bin01.card_family.arr, db_bin01.card_family.len);
   memcpy(bin01_ptr->acquirer_blocking[0].acquirer_id, db_bin01.acquirer_id1.arr, db_bin01.acquirer_id1.len);
   memcpy(bin01_ptr->acquirer_blocking[1].acquirer_id, db_bin01.acquirer_id2.arr, db_bin01.acquirer_id2.len);
   memcpy(bin01_ptr->acquirer_blocking[2].acquirer_id, db_bin01.acquirer_id3.arr, db_bin01.acquirer_id3.len);
   memcpy(bin01_ptr->acquirer_blocking[3].acquirer_id, db_bin01.acquirer_id4.arr, db_bin01.acquirer_id4.len);
   memcpy(bin01_ptr->acquirer_blocking[4].acquirer_id, db_bin01.acquirer_id5.arr, db_bin01.acquirer_id5.len);
   memcpy(bin01_ptr->acquirer_blocking[5].acquirer_id, db_bin01.acquirer_id6.arr, db_bin01.acquirer_id6.len);
   memcpy(bin01_ptr->acquirer_blocking[6].acquirer_id, db_bin01.acquirer_id7.arr, db_bin01.acquirer_id7.len);
   memcpy(bin01_ptr->acquirer_blocking[7].acquirer_id, db_bin01.acquirer_id8.arr, db_bin01.acquirer_id8.len);
   memcpy(bin01_ptr->acquirer_blocking[8].acquirer_id, db_bin01.acquirer_id9.arr, db_bin01.acquirer_id9.len);
   memcpy(bin01_ptr->acquirer_blocking[9].acquirer_id, db_bin01.acquirer_id10.arr, db_bin01.acquirer_id10.len);
   memcpy(bin01_ptr->acquirer_blocking[10].acquirer_id, db_bin01.acquirer_id11.arr, db_bin01.acquirer_id11.len);
   memcpy(bin01_ptr->acquirer_blocking[11].acquirer_id, db_bin01.acquirer_id12.arr, db_bin01.acquirer_id12.len);
   memcpy(bin01_ptr->acquirer_blocking[12].acquirer_id, db_bin01.acquirer_id13.arr, db_bin01.acquirer_id13.len);
   memcpy(bin01_ptr->acquirer_blocking[13].acquirer_id, db_bin01.acquirer_id14.arr, db_bin01.acquirer_id14.len);
   memcpy(bin01_ptr->acquirer_blocking[14].acquirer_id, db_bin01.acquirer_id15.arr, db_bin01.acquirer_id15.len);
   memcpy(bin01_ptr->acquirer_blocking[15].acquirer_id, db_bin01.acquirer_id16.arr, db_bin01.acquirer_id16.len);
   memcpy(bin01_ptr->acquirer_blocking[16].acquirer_id, db_bin01.acquirer_id17.arr, db_bin01.acquirer_id17.len);
   memcpy(bin01_ptr->acquirer_blocking[17].acquirer_id, db_bin01.acquirer_id18.arr, db_bin01.acquirer_id18.len);
   memcpy(bin01_ptr->acquirer_blocking[18].acquirer_id, db_bin01.acquirer_id19.arr, db_bin01.acquirer_id19.len);
   memcpy(bin01_ptr->acquirer_blocking[19].acquirer_id, db_bin01.acquirer_id20.arr, db_bin01.acquirer_id20.len);

   memcpy(bin01_ptr->mcc_low[0].low_range, db_bin01.mcc1_low.arr, db_bin01.mcc1_low.len);
   memcpy(bin01_ptr->mcc_high[0].high_range, db_bin01.mcc1_high.arr, db_bin01.mcc1_high.len);
   memcpy(bin01_ptr->mcc_low[1].low_range, db_bin01.mcc2_low.arr, db_bin01.mcc2_low.len);
   memcpy(bin01_ptr->mcc_high[1].high_range, db_bin01.mcc2_high.arr, db_bin01.mcc2_high.len);
   memcpy(bin01_ptr->mcc_low[2].low_range, db_bin01.mcc3_low.arr, db_bin01.mcc3_low.len);
   memcpy(bin01_ptr->mcc_high[2].high_range, db_bin01.mcc3_high.arr, db_bin01.mcc3_high.len);
   memcpy(bin01_ptr->mcc_low[3].low_range, db_bin01.mcc4_low.arr, db_bin01.mcc4_low.len);
   memcpy(bin01_ptr->mcc_high[3].high_range, db_bin01.mcc4_high.arr, db_bin01.mcc4_high.len);
   memcpy(bin01_ptr->mcc_low[4].low_range, db_bin01.mcc5_low.arr, db_bin01.mcc5_low.len);
   memcpy(bin01_ptr->mcc_high[4].high_range, db_bin01.mcc5_high.arr, db_bin01.mcc5_high.len);
   memcpy(bin01_ptr->mcc_low[5].low_range, db_bin01.mcc6_low.arr, db_bin01.mcc6_low.len);
   memcpy(bin01_ptr->mcc_high[5].high_range, db_bin01.mcc6_high.arr, db_bin01.mcc6_high.len);
   memcpy(bin01_ptr->mcc_low[6].low_range, db_bin01.mcc7_low.arr, db_bin01.mcc7_low.len);
   memcpy(bin01_ptr->mcc_high[6].high_range, db_bin01.mcc7_high.arr, db_bin01.mcc7_high.len);
   memcpy(bin01_ptr->mcc_low[7].low_range, db_bin01.mcc8_low.arr, db_bin01.mcc8_low.len);
   memcpy(bin01_ptr->mcc_high[7].high_range, db_bin01.mcc8_high.arr, db_bin01.mcc8_high.len);
   memcpy(bin01_ptr->mcc_low[8].low_range, db_bin01.mcc9_low.arr, db_bin01.mcc9_low.len);
   memcpy(bin01_ptr->mcc_high[8].high_range, db_bin01.mcc9_high.arr, db_bin01.mcc9_high.len);
   memcpy(bin01_ptr->mcc_low[9].low_range, db_bin01.mcc10_low.arr, db_bin01.mcc10_low.len);
   memcpy(bin01_ptr->mcc_high[9].high_range, db_bin01.mcc10_high.arr, db_bin01.mcc10_high.len);
   
   memcpy(bin01_ptr->mod_check, db_bin01.mod_check.arr, db_bin01.mod_check.len);


}





/*************************************************************************************/

/*************************************************************************************/

void db_to_ucf01 ( pUCF01 ucf01_ptr )

{

   memset(ucf01_ptr, 0, sizeof(UCF01));

   memcpy(ucf01_ptr->primary_key.name, db_ucf01.name.arr, db_ucf01.name.len);

   memcpy(ucf01_ptr->password, db_ucf01.password.arr, db_ucf01.password.len);

   memcpy(ucf01_ptr->date_added, db_ucf01.date_added.arr, db_ucf01.date_added.len);

   memcpy(ucf01_ptr->group_id, db_ucf01.group_id.arr, db_ucf01.group_id.len);

   memcpy(ucf01_ptr->control[0].subsystem_name, db_ucf01.subsystem_name_1.arr, db_ucf01.subsystem_name_1.len);

   memcpy(ucf01_ptr->control[0].action, db_ucf01.action_1.arr, db_ucf01.action_1.len);

   memcpy(ucf01_ptr->control[1].subsystem_name, db_ucf01.subsystem_name_2.arr, db_ucf01.subsystem_name_2.len);

   memcpy(ucf01_ptr->control[1].action, db_ucf01.action_2.arr, db_ucf01.action_2.len);

   memcpy(ucf01_ptr->control[2].subsystem_name, db_ucf01.subsystem_name_3.arr, db_ucf01.subsystem_name_3.len);

   memcpy(ucf01_ptr->control[2].action, db_ucf01.action_3.arr, db_ucf01.action_3.len);

   memcpy(ucf01_ptr->control[3].subsystem_name, db_ucf01.subsystem_name_4.arr, db_ucf01.subsystem_name_4.len);

   memcpy(ucf01_ptr->control[3].action, db_ucf01.action_4.arr, db_ucf01.action_4.len);

   memcpy(ucf01_ptr->control[4].subsystem_name, db_ucf01.subsystem_name_5.arr, db_ucf01.subsystem_name_5.len);

   memcpy(ucf01_ptr->control[4].action, db_ucf01.action_5.arr, db_ucf01.action_5.len);

   memcpy(ucf01_ptr->control[5].subsystem_name, db_ucf01.subsystem_name_6.arr, db_ucf01.subsystem_name_6.len);

   memcpy(ucf01_ptr->control[5].action, db_ucf01.action_6.arr, db_ucf01.action_6.len);

   memcpy(ucf01_ptr->control[6].subsystem_name, db_ucf01.subsystem_name_7.arr, db_ucf01.subsystem_name_7.len);

   memcpy(ucf01_ptr->control[6].action, db_ucf01.action_7.arr, db_ucf01.action_7.len);

   memcpy(ucf01_ptr->control[7].subsystem_name, db_ucf01.subsystem_name_8.arr, db_ucf01.subsystem_name_8.len);

   memcpy(ucf01_ptr->control[7].action, db_ucf01.action_8.arr, db_ucf01.action_8.len);

   memcpy(ucf01_ptr->control[8].subsystem_name, db_ucf01.subsystem_name_9.arr, db_ucf01.subsystem_name_9.len);

   memcpy(ucf01_ptr->control[8].action, db_ucf01.action_9.arr, db_ucf01.action_9.len);

   memcpy(ucf01_ptr->control[9].subsystem_name, db_ucf01.subsystem_name_10.arr, db_ucf01.subsystem_name_10.len);

   memcpy(ucf01_ptr->control[9].action, db_ucf01.action_10.arr, db_ucf01.action_10.len);

   memcpy(ucf01_ptr->control[10].subsystem_name, db_ucf01.subsystem_name_11.arr, db_ucf01.subsystem_name_11.len);

   memcpy(ucf01_ptr->control[10].action, db_ucf01.action_11.arr, db_ucf01.action_11.len);

   memcpy(ucf01_ptr->control[11].subsystem_name, db_ucf01.subsystem_name_12.arr, db_ucf01.subsystem_name_12.len);

   memcpy(ucf01_ptr->control[11].action, db_ucf01.action_12.arr, db_ucf01.action_12.len);

   memcpy(ucf01_ptr->control[12].subsystem_name, db_ucf01.subsystem_name_13.arr, db_ucf01.subsystem_name_13.len);

   memcpy(ucf01_ptr->control[12].action, db_ucf01.action_13.arr, db_ucf01.action_13.len);

   memcpy(ucf01_ptr->control[13].subsystem_name, db_ucf01.subsystem_name_14.arr, db_ucf01.subsystem_name_14.len);

   memcpy(ucf01_ptr->control[13].action, db_ucf01.action_14.arr, db_ucf01.action_14.len);

   memcpy(ucf01_ptr->control[14].subsystem_name, db_ucf01.subsystem_name_15.arr, db_ucf01.subsystem_name_15.len);

   memcpy(ucf01_ptr->control[14].action, db_ucf01.action_15.arr, db_ucf01.action_15.len);

   memcpy(ucf01_ptr->login[0].terminals, db_ucf01.terminals_1.arr, db_ucf01.terminals_1.len);

   memcpy(ucf01_ptr->login[1].terminals, db_ucf01.terminals_2.arr, db_ucf01.terminals_2.len);

   memcpy(ucf01_ptr->login[2].terminals, db_ucf01.terminals_3.arr, db_ucf01.terminals_3.len);

   memcpy(ucf01_ptr->login[3].terminals, db_ucf01.terminals_4.arr, db_ucf01.terminals_4.len);

   memcpy(ucf01_ptr->login[4].terminals, db_ucf01.terminals_5.arr, db_ucf01.terminals_5.len);

   memcpy(ucf01_ptr->login[5].terminals, db_ucf01.terminals_6.arr, db_ucf01.terminals_6.len);

   memcpy(ucf01_ptr->login[6].terminals, db_ucf01.terminals_7.arr, db_ucf01.terminals_7.len);

   memcpy(ucf01_ptr->login[7].terminals, db_ucf01.terminals_8.arr, db_ucf01.terminals_8.len);

   memcpy(ucf01_ptr->login[8].terminals, db_ucf01.terminals_9.arr, db_ucf01.terminals_9.len);

   memcpy(ucf01_ptr->login[9].terminals, db_ucf01.terminals_10.arr, db_ucf01.terminals_10.len);

   /* New fields ofUcf01 in ATPGen2 */

   memcpy(ucf01_ptr->password_1, db_ucf01.password_1.arr, db_ucf01.password_1.len);

   memcpy(ucf01_ptr->password_2, db_ucf01.password_2.arr, db_ucf01.password_2.len);

   memcpy(ucf01_ptr->password_3, db_ucf01.password_3.arr, db_ucf01.password_3.len);

   memcpy(ucf01_ptr->password_4, db_ucf01.password_4.arr, db_ucf01.password_4.len);
   
   memcpy(ucf01_ptr->accountstatus, db_ucf01.accountstatus.arr, db_ucf01.accountstatus.len);

   memcpy(ucf01_ptr->password_modified_date, db_ucf01.password_modified_date.arr, db_ucf01.password_modified_date.len);

   memcpy(ucf01_ptr->user_info_1, db_ucf01.user_info_1.arr, db_ucf01.user_info_1.len);

   memcpy(ucf01_ptr->user_info_2, db_ucf01.user_info_2.arr, db_ucf01.user_info_2.len);

   memcpy(ucf01_ptr->user_info_3, db_ucf01.user_info_3.arr, db_ucf01.user_info_3.len);

   memcpy(ucf01_ptr->user_info_4, db_ucf01.user_info_4.arr, db_ucf01.user_info_4.len);

   memcpy(ucf01_ptr->user_info_5, db_ucf01.user_info_5.arr, db_ucf01.user_info_5.len);

   memcpy(ucf01_ptr->user_info_6, db_ucf01.user_info_6.arr, db_ucf01.user_info_6.len);

   memcpy(ucf01_ptr->user_info_7, db_ucf01.user_info_7.arr, db_ucf01.user_info_7.len);

   memcpy(ucf01_ptr->ekey, db_ucf01.ekey.arr, db_ucf01.ekey.len);

   memcpy(ucf01_ptr->dekey, db_ucf01.dekey.arr, db_ucf01.dekey.len);
   
   memcpy(ucf01_ptr->control[15].subsystem_name, db_ucf01.subsystem_name_16.arr, db_ucf01.subsystem_name_16.len);

   memcpy(ucf01_ptr->control[15].action, db_ucf01.action_16.arr, db_ucf01.action_16.len);

   memcpy(ucf01_ptr->control[16].subsystem_name, db_ucf01.subsystem_name_17.arr, db_ucf01.subsystem_name_17.len);

   memcpy(ucf01_ptr->control[16].action, db_ucf01.action_17.arr, db_ucf01.action_17.len);

   memcpy(ucf01_ptr->control[17].subsystem_name, db_ucf01.subsystem_name_18.arr, db_ucf01.subsystem_name_18.len);

   memcpy(ucf01_ptr->control[17].action, db_ucf01.action_18.arr, db_ucf01.action_18.len);

   memcpy(ucf01_ptr->control[18].subsystem_name, db_ucf01.subsystem_name_19.arr, db_ucf01.subsystem_name_19.len);

   memcpy(ucf01_ptr->control[18].action, db_ucf01.action_19.arr, db_ucf01.action_19.len);

   memcpy(ucf01_ptr->control[19].subsystem_name, db_ucf01.subsystem_name_20.arr, db_ucf01.subsystem_name_20.len);

   memcpy(ucf01_ptr->control[19].action, db_ucf01.action_20.arr, db_ucf01.action_20.len);

   memcpy(ucf01_ptr->buffer, db_ucf01.buffer.arr, db_ucf01.buffer.len);
   
   memcpy(ucf01_ptr->Login_WorkStationId, db_ucf01.Login_WorkStationId.arr, db_ucf01.Login_WorkStationId.len);
    
   memcpy(ucf01_ptr->Login_Status, db_ucf01.Login_Status.arr, db_ucf01.Login_Status.len);
   
   memcpy(ucf01_ptr->User_Status, db_ucf01.User_Status.arr, db_ucf01.User_Status.len);
   
   memcpy(ucf01_ptr->Days_Inactive, db_ucf01.Days_Inactive.arr, db_ucf01.Days_Inactive.len);
   
   memcpy(ucf01_ptr->Login_Date, db_ucf01.Login_Date.arr, db_ucf01.Login_Date.len);
   
   memcpy(ucf01_ptr->User_Expiry_Date, db_ucf01.User_Expiry_Date.arr, db_ucf01.User_Expiry_Date.len);
   
   memcpy(ucf01_ptr->Date_Of_Deactivation, db_ucf01.Date_Of_Deactivation.arr, db_ucf01.Date_Of_Deactivation.len);
   
   memcpy(ucf01_ptr->password_5, db_ucf01.password_5.arr, db_ucf01.password_5.len);

   memcpy(ucf01_ptr->password_6, db_ucf01.password_6.arr, db_ucf01.password_6.len);

   memcpy(ucf01_ptr->password_7, db_ucf01.password_7.arr, db_ucf01.password_7.len);

   memcpy(ucf01_ptr->password_8, db_ucf01.password_8.arr, db_ucf01.password_8.len);

   memcpy(ucf01_ptr->password_9, db_ucf01.password_9.arr, db_ucf01.password_9.len);

   memcpy(ucf01_ptr->password_10, db_ucf01.password_10.arr, db_ucf01.password_10.len);
   
   memcpy(ucf01_ptr->Logout_Date, db_ucf01.Logout_Date.arr, db_ucf01.Logout_Date.len);
  

}

 
/*************************************************************************************/
/*Added UCF03 Table for PCI Changes by TF-Srikanth */
/*************************************************************************************/

void db_to_ucf03 ( pUCF03 ucf03_ptr )

{

   memset(ucf03_ptr, 0, sizeof(UCF03));

   memcpy(ucf03_ptr->foreign_key.name, db_ucf03.name.arr, db_ucf03.name.len);

   memcpy(ucf03_ptr->password_1, db_ucf03.password_1.arr, db_ucf03.password_1.len);

   memcpy(ucf03_ptr->password_2, db_ucf03.password_2.arr, db_ucf03.password_2.len);

   memcpy(ucf03_ptr->password_3, db_ucf03.password_3.arr, db_ucf03.password_3.len);

   memcpy(ucf03_ptr->password_4, db_ucf03.password_4.arr, db_ucf03.password_4.len);

   memcpy(ucf03_ptr->accountstatus, db_ucf03.accountstatus.arr, db_ucf03.accountstatus.len);

   memcpy(ucf03_ptr->password_modified_date, db_ucf03.password_modified_date.arr, db_ucf03.password_modified_date.len);

   memcpy(ucf03_ptr->user_info_1, db_ucf03.user_info_1.arr, db_ucf03.user_info_1.len);

   memcpy(ucf03_ptr->user_info_2, db_ucf03.user_info_2.arr, db_ucf03.user_info_2.len);

   memcpy(ucf03_ptr->user_info_3, db_ucf03.user_info_3.arr, db_ucf03.user_info_3.len);

   memcpy(ucf03_ptr->user_info_4, db_ucf03.user_info_4.arr, db_ucf03.user_info_4.len);
   
   memcpy(ucf03_ptr->ekey, db_ucf03.ekey.arr, db_ucf03.ekey.len);

   memcpy(ucf03_ptr->dekey, db_ucf03.dekey.arr, db_ucf03.dekey.len);
  

}

 
/*************************************************************************************/

/*************************************************************************************/

void db_to_ucf02 ( pUCF02 ucf02_ptr )

{

   memset(ucf02_ptr, 0, sizeof(UCF02));

   memcpy(ucf02_ptr->primary_key.group_id, db_ucf02.group_id.arr, db_ucf02.group_id.len);

   memcpy(ucf02_ptr->date_added, db_ucf02.date_added.arr, db_ucf02.date_added.len);

   memcpy(ucf02_ptr->control[0].subsystem_name, db_ucf02.subsystem_name_1.arr, db_ucf02.subsystem_name_1.len);

   memcpy(ucf02_ptr->control[0].action, db_ucf02.action_1.arr, db_ucf02.action_1.len);

   memcpy(ucf02_ptr->control[1].subsystem_name, db_ucf02.subsystem_name_2.arr, db_ucf02.subsystem_name_2.len);

   memcpy(ucf02_ptr->control[1].action, db_ucf02.action_2.arr, db_ucf02.action_2.len);

   memcpy(ucf02_ptr->control[2].subsystem_name, db_ucf02.subsystem_name_3.arr, db_ucf02.subsystem_name_3.len);

   memcpy(ucf02_ptr->control[2].action, db_ucf02.action_3.arr, db_ucf02.action_3.len);

   memcpy(ucf02_ptr->control[3].subsystem_name, db_ucf02.subsystem_name_4.arr, db_ucf02.subsystem_name_4.len);

   memcpy(ucf02_ptr->control[3].action, db_ucf02.action_4.arr, db_ucf02.action_4.len);

   memcpy(ucf02_ptr->control[4].subsystem_name, db_ucf02.subsystem_name_5.arr, db_ucf02.subsystem_name_5.len);

   memcpy(ucf02_ptr->control[4].action, db_ucf02.action_5.arr, db_ucf02.action_5.len);

   memcpy(ucf02_ptr->control[5].subsystem_name, db_ucf02.subsystem_name_6.arr, db_ucf02.subsystem_name_6.len);

   memcpy(ucf02_ptr->control[5].action, db_ucf02.action_6.arr, db_ucf02.action_6.len);

   memcpy(ucf02_ptr->control[6].subsystem_name, db_ucf02.subsystem_name_7.arr, db_ucf02.subsystem_name_7.len);

   memcpy(ucf02_ptr->control[6].action, db_ucf02.action_7.arr, db_ucf02.action_7.len);

   memcpy(ucf02_ptr->control[7].subsystem_name, db_ucf02.subsystem_name_8.arr, db_ucf02.subsystem_name_8.len);

   memcpy(ucf02_ptr->control[7].action, db_ucf02.action_8.arr, db_ucf02.action_8.len);

   memcpy(ucf02_ptr->control[8].subsystem_name, db_ucf02.subsystem_name_9.arr, db_ucf02.subsystem_name_9.len);

   memcpy(ucf02_ptr->control[8].action, db_ucf02.action_9.arr, db_ucf02.action_9.len);

   memcpy(ucf02_ptr->control[9].subsystem_name, db_ucf02.subsystem_name_10.arr, db_ucf02.subsystem_name_10.len);

   memcpy(ucf02_ptr->control[9].action, db_ucf02.action_10.arr, db_ucf02.action_10.len);

   memcpy(ucf02_ptr->control[10].subsystem_name, db_ucf02.subsystem_name_11.arr, db_ucf02.subsystem_name_11.len);

   memcpy(ucf02_ptr->control[10].action, db_ucf02.action_11.arr, db_ucf02.action_11.len);

   memcpy(ucf02_ptr->control[11].subsystem_name, db_ucf02.subsystem_name_12.arr, db_ucf02.subsystem_name_12.len);

   memcpy(ucf02_ptr->control[11].action, db_ucf02.action_12.arr, db_ucf02.action_12.len);

   memcpy(ucf02_ptr->control[12].subsystem_name, db_ucf02.subsystem_name_13.arr, db_ucf02.subsystem_name_13.len);

   memcpy(ucf02_ptr->control[12].action, db_ucf02.action_13.arr, db_ucf02.action_13.len);

   memcpy(ucf02_ptr->control[13].subsystem_name, db_ucf02.subsystem_name_14.arr, db_ucf02.subsystem_name_14.len);

   memcpy(ucf02_ptr->control[13].action, db_ucf02.action_14.arr, db_ucf02.action_14.len);

   memcpy(ucf02_ptr->control[14].subsystem_name, db_ucf02.subsystem_name_15.arr, db_ucf02.subsystem_name_15.len);

   memcpy(ucf02_ptr->control[14].action, db_ucf02.action_15.arr, db_ucf02.action_15.len);

   memcpy(ucf02_ptr->login[0].terminals, db_ucf02.terminals_1.arr, db_ucf02.terminals_1.len);

   memcpy(ucf02_ptr->login[1].terminals, db_ucf02.terminals_2.arr, db_ucf02.terminals_2.len);

   memcpy(ucf02_ptr->login[2].terminals, db_ucf02.terminals_3.arr, db_ucf02.terminals_3.len);

   memcpy(ucf02_ptr->login[3].terminals, db_ucf02.terminals_4.arr, db_ucf02.terminals_4.len);

   memcpy(ucf02_ptr->login[4].terminals, db_ucf02.terminals_5.arr, db_ucf02.terminals_5.len);

   memcpy(ucf02_ptr->login[5].terminals, db_ucf02.terminals_6.arr, db_ucf02.terminals_6.len);

   memcpy(ucf02_ptr->login[6].terminals, db_ucf02.terminals_7.arr, db_ucf02.terminals_7.len);

   memcpy(ucf02_ptr->login[7].terminals, db_ucf02.terminals_8.arr, db_ucf02.terminals_8.len);

   memcpy(ucf02_ptr->login[8].terminals, db_ucf02.terminals_9.arr, db_ucf02.terminals_9.len);

   memcpy(ucf02_ptr->login[9].terminals, db_ucf02.terminals_10.arr, db_ucf02.terminals_10.len);

   memcpy(ucf02_ptr->control[15].subsystem_name, db_ucf02.subsystem_name_16.arr, db_ucf02.subsystem_name_16.len);

   memcpy(ucf02_ptr->control[15].action, db_ucf02.action_16.arr, db_ucf02.action_16.len);

   memcpy(ucf02_ptr->control[16].subsystem_name, db_ucf02.subsystem_name_17.arr, db_ucf02.subsystem_name_17.len);

   memcpy(ucf02_ptr->control[16].action, db_ucf02.action_17.arr, db_ucf02.action_17.len);

   memcpy(ucf02_ptr->control[17].subsystem_name, db_ucf02.subsystem_name_18.arr, db_ucf02.subsystem_name_18.len);

   memcpy(ucf02_ptr->control[17].action, db_ucf02.action_18.arr, db_ucf02.action_18.len);

   memcpy(ucf02_ptr->control[18].subsystem_name, db_ucf02.subsystem_name_19.arr, db_ucf02.subsystem_name_19.len);

   memcpy(ucf02_ptr->control[18].action, db_ucf02.action_19.arr, db_ucf02.action_19.len);

   memcpy(ucf02_ptr->control[19].subsystem_name, db_ucf02.subsystem_name_20.arr, db_ucf02.subsystem_name_20.len);

   memcpy(ucf02_ptr->control[19].action, db_ucf02.action_20.arr, db_ucf02.action_20.len);

   memcpy(ucf02_ptr->buffer, db_ucf02.buffer.arr, db_ucf02.buffer.len);

}









/*************************************************************************************/

/*************************************************************************************/

void db_to_ccf04 ( pCCF04 ccf04_ptr )

{

   memset(ccf04_ptr, 0, sizeof(CCF04));

   memcpy(ccf04_ptr->primary_key.card_type, db_ccf04.card_type.arr, db_ccf04.card_type.len);

   memcpy(ccf04_ptr->primary_key.card_nbr, db_ccf04.card_nbr.arr, db_ccf04.card_nbr.len);   

   memcpy(ccf04_ptr->mcc_lo_range, db_ccf04.mcc_lo_range.arr, db_ccf04.mcc_lo_range.len);

   memcpy(ccf04_ptr->mcc_hi_range, db_ccf04.mcc_hi_range.arr, db_ccf04.mcc_hi_range.len);

 /*  memcpy(ccf04_ptr->range[1].mcc_lo_range, db_ccf04.mcc_lo_range_2.arr, db_ccf04.mcc_lo_range_2.len);

   memcpy(ccf04_ptr->range[1].mcc_hi_range, db_ccf04.mcc_hi_range_2.arr, db_ccf04.mcc_hi_range_2.len);

   memcpy(ccf04_ptr->range[2].mcc_lo_range, db_ccf04.mcc_lo_range_3.arr, db_ccf04.mcc_lo_range_3.len);

   memcpy(ccf04_ptr->range[2].mcc_hi_range, db_ccf04.mcc_hi_range_3.arr, db_ccf04.mcc_hi_range_3.len);

   memcpy(ccf04_ptr->range[3].mcc_lo_range, db_ccf04.mcc_lo_range_4.arr, db_ccf04.mcc_lo_range_4.len);

   memcpy(ccf04_ptr->range[3].mcc_hi_range, db_ccf04.mcc_hi_range_4.arr, db_ccf04.mcc_hi_range_4.len);

   memcpy(ccf04_ptr->range[4].mcc_lo_range, db_ccf04.mcc_lo_range_5.arr, db_ccf04.mcc_lo_range_5.len);

   memcpy(ccf04_ptr->range[4].mcc_hi_range, db_ccf04.mcc_hi_range_5.arr, db_ccf04.mcc_hi_range_5.len);

   memcpy(ccf04_ptr->range[5].mcc_lo_range, db_ccf04.mcc_lo_range_6.arr, db_ccf04.mcc_lo_range_6.len);

   memcpy(ccf04_ptr->range[5].mcc_hi_range, db_ccf04.mcc_hi_range_6.arr, db_ccf04.mcc_hi_range_6.len);

   memcpy(ccf04_ptr->range[6].mcc_lo_range, db_ccf04.mcc_lo_range_7.arr, db_ccf04.mcc_lo_range_7.len);

   memcpy(ccf04_ptr->range[6].mcc_hi_range, db_ccf04.mcc_hi_range_7.arr, db_ccf04.mcc_hi_range_7.len);

   memcpy(ccf04_ptr->range[7].mcc_lo_range, db_ccf04.mcc_lo_range_8.arr, db_ccf04.mcc_lo_range_8.len);

   memcpy(ccf04_ptr->range[7].mcc_hi_range, db_ccf04.mcc_hi_range_8.arr, db_ccf04.mcc_hi_range_8.len);

   memcpy(ccf04_ptr->range[8].mcc_lo_range, db_ccf04.mcc_lo_range_9.arr, db_ccf04.mcc_lo_range_9.len);

   memcpy(ccf04_ptr->range[8].mcc_hi_range, db_ccf04.mcc_hi_range_9.arr, db_ccf04.mcc_hi_range_9.len);
   memcpy(ccf04_ptr->range[9].mcc_lo_range, db_ccf04.mcc_lo_range_10.arr, db_ccf04.mcc_lo_range_10.len);
   memcpy(ccf04_ptr->range[9].mcc_hi_range, db_ccf04.mcc_hi_range_10.arr, db_ccf04.mcc_hi_range_10.len);
   memcpy(ccf04_ptr->range[10].mcc_lo_range, db_ccf04.mcc_lo_range_11.arr, db_ccf04.mcc_lo_range_11.len);
   memcpy(ccf04_ptr->range[10].mcc_hi_range, db_ccf04.mcc_hi_range_11.arr, db_ccf04.mcc_hi_range_11.len);
   memcpy(ccf04_ptr->range[11].mcc_lo_range, db_ccf04.mcc_lo_range_12.arr, db_ccf04.mcc_lo_range_12.len);
   memcpy(ccf04_ptr->range[11].mcc_hi_range, db_ccf04.mcc_hi_range_12.arr, db_ccf04.mcc_hi_range_12.len);
   memcpy(ccf04_ptr->range[12].mcc_lo_range, db_ccf04.mcc_lo_range_13.arr, db_ccf04.mcc_lo_range_13.len);
   memcpy(ccf04_ptr->range[12].mcc_hi_range, db_ccf04.mcc_hi_range_13.arr, db_ccf04.mcc_hi_range_13.len);
   memcpy(ccf04_ptr->range[13].mcc_lo_range, db_ccf04.mcc_lo_range_14.arr, db_ccf04.mcc_lo_range_14.len);
   memcpy(ccf04_ptr->range[13].mcc_hi_range, db_ccf04.mcc_hi_range_14.arr, db_ccf04.mcc_hi_range_14.len);
   memcpy(ccf04_ptr->range[14].mcc_lo_range, db_ccf04.mcc_lo_range_15.arr, db_ccf04.mcc_lo_range_15.len);
   memcpy(ccf04_ptr->range[14].mcc_hi_range, db_ccf04.mcc_hi_range_15.arr, db_ccf04.mcc_hi_range_15.len);
   memcpy(ccf04_ptr->range[15].mcc_lo_range, db_ccf04.mcc_lo_range_16.arr, db_ccf04.mcc_lo_range_16.len);
   memcpy(ccf04_ptr->range[15].mcc_hi_range, db_ccf04.mcc_hi_range_16.arr, db_ccf04.mcc_hi_range_16.len);
   memcpy(ccf04_ptr->range[16].mcc_lo_range, db_ccf04.mcc_lo_range_17.arr, db_ccf04.mcc_lo_range_17.len);
   memcpy(ccf04_ptr->range[16].mcc_hi_range, db_ccf04.mcc_hi_range_17.arr, db_ccf04.mcc_hi_range_17.len);
   memcpy(ccf04_ptr->range[17].mcc_lo_range, db_ccf04.mcc_lo_range_18.arr, db_ccf04.mcc_lo_range_18.len);
   memcpy(ccf04_ptr->range[17].mcc_hi_range, db_ccf04.mcc_hi_range_18.arr, db_ccf04.mcc_hi_range_18.len);
   memcpy(ccf04_ptr->range[18].mcc_lo_range, db_ccf04.mcc_lo_range_19.arr, db_ccf04.mcc_lo_range_19.len);
   memcpy(ccf04_ptr->range[18].mcc_hi_range, db_ccf04.mcc_hi_range_19.arr, db_ccf04.mcc_hi_range_19.len);
   memcpy(ccf04_ptr->range[19].mcc_lo_range, db_ccf04.mcc_lo_range_20.arr, db_ccf04.mcc_lo_range_20.len);
   memcpy(ccf04_ptr->range[19].mcc_hi_range, db_ccf04.mcc_hi_range_20.arr, db_ccf04.mcc_hi_range_20.len);
*/
}

void db_to_cr01 ( pCR01 cr01_ptr )

{

   memset(cr01_ptr, 0, sizeof(CR01));

   memcpy(cr01_ptr->rule_id,db_cr01.rule_id.arr, db_cr01.rule_id.len);
      memcpy(cr01_ptr->rule_bin_high,db_cr01.rule_bin_high.arr, db_cr01.rule_bin_high.len);

   memcpy(cr01_ptr->rule_bin_low,db_cr01.rule_bin_low.arr, db_cr01.rule_bin_low.len);

   memcpy(cr01_ptr->rulename,db_cr01.rulename.arr, db_cr01.rulename.len);

   memcpy(cr01_ptr->status,db_cr01.status.arr, db_cr01.status.len);

   memcpy(cr01_ptr->rule_processing,db_cr01.rule_processing.arr, db_cr01.rule_processing.len);

   memcpy(cr01_ptr->single_amtlimit,db_cr01.single_amtlimit.arr, db_cr01.single_amtlimit.len);

   memcpy(cr01_ptr->acc_amtlimit,db_cr01.acc_amtlimit.arr, db_cr01.acc_amtlimit.len);
   memcpy(cr01_ptr->acc_amtlimit_counter,db_cr01.acc_amtlimit_counter.arr, db_cr01.acc_amtlimit_counter.len);
   
   memcpy(cr01_ptr->acc_transactionlimit,db_cr01.acc_transactionlimit.arr, db_cr01.acc_transactionlimit.len);
    memcpy(cr01_ptr->acc_transactionlimit_counter,db_cr01.acc_transactionlimit_counter.arr, db_cr01.acc_transactionlimit_counter.len);

   memcpy(cr01_ptr->response_code , db_cr01.response_code.arr, db_cr01.response_code.len);

   memcpy(cr01_ptr->cardnum_blocking[0].exception_cardnum,db_cr01.exception_cardnum_1.arr,db_cr01.exception_cardnum_1.len);
   memcpy(cr01_ptr->cardnum_blocking[1].exception_cardnum,db_cr01.exception_cardnum_2.arr,db_cr01.exception_cardnum_2.len);
   memcpy(cr01_ptr->cardnum_blocking[2].exception_cardnum,db_cr01.exception_cardnum_3.arr,db_cr01.exception_cardnum_3.len);
   memcpy(cr01_ptr->cardnum_blocking[3].exception_cardnum,db_cr01.exception_cardnum_4.arr,db_cr01.exception_cardnum_4.len);
   memcpy(cr01_ptr->cardnum_blocking[4].exception_cardnum,db_cr01.exception_cardnum_5.arr,db_cr01.exception_cardnum_5.len);
   memcpy(cr01_ptr->cardnum_blocking[5].exception_cardnum,db_cr01.exception_cardnum_6.arr,db_cr01.exception_cardnum_6.len);
   memcpy(cr01_ptr->cardnum_blocking[6].exception_cardnum,db_cr01.exception_cardnum_7.arr,db_cr01.exception_cardnum_7.len);
   memcpy(cr01_ptr->cardnum_blocking[7].exception_cardnum,db_cr01.exception_cardnum_8.arr,db_cr01.exception_cardnum_8.len);
   memcpy(cr01_ptr->cardnum_blocking[8].exception_cardnum,db_cr01.exception_cardnum_9.arr,db_cr01.exception_cardnum_9.len);
   memcpy(cr01_ptr->cardnum_blocking[9].exception_cardnum,db_cr01.exception_cardnum_10.arr,db_cr01.exception_cardnum_10.len);
   memcpy(cr01_ptr->cardnum_blocking[10].exception_cardnum,db_cr01.exception_cardnum_11.arr,db_cr01.exception_cardnum_11.len);
   memcpy(cr01_ptr->cardnum_blocking[11].exception_cardnum,db_cr01.exception_cardnum_12.arr,db_cr01.exception_cardnum_12.len);
memcpy(cr01_ptr->cardnum_blocking[12].exception_cardnum,db_cr01.exception_cardnum_13.arr,db_cr01.exception_cardnum_13.len);
   memcpy(cr01_ptr->cardnum_blocking[13].exception_cardnum ,db_cr01.exception_cardnum_14.arr,db_cr01.exception_cardnum_14.len);
   memcpy(cr01_ptr->cardnum_blocking[14].exception_cardnum ,db_cr01.exception_cardnum_15.arr,db_cr01.exception_cardnum_15.len);
   memcpy(cr01_ptr->cardnum_blocking[15].exception_cardnum ,db_cr01.exception_cardnum_16.arr,db_cr01.exception_cardnum_16.len);
   memcpy(cr01_ptr->cardnum_blocking[16].exception_cardnum ,db_cr01.exception_cardnum_17.arr,db_cr01.exception_cardnum_17.len);
   memcpy(cr01_ptr->cardnum_blocking[17].exception_cardnum ,db_cr01.exception_cardnum_18.arr,db_cr01.exception_cardnum_18.len);
   memcpy(cr01_ptr->cardnum_blocking[18].exception_cardnum ,db_cr01.exception_cardnum_19.arr,db_cr01.exception_cardnum_19.len);
   memcpy(cr01_ptr->cardnum_blocking[19].exception_cardnum ,db_cr01.exception_cardnum_20.arr,db_cr01.exception_cardnum_20.len);
   memcpy(cr01_ptr->cardnum_blocking[20].exception_cardnum ,db_cr01.exception_cardnum_21.arr,db_cr01.exception_cardnum_21.len);
   memcpy(cr01_ptr->cardnum_blocking[21].exception_cardnum ,db_cr01.exception_cardnum_22.arr,db_cr01.exception_cardnum_22.len);
   memcpy(cr01_ptr->cardnum_blocking[22].exception_cardnum ,db_cr01.exception_cardnum_23.arr,db_cr01.exception_cardnum_23.len);
   memcpy(cr01_ptr->cardnum_blocking[23].exception_cardnum ,db_cr01.exception_cardnum_24.arr,db_cr01.exception_cardnum_24.len);
  memcpy(cr01_ptr->cardnum_blocking[24].exception_cardnum ,db_cr01.exception_cardnum_25.arr,db_cr01.exception_cardnum_25.len);
   memcpy(cr01_ptr->cardnum_blocking[25].exception_cardnum ,db_cr01.exception_cardnum_26.arr,db_cr01.exception_cardnum_26.len);
  memcpy(cr01_ptr->cardnum_blocking[26].exception_cardnum ,db_cr01.exception_cardnum_27.arr,db_cr01.exception_cardnum_27.len);
    memcpy(cr01_ptr->cardnum_blocking[27].exception_cardnum ,db_cr01.exception_cardnum_28.arr,db_cr01.exception_cardnum_28.len);
    memcpy(cr01_ptr->cardnum_blocking[28].exception_cardnum ,db_cr01.exception_cardnum_29.arr,db_cr01.exception_cardnum_29.len);
    memcpy(cr01_ptr->cardnum_blocking[29].exception_cardnum ,db_cr01.exception_cardnum_30.arr,db_cr01.exception_cardnum_30.len);
    memcpy(cr01_ptr->cardnum_blocking[30].exception_cardnum ,db_cr01.exception_cardnum_31.arr,db_cr01.exception_cardnum_31.len);
    memcpy(cr01_ptr->cardnum_blocking[31].exception_cardnum ,db_cr01.exception_cardnum_32.arr,db_cr01.exception_cardnum_32.len);
    memcpy(cr01_ptr->cardnum_blocking[32].exception_cardnum ,db_cr01.exception_cardnum_33.arr,db_cr01.exception_cardnum_33.len);
    memcpy(cr01_ptr->cardnum_blocking[33].exception_cardnum ,db_cr01.exception_cardnum_34.arr,db_cr01.exception_cardnum_34.len);
    memcpy(cr01_ptr->cardnum_blocking[34].exception_cardnum ,db_cr01.exception_cardnum_35.arr,db_cr01.exception_cardnum_35.len);
    memcpy(cr01_ptr->cardnum_blocking[35].exception_cardnum ,db_cr01.exception_cardnum_36.arr,db_cr01.exception_cardnum_36.len);
    memcpy(cr01_ptr->cardnum_blocking[36].exception_cardnum,db_cr01.exception_cardnum_37.arr,db_cr01.exception_cardnum_37.len);
    memcpy(cr01_ptr->cardnum_blocking[37].exception_cardnum,db_cr01.exception_cardnum_38.arr,db_cr01.exception_cardnum_38.len);
    memcpy(cr01_ptr->cardnum_blocking[38].exception_cardnum,db_cr01.exception_cardnum_39.arr,db_cr01.exception_cardnum_39.len);
    memcpy(cr01_ptr->cardnum_blocking[39].exception_cardnum,db_cr01.exception_cardnum_40.arr,db_cr01.exception_cardnum_40.len);
    memcpy(cr01_ptr->cardnum_blocking[40].exception_cardnum,db_cr01.exception_cardnum_41.arr,db_cr01.exception_cardnum_41.len);
    memcpy(cr01_ptr->cardnum_blocking[41].exception_cardnum,db_cr01.exception_cardnum_42.arr,db_cr01.exception_cardnum_42.len);
    memcpy(cr01_ptr->cardnum_blocking[42].exception_cardnum,db_cr01.exception_cardnum_43.arr,db_cr01.exception_cardnum_43.len);
    memcpy(cr01_ptr->cardnum_blocking[43].exception_cardnum,db_cr01.exception_cardnum_44.arr,db_cr01.exception_cardnum_44.len);
    memcpy(cr01_ptr->cardnum_blocking[44].exception_cardnum,db_cr01.exception_cardnum_45.arr,db_cr01.exception_cardnum_45.len);
    memcpy(cr01_ptr->cardnum_blocking[45].exception_cardnum,db_cr01.exception_cardnum_46.arr,db_cr01.exception_cardnum_46.len);
    memcpy(cr01_ptr->cardnum_blocking[46].exception_cardnum,db_cr01.exception_cardnum_47.arr,db_cr01.exception_cardnum_47.len);
    memcpy(cr01_ptr->cardnum_blocking[47].exception_cardnum,db_cr01.exception_cardnum_48.arr,db_cr01.exception_cardnum_48.len);
    memcpy(cr01_ptr->cardnum_blocking[48].exception_cardnum,db_cr01.exception_cardnum_49.arr,db_cr01.exception_cardnum_49.len);
    memcpy(cr01_ptr->cardnum_blocking[49].exception_cardnum,db_cr01.exception_cardnum_50.arr,db_cr01.exception_cardnum_50.len);

   memcpy(cr01_ptr->future_use_1 , db_cr01.future_use_1.arr, db_cr01.future_use_1.len);
   
   memcpy(cr01_ptr->future_use_2 , db_cr01.future_use_2.arr, db_cr01.future_use_2.len);
   
   memcpy(cr01_ptr->future_use_3 , db_cr01.future_use_3.arr, db_cr01.future_use_3.len);
   
   memcpy(cr01_ptr->future_use_4 , db_cr01.future_use_4.arr, db_cr01.future_use_4.len);
   
   memcpy(cr01_ptr->future_use_5 , db_cr01.future_use_5.arr, db_cr01.future_use_5.len);
   
   memcpy(cr01_ptr->future_use_6 , db_cr01.future_use_6.arr, db_cr01.future_use_6.len);
   
   memcpy(cr01_ptr->future_use_7 , db_cr01.future_use_7.arr, db_cr01.future_use_7.len);
   
   memcpy(cr01_ptr->future_use_8 , db_cr01.future_use_8.arr, db_cr01.future_use_8.len);
   
   memcpy(cr01_ptr->future_use_9 , db_cr01.future_use_9.arr, db_cr01.future_use_9.len);
   
   memcpy(cr01_ptr->future_use_10 , db_cr01.future_use_10.arr, db_cr01.future_use_10.len);

}

/*************************************************************************************/
/*************************************************************************************/
  void db_to_mppara01(pMPPARA01 mppara01_ptr)
   {
   	 memset(mppara01_ptr, 0, sizeof(MPPARA01));
	 memcpy(mppara01_ptr->primary_key.product_code,  db_mppara01.product_code.arr, 			   db_mppara01.product_code.len);
	 memcpy(mppara01_ptr->minmajpurchamt, 			 db_mppara01.minmajpurchamt.arr, 		   db_mppara01.minmajpurchamt.len);
   	 memcpy(mppara01_ptr->maxmajpurchamt, 			 db_mppara01.maxmajpurchamt.arr, 		   db_mppara01.maxmajpurchamt.len);
     memcpy(mppara01_ptr->mininstamt, 				 db_mppara01.mininstamt.arr, 			   db_mppara01.mininstamt.len);
	 memcpy(mppara01_ptr->maxinstamt, 				 db_mppara01.maxinstamt.arr, 		       db_mppara01.maxinstamt.len);
	 memcpy(mppara01_ptr->minmajpurchlmt, 			 db_mppara01.minmajpurchlmt.arr, 		   db_mppara01.minmajpurchlmt.len);
	 memcpy(mppara01_ptr->minpenaltyamt, 			 db_mppara01.minpenaltyamt.arr, 		   db_mppara01.minpenaltyamt.len);
	 memcpy(mppara01_ptr->maxpenaltyamt, 			 db_mppara01.maxpenaltyamt.arr, 		   db_mppara01.maxpenaltyamt.len);
	 memcpy(mppara01_ptr->penaltyper, 				 db_mppara01.penaltyper.arr, 			   db_mppara01.penaltyper.len);
	 memcpy(mppara01_ptr->penaltyday, 				 db_mppara01.penaltyday.arr, 			   db_mppara01.penaltyday.len);
	 memcpy(mppara01_ptr->minamtofaging, 			 db_mppara01.minamtofaging.arr, 		   db_mppara01.minamtofaging.len);
	 memcpy(mppara01_ptr->mntowrtof, 				 db_mppara01.mntowrtof.arr, 			   db_mppara01.mntowrtof.len);
	 memcpy(mppara01_ptr->BPIminamt, 				 db_mppara01.BPIminamt.arr, 			   db_mppara01.BPIminamt.len);
	 memcpy(mppara01_ptr->brokenperdinst, 			 db_mppara01.brokenperdinst.arr, 		   db_mppara01.brokenperdinst.len);
	 memcpy(mppara01_ptr->minfreepurchamt, 			 db_mppara01.minfreepurchamt.arr, 		   db_mppara01.minfreepurchamt.len);
	 memcpy(mppara01_ptr->errorunauthamt, 			 db_mppara01.errorunauthamt.arr, 		   db_mppara01.errorunauthamt.len);
	 memcpy(mppara01_ptr->fixedmpfee, 				 db_mppara01.fixedmpfee.arr,			   db_mppara01.fixedmpfee.len);
	 memcpy(mppara01_ptr->mpfeepercnt, 				 db_mppara01.mpfeepercnt.arr, 			   db_mppara01.mpfeepercnt.len);
	 memcpy(mppara01_ptr->earlyrepayfeeper, 		 db_mppara01.earlyrepayfeeper.arr,         db_mppara01.earlyrepayfeeper.len);
	 memcpy(mppara01_ptr->effective_date, 			 db_mppara01.effective_date.arr,           db_mppara01.effective_date.len);
	 memcpy(mppara01_ptr->maxtrnperday, 			 db_mppara01.maxtrnperday.arr,             db_mppara01.maxtrnperday.len);
	 memcpy(mppara01_ptr->maxamtperday, 			 db_mppara01.maxamtperday.arr,             db_mppara01.maxamtperday.len);
	 memcpy(mppara01_ptr->authoverlimit, 			 db_mppara01.authoverlimit.arr,            db_mppara01.authoverlimit.len);
	 memcpy(mppara01_ptr->authpara[0].response_code, db_mppara01.authpara_response_code_1.arr, db_mppara01.authpara_response_code_1.len);
	 memcpy(mppara01_ptr->authpara[0].message,		 db_mppara01.authpara_message_1.arr, 	   db_mppara01.authpara_message_1.len);
	 memcpy(mppara01_ptr->authpara[1].response_code, db_mppara01.authpara_response_code_2.arr, db_mppara01.authpara_response_code_2.len);
	 memcpy(mppara01_ptr->authpara[1].message, 		 db_mppara01.authpara_message_2.arr,       db_mppara01.authpara_message_2.len);
	 memcpy(mppara01_ptr->authpara[2].response_code, db_mppara01.authpara_response_code_3.arr, db_mppara01.authpara_response_code_3.len);
	 memcpy(mppara01_ptr->authpara[2].message, 		 db_mppara01.authpara_message_3.arr,       db_mppara01.authpara_message_3.len);

   
   }
/*************************************************************************************/
/*************************************************************************************/
/*************************************************************************************/

void db_to_binblkmid01 (pMIDBINBLK01 binblkmid01_ptr )
{
	memset(binblkmid01_ptr, 0, sizeof(MIDBINBLK01));
	memcpy(binblkmid01_ptr->bin_low, db_binblkmid01.bin_low.arr, db_binblkmid01.bin_low.len);
	memcpy(binblkmid01_ptr->bin_high, db_binblkmid01.bin_high.arr, db_binblkmid01.bin_high.len);
	memcpy(binblkmid01_ptr->card_type, db_binblkmid01.card_type.arr, db_binblkmid01.card_type.len);
	memcpy(binblkmid01_ptr->pan_length, db_binblkmid01.pan_length.arr, db_binblkmid01.pan_length.len);
	memcpy(binblkmid01_ptr->bin_length, db_binblkmid01.bin_length.arr, db_binblkmid01.bin_length.len);
	memcpy(binblkmid01_ptr->merchant_blocking[0].merchant_id, db_binblkmid01.mid_block_1.arr, db_binblkmid01.mid_block_1.len);
	memcpy(binblkmid01_ptr->merchant_blocking[1].merchant_id, db_binblkmid01.mid_block_2.arr, db_binblkmid01.mid_block_2.len);
	memcpy(binblkmid01_ptr->merchant_blocking[2].merchant_id, db_binblkmid01.mid_block_3.arr, db_binblkmid01.mid_block_3.len);
	memcpy(binblkmid01_ptr->merchant_blocking[3].merchant_id, db_binblkmid01.mid_block_4.arr, db_binblkmid01.mid_block_4.len);
	memcpy(binblkmid01_ptr->merchant_blocking[4].merchant_id, db_binblkmid01.mid_block_5.arr, db_binblkmid01.mid_block_5.len);
	memcpy(binblkmid01_ptr->merchant_blocking[5].merchant_id, db_binblkmid01.mid_block_6.arr, db_binblkmid01.mid_block_6.len);
	memcpy(binblkmid01_ptr->merchant_blocking[6].merchant_id, db_binblkmid01.mid_block_7.arr, db_binblkmid01.mid_block_7.len);
	memcpy(binblkmid01_ptr->merchant_blocking[7].merchant_id, db_binblkmid01.mid_block_8.arr, db_binblkmid01.mid_block_8.len);
	memcpy(binblkmid01_ptr->merchant_blocking[8].merchant_id, db_binblkmid01.mid_block_9.arr, db_binblkmid01.mid_block_9.len);
	memcpy(binblkmid01_ptr->merchant_blocking[9].merchant_id, db_binblkmid01.mid_block_10.arr, db_binblkmid01.mid_block_10.len);
	memcpy(binblkmid01_ptr->merchant_blocking[10].merchant_id, db_binblkmid01.mid_block_11.arr, db_binblkmid01.mid_block_11.len);
	memcpy(binblkmid01_ptr->merchant_blocking[11].merchant_id, db_binblkmid01.mid_block_12.arr, db_binblkmid01.mid_block_12.len);
	memcpy(binblkmid01_ptr->merchant_blocking[12].merchant_id, db_binblkmid01.mid_block_13.arr, db_binblkmid01.mid_block_13.len);
	memcpy(binblkmid01_ptr->merchant_blocking[13].merchant_id, db_binblkmid01.mid_block_14.arr, db_binblkmid01.mid_block_14.len);
	memcpy(binblkmid01_ptr->merchant_blocking[14].merchant_id, db_binblkmid01.mid_block_15.arr, db_binblkmid01.mid_block_15.len);
	memcpy(binblkmid01_ptr->merchant_blocking[15].merchant_id, db_binblkmid01.mid_block_16.arr, db_binblkmid01.mid_block_16.len);
	memcpy(binblkmid01_ptr->merchant_blocking[16].merchant_id, db_binblkmid01.mid_block_17.arr, db_binblkmid01.mid_block_17.len);
	memcpy(binblkmid01_ptr->merchant_blocking[17].merchant_id, db_binblkmid01.mid_block_18.arr, db_binblkmid01.mid_block_18.len);
	memcpy(binblkmid01_ptr->merchant_blocking[18].merchant_id, db_binblkmid01.mid_block_19.arr, db_binblkmid01.mid_block_19.len);
	memcpy(binblkmid01_ptr->merchant_blocking[19].merchant_id, db_binblkmid01.mid_block_20.arr, db_binblkmid01.mid_block_20.len);
	memcpy(binblkmid01_ptr->merchant_blocking[20].merchant_id, db_binblkmid01.mid_block_21.arr, db_binblkmid01.mid_block_21.len);
	memcpy(binblkmid01_ptr->merchant_blocking[21].merchant_id, db_binblkmid01.mid_block_22.arr, db_binblkmid01.mid_block_22.len);
	memcpy(binblkmid01_ptr->merchant_blocking[22].merchant_id, db_binblkmid01.mid_block_23.arr, db_binblkmid01.mid_block_23.len);
	memcpy(binblkmid01_ptr->merchant_blocking[23].merchant_id, db_binblkmid01.mid_block_24.arr, db_binblkmid01.mid_block_24.len);
	memcpy(binblkmid01_ptr->merchant_blocking[24].merchant_id, db_binblkmid01.mid_block_25.arr, db_binblkmid01.mid_block_25.len);
	memcpy(binblkmid01_ptr->merchant_blocking[25].merchant_id, db_binblkmid01.mid_block_26.arr, db_binblkmid01.mid_block_26.len);
	memcpy(binblkmid01_ptr->merchant_blocking[26].merchant_id, db_binblkmid01.mid_block_27.arr, db_binblkmid01.mid_block_27.len);
	memcpy(binblkmid01_ptr->merchant_blocking[27].merchant_id, db_binblkmid01.mid_block_28.arr, db_binblkmid01.mid_block_28.len);
	memcpy(binblkmid01_ptr->merchant_blocking[28].merchant_id, db_binblkmid01.mid_block_29.arr, db_binblkmid01.mid_block_29.len);
	memcpy(binblkmid01_ptr->merchant_blocking[29].merchant_id, db_binblkmid01.mid_block_30.arr, db_binblkmid01.mid_block_30.len);
	memcpy(binblkmid01_ptr->merchant_blocking[30].merchant_id, db_binblkmid01.mid_block_31.arr, db_binblkmid01.mid_block_31.len);
	memcpy(binblkmid01_ptr->merchant_blocking[31].merchant_id, db_binblkmid01.mid_block_32.arr, db_binblkmid01.mid_block_32.len);
	memcpy(binblkmid01_ptr->merchant_blocking[32].merchant_id, db_binblkmid01.mid_block_33.arr, db_binblkmid01.mid_block_33.len);
	memcpy(binblkmid01_ptr->merchant_blocking[33].merchant_id, db_binblkmid01.mid_block_34.arr, db_binblkmid01.mid_block_34.len);
	memcpy(binblkmid01_ptr->merchant_blocking[34].merchant_id, db_binblkmid01.mid_block_35.arr, db_binblkmid01.mid_block_35.len);
	memcpy(binblkmid01_ptr->merchant_blocking[35].merchant_id, db_binblkmid01.mid_block_36.arr, db_binblkmid01.mid_block_36.len);
	memcpy(binblkmid01_ptr->merchant_blocking[36].merchant_id, db_binblkmid01.mid_block_37.arr, db_binblkmid01.mid_block_37.len);
	memcpy(binblkmid01_ptr->merchant_blocking[37].merchant_id, db_binblkmid01.mid_block_38.arr, db_binblkmid01.mid_block_38.len);
	memcpy(binblkmid01_ptr->merchant_blocking[38].merchant_id, db_binblkmid01.mid_block_39.arr, db_binblkmid01.mid_block_39.len);
	memcpy(binblkmid01_ptr->merchant_blocking[39].merchant_id, db_binblkmid01.mid_block_40.arr, db_binblkmid01.mid_block_40.len);
	memcpy(binblkmid01_ptr->merchant_blocking[40].merchant_id, db_binblkmid01.mid_block_41.arr, db_binblkmid01.mid_block_41.len);
	memcpy(binblkmid01_ptr->merchant_blocking[41].merchant_id, db_binblkmid01.mid_block_42.arr, db_binblkmid01.mid_block_42.len);
	memcpy(binblkmid01_ptr->merchant_blocking[42].merchant_id, db_binblkmid01.mid_block_43.arr, db_binblkmid01.mid_block_43.len);
	memcpy(binblkmid01_ptr->merchant_blocking[43].merchant_id, db_binblkmid01.mid_block_44.arr, db_binblkmid01.mid_block_44.len);
	memcpy(binblkmid01_ptr->merchant_blocking[44].merchant_id, db_binblkmid01.mid_block_45.arr, db_binblkmid01.mid_block_45.len);
	memcpy(binblkmid01_ptr->merchant_blocking[45].merchant_id, db_binblkmid01.mid_block_46.arr, db_binblkmid01.mid_block_46.len);
	memcpy(binblkmid01_ptr->merchant_blocking[46].merchant_id, db_binblkmid01.mid_block_47.arr, db_binblkmid01.mid_block_47.len);
	memcpy(binblkmid01_ptr->merchant_blocking[47].merchant_id, db_binblkmid01.mid_block_48.arr, db_binblkmid01.mid_block_48.len);
	memcpy(binblkmid01_ptr->merchant_blocking[48].merchant_id, db_binblkmid01.mid_block_49.arr, db_binblkmid01.mid_block_49.len);
	memcpy(binblkmid01_ptr->merchant_blocking[49].merchant_id, db_binblkmid01.mid_block_50.arr, db_binblkmid01.mid_block_50.len);
}

/*************************************************************************************/
/*************************************************************************************/
void binblkmid01_to_db(pMIDBINBLK01 binblkmid01_ptr)
{
	memcpy( &pte_binblkmid01, binblkmid01_ptr, sizeof(pte_binblkmid01));   
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_binblkmid01( pMIDBINBLK01 binblkmid01_ptr, pCHAR ErrorMsg)  
{


   binblkmid01_to_db( binblkmid01_ptr );

	if ( db_error_statics_flag == true )
    {
    	start_time = ptetime_get_time();
    }

   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL  SELECT *
      INTO  :db_binblkmid01
      FROM   MIDBINBLK01
      WHERE  pan_length = :pte_binblkmid01.pan_length
        AND  bin_low    = :pte_binblkmid01.bin_low
        AND  card_type   = :pte_binblkmid01.card_type
        AND  bin_high    = :pte_binblkmid01.bin_high
        AND  bin_length    = :pte_binblkmid01.bin_length
      For Update NOWAIT;

  	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MIDBINBLK01 ,Fun_Name : db_update_binblkmid01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }

   if(SQLCODE == NO_DATA_FOUND)
   {
	   	if ( db_error_statics_flag == true )
	    {
	    	start_time = ptetime_get_time();
	    }
	   EXEC SQL INSERT INTO MIDBINBLK01
	      ( pan_length,bin_low,card_type,bin_high,bin_length,mid_block_1,mid_block_2,
	        mid_block_3,mid_block_4,mid_block_5,mid_block_6,mid_block_7,mid_block_8,
	        mid_block_9,mid_block_10,mid_block_11,mid_block_12,mid_block_13,mid_block_14,
	        mid_block_15,mid_block_16,mid_block_17,mid_block_18,mid_block_19,mid_block_20,
	        mid_block_21,mid_block_22,mid_block_23,mid_block_24,mid_block_25,mid_block_26,
	        mid_block_27,mid_block_28,mid_block_29,mid_block_30,mid_block_31,mid_block_32,
	        mid_block_33,mid_block_34,mid_block_35,mid_block_36,mid_block_37,mid_block_38,
	        mid_block_39,mid_block_40,mid_block_41,mid_block_42,mid_block_43,mid_block_44,
	        mid_block_45,mid_block_46,mid_block_47,mid_block_48,mid_block_49,mid_block_50
	      )
	  VALUES(:pte_binblkmid01.pan_length, :pte_binblkmid01.bin_low,:pte_binblkmid01.card_type,
	   		:pte_binblkmid01.bin_high,:pte_binblkmid01.bin_length,
			:pte_binblkmid01.mid_block_1,
			:pte_binblkmid01.mid_block_2,
			:pte_binblkmid01.mid_block_3,
			:pte_binblkmid01.mid_block_4,
			:pte_binblkmid01.mid_block_5,
			:pte_binblkmid01.mid_block_6,
			:pte_binblkmid01.mid_block_7,
			:pte_binblkmid01.mid_block_8,
			:pte_binblkmid01.mid_block_9,
			:pte_binblkmid01.mid_block_10,
			:pte_binblkmid01.mid_block_11,
			:pte_binblkmid01.mid_block_12,
			:pte_binblkmid01.mid_block_13,
			:pte_binblkmid01.mid_block_14,
			:pte_binblkmid01.mid_block_15,
			:pte_binblkmid01.mid_block_16,
			:pte_binblkmid01.mid_block_17,
			:pte_binblkmid01.mid_block_18,
			:pte_binblkmid01.mid_block_19,
			:pte_binblkmid01.mid_block_20,
			:pte_binblkmid01.mid_block_21,
			:pte_binblkmid01.mid_block_22,
			:pte_binblkmid01.mid_block_23,
			:pte_binblkmid01.mid_block_24,
			:pte_binblkmid01.mid_block_25,
			:pte_binblkmid01.mid_block_26,
			:pte_binblkmid01.mid_block_27,
			:pte_binblkmid01.mid_block_28,
			:pte_binblkmid01.mid_block_29,
			:pte_binblkmid01.mid_block_30,
			:pte_binblkmid01.mid_block_31,
			:pte_binblkmid01.mid_block_32,
			:pte_binblkmid01.mid_block_33,
			:pte_binblkmid01.mid_block_34,
			:pte_binblkmid01.mid_block_35,
			:pte_binblkmid01.mid_block_36,
			:pte_binblkmid01.mid_block_37,
			:pte_binblkmid01.mid_block_38,
			:pte_binblkmid01.mid_block_39,
			:pte_binblkmid01.mid_block_40,
			:pte_binblkmid01.mid_block_41,
			:pte_binblkmid01.mid_block_42,
			:pte_binblkmid01.mid_block_43,
			:pte_binblkmid01.mid_block_44,
			:pte_binblkmid01.mid_block_45,
			:pte_binblkmid01.mid_block_46,
			:pte_binblkmid01.mid_block_47,
			:pte_binblkmid01.mid_block_48,
			:pte_binblkmid01.mid_block_49,
			:pte_binblkmid01.mid_block_50
	   );
	   
	    if ( db_error_statics_flag == true )
		{
		  end_time = ptetime_get_time();
		  duration = end_time - start_time;
		  if(duration >= db_error_statics_value)
		  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MIDBINBLK01 ,Fun_Name : db_update_binblkmid01_I , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		  }
		}
	
	   	if ( SQLCODE != 0 )
	    {
			memset(er_buf,0x00,sizeof(er_buf));
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In  db_update_binblkmid01 ,ST1:%d, ST2 : %d _1",DB_MsgSubtype1,DB_MsgSubtype2);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
		}
   
   	}
   	else if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_binblkmid01 ,ST1:%d, ST2 : %d _2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

	if ( db_error_statics_flag == true )
    {
    	start_time = ptetime_get_time();
    }
   EXEC SQL UPDATE  MIDBINBLK01
   SET pan_length=:pte_binblkmid01.pan_length,
    bin_low=:pte_binblkmid01.bin_low,
    card_type=:pte_binblkmid01.card_type,
    bin_high=:pte_binblkmid01.bin_high,
    bin_length=:pte_binblkmid01.bin_length,
	mid_block_1=:pte_binblkmid01.mid_block_1,
    mid_block_2=:pte_binblkmid01.mid_block_2,
    mid_block_3=:pte_binblkmid01.mid_block_3,
    mid_block_4=:pte_binblkmid01.mid_block_4,
    mid_block_5=:pte_binblkmid01.mid_block_5,
    mid_block_6=:pte_binblkmid01.mid_block_6,
    mid_block_7=:pte_binblkmid01.mid_block_7,
    mid_block_8=:pte_binblkmid01.mid_block_8,
    mid_block_9=:pte_binblkmid01.mid_block_9,
    mid_block_10=:pte_binblkmid01.mid_block_10,
    mid_block_11=:pte_binblkmid01.mid_block_11,
    mid_block_12=:pte_binblkmid01.mid_block_12,
    mid_block_13=:pte_binblkmid01.mid_block_13,
    mid_block_14=:pte_binblkmid01.mid_block_14,
    mid_block_15=:pte_binblkmid01.mid_block_15,
    mid_block_16=:pte_binblkmid01.mid_block_16,
    mid_block_17=:pte_binblkmid01.mid_block_17,
    mid_block_18=:pte_binblkmid01.mid_block_18,
    mid_block_19=:pte_binblkmid01.mid_block_19,
    mid_block_20=:pte_binblkmid01.mid_block_20,
    mid_block_21=:pte_binblkmid01.mid_block_21,
    mid_block_22=:pte_binblkmid01.mid_block_22,
    mid_block_23=:pte_binblkmid01.mid_block_23,
    mid_block_24=:pte_binblkmid01.mid_block_24,
    mid_block_25=:pte_binblkmid01.mid_block_25,
    mid_block_26=:pte_binblkmid01.mid_block_26,
    mid_block_27=:pte_binblkmid01.mid_block_27,
    mid_block_28=:pte_binblkmid01.mid_block_28,
    mid_block_29=:pte_binblkmid01.mid_block_29,
    mid_block_30=:pte_binblkmid01.mid_block_30,
    mid_block_31=:pte_binblkmid01.mid_block_31,
    mid_block_32=:pte_binblkmid01.mid_block_32,
    mid_block_33=:pte_binblkmid01.mid_block_33,
    mid_block_34=:pte_binblkmid01.mid_block_34,
    mid_block_35=:pte_binblkmid01.mid_block_35,
    mid_block_36=:pte_binblkmid01.mid_block_36,
    mid_block_37=:pte_binblkmid01.mid_block_37,
    mid_block_38=:pte_binblkmid01.mid_block_38,
    mid_block_39=:pte_binblkmid01.mid_block_39,
    mid_block_40=:pte_binblkmid01.mid_block_40,
    mid_block_41=:pte_binblkmid01.mid_block_41,
    mid_block_42=:pte_binblkmid01.mid_block_42,
    mid_block_43=:pte_binblkmid01.mid_block_43,
    mid_block_44=:pte_binblkmid01.mid_block_44,
    mid_block_45=:pte_binblkmid01.mid_block_45,
    mid_block_46=:pte_binblkmid01.mid_block_46,
    mid_block_47=:pte_binblkmid01.mid_block_47,
    mid_block_48=:pte_binblkmid01.mid_block_48,
    mid_block_49=:pte_binblkmid01.mid_block_49,
    mid_block_50=:pte_binblkmid01.mid_block_50
   
   
      WHERE  pan_length = :pte_binblkmid01.pan_length     AND  
      		 bin_low    = :pte_binblkmid01.bin_low        AND  
      		 card_type   = :pte_binblkmid01.card_type     AND  
      		 bin_high    = :pte_binblkmid01.bin_high      AND  
      		 bin_length    = :pte_binblkmid01.bin_length;
      		
	if ( db_error_statics_flag == true )
	{
	  end_time = ptetime_get_time();
	  duration = end_time - start_time;
	  if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MIDBINBLK01 ,Fun_Name : db_update_binblkmid01_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
	}   		
   if ( SQLCODE != 0 )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_binblkmid01 ,ST1:%d, ST2 : %d _3",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;

}
/*************************************************************************************/
/*************************************************************************************/
 


BYTE db_insert_binblkmid01( pMIDBINBLK01 binblkmid01_ptr, pCHAR ErrorMsg)
{
   EXEC SQL BEGIN DECLARE SECTION;
   int NumRowsReturned = 0;
   EXEC SQL END DECLARE SECTION;
   
   binblkmid01_to_db( binblkmid01_ptr );

	if ( db_error_statics_flag == true )
    {
    	start_time = ptetime_get_time();
    }
   EXEC SQL INSERT INTO MIDBINBLK01
      ( pan_length,bin_low,card_type,bin_high,bin_length,mid_block_1,mid_block_2,
        mid_block_3,mid_block_4,mid_block_5,mid_block_6,mid_block_7,mid_block_8,
        mid_block_9,mid_block_10,mid_block_11,mid_block_12,mid_block_13,mid_block_14,
        mid_block_15,mid_block_16,mid_block_17,mid_block_18,mid_block_19,mid_block_20,
        mid_block_21,mid_block_22,mid_block_23,mid_block_24,mid_block_25,mid_block_26,
        mid_block_27,mid_block_28,mid_block_29,mid_block_30,mid_block_31,mid_block_32,
        mid_block_33,mid_block_34,mid_block_35,mid_block_36,mid_block_37,mid_block_38,
        mid_block_39,mid_block_40,mid_block_41,mid_block_42,mid_block_43,mid_block_44,
        mid_block_45,mid_block_46,mid_block_47,mid_block_48,mid_block_49,mid_block_50
      )
 VALUES(:pte_binblkmid01.pan_length, :pte_binblkmid01.bin_low,:pte_binblkmid01.card_type,
   		:pte_binblkmid01.bin_high,:pte_binblkmid01.bin_length,
		:pte_binblkmid01.mid_block_1,
		:pte_binblkmid01.mid_block_2,
		:pte_binblkmid01.mid_block_3,
		:pte_binblkmid01.mid_block_4,
		:pte_binblkmid01.mid_block_5,
		:pte_binblkmid01.mid_block_6,
		:pte_binblkmid01.mid_block_7,
		:pte_binblkmid01.mid_block_8,
		:pte_binblkmid01.mid_block_9,
		:pte_binblkmid01.mid_block_10,
		:pte_binblkmid01.mid_block_11,
		:pte_binblkmid01.mid_block_12,
		:pte_binblkmid01.mid_block_13,
		:pte_binblkmid01.mid_block_14,
		:pte_binblkmid01.mid_block_15,
		:pte_binblkmid01.mid_block_16,
		:pte_binblkmid01.mid_block_17,
		:pte_binblkmid01.mid_block_18,
		:pte_binblkmid01.mid_block_19,
		:pte_binblkmid01.mid_block_20,
		:pte_binblkmid01.mid_block_21,
		:pte_binblkmid01.mid_block_22,
		:pte_binblkmid01.mid_block_23,
		:pte_binblkmid01.mid_block_24,
		:pte_binblkmid01.mid_block_25,
		:pte_binblkmid01.mid_block_26,
		:pte_binblkmid01.mid_block_27,
		:pte_binblkmid01.mid_block_28,
		:pte_binblkmid01.mid_block_29,
		:pte_binblkmid01.mid_block_30,
		:pte_binblkmid01.mid_block_31,
		:pte_binblkmid01.mid_block_32,
		:pte_binblkmid01.mid_block_33,
		:pte_binblkmid01.mid_block_34,
		:pte_binblkmid01.mid_block_35,
		:pte_binblkmid01.mid_block_36,
		:pte_binblkmid01.mid_block_37,
		:pte_binblkmid01.mid_block_38,
		:pte_binblkmid01.mid_block_39,
		:pte_binblkmid01.mid_block_40,
		:pte_binblkmid01.mid_block_41,
		:pte_binblkmid01.mid_block_42,
		:pte_binblkmid01.mid_block_43,
		:pte_binblkmid01.mid_block_44,
		:pte_binblkmid01.mid_block_45,
		:pte_binblkmid01.mid_block_46,
		:pte_binblkmid01.mid_block_47,
		:pte_binblkmid01.mid_block_48,
		:pte_binblkmid01.mid_block_49,
		:pte_binblkmid01.mid_block_50
   );

  	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MIDBINBLK01 ,Fun_Name : db_insert_binblkmid01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if ( SQLCODE != 0 )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_binblkmid01 ,ST1:%d,ST2: %d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}


BYTE db_update_cr01(pCR01 cr01_ptr, pCHAR ErrorMsg)
{
	
   	CHAR Sytem_date[9]={0};
	   
   	cr01_to_db( cr01_ptr );
  	 memset(pte_cr01.future_use_2,0x00,sizeof(pte_cr01.future_use_2));
	create_system_date(Sytem_date);
	strncpy(pte_cr01.future_use_2,Sytem_date,8);


	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL SELECT *
   INTO :db_cr01
   FROM CR01
   WHERE rule_id   = :pte_cr01.rule_id AND 
         rownum       = 1
         For Update NOWAIT;
         
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: trands, ST1:%d,ST2:%d ,Data_Type : cr01 ,Fun_Name : db_update_cr01 , Duration = %f,Rule ID:%s  ",
		DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_cr01.rule_id);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   } 
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_cr01 ,ST1:%d,ST2: %d_1, Rule ID:%s ",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_cr01.rule_id);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;   
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
      EXEC SQL UPDATE CR01
      SET  rule_id           		=:pte_cr01.rule_id,           
            rule_bin_high		    =:pte_cr01.rule_bin_high,        
           rule_bin_low		       = :pte_cr01.rule_bin_low,         
     		rulename       		   = :pte_cr01.rulename,               
     		status     			 	=:pte_cr01.status,
           rule_processing         = :pte_cr01.rule_processing,      
           single_amtlimit		   = :pte_cr01.single_amtlimit,      
           acc_amtlimit		       = :pte_cr01.acc_amtlimit,
           acc_amtlimit_counter		       = :pte_cr01.acc_amtlimit_counter,
           acc_transactionlimit     =:pte_cr01.acc_transactionlimit, 
           acc_transactionlimit_counter     =:pte_cr01.acc_transactionlimit_counter, 
           response_code		   = :pte_cr01.response_code,        
           exception_cardnum_1     =:pte_cr01.exception_cardnum_1, 
           exception_cardnum_2     =:pte_cr01.exception_cardnum_2, 
           exception_cardnum_3     =:pte_cr01.exception_cardnum_3, 
           exception_cardnum_4     =:pte_cr01.exception_cardnum_4 ,
           exception_cardnum_5     =:pte_cr01.exception_cardnum_5 ,
           exception_cardnum_6     =:pte_cr01.exception_cardnum_6, 
           exception_cardnum_7     =:pte_cr01.exception_cardnum_7 ,
           exception_cardnum_8     =:pte_cr01.exception_cardnum_8, 
           exception_cardnum_9     =:pte_cr01.exception_cardnum_9 ,
           exception_cardnum_10    =:pte_cr01.exception_cardnum_10,
           exception_cardnum_11    =:pte_cr01.exception_cardnum_11,
           exception_cardnum_12    =:pte_cr01.exception_cardnum_12,
           exception_cardnum_13     =:pte_cr01.exception_cardnum_13,
           exception_cardnum_14     =:pte_cr01.exception_cardnum_14,
           exception_cardnum_15     =:pte_cr01.exception_cardnum_15,
           exception_cardnum_16     =:pte_cr01.exception_cardnum_16,
           exception_cardnum_17     =:pte_cr01.exception_cardnum_17,
           exception_cardnum_18     =:pte_cr01.exception_cardnum_18,
           exception_cardnum_19     =:pte_cr01.exception_cardnum_19,
           exception_cardnum_20     =:pte_cr01.exception_cardnum_20,
           exception_cardnum_21     =:pte_cr01.exception_cardnum_21,
           exception_cardnum_22     =:pte_cr01.exception_cardnum_22,
           exception_cardnum_23     =:pte_cr01.exception_cardnum_23,
           exception_cardnum_24     =:pte_cr01.exception_cardnum_24,
           exception_cardnum_25     =:pte_cr01.exception_cardnum_25,
           exception_cardnum_26     =:pte_cr01.exception_cardnum_26,
           exception_cardnum_27     =:pte_cr01.exception_cardnum_27,
           exception_cardnum_28     =:pte_cr01.exception_cardnum_28,
           exception_cardnum_29     =:pte_cr01.exception_cardnum_29,
           exception_cardnum_30     =:pte_cr01.exception_cardnum_30,
           exception_cardnum_31     =:pte_cr01.exception_cardnum_31,
           exception_cardnum_32     =:pte_cr01.exception_cardnum_32,
           exception_cardnum_33     =:pte_cr01.exception_cardnum_33,
           exception_cardnum_34     =:pte_cr01.exception_cardnum_34,
           exception_cardnum_35     =:pte_cr01.exception_cardnum_35,
           exception_cardnum_36     =:pte_cr01.exception_cardnum_36,
           exception_cardnum_37     =:pte_cr01.exception_cardnum_37,
           exception_cardnum_38     =:pte_cr01.exception_cardnum_38,
		   exception_cardnum_39     =:pte_cr01.exception_cardnum_39,
			exception_cardnum_40     =:pte_cr01.exception_cardnum_40,
			exception_cardnum_41     =:pte_cr01.exception_cardnum_41,
			exception_cardnum_42     =:pte_cr01.exception_cardnum_42,
			exception_cardnum_43     =:pte_cr01.exception_cardnum_43,
			exception_cardnum_44     =:pte_cr01.exception_cardnum_44,
			exception_cardnum_45     =:pte_cr01.exception_cardnum_45,
			exception_cardnum_46     =:pte_cr01.exception_cardnum_46,
			exception_cardnum_47     =:pte_cr01.exception_cardnum_47,
			exception_cardnum_48     =:pte_cr01.exception_cardnum_48,
			exception_cardnum_49     =:pte_cr01.exception_cardnum_49,
			exception_cardnum_50     =:pte_cr01.exception_cardnum_50 ,                                  
           future_use_1             =:pte_cr01.future_use_1,
           future_use_2            = :pte_cr01.future_use_2,         
           future_use_3            = :pte_cr01.future_use_3,         
           future_use_4            = :pte_cr01.future_use_4,
           future_use_5            = :pte_cr01.future_use_5,         
           future_use_6            = :pte_cr01.future_use_6,         
           future_use_7            = :pte_cr01.future_use_7,
           future_use_8            = :pte_cr01.future_use_8,         
           future_use_9            = :pte_cr01.future_use_9,         
           future_use_10           = :pte_cr01.future_use_10
        WHERE  rule_id=:pte_cr01.rule_id;	              
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: trands, ST1:%d,ST2:%d ,Data_Type : cr01 ,Fun_Name : db_update_cr01 , Duration = %f,rule_id:%s ",
		DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_cr01.rule_id);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_obs01 ,ST1:%d,ST2: %d_2,rule_id:%s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_cr01.rule_id);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}
	
/*************************************************************************************/	
BYTE db_insert_cr01(pCR01 cr01_ptr, pCHAR ErrorMsg)
{

    CHAR System_date[9]={0};
    
   cr01_to_db( cr01_ptr );
 
	create_system_date(System_date);
	strncpy(pte_cr01.future_use_2,System_date,8);
	

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
    EXEC SQL INSERT INTO CR01
    (
    	rule_id,           	
    	rule_bin_high	,	
        rule_bin_low	,          	
        rulename,       		
        status,     			
        rule_processing,    
        single_amtlimit	,	
        acc_amtlimit,
        acc_amtlimit_counter,		
        acc_transactionlimit,
        acc_transactionlimit_counter,
        response_code	,	
       exception_cardnum_1,  
      exception_cardnum_2  ,
      exception_cardnum_3 , 
      exception_cardnum_4 , 
      exception_cardnum_5 , 
      exception_cardnum_6 , 
      exception_cardnum_7 , 
      exception_cardnum_8  ,
      exception_cardnum_9  ,
      exception_cardnum_10 ,
      exception_cardnum_11 ,
      exception_cardnum_12 ,
      exception_cardnum_13 ,
      exception_cardnum_14 ,
      exception_cardnum_15 ,
      exception_cardnum_16 ,
      exception_cardnum_17 ,
      exception_cardnum_18 ,
      exception_cardnum_19 ,
      exception_cardnum_20 ,
      exception_cardnum_21 ,
      exception_cardnum_22 ,
      exception_cardnum_23 ,
      exception_cardnum_24 ,
      exception_cardnum_25 ,
      exception_cardnum_26 ,
      exception_cardnum_27 ,
      exception_cardnum_28 ,
      exception_cardnum_29 ,
      exception_cardnum_30 ,
      exception_cardnum_31 ,
      exception_cardnum_32 ,
      exception_cardnum_33 ,
      exception_cardnum_34 ,
      exception_cardnum_35 ,
      exception_cardnum_36 ,
      exception_cardnum_37 ,
      exception_cardnum_38 ,
      exception_cardnum_39,
	   exception_cardnum_40,
	   exception_cardnum_41,
	   exception_cardnum_42,
	   exception_cardnum_43,
	   exception_cardnum_44,
	   exception_cardnum_45,
	   exception_cardnum_46,
	   exception_cardnum_47,
	   exception_cardnum_48,
	   exception_cardnum_49,
	   exception_cardnum_50 , 	
        future_use_1   ,     
        future_use_2    ,    
        future_use_3   ,     
        future_use_4   ,     
        future_use_5   ,     
        future_use_6   ,     
        future_use_7   ,     
        future_use_8   ,     
        future_use_9   ,     
        future_use_10       
	
    )
     VALUES(    :pte_cr01.rule_id,          
          		:pte_cr01.rule_bin_high,          
     			:pte_cr01.rule_bin_low,          
     			:pte_cr01.rulename,          
     			:pte_cr01.status,
				:pte_cr01.rule_processing,          
     			:pte_cr01.single_amtlimit,          
     			:pte_cr01.acc_amtlimit,
     			:pte_cr01.acc_amtlimit_counter,
				:pte_cr01.acc_transactionlimit,  
				:pte_cr01.acc_transactionlimit_counter,         
				:pte_cr01.response_code, 
				:pte_cr01.exception_cardnum_1 ,
              :pte_cr01.exception_cardnum_2 ,
              :pte_cr01.exception_cardnum_3 ,
              :pte_cr01.exception_cardnum_4 ,
              :pte_cr01.exception_cardnum_5 ,
              :pte_cr01.exception_cardnum_6 ,
              :pte_cr01.exception_cardnum_7 ,
              :pte_cr01.exception_cardnum_8 ,
              :pte_cr01.exception_cardnum_9 ,
              :pte_cr01.exception_cardnum_10,
              :pte_cr01.exception_cardnum_11 ,
              :pte_cr01.exception_cardnum_12 ,
               :pte_cr01.exception_cardnum_13,
               :pte_cr01.exception_cardnum_14,
               :pte_cr01.exception_cardnum_15,
               :pte_cr01.exception_cardnum_16,
               :pte_cr01.exception_cardnum_17,
               :pte_cr01.exception_cardnum_18,
               :pte_cr01.exception_cardnum_19,
               :pte_cr01.exception_cardnum_20,
               :pte_cr01.exception_cardnum_21,
               :pte_cr01.exception_cardnum_22,
               :pte_cr01.exception_cardnum_23,
               :pte_cr01.exception_cardnum_24,
               :pte_cr01.exception_cardnum_25,
               :pte_cr01.exception_cardnum_26,
               :pte_cr01.exception_cardnum_27,
               :pte_cr01.exception_cardnum_28,
               :pte_cr01.exception_cardnum_29,
               :pte_cr01.exception_cardnum_30,
               :pte_cr01.exception_cardnum_31,
               :pte_cr01.exception_cardnum_32,
               :pte_cr01.exception_cardnum_33,
               :pte_cr01.exception_cardnum_34,
               :pte_cr01.exception_cardnum_35,
               :pte_cr01.exception_cardnum_36,
               :pte_cr01.exception_cardnum_37,
               :pte_cr01.exception_cardnum_38,
		       :pte_cr01.exception_cardnum_39,
		       :pte_cr01.exception_cardnum_40,
		       :pte_cr01.exception_cardnum_41,
		       :pte_cr01.exception_cardnum_42,
		       :pte_cr01.exception_cardnum_43,
		       :pte_cr01.exception_cardnum_44,
		       :pte_cr01.exception_cardnum_45,
		       :pte_cr01.exception_cardnum_46,
		       :pte_cr01.exception_cardnum_47,
		       :pte_cr01.exception_cardnum_48,
		       :pte_cr01.exception_cardnum_49,
		       :pte_cr01.exception_cardnum_50,    
     			:pte_cr01.future_use_1,
				:pte_cr01.future_use_2,          
     			:pte_cr01.future_use_3,          
     			:pte_cr01.future_use_4,
				:pte_cr01.future_use_5,          
     			:pte_cr01.future_use_6,          
     			:pte_cr01.future_use_7,
				:pte_cr01.future_use_8,          
     			:pte_cr01.future_use_9,          
     			:pte_cr01.future_use_10
					
    );
    
    if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: trands, ST1:%d,ST2:%d ,Data_Type : cr01 ,Fun_Name : db_insert_cr01 , Duration = %f,Rule ID:%s",
		DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_cr01.rule_id);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_insert_cr01 ,ST1:%d,ST2: %d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}			   
			   
/******************************************************************************/
BYTE db_delete_cr01(pCR01 cr01_ptr, pCHAR ErrorMsg )
{
   BYTE  retval;

   cr01_to_db( cr01_ptr );

   if ( db_error_statics_flag == true )
   {
       start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_cr01
      FROM  CR01
      WHERE  rule_id   = :pte_cr01.rule_id	AND 
         		rownum = 1
      		For Update NOWAIT;
   if ( db_error_statics_flag == true )
   {
        end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: trands, ST1:%d,ST2:%d ,Data_Type : cr01 ,Fun_Name : db_delete_cr01 , Duration = %f,rule_id:%s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_cr01.rule_id);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   	}
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_delete_cr01 ,ST1:%d,ST2: %d_1,rule_id:%s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_cr01.rule_id);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
       start_time = ptetime_get_time();
   }
   EXEC SQL DELETE CR01
      WHERE  rule_id   = :pte_cr01.rule_id;	
   
   if ( db_error_statics_flag == true )
   {
        end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: trands, ST1:%d,ST2:%d ,Data_Type : CR01 ,Fun_Name : db_delete_cr01 , Duration = %f,rule_id:%s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_cr01.rule_id);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   	}
   if (( SQLCODE == 0 ) || ( SQLCODE == NO_DATA_FOUND) )
      retval = PTEMSG_OK;
   else
   {
	memset(er_buf,0x00,sizeof(er_buf));
	retval = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In db_delete_cr01 ,ST1:%d,ST2: %d_2,rule_id:%s",
	DB_MsgSubtype1,DB_MsgSubtype2,pte_cr01.rule_id);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);

}

   return( retval );
}

/******************************************************************************/

BYTE db_select_cr01(pCHAR         key, 
                     pCR01        cr01_ptr,
                     pCHAR         ErrorMsg )
{
   memset( &db_cr01, 0, sizeof( db_cr01 ) );

   strncpy( &pte_cr01.rule_id, key, sizeof(pte_cr01.rule_id) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
      EXEC SQL SELECT *
   INTO :db_cr01
   FROM CR01
   WHERE rule_id= :pte_cr01.rule_id; 

         
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: trands, ST1:%d,ST2:%d ,Data_Type : CR01 ,Fun_Name : db_select_cr01 , Duration = %f,rule_id:%s",
		DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_cr01.rule_id);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   
    if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_cr01,ST1:%d,ST2:%d,rule_id:%s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_cr01.rule_id);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   db_to_cr01 (cr01_ptr);

   return PTEMSG_OK;

}

/******************************************************************************/

BYTE db_get_cr01_service_list(pCR01 cr01_ptr,
                                pCR01_GUI_LIST CR01_List,
                                pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;

    char cr01[11];
    int  temp;

    EXEC SQL END DECLARE SECTION;

   memset( CR01_List, 0, sizeof(CR01_List) );
   strcpy(CR01_List->num_returned,"0");
   strncpy( &cr01, cr01_ptr, sizeof(cr01) );


   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE cr01_cursor4 CURSOR FOR
      SELECT * from CR01
      WHERE  cr01 > :cr01 
      ORDER BY CR01;
   
   if ( db_error_statics_flag == true )
   {
        end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: trands, ST1:%d,ST2:%d ,Data_Type : CR01 ,Fun_Name : db_get_cr01_service_list , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   	}
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN cr01_cursor4;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < SERVICE_LIST_SIZE; temp++ )
   {
      memset(&db_cr01, 0x00, sizeof(db_cr01));
      if ( db_error_statics_flag == true )
      {
          start_time = ptetime_get_time();
      }
      
      EXEC SQL FETCH cr01_cursor4
      INTO :db_cr01;
      
      if ( db_error_statics_flag == true )
      {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: trands, ST1:%d,ST2:%d ,Data_Type : CR01_CURSOR4 ,Fun_Name : db_get_cr01_service_list , Duration = %f,ruleID:%s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,db_cr01.rule_id);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   	  }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE cr01_cursor4;
         memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In db_get_cr01_service_list ,ST1:%d,ST2: %d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;
   
      }
      db_to_cr01(&CR01_List->CR01_record[temp]);
      sprintf(CR01_List->num_returned, "%d", temp+1 );
   }

   EXEC SQL CLOSE cr01_cursor4;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In db_get_cr01_service_list ,ST1:%d,ST2: %d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;

}	
/******************************************************************************/	
BYTE db_get_CR01_gui_list( pCR01 cr01_ptr,
                            pCR01_GUI_LIST CR01_List,
                            pCHAR           ErrorMsg )
{

   EXEC SQL BEGIN DECLARE SECTION;
   char rule_id[11] = {0};  
   int temp = 0;
   EXEC SQL END DECLARE SECTION;

   memset( CR01_List, 0, sizeof(CR01_GUI_LIST) );
   strcpy(CR01_List->num_returned,"0");
   if(cr01_ptr->rule_id[0] == '\0')
   {
   		rule_id[0] = ' ';

   }
   else
   {
      strncpy( rule_id, cr01_ptr->rule_id, sizeof(rule_id) );
   }


   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE cr01_cursor1 CURSOR FOR
      SELECT * from CR01
      WHERE (rule_id = :rule_id OR rule_id > :rule_id);
             
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: trands, ST1:%d,ST2:%d ,Data_Type : cr01 ,Fun_Name : db_get_cr01_gui_list , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN cr01_cursor1;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
      memset(&db_cr01, 0x00, sizeof(db_cr01));
      if ( db_error_statics_flag == true )
      {
      		start_time = ptetime_get_time();
      }
      EXEC SQL FETCH cr01_cursor1
      INTO :db_cr01;
      
      if ( db_error_statics_flag == true )
   	  {
      		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: trands, ST1:%d,ST2:%d ,Data_Type : CR01_CURSOR1 ,Fun_Name : db_get_cr01_gui_list , Duration = %f, rule_id:%s",
				DB_MsgSubtype1,DB_MsgSubtype2,duration,db_cr01.rule_id);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
   	  }

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE cr01_cursor1;
         
		 memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In db_get_cr01_gui_list ,ST1:%d,ST2: %d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;
   
      }
      db_to_cr01(&CR01_List->CR01_record[temp]);
      sprintf( CR01_List->num_returned, "%d", (temp+1) );
   }

   EXEC SQL CLOSE cr01_cursor1;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In db_get_cr01_gui_list ,ST1:%d,ST2: %d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
}

/*************************************************************************************/
/*************************************************************************************/

/*************************************************************************************/
/*************************************************************************************/

BYTE db_select_binblkmid01 (pAUTH_TX       auth_tx, 
                        pMIDBINBLK01         binblkmid01_ptr, 
                        pCHAR          ErrorMsg )

{

   memset( &db_binblkmid01, 0, sizeof( db_binblkmid01 ) );

    strncpy( pte_binblkmid01.card_type, auth_tx->BIN01_details.primary_key.type , sizeof(pte_binblkmid01.card_type) );
	strncpy( pte_binblkmid01.bin_low, auth_tx->BIN01_details.primary_key.low       ,  sizeof(pte_binblkmid01.bin_low) );
	strncpy( pte_binblkmid01.bin_length, auth_tx->BIN01_details.primary_key.length , sizeof(pte_binblkmid01.bin_length) );
	strncpy( pte_binblkmid01.pan_length, auth_tx->BIN01_details.pan_length , sizeof(pte_binblkmid01.pan_length) );
	strncpy( pte_binblkmid01.bin_high, auth_tx->BIN01_details.high , sizeof(pte_binblkmid01.bin_high) );
	
    if ( db_error_statics_flag == true )
    {
    	start_time = ptetime_get_time();
    }

   EXEC SQL SELECT *

   INTO :db_binblkmid01

   FROM MIDBINBLK01

   WHERE card_type  = :pte_binblkmid01.card_type   AND 
  		 bin_low    =   :pte_binblkmid01.bin_low   AND 
   		 pan_length = :pte_binblkmid01.pan_length  AND
   		 bin_high   = :pte_binblkmid01.bin_high     AND
   		 bin_length = :pte_binblkmid01.bin_length 
   		 ;
 
  	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MIDBINBLK01 ,Fun_Name : db_select_binblkmid01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }

   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_binblkmid01 ,ST1:%d, ST2: %d _1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return PTEMSG_NOT_FOUND;
    }
    else if(SQLCODE == NO_DATA_FOUND )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_binblkmid01 ,ST1:%d, ST2: %d _2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
    	return PTEMSG_NOT_FOUND;
    }

   db_to_binblkmid01 (binblkmid01_ptr);



   return PTEMSG_OK;

}

BYTE db_select_gui_binblkmid01(  pCHAR    		Primary_key, 
                        		 pMIDBINBLK01   binblkmid01_ptr, 
                        		 pCHAR          ErrorMsg )
{
    memset( &db_binblkmid01, 0, sizeof( db_binblkmid01 ) );
    
   strncpy( pte_bin01.type, Primary_key + sizeof(pte_bin01.length) + sizeof(pte_bin01.low), sizeof(pte_bin01.type) );
   strncpy( pte_bin01.low, Primary_key + sizeof(pte_bin01.length), sizeof(pte_bin01.low) );
   strncpy( pte_bin01.length, Primary_key, sizeof(pte_bin01.length) );
    
    
	strncpy( pte_binblkmid01.pan_length, Primary_key , sizeof(pte_binblkmid01.pan_length) );
	strncpy( pte_binblkmid01.bin_low, Primary_key+sizeof(pte_binblkmid01.pan_length),  sizeof(pte_binblkmid01.bin_low) );
    strncpy( pte_binblkmid01.card_type, Primary_key+sizeof(pte_binblkmid01.pan_length)+sizeof(pte_binblkmid01.bin_low) , sizeof(pte_binblkmid01.card_type) );
	strncpy( pte_binblkmid01.bin_high, Primary_key+sizeof(pte_binblkmid01.pan_length)+sizeof(pte_binblkmid01.bin_low)+sizeof(pte_binblkmid01.card_type) , sizeof(pte_binblkmid01.bin_high) );
	strncpy( pte_binblkmid01.bin_length, Primary_key+sizeof(pte_binblkmid01.pan_length)+sizeof(pte_binblkmid01.bin_low)+sizeof(pte_binblkmid01.card_type)+sizeof(pte_binblkmid01.bin_high) , sizeof(pte_binblkmid01.bin_length) );

	if ( db_error_statics_flag == true )
    {
    	start_time = ptetime_get_time();
    }

	EXEC SQL SELECT *
   
   INTO :db_binblkmid01

   FROM MIDBINBLK01

   WHERE card_type  = :pte_binblkmid01.card_type  AND 
  		 bin_low    = :pte_binblkmid01.bin_low    AND 
   		 pan_length = :pte_binblkmid01.pan_length AND
   		 bin_high   = :pte_binblkmid01.bin_high   AND
   		 bin_length = :pte_binblkmid01.bin_length 
   		 ;

 	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MIDBINBLK01 ,Fun_Name : db_select_gui_binblkmid01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }

   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_gui_binblkmid01 ,ST1 : %d, ST2 : %d  ",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_binblkmid01 (binblkmid01_ptr);



   return PTEMSG_OK;

}



void db_to_gpcf01 (pGPCF01 gpcf01_ptr )
{
	memset(gpcf01_ptr, 0, sizeof(GPCF01));
	memcpy(gpcf01_ptr->days_inactive, db_gpcf01.days_inactive.arr, db_gpcf01.days_inactive.len);
	memcpy(gpcf01_ptr->max_prev_passwords_not_allowed, db_gpcf01.max_prev_passwords_not_allowed.arr, db_gpcf01.max_prev_passwords_not_allowed.len);
	memcpy(gpcf01_ptr->max_password_retries, db_gpcf01.max_password_retries.arr, db_gpcf01.max_password_retries.len);
	memcpy(gpcf01_ptr->min_password_length, db_gpcf01.min_password_length.arr, db_gpcf01.min_password_length.len);
	memcpy(gpcf01_ptr->days_before_expiration, db_gpcf01.days_before_expiration.arr, db_gpcf01.days_before_expiration.len);
	memcpy(gpcf01_ptr->user_status_cntrl_tmeout_val, db_gpcf01.user_status_cntrl_tmeout_val.arr, db_gpcf01.user_status_cntrl_tmeout_val.len);
	
	return;
}

void db_to_amex3ds2 (pAMEX3DS2 amex3ds2_ptr )
{
	memset(amex3ds2_ptr, 0, sizeof(AMEX3DS2));
	memcpy(amex3ds2_ptr->self_validation_ac, db_amex3ds2.self_validation_ac.arr, db_amex3ds2.self_validation_ac.len);
	memcpy(amex3ds2_ptr->csc_validation_flag, db_amex3ds2.csc_validation_flag.arr, db_amex3ds2.csc_validation_flag.len);
	memcpy(amex3ds2_ptr->authentication_result_code_ac, db_amex3ds2.authentication_result_code_ac.arr, db_amex3ds2.authentication_result_code_ac.len);
	memcpy(amex3ds2_ptr->authentication_attempt_ac, db_amex3ds2.authentication_attempt_ac.arr, db_amex3ds2.authentication_attempt_ac.len);
	memcpy(amex3ds2_ptr->authentication_attempt_verify_flag, db_amex3ds2.authentication_attempt_verify_flag.arr, db_amex3ds2.authentication_attempt_verify_flag.len);
	
	return;
}

void db_to_jcb3ds2 (pJCB3DS2 jcb3ds2_ptr )
{
	memset(jcb3ds2_ptr, 0, sizeof(JCB3DS2));
	memcpy(jcb3ds2_ptr->auth_result_code_value, db_jcb3ds2.auth_result_code_value.arr, db_jcb3ds2.auth_result_code_value.len);
	memcpy(jcb3ds2_ptr->response_code, db_jcb3ds2.response_code.arr, db_jcb3ds2.response_code.len);
	memcpy(jcb3ds2_ptr->validation_flag, db_jcb3ds2.validation_flag.arr, db_jcb3ds2.validation_flag.len);

	
	return;
}


void db_to_dci3ds2 (pDCI3DS2 dci3ds2_ptr )
{
	memset(dci3ds2_ptr, 0, sizeof(DCI3DS2));
	memcpy(dci3ds2_ptr->self_validation_pass_cavv_rc, db_dci3ds2.self_validation_pass_cavv_rc.arr, db_dci3ds2.self_validation_pass_cavv_rc.len);
	memcpy(dci3ds2_ptr->self_validation_cavv_rc, db_dci3ds2.self_validation_cavv_rc.arr, db_dci3ds2.self_validation_cavv_rc.len);
	memcpy(dci3ds2_ptr->cvv2_validation_flag, db_dci3ds2.cvv2_validation_flag.arr, db_dci3ds2.cvv2_validation_flag.len);
	memcpy(dci3ds2_ptr->authentication_result_code_ac, db_dci3ds2.authentication_result_code_ac.arr, db_dci3ds2.authentication_result_code_ac.len);
	memcpy(dci3ds2_ptr->authentication_result_code_cavv_rc, db_dci3ds2.authentication_result_code_cavv_rc.arr, db_dci3ds2.authentication_result_code_cavv_rc.len);
	memcpy(dci3ds2_ptr->authentication_attmpt_ac, db_dci3ds2.authentication_attmpt_ac.arr, db_dci3ds2.authentication_attmpt_ac.len);
	memcpy(dci3ds2_ptr->authentication_attempt_verify_flag, db_dci3ds2.authentication_attempt_verify_flag.arr, db_dci3ds2.authentication_attempt_verify_flag.len);
	
	return;
}

void db_to_cup3ds2 (pCUP3DS2 cup3ds2_ptr )
{
	memset(cup3ds2_ptr, 0, sizeof(CUP3DS2));
	memcpy(cup3ds2_ptr->av_verification_rc, db_cup3ds2.av_verification_rc.arr, db_cup3ds2.av_verification_rc.len);
	memcpy(cup3ds2_ptr->authentication_attempt_rc, db_cup3ds2.authentication_attempt_rc.arr, db_cup3ds2.authentication_attempt_rc.len);
	memcpy(cup3ds2_ptr->cvn2_validation_flag, db_cup3ds2.cvn2_validation_flag.arr, db_cup3ds2.cvn2_validation_flag.len);
	memcpy(cup3ds2_ptr->av_validation_flag, db_cup3ds2.av_validation_flag.arr, db_cup3ds2.av_validation_flag.len);
	memcpy(cup3ds2_ptr->cup_authentication_attempt_verify_flag, db_cup3ds2.cup_authentication_attempt_verify_flag.arr, db_cup3ds2.cup_authentication_attempt_verify_flag.len);
	
	return;
}

/*************************************************************************************/
/*************************************************************************************/
void amex3ds2_to_db(pAMEX3DS2 amex3ds2_ptr)
{
	memcpy( &pte_amex3ds2, amex3ds2_ptr, sizeof(pte_amex3ds2));   
}

void dci3ds2_to_db(pDCI3DS2 dci3ds2_ptr)
{
	memcpy( &pte_dci3ds2, dci3ds2_ptr, sizeof(pte_dci3ds2));   
}

void jcb3ds2_to_db(pJCB3DS2 jcb3ds2_ptr)
{
	memcpy( &pte_jcb3ds2, jcb3ds2_ptr, sizeof(pte_jcb3ds2));   
}

void cup3ds2_to_db(pCUP3DS2 cup3ds2_ptr)
{
	memcpy( &pte_cup3ds2, cup3ds2_ptr, sizeof(pte_cup3ds2));   
}

/*************************************************************************************/
/*************************************************************************************/
void gpcf01_to_db(pGPCF01 gpcf01_ptr)
{
	memcpy( &pte_gpcf01, gpcf01_ptr, sizeof(pte_gpcf01));   
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_gpcf01( pGPCF01 gpcf01_ptr, pCHAR ErrorMsg)  
{
	gpcf01_to_db( gpcf01_ptr );

	if ( db_error_statics_flag == true )
    {
    	start_time = ptetime_get_time();
    }
	EXEC SQL UPDATE  gpcf01
	SET days_inactive =:pte_gpcf01.days_inactive,
	     max_prev_passwords_not_allowed = :pte_gpcf01.max_prev_passwords_not_allowed,
	     max_password_retries = :pte_gpcf01.max_password_retries,
	     min_password_length = :pte_gpcf01.min_password_length,
	     days_before_expiration = :pte_gpcf01.days_before_expiration,
	     user_status_cntrl_tmeout_val = :pte_gpcf01.user_status_cntrl_tmeout_val  
	WHERE ROWNUM = 1;
	
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : GPCF01 ,Fun_Name : db_update_gpcf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
	if ( SQLCODE != 0 )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_gpcf01 ,ST1:%d,ST2: %d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/

/*************************************************************************************/
BYTE db_update_amex3ds2( pAMEX3DS2 amex3ds2_ptr, pCHAR ErrorMsg)  
{
	amex3ds2_to_db( amex3ds2_ptr );

	if ( db_error_statics_flag == true )
    {
    	start_time = ptetime_get_time();
    }
	EXEC SQL UPDATE  amex3ds2
	SET self_validation_ac =:pte_amex3ds2.self_validation_ac,
	     csc_validation_flag = :pte_amex3ds2.csc_validation_flag,
	     authentication_result_code_ac = :pte_amex3ds2.authentication_result_code_ac,
	     authentication_attempt_ac = :pte_amex3ds2.authentication_attempt_ac,
	     authentication_attempt_verify_flag = :pte_amex3ds2.authentication_attempt_verify_flag
	WHERE ROWNUM = 1;
	
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MEX3DS2 ,Fun_Name : db_update_amex3ds2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
	if ( SQLCODE != 0 )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_amex3ds2 ,ST1:%d,ST2: %d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

BYTE db_update_dci3ds2( pDCI3DS2 dci3ds2_ptr, pCHAR ErrorMsg)  
{
	dci3ds2_to_db( dci3ds2_ptr );

	if ( db_error_statics_flag == true )
    {
    	start_time = ptetime_get_time();
    }
	EXEC SQL UPDATE  dci3ds2
	SET self_validation_pass_cavv_rc =:pte_dci3ds2.self_validation_pass_cavv_rc,
	    self_validation_cavv_rc =:pte_dci3ds2.self_validation_cavv_rc,
	     authentication_result_code_ac = :pte_dci3ds2.authentication_result_code_ac,
	     authentication_result_code_cavv_rc = :pte_dci3ds2.authentication_result_code_cavv_rc,
	     authentication_attmpt_ac = :pte_dci3ds2.authentication_attmpt_ac,
	     cvv2_validation_flag = :pte_dci3ds2.cvv2_validation_flag,
	     authentication_attempt_verify_flag = :pte_dci3ds2.authentication_attempt_verify_flag
	WHERE ROWNUM = 1;
	
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MEX3DS2 ,Fun_Name : db_update_dci3ds2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
	if ( SQLCODE != 0 )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_dci3ds2 ,ST1:%d,ST2: %d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

BYTE db_update_jcb3ds2( pJCB3DS2 jcb3ds2_ptr, pCHAR ErrorMsg)  
{
	jcb3ds2_to_db( jcb3ds2_ptr );

	if ( db_error_statics_flag == true )
    {
    	start_time = ptetime_get_time();
    }
    
    /* Make sure we can access the record before attempting to update it. */
   EXEC SQL SELECT *
   INTO :db_jcb3ds2
   FROM jcb3ds2
   WHERE auth_result_code_value   = :pte_jcb3ds2.auth_result_code_value  AND 
         rownum       = 1
         For Update NOWAIT;
    
    if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : JCB3DS2 ,Fun_Name : db_update_jcb3ds2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    } 
    
     if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_jcb3ds2 ,ST1:%d,ST2: %d_1, auth_result_code_value: %s ",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_jcb3ds2.auth_result_code_value);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;   
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }   
         
	EXEC SQL UPDATE  jcb3ds2
	SET auth_result_code_value =:pte_jcb3ds2.auth_result_code_value,
	     response_code = :pte_jcb3ds2.response_code,
	     validation_flag = :pte_jcb3ds2.validation_flag
	WHERE auth_result_code_value   = :pte_jcb3ds2.auth_result_code_value; 

	
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : JCB3DS2 ,Fun_Name : db_update_jcb3ds2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
	if ( SQLCODE != 0 )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_jcb3ds2 ,ST1:%d,ST2: %d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

BYTE db_update_cup3ds2( pCUP3DS2 cup3ds2_ptr, pCHAR ErrorMsg)  
{
	cup3ds2_to_db( cup3ds2_ptr );

	if ( db_error_statics_flag == true )
    {
    	start_time = ptetime_get_time();
    }
	EXEC SQL UPDATE  cup3ds2
	SET av_verification_rc =:pte_cup3ds2.av_verification_rc,
	     authentication_attempt_rc = :pte_cup3ds2.authentication_attempt_rc,
	     cvn2_validation_flag = :pte_cup3ds2.cvn2_validation_flag,
	     av_validation_flag = :pte_cup3ds2.av_validation_flag,
	     cup_authentication_attempt_verify_flag = :pte_cup3ds2.cup_authentication_attempt_verify_flag
	WHERE ROWNUM = 1;
	
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CUP3DS2 ,Fun_Name : db_update_cup3ds2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
	if ( SQLCODE != 0 )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_cup3ds2 ,ST1:%d,ST2: %d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_gpcf01( pGPCF01 gpcf01_ptr, pCHAR ErrorMsg)  
{
	gpcf01_to_db( gpcf01_ptr );
	 
	if ( db_error_statics_flag == true )
    {
    	start_time = ptetime_get_time();
    }
	EXEC SQL INSERT INTO gpcf01
	(
		days_inactive, max_prev_passwords_not_allowed, max_password_retries, min_password_length, days_before_expiration, user_status_cntrl_tmeout_val
	)
	VALUES
	( :pte_gpcf01.days_inactive, :pte_gpcf01.max_prev_passwords_not_allowed, :pte_gpcf01.max_password_retries, :pte_gpcf01.min_password_length, :pte_gpcf01.days_before_expiration, :pte_gpcf01.user_status_cntrl_tmeout_val
	);
	
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : GPCF01 ,Fun_Name : db_insert_gpcf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
	if ( SQLCODE != 0 )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_gpcf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}
/*************************************************************************************/

/*************************************************************************************/
BYTE db_insert_amex3ds2( pAMEX3DS2 amex3ds2_ptr, pCHAR ErrorMsg)  
{
	amex3ds2_to_db( amex3ds2_ptr );
	 
	if ( db_error_statics_flag == true )
    {
    	start_time = ptetime_get_time();
    }
	EXEC SQL INSERT INTO amex3ds2
	(
		self_validation_ac, csc_validation_flag, authentication_result_code_ac, authentication_attempt_ac, authentication_attempt_verify_flag
	)
	VALUES
	( :pte_amex3ds2.self_validation_ac, :pte_amex3ds2.csc_validation_flag, :pte_amex3ds2.authentication_result_code_ac, :pte_amex3ds2.authentication_attempt_ac, :pte_amex3ds2.authentication_attempt_verify_flag
	);
	
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : AMEX3DS2 ,Fun_Name : db_insert_amex3ds2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
	if ( SQLCODE != 0 )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_amex3ds2 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}


BYTE db_insert_dci3ds2( pDCI3DS2 dci3ds2_ptr, pCHAR ErrorMsg)  
{
	dci3ds2_to_db( dci3ds2_ptr );
	 
	if ( db_error_statics_flag == true )
    {
    	start_time = ptetime_get_time();
    }
	EXEC SQL INSERT INTO dci3ds2
	(
		self_validation_pass_cavv_rc, self_validation_cavv_rc, authentication_result_code_ac, authentication_result_code_cavv_rc, authentication_attmpt_ac, cvv2_validation_flag, authentication_attempt_verify_flag
	)
	VALUES
	( :pte_dci3ds2.self_validation_pass_cavv_rc, :pte_dci3ds2.self_validation_cavv_rc, :pte_dci3ds2.authentication_result_code_ac, :pte_dci3ds2.authentication_result_code_cavv_rc, :pte_dci3ds2.authentication_attmpt_ac, :pte_dci3ds2.cvv2_validation_flag, :pte_dci3ds2.authentication_attempt_verify_flag
	);
	
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : DCI3DS2 ,Fun_Name : db_insert_dci3ds2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
	if ( SQLCODE != 0 )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_dci3ds2 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

BYTE db_insert_jcb3ds2( pJCB3DS2 jcb3ds2_ptr, pCHAR ErrorMsg)  
{
	jcb3ds2_to_db( jcb3ds2_ptr );
	 
	if ( db_error_statics_flag == true )
    {
    	start_time = ptetime_get_time();
    }
	EXEC SQL INSERT INTO jcb3ds2
	(
		auth_result_code_value, response_code,  validation_flag
	)
	VALUES
	( :pte_jcb3ds2.auth_result_code_value, :pte_jcb3ds2.response_code, :pte_jcb3ds2.validation_flag
	);
	
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : JCB3DS2 ,Fun_Name : db_insert_jcb3ds2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
	if ( SQLCODE != 0 )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_jcb3ds2 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

BYTE db_delete_jcb3ds2( pJCB3DS2 jcb3ds2_ptr, pCHAR ErrorMsg)
{
   BYTE  retval;

   jcb3ds2_to_db( jcb3ds2_ptr );

   if ( db_error_statics_flag == true )
   {
       start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_jcb3ds2
      FROM   JCB3DS2
      WHERE  auth_result_code_value   = :pte_jcb3ds2.auth_result_code_value	AND
         		rownum = 1
      		For Update NOWAIT;
   if ( db_error_statics_flag == true )
   {
        end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Netds, ST1:%d,ST2:%d ,Data_Type : JCB3DS2 ,Fun_Name : db_delete_jcb3ds2_S , Duration = %f,auth_result_code_value:%s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_jcb3ds2.auth_result_code_value);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   	}
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_delete_jcb3ds2 ,ST1:%d,ST2: %d_1,auth_result_code_value:%s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_jcb3ds2.auth_result_code_value);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
       start_time = ptetime_get_time();
   }
   EXEC SQL DELETE JCB3DS2
      WHERE  auth_result_code_value   = :pte_jcb3ds2.auth_result_code_value;
   
   if ( db_error_statics_flag == true )
   {
        end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Netds, ST1:%d,ST2:%d ,Data_Type : FG01 ,Fun_Name : db_delete_jcb3ds2_D , Duration = %f,auth_result_code_value:%s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_jcb3ds2.auth_result_code_value);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   	}
   if (( SQLCODE == 0 ) || ( SQLCODE == NO_DATA_FOUND) )
      retval = PTEMSG_OK;
   else
   {
	memset(er_buf,0x00,sizeof(er_buf));
	retval = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In db_delete_jcb3ds2 ,ST1:%d,ST2: %d_2,auth_result_code_value:%s",
	DB_MsgSubtype1,DB_MsgSubtype2,pte_jcb3ds2.auth_result_code_value);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);

}

   return( retval );
}


BYTE db_get_jcb3ds201_count(pCHAR jcb3ds2count, pCHAR ErrorMsg )
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   int NumRowsReturned = 0;
   EXEC SQL END DECLARE SECTION;

   EXEC SQL SELECT COUNT(*) INTO :NumRowsReturned FROM JCB3DS2;
   
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_jcb3ds201_count,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   else
   {
      itoa(NumRowsReturned, jcb3ds2count, 10);
      return PTEMSG_OK;
   }


}

BYTE db_get_jcb3ds2_service_list(pJCB3DS2 jcb3ds2_ptr,
                                pJCB3DS2_GUI_LIST JCB3DS2_List,
                                pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;

    char auth_result_code_value[3];

    int  temp;

    EXEC SQL END DECLARE SECTION;

   memset( JCB3DS2_List, 0, sizeof(JCB3DS2_List) );
   strcpy(JCB3DS2_List->num_returned,"0");
   strncpy( auth_result_code_value, jcb3ds2_ptr->auth_result_code_value, sizeof(auth_result_code_value) );


   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE jcb3ds2_cursor4 CURSOR FOR
      SELECT * from ncf01
      WHERE  auth_result_code_value > :auth_result_code_value 
      ORDER BY auth_result_code_value;
   
   if ( db_error_statics_flag == true )
   {
        end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Netds, ST1:%d,ST2:%d ,Data_Type : JCB3DS2 ,Fun_Name : db_get_jcb3ds2_service_list , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   	}
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN jcb3ds2_cursor4;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < SERVICE_LIST_SIZE; temp++ )
   {
      memset(&db_jcb3ds2, 0x00, sizeof(db_jcb3ds2));
      if ( db_error_statics_flag == true )
      {
          start_time = ptetime_get_time();
      }
      
      EXEC SQL FETCH jcb3ds2_cursor4
      INTO :db_jcb3ds2;
      
      if ( db_error_statics_flag == true )
      {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Netds, ST1:%d,ST2:%d ,Data_Type : JCB3DS2_CURSOR4 ,Fun_Name : db_get_jcb3ds2_service_list , Duration = %f,auth_result_code_value:%s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,db_jcb3ds2.auth_result_code_value);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   	  }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE jcb3ds2_cursor4;
         memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In db_get_jcb3ds2_service_list ,ST1:%d,ST2: %d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;
   
      }
      db_to_jcb3ds2(&JCB3DS2_List->jcb3ds2_record[temp]);
      sprintf(JCB3DS2_List->num_returned, "%d", temp+1 );
   }

   EXEC SQL CLOSE jcb3ds2_cursor4;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In db_get_jcb3ds2_service_list ,ST1:%d,ST2: %d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;

}

BYTE db_get_ccl01_service_list(pCCL01 ccl01_ptr,
                                pCCL01_GUI_LIST CCL01_List,
                                pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;

    char currency_value[3];

    int  temp;

    EXEC SQL END DECLARE SECTION;

   memset( CCL01_List, 0, sizeof(CCL01_List) );
   strcpy(CCL01_List->num_returned,"0");
   strncpy( currency_value, ccl01_ptr->currency_value, sizeof(currency_value) );


   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE ccl01_cursor4 CURSOR FOR
      SELECT * from ccl01
      WHERE  currency_value > :currency_value 
      ORDER BY currency_value;
   
   if ( db_error_statics_flag == true )
   {
        end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Netds, ST1:%d,ST2:%d ,Data_Type : CCL01 ,Fun_Name : db_get_ccl01_service_list , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   	}
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN ccl01_cursor4;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < SERVICE_LIST_SIZE; temp++ )
   {
      memset(&db_ccl01, 0x00, sizeof(db_ccl01));
      if ( db_error_statics_flag == true )
      {
          start_time = ptetime_get_time();
      }
      
      EXEC SQL FETCH ccl01_cursor4
      INTO :db_ccl01;
      
      if ( db_error_statics_flag == true )
      {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Netds, ST1:%d,ST2:%d ,Data_Type : CCL01_CURSOR4 ,Fun_Name : db_get_ccl01_service_list , Duration = %f,currency_value:%s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,db_ccl01.currency_value);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   	  }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE ccl01_cursor4;
         memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In db_get_ccl01_service_list ,ST1:%d,ST2: %d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;
   
      }
      db_to_ccl01(&CCL01_List->ccl01_record[temp]);
      sprintf(CCL01_List->num_returned, "%d", temp+1 );
   }

   EXEC SQL CLOSE ccl01_cursor4;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In db_get_ccl01_service_list ,ST1:%d,ST2: %d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;

}

BYTE db_get_bdkkey01_service_list(pBDKKEY01 bdkkey01_ptr,
                                pBDKKEY01_GUI_LIST BDKKEY01_List,
                                pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;

    char card_brand[10];

    int  temp;

    EXEC SQL END DECLARE SECTION;

   memset( BDKKEY01_List, 0, sizeof(BDKKEY01_List) );
   strcpy(BDKKEY01_List->num_returned,"0");
   strncpy( card_brand, bdkkey01_ptr->card_brand, sizeof(card_brand) );


   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE bdkkey01_cursor4 CURSOR FOR
      SELECT * from bdkkey01
      WHERE  card_brand > :card_brand 
      ORDER BY card_brand;
   
   if ( db_error_statics_flag == true )
   {
        end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Netds, ST1:%d,ST2:%d ,Data_Type : BDKKEY01 ,Fun_Name : db_get_bdkkey01_service_list , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   	}
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN bdkkey01_cursor4;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < SERVICE_LIST_SIZE; temp++ )
   {
      memset(&db_bdkkey01, 0x00, sizeof(db_bdkkey01));
      if ( db_error_statics_flag == true )
      {
          start_time = ptetime_get_time();
      }
      
      EXEC SQL FETCH bdkkey01_cursor4
      INTO :db_bdkkey01;
      
      if ( db_error_statics_flag == true )
      {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BDKKEY01_CURSOR4 ,Fun_Name : db_get_bdkkey01_service_list , Duration = %f,card_brand:%s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,db_bdkkey01.card_brand);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   	  }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE bdkkey01_cursor4;
         memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In db_get_bdkkey01_service_list ,ST1:%d,ST2: %d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;
   
      }
      db_to_ccl01(&BDKKEY01_List->bdkkey01_record[temp]);
      sprintf(BDKKEY01_List->num_returned, "%d", temp+1 );
   }

   EXEC SQL CLOSE bdkkey01_cursor4;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In db_get_bdkkey01_service_list ,ST1:%d,ST2: %d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;

}

/*BYTE db_get_caf01_keyblock01_service_list(pCAF01_KEYBLOCK caf01_keyblock01_ptr,
                                pCAF01_KEYBLOCK_GUI_LIST CAF01_KEYBLOCK01_List,
                                pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;

    char Caf_Profile_id[5];
    char Type[2];

    int  temp;

    EXEC SQL END DECLARE SECTION;

   memset( CAF01_KEYBLOCK01_List, 0, sizeof(CAF01_KEYBLOCK_GUI_LIST) );
   strcpy(CAF01_KEYBLOCK01_List->num_returned,"0");
   strncpy( Caf_Profile_id, caf01_keyblock01_ptr->Caf_Profile_id, sizeof(Caf_Profile_id) );
   strncpy( Type, caf01_keyblock01_ptr->Type, sizeof(Type) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE caf01_keyblock01_cursor4 CURSOR FOR
      SELECT * from CAF01_KEYBLOCK
      WHERE  Caf_Profile_id > :Caf_Profile_id AND
      		 Type > :Type
      ORDER BY Caf_Profile_id;
   
   if ( db_error_statics_flag == true )
   {
        end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01_KEYBLOCK ,Fun_Name : db_get_caf01_keyblock01_service_list , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   	}
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN caf01_keyblock01_cursor4;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < SERVICE_LIST_SIZE; temp++ )
   {
      memset(&db_caf01_keyblock01, 0x00, sizeof(db_caf01_keyblock01));
      if ( db_error_statics_flag == true )
      {
          start_time = ptetime_get_time();
      }
      
      EXEC SQL FETCH caf01_keyblock01_cursor4
      INTO :db_caf01_keyblock01;
      
      if ( db_error_statics_flag == true )
      {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : caf01_keyblock01_cursor4 ,Fun_Name : db_get_caf01_keyblock01_service_list , Duration = %f,Profile_id:%s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,db_caf01_keyblock01.Caf_Profile_id);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   	  }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE caf01_keyblock01_cursor4;
         memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In db_get_caf01_keyblock01_service_list ,ST1:%d,ST2: %d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;
   
      }
      db_caf01_keyblock01(CAF01_KEYBLOCK01_List->caf01_keyblock_record[temp]);
      sprintf(CAF01_KEYBLOCK01_List->num_returned, "%d", temp+1 );
   }

   EXEC SQL CLOSE caf01_keyblock01_cursor4;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In db_get_caf01_keyblock01_service_list ,ST1:%d,ST2: %d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;

}*/

BYTE db_get_jcb3ds2_count(pCHAR jcb3ds2count, pCHAR ErrorMsg )
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   int NumRowsReturned = 0;
   EXEC SQL END DECLARE SECTION;

   EXEC SQL SELECT COUNT(*) INTO :NumRowsReturned FROM JCB3DS2;
   
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_obs01_count,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   else
   {
      itoa(NumRowsReturned, jcb3ds2count, 10);
      return PTEMSG_OK;
   }


}

BYTE db_get_ccl01_count(pCHAR ccl01count, pCHAR ErrorMsg )
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   int NumRowsReturned = 0;
   EXEC SQL END DECLARE SECTION;

   EXEC SQL SELECT COUNT(*) INTO :NumRowsReturned FROM CCL01;
   
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_ccl01_count,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   else
   {
      itoa(NumRowsReturned, ccl01count, 10);
      return PTEMSG_OK;
   }


}

BYTE db_get_bdkkey01_count(pCHAR bdkkey01count, pCHAR ErrorMsg )
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   int NumRowsReturned = 0;
   EXEC SQL END DECLARE SECTION;

   EXEC SQL SELECT COUNT(*) INTO :NumRowsReturned FROM BDKKEY01;
   
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_bdkkey01_count,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   else
   {
      itoa(NumRowsReturned, bdkkey01count, 10);
      return PTEMSG_OK;
   }


}

BYTE db_get_caf01_keyblock01_count(pCHAR caf01_keyblock01count, pCHAR ErrorMsg )
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   int NumRowsReturned = 0;
   EXEC SQL END DECLARE SECTION;

   EXEC SQL SELECT COUNT(*) INTO :NumRowsReturned FROM CAF01_KEYBLOCK;
   
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_caf01_keyblock01_count,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   else
   {
      itoa(NumRowsReturned, caf01_keyblock01count, 10);
      return PTEMSG_OK;
   }


}

BYTE db_get_jcb3ds2_gui_list( pJCB3DS2          jcb3ds2_ptr,
                            pJCB3DS2_GUI_LIST JCB3DS2_List,
                            pCHAR           ErrorMsg )
{

   EXEC SQL BEGIN DECLARE SECTION;
   char auth_result_code_value [3] = {0};

   int temp = 0;
   EXEC SQL END DECLARE SECTION;

   memset( JCB3DS2_List, 0, sizeof(JCB3DS2_GUI_LIST) );
   strcpy(JCB3DS2_List->num_returned,"0");
   if(jcb3ds2_ptr->auth_result_code_value[0] == '\0')
   {
   		auth_result_code_value[0] = ' ';
 
   }
   else
   {
      strncpy( auth_result_code_value, jcb3ds2_ptr->auth_result_code_value, sizeof(auth_result_code_value) );

   }


   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE jcb3ds2_cursor1 CURSOR FOR
      SELECT * from jcb3ds2
      WHERE (auth_result_code_value = :auth_result_code_value) OR
                  (auth_result_code_value > :auth_result_code_value);
             
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Netds, ST1:%d,ST2:%d ,Data_Type : JCB3DS2 ,Fun_Name : db_get_jcb3ds2_gui_list , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN jcb3ds2_cursor1;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
      memset(&db_jcb3ds2, 0x00, sizeof(db_jcb3ds2));
      if ( db_error_statics_flag == true )
      {
      		start_time = ptetime_get_time();
      }
      EXEC SQL FETCH jcb3ds2_cursor1
      INTO :db_jcb3ds2;
      
      if ( db_error_statics_flag == true )
   	  {
      		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Netds, ST1:%d,ST2:%d ,Data_Type : JCB3DS2_CURSOR1 ,Fun_Name : db_get_jcb3ds2_gui_list , Duration = %f, auth_result_code_value: %s",
				DB_MsgSubtype1,DB_MsgSubtype2,duration,db_jcb3ds2.auth_result_code_value);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
   	  }

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE jcb3ds2_cursor1;
         
		 memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In db_get_jcb3ds2_gui_list ,ST1:%d,ST2: %d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;
   
      }
      db_to_jcb3ds2(&JCB3DS2_List->jcb3ds2_record[temp]);
      sprintf( JCB3DS2_List->num_returned, "%d", (temp+1) );
   }

   EXEC SQL CLOSE jcb3ds2_cursor1;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In db_get_jcb3ds2_gui_list ,ST1:%d,ST2: %d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
}

BYTE db_get_ccl01_gui_list( pCCL01          ccl01_ptr,
                            pCCL01_GUI_LIST CCL01_List,
                            pCHAR           ErrorMsg )
{

   EXEC SQL BEGIN DECLARE SECTION;
   char currency_value [3] = {0};

   int temp = 0;
   EXEC SQL END DECLARE SECTION;

   memset( CCL01_List, 0, sizeof(CCL01_GUI_LIST) );
   strcpy(CCL01_List->num_returned,"0");
   if(ccl01_ptr->currency_value[0] == '\0')
   {
   		currency_value[0] = ' ';
 
   }
   else
   {
      strncpy( currency_value, ccl01_ptr->currency_value, sizeof(currency_value) );

   }


   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE ccl01_cursor1 CURSOR FOR
      SELECT * from ccl01
      WHERE (currency_value = :currency_value) OR
                  (currency_value > :currency_value);
             
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Netds, ST1:%d,ST2:%d ,Data_Type : CCL01 ,Fun_Name : db_get_ccl01_gui_list , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN ccl01_cursor1;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < CURR_CODE_LIST_SIZE ; temp++ )
   {
      memset(&db_ccl01, 0x00, sizeof(db_ccl01));
      if ( db_error_statics_flag == true )
      {
      		start_time = ptetime_get_time();
      }
      EXEC SQL FETCH ccl01_cursor1
      INTO :db_ccl01;
      
      if ( db_error_statics_flag == true )
   	  {
      		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Netds, ST1:%d,ST2:%d ,Data_Type : CCL01_CURSOR1 ,Fun_Name : db_get_ccl01_gui_list , Duration = %f, currency_value: %s",
				DB_MsgSubtype1,DB_MsgSubtype2,duration,db_ccl01.currency_value);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
   	  }

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE ccl01_cursor1;
         
		 memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In db_get_ccl01_gui_list ,ST1:%d,ST2: %d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;
   
      }
      db_to_ccl01(&CCL01_List->ccl01_record[temp]);
      sprintf( CCL01_List->num_returned, "%d", (temp+1) );
   }

   EXEC SQL CLOSE ccl01_cursor1;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In db_get_ccl01_gui_list ,ST1:%d,ST2: %d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
}

BYTE db_get_bdkkey01_gui_list( pBDKKEY01          bdkkey01_ptr,
                            pBDKKEY01_GUI_LIST BDKKEY01_List,
                            pCHAR           ErrorMsg )
{

   EXEC SQL BEGIN DECLARE SECTION;
   char card_brand [10] = {0};

   int temp = 0;
   EXEC SQL END DECLARE SECTION;

   memset( BDKKEY01_List, 0, sizeof(BDKKEY01_GUI_LIST) );
   strcpy(BDKKEY01_List->num_returned,"0");
   if(bdkkey01_ptr->card_brand[0] == '\0')
   {
   		card_brand[0] = ' ';
 
   }
   else
   {
      strncpy( card_brand, bdkkey01_ptr->card_brand, sizeof(card_brand) );

   }


   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE bdkkey01_cursor1 CURSOR FOR
      SELECT * from bdkkey01
      WHERE (card_brand = :card_brand) OR
                  (card_brand > :card_brand);
             
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BDKKEY01 ,Fun_Name : db_get_bdkkey01_gui_list , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN bdkkey01_cursor1;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < BDK_KEY_LIST_SIZE ; temp++ )
   {
      memset(&db_bdkkey01, 0x00, sizeof(db_bdkkey01));
      if ( db_error_statics_flag == true )
      {
      		start_time = ptetime_get_time();
      }
      EXEC SQL FETCH bdkkey01_cursor1
      INTO :db_bdkkey01;
      
      if ( db_error_statics_flag == true )
   	  {
      		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BDKKEY01_CURSOR1 ,Fun_Name : db_get_bdkkey01_gui_list , Duration = %f, card_brand: %s",
				DB_MsgSubtype1,DB_MsgSubtype2,duration,db_bdkkey01.card_brand);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
   	  }

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE bdkkey01_cursor1;
         
		 memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In db_get_bdkkey01_gui_list ,ST1:%d,ST2: %d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;
   
      }
      db_to_bdkkey01(&BDKKEY01_List->bdkkey01_record[temp]);
      sprintf( BDKKEY01_List->num_returned, "%d", (temp+1) );
   }

   EXEC SQL CLOSE bdkkey01_cursor1;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In db_get_bdkkey01_gui_list ,ST1:%d,ST2: %d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
}

BYTE db_get_caf01_keyblock01_gui_list( pCHAR Caf_Profile_Id,
                            pCAF01_KEYBLOCK_GUI_LIST CAF01_KEYBLOCK01_List,
                            pCHAR           ErrorMsg )
{

   EXEC SQL BEGIN DECLARE SECTION;
   char caf_profile_id [5] = {0};
    char type[2];
    varchar new_caf_profile_id[5];
    varchar new_type[2];
   int temp = 0;
   EXEC SQL END DECLARE SECTION;

   memset( CAF01_KEYBLOCK01_List, 0, sizeof(CAF01_KEYBLOCK_GUI_LIST) );
   strcpy(CAF01_KEYBLOCK01_List->num_returned,"0");

   strncpy( caf_profile_id, Caf_Profile_Id, sizeof(caf_profile_id) );
   strncpy( type, Caf_Profile_Id + sizeof(caf_profile_id), sizeof(type) );



   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE caf01_keyblock01_cursor1 CURSOR FOR
      SELECT caf_profile_id, type from caf01_keyblock
      WHERE  (caf_profile_id = :caf_profile_id AND type >= :type) OR
	         (caf_profile_id > :caf_profile_id) ORDER BY caf_profile_id ASC;

             
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01_KEYBLOCK ,Fun_Name : db_get_caf01_keyblock01_cursor1 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN caf01_keyblock01_cursor1;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
       memset(&new_caf_profile_id, 0x00, sizeof(new_caf_profile_id));
      if ( db_error_statics_flag == true )
      {
      		start_time = ptetime_get_time();
      }
      EXEC SQL FETCH caf01_keyblock01_cursor1
      INTO :new_caf_profile_id, new_type;
      
      if ( db_error_statics_flag == true )
   	  {
      		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01_KEYBLOCK ,Fun_Name : db_get_caf01_keyblock01_gui_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
   	  }

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE caf01_keyblock01_cursor1;
         
		 memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In db_get_caf01_keyblock01_gui_list ,ST1:%d,ST2: %d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;
   
      }
      strncpy( CAF01_KEYBLOCK01_List->caf01_keyblock_record[temp].caf_profile_id, new_caf_profile_id.arr, new_caf_profile_id.len );
      strncpy( CAF01_KEYBLOCK01_List->caf01_keyblock_record[temp].type, new_type.arr, new_type.len );
      
      sprintf( CAF01_KEYBLOCK01_List->num_returned, "%d", (temp+1) );
   }

   EXEC SQL CLOSE caf01_keyblock01_cursor1;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In db_get_caf01_keyblock01_gui_list ,ST1:%d,ST2: %d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
}


BYTE db_get_caf01_keyblock01_gui_list_by_type( pCHAR Caf_Profile_Id,
                            pCAF01_KEYBLOCK_GUI_LIST CAF01_KEYBLOCK01_List,
                            pCHAR           ErrorMsg )
{

   EXEC SQL BEGIN DECLARE SECTION;
   char caf_profile_id [5] = {0};
    char type[2];
    varchar new_caf_profile_id[5];
    varchar new_type[2];
   int temp = 0;
   EXEC SQL END DECLARE SECTION;

   memset( CAF01_KEYBLOCK01_List, 0, sizeof(CAF01_KEYBLOCK_GUI_LIST) );
   strcpy(CAF01_KEYBLOCK01_List->num_returned,"0");

   strncpy( caf_profile_id, Caf_Profile_Id, sizeof(caf_profile_id) );
   strncpy( type, Caf_Profile_Id + sizeof(caf_profile_id), sizeof(type) );



   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE caf01_keyblock01_cursor CURSOR FOR
      SELECT caf_profile_id, type from caf01_keyblock
      WHERE  (caf_profile_id = :caf_profile_id AND type >= :type) OR
	         (caf_profile_id > :caf_profile_id) ORDER BY caf_profile_id ASC;

             
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01_KEYBLOCK ,Fun_Name : db_get_caf01_keyblock01_cursor , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN caf01_keyblock01_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
       memset(&new_caf_profile_id, 0x00, sizeof(new_caf_profile_id));
      if ( db_error_statics_flag == true )
      {
      		start_time = ptetime_get_time();
      }
      EXEC SQL FETCH caf01_keyblock01_cursor
      INTO :new_caf_profile_id, new_type;
      
      if ( db_error_statics_flag == true )
   	  {
      		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01_KEYBLOCK ,Fun_Name : db_get_caf01_keyblock01_gui_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
   	  }

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE caf01_keyblock01_cursor;
         
		 memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In db_get_caf01_keyblock01_gui_list ,ST1:%d,ST2: %d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;
   
      }
      strncpy( CAF01_KEYBLOCK01_List->caf01_keyblock_record[temp].caf_profile_id, new_caf_profile_id.arr, new_caf_profile_id.len );
      strncpy( CAF01_KEYBLOCK01_List->caf01_keyblock_record[temp].type, new_type.arr, new_type.len );
      
      sprintf( CAF01_KEYBLOCK01_List->num_returned, "%d", (temp+1) );
   }

   EXEC SQL CLOSE caf01_keyblock01_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In db_get_caf01_keyblock01_gui_list ,ST1:%d,ST2: %d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
}


BYTE db_insert_cup3ds2( pCUP3DS2 cup3ds2_ptr, pCHAR ErrorMsg)  
{
	cup3ds2_to_db( cup3ds2_ptr );
	 
	if ( db_error_statics_flag == true )
    {
    	start_time = ptetime_get_time();
    }
	EXEC SQL INSERT INTO cup3ds2
	(
		av_verification_rc, 
		authentication_attempt_rc, 
		cvn2_validation_flag, 
		av_validation_flag,
		cup_authentication_attempt_verify_flag
	)
	VALUES
	( :pte_cup3ds2.av_verification_rc, 
	  :pte_cup3ds2.authentication_attempt_rc, 
	  :pte_cup3ds2.cvn2_validation_flag, 
	  :pte_cup3ds2.av_validation_flag,
	  :pte_cup3ds2.cup_authentication_attempt_verify_flag
	);
	
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CUP3DS2 ,Fun_Name : db_insert_cup3ds2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
	if ( SQLCODE != 0 )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_cup3ds2 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}
/*************************************************************************************/
/*************************************************************************************/
BYTE db_select_gpcf01(pCHAR Primary_key,pGPCF01 gpcf01_ptr, pCHAR ErrorMsg)
{
	memset( &db_gpcf01, 0, sizeof( db_gpcf01 ) );

	if ( db_error_statics_flag == true )
    {
    	start_time = ptetime_get_time();
    }
    
	EXEC SQL SELECT *
	INTO :db_gpcf01
	FROM gpcf01
	WHERE ROWNUM = 1;
	
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : GPCF01 ,Fun_Name : db_select_gpcf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
	if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_gpcf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

	db_to_gpcf01 (gpcf01_ptr);

	return PTEMSG_OK;
	
}
/*************************************************************************************/
/*************************************************************************************/
BYTE db_select_amex3ds2(pCHAR Primary_key,pAMEX3DS2 amex3ds2_ptr, pCHAR ErrorMsg)
{
	memset( &db_amex3ds2, 0, sizeof( db_amex3ds2 ) );

	if ( db_error_statics_flag == true )
    {
    	start_time = ptetime_get_time();
    }
    
	EXEC SQL SELECT *
	INTO :db_amex3ds2
	FROM amex3ds2
	WHERE ROWNUM = 1;
	
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : AMEX3DS2 ,Fun_Name : db_select_amex3ds2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
	if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_amex3ds2 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

	db_to_amex3ds2 (amex3ds2_ptr);

	return PTEMSG_OK;
	
}


BYTE db_select_dci3ds2(pCHAR Primary_key,pDCI3DS2 dci3ds2_ptr, pCHAR ErrorMsg)
{
	memset( &db_dci3ds2, 0, sizeof( db_dci3ds2 ) );

	if ( db_error_statics_flag == true )
    {
    	start_time = ptetime_get_time();
    }
    
	EXEC SQL SELECT *
	INTO :db_dci3ds2
	FROM dci3ds2
	WHERE ROWNUM = 1;
	
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : DCI3DS2 ,Fun_Name : db_select_dci3ds2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
	if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_dci3ds2 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

	db_to_dci3ds2 (dci3ds2_ptr);

	return PTEMSG_OK;
	
}

BYTE db_select_jcb3ds2(pCHAR         key, 
                     pJCB3DS2        jcb3ds2_ptr,
                     pCHAR         ErrorMsg )
{
   memset( &db_jcb3ds2, 0, sizeof( db_jcb3ds2 ) );

   strncpy( pte_jcb3ds2.auth_result_code_value, key, sizeof(pte_jcb3ds2.auth_result_code_value) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
      EXEC SQL SELECT *
   INTO :db_jcb3ds2
   FROM jcb3ds2
   WHERE auth_result_code_value   = :pte_jcb3ds2.auth_result_code_value;
         
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Netds, ST1:%d,ST2:%d ,Data_Type : JCB3DS2 ,Fun_Name : db_select_jcb3ds2 , Duration = %f,auth_result_code_value:%s  ",
		DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_jcb3ds2.auth_result_code_value);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   
    if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_jcb3ds2,ST1:%d,ST2:%d,auth_result_code_value:%s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_jcb3ds2.auth_result_code_value);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   db_to_jcb3ds2 (jcb3ds2_ptr);

   return PTEMSG_OK;

}

BYTE db_select_cup3ds2(pCHAR Primary_key,pCUP3DS2 cup3ds2_ptr, pCHAR ErrorMsg)
{
	memset( &db_cup3ds2, 0, sizeof( db_cup3ds2 ) );

	if ( db_error_statics_flag == true )
    {
    	start_time = ptetime_get_time();
    }
    
	EXEC SQL SELECT *
	INTO :db_cup3ds2
	FROM cup3ds2
	WHERE ROWNUM = 1;
	
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CUP3DS2 ,Fun_Name : db_select_cup3ds2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
	if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_cup3ds2 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

	db_to_cup3ds2 (cup3ds2_ptr);

	return PTEMSG_OK;
	
}
/*************************************************************************************/
/*************************************************************************************/

BYTE db_select_clf01 (  pCHAR          Primary_key, 
                        pCLF01         clf01_ptr, 
                        pCHAR          ErrorMsg )

{

   memset( &db_clf01, 0, sizeof( db_clf01 ) );
   strncpy( pte_clf01.year, Primary_key, sizeof(pte_clf01.year) );
   strncpy( pte_clf01.month, Primary_key + sizeof(pte_clf01.year), sizeof(pte_clf01.month) );

   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *
   INTO :db_clf01
   FROM clf01
   WHERE year = :pte_clf01.year AND month = :pte_clf01.month;      
   if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CLF01 ,Fun_Name : db_select_clf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_select_clf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}



   db_to_clf01 (clf01_ptr);



   return PTEMSG_OK;

}



/*************************************************************************************/
#ifdef VISA7
BYTE db_select_merchant_integrity_param (  pMERCH_INT_PARAMS mip_rec, pMERCH_INT_PARAMS mip_ptr, pCHAR ErrorMsg )
{
   INT  retval;
   char m_id[16] = {0}, card_num[20] = {0}, cat_code[5] = {0};
  
   memset( &db_merch_int_param, 0, sizeof( db_merch_int_param ) );
   
   strncpy( m_id, 	     mip_rec->primary_key.merchant_id, 15 );  			
   strncpy( card_num,    mip_rec->primary_key.card_nbr,    16);  			
   strncpy( cat_code,    mip_rec->primary_key.category_cd, 4);

   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   
   EXEC  SQL SELECT *
   INTO  :db_merch_int_param
   FROM  merchant_integrity_param
   WHERE merchant_id = :m_id
   AND	 card_nbr    = :card_num
   AND	 category_cd = :cat_code
   AND	 rownum      = 1;
      
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	  memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		  sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCF01 ,Fun_Name : db_select_merchant_integrity_param , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		  Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }   

   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
	   memset(er_buf,0x00,sizeof(er_buf));
	   sprintf(er_buf,"In db_select_merchant_integrity_param,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
	   DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
	   strcat(er_buf,ErrorMsg);
	   Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	   return DB_rcode;
   }

   db_to_merch_int_param (mip_ptr);

   return PTEMSG_OK;
}
#endif

#if(defined MC12_OCT2023 || defined MC13_OCT2023)
BYTE db_select_merchant_integrity_param_mc_and_mac (  pMERCH_INT_PARAMS mip_rec, pMERCH_INT_PARAMS mip_ptr, pCHAR ErrorMsg )
{
   INT  retval;
   char m_id[16] = {0}, card_num[20] = {0}, cat_code[5] = {0};
  
   memset( &db_merch_int_param, 0, sizeof( db_merch_int_param ) );
   
   strncpy( m_id, 	  mip_rec->primary_key.merchant_id, 15 );  			
   strncpy( card_num, mip_rec->primary_key.card_nbr,    16 );  			
   strncpy( cat_code, MAC_CATEGORY_CODE,                4  );

   if ( db_error_statics_flag == true )
   {
	   start_time = ptetime_get_time();
   }
   
   //run the select query initial with for MAC decline
   EXEC  SQL SELECT *
   INTO  :db_merch_int_param
   FROM  merchant_integrity_param
   WHERE merchant_id = :m_id
   AND	 card_nbr    = :card_num
   AND	 category_cd = :cat_code
   AND   (c1_block = 'Y' OR c2_block = 'Y')
   AND	 rownum      = 1;
      
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	  memset(DB_Tmr_Lgng_Buf, 0x00, sizeof(DB_Tmr_Lgng_Buf));
		  sprintf(DB_Tmr_Lgng_Buf, "Exceeded Query: Trands, ST1:%d, ST2:%d ,Data_Type : MIP ,Fun_Name : db_select_merchant_integrity_param_mc_and_mac , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		  Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }   

   if(SQLCODE == NO_DATA_FOUND)
   {
	   memset(DB_Tmr_Lgng_Buf, 0x00, sizeof(DB_Tmr_Lgng_Buf));
	   sprintf(DB_Tmr_Lgng_Buf, "No MAC record found in MIP table, checking for MC excessive reattempts record, "
			   	   	   	   	   	"Card:%s, MID:%s, ST1:%d, Fun_Name : db_select_merchant_integrity_param_mc_and_mac",
								card_num, m_id, DB_MsgSubtype1 );
	   Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	   
	   strncpy( cat_code, MC_CATEGORY_CODE, 4 );
	   
	   if ( db_error_statics_flag == true )
	   {
		   start_time = ptetime_get_time();
	   }
	   
	   //run the second select query for MC excessive reattempts declines
	   EXEC  SQL SELECT *
	   INTO  :db_merch_int_param
	   FROM  merchant_integrity_param
	   WHERE merchant_id = :m_id
	   AND	 card_nbr    = :card_num
	   AND	 category_cd = :cat_code
	   AND   (c1_block = 'Y' OR c2_block = 'Y')
	   AND	 rownum      = 1;
	      
	   if ( db_error_statics_flag == true )
	   {
	      end_time = ptetime_get_time();
	      duration = end_time - start_time;
	      if(duration >= db_error_statics_value)
		  {
		  	  memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			  sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MIP ,Fun_Name : db_select_merchant_integrity_param_mc_and_mac , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			  Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		  }
	   }
	   
	   if(SQLCODE == NO_DATA_FOUND)
	   {
		   memset(DB_Tmr_Lgng_Buf, 0x00, sizeof(DB_Tmr_Lgng_Buf));
		   sprintf(DB_Tmr_Lgng_Buf, "No record found in MIP table for MC excessive reattempts, "
				   	   	   	   	   	"Card:%s, MID:%s, ST1:%d, Fun_Name : db_select_merchant_integrity_param_mc_and_mac",
									card_num, m_id, DB_MsgSubtype1);
		   Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	   }
	   
	   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
	   {	   
		   memset(er_buf,0x00,sizeof(er_buf));
		   sprintf(er_buf,"In db_select_merchant_integrity_param_mc_and_mac,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		   DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		   strcat(er_buf,ErrorMsg);
		   Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		   return DB_rcode;
	   }

	   db_to_merch_int_param (mip_ptr);
	   
	   return PTEMSG_OK;
   }
   
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
	   memset(er_buf,0x00,sizeof(er_buf));
	   sprintf(er_buf,"In db_select_merchant_integrity_param_mc_and_mac,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
	   DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
	   strcat(er_buf,ErrorMsg);
	   Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	   return DB_rcode;
   }

   db_to_merch_int_param (mip_ptr);

   return PTEMSG_OK;
}
#endif

/*************************************************************************************/

BYTE db_select_bpf01 (  pCHAR          Primary_key, 

                        pBPF01         bpf01_ptr, 

                        pCHAR          ErrorMsg )

{

   memset( &db_bpf01, 0, sizeof( db_bpf01 ) );

   strncpy( pte_bpf01.profile_id, Primary_key, sizeof(pte_bpf01.profile_id) );

   strncpy( pte_bpf01.job_id, Primary_key +sizeof(pte_bpf01.profile_id), sizeof(pte_bpf01.job_id) );

   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_bpf01

   FROM bpf01

   WHERE profile_id = :pte_bpf01.profile_id AND job_id > :pte_bpf01.job_id;

   if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BPF01 ,Fun_Name : db_select_bpf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }   
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_bpf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}


   db_to_bpf01 (bpf01_ptr);



   return PTEMSG_OK;

}



/*************************************************************************************/

/*************************************************************************************/

BYTE db_select_jbf01 (  pCHAR          Primary_key, 

                        pJBF01         jbf01_ptr, 

                        pCHAR          ErrorMsg )

{

   memset( &db_jbf01, 0, sizeof( db_jbf01 ) );

   strncpy( pte_jbf01.job_id, Primary_key, sizeof(pte_jbf01.job_id) );


   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_jbf01

   FROM jbf01

   WHERE job_id = :pte_jbf01.job_id;

   if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : JPF01 ,Fun_Name : db_select_jbf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }   
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_jbf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}


   db_to_jbf01 (jbf01_ptr);



   return PTEMSG_OK;

}



/*************************************************************************************/

/*************************************************************************************/

BYTE db_select_apf01 (  pCHAR          Primary_key, 

                        pAPF01         apf01_ptr, 

                        pCHAR          ErrorMsg )

{

   memset( &db_apf01, 0, sizeof( db_apf01 ) );

   strncpy( pte_apf01.app_name, Primary_key, sizeof(pte_apf01.app_name) );

   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_apf01

   FROM apf01

   WHERE app_name = :pte_apf01.app_name;

   if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : APF01 ,Fun_Name : db_select_apf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }   
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_apf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_apf01 (apf01_ptr);



   return PTEMSG_OK;

}



/*************************************************************************************/

/*************************************************************************************/

BYTE db_select_faf01 (  pCHAR          Primary_key, 

                        pFAF01         faf01_ptr, 

                        pCHAR          ErrorMsg )

{

   memset( &db_faf01, 0, sizeof( db_faf01 ) );

   strncpy( pte_faf01.caf_profile_id, Primary_key, sizeof(pte_faf01.caf_profile_id) );

   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_faf01

   FROM faf01

   WHERE caf_profile_id = :pte_faf01.caf_profile_id;

      
  if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : FAF01 ,Fun_Name : db_select_faf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_faf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}


   db_to_faf01 (faf01_ptr);



   return PTEMSG_OK;

}



/*************************************************************************************/

/*************************************************************************************/

BYTE db_select_ccf10 (  pCHAR          Primary_key, 

                        pCCF10         ccf10_ptr, 

                        pCHAR          ErrorMsg )

{

   memset( &db_ccf10, 0, sizeof( db_ccf10 ) );

   strncpy( pte_ccf10.card_nbr, Primary_key, sizeof(pte_ccf10.card_nbr) );

   strncpy( pte_ccf10.retrieval_ref_num, Primary_key + sizeof(pte_ccf10.card_nbr), sizeof(pte_ccf10.retrieval_ref_num) );

   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_ccf10

   FROM ccf10

   WHERE retrieval_ref_num = :pte_ccf10.retrieval_ref_num AND card_nbr = :pte_ccf10.card_nbr;

      
   if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF10 ,Fun_Name : db_select_ccf10 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_ccf10 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}


   db_to_ccf10 (ccf10_ptr);



   return PTEMSG_OK;

}


/*************************************************************************************/

/*************************************************************************************/

BYTE db_select_mcf03p (  pCHAR          Primary_key, 

                        pMCF03P         mcf03p_ptr, 

                        pCHAR          ErrorMsg )

{

   memset( &db_mcf03p, 0, sizeof( db_mcf03p ) );

   strncpy( pte_mcf03p.merch_id, Primary_key, sizeof(pte_mcf03p.merch_id) );

   strncpy( pte_mcf03p.system_date, Primary_key + sizeof(pte_mcf03p.merch_id), sizeof(pte_mcf03p.system_date) );

   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_mcf03p

   FROM mcf03p

   WHERE merch_id = :pte_mcf03p.merch_id AND system_date = :pte_mcf03p.system_date;

      
   if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCFD03P ,Fun_Name : db_select_mcf03p , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_mcf03p ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}


   db_to_mcf03p (mcf03p_ptr);



   return PTEMSG_OK;

}




/******************************************************************************/
/******************************************************************************/
BYTE db_select_bon01 (  pBON01         bon01_ptr, 
                        pCHAR          ErrorMsg )
{
   memset( &db_bon01, 0, sizeof( db_bon01 ) );
   
   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *
   INTO :db_bon01
   FROM bon01;
   if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BON01 ,Fun_Name : db_select_bon01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_bon01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bon01 (bon01_ptr);

   return PTEMSG_OK;
}

/******************************************************************************/
/******************************************************************************/
BYTE db_select_bon02( pCHAR Primary_key, pBON02 bon02_ptr, pCHAR ErrorMsg )
{
   BYTE  retval = PTEMSG_OK;

   memset( &db_bon02,  0x00, sizeof(db_bon02)  );
   memset( &pte_bon02, 0x00, sizeof(pte_bon02) );

   memcpy( pte_bon02.cash_id, Primary_key, sizeof(pte_bon02.cash_id) );

   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT cash_promo_id,
                   tag_id,
                   cash_promo_desc,
                   program_start_date,
                   program_end_date,
                   tran_threshold,
                   tran_counter,
                   time_period,
                   max_period_winners,
                   period_win_counter,
                   max_program_winners,
                   program_win_counter,
                   amount1_low,
                   amount1_high,
                   response1,
                   win_type_radio1,
                   reward_amount1,
                   amount2_low,
                   amount2_high,
                   response2,
                   win_type_radio2,
                   reward_amount2,
                   amount3_low,
                   amount3_high,
                   response3,
                   win_type_radio3,
                   reward_amount3,
                   amount4_low,
                   amount4_high,
                   response4,
                   win_type_radio4,
                   reward_amount4,
                   amount5_low,
                   amount5_high,
                   response5,
                   win_type_radio5,
                   reward_amount5,
                   multi_winner_text,
                   multi_winners_allowed

   INTO :db_bon02.cash_id,
        :db_bon02.tag_id,
        :db_bon02.cash_desc,
        :db_bon02.program_start_date,
        :db_bon02.program_end_date,
        :db_bon02.tran_threshold,
        :db_bon02.tran_ctr,
        :db_bon02.time_period,
        :db_bon02.max_period_winners,
        :db_bon02.period_win_ctr,
        :db_bon02.max_program_winners,
        :db_bon02.program_win_ctr,
        :db_bon02.low_amount1,
        :db_bon02.high_amount1,
        :db_bon02.resp_text1,
        :db_bon02.win_type1,
        :db_bon02.reward_amount1,
        :db_bon02.low_amount2,
        :db_bon02.high_amount2,
        :db_bon02.resp_text2,
        :db_bon02.win_type2,
        :db_bon02.reward_amount2,
        :db_bon02.low_amount3,
        :db_bon02.high_amount3,
        :db_bon02.resp_text3,
        :db_bon02.win_type3,
        :db_bon02.reward_amount3,
        :db_bon02.low_amount4,
        :db_bon02.high_amount4,
        :db_bon02.resp_text4,
        :db_bon02.win_type4,
        :db_bon02.reward_amount4,
        :db_bon02.low_amount5,
        :db_bon02.high_amount5,
        :db_bon02.resp_text5,
        :db_bon02.win_type5,
        :db_bon02.reward_amount5,
        :db_bon02.multi_winner_text,
        :db_bon02.multi_winners_allowed

   FROM bon02

   WHERE cash_promo_id = :pte_bon02.cash_id;
    if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BON02 ,Fun_Name : db_select_bon02 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_bon02 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   else
      db_to_bon02( bon02_ptr );

   return( retval );
}



/*************************************************************************************/

/*************************************************************************************/

BYTE db_select_ccf01 (  pCHAR          Primary_key, 

                        pCCF01         ccf01_ptr, 

                        pCHAR          ErrorMsg )

{

   memset( &db_ccf01, 0, sizeof( db_ccf01 ) );

   strncpy( pte_ccf01.card_type, Primary_key, sizeof(pte_ccf01.card_type) );

   strncpy( pte_ccf01.card_nbr, Primary_key + sizeof(pte_ccf01.card_type), sizeof(pte_ccf01.card_nbr) );


   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_ccf01

   FROM ccf01

   WHERE card_nbr = :pte_ccf01.card_nbr AND card_type = :pte_ccf01.card_type;

    if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF01 ,Fun_Name : db_select_ccf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }  

   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_ccf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }


   db_to_ccf01 (ccf01_ptr);



   return PTEMSG_OK;

}





/*************************************************************************************/

/*************************************************************************************/

BYTE db_select_acf01 (  pCHAR          Primary_key, 

                        pACF01         acf01_ptr, 

                        pCHAR          ErrorMsg )

{

   memset( &db_acf01, 0, sizeof( db_acf01 ) );

   strncpy( pte_acf01.account_type, Primary_key, sizeof(pte_acf01.account_type) );

   strncpy( pte_acf01.account_nbr, Primary_key +  sizeof(pte_acf01.account_type), sizeof(pte_acf01.account_nbr) );


   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_acf01

   FROM acf01

   WHERE account_nbr = :pte_acf01.account_nbr AND account_type = :pte_acf01.account_type;

      
   if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ACF01 ,Fun_Name : db_select_acf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_acf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }


   db_to_acf01 (acf01_ptr);



   return PTEMSG_OK;

}


/*************************************************************************************/

/*************************************************************************************/

BYTE db_select_ccl01 (  pCHAR          Primary_key, 

                        pCCL01         ccl01_ptr, 

                        pCHAR          ErrorMsg )

{

   memset( &db_ccl01, 0, sizeof( db_ccl01 ) );

   strncpy( pte_ccl01.currency_value, Primary_key, sizeof(pte_ccl01.currency_value) );


   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_ccl01

   FROM ccl01

   WHERE currency_value = :pte_ccl01.currency_value;

      
   if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCL01 ,Fun_Name : db_select_ccl01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_ccl01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }


   db_to_ccl01 (ccl01_ptr);



   return PTEMSG_OK;

}

/*************************************************************************************/

/*************************************************************************************/

BYTE db_select_bdkkey01 (  pCHAR          Primary_key, 

                        pBDKKEY01         bdkkey01_ptr, 

                        pCHAR          ErrorMsg )

{

   memset( &db_bdkkey01, 0, sizeof( db_bdkkey01 ) );

   strncpy( pte_bdkkey01.card_brand, Primary_key, sizeof(pte_bdkkey01.card_brand) );


   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_bdkkey01

   FROM bdkkey01

   WHERE card_brand = :pte_bdkkey01.card_brand;

      
   if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BDKKEY01 ,Fun_Name : db_select_bdkkey01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_bdkkey01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }


   db_to_bdkkey01 (bdkkey01_ptr);



   return PTEMSG_OK;

}


/*************************************************************************************/

/*************************************************************************************/

BYTE db_select_caf01_keyblock01 (  pCHAR          Primary_key, 

                        pCAF01_KEYBLOCK         caf01_keyblock01_ptr, 

                        pCHAR          ErrorMsg )

{

   memset( &db_caf01_keyblock01, 0, sizeof( db_caf01_keyblock01 ) );

   strncpy( pte_caf01_keyblock01.Caf_Profile_id, Primary_key, sizeof(pte_caf01_keyblock01.Caf_Profile_id) );

	strncpy( pte_caf01_keyblock01.Type, Primary_key + sizeof(pte_caf01_keyblock01.Caf_Profile_id), 
																		sizeof(pte_caf01_keyblock01.Type) );

   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_caf01_keyblock01

   FROM caf01_keyblock

   WHERE Caf_Profile_id = :pte_caf01_keyblock01.Caf_Profile_id AND
   		 Type			= :pte_caf01_keyblock01.Type;

      
   if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BDKKEY01 ,Fun_Name : db_select_caf01_keyblock01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_caf01_keyblock01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }


   db_to_caf01_keyblock01 (caf01_keyblock01_ptr);

   return PTEMSG_OK;

}


BYTE db_select_bin_range_cr01_mp ( pAUTH_TX       auth_tx,
						 pCHAR          Primary_key, 

                        pCR01         cr01_ptr, 

                        pCHAR          ErrorMsg )

{

   memset( &db_cr01, 0, sizeof( db_cr01 ) );

	strncpy( pte_cr01.rule_bin_high,auth_tx->BIN01_details.high , sizeof(pte_cr01.rule_bin_high) );
   strncpy( pte_cr01.rule_bin_low, auth_tx->BIN01_details.primary_key.low , sizeof(pte_cr01.rule_bin_low) );
	strncpy( pte_cr01.rule_processing, "0" , sizeof(pte_cr01.rule_processing) );
   
   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_cr01

   FROM cr01

   WHERE rule_bin_low = :pte_cr01.rule_bin_low AND rule_bin_high = :pte_cr01.rule_bin_high 
  	 AND  rule_processing = :pte_cr01.rule_processing;

      
   if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CR01 ,Fun_Name : db_select_bin_range_cr01 , Duration = %f,",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_bin_range_cr01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   

   db_to_cr01 (cr01_ptr);



   return PTEMSG_OK;

}


BYTE db_select_bin_range_cr01_retail ( pAUTH_TX       auth_tx,
						 pCHAR          Primary_key, 

                        pCR01         cr01_ptr, 

                        pCHAR          ErrorMsg )

{

   memset( &db_cr01, 0, sizeof( db_cr01 ) );

	strncpy( pte_cr01.rule_bin_high,auth_tx->BIN01_details.high , sizeof(pte_cr01.rule_bin_high) );
   strncpy( pte_cr01.rule_bin_low, auth_tx->BIN01_details.primary_key.low , sizeof(pte_cr01.rule_bin_low) );
	strncpy( pte_cr01.rule_processing, "1",sizeof(pte_cr01.rule_processing) );
   
   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_cr01

   FROM cr01

   WHERE rule_bin_low = :pte_cr01.rule_bin_low AND rule_bin_high = :pte_cr01.rule_bin_high 
  	 AND  rule_processing = :pte_cr01.rule_processing;

      
   if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CR01 ,Fun_Name : db_select_bin_range_cr01 , Duration = %f,",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_bin_range_cr01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   

   db_to_cr01 (cr01_ptr);



   return PTEMSG_OK;

}


/*************************************************************************************/

/*************************************************************************************/

BYTE db_select_crf01 (  pCHAR          Primary_key, 

                        pCRF01         crf01_ptr, 

                        pCHAR          ErrorMsg )

{

   memset( &db_crf01, 0, sizeof( db_crf01 ) );

   strncpy( pte_crf01.currency_code, Primary_key, sizeof(pte_crf01.currency_code) );

   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_crf01

   FROM crf01

   WHERE currency_code = :pte_crf01.currency_code;

      
   if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CRF01 ,Fun_Name : db_select_crf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_crf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   db_to_crf01 (crf01_ptr);



   return PTEMSG_OK;

}



/*************************************************************************************/

/*************************************************************************************/

BYTE db_select_csf01 (  pCHAR          Primary_key, 

                        pCSF01         csf01_ptr, 

                        pCHAR          ErrorMsg )

{

   memset( &db_csf01, 0, sizeof( db_csf01 ) );

   strncpy( pte_csf01.status, Primary_key, sizeof(pte_csf01.status) );

   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_csf01

   FROM csf01

   WHERE status = :pte_csf01.status;

      
   if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CSF01 ,Fun_Name : db_select_csf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_csf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }


   db_to_csf01 (csf01_ptr);



   return PTEMSG_OK;

}



/*************************************************************************************/

/*************************************************************************************/

BYTE db_select_paf01 (  pCHAR          Primary_key, 

                        pPAF01         paf01_ptr, 

                        pCHAR          ErrorMsg )

{

   memset( &db_paf01, 0, sizeof( db_paf01 ) );

   strncpy( pte_paf01.primary_acct_nbr, Primary_key, sizeof(pte_paf01.primary_acct_nbr) );

   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_paf01

   FROM paf01

   WHERE primary_acct_nbr = :pte_paf01.primary_acct_nbr;

      
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : PAF01 ,Fun_Name : db_select_paf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_paf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }


   db_to_paf01 (paf01_ptr);



   return PTEMSG_OK;

}



/*************************************************************************************/

/*************************************************************************************/

BYTE db_select_def01 (  pCHAR          Primary_key, 

                        pDEF01         def01_ptr, 

                        pCHAR          ErrorMsg )

{

   memset( &db_def01, 0, sizeof( db_def01 ) );

   strncpy( pte_def01.organization_id, Primary_key, sizeof(pte_def01.organization_id) );

   strncpy( pte_def01.merchant_id, Primary_key + sizeof(pte_def01.organization_id), sizeof(pte_def01.merchant_id) );

   strncpy( pte_def01.term_length, Primary_key + sizeof(pte_def01.organization_id) + sizeof(pte_def01.merchant_id), 

                      sizeof(pte_def01.term_length) );


   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_def01

   FROM def01

   WHERE organization_id = :pte_def01.organization_id AND merchant_id = :pte_def01.merchant_id AND

         term_length = :pte_def01.term_length;

     if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : DEF01 ,Fun_Name : db_select_def01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    } 

   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_def01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }


   db_to_def01 (def01_ptr);



   return PTEMSG_OK;

}



/*************************************************************************************/

/*************************************************************************************/

BYTE db_select_ccf03p (  pCHAR          Primary_key, 

                         pCCF03        ccf03p_ptr, 

                         pCHAR          ErrorMsg )

{

   memset( &db_ccf03p, 0, sizeof( db_ccf03p ) );

   strncpy( pte_ccf03p.card_type, Primary_key, sizeof(pte_ccf03p.card_type) );

   strncpy( pte_ccf03p.card_nbr, Primary_key + sizeof(pte_ccf03p.card_type), sizeof(pte_ccf03p.card_nbr) );

   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_ccf03p

   FROM ccf03p

   WHERE card_nbr = :pte_ccf03p.card_nbr AND card_type = :pte_ccf03p.card_type;

      
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF03P ,Fun_Name : db_select_ccf03p , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_ccf03p ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   db_to_ccf03p (ccf03p_ptr);



   return PTEMSG_OK;

}


/*************************************************************************************/

/*************************************************************************************/

BYTE db_select_offus_velocity (  pCHAR          Primary_key, 
                         pOffus_velocity        offus_velocity_ptr, 
                         pCHAR          ErrorMsg )
{

   memset( &db_offus_velocity, 0, sizeof( db_offus_velocity ) );
   strncpy( pte_offus_velocity.card_type, Primary_key, sizeof(pte_offus_velocity.card_type) );
   strncpy( pte_offus_velocity.card_nbr, Primary_key + sizeof(pte_offus_velocity.card_type), sizeof(pte_offus_velocity.card_nbr) );


   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *
   INTO :db_offus_velocity
   FROM offus_velocity
   WHERE card_nbr = :pte_offus_velocity.card_nbr
     AND card_type= :pte_offus_velocity.card_type;
      
    if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : OFFUS_VELOCITY ,Fun_Name : db_select_offus_velocity , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }  
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_offus_velocity ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   db_to_offus_velocity (offus_velocity_ptr);

   return PTEMSG_OK;

}


/*************************************************************************************/

/*************************************************************************************/

BYTE db_select_mct01 (  pCHAR          Primary_key, 

                        pMCT01         mct01_ptr, 

                        pCHAR          ErrorMsg )

{

   memset( &db_mct01, 0, sizeof( db_mct01 ) );
  BYTE temp_mid[15]={0};
   strncpy( pte_mct01.card_type, Primary_key, sizeof(pte_mct01.card_type) );

   strncpy( pte_mct01.merchant_id, Primary_key + sizeof(pte_mct01.card_type), sizeof(pte_mct01.merchant_id) );

   strncpy( pte_mct01.organization_id, Primary_key + sizeof(pte_mct01.card_type) + sizeof(pte_mct01.merchant_id), sizeof(pte_mct01.organization_id) );

   strncpy(temp_mid,&pte_mct01.merchant_id[7],8 );

   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *
   INTO :db_mct01
   FROM mct01
   WHERE  merchant_id    = :pte_mct01.merchant_id 
     AND organization_id = :pte_mct01.organization_id
     AND card_type       = :pte_mct01.card_type;

	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCT01 ,Fun_Name : db_select_mct01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_mct01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   db_to_mct01 (mct01_ptr);

   return PTEMSG_OK;
}



/*************************************************************************************/


/*************************************************************************************/

BYTE db_select_mct01_for_CUP (  pCHAR          Primary_key, 

                        pMCT01         mct01_ptr, 

                        pCHAR          ErrorMsg )

{

   memset( &db_mct01, 0, sizeof( db_mct01 ) );
   char cupMid[16]={0};
   
   strncpy( pte_mct01.card_type, Primary_key, sizeof(pte_mct01.card_type) );
   strncpy( pte_mct01.merchant_id, Primary_key + sizeof(pte_mct01.card_type), sizeof(pte_mct01.merchant_id) );
   strncpy( pte_mct01.organization_id, Primary_key + sizeof(pte_mct01.card_type) + sizeof(pte_mct01.merchant_id), sizeof(pte_mct01.organization_id) );
   strncpy( cupMid,&pte_mct01.merchant_id[7],8 );


   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *
   INTO :db_mct01
   FROM mct01
   WHERE  (merchant_id    = :pte_mct01.merchant_id OR SUBSTR(merchant_id,8,8) = :cupMid )
     AND organization_id = :pte_mct01.organization_id
     AND card_type       = :pte_mct01.card_type;

	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCT01 ,Fun_Name : db_select_mct01_for_CUP , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_mct01_for_CUP ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   db_to_mct01 (mct01_ptr);

   return PTEMSG_OK;
}



/*************************************************************************************/


/*************************************************************************************/

BYTE db_select_ctf01 (  pCHAR          Primary_key, 

                        pCTF01         ctf01_ptr, 

                        pCHAR          ErrorMsg )

{

   memset( &db_ctf01, 0, sizeof( db_ctf01 ) );

   strncpy( pte_ctf01.card_type, Primary_key, sizeof(pte_ctf01.card_type) );

   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_ctf01

   FROM ctf01

   WHERE card_type = :pte_ctf01.card_type;

   if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CTF01 ,Fun_Name : db_select_ctf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }   

   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_ctf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }


   db_to_ctf01 (ctf01_ptr);



   return PTEMSG_OK;

}
//TF PHani
BYTE db_select_caf01_emv (  pCHAR         Primary_key, 
                         pCAF01_EMV        caf01_emv_ptr, 
                        pCHAR          ErrorMsg )
{
   memset( &db_caf01_emv, 0, sizeof(db_caf01_emv) );
  
   strncpy(  pte_caf01_emv.caf_profile_id, Primary_key, sizeof( pte_caf01_emv.caf_profile_id) );
   
   strncpy(  pte_caf01_emv.type, Primary_key +  sizeof(pte_caf01_emv.caf_profile_id), sizeof( pte_caf01_emv.type) );

   printf("select * from caf01_emv where caf_profile_id = '%s' and type = '%s';",pte_caf01_emv.caf_profile_id,pte_caf01_emv.type);
   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_caf01_emv
   FROM caf01
   WHERE caf_profile_id = :pte_caf01_emv.caf_profile_id  AND type = :pte_caf01_emv.type;
  
  if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01_RAW ,Fun_Name : db_select_caf01_emv , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_caf01_emv ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   db_to_caf01_emv (caf01_emv_ptr);
  
   return PTEMSG_OK;
}


//TF Phani
/*************************************************************************************/
/*************************************************************************************/
BYTE db_select_caf01 (  pCHAR          Primary_key, 
                        pCAF01         caf01_ptr, 
                        pCHAR          ErrorMsg )
{
   memset( &db_caf01, 0, sizeof( db_caf01 ) );
   strncpy( pte_caf01.caf_profile_id, Primary_key, sizeof(pte_caf01.caf_profile_id) );
   strncpy( pte_caf01.type, Primary_key + sizeof(pte_caf01.caf_profile_id), sizeof(pte_caf01.type) );

   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT
       caf_profile_id,
       type,               
       authorization_location,
       authorization_method,
       destination_name,
       iso_nbr,
       iso_length,
       aba_nbr,
       name,
       contact,
       phone,
       date_added,
       last_maint,
       changed_by,
       status,
       max_pin_retries,
       pin_capture_ind,
       track_offset,
       pin_offset_location,
       nsp_process,
       expiration_date_check,
       expiration_date_location,
       merchant_same,
       day_period1,
       velocity1_nbr_usage_1,
       velocity1_nbr_usage_2,
       velocity1_amt_usage_1,
       velocity1_amt_usage_2,
       day_period2,
       velocity2_nbr_usage_1,
       velocity2_nbr_usage_2,
       velocity2_amt_usage_1,
       velocity2_amt_usage_2,
       day_period3,
       velocity3_nbr_usage_1,
       velocity3_nbr_usage_2,
       velocity3_amt_usage_1,
       velocity3_amt_usage_2,
       pin_verification_method,
       pin,
		cvkA_1,
		cvkB_1,
		cvkA_2,
		cvkB_2,
		cvkA_3,
		cvkB_3,
		cvkA_4,
		cvkB_4,
		cvkA_5,
		cvkB_5,
		cvkA_6,
		cvkB_6,
		cvv_processing,
		service_code_offset_tr1,
		service_code_offset_tr2,
		cvv_offset_tr1,
		cvv_offset_tr2,
		cvv_length,
		csck,
		floor_limit,
		country_limits_flag

INTO   :db_caf01.caf_profile_id,
       :db_caf01.type,               
       :db_caf01.authorization_location,
       :db_caf01.authorization_method,
       :db_caf01.destination_name,
       :db_caf01.iso_nbr,
       :db_caf01.iso_length,
       :db_caf01.aba_nbr,
       :db_caf01.name,
       :db_caf01.contact,
       :db_caf01.phone,
       :db_caf01.date_added,
       :db_caf01.last_maint,
       :db_caf01.changed_by,
       :db_caf01.status,
       :db_caf01.max_pin_retries,
       :db_caf01.pin_capture_ind,
       :db_caf01.track_offset,
       :db_caf01.pin_offset_location,
       :db_caf01.nsp_process,
       :db_caf01.expiration_date_check,
       :db_caf01.expiration_date_location,
       :db_caf01.merchant_same,
       :db_caf01.day_period1,
       :db_caf01.velocity1_nbr_usage_1,
       :db_caf01.velocity1_nbr_usage_2,
       :db_caf01.velocity1_amt_usage_1,
       :db_caf01.velocity1_amt_usage_2,
       :db_caf01.day_period2,
       :db_caf01.velocity2_nbr_usage_1,
       :db_caf01.velocity2_nbr_usage_2,
       :db_caf01.velocity2_amt_usage_1,
       :db_caf01.velocity2_amt_usage_2,
       :db_caf01.day_period3,
       :db_caf01.velocity3_nbr_usage_1,
       :db_caf01.velocity3_nbr_usage_2,
       :db_caf01.velocity3_amt_usage_1,
       :db_caf01.velocity3_amt_usage_2,
       :db_caf01.pin_verification_method,
       :db_caf01.pin,
		:db_caf01.cvkA_1,
		:db_caf01.cvkB_1,
		:db_caf01.cvkA_2,
		:db_caf01.cvkB_2,
		:db_caf01.cvkA_3,
		:db_caf01.cvkB_3,
		:db_caf01.cvkA_4,
		:db_caf01.cvkB_4,
		:db_caf01.cvkA_5,
		:db_caf01.cvkB_5,
		:db_caf01.cvkA_6,
		:db_caf01.cvkB_6,
		:db_caf01.cvv_processing,
		:db_caf01.service_code_offset_tr1,
		:db_caf01.service_code_offset_tr2,
		:db_caf01.cvv_offset_tr1,
		:db_caf01.cvv_offset_tr2,
		:db_caf01.cvv_length,
		:db_caf01.csck,
		:db_caf01.floor_limit,
		:db_caf01.country_limits_flag

   FROM caf01

   WHERE caf_profile_id = :pte_caf01.caf_profile_id AND type = :pte_caf01.type ORDER BY caf_profile_id ASC;
      
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01 ,Fun_Name : db_select_caf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_caf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   db_to_caf01 (caf01_ptr);

   return PTEMSG_OK;
}

BYTE db_select_key3ds01 (  pCHAR          Primary_key, 
                        pKEY3DS01         key3ds01_ptr, 
                        pCHAR          ErrorMsg )
{
   memset( &db_key3ds01, 0, sizeof( db_key3ds01 ) );
   strncpy( pte_key3ds01.caf_profile_id, Primary_key, sizeof(pte_key3ds01.caf_profile_id) );

   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT
       caf_profile_id,
       key3ds
       
INTO   :db_key3ds01.caf_profile_id,
	   :db_key3ds01.key3ds
   FROM KEY3DS01
   
   WHERE caf_profile_id = :pte_key3ds01.caf_profile_id;
      
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01 ,Fun_Name : db_select_caf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_caf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   db_to_key3ds01 (key3ds01_ptr);

   return PTEMSG_OK;
}


/******************************************************************************/
/******************************************************************************/
BYTE db_select_mcc_limits( pCHAR        Primary_key, 
                           pMCC_LIMITS  mcc_limits_ptr, 
                           pCHAR        ErrorMsg )
{
   memset( &db_mcc_limits, 0x00, sizeof(db_mcc_limits) );
   strncpy( pte_mcc_limits.caf_profile_id,
            Primary_key,
            sizeof(pte_mcc_limits.caf_profile_id) );

   strncpy( pte_mcc_limits.type,
            Primary_key + sizeof(pte_mcc_limits.caf_profile_id),
            sizeof(pte_mcc_limits.type) );

   strncpy( pte_mcc_limits.mcc,
            Primary_key +  sizeof(pte_mcc_limits.caf_profile_id)
                        +  sizeof(pte_mcc_limits.type),
            sizeof(pte_mcc_limits.mcc) );


   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT
       caf_profile_id,
       type,
       mcc,
       usage,
       peso_amt_limit,
       usd_amt_limit

   INTO   :db_mcc_limits.caf_profile_id,
          :db_mcc_limits.type,
          :db_mcc_limits.mcc,
          :db_mcc_limits.usage,
          :db_mcc_limits.peso_amt_limit,
          :db_mcc_limits.usd_amt_limit

   FROM mcc_limits

   WHERE caf_profile_id = :pte_mcc_limits.caf_profile_id
     AND type           = :pte_mcc_limits.type
     AND mcc            = :pte_mcc_limits.mcc;

	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCC_LIMITS ,Fun_Name : db_select_mcc_limits , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_mcc_limits ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   db_to_mcc_limits( mcc_limits_ptr );

   return PTEMSG_OK;
}


/*************************************************************************************/
/******************************************************************************/
BYTE db_select_cntry_amt_limits( pCHAR				Primary_key, 
                           pCOUNTRY_AMT_LIMITS		country_amt_limits_ptr, 
                           pCHAR					ErrorMsg )
{
   memset( &db_country_amt_limits, 0x00, sizeof(db_country_amt_limits) );
   strncpy( pte_country_amt_limits.caf_profile_id, 
			Primary_key,
            sizeof(pte_country_amt_limits.caf_profile_id) );

   strncpy( pte_country_amt_limits.type,
            Primary_key + sizeof(pte_country_amt_limits.caf_profile_id),
            sizeof(pte_country_amt_limits.type) );

   strncpy( pte_country_amt_limits.country_code,
            Primary_key +  sizeof(pte_country_amt_limits.caf_profile_id)
                        +  sizeof(pte_country_amt_limits.type),
            sizeof(pte_country_amt_limits.country_code) );

   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT
       caf_profile_id,
       type,
       country_code,
       amount_limit

   INTO   :db_country_amt_limits.caf_profile_id,
          :db_country_amt_limits.type,
          :db_country_amt_limits.country_code,
          :db_country_amt_limits.amount_limit

   FROM country_amt_limits

   WHERE caf_profile_id = :pte_country_amt_limits.caf_profile_id
     AND type           = :pte_country_amt_limits.type
     AND country_code   = :pte_country_amt_limits.country_code;

	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : COUNTRY_AMT_LIMITS ,Fun_Name : db_select_cntry_amt_limits , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_cntry_amt_limits ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   db_to_country_amt_limits( country_amt_limits_ptr );

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/

BYTE db_select_fcf02 (  pCHAR          Primary_key, 

                         pFCF02        fcf02_ptr, 

                         pCHAR          ErrorMsg )

{

   memset( &db_fcf02, 0, sizeof( db_fcf02 ) );

   strncpy( pte_fcf02.card_type, Primary_key, sizeof(pte_fcf02.card_type) );

   strncpy( pte_fcf02.card_nbr, Primary_key + sizeof(pte_fcf02.card_type), sizeof(pte_fcf02.card_nbr) );


   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_fcf02

   FROM fcf02

   WHERE card_type = :pte_fcf02.card_type AND card_nbr = :pte_fcf02.card_nbr;

      
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : FCF02 ,Fun_Name : db_select_fcf02 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_fcf02 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }


   db_to_fcf02 (fcf02_ptr);



   return PTEMSG_OK;

}

/*************************************************************************************/
/*************************************************************************************/

BYTE db_select_id_mcf01 (  pCHAR          Primary_key, 
                        pMCF01         mcf01_ptr, 
                        pCHAR          ErrorMsg )
{
   INT  retval;
   BYTE cupAccID[15]={0};
   memset( &db_mcf01, 0, sizeof( db_mcf01 ) );
//   strncpy( pte_mcf01.organization_id, Primary_key, sizeof(pte_mcf01.organization_id) );
   strncpy( pte_mcf01.merchant_id, Primary_key + sizeof(pte_mcf01.organization_id), sizeof(pte_mcf01.merchant_id) );
   strncpy(cupAccID, &pte_mcf01.merchant_id[8],7);

   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *
   INTO :db_mcf01
   FROM mcf01
   WHERE merchant_id = :pte_mcf01.merchant_id  OR network_priority_routing_5 = :cupAccID;
      
   if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCF01 ,Fun_Name : db_select_id_mcf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }   
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_id_mcf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   db_to_mcf01_id (mcf01_ptr);

   return PTEMSG_OK;
}
/*************************************************************************************/
/*************************************************************************************/

BYTE db_select_omc01 (  pCHAR          Primary_key, 
                        pOMC01         omc01_ptr, 
                        pCHAR          ErrorMsg )

{

   char cupMid[16]={0};
   memset( &db_omc01, 0, sizeof( db_omc01 ) );

   strncpy( pte_omc01.merchant_id, Primary_key, sizeof(pte_omc01.merchant_id) );
   strncpy( cupMid, &pte_omc01.merchant_id[7],8);
   strncpy( pte_omc01.card_nbr, Primary_key + sizeof(pte_omc01.merchant_id), sizeof(pte_omc01.card_nbr) );
   strncpy( pte_omc01.max_repeat, Primary_key + sizeof(pte_omc01.merchant_id) + sizeof(pte_omc01.card_nbr) , sizeof(pte_omc01.max_repeat) );
   strncpy( pte_omc01.repeated, Primary_key + sizeof(pte_omc01.merchant_id) + sizeof(pte_omc01.card_nbr) + sizeof(pte_omc01.max_repeat) , sizeof(pte_omc01.repeated) );
   strncpy( pte_omc01.expiry_date, Primary_key + sizeof(pte_omc01.merchant_id) + sizeof(pte_omc01.card_nbr) + sizeof(pte_omc01.max_repeat) + sizeof(pte_omc01.repeated) , sizeof(pte_omc01.expiry_date) );
   strncpy( pte_omc01.peso_amt_limit, Primary_key + sizeof(pte_omc01.merchant_id) + sizeof(pte_omc01.card_nbr) + sizeof(pte_omc01.max_repeat) + sizeof(pte_omc01.repeated) + sizeof(pte_omc01.expiry_date), sizeof(pte_omc01.peso_amt_limit) );
   strncpy( pte_omc01.usd_amt_limit, Primary_key + sizeof(pte_omc01.merchant_id) + sizeof(pte_omc01.card_nbr) + sizeof(pte_omc01.max_repeat) + sizeof(pte_omc01.repeated) + sizeof(pte_omc01.expiry_date) + sizeof(pte_omc01.peso_amt_limit), sizeof(pte_omc01.usd_amt_limit) );

	if(0 == strlen(pte_omc01.card_nbr) )
	{
		if ( db_error_statics_flag == true )
   		{
    		start_time = ptetime_get_time();
   		}
		EXEC SQL SELECT *
	    INTO :db_omc01
	   	FROM omc01
	  	WHERE (merchant_id = :pte_omc01.merchant_id OR SUBSTR(merchant_id,8,8) = :cupMid )	  	
	  	AND card_nbr is NULL; 
	  	if ( db_error_statics_flag == true )
        {
        	end_time = ptetime_get_time();

        	duration = end_time - start_time;

       	 	if(duration >= db_error_statics_value)
	   		{
	  	 		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		 		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : OMC01 ,Fun_Name : db_select_omc01_1 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		 		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	   		}
        }
	}
	else
	{
		if ( db_error_statics_flag == true )
   		{
    		start_time = ptetime_get_time();
   		}
   		EXEC SQL SELECT *
		INTO :db_omc01
   		FROM omc01
   		WHERE (merchant_id = :pte_omc01.merchant_id OR SUBSTR(merchant_id,8,8) = :cupMid ) AND 
   		card_nbr = :pte_omc01.card_nbr;
		if ( db_error_statics_flag == true )
       {
        	end_time = ptetime_get_time();
        	duration = end_time - start_time;
       	 	if(duration >= db_error_statics_value)
	   		{
	  	 		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		 		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : OMC01 ,Fun_Name : db_select_omc01_2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		 		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	   		}
       }
		if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
		   {
		   		SQLCODE = 0;
		   		if ( db_error_statics_flag == true )
   				{
    				start_time = ptetime_get_time();
   				}
		   		EXEC SQL SELECT *
	    		INTO :db_omc01
	   			FROM omc01
	  			WHERE (merchant_id = :pte_omc01.merchant_id OR SUBSTR(merchant_id,8,8) = :cupMid )
	  			AND card_nbr is NULL;
	  			if ( db_error_statics_flag == true )
                {
        	    	end_time = ptetime_get_time();
        			duration = end_time - start_time;
       	 			if(duration >= db_error_statics_value)
	   				{
	  	 				memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		 				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : OMC01 ,Fun_Name : db_select_omc01_3 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		 				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	   				}
       			}
				if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
				{
					memset(er_buf,0x00,sizeof(er_buf));
					DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
					sprintf(er_buf,"In  db_select_omc01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
					strcat(er_buf,ErrorMsg);
					Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
					return DB_rcode;
   				}
		   }
	}

   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_omc01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

	
   db_to_omc01 (omc01_ptr);

   return PTEMSG_OK;

}

/*************************************************************************************/
/*************************************************************************************/

BYTE db_count_mcc01( pCHAR low, int *count, pCHAR ErrorMsg)
{
	int low_count=0;
	memset( &db_mcc01, 0, sizeof( db_mcc01 ) );

	if ( db_error_statics_flag == true )
   	{
    	start_time = ptetime_get_time();
   	}
	EXEC SQL SELECT count(*)
	INTO :low_count
	FROM MCC01
	WHERE LOW <= :low AND HIGH >= :low;
	if ( db_error_statics_flag == true )
    {
        end_time = ptetime_get_time();
        duration = end_time - start_time;
       	if(duration >= db_error_statics_value)
	   	{
	  	 	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		 	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCC01 ,Fun_Name : db_count_mcc01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		 	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	   	}
     }
	if ( SQLCODE != 0 )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_count_mcc01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

	*count = low_count;
	return PTEMSG_OK;
}

BYTE db_select_mcc01 ( pCHAR Primary_key, pMCC01 mcc01_ptr, pCHAR ErrorMsg )
{

   memset( &db_mcc01, 0, sizeof( db_mcc01 ) );

	strncpy( pte_mcc01.low,	 Primary_key, sizeof(pte_mcc01.low) );
	strncpy( pte_mcc01.high, Primary_key + sizeof(pte_mcc01.low), sizeof(pte_mcc01.high) );
	
   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *
   INTO :db_mcc01
   FROM MCC01
   WHERE LOW = :pte_mcc01.low AND HIGH = :pte_mcc01.high;      
   if ( db_error_statics_flag == true )
   {
        end_time = ptetime_get_time();
        duration = end_time - start_time;
       	 if(duration >= db_error_statics_value)
	   	{
	  	 	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		 	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCC01 ,Fun_Name : db_select_mcc01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		 	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	   	}
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_mcc01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }


   db_to_mcc01 (mcc01_ptr);

   return PTEMSG_OK;

}

/*************************************************************************************/

/*************************************************************************************/

BYTE db_select_ccf02p (  pCHAR          Primary_key, 

                         pCCF02P        ccf02p_ptr, 

                         pCHAR          ErrorMsg )

{

   memset( &db_ccf02p, 0, sizeof( db_ccf02p ) );

   strncpy( pte_ccf02p.card_type, Primary_key, sizeof(pte_ccf02p.card_type) );

   strncpy( pte_ccf02p.card_nbr, Primary_key + sizeof(pte_ccf02p.card_type), sizeof(pte_ccf02p.card_nbr) );


   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_ccf02p

   FROM ccf02p

   WHERE card_nbr = :pte_ccf02p.card_nbr AND card_type = :pte_ccf02p.card_type;

    if ( db_error_statics_flag == true )
    {
        end_time = ptetime_get_time();
        duration = end_time - start_time;
       	 if(duration >= db_error_statics_value)
	   	{
	  	 	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		 	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF02P ,Fun_Name : db_select_ccf02p , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		 	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	   	}
     }  

   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_ccf02p ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   db_to_ccf02p (ccf02p_ptr);



   return PTEMSG_OK;

}





/*************************************************************************************/

/*************************************************************************************/

BYTE db_select_ccf04 (   pCHAR          Primary_key, 

                         pCCF04         ccf04_ptr, 

                         pCHAR          ErrorMsg )

{

   memset(  &db_ccf04, 0, sizeof( db_ccf04 ) );

   strncpy( pte_ccf04.card_type, Primary_key, sizeof(pte_ccf04.card_type) );

   strncpy( pte_ccf04.card_nbr, Primary_key + sizeof(pte_ccf04.card_type), sizeof(pte_ccf04.card_nbr) );

   strncpy( pte_ccf04.mcc_lo_range, Primary_key + sizeof(pte_ccf04.card_type) + sizeof(pte_ccf04.card_nbr), 
                                                                                 sizeof(pte_ccf04.mcc_lo_range) );


   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_ccf04

   FROM ccf04

   WHERE card_type =     :pte_ccf04.card_type AND 
         card_nbr =      :pte_ccf04.card_nbr AND
         mcc_lo_range <= :pte_ccf04.mcc_lo_range AND
         mcc_hi_range >= :pte_ccf04.mcc_lo_range;

   if ( db_error_statics_flag == true )
    {
        end_time = ptetime_get_time();
        duration = end_time - start_time;
       	if(duration >= db_error_statics_value)
	   	{
	  	 	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		 	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF04 ,Fun_Name : db_select_ccf04 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		 	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	   	}
     }

   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_ccf04 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }


   db_to_ccf04 (ccf04_ptr);



   return PTEMSG_OK;

}



/*************************************************************************************/

/*************************************************************************************/

BYTE db_select_ccf02h (  pCHAR          Primary_key, 

                         pCCF02H        ccf02h_ptr, 

                         pCHAR          ErrorMsg )

{

   memset( &db_ccf02h, 0, sizeof( db_ccf02h ) );

   strncpy( pte_ccf02h.card_type, Primary_key, sizeof(pte_ccf02h.card_type) );

   strncpy( pte_ccf02h.card_nbr, Primary_key + sizeof(pte_ccf02h.card_type), sizeof(pte_ccf02h.card_nbr) );


   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_ccf02h

   FROM ccf02h

   WHERE card_type = :pte_ccf02h.card_type AND card_nbr = :pte_ccf02h.card_nbr;

   if ( db_error_statics_flag == true )
    {
        end_time = ptetime_get_time();
        duration = end_time - start_time;
       	if(duration >= db_error_statics_value)
	   	{
	  	 	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		 	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF02H ,Fun_Name : db_select_ccf02h , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		 	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	   	}
     }   

   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_ccf02h ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   db_to_ccf02h (ccf02h_ptr);



   return PTEMSG_OK;

}



/*************************************************************************************/

/*************************************************************************************/

BYTE db_select_atp02 (  pCHAR          Workstation, 

                        pATP02         atp02_ptr, 

                        pCHAR          ErrorMsg )

{

   memset( &db_atp02, 0, sizeof( db_atp02 ) );

   strncpy( pte_atp02.workstation_id, Workstation, sizeof(pte_atp02.workstation_id) );

   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_atp02

   FROM atp02

   WHERE upper(workstation_id) = upper(:pte_atp02.workstation_id);

   if ( db_error_statics_flag == true )
    {
        end_time = ptetime_get_time();
        duration = end_time - start_time;
       	if(duration >= db_error_statics_value)
	   	{
	  	 	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		 	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ATP02 ,Fun_Name : db_select_atp02 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		 	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	   	}
     }   

   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_atp02 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }


   db_to_atp02 (atp02_ptr);



   return PTEMSG_OK;

}



/*************************************************************************************/

/*************************************************************************************/

BYTE db_select_atp01 (  pCHAR          Site_Name, 

                        pATP01         atp01_ptr, 

                        pCHAR          ErrorMsg )

{

   memset( &db_atp01, 0, sizeof( db_atp01 ) );

   strncpy( pte_atp01.site_name, Site_Name, sizeof(pte_atp01.site_name) );

   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_atp01

   FROM atp01;

   if ( db_error_statics_flag == true )
    {
        end_time = ptetime_get_time();
        duration = end_time - start_time;
       	if(duration >= db_error_statics_value)
	   	{
	  	 	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		 	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ATP01 ,Fun_Name : db_select_atp01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		 	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	   	}
     }   

   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_atp01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }


   db_to_atp01 (atp01_ptr);



   return PTEMSG_OK;

}







/*************************************************************************************/

/*************************************************************************************/

BYTE db_select_bin01 (  pCHAR          Primary_key, 

                        pBIN01         bin01_ptr, 

                        pCHAR          ErrorMsg )

{

   memset( &db_bin01, 0, sizeof( db_bin01 ) );

   strncpy( pte_bin01.type, Primary_key + sizeof(pte_bin01.length) + sizeof(pte_bin01.low), sizeof(pte_bin01.type) );

   strncpy( pte_bin01.low, Primary_key + sizeof(pte_bin01.length), sizeof(pte_bin01.low) );

   strncpy( pte_bin01.length, Primary_key, sizeof(pte_bin01.length) );


   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_bin01

   FROM bin01

   WHERE type = :pte_bin01.type AND low = :pte_bin01.low AND length = :pte_bin01.length;

    if ( db_error_statics_flag == true )
    {
        end_time = ptetime_get_time();
        duration = end_time - start_time;
       	if(duration >= db_error_statics_value)
	   	{
	  	 	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		 	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BIN01 ,Fun_Name : db_select_bin01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		 	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	   	}
     }  

   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_bin01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   db_to_bin01 (bin01_ptr);



   return PTEMSG_OK;

}

/*************************************************************************************/
/* db_select_ucf01_other_dual_user */

/*************************************************************************************/

BYTE db_select_ucf01_other_dual_user (  pCHAR          Name, 

                        pUCF01         ucf01_ptr, 

                        pCHAR          ErrorMsg )

{

   memset( &db_ucf01, 0, sizeof( db_ucf01 ) );

   strncpy( pte_ucf01.name, Name, sizeof(pte_ucf01.name) );


   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_ucf01

   FROM ucf01

   WHERE name <> :pte_ucf01.name and ACTION_12 = '1111' ORDER BY NAME ;

   if ( db_error_statics_flag == true )
    {
        end_time = ptetime_get_time();
        duration = end_time - start_time;
       	if(duration >= db_error_statics_value)
	   	{
	  	 	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		 	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF01 ,Fun_Name : db_select_ucf01_other_dual_user , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		 	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	   	}
     }

   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_ucf01_other_dual_user ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }


   db_to_ucf01 (ucf01_ptr);
	
	memcpy(ucf01_ptr->dekey, Name, sizeof(ucf01_ptr->primary_key.name));


   return PTEMSG_OK;

}
/*****************************************************************************/
/* TF PHANI : TO get count of users who have updated key thorugh DUAL SCREEN*/
BYTE db_select_ucf01_ekey_updated_count (  pCHAR Name, pUCF01 ucf01_ptr, pCHAR ErrorMsg )
{
	int users_count=0;
   memset( &db_ucf01, 0, sizeof( db_ucf01 ) );

   strncpy( pte_ucf01.name, Name, sizeof(pte_ucf01.name) );

   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT count(*)
   INTO :users_count
   FROM ucf01
   WHERE ACTION_12 = '1111' and DEKEY = 'UPDATED';
	
   if ( db_error_statics_flag == true )
    {
        end_time = ptetime_get_time();
        duration = end_time - start_time;
       	if(duration >= db_error_statics_value)
	   	{
	  	 	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		 	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF01 ,Fun_Name : db_select_ucf01_ekey_updated_count , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		 	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	   	}
     }	
   if ( SQLCODE != 0 )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_ucf01_ekey_updated_count ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   sprintf(ucf01_ptr->dekey,"%d", users_count);
   return PTEMSG_OK;

}


/*****************************************************************************/
/* TF PHANI : TO get count of users who have given right to DUAL SCREEN*/
BYTE db_select_ucf01_dual_enc_count (  pCHAR          Name, 

                        pUCF01         ucf01_ptr, 

                        pCHAR          ErrorMsg )

{
	int users_count=0;
   memset( &db_ucf01, 0, sizeof( db_ucf01 ) );

   strncpy( pte_ucf01.name, Name, sizeof(pte_ucf01.name) );

   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT count(*)

   INTO :users_count

   FROM ucf01

   WHERE ACTION_12 = '1111' ;

   if ( db_error_statics_flag == true )
    {
        end_time = ptetime_get_time();
        duration = end_time - start_time;
       	if(duration >= db_error_statics_value)
	   	{
	  	 	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		 	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF01 ,Fun_Name : db_select_ucf01_dual_enc_count , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		 	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	   	}
     }

   if ( SQLCODE != 0 )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_ucf01_dual_enc_count ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   sprintf(ucf01_ptr->dekey,"%d", users_count);



   return PTEMSG_OK;

}




/*************************************************************************************/

/*************************************************************************************/

BYTE db_select_ucf01 (  pCHAR          Name, 

                        pUCF01         ucf01_ptr, 

                        pCHAR          ErrorMsg )

{

   memset( &db_ucf01, 0, sizeof( db_ucf01 ) );

   strncpy( pte_ucf01.name, Name, sizeof(pte_ucf01.name) );

   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_ucf01

   FROM ucf01

   WHERE name = :pte_ucf01.name ORDER BY NAME;

	if ( db_error_statics_flag == true )
    {
        end_time = ptetime_get_time();
        duration = end_time - start_time;
       	if(duration >= db_error_statics_value)
	   	{
	  	 	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		 	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF01 ,Fun_Name : db_select_ucf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		 	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	   	}
     }

   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_ucf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }


   db_to_ucf01 (ucf01_ptr);


   return PTEMSG_OK;

}

/*************************************************************************************/
/*Added UCF03 Table for PCI Changes by TF-Srikanth */
/*************************************************************************************/
/*
BYTE db_select_ucf03 (  pCHAR          Name, 

                        pUCF03         ucf03_ptr, 

                        pCHAR          ErrorMsg )

{

   memset( &db_ucf03, 0, sizeof( db_ucf03 ) );

   strncpy( pte_ucf03.name, Name, sizeof(pte_ucf03.name) );


   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_ucf03

   FROM ucf03

   WHERE name = :pte_ucf03.name ;

   if ( db_error_statics_flag == true )
    {
        end_time = ptetime_get_time();
        duration = end_time - start_time;
       	if(duration >= db_error_statics_value)
	   	{
	  	 	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		 	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF03 ,Fun_Name : db_select_ucf03 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		 	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	   	}
     }

   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_ucf03 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }


   db_to_ucf03 (ucf03_ptr);



   return PTEMSG_OK;

}
*/


/*************************************************************************************/

/*************************************************************************************/

BYTE db_select_ucf02 (  pCHAR          Group_id, 

                        pUCF02         ucf02_ptr, 

                        pCHAR          ErrorMsg )

{

   memset( &db_ucf02, 0, sizeof( db_ucf02 ) );

   strncpy( pte_ucf02.group_id, Group_id, sizeof(pte_ucf02.group_id) );

   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *

   INTO :db_ucf02

   FROM ucf02

   WHERE group_id = :pte_ucf02.group_id ;

	if ( db_error_statics_flag == true )
    {
        end_time = ptetime_get_time();
        duration = end_time - start_time;
       	if(duration >= db_error_statics_value)
	   	{
	  	 	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		 	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF02 ,Fun_Name : db_select_ucf02 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		 	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	   	}
     }

   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_ucf02 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }


   db_to_ucf02 (ucf02_ptr);



   return PTEMSG_OK;

}

/*************************************************************************************/


/*************************************************************************************/

BYTE db_select_mppara01 (  pCHAR          Name, 
	                       pMPPARA01      mppara01_ptr, 
	                       pCHAR          ErrorMsg )
{

   memset( &db_mppara01, 0, sizeof( db_mppara01 ) );

   strncpy( pte_mppara01.product_code, Name, sizeof(pte_mppara01.product_code) );

   if ( db_error_statics_flag == true )
   {
    	start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_mppara01
   FROM mppara01
   WHERE product_code = :pte_mppara01.product_code ORDER BY product_code;

	if ( db_error_statics_flag == true )
    {
        end_time = ptetime_get_time();
        duration = end_time - start_time;
       	if(duration >= db_error_statics_value)
	   	{
	  	 	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		 	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MPARA01 ,Fun_Name : db_select_mppara01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		 	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	   	}
     }

   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_mppara01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }


   db_to_mppara01 (mppara01_ptr);


   return PTEMSG_OK;

}

/*************************************************************************************/
BYTE db_update_omc01( pOMC01 omc01_ptr, pCHAR ErrorMsg )
{
   omc01_to_db( omc01_ptr );

   if(0 == strlen(pte_omc01.card_nbr) )
   	{
   		if ( db_error_statics_flag == true )
   		{
    		start_time = ptetime_get_time();
   		}
		EXEC SQL UPDATE omc01
			SET  MERCHANT_ID	= :pte_omc01.merchant_id,
		MAX_REPEAT 	= :pte_omc01.max_repeat,
		REPEATED	= :pte_omc01.repeated,
		EXPIRY_DATE	= :pte_omc01.expiry_date,
		PESO_AMT_LIMIT = :pte_omc01.peso_amt_limit,
		USD_AMT_LIMIT = :pte_omc01.usd_amt_limit,
		BYPASS		  =	:pte_omc01.bypass, 
		FUTURE_USE1	  = :pte_omc01.future_use1,
		FUTURE_USE2   =	:pte_omc01.future_use2,    
		FUTURE_USE3   =	:pte_omc01.future_use3,    
		FUTURE_USE4   =	:pte_omc01.future_use4 
	
	WHERE MERCHANT_ID = :pte_omc01.merchant_id AND CARD_NBR is NULL;
		if ( db_error_statics_flag == true )
    	{
        	end_time = ptetime_get_time();
        	duration = end_time - start_time;
       	 	if(duration >= db_error_statics_value)
	   		{
	  	 		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		 		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : OMC01 ,Fun_Name : db_update_omc01_1 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		 		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	   		}
     	}
   }
   else
   {
   		if ( db_error_statics_flag == true )
   		{
    		start_time = ptetime_get_time();
   		}
   		EXEC SQL UPDATE omc01
   		SET  MERCHANT_ID	= :pte_omc01.merchant_id,
		CARD_NBR	= :pte_omc01.card_nbr,
		MAX_REPEAT 	= :pte_omc01.max_repeat,
		REPEATED	= :pte_omc01.repeated,
		EXPIRY_DATE	= :pte_omc01.expiry_date,
		PESO_AMT_LIMIT = :pte_omc01.peso_amt_limit,
		USD_AMT_LIMIT = :pte_omc01.usd_amt_limit,
		BYPASS		  =	:pte_omc01.bypass, 
		FUTURE_USE1	  = :pte_omc01.future_use1,
		FUTURE_USE2   =	:pte_omc01.future_use2,    
		FUTURE_USE3   =	:pte_omc01.future_use3,    
		FUTURE_USE4   =	:pte_omc01.future_use4     

  	 	WHERE MERCHANT_ID = :pte_omc01.merchant_id AND CARD_NBR = :pte_omc01.card_nbr;
  	 	if ( db_error_statics_flag == true )
    	{
        	end_time = ptetime_get_time();
        	duration = end_time - start_time;
       	 	if(duration >= db_error_statics_value)
	   		{
	  	 		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		 		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : OMC01 ,Fun_Name : db_update_omc01_2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		 		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	   		}
     	}
     	if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
     	{
			SQLCODE = 0;
			if ( db_error_statics_flag == true )
   			{
    			start_time = ptetime_get_time();
   			}
			EXEC SQL UPDATE omc01
				SET  MERCHANT_ID	= :pte_omc01.merchant_id,
				MAX_REPEAT 	= :pte_omc01.max_repeat,
				REPEATED	= :pte_omc01.repeated,
				EXPIRY_DATE	= :pte_omc01.expiry_date,
				PESO_AMT_LIMIT = :pte_omc01.peso_amt_limit,
				USD_AMT_LIMIT = :pte_omc01.usd_amt_limit,
				BYPASS		  =	:pte_omc01.bypass, 
				FUTURE_USE1	  = :pte_omc01.future_use1,
				FUTURE_USE2   =	:pte_omc01.future_use2,    
				FUTURE_USE3   =	:pte_omc01.future_use3,    
				FUTURE_USE4   =	:pte_omc01.future_use4 
	
			WHERE MERCHANT_ID = :pte_omc01.merchant_id AND CARD_NBR is NULL;
			if ( db_error_statics_flag == true )
    	    {
        	 	end_time = ptetime_get_time();
        		duration = end_time - start_time;
       	 		if(duration >= db_error_statics_value)
	   			{
	  	 			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		 			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : OMC01 ,Fun_Name : db_update_omc01_3 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		 			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	   			}
     		}
			if ( SQLCODE != 0 )
  		 	{
				memset(er_buf,0x00,sizeof(er_buf));
				DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
				sprintf(er_buf,"In  db_update_omc01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
				strcat(er_buf,ErrorMsg);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
				return DB_rcode;
   			}

     	}
   	}
   
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_omc01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   return PTEMSG_OK;

}




/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_mcc01( pMCC01 mcc01_ptr, pCHAR ErrorMsg )
{
   mcc01_to_db( mcc01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE mcc01
   SET  LOW	= :pte_mcc01.low,
	HIGH	= :pte_mcc01.high,
	ALLOW 	= :pte_mcc01.allow

   WHERE LOW = :pte_mcc01.low AND HIGH = :pte_mcc01.high;
	if ( db_error_statics_flag == true )
 	{
        end_time = ptetime_get_time();
        duration = end_time - start_time;
       	if(duration >= db_error_statics_value)
	   	{
	  	 	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		 	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCC01 ,Fun_Name : db_update_mcc01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		 	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	   	}
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_mcc01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   return PTEMSG_OK;

}




/*************************************************************************************/

/*************************************************************************************/

BYTE db_update_clf01( pCLF01 clf01_ptr, pCHAR ErrorMsg )

{

   clf01_to_db( clf01_ptr );


   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE clf01

   SET   year                          = :pte_clf01.year,

         month                         = :pte_clf01.month,

         working_day_1                 = :pte_clf01.working_day_1,

         profile_id_1                  = :pte_clf01.profile_id_1,

         working_day_2                 = :pte_clf01.working_day_2,

         profile_id_2                  = :pte_clf01.profile_id_2,

         working_day_3                 = :pte_clf01.working_day_3,

         profile_id_3                  = :pte_clf01.profile_id_3,

         working_day_4                 = :pte_clf01.working_day_4,

         profile_id_4                  = :pte_clf01.profile_id_4,

         working_day_5                 = :pte_clf01.working_day_5,

         profile_id_5                  = :pte_clf01.profile_id_5,

         working_day_6                 = :pte_clf01.working_day_6,

         profile_id_6                  = :pte_clf01.profile_id_6,

         working_day_7                 = :pte_clf01.working_day_7,

         profile_id_7                  = :pte_clf01.profile_id_7,

         working_day_8                 = :pte_clf01.working_day_8,

         profile_id_8                  = :pte_clf01.profile_id_8,

         working_day_9                 = :pte_clf01.working_day_9,

         profile_id_9                  = :pte_clf01.profile_id_9,

         working_day_10                 = :pte_clf01.working_day_10,

         profile_id_10                  = :pte_clf01.profile_id_10,

         working_day_11                 = :pte_clf01.working_day_11,

         profile_id_11                  = :pte_clf01.profile_id_11,

         working_day_12                 = :pte_clf01.working_day_12,

         profile_id_12                  = :pte_clf01.profile_id_12,

         working_day_13                 = :pte_clf01.working_day_13,

         profile_id_13                  = :pte_clf01.profile_id_13,

         working_day_14                 = :pte_clf01.working_day_14,

         profile_id_14                  = :pte_clf01.profile_id_14,

         working_day_15                 = :pte_clf01.working_day_15,

         profile_id_15                  = :pte_clf01.profile_id_15,

         working_day_16                 = :pte_clf01.working_day_16,

         profile_id_16                  = :pte_clf01.profile_id_16,

         working_day_17                 = :pte_clf01.working_day_17,

         profile_id_17                  = :pte_clf01.profile_id_17,

         working_day_18                 = :pte_clf01.working_day_18,

         profile_id_18                  = :pte_clf01.profile_id_18,

         working_day_19                 = :pte_clf01.working_day_19,

         profile_id_19                  = :pte_clf01.profile_id_19,

         working_day_20                 = :pte_clf01.working_day_20,

         profile_id_20                  = :pte_clf01.profile_id_20,

         working_day_21                 = :pte_clf01.working_day_21,

         profile_id_21                  = :pte_clf01.profile_id_21,

         working_day_22                 = :pte_clf01.working_day_22,

         profile_id_22                  = :pte_clf01.profile_id_22,

         working_day_23                 = :pte_clf01.working_day_23,

         profile_id_23                  = :pte_clf01.profile_id_23,

         working_day_24                 = :pte_clf01.working_day_24,

         profile_id_24                  = :pte_clf01.profile_id_24,

         working_day_25                 = :pte_clf01.working_day_25,

         profile_id_25                  = :pte_clf01.profile_id_25,

         working_day_26                 = :pte_clf01.working_day_26,

         profile_id_26                  = :pte_clf01.profile_id_26,

         working_day_27                 = :pte_clf01.working_day_27,

         profile_id_27                  = :pte_clf01.profile_id_27,

         working_day_28                 = :pte_clf01.working_day_28,

         profile_id_28                  = :pte_clf01.profile_id_28,

         working_day_29                 = :pte_clf01.working_day_29,

         profile_id_29                  = :pte_clf01.profile_id_29,

         working_day_30                 = :pte_clf01.working_day_30,

         profile_id_30                  = :pte_clf01.profile_id_30,

         working_day_31                 = :pte_clf01.working_day_31,

         profile_id_31                  = :pte_clf01.profile_id_31



   WHERE year = :pte_clf01.year AND month = :pte_clf01.month;

       
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CLF01 ,Fun_Name : db_update_clf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_clf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }


   return PTEMSG_OK;

}



/*************************************************************************************/

/*************************************************************************************/

BYTE db_update_bpf01( pBPF01_SCH_LIST batch_list_ptr, pCHAR ErrorMsg )

{

   EXEC SQL BEGIN DECLARE SECTION;

   int loops;

   int i;

   unsigned char result_code;

   EXEC SQL END DECLARE SECTION;

   

   loops = atoi(batch_list_ptr->num_returned);

   bpf01_to_db(&(batch_list_ptr->batch_profile[0]));

    if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM bpf01

   WHERE profile_id = :pte_bpf01.profile_id;

	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BPF01 ,Fun_Name : db_update_bpf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }

   if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND))
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_bpf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }
   

   for(i = 0; i < loops; i++)

   {
      result_code = db_insert_bpf01(&(batch_list_ptr->batch_profile[i]), ErrorMsg);
      if( result_code != PTEMSG_OK)
         return(result_code);
   }



   return PTEMSG_OK;

}





/*************************************************************************************/

/*************************************************************************************/



BYTE db_update_jbf01( pJBF01 jbf01_ptr, pCHAR ErrorMsg )

{

   jbf01_to_db( jbf01_ptr );


	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE jbf01

   SET   job_id                           = :pte_jbf01.job_id,

         time_to_run                      = :pte_jbf01.time_to_run,

         status                           = :pte_jbf01.status,

         last_run                         = :pte_jbf01.last_run,

         app_name                         = :pte_jbf01.app_name



   WHERE job_id = :pte_jbf01.job_id;

       
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : JBF01 ,Fun_Name : db_update_jbf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_jbf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;

}





/*************************************************************************************/

/*************************************************************************************/

BYTE db_update_apf01( pAPF01 apf01_ptr, pCHAR ErrorMsg )

{

   apf01_to_db( apf01_ptr );



	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE apf01

   SET   app_name                            = :pte_apf01.app_name,

         exe_name                            = :pte_apf01.exe_name,

         path                                = :pte_apf01.path,

         parameters                          = :pte_apf01.parameters



   WHERE app_name = :pte_apf01.app_name;

    if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : APF01 ,Fun_Name : db_update_apf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }   

   if ( SQLCODE != 0 )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_apf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;

}



/*************************************************************************************/

/*************************************************************************************/

BYTE db_update_faf01( pFAF01 faf01_ptr, pCHAR ErrorMsg )

{

   faf01_to_db( faf01_ptr );


	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE faf01

   SET   caf_profile_id                  = :pte_faf01.caf_profile_id,

         velocity1_amount                    = :pte_faf01.velocity1_amount,

         velocity1_from_time                 = :pte_faf01.velocity1_from_time,

         velocity1_to_time                   = :pte_faf01.velocity1_to_time,

         velocity2_amount                    = :pte_faf01.velocity2_amount,

         velocity2_from_time                 = :pte_faf01.velocity2_from_time,

         velocity2_to_time                   = :pte_faf01.velocity2_to_time,

         velocity3_amount                    = :pte_faf01.velocity3_amount,

         velocity3_from_time                 = :pte_faf01.velocity3_from_time,

         velocity3_to_time                   = :pte_faf01.velocity3_to_time,

         velocity4_amount                    = :pte_faf01.velocity4_amount,

         velocity4_from_time                 = :pte_faf01.velocity4_from_time,

         velocity4_to_time                   = :pte_faf01.velocity4_to_time,

         velocity5_amount                    = :pte_faf01.velocity5_amount,

         velocity5_from_time                 = :pte_faf01.velocity5_from_time,

         velocity5_to_time                   = :pte_faf01.velocity5_to_time,

         velocity6_amount                    = :pte_faf01.velocity6_amount,

         velocity6_from_time                 = :pte_faf01.velocity6_from_time,

         velocity6_to_time                   = :pte_faf01.velocity6_to_time,

         velocity7_amount                    = :pte_faf01.velocity7_amount,

         velocity7_from_time                 = :pte_faf01.velocity7_from_time,

         velocity7_to_time                   = :pte_faf01.velocity7_to_time,

         velocity8_amount                    = :pte_faf01.velocity8_amount,

         velocity8_from_time                 = :pte_faf01.velocity8_from_time,

         velocity8_to_time                   = :pte_faf01.velocity8_to_time,

         velocity9_amount                    = :pte_faf01.velocity9_amount,

         velocity9_from_time                 = :pte_faf01.velocity9_from_time,

         velocity9_to_time                   = :pte_faf01.velocity9_to_time,

         velocity10_amount                   = :pte_faf01.velocity10_amount,

         velocity10_from_time                = :pte_faf01.velocity10_from_time,

         velocity10_to_time                  = :pte_faf01.velocity10_to_time



   WHERE caf_profile_id = :pte_faf01.caf_profile_id;

       
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : FAF01 ,Fun_Name : db_update_faf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_faf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;

}





/*************************************************************************************/

/*************************************************************************************/

BYTE db_update_ccf10( pCCF10 ccf10_ptr, pCHAR ErrorMsg )

{
   ccf10_to_db( ccf10_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_ccf10
      FROM   ccf10
      WHERE  retrieval_ref_num = :pte_ccf10.retrieval_ref_num  AND  
      		 card_nbr = :pte_ccf10.card_nbr                    AND
      		 rownum   = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF10 ,Fun_Name : db_update_ccf10_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */
      	memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_ccf10 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;

   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE ccf10 

   SET  card_nbr                    = :pte_ccf10.card_nbr,
        retrieval_ref_num           = :pte_ccf10.retrieval_ref_num,
        primary_acct_nbr            = :pte_ccf10.primary_acct_nbr,
        processing_code             = :pte_ccf10.processing_code,
        tran_amount                 = :pte_ccf10.tran_amount,
        response_code               = :pte_ccf10.response_code,
        auth_number                 = :pte_ccf10.auth_number,
        tran_date                   = :pte_ccf10.tran_date,
        tran_time                   = :pte_ccf10.tran_time
                  
   WHERE retrieval_ref_num = :pte_ccf10.retrieval_ref_num AND card_nbr = :pte_ccf10.card_nbr;
     if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF10 ,Fun_Name : db_update_ccf10_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   } 
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_ccf10 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/******************************************************************************/
/******************************************************************************/
BYTE db_update_bon01 (pBON01 bon01_ptr, pCHAR ErrorMsg )
{
   bon01_to_db( bon01_ptr );


	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bon01
      FROM   BON01
      For Update NOWAIT;
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BON01 ,Fun_Name : db_update_bon01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_bon01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE bon01 
   SET minimum_amount            = :pte_bon01.minimum_amount,                  
       program_start_date        = :pte_bon01.program_start_date,        
       program_end_date          = :pte_bon01.program_end_date,          
       transaction_threshold     = :pte_bon01.transaction_threshold,     
       transaction_counter       = :pte_bon01.transaction_counter,       
       maximum_reward            = :pte_bon01.maximum_reward,            
       response_message          = :pte_bon01.response_message;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BON01 ,Fun_Name : db_update_bon01_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }      
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_bon01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}

/******************************************************************************/
/******************************************************************************/
BYTE db_update_bon02( pBON02 bon02_ptr, pCHAR ErrorMsg )
{
   BYTE  retval = PTEMSG_OK;

   bon02_to_db( bon02_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bon02
      FROM   BON02
      WHERE  cash_promo_id = :pte_bon02.cash_id AND
      		 rownum        = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BON02 ,Fun_Name : db_update_bon02_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }   
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_bon02 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE bon02
   SET  tag_id               = :pte_bon02.tag_id,
        cash_promo_desc      = :pte_bon02.cash_desc,
        program_start_date   = :pte_bon02.program_start_date,
        program_end_date     = :pte_bon02.program_end_date,
        tran_threshold       = :pte_bon02.tran_threshold,
        tran_counter         = :pte_bon02.tran_ctr,
        time_period          = :pte_bon02.time_period,
        max_period_winners   = :pte_bon02.max_period_winners,
        period_win_counter   = :pte_bon02.period_win_ctr,
        max_program_winners  = :pte_bon02.max_program_winners,
        program_win_counter  = :pte_bon02.program_win_ctr,

        amount1_low          = :pte_bon02.low_amount1,
        amount1_high         = :pte_bon02.high_amount1,
        response1            = :pte_bon02.resp_text1,
        win_type_radio1      = :pte_bon02.win_type1,
        reward_amount1       = :pte_bon02.reward_amount1,

        amount2_low          = :pte_bon02.low_amount2,
        amount2_high         = :pte_bon02.high_amount2,
        response2            = :pte_bon02.resp_text2,
        win_type_radio2      = :pte_bon02.win_type2,
        reward_amount2       = :pte_bon02.reward_amount2,

        amount3_low          = :pte_bon02.low_amount3,
        amount3_high         = :pte_bon02.high_amount3,
        response3            = :pte_bon02.resp_text3,
        win_type_radio3      = :pte_bon02.win_type3,
        reward_amount3       = :pte_bon02.reward_amount3,

        amount4_low          = :pte_bon02.low_amount4,
        amount4_high         = :pte_bon02.high_amount4,
        response4            = :pte_bon02.resp_text4,
        win_type_radio4      = :pte_bon02.win_type4,
        reward_amount4       = :pte_bon02.reward_amount4,

        amount5_low          = :pte_bon02.low_amount5,
        amount5_high         = :pte_bon02.high_amount5,
        response5            = :pte_bon02.resp_text5,
        win_type_radio5      = :pte_bon02.win_type5,
        reward_amount5       = :pte_bon02.reward_amount5,

        multi_winner_text    = :pte_bon02.multi_winner_text,
        multi_winners_allowed= :pte_bon02.multi_winners_allowed

   WHERE cash_promo_id = :pte_bon02.cash_id;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BON02 ,Fun_Name : db_update_bon02_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }   
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_bon02 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return( retval );
}


/******************************************************************************/
/******************************************************************************/
BYTE db_update_bon02_multi_winner_resp( pBON02 bon02_ptr, pCHAR ErrorMsg )
{
   BYTE  retval = PTEMSG_OK;
   INT   i, len;

   EXEC SQL BEGIN DECLARE SECTION;
      char  multi_winner_resp[121];
      int   NumRowsReturned = 0;
      char  cash_id[21];
   EXEC SQL END DECLARE SECTION;

   memset( multi_winner_resp, 0x00, sizeof(multi_winner_resp) );
   strcpy( multi_winner_resp, bon02_ptr->multi_winner_text    );

   if ( multi_winner_resp[0] != 0x00 )
   {
		if ( db_error_statics_flag == true )
   		{
     		 start_time = ptetime_get_time();
   		}
      /* Set multi-winner response text for all records to this value. */
       EXEC SQL UPDATE bon02
       SET  multi_winner_text = :multi_winner_resp;
       if ( db_error_statics_flag == true )
   	   {
      		end_time = ptetime_get_time();
      	 	duration = end_time - start_time;
      	 	if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BON02 ,Fun_Name : db_update_bon02_multi_winner_resp_U1 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
   	   }   
   }
   else
   {
      /* This record does not have any text for multi-winners.
       * Grab text from an existing record, and update the text
       * in this record.
       */
	  if ( db_error_statics_flag == true )
  	  {
     	  start_time = ptetime_get_time();
   	  }
      EXEC SQL SELECT COUNT(*) INTO :NumRowsReturned FROM bon02;
	  if ( db_error_statics_flag == true )
   	  {
      	end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BON02 ,Fun_Name : db_update_bon02_multi_winner_resp_C , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   	  }
      if ( NumRowsReturned > 0 )
      {
      	if ( db_error_statics_flag == true )
  		{
      		start_time = ptetime_get_time();
   		}
         EXEC SQL SELECT multi_winner_text
                  INTO  :multi_winner_resp
                  FROM   bon02
                  WHERE  multi_winner_text IS NOT NULL
                    AND  rownum = 1;
		if ( db_error_statics_flag == true )
   	   {
      		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BON02 ,Fun_Name : db_update_bon02_multi_winner_resp_S1 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
   	    }
        if ( SQLCODE == 0 )
        {
            memset( cash_id, 0x00, sizeof(cash_id) );
            strcpy( cash_id, bon02_ptr->cash_id    );

            /* Trim trailing spaces. */
            len = strlen( multi_winner_resp );
            if ( len > 0 )
            {
               for( i=len-1; multi_winner_resp[i] == ' '; i-- )
               {
                  multi_winner_resp[i] = 0x00;
               }

				if ( db_error_statics_flag == true )
  				{
      				start_time = ptetime_get_time();
   				}
               /* Make sure we can access the record before attempting to update it. */
               EXEC SQL
                  SELECT *
                  INTO  :db_bon02
                  FROM   BON02
                  WHERE  cash_promo_id = :cash_id AND 
                  	     rownum        = 1
                  For Update NOWAIT;
				if ( db_error_statics_flag == true )
   	   			{
      				end_time = ptetime_get_time();
      				duration = end_time - start_time;
      				if(duration >= db_error_statics_value)
	  				{
	  					memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
						sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BON02 ,Fun_Name : db_update_bon02_multi_winner_resp_S2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
						Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  				}
   	    		}
               if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
               {
                  /* Record is inaccessible. Return with error. */                  
					memset(er_buf,0x00,sizeof(er_buf));
					DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
					sprintf(er_buf,"In  db_update_bon02_multi_winner_resp ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
					strcat(er_buf,ErrorMsg);
					Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
					return DB_rcode;    
               }

				if ( db_error_statics_flag == true )
  				{
      				start_time = ptetime_get_time();
   				}
              	EXEC SQL UPDATE bon02
                        SET    multi_winner_text = :multi_winner_resp
                        WHERE  cash_promo_id = :cash_id;
                  if ( db_error_statics_flag == true )
   	  			 {
      				end_time = ptetime_get_time();
      				duration = end_time - start_time;
      				if(duration >= db_error_statics_value)
	  				{
	  					memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
						sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BON02 ,Fun_Name : db_select_ncf30_by_rrn_and_terminal_U2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
						Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  			    }
   	             }
            }
         }
      }
   }

   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_bon02_multi_winner_resp ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return( retval );
}



/*************************************************************************************/

/*************************************************************************************/

BYTE db_update_ccf01( pCCF01 ccf01_ptr, pCHAR ErrorMsg )

{
   ccf01_to_db( ccf01_ptr );

   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_ccf01
      FROM   CCF01
      WHERE  card_nbr  = :pte_ccf01.card_nbr  AND  
      		 card_type = :pte_ccf01.card_type AND
      		 rownum    = 1
      For Update NOWAIT;
      
	if ( db_error_statics_flag == true )
   	{
      	end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF01 ,Fun_Name : db_update_ccf01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_ccf01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   EXEC SQL UPDATE ccf01 

   SET  card_type                   = :pte_ccf01.card_type,

        card_nbr                    = :pte_ccf01.card_nbr,

        primary_acct_nbr            = :pte_ccf01.primary_acct_nbr,

        name_dba                    = :pte_ccf01.name_dba,

        address1                    = :pte_ccf01.address1,

        address2                    = :pte_ccf01.address2,

        city                        = :pte_ccf01.city,

        state                       = :pte_ccf01.state,

        zip_code                    = :pte_ccf01.zip_code,

        home_phone                  = :pte_ccf01.home_phone,

        work_phone                  = :pte_ccf01.work_phone,

        dob                         = :pte_ccf01.dob,

        profession                  = :pte_ccf01.profession,

        country                     = :pte_ccf01.country,

        nbr_cards                   = :pte_ccf01.nbr_cards,

        status                      = :pte_ccf01.status,

        sex                         = :pte_ccf01.sex,

        mother_maiden_name          = :pte_ccf01.mother_maiden_name,

        membership_id               = :pte_ccf01.membership_id,     

        cardholder_id               = :pte_ccf01.cardholder_id,     

        block_status                = :pte_ccf01.block_status,      

        specialty_code              = :pte_ccf01.specialty_code,    

        vip_acct_code               = :pte_ccf01.vip_acct_code     

                  

   WHERE card_nbr = :pte_ccf01.card_nbr AND card_type = :pte_ccf01.card_type;

   if ( db_error_statics_flag == true )
   	   {
      		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF01 ,Fun_Name : db_update_ccf01_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
   	    }    

   if ( SQLCODE != 0 )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_ccf01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }
   return PTEMSG_OK;

}





/*************************************************************************************/

/*************************************************************************************/

BYTE db_update_acf01( pACF01 acf01_ptr, pCHAR ErrorMsg )

{
   acf01_to_db( acf01_ptr );

   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_acf01
      FROM   ACF01
      WHERE  account_nbr  = :pte_acf01.account_nbr  AND 
      		 account_type = :pte_acf01.account_type AND
      		 rownum       = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
    {
      	end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ACF01 ,Fun_Name : db_update_acf01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   } 
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		printf(er_buf,"In  db_update_acf01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

   EXEC SQL UPDATE acf01 

   SET  account_type                         = :pte_acf01.account_type,

        account_nbr                          = :pte_acf01.account_nbr,

        status                               = :pte_acf01.status,

        date_added                           = :pte_acf01.date_added,

        maint_date                           = :pte_acf01.maint_date,

        changed_by                           = :pte_acf01.changed_by,

        credit_limit                         = :pte_acf01.credit_limit,

        available                            = :pte_acf01.available,

        outstanding                          = :pte_acf01.outstanding,

        ledger_balance                       = :pte_acf01.ledger_balance,

        cash_limit                           = :pte_acf01.cash_limit,           

        cash_available                       = :pte_acf01.cash_available,       

        cash_outstanding                     = :pte_acf01.cash_outstanding     

                  

   WHERE account_nbr = :pte_acf01.account_nbr AND account_type = :pte_acf01.account_type;

   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ACF01 ,Fun_Name : db_update_acf01_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   	}    

   if ( SQLCODE != 0 )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_acf01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }


   return PTEMSG_OK;

}



BYTE db_update_acf01_for_deferred_account (pAUTH_TX	auth_tx, 

										   pACF01 acf01_ptr, 

										   pCHAR ErrorMsg) 

{

	EXEC SQL BEGIN DECLARE SECTION ;
		double TransactionAmount ;
		double DeferredFactor ;
		double DeferredTerm ;
		char available[50] = {0} ;
		char outstanding[50] = {0} ;
		double nDecrementedAvailable ;
		double nIncrementedOutstanding ;
		char strAvailable[50] = {0} ;
		char strOutstanding[50] = {0};
		char strMessage [256] = {0} ;
    EXEC SQL END DECLARE SECTION ;

	/* Initialise all the variables */
	TransactionAmount = 0.0 ;
	DeferredFactor = 0.0 ;
	DeferredTerm = 0.0 ;
	nDecrementedAvailable = 0.0 ;
	nIncrementedOutstanding = 0.0 ;
	memset (available, 0, sizeof available) ;
	memset (outstanding, 0, sizeof outstanding) ;
	memset (strAvailable, 0, sizeof strAvailable) ;
	memset (strOutstanding, 0, sizeof strOutstanding ) ;
	memset (strMessage, 0, sizeof strMessage) ;
	
	/* copies contents of acf01_ptr to pte_acf01 */
	acf01_to_db (acf01_ptr) ;
	
	/* db_acf01_deferred is a structure comprising varchar s of available[13] and oustanding[13] */
	memset (&db_acf01_deferred, 0, sizeof db_acf01_deferred) ;

	/* Get the deferred factor from the transaction */
	DeferredFactor = (strtod (auth_tx->TLF01_details.deferred_factor, 0) / 1000000.0) ;

	/* Get the deferred term from the transaction */
	DeferredTerm = (strtod (auth_tx->TLF01_details.deferred_term_length, 0)) ;
	
	if ( db_error_statics_flag == true )
    {
       start_time = ptetime_get_time();
    }
	/* Get the available and outstanding values for the deferred account 
	   into the db_acf01_deferred structure 
	*/
	EXEC SQL SELECT available, outstanding
	INTO :db_acf01_deferred
	FROM acf01
	WHERE account_nbr  = :pte_acf01.account_nbr AND 
		  account_type = '07'                   AND
		  rownum       = 1 
    FOR UPDATE NOWAIT;
      
    if ( db_error_statics_flag == true )
    {
      	end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ACF01 ,Fun_Name : db_update_acf01_for_deferred_account_1 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   	}  
	if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_acf01_for_deferred_account ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }
	else
	{

		memcpy(outstanding, db_acf01_deferred.outstanding.arr, db_acf01_deferred.outstanding.len) ;
		memcpy(available, db_acf01_deferred.available.arr, db_acf01_deferred.available.len) ;		
		if (auth_tx->TLF01_details.tx_key == AUTH_DEFERRED_PURCHASE_AUTHORIZATION_RESPONSE ||
		    auth_tx->TLF01_details.tx_key == AUTH_DEFERRED_PURCHASE_AUTHORIZATION_OVERRIDE_RESPONSE)
		{
			TransactionAmount = (strtod (auth_tx->TLF01_details.total_amount, 0) / 100.0) ;
			TransactionAmount = TransactionAmount * DeferredFactor * DeferredTerm ; 
			/* TransactionAmount = TransactionAmount + (TransactionAmount * DeferredFactor) ;*/
			
			nIncrementedOutstanding = (strtod (outstanding, 0) / 100.0) + TransactionAmount ;
			nDecrementedAvailable   = (strtod (available, 0)   / 100.0) - TransactionAmount ;
		}

		else /* Transaction is a Reversal of a deferred purchase transaction */
		{
			TransactionAmount = (strtod (auth_tx->TLF01_details.reversal_amount, 0) / 100.0) ;
			TransactionAmount = TransactionAmount * DeferredFactor * DeferredTerm ;
			/* TransactionAmount = TransactionAmount + (TransactionAmount * DeferredFactor) ;*/
			nIncrementedOutstanding = (strtod (outstanding, 0) / 100.0) - TransactionAmount ;
			nDecrementedAvailable   = (strtod (available, 0)   / 100.0) + TransactionAmount ;
		}
		/* Do not allow negative numbers */
		if (nIncrementedOutstanding <= 0.0) 
			nIncrementedOutstanding = 0.0 ;
			
		if (nDecrementedAvailable   <= 0.0) 
			nDecrementedAvailable = 0.0 ;

		/* Do not allow numbers to exceed 9999999999.99 */
		if (nIncrementedOutstanding > 9999999999.99) 
			nIncrementedOutstanding = 9999999999.99 ;

		memset (strOutstanding, 0, sizeof strOutstanding) ;
		
		/* Multiply nIncrementedOutstanding by 100 and terminate  the string at the decimal point */		
		Convert_Amt_To_Auth_Tx_String_Format(nIncrementedOutstanding, strOutstanding) ;
		
		/* Left pad with zeroes */
		LeftFill_String_With_Character (sizeof (db_acf01_deferred.outstanding.arr)-1, strOutstanding,'0') ;
		
		memset (strAvailable, 0, sizeof strAvailable) ;

		/* Multiply nDecrementedAvailable by 100 and terminate  the string at the decimal point */
		Convert_Amt_To_Auth_Tx_String_Format(nDecrementedAvailable, strAvailable) ;

		/* Left pad with zeroes */
		LeftFill_String_With_Character (sizeof (db_acf01_deferred.available.arr) -1, strAvailable,'0') ;

		 if ( db_error_statics_flag == true )
  		 {
     		 start_time = ptetime_get_time();
   		 }
		/* Update the deferred purchase account with the new values */
		EXEC SQL UPDATE acf01 
		SET  
			outstanding = :strOutstanding,
			available   = :strAvailable
		WHERE account_nbr = :pte_acf01.account_nbr AND account_type = '07' ;
		if ( db_error_statics_flag == true )
   		{
      		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : NCF30 ,Fun_Name : db_update_acf01_for_deferred_account_2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
   		}  
		if ( SQLCODE != 0 )
		{
			memset(er_buf,0x00,sizeof(er_buf));
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In  db_update_acf01_for_deferred_account ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
	    }
	}
	return PTEMSG_OK ;
   
} /* db_update_acf01_for_deferred_account */



/*************************************************************************************/

BYTE db_update_mppara01( pMPPARA01 mppara01_ptr, pCHAR ErrorMsg )

{
   mppara01_to_db( mppara01_ptr );

	if ( db_error_statics_flag == true )
   	{
      start_time = ptetime_get_time();
   	}
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_mppara01
      FROM   MPPARA01
      WHERE  product_code = :pte_mppara01.product_code AND
      	     rownum       = 1 
       For Update NOWAIT;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MPPARA ,Fun_Name : db_update_mppara01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_mppara01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE mppara01 

	SET product_code	   			= :pte_mppara01.product_code,		
		minmajpurchamt	  			= :pte_mppara01.minmajpurchamt,		 		
		maxmajpurchamt				= :pte_mppara01.maxmajpurchamt,			
		mininstamt					= :pte_mppara01.mininstamt,		
		maxinstamt					= :pte_mppara01.maxinstamt,			
		minmajpurchlmt				= :pte_mppara01.minmajpurchlmt,			
		minpenaltyamt				= :pte_mppara01.minpenaltyamt,			
		maxpenaltyamt				= :pte_mppara01.maxpenaltyamt,			
		penaltyper					= :pte_mppara01.penaltyper,			
		penaltyday					= :pte_mppara01.penaltyday,			
		minamtofaging				= :pte_mppara01.minamtofaging,		
		mntowrtof					= :pte_mppara01.mntowrtof,			
		BPIminamt					= :pte_mppara01.BPIminamt,			
		brokenperdinst				= :pte_mppara01.brokenperdinst,			
		minfreepurchamt				= :pte_mppara01.minfreepurchamt,			
		errorunauthamt				= :pte_mppara01.errorunauthamt,			
		fixedmpfee					= :pte_mppara01.fixedmpfee,			
		mpfeepercnt					= :pte_mppara01.mpfeepercnt,			
		earlyrepayfeeper 			= :pte_mppara01.earlyrepayfeeper,			
		effective_date				= :pte_mppara01.effective_date,		
		maxtrnperday 				= :pte_mppara01.maxtrnperday,			
		maxamtperday 				= :pte_mppara01.maxamtperday,			
		authoverlimit				= :pte_mppara01.authoverlimit,			
		authpara_response_code_1 	= :pte_mppara01.authpara_response_code_1,
		authpara_message_1			= :pte_mppara01.authpara_message_1,	
		authpara_response_code_2	= :pte_mppara01.authpara_response_code_2,
		authpara_message_2			= :pte_mppara01.authpara_message_2,		
		authpara_response_code_3 	= :pte_mppara01.authpara_response_code_3,			
		authpara_message_3			= :pte_mppara01.authpara_message_3		 

                  

   WHERE product_code = :pte_mppara01.product_code;

    if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MPPARA ,Fun_Name : db_update_mppara01_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }   

   if ( SQLCODE != 0 )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_mppara01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;

}





/*************************************************************************************/



/*****************************************************************************

NAME:			Convert_Amt_To_Auth_Tx_String_Format

DESCRIPTION:	Converts from a double value to a string value

INPUTS:			
				nAmount:	the value to be converted in double
				
OUTPUTS:		strAmount	the pointer to the string that contains the converted amount

RETURNS:        false  if error
                true   if no error
AUTHOR:         Sanjoy Dasgupta
MODIFIED BY:	
*****************************************************************************/

int Convert_Amt_To_Auth_Tx_String_Format(double nAmount, char* strAmount)
{
	char strTemp[50] = {0} ;
	int  nStringLength = 0 ;
	int  nIndex = 0 ;
	
	gcvt (nAmount*100, 15, strTemp) ; /* choice of 15 is arbitrary*/
	nStringLength = strlen (strTemp) ;
	
	/* Discard all characters after the decimal point, if present */
	for (nIndex = 0; nIndex < nStringLength ; nIndex++)
	{
		if ('.' == strTemp[nIndex])
		{
			strTemp[nIndex] = 0 ;
			break ;
		}
	}

	strcpy (strAmount, strTemp) ;
	return 1 ;
} /* Convert_Amt_To_Auth_Tx_String_Format */



void LeftFill_String_With_Character (unsigned int destination_array_size,
                                     char* strAmount,
                                     unsigned char fill_character) 

{
   unsigned char strTemp[50] = {0} ;
   int len = 0 ;
   
   memset (strTemp, fill_character, sizeof strTemp) ;
   len = strlen (strAmount) ;
   strTemp [destination_array_size - len] = 0 ;
   strcat (strTemp, strAmount) ;
   strcpy (strAmount, strTemp) ;
}



/*************************************************************************************/

/*************************************************************************************/

BYTE db_update_crf01( pCRF01 crf01_ptr, pCHAR ErrorMsg )
{
   crf01_to_db( crf01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_crf01
      FROM   CRF01
      WHERE  currency_code = :pte_crf01.currency_code AND
      	     rownum        = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CRF01 ,Fun_Name : db_update_crf01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_crf01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE crf01 
   SET  currency_code                        = :pte_crf01.currency_code,
        conversion_rate                      = :pte_crf01.conversion_rate,
		currency_name                        = :pte_crf01.currency_name
                  
   WHERE currency_code = :pte_crf01.currency_code;
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CRF01 ,Fun_Name : db_update_crf01_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_crf01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/

BYTE db_update_ccl01( pCCL01 ccl01_ptr, pCHAR ErrorMsg )
{
   ccl01_to_db( ccl01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_ccl01
      FROM   CCL01
      WHERE  currency_value = :pte_ccl01.currency_value AND
      	     rownum        = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCL01 ,Fun_Name : db_update_ccl01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_ccl01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE ccl01 
   SET  currency_value                       = :pte_ccl01.currency_value,
   		currency_code                        = :pte_ccl01.currency_code,
        currency_decimal_places              = :pte_ccl01.currency_decimal_places,
		currency_name                        = :pte_ccl01.currency_name
                  
   WHERE currency_value = :pte_ccl01.currency_value;
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCL01 ,Fun_Name : db_update_ccl01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_ccl01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}

/*************************************************************************************/

BYTE db_update_bdkkey01( pBDKKEY01 bdkkey01_ptr, pCHAR ErrorMsg )
{
   bdkkey01_to_db( bdkkey01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bdkkey01
      FROM   BDKKEY01
      WHERE  card_brand = :pte_bdkkey01.card_brand AND
      	     rownum        = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BDKKEY01 ,Fun_Name : db_update_bdkkey01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_bdkkey01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE bdkkey01 
   SET  card_brand					= :pte_bdkkey01.card_brand,
   		bdk_key                     = :pte_bdkkey01.bdk_key
                  
   WHERE card_brand = :pte_bdkkey01.card_brand;
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BDKKEY01 ,Fun_Name : db_update_bdkkey01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_bdkkey01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}

/*************************************************************************************/

BYTE db_update_caf01_keyblock01( pCAF01_KEYBLOCK caf01_keyblock01_ptr, pCHAR ErrorMsg )
{
   caf01_keyblock01_to_db( caf01_keyblock01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_caf01_keyblock01
      FROM   CAF01_KEYBLOCK
      WHERE  Caf_Profile_id = :pte_caf01_keyblock01.Caf_Profile_id AND
             Type			= :pte_caf01_keyblock01.Type		   AND
      	     rownum        = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01_KEYBLOCK ,Fun_Name : db_update_caf01_keyblock01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_caf01_keyblock01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE CAF01_KEYBLOCK 
   SET  Caf_Profile_id			 = :pte_caf01_keyblock01.Caf_Profile_id,
   		Type                     = :pte_caf01_keyblock01.Type,
    	Cvk_Mag_Keyblock         = :pte_caf01_keyblock01.Cvk_Mag_Keyblock,		
    	Cvk_Acq_3DS_Keyblock     = :pte_caf01_keyblock01.Cvk_Acq_3DS_Keyblock,
    	Cvk_Pin_Verification     = :pte_caf01_keyblock01.Cvk_Pin_Verification,
    	Cvk_Mkac_Keyblock        = :pte_caf01_keyblock01.Cvk_Mkac_Keyblock,
    	Csck_Iss_3ds_Keyblock    = :pte_caf01_keyblock01.Csck_Iss_3ds_Keyblock,
   		Csck_Mag_Keyblock        = :pte_caf01_keyblock01.Csck_Mag_Keyblock,
    	Dci_3ds_Keyblock         = :pte_caf01_keyblock01.Dci_3ds_Keyblock,		
    	Cvk_3ds_Cak_Keyblock     = :pte_caf01_keyblock01.Cvk_3ds_Cak_Keyblock  	    	    	    	                      
   WHERE Caf_Profile_id = :pte_caf01_keyblock01.Caf_Profile_id	   AND
             Type			= :pte_caf01_keyblock01.Type;		      
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01_KEYBLOCK ,Fun_Name : db_update_caf01_keyblock01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_caf01_keyblock01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}


/*************************************************************************************/

BYTE db_update_csf01( pCSF01 csf01_ptr, pCHAR ErrorMsg )

{

   csf01_to_db( csf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_csf01
      FROM   CSF01
      WHERE  status = :pte_csf01.status AND
      		 rownum = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CSF01 ,Fun_Name : db_update_csf01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */    
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_csf01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE csf01 
   SET  status                               = :pte_csf01.status,
        description                          = :pte_csf01.description,
        iso_resp_code                        = :pte_csf01.iso_resp_code,
        resp_text_msg                        = :pte_csf01.resp_text_msg,
        mac_value							 = :pte_csf01.mac_value
                  
   WHERE status = :pte_csf01.status;
    if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CSF01 ,Fun_Name : db_update_csf01_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }   
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_csf01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/

/*************************************************************************************/

BYTE db_update_paf01( pPAF01 paf01_ptr, pCHAR ErrorMsg )
{
   paf01_to_db( paf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_paf01
      FROM   PAF01
      WHERE  primary_acct_nbr = :pte_paf01.primary_acct_nbr AND
      		 rownum           = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : PAF01 ,Fun_Name : db_update_paf01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */    
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_paf01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE paf01 
   SET  primary_acct_nbr                     = :pte_paf01.primary_acct_nbr,
        name_dba                             = :pte_paf01.name_dba,
        address1                             = :pte_paf01.address1,
        address2                             = :pte_paf01.address2,
        city                                 = :pte_paf01.city,
        state                                = :pte_paf01.state,
        zip_code                             = :pte_paf01.zip_code,
        home_phone                           = :pte_paf01.home_phone,
        work_phone                           = :pte_paf01.work_phone,
        status                               = :pte_paf01.status,
        caf_profile_id                       = :pte_paf01.caf_profile_id,
        type                                 = :pte_paf01.type,
        block_status                         = :pte_paf01.block_status,
        corp_acct_nbr                        = :pte_paf01.corp_acct_nbr,
        account_name                         = :pte_paf01.account_name,
        past_due_amount                      = :pte_paf01.past_due_amount,      
        min_pay_code                         = :pte_paf01.min_pay_code,
        Credit_limit						 = :pte_paf01.Credit_limit,
        Custr_nbr							 = :pte_paf01.Custr_nbr,
        APP_Source							 = :pte_paf01.APP_Source,
        COMP_Name							 = :pte_paf01.COMP_Name
                  
   WHERE primary_acct_nbr = :pte_paf01.primary_acct_nbr;
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : PAF01 ,Fun_Name : db_update_paf01_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }    
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_paf01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}





/*************************************************************************************/

/*************************************************************************************/

BYTE db_update_def01( pDEF01 def01_ptr, pCHAR ErrorMsg )
{
   def01_to_db( def01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_def01
      FROM   DEF01
      WHERE  organization_id = :pte_def01.organization_id  AND  
      		 merchant_id     = :pte_def01.merchant_id      AND  
      		 term_length     = :pte_def01.term_length      AND
      		 rownum          = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : DEF01 ,Fun_Name : db_update_def01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      	memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_def01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;  
   }
   
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL UPDATE def01 
   SET   factor                               = :pte_def01.factor,
         deferred_min_amount                  = :pte_def01.deferred_min_amount,
         deferred_max_amount                  = :pte_def01.deferred_max_amount                   
   WHERE organization_id  = :pte_def01.organization_id AND
         merchant_id = :pte_def01.merchant_id AND
         term_length = :pte_def01.term_length;

    if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : DEF01 ,Fun_Name : db_update_def01_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_def01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }
   return PTEMSG_OK;
}
/*************************************************************************************/

/*************************************************************************************/

BYTE db_update_ccf03p( pCCF03 ccf03p_ptr, pCHAR ErrorMsg )
{
   ccf03p_to_db( ccf03p_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_ccf03p
      FROM   ccf03p
      WHERE  card_nbr  = :pte_ccf03p.card_nbr   AND  
      		 card_type = :pte_ccf03p.card_type  AND
      		 rownum    = 1
      For Update NOWAIT;
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF03P ,Fun_Name : db_update_ccf03p_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */  
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_ccf03p ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;   
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE ccf03p 
   SET card_type                    = :pte_ccf03p.card_type,
        card_nbr                    = :pte_ccf03p.card_nbr,
        primary_acct_nbr            = :pte_ccf03p.primary_acct_nbr,
        daily_amt_usage             = :pte_ccf03p.daily_amt_usage,
        julian_date                 = :pte_ccf03p.julian_date,
        peso_julian_date            = :pte_ccf03p.peso_julian_date,               
        dollar_julian_date          = :pte_ccf03p.dollar_julian_date,           
        peso_usage1_nbr_usage       = :pte_ccf03p.peso_usage1_nbr_usage,    
        peso_usage1_amt_usage       = :pte_ccf03p.peso_usage1_amt_usage,    
        peso_usage2_nbr_usage       = :pte_ccf03p.peso_usage2_nbr_usage,    
        peso_usage2_amt_usage       = :pte_ccf03p.peso_usage2_amt_usage,    
        peso_usage3_nbr_usage       = :pte_ccf03p.peso_usage3_nbr_usage,    
        peso_usage3_amt_usage       = :pte_ccf03p.peso_usage3_amt_usage,    
        peso_usage4_nbr_usage       = :pte_ccf03p.peso_usage4_nbr_usage,    
        peso_usage4_amt_usage       = :pte_ccf03p.peso_usage4_amt_usage,    
        peso_usage5_nbr_usage       = :pte_ccf03p.peso_usage5_nbr_usage,    
        peso_usage5_amt_usage       = :pte_ccf03p.peso_usage5_amt_usage,    
        peso_usage6_nbr_usage       = :pte_ccf03p.peso_usage6_nbr_usage,    
        peso_usage6_amt_usage       = :pte_ccf03p.peso_usage6_amt_usage,    
        peso_usage7_nbr_usage       = :pte_ccf03p.peso_usage7_nbr_usage,    
        peso_usage7_amt_usage       = :pte_ccf03p.peso_usage7_amt_usage,    
        peso_usage8_nbr_usage       = :pte_ccf03p.peso_usage8_nbr_usage,    
        peso_usage8_amt_usage       = :pte_ccf03p.peso_usage8_amt_usage,    
        peso_usage9_nbr_usage       = :pte_ccf03p.peso_usage9_nbr_usage,    
        peso_usage9_amt_usage       = :pte_ccf03p.peso_usage9_amt_usage,    
        peso_usage10_nbr_usage      = :pte_ccf03p.peso_usage10_nbr_usage,   
        peso_usage10_amt_usage      = :pte_ccf03p.peso_usage10_amt_usage,   
        peso_usage11_nbr_usage      = :pte_ccf03p.peso_usage11_nbr_usage,   
        peso_usage11_amt_usage      = :pte_ccf03p.peso_usage11_amt_usage,   
        peso_usage12_nbr_usage      = :pte_ccf03p.peso_usage12_nbr_usage,   
        peso_usage12_amt_usage      = :pte_ccf03p.peso_usage12_amt_usage,   
        peso_usage13_nbr_usage      = :pte_ccf03p.peso_usage13_nbr_usage,   
        peso_usage13_amt_usage      = :pte_ccf03p.peso_usage13_amt_usage,   
        peso_usage14_nbr_usage      = :pte_ccf03p.peso_usage14_nbr_usage,   
        peso_usage14_amt_usage      = :pte_ccf03p.peso_usage14_amt_usage,   

        dollar_usage1_nbr_usage     = :pte_ccf03p.dollar_usage1_nbr_usage,  
        dollar_usage1_amt_usage     = :pte_ccf03p.dollar_usage1_amt_usage,  
        dollar_usage2_nbr_usage     = :pte_ccf03p.dollar_usage2_nbr_usage,  
        dollar_usage2_amt_usage     = :pte_ccf03p.dollar_usage2_amt_usage,  
        dollar_usage3_nbr_usage     = :pte_ccf03p.dollar_usage3_nbr_usage,  
        dollar_usage3_amt_usage     = :pte_ccf03p.dollar_usage3_amt_usage,  
        dollar_usage4_nbr_usage     = :pte_ccf03p.dollar_usage4_nbr_usage,  
        dollar_usage4_amt_usage     = :pte_ccf03p.dollar_usage4_amt_usage,  
        dollar_usage5_nbr_usage     = :pte_ccf03p.dollar_usage5_nbr_usage,  
        dollar_usage5_amt_usage     = :pte_ccf03p.dollar_usage5_amt_usage,  
        dollar_usage6_nbr_usage     = :pte_ccf03p.dollar_usage6_nbr_usage,  
        dollar_usage6_amt_usage     = :pte_ccf03p.dollar_usage6_amt_usage,  
        dollar_usage7_nbr_usage     = :pte_ccf03p.dollar_usage7_nbr_usage,  
        dollar_usage7_amt_usage     = :pte_ccf03p.dollar_usage7_amt_usage,  
        dollar_usage8_nbr_usage     = :pte_ccf03p.dollar_usage8_nbr_usage,  
        dollar_usage8_amt_usage     = :pte_ccf03p.dollar_usage8_amt_usage,  
        dollar_usage9_nbr_usage     = :pte_ccf03p.dollar_usage9_nbr_usage,  
        dollar_usage9_amt_usage     = :pte_ccf03p.dollar_usage9_amt_usage,  
        dollar_usage10_nbr_usage    = :pte_ccf03p.dollar_usage10_nbr_usage, 
        dollar_usage10_amt_usage    = :pte_ccf03p.dollar_usage10_amt_usage, 
        dollar_usage11_nbr_usage    = :pte_ccf03p.dollar_usage11_nbr_usage, 
        dollar_usage11_amt_usage    = :pte_ccf03p.dollar_usage11_amt_usage, 
        dollar_usage12_nbr_usage    = :pte_ccf03p.dollar_usage12_nbr_usage, 
        dollar_usage12_amt_usage    = :pte_ccf03p.dollar_usage12_amt_usage, 
        dollar_usage13_nbr_usage    = :pte_ccf03p.dollar_usage13_nbr_usage, 
        dollar_usage13_amt_usage    = :pte_ccf03p.dollar_usage13_amt_usage, 
        dollar_usage14_nbr_usage    = :pte_ccf03p.dollar_usage14_nbr_usage, 
        dollar_usage14_amt_usage    = :pte_ccf03p.dollar_usage14_amt_usage, 

        failed_pin_attempts         = :pte_ccf03p.failed_pin_attempts,
        date_added                  = :pte_ccf03p.date_added,
        last_maint                  = :pte_ccf03p.last_maint,
        status                      = :pte_ccf03p.status,
        mcc1_code                   = :pte_ccf03p.mcc1_code,
        mcc1_usage                  = :pte_ccf03p.mcc1_usage,
        mcc2_code                   = :pte_ccf03p.mcc2_code,
        mcc2_usage                  = :pte_ccf03p.mcc2_usage,
        mcc3_code                   = :pte_ccf03p.mcc3_code,
        mcc3_usage                  = :pte_ccf03p.mcc3_usage,
        mcc4_code                   = :pte_ccf03p.mcc4_code,
        mcc4_usage                  = :pte_ccf03p.mcc4_usage,
        mcc5_code                   = :pte_ccf03p.mcc5_code,
        mcc5_usage                  = :pte_ccf03p.mcc5_usage,
        mcc6_code                   = :pte_ccf03p.mcc6_code,
        mcc6_usage                  = :pte_ccf03p.mcc6_usage,
        mcc7_code                   = :pte_ccf03p.mcc7_code,
        mcc7_usage                  = :pte_ccf03p.mcc7_usage,
        mcc8_code                   = :pte_ccf03p.mcc8_code,
        mcc8_usage                  = :pte_ccf03p.mcc8_usage,
        mcc9_code                   = :pte_ccf03p.mcc9_code,
        mcc9_usage                  = :pte_ccf03p.mcc9_usage,
        mcc10_code                  = :pte_ccf03p.mcc10_code,
        mcc10_usage                 = :pte_ccf03p.mcc10_usage,
        mcc11_code                  = :pte_ccf03p.mcc11_code,
        mcc11_usage                 = :pte_ccf03p.mcc11_usage,
        mcc12_code                  = :pte_ccf03p.mcc12_code,
        mcc12_usage                 = :pte_ccf03p.mcc12_usage,
        mcc13_code                  = :pte_ccf03p.mcc13_code,
        mcc13_usage                 = :pte_ccf03p.mcc13_usage,
        mcc14_code                  = :pte_ccf03p.mcc14_code,
        mcc14_usage                 = :pte_ccf03p.mcc14_usage,
        mcc15_code                  = :pte_ccf03p.mcc15_code,
        mcc15_usage                 = :pte_ccf03p.mcc15_usage,
        mcc16_code                  = :pte_ccf03p.mcc16_code,
        mcc16_usage                 = :pte_ccf03p.mcc16_usage,
        mcc17_code                  = :pte_ccf03p.mcc17_code,
        mcc17_usage                 = :pte_ccf03p.mcc17_usage,
        mcc18_code                  = :pte_ccf03p.mcc18_code,
        mcc18_usage                 = :pte_ccf03p.mcc18_usage,
        mcc19_code                  = :pte_ccf03p.mcc19_code,
        mcc19_usage                 = :pte_ccf03p.mcc19_usage,
        mcc20_code                  = :pte_ccf03p.mcc20_code,
        mcc20_usage                 = :pte_ccf03p.mcc20_usage,

        repeat1_merchant_id         = :pte_ccf03p.repeat1_merchant_id,
        repeat1_nbr_uses            = :pte_ccf03p.repeat1_nbr_uses,
        repeat2_merchant_id         = :pte_ccf03p.repeat2_merchant_id,
        repeat2_nbr_uses            = :pte_ccf03p.repeat2_nbr_uses,
        repeat3_merchant_id         = :pte_ccf03p.repeat3_merchant_id,
        repeat3_nbr_uses            = :pte_ccf03p.repeat3_nbr_uses,
        repeat4_merchant_id         = :pte_ccf03p.repeat4_merchant_id,
        repeat4_nbr_uses            = :pte_ccf03p.repeat4_nbr_uses,
        repeat5_merchant_id         = :pte_ccf03p.repeat5_merchant_id,
        repeat5_nbr_uses            = :pte_ccf03p.repeat5_nbr_uses,
        repeat6_merchant_id         = :pte_ccf03p.repeat6_merchant_id,
        repeat6_nbr_uses            = :pte_ccf03p.repeat6_nbr_uses,
        repeat7_merchant_id         = :pte_ccf03p.repeat7_merchant_id,
        repeat7_nbr_uses            = :pte_ccf03p.repeat7_nbr_uses,
        repeat8_merchant_id         = :pte_ccf03p.repeat8_merchant_id,
        repeat8_nbr_uses            = :pte_ccf03p.repeat8_nbr_uses,
        repeat9_merchant_id         = :pte_ccf03p.repeat9_merchant_id,
        repeat9_nbr_uses            = :pte_ccf03p.repeat9_nbr_uses,
        repeat10_merchant_id        = :pte_ccf03p.repeat10_merchant_id,
        repeat10_nbr_uses           = :pte_ccf03p.repeat10_nbr_uses,
        repeat11_merchant_id        = :pte_ccf03p.repeat11_merchant_id,
        repeat11_nbr_uses           = :pte_ccf03p.repeat11_nbr_uses,
        repeat12_merchant_id        = :pte_ccf03p.repeat12_merchant_id,
        repeat12_nbr_uses           = :pte_ccf03p.repeat12_nbr_uses,
        repeat13_merchant_id        = :pte_ccf03p.repeat13_merchant_id,
        repeat13_nbr_uses           = :pte_ccf03p.repeat13_nbr_uses,
        repeat14_merchant_id        = :pte_ccf03p.repeat14_merchant_id,
        repeat14_nbr_uses           = :pte_ccf03p.repeat14_nbr_uses,
        repeat15_merchant_id        = :pte_ccf03p.repeat15_merchant_id,
        repeat15_nbr_uses           = :pte_ccf03p.repeat15_nbr_uses,
        repeat16_merchant_id        = :pte_ccf03p.repeat16_merchant_id,
        repeat16_nbr_uses           = :pte_ccf03p.repeat16_nbr_uses,
        repeat17_merchant_id        = :pte_ccf03p.repeat17_merchant_id,
        repeat17_nbr_uses           = :pte_ccf03p.repeat17_nbr_uses,
        repeat18_merchant_id        = :pte_ccf03p.repeat18_merchant_id,
        repeat18_nbr_uses           = :pte_ccf03p.repeat18_nbr_uses,
        repeat19_merchant_id        = :pte_ccf03p.repeat19_merchant_id,
        repeat19_nbr_uses           = :pte_ccf03p.repeat19_nbr_uses,
        repeat20_merchant_id        = :pte_ccf03p.repeat20_merchant_id,
        repeat20_nbr_uses           = :pte_ccf03p.repeat20_nbr_uses
                  
   WHERE card_nbr = :pte_ccf03p.card_nbr AND card_type = :pte_ccf03p.card_type;
   
    if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF03P ,Fun_Name : db_update_ccf03p_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }   
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_ccf03p ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}




/*************************************************************************************/

/*************************************************************************************/

BYTE db_update_offus_velocity( pOffus_velocity offus_velocity_ptr, pCHAR ErrorMsg )
{
   offus_velocity_to_db( offus_velocity_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_offus_velocity
      FROM   offus_velocity
      WHERE  card_type = :pte_offus_velocity.card_type    AND  
      		 card_nbr  = :pte_offus_velocity.card_nbr     AND
      		 rownum    = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : OFFUS_VELOCITY ,Fun_Name : db_update_offus_velocity_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_offus_velocity ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE offus_velocity 

   SET card_type                    = :pte_offus_velocity.card_type,
        card_nbr                    = :pte_offus_velocity.card_nbr,
        primary_acct_nbr            = :pte_offus_velocity.primary_acct_nbr,
        daily_amt_usage             = :pte_offus_velocity.daily_amt_usage,
        julian_date                 = :pte_offus_velocity.julian_date,
        peso_julian_date            = :pte_offus_velocity.peso_julian_date,   
        dollar_julian_date          = :pte_offus_velocity.dollar_julian_date,
        peso_usage1_nbr_usage       = :pte_offus_velocity.peso_usage1_nbr_usage,  
        peso_usage1_amt_usage       = :pte_offus_velocity.peso_usage1_amt_usage,    
        peso_usage2_nbr_usage       = :pte_offus_velocity.peso_usage2_nbr_usage,    
        peso_usage2_amt_usage       = :pte_offus_velocity.peso_usage2_amt_usage,    
        peso_usage3_nbr_usage       = :pte_offus_velocity.peso_usage3_nbr_usage,    
        peso_usage3_amt_usage       = :pte_offus_velocity.peso_usage3_amt_usage,    
        peso_usage4_nbr_usage       = :pte_offus_velocity.peso_usage4_nbr_usage,    
        peso_usage4_amt_usage       = :pte_offus_velocity.peso_usage4_amt_usage,    
        peso_usage5_nbr_usage       = :pte_offus_velocity.peso_usage5_nbr_usage,    
        peso_usage5_amt_usage       = :pte_offus_velocity.peso_usage5_amt_usage,    
        peso_usage6_nbr_usage       = :pte_offus_velocity.peso_usage6_nbr_usage,    
        peso_usage6_amt_usage       = :pte_offus_velocity.peso_usage6_amt_usage,    
        peso_usage7_nbr_usage       = :pte_offus_velocity.peso_usage7_nbr_usage,    
        peso_usage7_amt_usage       = :pte_offus_velocity.peso_usage7_amt_usage,    
        peso_usage8_nbr_usage       = :pte_offus_velocity.peso_usage8_nbr_usage,    
        peso_usage8_amt_usage       = :pte_offus_velocity.peso_usage8_amt_usage,    
        peso_usage9_nbr_usage       = :pte_offus_velocity.peso_usage9_nbr_usage,
        peso_usage9_amt_usage       = :pte_offus_velocity.peso_usage9_amt_usage,
        peso_usage10_nbr_usage      = :pte_offus_velocity.peso_usage10_nbr_usage,
        peso_usage10_amt_usage      = :pte_offus_velocity.peso_usage10_amt_usage,
        peso_usage11_nbr_usage      = :pte_offus_velocity.peso_usage11_nbr_usage,
        peso_usage11_amt_usage      = :pte_offus_velocity.peso_usage11_amt_usage,
        peso_usage12_nbr_usage      = :pte_offus_velocity.peso_usage12_nbr_usage,
        peso_usage12_amt_usage      = :pte_offus_velocity.peso_usage12_amt_usage, 
        peso_usage13_nbr_usage      = :pte_offus_velocity.peso_usage13_nbr_usage, 
        peso_usage13_amt_usage      = :pte_offus_velocity.peso_usage13_amt_usage,  
        peso_usage14_nbr_usage      = :pte_offus_velocity.peso_usage14_nbr_usage, 
        peso_usage14_amt_usage      = :pte_offus_velocity.peso_usage14_amt_usage,

        dollar_usage1_nbr_usage     = :pte_offus_velocity.dollar_usage1_nbr_usage,  
        dollar_usage1_amt_usage     = :pte_offus_velocity.dollar_usage1_amt_usage, 
        dollar_usage2_nbr_usage     = :pte_offus_velocity.dollar_usage2_nbr_usage, 
        dollar_usage2_amt_usage     = :pte_offus_velocity.dollar_usage2_amt_usage, 
        dollar_usage3_nbr_usage     = :pte_offus_velocity.dollar_usage3_nbr_usage, 
        dollar_usage3_amt_usage     = :pte_offus_velocity.dollar_usage3_amt_usage, 
        dollar_usage4_nbr_usage     = :pte_offus_velocity.dollar_usage4_nbr_usage, 
        dollar_usage4_amt_usage     = :pte_offus_velocity.dollar_usage4_amt_usage, 
        dollar_usage5_nbr_usage     = :pte_offus_velocity.dollar_usage5_nbr_usage, 
        dollar_usage5_amt_usage     = :pte_offus_velocity.dollar_usage5_amt_usage,  
        dollar_usage6_nbr_usage     = :pte_offus_velocity.dollar_usage6_nbr_usage, 
        dollar_usage6_amt_usage     = :pte_offus_velocity.dollar_usage6_amt_usage, 
        dollar_usage7_nbr_usage     = :pte_offus_velocity.dollar_usage7_nbr_usage, 
        dollar_usage7_amt_usage     = :pte_offus_velocity.dollar_usage7_amt_usage, 
        dollar_usage8_nbr_usage     = :pte_offus_velocity.dollar_usage8_nbr_usage,  
        dollar_usage8_amt_usage     = :pte_offus_velocity.dollar_usage8_amt_usage,
        dollar_usage9_nbr_usage     = :pte_offus_velocity.dollar_usage9_nbr_usage,
        dollar_usage9_amt_usage     = :pte_offus_velocity.dollar_usage9_amt_usage, 
        dollar_usage10_nbr_usage    = :pte_offus_velocity.dollar_usage10_nbr_usage,
        dollar_usage10_amt_usage    = :pte_offus_velocity.dollar_usage10_amt_usage, 
        dollar_usage11_nbr_usage    = :pte_offus_velocity.dollar_usage11_nbr_usage, 
        dollar_usage11_amt_usage    = :pte_offus_velocity.dollar_usage11_amt_usage, 
        dollar_usage12_nbr_usage    = :pte_offus_velocity.dollar_usage12_nbr_usage,
        dollar_usage12_amt_usage    = :pte_offus_velocity.dollar_usage12_amt_usage, 
        dollar_usage13_nbr_usage    = :pte_offus_velocity.dollar_usage13_nbr_usage, 
        dollar_usage13_amt_usage    = :pte_offus_velocity.dollar_usage13_amt_usage, 
        dollar_usage14_nbr_usage    = :pte_offus_velocity.dollar_usage14_nbr_usage, 
        dollar_usage14_amt_usage    = :pte_offus_velocity.dollar_usage14_amt_usage, 

        failed_pin_attempts         = :pte_offus_velocity.failed_pin_attempts,
        date_added                  = :pte_offus_velocity.date_added,
        last_maint                  = :pte_offus_velocity.last_maint,
        status                      = :pte_offus_velocity.status,
        mcc1_code                   = :pte_offus_velocity.mcc1_code,
        mcc1_usage                  = :pte_offus_velocity.mcc1_usage,
        mcc2_code                   = :pte_offus_velocity.mcc2_code,
        mcc2_usage                  = :pte_offus_velocity.mcc2_usage,
        mcc3_code                   = :pte_offus_velocity.mcc3_code,
        mcc3_usage                  = :pte_offus_velocity.mcc3_usage,
        mcc4_code                   = :pte_offus_velocity.mcc4_code,
        mcc4_usage                  = :pte_offus_velocity.mcc4_usage,
        mcc5_code                   = :pte_offus_velocity.mcc5_code,
        mcc5_usage                  = :pte_offus_velocity.mcc5_usage,
        mcc6_code                   = :pte_offus_velocity.mcc6_code,
        mcc6_usage                  = :pte_offus_velocity.mcc6_usage,
        mcc7_code                   = :pte_offus_velocity.mcc7_code,
        mcc7_usage                  = :pte_offus_velocity.mcc7_usage,
        mcc8_code                   = :pte_offus_velocity.mcc8_code,
        mcc8_usage                  = :pte_offus_velocity.mcc8_usage,
        mcc9_code                   = :pte_offus_velocity.mcc9_code,
        mcc9_usage                  = :pte_offus_velocity.mcc9_usage,
        mcc10_code                  = :pte_offus_velocity.mcc10_code,
        mcc10_usage                 = :pte_offus_velocity.mcc10_usage,
        mcc11_code                  = :pte_offus_velocity.mcc11_code,
        mcc11_usage                 = :pte_offus_velocity.mcc11_usage,
        mcc12_code                  = :pte_offus_velocity.mcc12_code,
        mcc12_usage                 = :pte_offus_velocity.mcc12_usage,
        mcc13_code                  = :pte_offus_velocity.mcc13_code,
        mcc13_usage                 = :pte_offus_velocity.mcc13_usage,
        mcc14_code                  = :pte_offus_velocity.mcc14_code,
        mcc14_usage                 = :pte_offus_velocity.mcc14_usage,
        mcc15_code                  = :pte_offus_velocity.mcc15_code,
        mcc15_usage                 = :pte_offus_velocity.mcc15_usage,
        mcc16_code                  = :pte_offus_velocity.mcc16_code,
        mcc16_usage                 = :pte_offus_velocity.mcc16_usage,
        mcc17_code                  = :pte_offus_velocity.mcc17_code,
        mcc17_usage                 = :pte_offus_velocity.mcc17_usage,
        mcc18_code                  = :pte_offus_velocity.mcc18_code,
        mcc18_usage                 = :pte_offus_velocity.mcc18_usage,
        mcc19_code                  = :pte_offus_velocity.mcc19_code,
        mcc19_usage                 = :pte_offus_velocity.mcc19_usage,
        mcc20_code                  = :pte_offus_velocity.mcc20_code,
        mcc20_usage                 = :pte_offus_velocity.mcc20_usage,

        repeat1_merchant_id         = :pte_offus_velocity.repeat1_merchant_id,
        repeat1_nbr_uses            = :pte_offus_velocity.repeat1_nbr_uses,
        repeat2_merchant_id         = :pte_offus_velocity.repeat2_merchant_id,
        repeat2_nbr_uses            = :pte_offus_velocity.repeat2_nbr_uses,
        repeat3_merchant_id         = :pte_offus_velocity.repeat3_merchant_id,
        repeat3_nbr_uses            = :pte_offus_velocity.repeat3_nbr_uses,
        repeat4_merchant_id         = :pte_offus_velocity.repeat4_merchant_id,
        repeat4_nbr_uses            = :pte_offus_velocity.repeat4_nbr_uses,
        repeat5_merchant_id         = :pte_offus_velocity.repeat5_merchant_id,
        repeat5_nbr_uses            = :pte_offus_velocity.repeat5_nbr_uses,
        repeat6_merchant_id         = :pte_offus_velocity.repeat6_merchant_id,
        repeat6_nbr_uses            = :pte_offus_velocity.repeat6_nbr_uses,
        repeat7_merchant_id         = :pte_offus_velocity.repeat7_merchant_id,
        repeat7_nbr_uses            = :pte_offus_velocity.repeat7_nbr_uses,
        repeat8_merchant_id         = :pte_offus_velocity.repeat8_merchant_id,
        repeat8_nbr_uses            = :pte_offus_velocity.repeat8_nbr_uses,
        repeat9_merchant_id         = :pte_offus_velocity.repeat9_merchant_id,
        repeat9_nbr_uses            = :pte_offus_velocity.repeat9_nbr_uses,
        repeat10_merchant_id        = :pte_offus_velocity.repeat10_merchant_id,
        repeat10_nbr_uses           = :pte_offus_velocity.repeat10_nbr_uses,
        repeat11_merchant_id        = :pte_offus_velocity.repeat11_merchant_id,
        repeat11_nbr_uses           = :pte_offus_velocity.repeat11_nbr_uses,
        repeat12_merchant_id        = :pte_offus_velocity.repeat12_merchant_id,
        repeat12_nbr_uses           = :pte_offus_velocity.repeat12_nbr_uses,
        repeat13_merchant_id        = :pte_offus_velocity.repeat13_merchant_id,
        repeat13_nbr_uses           = :pte_offus_velocity.repeat13_nbr_uses,
        repeat14_merchant_id        = :pte_offus_velocity.repeat14_merchant_id,
        repeat14_nbr_uses           = :pte_offus_velocity.repeat14_nbr_uses,
        repeat15_merchant_id        = :pte_offus_velocity.repeat15_merchant_id,
        repeat15_nbr_uses           = :pte_offus_velocity.repeat15_nbr_uses,
        repeat16_merchant_id        = :pte_offus_velocity.repeat16_merchant_id,
        repeat16_nbr_uses           = :pte_offus_velocity.repeat16_nbr_uses,
        repeat17_merchant_id        = :pte_offus_velocity.repeat17_merchant_id,
        repeat17_nbr_uses           = :pte_offus_velocity.repeat17_nbr_uses,
        repeat18_merchant_id        = :pte_offus_velocity.repeat18_merchant_id,
        repeat18_nbr_uses           = :pte_offus_velocity.repeat18_nbr_uses,
        repeat19_merchant_id        = :pte_offus_velocity.repeat19_merchant_id,
        repeat19_nbr_uses           = :pte_offus_velocity.repeat19_nbr_uses,
        repeat20_merchant_id        = :pte_offus_velocity.repeat20_merchant_id,
        repeat20_nbr_uses           = :pte_offus_velocity.repeat20_nbr_uses
                  
   WHERE card_type = :pte_offus_velocity.card_type AND card_nbr = :pte_offus_velocity.card_nbr;
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : OFFUS_VELOCITY ,Fun_Name : db_update_offus_velocity_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }    
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_offus_velocity ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}





/*************************************************************************************/

/*************************************************************************************/
BYTE db_update_mct01( pMCT01 mct01_ptr, pCHAR ErrorMsg )
{
   mct01_to_db( mct01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_mct01
      FROM   MCT01
      WHERE  merchant_id     = :pte_mct01.merchant_id      AND  
      		 organization_id = :pte_mct01.organization_id  AND  
      		 card_type       = :pte_mct01.card_type        AND
      		 rownum          = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCT01 ,Fun_Name : db_update_mct01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_mct01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE mct01 
   SET card_type                    = :pte_mct01.card_type,
       merchant_id                  = :pte_mct01.merchant_id,                              
       organization_id              = :pte_mct01.organization_id,                              
       acquirer_id                  = :pte_mct01.acquirer_id,                              
       corporate_id                 = :pte_mct01.corporate_id,                              
       settlement_id                = :pte_mct01.settlement_id,           
       floor_limit                  = :pte_mct01.floor_limit           
                  
   WHERE merchant_id = :pte_mct01.merchant_id AND organization_id = :pte_mct01.organization_id AND card_type = :pte_mct01.card_type;
    if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCT01 ,Fun_Name : db_update_mct01_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }   
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_mct01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/

/*************************************************************************************/
BYTE db_update_bin01( pBIN01 bin01_ptr, pCHAR ErrorMsg )
{
   bin01_to_db( bin01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bin01
      FROM   BIN01
      WHERE  length = :pte_bin01.length   AND  
      		 low    = :pte_bin01.low      AND  
      		 type   = :pte_bin01.type     AND
      		 rownum = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BIN01 ,Fun_Name : db_update_bin01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_bin01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE bin01 
   SET length                       = :pte_bin01.length,
       low                          = :pte_bin01.low,   
       type                         = :pte_bin01.type,   
       high                         = :pte_bin01.high,   
       pan_length                   = :pte_bin01.pan_length,   
       auth_ind                     = :pte_bin01.auth_ind,   
       caf_profile_id               = :pte_bin01.caf_profile_id,   
       destination_name             = :pte_bin01.destination_name, 
       alt_destination_name         = :pte_bin01.alt_destination_name,
       credit_subtype               = :pte_bin01.credit_subtype, 
       description                  = :pte_bin01.description,   
       card_type                    = :pte_bin01.card_type,
       settle_file_prefix           = :pte_bin01.settle_file_prefix, 
	   card_family                  = :pte_bin01.card_family,          
	   acquirer_id1                  = :pte_bin01.acquirer_id1 ,         
	   acquirer_id2                  = :pte_bin01.acquirer_id2 ,         
	   acquirer_id3                  = :pte_bin01.acquirer_id3 ,         
	   acquirer_id4                  = :pte_bin01.acquirer_id4 ,         
	   acquirer_id5                  = :pte_bin01.acquirer_id5 ,         
	   acquirer_id6                  = :pte_bin01.acquirer_id6 ,         
	   acquirer_id7                  = :pte_bin01.acquirer_id7 ,         
	   acquirer_id8                  = :pte_bin01.acquirer_id8 ,         
	   acquirer_id9                  = :pte_bin01.acquirer_id9 ,         
	   acquirer_id10                  = :pte_bin01.acquirer_id10 ,         
	   acquirer_id11                  = :pte_bin01.acquirer_id11 ,         
	   acquirer_id12                  = :pte_bin01.acquirer_id12 ,         
	   acquirer_id13                  = :pte_bin01.acquirer_id13 ,         
	   acquirer_id14                  = :pte_bin01.acquirer_id14 ,         
	   acquirer_id15                  = :pte_bin01.acquirer_id15 ,         
	   acquirer_id16                  = :pte_bin01.acquirer_id16 ,         
	   acquirer_id17                  = :pte_bin01.acquirer_id17 ,         
	   acquirer_id18                  = :pte_bin01.acquirer_id18 ,         
	   acquirer_id19                  = :pte_bin01.acquirer_id19 ,         
	   acquirer_id20                  = :pte_bin01.acquirer_id20 ,	   
	   
	   mcc1_low							  = :pte_bin01.mcc1_low, 
	   mcc1_high						  = :pte_bin01.mcc1_high, 
	   mcc2_low						      = :pte_bin01.mcc2_low, 
	   mcc2_high						  = :pte_bin01.mcc2_high, 
	   mcc3_low					          = :pte_bin01.mcc3_low, 
	   mcc3_high						  = :pte_bin01.mcc3_high, 
	   mcc4_low						      = :pte_bin01.mcc4_low, 
	   mcc4_high						  = :pte_bin01.mcc4_high, 
	   mcc5_low						      = :pte_bin01.mcc5_low, 
	   mcc5_high						  = :pte_bin01.mcc5_high, 
	   mcc6_low						      = :pte_bin01.mcc6_low, 
	   mcc6_high						  = :pte_bin01.mcc6_high, 
	   mcc7_low						      = :pte_bin01.mcc7_low, 
	   mcc7_high						  = :pte_bin01.mcc7_high, 
	   mcc8_low						      = :pte_bin01.mcc8_low, 
	   mcc8_high						  = :pte_bin01.mcc8_high, 
	   mcc9_low						      = :pte_bin01.mcc9_low, 
	   mcc9_high						  = :pte_bin01.mcc9_high, 
	   mcc10_low						  = :pte_bin01.mcc10_low, 
	   mcc10_high						  = :pte_bin01.mcc10_high, 

       mod_check						  = :pte_bin01.mod_check            

   WHERE length = :pte_bin01.length AND low = :pte_bin01.low AND type = :pte_bin01.type;

    if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BIN01 ,Fun_Name : db_update_bin01_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }   

   if ( SQLCODE != 0 )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_bin01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;

}



/*************************************************************************************/

/*************************************************************************************/

BYTE db_update_ctf01( pCTF01 ctf01_ptr, pCHAR ErrorMsg )
{
   ctf01_to_db( ctf01_ptr );


   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_ctf01
      FROM   CTF01
      WHERE  card_type = :pte_ctf01.card_type AND
             rownum    = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CTF01 ,Fun_Name : db_update_ctf01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */
      memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_ctf01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE ctf01 
   SET card_type                    = :pte_ctf01.card_type,                              
       description                  = :pte_ctf01.description           
                  
   WHERE card_type = :pte_ctf01.card_type;
    if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CTF01 ,Fun_Name : db_update_ctf01_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }   
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_ctf01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}

//TF Phani
BYTE db_update_caf01_emv( pCAF01_EMV caf01_emv_ptr, pCHAR ErrorMsg )
{
   caf01_emv_to_db( caf01_emv_ptr);
	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE caf01_emv
   SET  caf_profile_id               = :pte_caf01_emv.caf_profile_id ,                              
        type                         = :pte_caf01_emv.type,                 
   cc_tk1_service_code_offset        = :pte_caf01_emv.cc_tk[0].service_code_offset,           
   cc_tk1_icvc_offset                = :pte_caf01_emv.cc_tk[0].icvc_offset , 
   cc_tk1_pan_seq_nbr_offset         = :pte_caf01_emv.cc_tk[0].pan_seq_nbr_offset,
       
   cc_tk2_service_code_offset        = :pte_caf01_emv.cc_tk[1].service_code_offset,
   cc_tk2_icvc_offset                = :pte_caf01_emv.cc_tk[1].icvc_offset ,
   cc_tk2_pan_seq_nbr_offset         = :pte_caf01_emv.cc_tk[1].pan_seq_nbr_offset,

   ccless_tk1_service_code_offset    = :pte_caf01_emv.ccless_tk[0].service_code_offset,
   ccless_tk1_icvc_offset            = :pte_caf01_emv.ccless_tk[0].icvc_offset ,
   ccless_tk1_pan_seq_nbr_offset     = :pte_caf01_emv.ccless_tk[0].pan_seq_nbr_offset ,
   ccless_tk2_service_code_offset    = :pte_caf01_emv.ccless_tk[1].service_code_offset,
   ccless_tk2_icvc_offset            = :pte_caf01_emv.ccless_tk[1].icvc_offset,      
   ccless_tk2_pan_seq_nbr_offset     = :pte_caf01_emv.ccless_tk[1].pan_seq_nbr_offset,
   
   mcless_tk1_service_code_offset    = :pte_caf01_emv.mcless_tk[0].service_code_offset,
   mcless_tk1_icvc_offset            = :pte_caf01_emv.mcless_tk[0].icvc_offset,
   mcless_tk1_pan_seq_nbr_offset     = :pte_caf01_emv.mcless_tk[0].pan_seq_nbr_offset,
   mcless_tk1_atc_offset             = :pte_caf01_emv.mcless_tk[0].atc_offset,
   mcless_tk1_unpre_nbr_offset       = :pte_caf01_emv.mcless_tk[0].unpre_nbr_offset,
   mcless_tk2_service_code_offset    = :pte_caf01_emv.mcless_tk[1].service_code_offset,
   mcless_tk2_icvc_offset            = :pte_caf01_emv.mcless_tk[1].icvc_offset,
   mcless_tk2_pan_seq_nbr_offset     = :pte_caf01_emv.mcless_tk[1].pan_seq_nbr_offset,
   mcless_tk2_atc_offset             = :pte_caf01_emv.mcless_tk[1].atc_offset,
   mcless_tk2_unpre_nbr_offset       = :pte_caf01_emv.mcless_tk[1].unpre_nbr_offset,
      MC_CVC3_code                   = :pte_caf01_emv.MC_CVC3_code,
       MK_AC_code                    = :pte_caf01_emv.MK_AC_code,
      future_key1                    = :pte_caf01_emv.future_key1,
      future_key2                    = :pte_caf01_emv.future_key2,
      future_key3                    = :pte_caf01_emv.future_key3,
      future_key4                    = :pte_caf01_emv.future_key4,
      future_key5                    = :pte_caf01_emv.future_key5,
       temp1                         = :pte_caf01_emv.temp1,
       temp2                         = :pte_caf01_emv.temp2,
       temp3                         = :pte_caf01_emv.temp3,
       temp4                         = :pte_caf01_emv.temp4,             
       temp5                         = :pte_caf01_emv.temp5            
                 
       
     WHERE caf_profile_id = :pte_caf01.caf_profile_id  AND type = :pte_caf01.type;
     
    if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01_RAW ,Fun_Name : db_update_caf01_emv , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_caf01_emv ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

      return PTEMSG_OK;
}

//TF Phani

/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_caf01( pCAF01 caf01_ptr, pCHAR ErrorMsg )
{
   caf01_to_db( caf01_ptr );
   db_caf01.pin.len =100;
   memcpy(db_caf01.pin.pin_data, pte_caf01.pin, sizeof(pte_caf01.pin)); 

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_caf01
      FROM   CAF01
      WHERE  caf_profile_id = :pte_caf01.caf_profile_id   AND  
      		 type           = :pte_caf01.type             AND
      		 rownum         = 1  ORDER BY caf_profile_id ASC
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01 ,Fun_Name : db_update_caf01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_caf01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

   db_caf01.pin.len =100;
   memcpy(db_caf01.pin.pin_data, pte_caf01.pin, sizeof(pte_caf01.pin)); 

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE caf01 
   SET caf_profile_id               = :pte_caf01.caf_profile_id,
       type                         = :pte_caf01.type,
       authorization_location       = :pte_caf01.authorization_location,
       authorization_method         = :pte_caf01.authorization_method,
       destination_name             = :pte_caf01.destination_name,
       iso_nbr                      = :pte_caf01.iso_nbr,           
       iso_length                   = :pte_caf01.iso_length,           
       aba_nbr                      = :pte_caf01.aba_nbr,
       name                         = :pte_caf01.name,           
       contact                      = :pte_caf01.contact,           
       phone                        = :pte_caf01.phone,           
       date_added                   = :pte_caf01.date_added,
       last_maint                   = :pte_caf01.last_maint,           
       changed_by                   = :pte_caf01.changed_by,           
       status                       = :pte_caf01.status,           
       max_pin_retries              = :pte_caf01.max_pin_retries,           
       pin_capture_ind              = :pte_caf01.pin_capture_ind,           
       track_offset                 = :pte_caf01.track_offset,                    
       pin_offset_location          = :pte_caf01.pin_offset_location,           
       nsp_process                  = :pte_caf01.nsp_process,
	    expiration_date_check        = :pte_caf01.expiration_date_check,           
       expiration_date_location     = :pte_caf01.expiration_date_location,           
       merchant_same                = :pte_caf01.merchant_same,
       
       day_period1                  = :pte_caf01.day_period1,
       velocity1_nbr_usage_1        = :pte_caf01.velocity1_nbr_usage_1,
       velocity1_nbr_usage_2        = :pte_caf01.velocity1_nbr_usage_2,
       velocity1_amt_usage_1        = :pte_caf01.velocity1_amt_usage_1,
       velocity1_amt_usage_2        = :pte_caf01.velocity1_amt_usage_2,

       day_period2                  = :pte_caf01.day_period2,
       velocity2_nbr_usage_1        = :pte_caf01.velocity2_nbr_usage_1,
       velocity2_nbr_usage_2        = :pte_caf01.velocity2_nbr_usage_2,
       velocity2_amt_usage_1        = :pte_caf01.velocity2_amt_usage_1,
       velocity2_amt_usage_2        = :pte_caf01.velocity2_amt_usage_2,

       day_period3                  = :pte_caf01.day_period3,
       velocity3_nbr_usage_1        = :pte_caf01.velocity3_nbr_usage_1,
       velocity3_nbr_usage_2        = :pte_caf01.velocity3_nbr_usage_2,
       velocity3_amt_usage_1        = :pte_caf01.velocity3_amt_usage_1,
       velocity3_amt_usage_2        = :pte_caf01.velocity3_amt_usage_2,

      pin_verification_method      = :pte_caf01.pin_verification_method,           
       pin                          = :db_caf01.pin,

		cvkA_1  					=	:pte_caf01.cvkA_1,
		cvkB_1						=	:pte_caf01.cvkB_1,
		cvkA_2  					=	:pte_caf01.cvkA_2,
		cvkB_2						=	:pte_caf01.cvkB_2,
		cvkA_3  					=	:pte_caf01.cvkA_3,
		cvkB_3						=	:pte_caf01.cvkB_3,
		cvkA_4  					=	:pte_caf01.cvkA_4,
		cvkB_4						=	:pte_caf01.cvkB_4,
		cvkA_5  					=	:pte_caf01.cvkA_5,
		cvkB_5						=	:pte_caf01.cvkB_5,
		cvkA_6  					=	:pte_caf01.cvkA_6,
		cvkB_6						=	:pte_caf01.cvkB_6,
		cvv_processing				=	:pte_caf01.cvv_processing,
		service_code_offset_tr1		=	:pte_caf01.service_code_offset_tr1,	
		service_code_offset_tr2		=   :pte_caf01.service_code_offset_tr2,
		cvv_offset_tr1				=	:pte_caf01.cvv_offset_tr1,
		cvv_offset_tr2				=	:pte_caf01.cvv_offset_tr2,
		cvv_length					=	:pte_caf01.cvv_length,
		csck                        =   :pte_caf01.csck,
		floor_limit                 =   :pte_caf01.floor_limit,
		country_limits_flag         =   :pte_caf01.country_limits_flag

	WHERE caf_profile_id = :pte_caf01.caf_profile_id AND type = :pte_caf01.type;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01 ,Fun_Name : db_update_caf01_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_caf01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}

BYTE db_update_key3ds01( pKEY3DS01 key3ds01_ptr, pCHAR ErrorMsg )
{
   key3ds01_to_db( key3ds01_ptr );
		
	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE key3ds01 
   SET caf_profile_id               = :pte_key3ds01.caf_profile_id,
 	key3ds                     =:pte_key3ds01.key3ds
 	WHERE caf_profile_id = :pte_key3ds01.caf_profile_id;	
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01 ,Fun_Name : db_update_caf01_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_caf01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}

/******************************************************************************/
/******************************************************************************/
BYTE db_update_mcc_limits( pMCC_LIMITS mcc_limits_ptr, pCHAR ErrorMsg )
{
   mcc_limits_to_db( mcc_limits_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_mcc_limits
      FROM   mcc_limits
      WHERE  caf_profile_id = :pte_mcc_limits.caf_profile_id     AND  
      		 type           = :pte_mcc_limits.type               AND  
      		 mcc            = :pte_mcc_limits.mcc                AND
      		 rownum         = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCC_LIMITS ,Fun_Name : db_update_mcc_limits_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */     
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_mcc_limits ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE mcc_limits 
   SET caf_profile_id = :pte_mcc_limits.caf_profile_id,
       type           = :pte_mcc_limits.type,
       mcc            = :pte_mcc_limits.mcc,
       usage          = :pte_mcc_limits.usage,
       peso_amt_limit = :pte_mcc_limits.peso_amt_limit,
       usd_amt_limit  = :pte_mcc_limits.usd_amt_limit

   WHERE caf_profile_id = :pte_mcc_limits.caf_profile_id
     AND type           = :pte_mcc_limits.type
     AND mcc            = :pte_mcc_limits.mcc;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCC_LIMITS ,Fun_Name : db_update_mcc_limits_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_mcc_limits ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}


/******************************************************************************/
/******************************************************************************/
BYTE db_update_cntry_amt_limits( pCOUNTRY_AMT_LIMITS country_amt_limits_ptr, pCHAR ErrorMsg )
{
   country_amt_limits_to_db( country_amt_limits_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_country_amt_limits
      FROM   country_amt_limits
      WHERE  caf_profile_id = :pte_country_amt_limits.caf_profile_id  AND  
      		 type           = :pte_country_amt_limits.type            AND  
      		 country_code   = :pte_country_amt_limits.country_code    AND
      		 rownum         = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CNTRY_AMT_LIMITS ,Fun_Name : db_update_cntry_amt_limits_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */     
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_cntry_amt_limits ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE country_amt_limits 
   SET caf_profile_id = :pte_country_amt_limits.caf_profile_id,
       type           = :pte_country_amt_limits.type,
       country_code   = :pte_country_amt_limits.country_code,
       amount_limit   = :pte_country_amt_limits.amount_limit

   WHERE caf_profile_id = :pte_country_amt_limits.caf_profile_id
     AND type           = :pte_country_amt_limits.type
     AND country_code   = :pte_country_amt_limits.country_code;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CNTRY_AMT_LIMITS ,Fun_Name : db_update_cntry_amt_limits_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_cntry_amt_limits ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}
/*************************************************************************************/

/*************************************************************************************/

BYTE db_update_fcf02( pFCF02 fcf02_ptr, pCHAR ErrorMsg )

{

   fcf02_to_db( fcf02_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_fcf02
      FROM   FCF02
      WHERE  card_type = :pte_fcf02.card_type   AND  
      		 card_nbr  = :pte_fcf02.card_nbr    AND
      		 rownum    = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : FCF02 ,Fun_Name : db_update_fcf02_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */     
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_fcf02 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE fcf02 

   SET card_type                    = :pte_fcf02.card_type,                              
       card_nbr                     = :pte_fcf02.card_nbr,
       action_code                  = :pte_fcf02.action_code,           
       crind_autocard               = :pte_fcf02.crind_autocard,           
       odometer_required            = :pte_fcf02.odometer_required,           
       order_number_required        = :pte_fcf02.order_number_required,           
       signature_required           = :pte_fcf02.signature_required,           
       driver_flag                  = :pte_fcf02.driver_flag,           
       vehicle_id_flag              = :pte_fcf02.vehicle_id_flag,           
       fleet_id_flag                = :pte_fcf02.fleet_id_flag,           
       driver_id_flag               = :pte_fcf02.driver_id_flag,           
       registration_number          = :pte_fcf02.registration_number,           
       super                        = :pte_fcf02.super,           
       super_low_lead               = :pte_fcf02.super_low_lead,           
       gold                         = :pte_fcf02.gold,           
       autogas                      = :pte_fcf02.autogas,           
       unleaded                     = :pte_fcf02.unleaded,           
       diesel                       = :pte_fcf02.diesel,           
       oil                          = :pte_fcf02.oil,           
       service                      = :pte_fcf02.service,           
       accessories                  = :pte_fcf02.accessories,           
       tires                        = :pte_fcf02.tires,           
       batteries                    = :pte_fcf02.batteries,           
       repairs_maint                = :pte_fcf02.repairs_maint,           
       shop                         = :pte_fcf02.shop,           
       clean_and_go                 = :pte_fcf02.clean_and_go,           
       accident_and_damage          = :pte_fcf02.accident_and_damage,           
       meals                        = :pte_fcf02.meals,           
       parking                      = :pte_fcf02.parking,           
       last_odometer_reading        = :pte_fcf02.last_odometer_reading,           
       value_limits                 = :pte_fcf02.value_limits,           
       litre_limits                 = :pte_fcf02.litre_limits,           
       time_limits                  = :pte_fcf02.time_limits
                 
   WHERE card_type = :pte_fcf02.card_type AND card_nbr = :pte_fcf02.card_nbr;

    if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : FCF02 ,Fun_Name : db_update_fcf02_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }   

   if ( SQLCODE != 0 )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_fcf02 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/

/*************************************************************************************/
#ifdef HCTS2
BYTE db_update_card_account_status( pCCF02P ccf02p_ptr, pCHAR ErrorMsg )
{
	BYTE currentCardStatus[3] = {0};
	BOOLEAN ccf02p_update_flag = false, paf01_update_flag = false;
	char ccf02pTableName[] = "CCF02P";
	char paf01TableName[] = "PAF01";
	char ccf02pPrimaryKey[25] = {0};
	char primary_acct_nbr_local[20] = {0};
	char reservedStan[15] = {0};
	
    ccf02p_to_db( ccf02p_ptr );
    //retaining STAN from CCF02P.changed_by field to store in HST01.reserved
    memcpy(reservedStan, pte_ccf02p.changed_by, sizeof(reservedStan));
    memset(&db_ccf02p, 0, sizeof(db_ccf02p));
    
    //CCF02P update
    //select with no wait
    if ( db_error_statics_flag == true )
    {
       start_time = ptetime_get_time();
    }
    /* Make sure we can access the record before attempting to update it. */
    EXEC SQL
    SELECT *
    INTO  :db_ccf02p
    FROM   ccf02p
    WHERE  card_nbr  = :pte_ccf02p.card_nbr   AND  
    	   card_type = :pte_ccf02p.card_type  AND
       	   rownum    = 1
    For Update NOWAIT;
       
 	if ( db_error_statics_flag == true )
    {
 		end_time = ptetime_get_time();
 		duration = end_time - start_time;
 		if(duration >= db_error_statics_value)
 		{
 			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
 			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF02P ,Fun_Name : db_update_card_account_status , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
 			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
 		}
    }
    if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
    {
    	/* Record is inaccessible. Return with error. */      
 		memset(er_buf,0x00,sizeof(er_buf));
 		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
 		sprintf(er_buf,"In db_update_card_account_status for CCF02P ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
 		strcat(er_buf,ErrorMsg);
 		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
 		
 		ccf02p_update_flag = false;
 		return DB_rcode;  
    }
    else
    {
    	memcpy(primary_acct_nbr_local, db_ccf02p.primary_acct_nbr.arr, db_ccf02p.primary_acct_nbr.len);
    	ccf02p_update_flag = true;
		memset(&currentCardStatus, 0, sizeof(currentCardStatus));
		memcpy(currentCardStatus, db_ccf02p.status.arr, db_ccf02p.status.len);
		
		//verify the status before update
		if(verify_card_current_status(&currentCardStatus, &ccf02pTableName) == false)
		{
			ccf02p_update_flag = false;
			//return PTEMSG_UPDATE_FAILED;
		}
		else
		{
			if ( db_error_statics_flag == true )
			{
			   start_time = ptetime_get_time();
			}
			
			//Update Card Record Status
			EXEC SQL UPDATE CCF02P 
			SET status = :card_updating_status                        
			WHERE card_nbr = :pte_ccf02p.card_nbr AND card_type = :pte_ccf02p.card_type;
			
			if ( db_error_statics_flag == true )
			{
				end_time = ptetime_get_time();
				duration = end_time - start_time;
				if(duration >= db_error_statics_value)
				{
					memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
					sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF02P ,Fun_Name : db_update_card_account_status , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
					Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
				}
			}   
			if ( SQLCODE != 0 )
			{
				memset(er_buf,0x00,sizeof(er_buf));
				DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
				sprintf(er_buf,"In  db_update_card_account_status for CCF02P,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
				strcat(er_buf,ErrorMsg);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
				
				ccf02p_update_flag = false;
				//return DB_rcode;
			}
			else
			{
				//log the change history
				strcpy(ccf02pPrimaryKey, "C");
				strcat(ccf02pPrimaryKey, pte_ccf02p.card_nbr);
				populate_change_history_table(ccf02pTableName, ccf02pPrimaryKey, currentCardStatus, reservedStan);
			}
		}
    }
    
    //PAF01 update
    //select with no wait
    if ( db_error_statics_flag == true )
    {
       start_time = ptetime_get_time();
    }
    /* Make sure we can access the record before attempting to update it. */
    EXEC SQL
    SELECT *
    INTO  :db_paf01
    FROM   paf01
    WHERE  primary_acct_nbr = :primary_acct_nbr_local AND
       	   rownum    = 1
    For Update NOWAIT;
       
 	if ( db_error_statics_flag == true )
    {
 		end_time = ptetime_get_time();
 		duration = end_time - start_time;
 		if(duration >= db_error_statics_value)
 		{
 			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
 			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : PAF01 ,Fun_Name : db_update_card_account_status , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
 			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
 		}
    }
    if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
    {
    	/* Record is inaccessible. Return with error. */      
 		memset(er_buf,0x00,sizeof(er_buf));
 		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
 		sprintf(er_buf,"In db_update_card_account_status for PAF01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
 		strcat(er_buf,ErrorMsg);
 		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
 		
 		paf01_update_flag = false;
 		//return DB_rcode;    
    }
    else
    {
    	paf01_update_flag = true;
		memset(&currentCardStatus, 0, sizeof(currentCardStatus));
		memcpy(currentCardStatus, db_paf01.status.arr, db_paf01.status.len);
		
		//verify the status before update
		if(verify_card_current_status(&currentCardStatus, &paf01TableName) == false)
		{			
			paf01_update_flag = false;
			//return PTEMSG_OK;
		}
		else
		{
			//Update Primary Account Status
			if ( db_error_statics_flag == true )
			{
				start_time = ptetime_get_time();
			}
			
			//select with no wait
			EXEC SQL UPDATE PAF01 
			SET status = :card_updating_status                       
			WHERE primary_acct_nbr = :primary_acct_nbr_local;
		   
			if ( db_error_statics_flag == true )
			{
				end_time = ptetime_get_time();
				duration = end_time - start_time;
				if(duration >= db_error_statics_value)
				{
					memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
					sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : PAF01 ,Fun_Name : db_update_card_account_status , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
					Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
				}
			}   
			if ( SQLCODE != 0 )
			{
				memset(er_buf,0x00,sizeof(er_buf));
				DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
				sprintf(er_buf,"In  db_update_card_account_status for PAF01,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
				strcat(er_buf,ErrorMsg);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
				
				paf01_update_flag = false;
				//return DB_rcode;
			}
			else
			{
				//log the change history
				populate_change_history_table(paf01TableName, primary_acct_nbr_local, currentCardStatus, reservedStan);
			}
		}
    }
    
    if(ccf02p_update_flag == false && paf01_update_flag == false)
    	return PTEMSG_UPDATE_FAILED;
    
    return PTEMSG_OK;
}

BOOLEAN verify_card_current_status(char *currentCardStatus, char *tableName)
{
	int i=0;
	CHAR buffer[256] = {0};

	if(strcmp(currentCardStatus, card_updating_status) == 0)
	{
		sprintf(er_buf, "Card current status is already updated for %s, func: verify_card_current_status", tableName);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return false;
	}
	
	for(i=0; i<total_card_current_status; i++)
	{
		if(strcmp(currentCardStatus, card_current_status[i]) == 0)
		{
			sprintf(buffer, "Current Card Status [%s] is configured and updating with new status, func: verify_card_current_status", currentCardStatus);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(buffer);
			
			return true;
		}
	}
	
	sprintf(er_buf,"Current Card Status is not part of configured list, func: verify_card_current_status for %s", tableName);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);

	return false;
}

void populate_change_history_table(char *tableName, char *primaryKey, char *prevStatus, char *stan)
{
    HST01 sHistoryData = {0};
    char temp[256] = {0};

    CHAR dest_str[18] = {0};
	char strErrorMsg [200] = "";
    char strDate[9] = "";
    char strTime[7] = "";
    
    struct   timeb   time_structure;   /* Time for ftime */
    struct   tm       *current_time;    /* Current time structure */

    /* Get the current time from the operating system and convert to local time.*/
    ftime (&time_structure);
    current_time = localtime (&time_structure.time);
    current_time->tm_mon++;    /* month is 0..11; change to 1..12 */

    if (current_time->tm_year >= 70)
       current_time->tm_year += 1900;
    else
       current_time->tm_year += 2000;

    sprintf(dest_str, "%04d%02d%02d%02d%02d%02d%03d", 
    		current_time->tm_year, current_time->tm_mon, current_time->tm_mday,
    		current_time->tm_hour, current_time->tm_min, current_time->tm_sec,
			time_structure.millitm);
    strncpy(strDate, dest_str, 8);
    strncpy(strTime, dest_str+8, 6);

    memset(&sHistoryData, 0, sizeof(HST01));
    memcpy(sHistoryData.primary_key.unique_id, dest_str, 		sizeof(sHistoryData.primary_key.unique_id));
    memcpy(sHistoryData.file_name, 		  tableName, 			sizeof(sHistoryData.file_name));
    memcpy(sHistoryData.file_primary_key, primaryKey, 			sizeof(sHistoryData.file_primary_key));
    memcpy(sHistoryData.changed_by, 	  "ATP", 				sizeof(sHistoryData.changed_by));
    memcpy(sHistoryData.date_modified, 	  strDate,				sizeof(sHistoryData.date_modified));
    memcpy(sHistoryData.time_modified, 	  strTime, 				sizeof(sHistoryData.time_modified));
    memcpy(sHistoryData.field_tag, 		  "Status", 			sizeof(sHistoryData.field_tag));
    memcpy(sHistoryData.previous_data, 	  prevStatus, 			sizeof(sHistoryData.previous_data));
    memcpy(sHistoryData.current_data, 	  card_updating_status, sizeof(sHistoryData.current_data));
	memcpy(sHistoryData.reserved, 		  stan, 				sizeof(sHistoryData.reserved));
	
	db_insert_hst01( &sHistoryData, &strErrorMsg);
}
#endif
/*************************************************************************************/

/*************************************************************************************/
BYTE db_update_ccf02p( pCCF02P ccf02p_ptr, pCHAR ErrorMsg )
{
   ccf02p_to_db( ccf02p_ptr );
    /*db_ccf02p.pin.len =100;
   memcpy(db_ccf02p.pin.pin_data, pte_ccf02p.pin, sizeof(pte_ccf02p.pin)); */

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_ccf02p
      FROM   ccf02p
      WHERE  card_nbr  = :pte_ccf02p.card_nbr   AND  
      		 card_type = :pte_ccf02p.card_type  AND
      		 rownum    = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF02P ,Fun_Name : db_update_ccf02p_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_ccf02p ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE ccf02p 
   SET card_type                    = :pte_ccf02p.card_type,                              
       card_nbr                     = :pte_ccf02p.card_nbr,
       primary_acct_nbr             = :pte_ccf02p.primary_acct_nbr,
       pin_offset                   = :pte_ccf02p.pin_offset,
       caf_profile_id               = :pte_ccf02p.caf_profile_id,
       status                       = :pte_ccf02p.status,           
       date_added                   = :pte_ccf02p.date_added,           
       maint_date                   = :pte_ccf02p.maint_date,
       changed_by                   = :pte_ccf02p.changed_by,           
       card_class                   = :pte_ccf02p.card_class,           
       expire_date                  = :pte_ccf02p.expire_date,           
       effect_date                  = :pte_ccf02p.effect_date,
       percent_deposit              = :pte_ccf02p.percent_deposit,           
       percent_avail_allowed        = :pte_ccf02p.percent_avail_allowed,           
       credit_line                  = :pte_ccf02p.credit_line,           
       outstanding_auths            = :pte_ccf02p.outstanding_auths,           
       allowed                      = :pte_ccf02p.allowed, 
       country_code                 = :pte_ccf02p.country_code,          
       currency_code                = :pte_ccf02p.currency_code,
       peso_saving_acct             = :pte_ccf02p.peso_saving_acct,    
       peso_current_acct            = :pte_ccf02p.peso_current_acct,  
       dollar_saving_acct           = :pte_ccf02p.dollar_saving_acct, 
       dollar_current_acct          = :pte_ccf02p.dollar_current_acct,
       product_codes                = :pte_ccf02p.product_codes,    
       cash_bonus_eligible          = :pte_ccf02p.cash_bonus_eligible,
       visa_purchase_card           = :pte_ccf02p.visa_purchase_card,    
       related_acct_type_1          = :pte_ccf02p.related_acct_type_1,           
       related_acct_nbr_1           = :pte_ccf02p.related_acct_nbr_1,           
       related_acct_type_2          = :pte_ccf02p.related_acct_type_2,           
       related_acct_nbr_2           = :pte_ccf02p.related_acct_nbr_2,           
       related_acct_type_3          = :pte_ccf02p.related_acct_type_3,           
       related_acct_nbr_3           = :pte_ccf02p.related_acct_nbr_3,           
       related_acct_type_4          = :pte_ccf02p.related_acct_type_4,           
       related_acct_nbr_4           = :pte_ccf02p.related_acct_nbr_4,           
       related_acct_type_5          = :pte_ccf02p.related_acct_type_5,           
       related_acct_nbr_5           = :pte_ccf02p.related_acct_nbr_5,           
       related_acct_type_6          = :pte_ccf02p.related_acct_type_6,           
       related_acct_nbr_6           = :pte_ccf02p.related_acct_nbr_6,           
       related_acct_type_7          = :pte_ccf02p.related_acct_type_7,           
       related_acct_nbr_7           = :pte_ccf02p.related_acct_nbr_7,           
       related_acct_type_8          = :pte_ccf02p.related_acct_type_8,           
       related_acct_nbr_8           = :pte_ccf02p.related_acct_nbr_8,           
       related_acct_type_9          = :pte_ccf02p.related_acct_type_9,           
       related_acct_nbr_9           = :pte_ccf02p.related_acct_nbr_9,           
       related_acct_type_10         = :pte_ccf02p.related_acct_type_10,           
       related_acct_nbr_10          = :pte_ccf02p.related_acct_nbr_10,           
       pin_verification_override    = :pte_ccf02p.pin_verification_override,           
       pin                          = :pte_ccf02p.pin,
	   pvki                         = :pte_ccf02p.pvki,
       add_on_rate                  = :pte_ccf02p.add_on_rate,
      add_on_term                  = :pte_ccf02p.add_on_term,
      peso_tran_limit              = :pte_ccf02p.peso_tran_limit,
      dollar_tran_limit            = :pte_ccf02p.dollar_tran_limit
                  
   WHERE card_nbr = :pte_ccf02p.card_nbr AND card_type = :pte_ccf02p.card_type;
    
    if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF02P ,Fun_Name : db_update_ccf02p_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }   
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_ccf02p ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}


/*************************************************************************************/

/*************************************************************************************/
BYTE db_update_ccf04( pCCF04 ccf04_ptr, pCHAR ErrorMsg )
{
   ccf04_to_db( ccf04_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_ccf04
      FROM   ccf04
      WHERE  card_type    = :pte_ccf04.card_type    AND  
      		 card_nbr     = :pte_ccf04.card_nbr     AND  
      		 mcc_lo_range = :pte_ccf04.mcc_lo_range AND  
      		 mcc_hi_range = :pte_ccf04.mcc_hi_range AND
      		 rownum       = 1
      For Update NOWAIT;

	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF04 ,Fun_Name : db_update_ccf04_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_ccf04 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE ccf04 
   SET card_type                    = :pte_ccf04.card_type,                              
       card_nbr                     = :pte_ccf04.card_nbr,
       mcc_lo_range                 = :pte_ccf04.mcc_lo_range,           
       mcc_hi_range                 = :pte_ccf04.mcc_hi_range     

   WHERE card_type = :pte_ccf04.card_type AND card_nbr = :pte_ccf04.card_nbr AND
         mcc_lo_range = :pte_ccf04.mcc_lo_range AND
         mcc_hi_range = :pte_ccf04.mcc_hi_range;

     if ( db_error_statics_flag == true )
     {
      	end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF04 ,Fun_Name : db_update_ccf04_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   	}  

   if ( SQLCODE != 0 )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_ccf04 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }


   return PTEMSG_OK;

}


/*************************************************************************************/

/*************************************************************************************/

BYTE db_update_ccf02h( pCCF02H ccf02h_ptr, pCHAR ErrorMsg )

{
   ccf02h_to_db( ccf02h_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_ccf02h
      FROM   ccf02h
      WHERE  card_type = :pte_ccf02h.card_type   AND  
      		 card_nbr  = :pte_ccf02h.card_nbr    AND
      		 rownum    = 1
      For Update NOWAIT;
	
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF02H ,Fun_Name : db_update_ccf02h_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */   
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_ccf02h ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE ccf02h 
   SET card_type                    = :pte_ccf02h.card_type,                              
       card_nbr                     = :pte_ccf02h.card_nbr,
       caf_profile_id               = :pte_ccf02h.caf_profile_id,
       status                       = :pte_ccf02h.status,           
       date_added                   = :pte_ccf02h.date_added,           
       maint_date                   = :pte_ccf02h.maint_date,
       changed_by                   = :pte_ccf02h.changed_by                 
       WHERE card_type = :pte_ccf02h.card_type AND card_nbr = :pte_ccf02h.card_nbr;

   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF02H ,Fun_Name : db_update_ccf02h_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }    

   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_ccf02h ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }


   return PTEMSG_OK;

}          

/*************************************************************************************/
/*************************************************************************************/

BYTE db_update_atp02( pATP02 atp02_ptr, pCHAR ErrorMsg )
{
   atp02_to_db( atp02_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_atp02
      FROM   atp02
      WHERE  workstation_id = :pte_atp02.workstation_id AND
      		 rownum         = 1
      For Update NOWAIT;

	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ATP02 ,Fun_Name : db_update_atp02_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_atp02 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE atp02 
   SET workstation_id      = :pte_atp02.workstation_id,                              
       workstation_status  = :pte_atp02.workstation_status           
                    
   WHERE workstation_id = :pte_atp02.workstation_id;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ATP02 ,Fun_Name : db_update_atp02_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_select_ncf30_by_rrn_and_terminal ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}


/******************************************************************************/
/******************************************************************************/
BYTE db_update_uag01( pUAG01 uag01_ptr, pCHAR ErrorMsg )
{
   BYTE  retval = PTEMSG_OK;

   EXEC SQL BEGIN DECLARE SECTION;
      char auth_number[7];
   EXEC SQL END DECLARE SECTION;


	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT auth_id
      INTO  :auth_number
      FROM   uag01
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UAG01 ,Fun_Name : db_update_uag01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_uag01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }
   else
   {
      memset( auth_number, 0x00, sizeof(auth_number) );
      memcpy( auth_number, uag01_ptr, 6 );

	  if ( db_error_statics_flag == true )
  	 {
    	  start_time = ptetime_get_time();
   	 }
      EXEC SQL UPDATE uag01 SET auth_id = :auth_number;
      if ( db_error_statics_flag == true )
     {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UAG01 ,Fun_Name : db_update_uag01_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
	  /* Commit - TFPHANI */
	  dbcommon_commit ();

      if ( SQLCODE != 0 )
      {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_uag01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
     }
   }
   return( retval );
}


/*************************************************************************************/

/*************************************************************************************/	

BYTE db_update_atp01( pATP01 atp01_ptr, pCHAR ErrorMsg )

{

   atp01_to_db( atp01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_atp01
      FROM   atp01
      WHERE  site_name = :pte_atp01.site_name AND
      		 rownum    = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ATP01 ,Fun_Name : db_update_atp01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_atp01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE atp01 
   SET site_name           = :pte_atp01.site_name,                              
       tlf_log_date        = :pte_atp01.tlf_log_date,           
       subsystem_name_1    = :pte_atp01.subsystem_name_1,
       subsystem_name_2    = :pte_atp01.subsystem_name_2,
       subsystem_name_3    = :pte_atp01.subsystem_name_3,
       subsystem_name_4    = :pte_atp01.subsystem_name_4,
       subsystem_name_5    = :pte_atp01.subsystem_name_5,
       subsystem_name_6    = :pte_atp01.subsystem_name_6,
       subsystem_name_7    = :pte_atp01.subsystem_name_7,
       subsystem_name_8    = :pte_atp01.subsystem_name_8,
       subsystem_name_9    = :pte_atp01.subsystem_name_9,
       subsystem_name_10   = :pte_atp01.subsystem_name_10,
       subsystem_name_11   = :pte_atp01.subsystem_name_11,
       subsystem_name_12   = :pte_atp01.subsystem_name_12,
       subsystem_name_13   = :pte_atp01.subsystem_name_13,
       subsystem_name_14   = :pte_atp01.subsystem_name_14,
       subsystem_name_15   = :pte_atp01.subsystem_name_15,
       subsystem_name_16   = :pte_atp01.subsystem_name_16,
       subsystem_name_17   = :pte_atp01.subsystem_name_17,
       subsystem_name_18   = :pte_atp01.subsystem_name_18,
       subsystem_name_19   = :pte_atp01.subsystem_name_19,
       subsystem_name_20   = :pte_atp01.subsystem_name_20
                    
   WHERE site_name = :pte_atp01.site_name;

    if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ATP01 ,Fun_Name : db_update_atp01_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }   

   if ( SQLCODE != 0 )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In Fun_Name : db_update_atp01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}


/*************************************************************************************/

/*************************************************************************************/

BYTE db_update_ucf01( pUCF01 ucf01_ptr, pCHAR ErrorMsg )

{

   ucf01_to_db( ucf01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_ucf01
      FROM   UCF01
      WHERE  name   = :pte_ucf01.name AND
             rownum = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF01 ,Fun_Name : db_update_ucf01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */     
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_ucf01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE ucf01 
   SET name                = :pte_ucf01.name,                              
       password            = :pte_ucf01.password,                 
       date_added          = :pte_ucf01.date_added,           
       group_id            = :pte_ucf01.group_id, 
       subsystem_name_1    = :pte_ucf01.subsystem_name_1,
       action_1            = :pte_ucf01.action_1,
       subsystem_name_2    = :pte_ucf01.subsystem_name_2,
       action_2            = :pte_ucf01.action_2,
       subsystem_name_3    = :pte_ucf01.subsystem_name_3,
       action_3            = :pte_ucf01.action_3,
       subsystem_name_4    = :pte_ucf01.subsystem_name_4,
       action_4            = :pte_ucf01.action_4,
       subsystem_name_5    = :pte_ucf01.subsystem_name_5,
       action_5            = :pte_ucf01.action_5,
       subsystem_name_6    = :pte_ucf01.subsystem_name_6,
       action_6            = :pte_ucf01.action_6,
       subsystem_name_7    = :pte_ucf01.subsystem_name_7,
       action_7            = :pte_ucf01.action_7,
       subsystem_name_8    = :pte_ucf01.subsystem_name_8,
       action_8            = :pte_ucf01.action_8,
       subsystem_name_9    = :pte_ucf01.subsystem_name_9,
       action_9            = :pte_ucf01.action_9,
       subsystem_name_10   = :pte_ucf01.subsystem_name_10,
       action_10           = :pte_ucf01.action_10,
       subsystem_name_11   = :pte_ucf01.subsystem_name_11,
       action_11           = :pte_ucf01.action_11,
       subsystem_name_12   = :pte_ucf01.subsystem_name_12,
       action_12           = :pte_ucf01.action_12,
       subsystem_name_13   = :pte_ucf01.subsystem_name_13,
       action_13           = :pte_ucf01.action_13,
       subsystem_name_14   = :pte_ucf01.subsystem_name_14,
       action_14           = :pte_ucf01.action_14,
       subsystem_name_15   = :pte_ucf01.subsystem_name_15,
       action_15           = :pte_ucf01.action_15,
       terminals_1         = :pte_ucf01.terminals_1,             
       terminals_2         = :pte_ucf01.terminals_2,             
       terminals_3         = :pte_ucf01.terminals_3,             
       terminals_4         = :pte_ucf01.terminals_4,             
       terminals_5         = :pte_ucf01.terminals_5,             
       terminals_6         = :pte_ucf01.terminals_6,             
       terminals_7         = :pte_ucf01.terminals_7,             
       terminals_8         = :pte_ucf01.terminals_8,             
       terminals_9         = :pte_ucf01.terminals_9,             
       terminals_10        = :pte_ucf01.terminals_10,
		password_1		   = :pte_ucf01.password_1,
		password_2		   = :pte_ucf01.password_2,
		password_3		   = :pte_ucf01.password_3,
		password_4 		   = :pte_ucf01.password_4, 	
		accountstatus 	   = :pte_ucf01.accountstatus,
		password_modified_date = :pte_ucf01.password_modified_date,
  	 	user_info_1 		 = :pte_ucf01.user_info_1,
  	 	user_info_2   		= :pte_ucf01.user_info_2, 
   		user_info_3  		 = :pte_ucf01.user_info_3,
   		user_info_4  		 = :pte_ucf01.user_info_4,
  		user_info_5  		 = :pte_ucf01.user_info_5,
   		user_info_6	 		  = :pte_ucf01.user_info_6,	
   		user_info_7   		 = :pte_ucf01.user_info_7, 
   		ekey		   		= :pte_ucf01.ekey,	 
   		dekey  				 = :pte_ucf01.dekey,
       subsystem_name_16    = :pte_ucf01.subsystem_name_16,
       action_16            = :pte_ucf01.action_16,
       subsystem_name_17    = :pte_ucf01.subsystem_name_17,
       action_17            = :pte_ucf01.action_17,
       subsystem_name_18    = :pte_ucf01.subsystem_name_18,
       action_18            = :pte_ucf01.action_18,
       subsystem_name_19    = :pte_ucf01.subsystem_name_19,
       action_19            = :pte_ucf01.action_19,
       subsystem_name_20   = :pte_ucf01.subsystem_name_20,
       action_20           = :pte_ucf01.action_20,
       buffer              = :pte_ucf01.buffer,     
       Login_WorkStationId = :pte_ucf01.Login_WorkStationId,       
       Login_Status        = :pte_ucf01.Login_Status,       
       User_Status         = :pte_ucf01.User_Status,       
       Days_Inactive       = :pte_ucf01.Days_Inactive,       
       Login_Date          = :pte_ucf01.Login_Date,       
       User_Expiry_Date    = :pte_ucf01.User_Expiry_Date,     
       Date_Of_Deactivation = :pte_ucf01.Date_Of_Deactivation,       
       	password_5		   = :pte_ucf01.password_5,
		password_6		   = :pte_ucf01.password_6,
		password_7		   = :pte_ucf01.password_7,
		password_8 		   = :pte_ucf01.password_8, 
		password_9		   = :pte_ucf01.password_9,
		password_10		   = :pte_ucf01.password_10,		
	  Logout_Date          =:pte_ucf01.Logout_Date

   WHERE name = :pte_ucf01.name;

    if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF01 ,Fun_Name : db_update_ucf01_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }   

   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_ucf01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}


/*************************************************************************************/
/*Added UCF03 Table for PCI Changes by TF-Srikanth */
/*************************************************************************************/
/*
BYTE db_update_ucf03( pUCF03 ucf03_ptr, pCHAR ErrorMsg )

{

   ucf03_to_db( ucf03_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   // Make sure we can access the record before attempting to update it. 
   EXEC SQL
      SELECT *
      INTO  :db_ucf03
      FROM   UCF03
      WHERE  name   = :pte_ucf03.name AND
      	     rownum = 1
      For Update NOWAIT;

	if ( db_error_statics_flag == true )
     {
      	end_time = ptetime_get_time();
       	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF03 ,Fun_Name : db_update_ucf03_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
    }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
       // Record is inaccessible. Return with error.    
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_ucf03 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE ucf03 
   SET name						= :pte_ucf03.name,                              
		password_1				= :pte_ucf03.password_1,                 
		password_2				= :pte_ucf03.password_2,           
		password_3				= :pte_ucf03.password_3,     
		password_4				= :pte_ucf03.password_4,     
		accountstatus           = :pte_ucf03.accountstatus,
		password_modified_date  = :pte_ucf03.password_modified_date,
		user_info_1				= :pte_ucf03.user_info_1,
		user_info_2				= :pte_ucf03.user_info_2,
		user_info_3				= :pte_ucf03.user_info_3,
		user_info_4				= :pte_ucf03.user_info_4,
 		ekey					= :pte_ucf03.ekey,
		dekey					= :pte_ucf03.dekey                     
   WHERE name = :pte_ucf03.name;

   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF03 ,Fun_Name : db_update_ucf03_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }    

   if ( SQLCODE != 0 )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_ucf03 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;

}

*/
/*************************************************************************************/

/*************************************************************************************/

BYTE db_update_ucf02( pUCF02 ucf02_ptr, pCHAR ErrorMsg )

{

   ucf02_to_db( ucf02_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_ucf02
      FROM   UCF02
      WHERE  group_id = :pte_ucf02.group_id AND
             rownum   = 1
      For Update NOWAIT;
	
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF02 ,Fun_Name : db_update_ucf02_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_ucf02 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE ucf02 
   SET group_id            = :pte_ucf02.group_id,                             
       date_added          = :pte_ucf02.date_added,           
       subsystem_name_1    = :pte_ucf02.subsystem_name_1,
       action_1            = :pte_ucf02.action_1,
       subsystem_name_2    = :pte_ucf02.subsystem_name_2,
       action_2            = :pte_ucf02.action_2,
       subsystem_name_3    = :pte_ucf02.subsystem_name_3,
       action_3            = :pte_ucf02.action_3,
       subsystem_name_4    = :pte_ucf02.subsystem_name_4,
       action_4            = :pte_ucf02.action_4,
       subsystem_name_5    = :pte_ucf02.subsystem_name_5,
       action_5            = :pte_ucf02.action_5,
       subsystem_name_6    = :pte_ucf02.subsystem_name_6,
       action_6            = :pte_ucf02.action_6,
       subsystem_name_7    = :pte_ucf02.subsystem_name_7,
       action_7            = :pte_ucf02.action_7,
       subsystem_name_8    = :pte_ucf02.subsystem_name_8,
       action_8            = :pte_ucf02.action_8,
       subsystem_name_9    = :pte_ucf02.subsystem_name_9,
       action_9            = :pte_ucf02.action_9,
       subsystem_name_10   = :pte_ucf02.subsystem_name_10,
       action_10           = :pte_ucf02.action_10,
       subsystem_name_11   = :pte_ucf02.subsystem_name_11,
       action_11           = :pte_ucf02.action_11,
       subsystem_name_12   = :pte_ucf02.subsystem_name_12,
       action_12           = :pte_ucf02.action_12,
       subsystem_name_13   = :pte_ucf02.subsystem_name_13,
       action_13           = :pte_ucf02.action_13,
       subsystem_name_14   = :pte_ucf02.subsystem_name_14,
       action_14           = :pte_ucf02.action_14,
       subsystem_name_15   = :pte_ucf02.subsystem_name_15,
       action_15           = :pte_ucf02.action_15,
       terminals_1         = :pte_ucf02.terminals_1,             
       terminals_2         = :pte_ucf02.terminals_2,             
       terminals_3         = :pte_ucf02.terminals_3,
       terminals_4         = :pte_ucf02.terminals_4,             
       terminals_5         = :pte_ucf02.terminals_5,             
       terminals_6         = :pte_ucf02.terminals_6,             
       terminals_7         = :pte_ucf02.terminals_7,             
       terminals_8         = :pte_ucf02.terminals_8,             
       terminals_9         = :pte_ucf02.terminals_9,             
       terminals_10        = :pte_ucf02.terminals_10,
		subsystem_name_16    = :pte_ucf02.subsystem_name_16,
	    action_16            = :pte_ucf02.action_16,
		subsystem_name_17    = :pte_ucf02.subsystem_name_17,
		action_17            = :pte_ucf02.action_17,
		subsystem_name_18    = :pte_ucf02.subsystem_name_18,
		action_18            = :pte_ucf02.action_18,
		subsystem_name_19    = :pte_ucf02.subsystem_name_19,
		action_19            = :pte_ucf02.action_19,
		subsystem_name_20   = :pte_ucf02.subsystem_name_20,
		action_20           = :pte_ucf02.action_20,
		buffer		    = :pte_ucf02.buffer
   WHERE group_id = :pte_ucf02.group_id;
	
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF02 ,Fun_Name : db_update_ucf02_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_ucf02 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   /**********************************************************************************/
   /* UPDATE SUB_SYSTEM and ACTION of UCF01 for users associated with the same group */


   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL UPDATE ucf01 
   SET subsystem_name_1    = :pte_ucf02.subsystem_name_1,
       action_1            = :pte_ucf02.action_1,
       subsystem_name_2    = :pte_ucf02.subsystem_name_2,
       action_2            = :pte_ucf02.action_2,
       subsystem_name_3    = :pte_ucf02.subsystem_name_3,
       action_3            = :pte_ucf02.action_3,
       subsystem_name_4    = :pte_ucf02.subsystem_name_4,
       action_4            = :pte_ucf02.action_4,
       subsystem_name_5    = :pte_ucf02.subsystem_name_5,
       action_5            = :pte_ucf02.action_5,
      subsystem_name_6    = :pte_ucf02.subsystem_name_6,
       action_6            = :pte_ucf02.action_6,
       subsystem_name_7    = :pte_ucf02.subsystem_name_7,
       action_7            = :pte_ucf02.action_7,
       subsystem_name_8    = :pte_ucf02.subsystem_name_8,
       action_8            = :pte_ucf02.action_8,
       subsystem_name_9    = :pte_ucf02.subsystem_name_9,
       action_9            = :pte_ucf02.action_9,
       subsystem_name_10   = :pte_ucf02.subsystem_name_10,
       action_10           = :pte_ucf02.action_10,
       subsystem_name_11   = :pte_ucf02.subsystem_name_11,
       action_11           = :pte_ucf02.action_11,
       subsystem_name_13   = :pte_ucf02.subsystem_name_13,
       action_13           = :pte_ucf02.action_13,
       subsystem_name_14   = :pte_ucf02.subsystem_name_14,
       action_14           = :pte_ucf02.action_14,
       subsystem_name_15   = :pte_ucf02.subsystem_name_15,
       action_15           = :pte_ucf02.action_15,
       subsystem_name_16    = :pte_ucf02.subsystem_name_16,
       action_16            = :pte_ucf02.action_16,
       subsystem_name_17    = :pte_ucf02.subsystem_name_17,
       action_17            = :pte_ucf02.action_17,
       subsystem_name_18    = :pte_ucf02.subsystem_name_18,
       action_18            = :pte_ucf02.action_18,
       subsystem_name_19    = :pte_ucf02.subsystem_name_19,
       action_19            = :pte_ucf02.action_19,
       subsystem_name_20   = :pte_ucf02.subsystem_name_20,
       action_20           = :pte_ucf02.action_20,
       buffer		   = :pte_ucf02.buffer
   WHERE group_id = :pte_ucf02.group_id;

	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF02 ,Fun_Name : db_update_ucf02_U2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
   		/*printf("\nError in updating ucf01\n");*/
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_ucf02 ,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }
   return PTEMSG_OK;
}

/*************************************************************************************/
BYTE db_delete_hst01_by_date( pCHAR Date_yyyymmdd, pCHAR ErrorMsg)
{
   EXEC SQL BEGIN DECLARE SECTION;
   char  yyyymmdd[9];
   EXEC SQL END DECLARE SECTION;
   
   strncpy(yyyymmdd, Date_yyyymmdd,sizeof(yyyymmdd));
   yyyymmdd[8] = '\0';

    if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM hst01
   WHERE date_modified < :yyyymmdd;
   
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : HST01 ,Fun_Name : db_delete_hst01_by_date , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND))
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_hst01_by_date ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/

/*************************************************************************************/

BYTE  db_delete_ccf10_by_date(  pCHAR Date_yyyymmdd, pCHAR ErrorMsg )

{

   EXEC SQL BEGIN DECLARE SECTION;
   char  yyyymmdd[9];
   EXEC SQL END DECLARE SECTION;
   
   strncpy(yyyymmdd, Date_yyyymmdd,sizeof(yyyymmdd));
   yyyymmdd[8] = '\0';


   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM ccf10

   WHERE tran_date <= :yyyymmdd;

	if ( db_error_statics_flag == true )
    {
     	end_time = ptetime_get_time();

      	duration = end_time - start_time;

      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF10 ,Fun_Name : db_delete_ccf10_by_date , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 	}
    }

   if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND) )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_ccf10_by_date ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }
   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_clf01( pCLF01 clf01_ptr, pCHAR ErrorMsg)
{
   clf01_to_db( clf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM clf01
   WHERE year = :pte_clf01.year AND month = :pte_clf01.month;
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CLF01 ,Fun_Name : db_delete_clf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_clf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}




/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_jbf01( pJBF01 jbf01_ptr, pCHAR ErrorMsg)
{
   jbf01_to_db( jbf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM jbf01
   WHERE job_id = :pte_jbf01.job_id;
	if ( db_error_statics_flag == true )
     {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : JBF01 ,Fun_Name : db_delete_jbf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_jbf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}





/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_apf01( pAPF01 apf01_ptr, pCHAR ErrorMsg)
{
   apf01_to_db( apf01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM apf01
   WHERE app_name = :pte_apf01.app_name;
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : APF01 ,Fun_Name : db_delete_apf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_apf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_faf01( pFAF01 faf01_ptr, pCHAR ErrorMsg)
{
   faf01_to_db( faf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_faf01
      FROM   FAF01
      WHERE  caf_profile_id = :pte_faf01.caf_profile_id AND
      		 rownum         = 1
      For Update NOWAIT;
	
	if ( db_error_statics_flag == true )
    {
      	end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : FAF01 ,Fun_Name : db_delete_faf01_D1 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */     
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_faf01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM faf01
   WHERE caf_profile_id = :pte_faf01.caf_profile_id;
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : FAF01 ,Fun_Name : db_delete_faf01_D2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_faf01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}





/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_ccf10( pCCF10 ccf10_ptr, pCHAR ErrorMsg)
{
   ccf10_to_db( ccf10_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_ccf10
      FROM   CCF10
      WHERE  retrieval_ref_num = :pte_ccf10.retrieval_ref_num   AND  
      		 card_nbr          = :pte_ccf10.card_nbr            AND
      		 rownum            = 1
      For Update NOWAIT;

	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF10 ,Fun_Name : db_delete_ccf10_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_ccf10 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM ccf10
   WHERE retrieval_ref_num = :pte_ccf10.retrieval_ref_num AND card_nbr = :pte_ccf10.card_nbr;

	if ( db_error_statics_flag == true )
     {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF10 ,Fun_Name : db_delete_ccf10_D , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_ccf10 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}




/******************************************************************************/
/******************************************************************************/
BYTE db_delete_bon01( pBON01 bon01_ptr, pCHAR ErrorMsg)
{
   bon01_to_db( bon01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_bon01
      FROM   BON01
      For Update NOWAIT;

	if ( db_error_statics_flag == true )
     {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BON01 ,Fun_Name : db_delete_bon01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
     	memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_bon01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM bon01;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BON01 ,Fun_Name : db_delete_bon01_D , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_bon01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }
   return PTEMSG_OK;
}

/******************************************************************************/
/* TF Phani*/
BYTE update_dec_key(pCHAR enc_key,pCHAR ErrorMsg)
{

	EXEC SQL BEGIN DECLARE SECTION;	
	char    *dynstmt1,*dynstmt2,*dynstmt3,*dynstmt4,*dynstmt5,*dynstmt6;
	char  	stmt_key[9000]="",temp_key_string[200]="",Enc_Dec_key[ENC_DEC_KEY_SIZE]="";	
	EXEC SQL END DECLARE SECTION;
	
		memcpy(Enc_Dec_key,enc_key,sizeof(Enc_Dec_key));
/*    strcpy(stmt_key.arr, "INSERT INTO TLF01 (transaction_id,card_num) values ('1234567','4177777777777774');commit;");
    stmt_key.len = strlen(stmt_key.arr);*/
 
	 dynstmt1 = "CREATE OR REPLACE FUNCTION udf_DecryptData(encryptedString IN varchar2)  RETURN varchar2 ";
	 dynstmt2 = "IS    decryptedString varchar2(24);  unpaddedString varchar2(19) := NULL; ";
	 
	 sprintf(temp_key_string,"keyString varchar2(24) := \'%s\';",Enc_Dec_key ); 
	 dynstmt3 = "BEGIN  IF encryptedString IS NULL THEN  RETURN NULL;END IF;IF LENGTH(encryptedString) <> 48 THEN  RETURN(encryptedString); END IF;";
	 dynstmt4 = "dbms_obfuscation_toolkit.DES3Decrypt( input_string => UTL_RAW.CAST_TO_VARCHAR2(hextoraw(encryptedString)),"; 
	 dynstmt5 = "key_string => keyString, decrypted_string => decryptedString,which => 1);";
	 dynstmt6 = "unpaddedString := trim( TRAILING \'?\' FROM decryptedString ); RETURN(unpaddedString);  END;";

	strcat(stmt_key,dynstmt1);
	strcat(stmt_key,dynstmt2);
	strcat(stmt_key,temp_key_string);
	strcat(stmt_key,dynstmt3);
	strcat(stmt_key,dynstmt4);
	strcat(stmt_key,dynstmt5);
	strcat(stmt_key,dynstmt6);

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
 	EXEC SQL EXECUTE IMMEDIATE :stmt_key;
 	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : DEC_KEY ,Fun_Name : update_dec_key , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  update_dec_key ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;



}/* END*/

/*************************************************************************************/
BYTE update_enc_key(pCHAR enc_key,pCHAR ErrorMsg)
{

	EXEC SQL BEGIN DECLARE SECTION;		
	char    *dynstmt1,*dynstmt2,*dynstmt3,*dynstmt4,*dynstmt5,*dynstmt6;
	char  	stmt_key[9000]="",temp_key_string[200]="",Enc_Dec_key[ENC_DEC_KEY_SIZE]="";		
	EXEC SQL END DECLARE SECTION;

 
 	memcpy(Enc_Dec_key,enc_key,sizeof(Enc_Dec_key));
	dynstmt1 = "CREATE OR REPLACE FUNCTION udf_EncryptData(clearString IN varchar2)    RETURN varchar2  IS    encryptedString varchar2(64); ";
	sprintf(temp_key_string,"keyString varchar2(24) := \'%s\';",Enc_Dec_key ); 
	dynstmt3 = "paddedString varchar2(24);  BEGIN     IF clearString IS NULL THEN 	RETURN NULL;     END IF;";
	dynstmt4 = "IF LENGTH(clearString) > 24 THEN        RETURN(clearString);      END IF;     paddedString := rpad( clearString, 24, '?' );";
	dynstmt5 = "dbms_obfuscation_toolkit.DES3Encrypt(input_string => paddedString, key_string => keyString, encrypted_string => encryptedString, which => 1);";
	dynstmt6 =  "RETURN(rawtohex(UTL_RAW.CAST_TO_RAW(encryptedString)));  END;";

	strcat(stmt_key,dynstmt1);
	strcat(stmt_key,temp_key_string);
	strcat(stmt_key,dynstmt3);
	strcat(stmt_key,dynstmt4);
	strcat(stmt_key,dynstmt5);
	strcat(stmt_key,dynstmt6);

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
 	EXEC SQL EXECUTE IMMEDIATE :stmt_key;
	
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ENC_KEY ,Fun_Name : update_enc_key , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  update_enc_key ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }
   return PTEMSG_OK;

}/* END*/


/******************************************************************************/
BYTE db_delete_bon02( pBON02 bon02_ptr, pCHAR ErrorMsg)
{
   BYTE  retval = PTEMSG_OK;

   bon02_to_db( bon02_ptr );

   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_bon02
      FROM   BON02
      WHERE  cash_promo_id = :pte_bon02.cash_id AND
      		 rownum        = 1
      For Update NOWAIT;

	if ( db_error_statics_flag == true )
     {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BON02 ,Fun_Name : db_delete_bon02_S, Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */
    	memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_bon02 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM bon02
   WHERE cash_promo_id = :pte_bon02.cash_id;

	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : NCF30 ,Fun_Name : db_delete_bon02_D , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 ) 
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_bon02 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return( retval );
}





/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_ccf01( pCCF01 ccf01_ptr, pCHAR ErrorMsg)
{
   ccf01_to_db( ccf01_ptr );

   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_ccf01
      FROM   CCF01
      WHERE  card_nbr  = :pte_ccf01.card_nbr   AND  
      		 card_type = :pte_ccf01.card_type AND
      		 rownum    = 1
      For Update NOWAIT;

	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF01 ,Fun_Name : db_delete_ccf01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */
      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_ccf01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM ccf01
   WHERE card_nbr = :pte_ccf01.card_nbr AND card_type = :pte_ccf01.card_type;
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCCF01 ,Fun_Name : db_delete_ccf01_D , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_ccf01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/

/*************************************************************************************/
BYTE db_delete_acf01( pACF01 acf01_ptr, pCHAR ErrorMsg)
{
   acf01_to_db( acf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_acf01
      FROM   ACF01
      WHERE  account_nbr  = :pte_acf01.account_nbr  AND  
      		 account_type = :pte_acf01.account_type AND
      		 rownum       = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ACF10 ,Fun_Name : db_delete_acf01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_acf01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM acf01
   WHERE account_nbr = :pte_acf01.account_nbr AND account_type = :pte_acf01.account_type;
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ACF10 ,Fun_Name : db_delete_acf01_D , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_acf01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/

/*************************************************************************************/

BYTE db_delete_crf01( pCRF01 crf01_ptr, pCHAR ErrorMsg)
{
   crf01_to_db( crf01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_crf01
      FROM   CRF01
      WHERE  currency_code = :pte_crf01.currency_code AND
      		 rownum        = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CRF01 ,Fun_Name : db_delete_crf01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */    
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_crf01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM crf01
   WHERE currency_code = :pte_crf01.currency_code;
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CRF01 ,Fun_Name : db_delete_crf01_D , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_crf01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/

BYTE db_delete_ccl01( pCCL01 ccl01_ptr, pCHAR ErrorMsg)
{
   ccl01_to_db( ccl01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_ccl01
      FROM   CCL01
      WHERE  currency_value = :pte_ccl01.currency_value AND
      		 rownum        = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCL01 ,Fun_Name : db_delete_ccl01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */    
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_ccl01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM ccl01
   WHERE currency_value = :pte_ccl01.currency_value;
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCL01 ,Fun_Name : db_delete_ccl01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_ccl01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}

/*************************************************************************************/

BYTE db_delete_bdkkey01( pBDKKEY01 bdkkey01_ptr, pCHAR ErrorMsg)
{
   bdkkey01_to_db( bdkkey01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_bdkkey01
      FROM   BDKKEY01
      WHERE  card_brand = :pte_bdkkey01.card_brand AND
      		 rownum        = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BDKKEY01 ,Fun_Name : db_delete_bdkkey01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */    
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_bdkkey01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM bdkkey01
   WHERE card_brand = :pte_bdkkey01.card_brand;
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BDKKEY01 ,Fun_Name : db_delete_bdkkey01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_bdkkey01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}

/*************************************************************************************/

BYTE db_delete_caf01_keyblock01( pCAF01_KEYBLOCK caf01_keyblock01_ptr, pCHAR ErrorMsg)
{
   caf01_keyblock01_to_db( caf01_keyblock01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_caf01_keyblock01
      FROM   CAF01_KEYBLOCK
      WHERE  Caf_Profile_id = :pte_caf01_keyblock01.Caf_Profile_id AND
      		 Type			= :pte_caf01_keyblock01.Type AND
      		 rownum        = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01_KEYBLOCK ,Fun_Name : db_delete_caf01_keyblock01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */    
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_caf01_keyblock01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM CAF01_KEYBLOCK
   WHERE Caf_Profile_id = :pte_caf01_keyblock01.Caf_Profile_id AND
      		 Type	    = :pte_caf01_keyblock01.Type;
      		 
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01_KEYBLOCK ,Fun_Name : db_delete_caf01_keyblock01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_caf01_keyblock01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}


/*************************************************************************************/
BYTE db_delete_csf01( pCSF01 csf01_ptr, pCHAR ErrorMsg)
{
   csf01_to_db( csf01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_csf01
      FROM   CSF01
      WHERE  status = :pte_csf01.status AND
      	     rownum = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CSF01 ,Fun_Name : db_delete_csf01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */  
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_csf01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM csf01
   WHERE status = :pte_csf01.status;
	if ( db_error_statics_flag == true )
    {
      	end_time = ptetime_get_time();

      	duration = end_time - start_time;

      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CSF01 ,Fun_Name : db_delete_csf01_D , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_csf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_paf01( pPAF01 paf01_ptr, pCHAR ErrorMsg)
{
   paf01_to_db( paf01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_paf01
      FROM   PAF01
      WHERE  primary_acct_nbr = :pte_paf01.primary_acct_nbr AND
      	     rownum       	  = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : PAF01 ,Fun_Name : db_delete_paf01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */     
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_paf01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM paf01
   WHERE primary_acct_nbr = :pte_paf01.primary_acct_nbr;
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : PAF01 ,Fun_Name : db_delete_paf01_D , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_paf01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}





/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_def01( pDEF01 def01_ptr, pCHAR ErrorMsg)
{
   def01_to_db( def01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_def01
      FROM   DEF01
      WHERE  organization_id  = :pte_def01.organization_id    AND  
      		 merchant_id      = :pte_def01.merchant_id        AND  
      		 term_length      = :pte_def01.term_length        AND
      		 rownum           = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : DEF01 ,Fun_Name : db_delete_def01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_def01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM def01
   WHERE organization_id  = :pte_def01.organization_id AND
         merchant_id = :pte_def01.merchant_id AND
         term_length = :pte_def01.term_length;
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : DEF01 ,Fun_Name : db_delete_def01_D , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_def01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_ccf03p( pCCF03 ccf03p_ptr, pCHAR ErrorMsg)
{
   ccf03p_to_db( ccf03p_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_ccf03p
      FROM   ccf03p
      WHERE  card_nbr  = :pte_ccf03p.card_nbr  AND  
      		 card_type = :pte_ccf03p.card_type AND
      		 rownum    = 1
      For Update NOWAIT;
      
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : NCF30 ,CCF03P : db_delete_ccf03p_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_ccf03p ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM ccf03p
   WHERE card_nbr = :pte_ccf03p.card_nbr AND card_type = :pte_ccf03p.card_type;
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF03P ,Fun_Name : db_delete_ccf03p_D , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_ccf03p ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}

/*************************************************************************************/

/*************************************************************************************/

BYTE db_delete_offus_velocity( pOffus_velocity offus_velocity_ptr, pCHAR ErrorMsg)

{
   offus_velocity_to_db( offus_velocity_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_offus_velocity
      FROM   offus_velocity
      WHERE  card_type = :pte_offus_velocity.card_type    AND  
      		 card_nbr  = :pte_offus_velocity.card_nbr     AND
      		 rownum    = 1
      For Update NOWAIT;
      
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : OFFUS_VELOCITY ,Fun_Name : db_delete_offus_velocity_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */   
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In Fun_Name :db_delete_offus_velocity ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM offus_velocity
   WHERE card_type = :pte_offus_velocity.card_type AND card_nbr = :pte_offus_velocity.card_nbr;
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : OFFUS_VELOCITY ,Fun_Name : db_delete_offus_velocity_D , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_offus_velocity ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;

}






/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_mct01( pMCT01 mct01_ptr, pCHAR ErrorMsg)
{
   mct01_to_db( mct01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_mct01
      FROM   mct01
      WHERE  merchant_id     = :pte_mct01.merchant_id       AND  
      		 organization_id = :pte_mct01.organization_id   AND  
      		 card_type       = :pte_mct01.card_type         AND
      		 rownum          = 1
      For Update NOWAIT;
      
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCT01 ,Fun_Name : db_delete_mct01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */     
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_mct01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM mct01
   WHERE merchant_id = :pte_mct01.merchant_id AND organization_id = :pte_mct01.organization_id AND card_type = :pte_mct01.card_type;
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCT01 ,Fun_Name : db_delete_mct01_D , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_mct01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_ctf01( pCTF01 ctf01_ptr, pCHAR ErrorMsg)
{
   ctf01_to_db( ctf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_ctf01
      FROM   ctf01
      WHERE  card_type = :pte_ctf01.card_type AND
      		 rownum    = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CTF01 ,Fun_Name : db_delete_ctf01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_ctf01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM ctf01
   WHERE card_type = :pte_ctf01.card_type;
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CTF01 ,Fun_Name : db_delete_ctf01_D , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_ctf01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }
   EXEC SQL WHENEVER NOTFOUND CONTINUE ;
   EXEC SQL DELETE FROM mct01 where card_type = :pte_ctf01.card_type;

   return PTEMSG_OK;
}
// TF PHani
BYTE db_delete_caf01_emv( pCAF01_EMV caf01_emv_ptr, pCHAR ErrorMsg)
{
  caf01_emv_to_db( caf01_emv_ptr);
	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM caf01_emv
 
  WHERE caf_profile_id = :pte_caf01_emv.caf_profile_id  AND type = :pte_caf01_emv.type;
   
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01_RAW ,Fun_Name : db_delete_caf01_emv , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_caf01_emv ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

    return PTEMSG_OK;
}


//TFphani
/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_caf01( pCAF01 caf01_ptr, pCHAR ErrorMsg)
{
   caf01_to_db( caf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_caf01
      FROM   caf01
      WHERE  caf_profile_id = :pte_caf01.caf_profile_id  AND  
      		 type           = :pte_caf01.type            AND 
      		 rownum         = 1  ORDER BY caf_profile_id ASC
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01 ,Fun_Name : db_delete_caf01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */
  		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_caf01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM caf01
   WHERE caf_profile_id = :pte_caf01.caf_profile_id AND type = :pte_caf01.type;
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01 ,Fun_Name : db_delete_caf01_D , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_caf01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   if(strcmp(pte_caf01.type, "F") == 0)
   {
      EXEC SQL WHENEVER NOTFOUND CONTINUE ;
      EXEC SQL DELETE FROM faf01 where caf_profile_id = :pte_caf01.caf_profile_id;
   }

   return PTEMSG_OK;
}

BYTE db_delete_key3ds01( pKEY3DS01 key3ds01_ptr, pCHAR ErrorMsg)
{
   key3ds01_to_db( key3ds01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_key3ds01
      FROM   key3ds01
      WHERE  caf_profile_id = :pte_caf01.caf_profile_id  AND  
      		 rownum         = 1  ORDER BY caf_profile_id ASC
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01 ,Fun_Name : db_delete_caf01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */
  		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_caf01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM key3ds01
   WHERE caf_profile_id = :pte_key3ds01.caf_profile_id;
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01 ,Fun_Name : db_delete_caf01_D , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_caf01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}

BYTE db_insert_key3ds01( pKEY3DS01 key3ds01_ptr, pCHAR ErrorMsg )
{
   key3ds01_to_db( key3ds01_ptr );


	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL INSERT INTO key3ds01
     ( caf_profile_id,
     	key3ds
	)              
   VALUES(  :pte_key3ds01.caf_profile_id,
       	:pte_key3ds01.key3ds
	);
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01 ,Fun_Name : db_insert_caf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_caf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}
/******************************************************************************/
/******************************************************************************/
BYTE db_delete_mcc_limits( pMCC_LIMITS mcc_limits_ptr, pCHAR ErrorMsg)
{
   mcc_limits_to_db( mcc_limits_ptr );


   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_mcc_limits
      FROM   mcc_limits
      WHERE  caf_profile_id = :pte_mcc_limits.caf_profile_id  AND  
      		 type           = :pte_mcc_limits.type            AND  
      		 mcc            = :pte_mcc_limits.mcc             AND
      		 rownum         = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
     {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCC_LIMITS ,Fun_Name : db_delete_mcc_limits_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
    
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */    
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_mcc_limits ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM mcc_limits
   WHERE caf_profile_id = :pte_mcc_limits.caf_profile_id
     AND type           = :pte_mcc_limits.type
     AND mcc            = :pte_mcc_limits.mcc;
     
	if ( db_error_statics_flag == true )
    {
       end_time = ptetime_get_time();
       duration = end_time - start_time;
       if(duration >= db_error_statics_value)
	   {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCC_LIMITS ,Fun_Name : db_delete_mcc_limits_D , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	   }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_mcc_limits ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/
/******************************************************************************/
BYTE db_delete_cntry_amt_limits( pCOUNTRY_AMT_LIMITS country_amt_limits_ptr, pCHAR ErrorMsg)
{
   country_amt_limits_to_db( country_amt_limits_ptr );

    if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_country_amt_limits
      FROM   country_amt_limits
      WHERE  caf_profile_id = :pte_country_amt_limits.caf_profile_id   AND  
      		 type           = :pte_country_amt_limits.type             AND  
      		 country_code   = :pte_country_amt_limits.country_code     AND
      		 rownum         = 1
      For Update NOWAIT;
      
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CNTRY_AMT_LIMITS ,Fun_Name : db_delete_cntry_amt_limits_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */
      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_cntry_amt_limits ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM country_amt_limits
   WHERE caf_profile_id = :pte_country_amt_limits.caf_profile_id
     AND type           = :pte_country_amt_limits.type
     AND country_code   = :pte_country_amt_limits.country_code;
     
	if ( db_error_statics_flag == true )
    {
      	end_time = ptetime_get_time();

      	duration = end_time - start_time;

      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CNTRY_AMT_LIMITS ,Fun_Name : db_delete_cntry_amt_limits_D , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_cntry_amt_limits ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_fcf02( pFCF02 fcf02_ptr, pCHAR ErrorMsg)
{
   fcf02_to_db( fcf02_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_fcf02
      FROM   fcf02
      WHERE  card_type = :pte_fcf02.card_type   AND  
      		 card_nbr  = :pte_fcf02.card_nbr    AND
      		 rownum    = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : FCF02 ,Fun_Name : db_delete_fcf02_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_fcf02 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM fcf02
   WHERE card_type = :pte_fcf02.card_type AND card_nbr = :pte_fcf02.card_nbr;
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : FCF02 ,Fun_Name : db_delete_fcf02_D , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_fcf02 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_ccf02p( pCCF02P ccf02p_ptr, pCHAR ErrorMsg)
{
   ccf02p_to_db( ccf02p_ptr );


   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_ccf02p
      FROM   ccf02p
      WHERE  card_nbr  = :pte_ccf02p.card_nbr  AND  
      		 card_type = :pte_ccf02p.card_type AND
      		 rownum    = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
    {
      	end_time = ptetime_get_time();

      	duration = end_time - start_time;

      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF02P ,Fun_Name : db_delete_ccf02p_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 	}
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_ccf02p ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM ccf02p
   WHERE card_nbr = :pte_ccf02p.card_nbr AND card_type = :pte_ccf02p.card_type;
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF02P ,Fun_Name : db_delete_ccf02p_2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_ccf02p ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_omc01( pOMC01 omc01_ptr, pCHAR ErrorMsg)
{
   omc01_to_db( omc01_ptr );

	if( 0 == strlen(pte_omc01.card_nbr))
	{
		if ( db_error_statics_flag == true )
 	  	{
      		start_time = ptetime_get_time();
   		}
		EXEC SQL DELETE FROM omc01
		  WHERE merchant_id = :pte_omc01.merchant_id AND card_nbr IS NULL;
		  
		  if ( db_error_statics_flag == true )
     	 {
      		end_time = ptetime_get_time();

      		duration = end_time - start_time;

     		 if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : OMC01 ,Fun_Name : db_delete_omc01_D1 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
    	}
	}
	else
	{
		if ( db_error_statics_flag == true )
 	  	{
      		start_time = ptetime_get_time();
   		}
   		EXEC SQL DELETE FROM omc01
  		WHERE merchant_id = :pte_omc01.merchant_id AND card_nbr = :pte_omc01.card_nbr;
  		if ( db_error_statics_flag == true )
     	 {
      		end_time = ptetime_get_time();

      		duration = end_time - start_time;

     		 if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : OMC01 ,Fun_Name : db_delete_omc01_D2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
    	}
	}

   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   	{   
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_omc01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
	}

   return PTEMSG_OK;
}
/*************************************************************************************/

/*************************************************************************************/
BYTE db_delete_mcc01( pMCC01 mcc01_ptr, pCHAR ErrorMsg)
{
   mcc01_to_db( mcc01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM mcc01 WHERE LOW = :pte_mcc01.low AND HIGH = :pte_mcc01.high;
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCC01 ,Fun_Name : db_delete_mcc01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_mcc01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}
/*************************************************************************************/

/*************************************************************************************/

BYTE db_delete_ccf04( pCCF04 ccf04_ptr, pCHAR ErrorMsg)
{
   ccf04_to_db( ccf04_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_ccf04
      FROM   ccf04
      WHERE  card_type    = :pte_ccf04.card_type        AND  
      		 card_nbr     = :pte_ccf04.card_nbr         AND
      		 mcc_lo_range = :pte_ccf04.mcc_lo_range     AND  
      		 mcc_hi_range = :pte_ccf04.mcc_hi_range     AND
      		 rownum       = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF04 ,Fun_Name : db_delete_ccf04_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */     
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_ccf04 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM ccf04
    WHERE card_type =    :pte_ccf04.card_type AND 
          card_nbr =     :pte_ccf04.card_nbr AND
          mcc_lo_range = :pte_ccf04.mcc_lo_range AND
          mcc_hi_range = :pte_ccf04.mcc_hi_range;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF04 ,Fun_Name : db_delete_ccf04_D , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_ccf04 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}

/*************************************************************************************/
BYTE db_delete_ccf04_by_card( pCCF04 ccf04_ptr, pCHAR ErrorMsg)
{
   ccf04_to_db( ccf04_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM ccf04
   WHERE card_type =    :pte_ccf04.card_type AND 
         card_nbr =     :pte_ccf04.card_nbr;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ccf04 ,Fun_Name : db_delete_ccf04_by_card_s , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_ccf04_by_card ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_ccf02h( pCCF02H ccf02h_ptr, pCHAR ErrorMsg)
{
   ccf02h_to_db( ccf02h_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_ccf02h
      FROM   ccf02h
      WHERE  card_type = :pte_ccf02h.card_type  AND  
      		 card_nbr  = :pte_ccf02h.card_nbr   AND
      		 rownum    = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF02H ,Fun_Name : db_delete_ccf02h_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_ccf02h ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM ccf02h
   WHERE card_type = :pte_ccf02h.card_type AND card_nbr = :pte_ccf02h.card_nbr;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF02H ,Fun_Name : db_delete_ccf02h_D , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_ccf02h ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_atp02( pATP02 atp02_ptr, pCHAR ErrorMsg)
{
   atp02_to_db( atp02_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_atp02
      FROM   atp02
      WHERE  workstation_id = :pte_atp02.workstation_id AND
      	     rownum         = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ATP02 ,Fun_Name : db_delete_atp02_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
     
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_atp02 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM atp02
   WHERE workstation_id = :pte_atp02.workstation_id;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ATP02 ,Fun_Name : db_delete_atp02_D , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_atp02 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}





/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_atp01( pATP01 atp01_ptr, pCHAR ErrorMsg)
{
   atp01_to_db( atp01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_atp01
      FROM   atp01
      WHERE  site_name = :pte_atp01.site_name AND
      		 rownum    = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ATP01 ,Fun_Name : db_delete_atp01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_atp01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM atp01
   WHERE site_name = :pte_atp01.site_name;
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ATP01 ,Fun_Name : db_delete_atp01_D , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_atp01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_bin01( pBIN01 bin01_ptr, pCHAR ErrorMsg)
{
   bin01_to_db( bin01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_bin01
      FROM   bin01
      WHERE  type   = :pte_bin01.type      AND  
      		 low    = :pte_bin01.low       AND  
      		 length = :pte_bin01.length    AND
      		 rownum = 1
      For Update NOWAIT;
      
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BIN01 ,Fun_Name : db_delete_bin01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */     
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_bin01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM bin01
   WHERE type = :pte_bin01.type AND low = :pte_bin01.low AND length = :pte_bin01.length;
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BIN01 ,Fun_Name : db_delete_bin01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_bin01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_ucf01( pUCF01 ucf01_ptr, pCHAR ErrorMsg)
{
   ucf01_to_db( ucf01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_ucf01
      FROM   ucf01
      WHERE  name    = :pte_ucf01.name AND
      		 rownum  = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF01 ,Fun_Name : db_delete_ucf01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */     
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_ucf01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM ucf01
   WHERE name = :pte_ucf01.name ;
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF01 ,Fun_Name : db_delete_ucf01_D , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_ucf01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}

//Comented Ucf03 changes as it is not being used in ATPGen2
/*************************************************************************************/
/*Added UCF03 Table for PCI Changes by TF-Srikanth */
/*************************************************************************************/
/*
BYTE db_delete_ucf03( pUCF03 ucf03_ptr, pCHAR ErrorMsg)
{
   ucf03_to_db( ucf03_ptr );

   // Make sure we can access the record before attempting to delete it. 
   EXEC SQL
      SELECT *
      INTO  :db_ucf03
      FROM   ucf03
      WHERE  name    = :pte_ucf03.name AND
      		 rownum  = 1
      For Update NOWAIT;
	
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      // Record is inaccessible. Return with error. 
        memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_select_ncf30_by_rrn_and_terminal ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }


   EXEC SQL DELETE FROM ucf03
   WHERE name = :pte_ucf03.name ;

   if (( SQLCODE != 0 ))//&& ( SQLCODE != NO_DATA_FOUND)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_select_ncf30_by_rrn_and_terminal ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}
*/
/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_ucf02( pUCF02 ucf02_ptr, pCHAR ErrorMsg)
{
   ucf02_to_db( ucf02_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_ucf02
      FROM   ucf02
      WHERE  group_id = :pte_ucf02.group_id AND
      		 rownum   = 1
      For Update NOWAIT;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF02 ,Fun_Name : db_delete_ucf02_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_ucf02 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM ucf02
   WHERE group_id = :pte_ucf02.group_id ;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF02 ,Fun_Name : db_delete_ucf02_D , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_ucf02 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}


/*************************************************************************************/
BYTE db_delete_mppara01( pMPPARA01 mppara01_ptr, pCHAR ErrorMsg)
{
   mppara01_to_db( mppara01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM mppara01 WHERE product_code = :pte_mppara01.product_code;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MPPARA01 ,Fun_Name : db_delete_mppara01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_mppara01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}
/*************************************************************************************/



/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_clf01( pCLF01 clf01_ptr, pCHAR ErrorMsg )
{
   clf01_to_db( clf01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO clf01
     (   year,
         month,
         working_day_1,
         profile_id_1,
         working_day_2,
         profile_id_2,
         working_day_3,
         profile_id_3,
         working_day_4,
         profile_id_4,
         working_day_5,
         profile_id_5,
         working_day_6,
         profile_id_6,
         working_day_7,
         profile_id_7,
         working_day_8,
         profile_id_8,
         working_day_9,
         profile_id_9,
         working_day_10,
         profile_id_10,
         working_day_11,
         profile_id_11,
         working_day_12,
         profile_id_12,
         working_day_13,
         profile_id_13,
         working_day_14,
         profile_id_14,
         working_day_15,
         profile_id_15,
         working_day_16,
         profile_id_16,
         working_day_17,
         profile_id_17,
         working_day_18,
         profile_id_18,
         working_day_19,
         profile_id_19,
         working_day_20,
         profile_id_20,
         working_day_21,
         profile_id_21,
         working_day_22,
         profile_id_22,
         working_day_23,
         profile_id_23,
         working_day_24,
         profile_id_24,
         working_day_25,
         profile_id_25,
         working_day_26,
         profile_id_26,
         working_day_27,
         profile_id_27,
         working_day_28,
         profile_id_28,
         working_day_29,
         profile_id_29,
         working_day_30,
         profile_id_30,
         working_day_31,
         profile_id_31
     )               
   VALUES(  :pte_clf01.year,
         :pte_clf01.month,
         :pte_clf01.working_day_1,
         :pte_clf01.profile_id_1,
         :pte_clf01.working_day_2,
         :pte_clf01.profile_id_2,
         :pte_clf01.working_day_3,
         :pte_clf01.profile_id_3,
         :pte_clf01.working_day_4,
         :pte_clf01.profile_id_4,
         :pte_clf01.working_day_5,
         :pte_clf01.profile_id_5,
         :pte_clf01.working_day_6,
         :pte_clf01.profile_id_6,
         :pte_clf01.working_day_7,
         :pte_clf01.profile_id_7,
         :pte_clf01.working_day_8,
         :pte_clf01.profile_id_8,
         :pte_clf01.working_day_9,
         :pte_clf01.profile_id_9,
         :pte_clf01.working_day_10,
         :pte_clf01.profile_id_10,
         :pte_clf01.working_day_11,
         :pte_clf01.profile_id_11,
         :pte_clf01.working_day_12,
         :pte_clf01.profile_id_12,
         :pte_clf01.working_day_13,
         :pte_clf01.profile_id_13,
         :pte_clf01.working_day_14,
         :pte_clf01.profile_id_14,
         :pte_clf01.working_day_15,
         :pte_clf01.profile_id_15,
         :pte_clf01.working_day_16,
         :pte_clf01.profile_id_16,
         :pte_clf01.working_day_17,
         :pte_clf01.profile_id_17,
         :pte_clf01.working_day_18,
         :pte_clf01.profile_id_18,
         :pte_clf01.working_day_19,
         :pte_clf01.profile_id_19,
         :pte_clf01.working_day_20,
         :pte_clf01.profile_id_20,
         :pte_clf01.working_day_21,
         :pte_clf01.profile_id_21,
         :pte_clf01.working_day_22,
         :pte_clf01.profile_id_22,
         :pte_clf01.working_day_23,
         :pte_clf01.profile_id_23,
         :pte_clf01.working_day_24,
         :pte_clf01.profile_id_24,
         :pte_clf01.working_day_25,
         :pte_clf01.profile_id_25,
         :pte_clf01.working_day_26,
         :pte_clf01.profile_id_26,
         :pte_clf01.working_day_27,
         :pte_clf01.profile_id_27,
         :pte_clf01.working_day_28,
         :pte_clf01.profile_id_28,
         :pte_clf01.working_day_29,
         :pte_clf01.profile_id_29,
         :pte_clf01.working_day_30,
         :pte_clf01.profile_id_30,
         :pte_clf01.working_day_31,
         :pte_clf01.profile_id_31
      );
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CLF01 ,Fun_Name : db_insert_clf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_clf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_bpf01( pBPF01 bpf01_ptr, pCHAR ErrorMsg )
{
   bpf01_to_db( bpf01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO bpf01
     (   profile_id,
         job_id
     )               
   VALUES(  :pte_bpf01.profile_id,
         :pte_bpf01.job_id
      );
	
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BPF01 ,Fun_Name : db_insert_bpf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_bpf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}





/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_jbf01( pJBF01 jbf01_ptr, pCHAR ErrorMsg )
{
   jbf01_to_db( jbf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO jbf01
     (   job_id,
         time_to_run,
         status,
         last_run,
         app_name
     )               
   VALUES(  :pte_jbf01.job_id,
         :pte_jbf01.time_to_run,
         :pte_jbf01.status,
         :pte_jbf01.last_run,
         :pte_jbf01.app_name
      );
	
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : JBF01 ,Fun_Name : db_insert_jbf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_jbf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_apf01( pAPF01 apf01_ptr, pCHAR ErrorMsg )
{
   apf01_to_db( apf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO apf01
     (   app_name,
         exe_name,
         path,
         parameters
     )               
   VALUES(  :pte_apf01.app_name,
         :pte_apf01.exe_name,
         :pte_apf01.path,
         :pte_apf01.parameters
      );
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : APF01 ,Fun_Name : db_insert_apf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_apf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_faf01( pFAF01 faf01_ptr, pCHAR ErrorMsg )
{
   faf01_to_db( faf01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO faf01
     (   caf_profile_id,
         velocity1_amount,
         velocity1_from_time,
         velocity1_to_time,
         velocity2_amount,
         velocity2_from_time,
         velocity2_to_time,
         velocity3_amount,
         velocity3_from_time,
         velocity3_to_time,
         velocity4_amount,
         velocity4_from_time,
         velocity4_to_time,
         velocity5_amount,
         velocity5_from_time,
         velocity5_to_time,
         velocity6_amount,
         velocity6_from_time,
         velocity6_to_time,
         velocity7_amount,
         velocity7_from_time,
         velocity7_to_time,
         velocity8_amount,
         velocity8_from_time,
         velocity8_to_time,
         velocity9_amount,
         velocity9_from_time,
         velocity9_to_time,
         velocity10_amount,
         velocity10_from_time,
         velocity10_to_time
     )               
   VALUES(  :pte_faf01.caf_profile_id,
         :pte_faf01.velocity1_amount,
         :pte_faf01.velocity1_from_time,
         :pte_faf01.velocity1_to_time,
         :pte_faf01.velocity2_amount,
         :pte_faf01.velocity2_from_time,
         :pte_faf01.velocity2_to_time,
         :pte_faf01.velocity3_amount,
         :pte_faf01.velocity3_from_time,
         :pte_faf01.velocity3_to_time,
         :pte_faf01.velocity4_amount,
         :pte_faf01.velocity4_from_time,
         :pte_faf01.velocity4_to_time,
         :pte_faf01.velocity5_amount,
         :pte_faf01.velocity5_from_time,
         :pte_faf01.velocity5_to_time,
         :pte_faf01.velocity6_amount,
         :pte_faf01.velocity6_from_time,
         :pte_faf01.velocity6_to_time,
         :pte_faf01.velocity7_amount,
         :pte_faf01.velocity7_from_time,
         :pte_faf01.velocity7_to_time,
         :pte_faf01.velocity8_amount,
         :pte_faf01.velocity8_from_time,
         :pte_faf01.velocity8_to_time,
         :pte_faf01.velocity9_amount,
         :pte_faf01.velocity9_from_time,
         :pte_faf01.velocity9_to_time,
         :pte_faf01.velocity10_amount,
         :pte_faf01.velocity10_from_time,
         :pte_faf01.velocity10_to_time
      );
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : FAF01 ,Fun_Name : db_insert_faf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_faf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}





/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_ccf10( pCCF10 ccf10_ptr, pCHAR ErrorMsg )
{
   ccf10_to_db( ccf10_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO ccf10
     (  card_nbr,
        retrieval_ref_num,
        primary_acct_nbr,
        processing_code,
        tran_amount,
        response_code,
        auth_number,
        tran_date,
        tran_time
     )               
   VALUES(  :pte_ccf10.card_nbr,
       :pte_ccf10.retrieval_ref_num,
       :pte_ccf10.primary_acct_nbr,
       :pte_ccf10.processing_code,
       :pte_ccf10.tran_amount,
       :pte_ccf10.response_code,
       :pte_ccf10.auth_number,
       :pte_ccf10.tran_date,
       :pte_ccf10.tran_time
      );
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF10 ,Fun_Name : db_insert_ccf10 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_ccf10 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}


/******************************************************************************/
/******************************************************************************/
BYTE db_insert_bon01( pBON01 bon01_ptr, pCHAR ErrorMsg )
{
   bon01_to_db( bon01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO bon01
     (  
        minimum_amount,          
        program_start_date,      
        program_end_date,        
        transaction_threshold,   
        transaction_counter,     
        maximum_reward,          
        response_message        
     )               
   VALUES(  
       :pte_bon01.minimum_amount,        
       :pte_bon01.program_start_date,    
       :pte_bon01.program_end_date,      
       :pte_bon01.transaction_threshold, 
       :pte_bon01.transaction_counter,   
       :pte_bon01.maximum_reward,        
       :pte_bon01.response_message       
      );
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BON01 ,Fun_Name : db_insert_bon01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
    
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_bon01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}


/******************************************************************************/
/******************************************************************************/
BYTE db_insert_bon02( pBON02 bon02_ptr, pCHAR ErrorMsg )
{
   BYTE  retval = PTEMSG_OK;

   bon02_to_db( bon02_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO bon02
     (  
        cash_promo_id,
        tag_id,
        cash_promo_desc,
        program_start_date,
        program_end_date,
        tran_threshold,
        tran_counter,
        time_period,
        max_period_winners,
        period_win_counter,
        max_program_winners,
        program_win_counter,

        amount1_low,
        amount1_high,
        response1,
        win_type_radio1,
        reward_amount1,

        amount2_low,
        amount2_high,
        response2,
        win_type_radio2,
        reward_amount2,

        amount3_low,
        amount3_high,
        response3,
        win_type_radio3,
        reward_amount3,

        amount4_low,
        amount4_high,
        response4,
        win_type_radio4,
        reward_amount4,

        amount5_low,
        amount5_high,
        response5,
        win_type_radio5,
        reward_amount5,

        multi_winner_text,
        multi_winners_allowed
     )
   VALUES(
        :pte_bon02.cash_id,
        :pte_bon02.tag_id,
        :pte_bon02.cash_desc,
        :pte_bon02.program_start_date,
        :pte_bon02.program_end_date,
        :pte_bon02.tran_threshold,
        :pte_bon02.tran_ctr,
        :pte_bon02.time_period,
        :pte_bon02.max_period_winners,
        :pte_bon02.period_win_ctr,
        :pte_bon02.max_program_winners,
        :pte_bon02.program_win_ctr,

        :pte_bon02.low_amount1,
        :pte_bon02.high_amount1,
        :pte_bon02.resp_text1,
        :pte_bon02.win_type1,
        :pte_bon02.reward_amount1,

        :pte_bon02.low_amount2,
        :pte_bon02.high_amount2,
        :pte_bon02.resp_text2,
        :pte_bon02.win_type2,
        :pte_bon02.reward_amount2,

        :pte_bon02.low_amount3,
        :pte_bon02.high_amount3,
        :pte_bon02.resp_text3,
        :pte_bon02.win_type3,
        :pte_bon02.reward_amount3,

        :pte_bon02.low_amount4,
        :pte_bon02.high_amount4,
        :pte_bon02.resp_text4,
        :pte_bon02.win_type4,
        :pte_bon02.reward_amount4,

        :pte_bon02.low_amount5,
        :pte_bon02.high_amount5,
        :pte_bon02.resp_text5,
        :pte_bon02.win_type5,
        :pte_bon02.reward_amount5,

        :pte_bon02.multi_winner_text,
        :pte_bon02.multi_winners_allowed
      );
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BON02 ,Fun_Name : db_insert_bon02 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_bon02 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return( retval );
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_ccf01( pCCF01 ccf01_ptr, pCHAR ErrorMsg )
{
   ccf01_to_db( ccf01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO ccf01
     (  card_type,
        card_nbr,
        primary_acct_nbr,
        name_dba,
        address1,
        address2,
        city,
        state,
        zip_code,
        home_phone,
        work_phone,
        dob,
        profession,
        country,
        nbr_cards,
        status,
        sex,               
        mother_maiden_name,
        membership_id,     
        cardholder_id,     
        block_status,      
        specialty_code,    
        vip_acct_code     
     )               
   VALUES(  :pte_ccf01.card_type,
       :pte_ccf01.card_nbr,
       :pte_ccf01.primary_acct_nbr,
       :pte_ccf01.name_dba,
       :pte_ccf01.address1,
       :pte_ccf01.address2,
       :pte_ccf01.city,
       :pte_ccf01.state,
       :pte_ccf01.zip_code,
       :pte_ccf01.home_phone,
       :pte_ccf01.work_phone,
       :pte_ccf01.dob,
       :pte_ccf01.profession,
       :pte_ccf01.country,
       :pte_ccf01.nbr_cards,
       :pte_ccf01.status,
       :pte_ccf01.sex,               
       :pte_ccf01.mother_maiden_name,
       :pte_ccf01.membership_id,     
       :pte_ccf01.cardholder_id,     
       :pte_ccf01.block_status,      
       :pte_ccf01.specialty_code,    
       :pte_ccf01.vip_acct_code     
      );
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF01 ,Fun_Name : db_insert_ccf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_ccf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_acf01( pACF01 acf01_ptr, pCHAR ErrorMsg )
{
   acf01_to_db( acf01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO acf01
     (  account_type,
        account_nbr,
        status,
        date_added,
        maint_date,
        changed_by,
        credit_limit,
        available,
        outstanding,
        ledger_balance,
        cash_limit,      
        cash_available,  
        cash_outstanding
     )               
   VALUES(  :pte_acf01.account_type,
       :pte_acf01.account_nbr,
       :pte_acf01.status,
       :pte_acf01.date_added,
       :pte_acf01.maint_date,
       :pte_acf01.changed_by,
       :pte_acf01.credit_limit,
       :pte_acf01.available,
       :pte_acf01.outstanding,
       :pte_acf01.ledger_balance,
       :pte_acf01.cash_limit,      
       :pte_acf01.cash_available,  
       :pte_acf01.cash_outstanding
      );
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ACF01 ,Fun_Name : db_insert_acf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_acf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_ccl01( pCCL01 ccl01_ptr, pCHAR ErrorMsg )
{
   ccl01_to_db( ccl01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO ccl01
     (  currency_value,
        currency_code,
        currency_decimal_places,
		currency_name
     )               
   VALUES(  :pte_ccl01.currency_value,
       :pte_ccl01.currency_code,
       :pte_ccl01.currency_decimal_places,
	   :pte_ccl01.currency_name
      );
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCL01 ,Fun_Name : db_insert_ccl01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_ccl01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_bdkkey01( pBDKKEY01 bdkkey01_ptr, pCHAR ErrorMsg )
{
   bdkkey01_to_db( bdkkey01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO bdkkey01
     (  card_brand,
        bdk_key
     )               
   VALUES(  :pte_bdkkey01.card_brand,
       :pte_bdkkey01.bdk_key
      );
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BDKKEY01 ,Fun_Name : db_insert_bdkkey01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_bdkkey01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_caf01_keyblock01( pCAF01_KEYBLOCK caf01_keyblock01_ptr, pCHAR ErrorMsg )
{
   caf01_keyblock01_to_db( caf01_keyblock01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO caf01_keyblock
     (  Caf_Profile_id,
        Type,
        Cvk_Mag_Keyblock,		
		Cvk_Acq_3DS_Keyblock,			
		Cvk_Pin_Verification,			
		Cvk_Mkac_Keyblock,				
		Csck_Iss_3ds_Keyblock,			
		Csck_Mag_Keyblock,				
		Dci_3ds_Keyblock,				
		Cvk_3ds_Cak_Keyblock			
     )               
   VALUES(  :pte_caf01_keyblock01.Caf_Profile_id,
       		:pte_caf01_keyblock01.Type,
       		:pte_caf01_keyblock01.Cvk_Mag_Keyblock,
       		:pte_caf01_keyblock01.Cvk_Acq_3DS_Keyblock,
       		:pte_caf01_keyblock01.Cvk_Pin_Verification,
       		:pte_caf01_keyblock01.Cvk_Mkac_Keyblock,
       		:pte_caf01_keyblock01.Csck_Iss_3ds_Keyblock,
       		:pte_caf01_keyblock01.Csck_Mag_Keyblock,
       		:pte_caf01_keyblock01.Dci_3ds_Keyblock,
       		:pte_caf01_keyblock01.Cvk_3ds_Cak_Keyblock     		
      );
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01_KEYBLOCK ,Fun_Name : db_insert_caf01_keyblock01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_caf01_keyblock01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_crf01( pCRF01 crf01_ptr, pCHAR ErrorMsg )
{
   crf01_to_db( crf01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO crf01
     (  currency_code,
        conversion_rate,
		currency_name
     )               
   VALUES(  :pte_crf01.currency_code,
       :pte_crf01.conversion_rate,
	   :pte_crf01.currency_name
      );
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CRF01 ,Fun_Name : db_insert_crf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_crf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_csf01( pCSF01 csf01_ptr, pCHAR ErrorMsg )
{
   csf01_to_db( csf01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO csf01
     (  status,
        description,
        iso_resp_code,
        resp_text_msg,
         mac_value
     )               
   VALUES(  :pte_csf01.status,
       :pte_csf01.description,
       :pte_csf01.iso_resp_code,
       :pte_csf01.resp_text_msg,
       :pte_csf01.mac_value
      );
      
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CSF01 ,Fun_Name : db_insert_csf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_csf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_paf01( pPAF01 paf01_ptr, pCHAR ErrorMsg )
{
   paf01_to_db( paf01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO paf01
     (  primary_acct_nbr,
        name_dba, address1, address2, city, state, zip_code, home_phone, work_phone,
        status, caf_profile_id, type, corp_acct_nbr,block_status,  account_name, 
        past_due_amount, min_pay_code, Credit_limit,Custr_nbr	,APP_Source,COMP_Name     
     )               
   VALUES(  :pte_paf01.primary_acct_nbr, :pte_paf01.name_dba, :pte_paf01.address1, :pte_paf01.address2,
            :pte_paf01.city, :pte_paf01.state, :pte_paf01.zip_code, :pte_paf01.home_phone, :pte_paf01.work_phone,
            :pte_paf01.status, :pte_paf01.caf_profile_id, :pte_paf01.type,  
            :pte_paf01.corp_acct_nbr, :pte_paf01.block_status,:pte_paf01.account_name, 
            :pte_paf01.past_due_amount, :pte_paf01.min_pay_code  ,
            :pte_paf01.Credit_limit,:pte_paf01.Custr_nbr	,:pte_paf01.APP_Source,:pte_paf01.COMP_Name
      );
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : PAF01 ,Fun_Name : db_insert_paf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 ) 
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_paf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_def01( pDEF01 def01_ptr, pCHAR ErrorMsg )
{
   def01_to_db( def01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO def01
     (  
       organization_id, merchant_id, term_length,          
       factor, deferred_min_amount, deferred_max_amount 
     )               
   VALUES(  
           :pte_def01.organization_id, :pte_def01.merchant_id, :pte_def01.term_length,          
           :pte_def01.factor, :pte_def01.deferred_min_amount, :pte_def01.deferred_max_amount 
      );
      
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : DEF01 ,Fun_Name : db_insert_def01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_def01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}





/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_ccf03p( pCCF03 ccf03p_ptr, pCHAR ErrorMsg )
{
   ccf03p_to_db( ccf03p_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO ccf03p
     ( card_type,
       card_nbr,
        primary_acct_nbr,
        daily_amt_usage,
        julian_date,
        
        peso_julian_date,        
      dollar_julian_date,      
      peso_usage1_nbr_usage,   
      peso_usage1_amt_usage,   
      peso_usage2_nbr_usage,   
      peso_usage2_amt_usage,   
      peso_usage3_nbr_usage,   
      peso_usage3_amt_usage,   
      peso_usage4_nbr_usage,   
      peso_usage4_amt_usage,   
      peso_usage5_nbr_usage,   
      peso_usage5_amt_usage,   
      peso_usage6_nbr_usage,   
      peso_usage6_amt_usage,   
      peso_usage7_nbr_usage,   
      peso_usage7_amt_usage,   
      peso_usage8_nbr_usage,   
      peso_usage8_amt_usage,   
      peso_usage9_nbr_usage,   
      peso_usage9_amt_usage,   
      peso_usage10_nbr_usage,  
      peso_usage10_amt_usage,  
      peso_usage11_nbr_usage,  
      peso_usage11_amt_usage,  
      peso_usage12_nbr_usage,  
      peso_usage12_amt_usage,  
      peso_usage13_nbr_usage,  
      peso_usage13_amt_usage,  
      peso_usage14_nbr_usage,  
      peso_usage14_amt_usage,  

      dollar_usage1_nbr_usage, 
      dollar_usage1_amt_usage, 
      dollar_usage2_nbr_usage, 
      dollar_usage2_amt_usage, 
      dollar_usage3_nbr_usage, 
      dollar_usage3_amt_usage, 
      dollar_usage4_nbr_usage, 
      dollar_usage4_amt_usage, 
      dollar_usage5_nbr_usage, 
      dollar_usage5_amt_usage, 
      dollar_usage6_nbr_usage, 
      dollar_usage6_amt_usage, 
      dollar_usage7_nbr_usage, 
      dollar_usage7_amt_usage, 
      dollar_usage8_nbr_usage, 
      dollar_usage8_amt_usage, 
      dollar_usage9_nbr_usage, 
      dollar_usage9_amt_usage, 
      dollar_usage10_nbr_usage,
      dollar_usage10_amt_usage,
      dollar_usage11_nbr_usage,
      dollar_usage11_amt_usage,
      dollar_usage12_nbr_usage,
      dollar_usage12_amt_usage,
      dollar_usage13_nbr_usage,
      dollar_usage13_amt_usage,
        dollar_usage14_nbr_usage,
        dollar_usage14_amt_usage,
        failed_pin_attempts,
        date_added,
        last_maint,
        status,
        mcc1_code,
        mcc1_usage,
        mcc2_code,
        mcc2_usage,
        mcc3_code,
        mcc3_usage,
        mcc4_code,
        mcc4_usage,
        mcc5_code,
        mcc5_usage,
        mcc6_code,
        mcc6_usage,
        mcc7_code,
        mcc7_usage,
        mcc8_code,
        mcc8_usage,
        mcc9_code,
        mcc9_usage,
        mcc10_code,
        mcc10_usage,
        mcc11_code,
        mcc11_usage,
        mcc12_code,
        mcc12_usage,
        mcc13_code,
        mcc13_usage,
        mcc14_code,
        mcc14_usage,
        mcc15_code,
        mcc15_usage,
        mcc16_code,
        mcc16_usage,
        mcc17_code,
        mcc17_usage,
        mcc18_code,
        mcc18_usage,
        mcc19_code,
        mcc19_usage,
        mcc20_code,
        mcc20_usage,

        repeat1_merchant_id,
        repeat1_nbr_uses,
        repeat2_merchant_id,
        repeat2_nbr_uses,
        repeat3_merchant_id,
        repeat3_nbr_uses,
        repeat4_merchant_id,
        repeat4_nbr_uses,
        repeat5_merchant_id,
        repeat5_nbr_uses,
        repeat6_merchant_id,
        repeat6_nbr_uses,
        repeat7_merchant_id,
        repeat7_nbr_uses,
        repeat8_merchant_id,
        repeat8_nbr_uses,
        repeat9_merchant_id,
        repeat9_nbr_uses,
        repeat10_merchant_id,
        repeat10_nbr_uses,
        repeat11_merchant_id,
        repeat11_nbr_uses,
        repeat12_merchant_id,
        repeat12_nbr_uses,
        repeat13_merchant_id,
        repeat13_nbr_uses,
        repeat14_merchant_id,
        repeat14_nbr_uses,
        repeat15_merchant_id,
        repeat15_nbr_uses,
        repeat16_merchant_id,
        repeat16_nbr_uses,
        repeat17_merchant_id,
        repeat17_nbr_uses,
        repeat18_merchant_id,
        repeat18_nbr_uses,
        repeat19_merchant_id,
        repeat19_nbr_uses,
        repeat20_merchant_id,
        repeat20_nbr_uses
     )     
   VALUES(  :pte_ccf03p.card_type,
       :pte_ccf03p.card_nbr,
       :pte_ccf03p.primary_acct_nbr,
       :pte_ccf03p.daily_amt_usage,
       :pte_ccf03p.julian_date,
       :pte_ccf03p.peso_julian_date,         
       :pte_ccf03p.dollar_julian_date,       
       :pte_ccf03p.peso_usage1_nbr_usage,    
       :pte_ccf03p.peso_usage1_amt_usage,    
       :pte_ccf03p.peso_usage2_nbr_usage,    
       :pte_ccf03p.peso_usage2_amt_usage,    
       :pte_ccf03p.peso_usage3_nbr_usage,    
       :pte_ccf03p.peso_usage3_amt_usage,    
       :pte_ccf03p.peso_usage4_nbr_usage,    
       :pte_ccf03p.peso_usage4_amt_usage,    
       :pte_ccf03p.peso_usage5_nbr_usage,    
       :pte_ccf03p.peso_usage5_amt_usage,    
       :pte_ccf03p.peso_usage6_nbr_usage,    
       :pte_ccf03p.peso_usage6_amt_usage,    
       :pte_ccf03p.peso_usage7_nbr_usage,    
       :pte_ccf03p.peso_usage7_amt_usage,    
       :pte_ccf03p.peso_usage8_nbr_usage,    
       :pte_ccf03p.peso_usage8_amt_usage,    
       :pte_ccf03p.peso_usage9_nbr_usage,    
       :pte_ccf03p.peso_usage9_amt_usage,    
       :pte_ccf03p.peso_usage10_nbr_usage,   
       :pte_ccf03p.peso_usage10_amt_usage,   
       :pte_ccf03p.peso_usage11_nbr_usage,   
       :pte_ccf03p.peso_usage11_amt_usage,   
       :pte_ccf03p.peso_usage12_nbr_usage,   
       :pte_ccf03p.peso_usage12_amt_usage,   
       :pte_ccf03p.peso_usage13_nbr_usage,   
       :pte_ccf03p.peso_usage13_amt_usage,   
       :pte_ccf03p.peso_usage14_nbr_usage,   
       :pte_ccf03p.peso_usage14_amt_usage,   
       
       :pte_ccf03p.dollar_usage1_nbr_usage,  
       :pte_ccf03p.dollar_usage1_amt_usage,  
       :pte_ccf03p.dollar_usage2_nbr_usage,  
       :pte_ccf03p.dollar_usage2_amt_usage,  
       :pte_ccf03p.dollar_usage3_nbr_usage,  
       :pte_ccf03p.dollar_usage3_amt_usage,  
       :pte_ccf03p.dollar_usage4_nbr_usage,  
       :pte_ccf03p.dollar_usage4_amt_usage,  
       :pte_ccf03p.dollar_usage5_nbr_usage,  
       :pte_ccf03p.dollar_usage5_amt_usage,  
       :pte_ccf03p.dollar_usage6_nbr_usage,  
       :pte_ccf03p.dollar_usage6_amt_usage,  
       :pte_ccf03p.dollar_usage7_nbr_usage,  
       :pte_ccf03p.dollar_usage7_amt_usage,  
       :pte_ccf03p.dollar_usage8_nbr_usage,  
       :pte_ccf03p.dollar_usage8_amt_usage,  
       :pte_ccf03p.dollar_usage9_nbr_usage,  
       :pte_ccf03p.dollar_usage9_amt_usage,  
       :pte_ccf03p.dollar_usage10_nbr_usage, 
       :pte_ccf03p.dollar_usage10_amt_usage, 
       :pte_ccf03p.dollar_usage11_nbr_usage, 
       :pte_ccf03p.dollar_usage11_amt_usage, 
       :pte_ccf03p.dollar_usage12_nbr_usage, 
       :pte_ccf03p.dollar_usage12_amt_usage, 
       :pte_ccf03p.dollar_usage13_nbr_usage, 
       :pte_ccf03p.dollar_usage13_amt_usage, 
       :pte_ccf03p.dollar_usage14_nbr_usage, 
       :pte_ccf03p.dollar_usage14_amt_usage, 

       :pte_ccf03p.failed_pin_attempts,
       :pte_ccf03p.date_added,
       :pte_ccf03p.last_maint,
       :pte_ccf03p.status,
       :pte_ccf03p.mcc1_code,
       :pte_ccf03p.mcc1_usage,
       :pte_ccf03p.mcc2_code,
       :pte_ccf03p.mcc2_usage,
       :pte_ccf03p.mcc3_code,
       :pte_ccf03p.mcc3_usage,
       :pte_ccf03p.mcc4_code,
       :pte_ccf03p.mcc4_usage,
       :pte_ccf03p.mcc5_code,
       :pte_ccf03p.mcc5_usage,
       :pte_ccf03p.mcc6_code,
       :pte_ccf03p.mcc6_usage,
       :pte_ccf03p.mcc7_code,
       :pte_ccf03p.mcc7_usage,
       :pte_ccf03p.mcc8_code,
       :pte_ccf03p.mcc8_usage,
       :pte_ccf03p.mcc9_code,
       :pte_ccf03p.mcc9_usage,
       :pte_ccf03p.mcc10_code,
       :pte_ccf03p.mcc10_usage,
       :pte_ccf03p.mcc11_code,
       :pte_ccf03p.mcc11_usage,
       :pte_ccf03p.mcc12_code,
       :pte_ccf03p.mcc12_usage,
       :pte_ccf03p.mcc13_code,
       :pte_ccf03p.mcc13_usage,
       :pte_ccf03p.mcc14_code,
       :pte_ccf03p.mcc14_usage,
       :pte_ccf03p.mcc15_code,
       :pte_ccf03p.mcc15_usage,
       :pte_ccf03p.mcc16_code,
       :pte_ccf03p.mcc16_usage,
       :pte_ccf03p.mcc17_code,
       :pte_ccf03p.mcc17_usage,
       :pte_ccf03p.mcc18_code,
       :pte_ccf03p.mcc18_usage,
       :pte_ccf03p.mcc19_code,
       :pte_ccf03p.mcc19_usage,
       :pte_ccf03p.mcc20_code,
       :pte_ccf03p.mcc20_usage,

       :pte_ccf03p.repeat1_merchant_id,
       :pte_ccf03p.repeat1_nbr_uses,
       :pte_ccf03p.repeat2_merchant_id,
       :pte_ccf03p.repeat2_nbr_uses,
       :pte_ccf03p.repeat3_merchant_id,
       :pte_ccf03p.repeat3_nbr_uses,
       :pte_ccf03p.repeat4_merchant_id,
       :pte_ccf03p.repeat4_nbr_uses,
       :pte_ccf03p.repeat5_merchant_id,
       :pte_ccf03p.repeat5_nbr_uses,
       :pte_ccf03p.repeat6_merchant_id,
       :pte_ccf03p.repeat6_nbr_uses,
       :pte_ccf03p.repeat7_merchant_id,
       :pte_ccf03p.repeat7_nbr_uses,
       :pte_ccf03p.repeat8_merchant_id,
       :pte_ccf03p.repeat8_nbr_uses,
       :pte_ccf03p.repeat9_merchant_id,
       :pte_ccf03p.repeat9_nbr_uses,
       :pte_ccf03p.repeat10_merchant_id,
       :pte_ccf03p.repeat10_nbr_uses,
       :pte_ccf03p.repeat11_merchant_id,
       :pte_ccf03p.repeat11_nbr_uses,
       :pte_ccf03p.repeat12_merchant_id,
       :pte_ccf03p.repeat12_nbr_uses,
       :pte_ccf03p.repeat13_merchant_id,
       :pte_ccf03p.repeat13_nbr_uses,
       :pte_ccf03p.repeat14_merchant_id,
       :pte_ccf03p.repeat14_nbr_uses,
       :pte_ccf03p.repeat15_merchant_id,
       :pte_ccf03p.repeat15_nbr_uses,
       :pte_ccf03p.repeat16_merchant_id,
       :pte_ccf03p.repeat16_nbr_uses,
       :pte_ccf03p.repeat17_merchant_id,
       :pte_ccf03p.repeat17_nbr_uses,
       :pte_ccf03p.repeat18_merchant_id,
       :pte_ccf03p.repeat18_nbr_uses,
       :pte_ccf03p.repeat19_merchant_id,
       :pte_ccf03p.repeat19_nbr_uses,
       :pte_ccf03p.repeat20_merchant_id,
       :pte_ccf03p.repeat20_nbr_uses
      );
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF03P ,Fun_Name : db_insert_ccf03p , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_ccf03p ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_offus_velocity( pOffus_velocity offus_velocity_ptr, pCHAR ErrorMsg )
{
   offus_velocity_to_db( offus_velocity_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO offus_velocity
     ( card_type,
       card_nbr,
        primary_acct_nbr,
        daily_amt_usage,
        julian_date,
        peso_julian_date,
      dollar_julian_date, 
      peso_usage1_nbr_usage, 
      peso_usage1_amt_usage, 
      peso_usage2_nbr_usage, 
      peso_usage2_amt_usage, 
      peso_usage3_nbr_usage,
      peso_usage3_amt_usage,   
      peso_usage4_nbr_usage,   
      peso_usage4_amt_usage,   
      peso_usage5_nbr_usage,   
      peso_usage5_amt_usage,   
      peso_usage6_nbr_usage,   
      peso_usage6_amt_usage,   
      peso_usage7_nbr_usage,   
      peso_usage7_amt_usage,   
      peso_usage8_nbr_usage,   
      peso_usage8_amt_usage,   
      peso_usage9_nbr_usage,   
      peso_usage9_amt_usage,   
      peso_usage10_nbr_usage,  
      peso_usage10_amt_usage,  
      peso_usage11_nbr_usage,  
      peso_usage11_amt_usage,  
      peso_usage12_nbr_usage,  
      peso_usage12_amt_usage,  
      peso_usage13_nbr_usage,  
      peso_usage13_amt_usage,  
      peso_usage14_nbr_usage,  
      peso_usage14_amt_usage,  

      dollar_usage1_nbr_usage, 
      dollar_usage1_amt_usage, 
      dollar_usage2_nbr_usage, 
      dollar_usage2_amt_usage, 
      dollar_usage3_nbr_usage, 
      dollar_usage3_amt_usage, 
      dollar_usage4_nbr_usage, 
      dollar_usage4_amt_usage, 
      dollar_usage5_nbr_usage, 
      dollar_usage5_amt_usage, 
      dollar_usage6_nbr_usage, 
      dollar_usage6_amt_usage, 
      dollar_usage7_nbr_usage, 
      dollar_usage7_amt_usage, 
      dollar_usage8_nbr_usage, 
      dollar_usage8_amt_usage, 
      dollar_usage9_nbr_usage, 
      dollar_usage9_amt_usage, 
      dollar_usage10_nbr_usage,
      dollar_usage10_amt_usage,
      dollar_usage11_nbr_usage,
      dollar_usage11_amt_usage,
      dollar_usage12_nbr_usage,
      dollar_usage12_amt_usage,
      dollar_usage13_nbr_usage,
      dollar_usage13_amt_usage,
        dollar_usage14_nbr_usage,
        dollar_usage14_amt_usage,
        failed_pin_attempts,
        date_added,
        last_maint,
        status,
        mcc1_code,
        mcc1_usage,
        mcc2_code,
        mcc2_usage,
        mcc3_code,
        mcc3_usage,
        mcc4_code,
        mcc4_usage,
        mcc5_code,
        mcc5_usage,
        mcc6_code,
        mcc6_usage,
        mcc7_code,
        mcc7_usage,
        mcc8_code,
        mcc8_usage,
        mcc9_code,
        mcc9_usage,
        mcc10_code,
        mcc10_usage,
        mcc11_code,
        mcc11_usage,
        mcc12_code,
        mcc12_usage,
        mcc13_code,
        mcc13_usage,
        mcc14_code,
        mcc14_usage,
        mcc15_code,
        mcc15_usage,
        mcc16_code,
        mcc16_usage,
        mcc17_code,
        mcc17_usage,
        mcc18_code,
        mcc18_usage,
        mcc19_code,
        mcc19_usage,
        mcc20_code,
        mcc20_usage,

        repeat1_merchant_id,
        repeat1_nbr_uses,
        repeat2_merchant_id,
        repeat2_nbr_uses,
        repeat3_merchant_id,
        repeat3_nbr_uses,
        repeat4_merchant_id,
        repeat4_nbr_uses,
        repeat5_merchant_id,
        repeat5_nbr_uses,
        repeat6_merchant_id,
        repeat6_nbr_uses,
        repeat7_merchant_id,
        repeat7_nbr_uses,
        repeat8_merchant_id,
        repeat8_nbr_uses,
        repeat9_merchant_id,
        repeat9_nbr_uses,
        repeat10_merchant_id,
        repeat10_nbr_uses,
        repeat11_merchant_id,
        repeat11_nbr_uses,
        repeat12_merchant_id,
        repeat12_nbr_uses,
        repeat13_merchant_id,
        repeat13_nbr_uses,
        repeat14_merchant_id,
        repeat14_nbr_uses,
        repeat15_merchant_id,
        repeat15_nbr_uses,
        repeat16_merchant_id,
        repeat16_nbr_uses,
        repeat17_merchant_id,
        repeat17_nbr_uses,
        repeat18_merchant_id,
        repeat18_nbr_uses,
        repeat19_merchant_id,
        repeat19_nbr_uses,
        repeat20_merchant_id,
        repeat20_nbr_uses
     )     

   VALUES(  :pte_offus_velocity.card_type,
       :pte_offus_velocity.card_nbr,
       :pte_offus_velocity.primary_acct_nbr,
       :pte_offus_velocity.daily_amt_usage,
       :pte_offus_velocity.julian_date,
       :pte_offus_velocity.peso_julian_date,         
       :pte_offus_velocity.dollar_julian_date,       
       :pte_offus_velocity.peso_usage1_nbr_usage,    
       :pte_offus_velocity.peso_usage1_amt_usage,    
       :pte_offus_velocity.peso_usage2_nbr_usage,    
       :pte_offus_velocity.peso_usage2_amt_usage,    
       :pte_offus_velocity.peso_usage3_nbr_usage,    
       :pte_offus_velocity.peso_usage3_amt_usage,    
       :pte_offus_velocity.peso_usage4_nbr_usage,    
       :pte_offus_velocity.peso_usage4_amt_usage,    
       :pte_offus_velocity.peso_usage5_nbr_usage,    
       :pte_offus_velocity.peso_usage5_amt_usage,    
       :pte_offus_velocity.peso_usage6_nbr_usage,    
       :pte_offus_velocity.peso_usage6_amt_usage,    
       :pte_offus_velocity.peso_usage7_nbr_usage,    
       :pte_offus_velocity.peso_usage7_amt_usage,    
       :pte_offus_velocity.peso_usage8_nbr_usage,    
       :pte_offus_velocity.peso_usage8_amt_usage,    
       :pte_offus_velocity.peso_usage9_nbr_usage,    
       :pte_offus_velocity.peso_usage9_amt_usage,    
       :pte_offus_velocity.peso_usage10_nbr_usage,   
       :pte_offus_velocity.peso_usage10_amt_usage,   
       :pte_offus_velocity.peso_usage11_nbr_usage,   
       :pte_offus_velocity.peso_usage11_amt_usage,   
       :pte_offus_velocity.peso_usage12_nbr_usage,   
       :pte_offus_velocity.peso_usage12_amt_usage,   
       :pte_offus_velocity.peso_usage13_nbr_usage,   
       :pte_offus_velocity.peso_usage13_amt_usage,   
       :pte_offus_velocity.peso_usage14_nbr_usage,   
       :pte_offus_velocity.peso_usage14_amt_usage,         
       :pte_offus_velocity.dollar_usage1_nbr_usage,  
       :pte_offus_velocity.dollar_usage1_amt_usage,  
       :pte_offus_velocity.dollar_usage2_nbr_usage,  
       :pte_offus_velocity.dollar_usage2_amt_usage,  
       :pte_offus_velocity.dollar_usage3_nbr_usage,  
       :pte_offus_velocity.dollar_usage3_amt_usage,  
       :pte_offus_velocity.dollar_usage4_nbr_usage,  
       :pte_offus_velocity.dollar_usage4_amt_usage,  
       :pte_offus_velocity.dollar_usage5_nbr_usage,  
       :pte_offus_velocity.dollar_usage5_amt_usage,  
       :pte_offus_velocity.dollar_usage6_nbr_usage,  
       :pte_offus_velocity.dollar_usage6_amt_usage,  
       :pte_offus_velocity.dollar_usage7_nbr_usage,  
       :pte_offus_velocity.dollar_usage7_amt_usage,  
       :pte_offus_velocity.dollar_usage8_nbr_usage,  
       :pte_offus_velocity.dollar_usage8_amt_usage,  
       :pte_offus_velocity.dollar_usage9_nbr_usage,  
       :pte_offus_velocity.dollar_usage9_amt_usage,  
       :pte_offus_velocity.dollar_usage10_nbr_usage, 
       :pte_offus_velocity.dollar_usage10_amt_usage, 
       :pte_offus_velocity.dollar_usage11_nbr_usage, 
       :pte_offus_velocity.dollar_usage11_amt_usage, 
       :pte_offus_velocity.dollar_usage12_nbr_usage, 
       :pte_offus_velocity.dollar_usage12_amt_usage, 
       :pte_offus_velocity.dollar_usage13_nbr_usage, 
       :pte_offus_velocity.dollar_usage13_amt_usage, 
       :pte_offus_velocity.dollar_usage14_nbr_usage, 
       :pte_offus_velocity.dollar_usage14_amt_usage, 
       :pte_offus_velocity.failed_pin_attempts,
       :pte_offus_velocity.date_added,
       :pte_offus_velocity.last_maint,
       :pte_offus_velocity.status,
       :pte_offus_velocity.mcc1_code,
       :pte_offus_velocity.mcc1_usage,
       :pte_offus_velocity.mcc2_code,
       :pte_offus_velocity.mcc2_usage,
       :pte_offus_velocity.mcc3_code,
       :pte_offus_velocity.mcc3_usage,
       :pte_offus_velocity.mcc4_code,
       :pte_offus_velocity.mcc4_usage,
       :pte_offus_velocity.mcc5_code,
       :pte_offus_velocity.mcc5_usage,
       :pte_offus_velocity.mcc6_code,
       :pte_offus_velocity.mcc6_usage,
       :pte_offus_velocity.mcc7_code,
       :pte_offus_velocity.mcc7_usage,
       :pte_offus_velocity.mcc8_code,
       :pte_offus_velocity.mcc8_usage,
       :pte_offus_velocity.mcc9_code,
       :pte_offus_velocity.mcc9_usage,
       :pte_offus_velocity.mcc10_code,
       :pte_offus_velocity.mcc10_usage,
       :pte_offus_velocity.mcc11_code,
       :pte_offus_velocity.mcc11_usage,
       :pte_offus_velocity.mcc12_code,
       :pte_offus_velocity.mcc12_usage,
       :pte_offus_velocity.mcc13_code,
       :pte_offus_velocity.mcc13_usage,
       :pte_offus_velocity.mcc14_code,
       :pte_offus_velocity.mcc14_usage,
       :pte_offus_velocity.mcc15_code,
       :pte_offus_velocity.mcc15_usage,
       :pte_offus_velocity.mcc16_code,
       :pte_offus_velocity.mcc16_usage,
       :pte_offus_velocity.mcc17_code,
       :pte_offus_velocity.mcc17_usage,
       :pte_offus_velocity.mcc18_code,
       :pte_offus_velocity.mcc18_usage,
       :pte_offus_velocity.mcc19_code,
       :pte_offus_velocity.mcc19_usage,
       :pte_offus_velocity.mcc20_code,
       :pte_offus_velocity.mcc20_usage,
       :pte_offus_velocity.repeat1_merchant_id,
       :pte_offus_velocity.repeat1_nbr_uses,
       :pte_offus_velocity.repeat2_merchant_id,
       :pte_offus_velocity.repeat2_nbr_uses,
       :pte_offus_velocity.repeat3_merchant_id,
       :pte_offus_velocity.repeat3_nbr_uses,
       :pte_offus_velocity.repeat4_merchant_id,
       :pte_offus_velocity.repeat4_nbr_uses,
       :pte_offus_velocity.repeat5_merchant_id,
       :pte_offus_velocity.repeat5_nbr_uses,
       :pte_offus_velocity.repeat6_merchant_id,
       :pte_offus_velocity.repeat6_nbr_uses,
       :pte_offus_velocity.repeat7_merchant_id,
       :pte_offus_velocity.repeat7_nbr_uses,
       :pte_offus_velocity.repeat8_merchant_id,
       :pte_offus_velocity.repeat8_nbr_uses,
       :pte_offus_velocity.repeat9_merchant_id,
       :pte_offus_velocity.repeat9_nbr_uses,
       :pte_offus_velocity.repeat10_merchant_id,
       :pte_offus_velocity.repeat10_nbr_uses,
       :pte_offus_velocity.repeat11_merchant_id,
       :pte_offus_velocity.repeat11_nbr_uses,
       :pte_offus_velocity.repeat12_merchant_id,
       :pte_offus_velocity.repeat12_nbr_uses,
       :pte_offus_velocity.repeat13_merchant_id,
       :pte_offus_velocity.repeat13_nbr_uses,
       :pte_offus_velocity.repeat14_merchant_id,
       :pte_offus_velocity.repeat14_nbr_uses,
       :pte_offus_velocity.repeat15_merchant_id,
       :pte_offus_velocity.repeat15_nbr_uses,
       :pte_offus_velocity.repeat16_merchant_id,
       :pte_offus_velocity.repeat16_nbr_uses,
       :pte_offus_velocity.repeat17_merchant_id,
       :pte_offus_velocity.repeat17_nbr_uses,
       :pte_offus_velocity.repeat18_merchant_id,
       :pte_offus_velocity.repeat18_nbr_uses,
       :pte_offus_velocity.repeat19_merchant_id,
       :pte_offus_velocity.repeat19_nbr_uses,
       :pte_offus_velocity.repeat20_merchant_id,
       :pte_offus_velocity.repeat20_nbr_uses
      );

	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : OFFUS_VELOCITY ,Fun_Name : db_insert_offus_velocity , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }

   if ( SQLCODE != 0 )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_offus_velocity ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }



   return PTEMSG_OK;

}




/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_mct01( pMCT01 mct01_ptr, pCHAR ErrorMsg )
{
   mct01_to_db( mct01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO mct01
     ( card_type,
       merchant_id,
       organization_id,
       acquirer_id,
       corporate_id,               
       settlement_id,
       floor_limit
     )               
   VALUES(  :pte_mct01.card_type,
       :pte_mct01.merchant_id,
       :pte_mct01.organization_id,
       :pte_mct01.acquirer_id,
       :pte_mct01.corporate_id,
       :pte_mct01.settlement_id,
       :pte_mct01.floor_limit
      );
      
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCT01 ,Fun_Name : db_insert_mct01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_mct01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_ctf01( pCTF01 ctf01_ptr, pCHAR ErrorMsg )
{
   ctf01_to_db( ctf01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO ctf01
     ( card_type,               
       description
     )               
   VALUES(  :pte_ctf01.card_type,
       :pte_ctf01.description
      );
      
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CTF01 ,Fun_Name : db_insert_ctf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_ctf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}

//
BYTE db_insert_caf01_emv(  pCAF01_EMV caf01_emv_ptr, pCHAR ErrorMsg )
{
      caf01_emv_to_db( caf01_emv_ptr);
  	   if ( db_error_statics_flag == true )
      {
      		start_time = ptetime_get_time();
      }
      EXEC SQL INSERT INTO caf01_emv
       ( 
         caf_profile_id ,type , cc_tk1_service_code_offset ,cc_tk1_icvc_offset,cc_tk1_pan_seq_nbr_offset ,cc_tk2_service_code_offset ,   
         cc_tk2_icvc_offset ,cc_tk2_pan_seq_nbr_offset ,ccless_tk1_service_code_offset ,ccless_tk1_icvc_offset ,
         ccless_tk1_pan_seq_nbr_offset, ccless_tk2_service_code_offset ,ccless_tk2_icvc_offset, 
         ccless_tk2_pan_seq_nbr_offset ,mcless_tk1_service_code_offset, mcless_tk1_icvc_offset ,
         mcless_tk1_pan_seq_nbr_offset ,mcless_tk1_atc_offset ,mcless_tk1_unpre_nbr_offset ,mcless_tk2_service_code_offset,
         mcless_tk2_icvc_offset ,mcless_tk2_pan_seq_nbr_offset ,mcless_tk2_atc_offset ,mcless_tk2_unpre_nbr_offset ,
         MC_CVC3_code ,MK_AC_code,future_key1,future_key2 ,future_key3 ,future_key4 ,future_key5,temp1,temp2,temp3,temp4,temp5                     
       )
       VALUES
       ( 
		:pte_caf01_emv.caf_profile_id,:pte_caf01_emv.type,:pte_caf01_emv.cc_tk[0].service_code_offset,:pte_caf01_emv.cc_tk[0].icvc_offset,
		:pte_caf01_emv.cc_tk[0].pan_seq_nbr_offset,:pte_caf01_emv.cc_tk[1].service_code_offset,:pte_caf01_emv.cc_tk[1].icvc_offset,:pte_caf01_emv.cc_tk[1].pan_seq_nbr_offset,
		:pte_caf01_emv.ccless_tk[0].service_code_offset,:pte_caf01_emv.ccless_tk[0].icvc_offset,:pte_caf01_emv.ccless_tk[0].pan_seq_nbr_offset,
		:pte_caf01_emv.ccless_tk[1].service_code_offset,:pte_caf01_emv.ccless_tk[1].icvc_offset,:pte_caf01_emv.ccless_tk[1].pan_seq_nbr_offset,
		:pte_caf01_emv.mcless_tk[0].service_code_offset,:pte_caf01_emv.mcless_tk[0].icvc_offset,:pte_caf01_emv.mcless_tk[0].pan_seq_nbr_offset,
		:pte_caf01_emv.mcless_tk[0].atc_offset,:pte_caf01_emv.mcless_tk[0].unpre_nbr_offset,:pte_caf01_emv.mcless_tk[1].service_code_offset,
		:pte_caf01_emv.mcless_tk[1].icvc_offset,:pte_caf01_emv.mcless_tk[1].pan_seq_nbr_offset,:pte_caf01_emv.mcless_tk[1].atc_offset,
		:pte_caf01_emv.mcless_tk[1].unpre_nbr_offset,:pte_caf01_emv.MC_CVC3_code,:pte_caf01_emv.MK_AC_code,:pte_caf01_emv.future_key1,
		:pte_caf01_emv.future_key2,:pte_caf01_emv.future_key3,:pte_caf01_emv.future_key4,:pte_caf01_emv.future_key5,
		:pte_caf01_emv.temp1,:pte_caf01_emv.temp2,:pte_caf01_emv.temp3,:pte_caf01_emv.temp4,:pte_caf01_emv.temp5	 
	 );
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01_RAW ,Fun_Name : db_insert_caf01_emv , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_caf01_emv ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

       return PTEMSG_OK;
}


//

/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_caf01( pCAF01 caf01_ptr, pCHAR ErrorMsg )
{
   caf01_to_db( caf01_ptr );

   db_caf01.pin.len =100;
   memcpy(db_caf01.pin.pin_data, pte_caf01.pin, sizeof(pte_caf01.pin)); 

	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL INSERT INTO caf01
     ( caf_profile_id,
       type,               
       authorization_location,
       authorization_method,
       destination_name,
       iso_nbr,
       iso_length,
       aba_nbr,
       name,
       contact,
       phone,
       date_added,
       last_maint,
       changed_by,
       status,
       max_pin_retries,
       pin_capture_ind,
       track_offset,
       pin_offset_location,
	    nsp_process,
       expiration_date_check,
       expiration_date_location,
       merchant_same,
       
       day_period1,
       velocity1_nbr_usage_1,
       velocity1_nbr_usage_2,
       velocity1_amt_usage_1,
       velocity1_amt_usage_2,

      day_period2,
       velocity2_nbr_usage_1,
       velocity2_nbr_usage_2,
       velocity2_amt_usage_1,
       velocity2_amt_usage_2,

       day_period3,
       velocity3_nbr_usage_1,
       velocity3_nbr_usage_2,
       velocity3_amt_usage_1,
       velocity3_amt_usage_2,
       pin_verification_method,
       pin,

		cvkA_1,
		cvkB_1,
		cvkA_2,
		cvkB_2,
		cvkA_3,
		cvkB_3,
		cvkA_4,
		cvkB_4,
		cvkA_5,
		cvkB_5,
		cvkA_6,
		cvkB_6,
		cvv_processing,
		service_code_offset_tr1,
		service_code_offset_tr2,
		cvv_offset_tr1,
		cvv_offset_tr2,
		cvv_length,
		csck,
		floor_limit,
		country_limits_flag
	)               
   VALUES(  :pte_caf01.caf_profile_id,
       :pte_caf01.type,
       :pte_caf01.authorization_location,
       :pte_caf01.authorization_method,
       :pte_caf01.destination_name,
       :pte_caf01.iso_nbr,
       :pte_caf01.iso_length,
       :pte_caf01.aba_nbr,
       :pte_caf01.name,
       :pte_caf01.contact,
       :pte_caf01.phone,
       :pte_caf01.date_added,
       :pte_caf01.last_maint,
       :pte_caf01.changed_by,
       :pte_caf01.status,
       :pte_caf01.max_pin_retries,
       :pte_caf01.pin_capture_ind,
       :pte_caf01.track_offset,
       :pte_caf01.pin_offset_location,
	    :pte_caf01.nsp_process,
       :pte_caf01.expiration_date_check,
       :pte_caf01.expiration_date_location,
       :pte_caf01.merchant_same,
       
       :pte_caf01.day_period1,
       :pte_caf01.velocity1_nbr_usage_1,
       :pte_caf01.velocity1_nbr_usage_2,
       :pte_caf01.velocity1_amt_usage_1,
       :pte_caf01.velocity1_amt_usage_2,

       :pte_caf01.day_period2,
       :pte_caf01.velocity2_nbr_usage_1,
       :pte_caf01.velocity2_nbr_usage_2,
       :pte_caf01.velocity2_amt_usage_1,
       :pte_caf01.velocity2_amt_usage_2,

       :pte_caf01.day_period2,
       :pte_caf01.velocity3_nbr_usage_1,
       :pte_caf01.velocity3_nbr_usage_2,
       :pte_caf01.velocity3_amt_usage_1,
       :pte_caf01.velocity3_amt_usage_2,
       :pte_caf01.pin_verification_method,
       :db_caf01.pin,
		:pte_caf01.cvkA_1,  					
		:pte_caf01.cvkB_1,					
		:pte_caf01.cvkA_2,  					
		:pte_caf01.cvkB_2,					
		:pte_caf01.cvkA_3,  					
		:pte_caf01.cvkB_3,					
		:pte_caf01.cvkA_4,  					
		:pte_caf01.cvkB_4,					
		:pte_caf01.cvkA_5,  					
		:pte_caf01.cvkB_5,					
		:pte_caf01.cvkA_6,  					
		:pte_caf01.cvkB_6,					
		:pte_caf01.cvv_processing,					
		:pte_caf01.service_code_offset_tr1,	
		:pte_caf01.service_code_offset_tr2,	
		:pte_caf01.cvv_offset_tr1,			
		:pte_caf01.cvv_offset_tr2,			
		:pte_caf01.cvv_length,
		:pte_caf01.csck	,
		:pte_caf01.floor_limit,
		:pte_caf01.country_limits_flag
	);
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01 ,Fun_Name : db_insert_caf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_caf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}

/******************************************************************************/
/******************************************************************************/
BYTE db_insert_mcc_limits( pMCC_LIMITS mcc_limits_ptr, pCHAR ErrorMsg )
{
   mcc_limits_to_db( mcc_limits_ptr );

	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL INSERT INTO mcc_limits
     ( caf_profile_id,
       type,               
       mcc,
       usage,
       peso_amt_limit,
       usd_amt_limit
     )
   VALUES( :pte_mcc_limits.caf_profile_id,
           :pte_mcc_limits.type,
           :pte_mcc_limits.mcc,
           :pte_mcc_limits.usage,
           :pte_mcc_limits.peso_amt_limit,
           :pte_mcc_limits.usd_amt_limit
         );
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCC_LIMITS ,Fun_Name : db_insert_mcc_limits , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_mcc_limits ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/
/******************************************************************************/
BYTE db_insert_cntry_amt_limits( pCOUNTRY_AMT_LIMITS country_amt_limits_ptr, pCHAR ErrorMsg )
{
   country_amt_limits_to_db( country_amt_limits_ptr );

	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL INSERT INTO country_amt_limits
     ( caf_profile_id,
       type,               
       country_code,
       amount_limit
     )
   VALUES( :pte_country_amt_limits.caf_profile_id,
           :pte_country_amt_limits.type,
           :pte_country_amt_limits.country_code,
           :pte_country_amt_limits.amount_limit
         );
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CNTRY_AMT_LIMITS ,Fun_Name : db_insert_cntry_amt_limits , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_cntry_amt_limits ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_fcf02( pFCF02 fcf02_ptr, pCHAR ErrorMsg )
{
   fcf02_to_db( fcf02_ptr );

	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL INSERT INTO fcf02
     ( card_type,               
       card_nbr,
       action_code,
       crind_autocard,
       odometer_required,
       order_number_required,
       signature_required,
       driver_flag,
       vehicle_id_flag,
       fleet_id_flag,
       driver_id_flag,
       registration_number,
       super,
       super_low_lead,
       gold,
       autogas,
       unleaded,
       diesel,
       oil,
       service,
       accessories,
       tires,
       batteries,
       repairs_maint,
       shop,
       clean_and_go,
       accident_and_damage,
       meals,
       parking,
       last_odometer_reading,
       value_limits,
       litre_limits,
       time_limits
     )               
   VALUES(  :pte_fcf02.card_type,
            :pte_fcf02.card_nbr,
            :pte_fcf02.action_code,
            :pte_fcf02.crind_autocard,
            :pte_fcf02.odometer_required,
            :pte_fcf02.order_number_required,
            :pte_fcf02.signature_required,
            :pte_fcf02.driver_flag,
            :pte_fcf02.vehicle_id_flag,
            :pte_fcf02.fleet_id_flag,
            :pte_fcf02.driver_id_flag,
            :pte_fcf02.registration_number,
            :pte_fcf02.super,
            :pte_fcf02.super_low_lead,
            :pte_fcf02.gold,
            :pte_fcf02.autogas,
            :pte_fcf02.unleaded,
            :pte_fcf02.diesel,
            :pte_fcf02.oil,
            :pte_fcf02.service,
            :pte_fcf02.accessories,
            :pte_fcf02.tires,
            :pte_fcf02.batteries,
            :pte_fcf02.repairs_maint,
            :pte_fcf02.shop,
            :pte_fcf02.clean_and_go,
            :pte_fcf02.accident_and_damage,
            :pte_fcf02.meals,
            :pte_fcf02.parking,
            :pte_fcf02.last_odometer_reading,
            :pte_fcf02.value_limits,
            :pte_fcf02.litre_limits,
            :pte_fcf02.time_limits
      );
      
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : FCF02 ,Fun_Name : db_insert_fcf02 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_fcf02 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_omc01( pOMC01 omc01_ptr, pCHAR ErrorMsg )
{
   omc01_to_db( omc01_ptr );

	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL INSERT INTO omc01
     ( merchant_id,
	card_nbr,
	max_repeat,
	repeated,
	expiry_date,
	peso_amt_limit,
	usd_amt_limit,
	bypass,        
	future_use1,   
	future_use2,   
	future_use3,   
	future_use4    
     )               
   VALUES(:pte_omc01.merchant_id,
	:pte_omc01.card_nbr,
	:pte_omc01.max_repeat,
	:pte_omc01.repeated,
	:pte_omc01.expiry_date,
	:pte_omc01.peso_amt_limit,
	:pte_omc01.usd_amt_limit,
	:pte_omc01.bypass,     
	:pte_omc01.future_use1,
	:pte_omc01.future_use2,
	:pte_omc01.future_use3,
	:pte_omc01.future_use4 
      );

	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : OMC01 ,Fun_Name : db_insert_omc01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_omc01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_mcc01( pMCC01 mcc01_ptr, pCHAR ErrorMsg )
{
   mcc01_to_db( mcc01_ptr );
	int low_count = 0, high_count = 0;

	db_count_mcc01(pte_mcc01.low,  &low_count,  ErrorMsg);
	db_count_mcc01(pte_mcc01.high, &high_count, ErrorMsg);
	
	printf("%d - %d\n",low_count, high_count);
	if(low_count > 0 || high_count > 0)
	{
		sprintf(ErrorMsg, "Given Range overlaps with existing range");
		return PTEMSG_DATABASE_ERROR;
	}
	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL INSERT INTO MCC01
     ( low,
	high,
	allow
     )               
   VALUES(:pte_mcc01.low,
	:pte_mcc01.high,
	:pte_mcc01.allow
      );
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
     if(duration >= db_error_statics_value)
	 {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCC01 ,Fun_Name : db_insert_mcc01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_mcc01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_ccf02p( pCCF02P ccf02p_ptr, pCHAR ErrorMsg )
{
   ccf02p_to_db( ccf02p_ptr );

 /* db_ccf02p.pin.len =100;
   memcpy(db_ccf02p.pin.pin_data, pte_ccf02p.pin, sizeof(pte_ccf02p.pin)); */
   
	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL INSERT INTO ccf02p
     ( card_type,               
       card_nbr,
       primary_acct_nbr,
       pin_offset,
       caf_profile_id,
       status,     
       date_added,    
       maint_date, 
       changed_by,           
       card_class,          
       expire_date,          
       effect_date,    
       percent_deposit,
       percent_avail_allowed,
       credit_line,
       outstanding_auths,
       allowed,
       country_code,
       currency_code,
       peso_saving_acct,   
       peso_current_acct,  
       dollar_saving_acct, 
       dollar_current_acct,
       product_codes, 
       cash_bonus_eligible,     
       visa_purchase_card, 
       related_acct_type_1,
       related_acct_nbr_1,
       related_acct_type_2,
       related_acct_nbr_2,
       related_acct_type_3,
       related_acct_nbr_3,
       related_acct_type_4,
       related_acct_nbr_4,
       related_acct_type_5,
       related_acct_nbr_5,
       related_acct_type_6,
       related_acct_nbr_6,
       related_acct_type_7,
       related_acct_nbr_7,
       related_acct_type_8,
       related_acct_nbr_8, 
       related_acct_type_9,
       related_acct_nbr_9,
       related_acct_type_10,
       related_acct_nbr_10,
       pin_verification_override,
       pin,
       pvki,
       add_on_rate,
       add_on_term,
       peso_tran_limit,
       dollar_tran_limit
     )               
   VALUES(  :pte_ccf02p.card_type,
            :pte_ccf02p.card_nbr,
            :pte_ccf02p.primary_acct_nbr,
            :pte_ccf02p.pin_offset,
            :pte_ccf02p.caf_profile_id,
            :pte_ccf02p.status,           
            :pte_ccf02p.date_added,           
            :pte_ccf02p.maint_date,           
            :pte_ccf02p.changed_by,           
            :pte_ccf02p.card_class,           
            :pte_ccf02p.expire_date,           
            :pte_ccf02p.effect_date,           
            :pte_ccf02p.percent_deposit,           
            :pte_ccf02p.percent_avail_allowed,           
            :pte_ccf02p.credit_line,           
            :pte_ccf02p.outstanding_auths,           
            :pte_ccf02p.allowed,           
            :pte_ccf02p.country_code,           
            :pte_ccf02p.currency_code,
            :pte_ccf02p.peso_saving_acct,   
            :pte_ccf02p.peso_current_acct,  
            :pte_ccf02p.dollar_saving_acct, 
            :pte_ccf02p.dollar_current_acct,
            :pte_ccf02p.product_codes,   
            :pte_ccf02p.cash_bonus_eligible,   
            :pte_ccf02p.visa_purchase_card,      
            :pte_ccf02p.related_acct_type_1,           
            :pte_ccf02p.related_acct_nbr_1,           
            :pte_ccf02p.related_acct_type_2,           
            :pte_ccf02p.related_acct_nbr_2,           
            :pte_ccf02p.related_acct_type_3,           
            :pte_ccf02p.related_acct_nbr_3,           
            :pte_ccf02p.related_acct_type_4,           
            :pte_ccf02p.related_acct_nbr_4,           
            :pte_ccf02p.related_acct_type_5,           
            :pte_ccf02p.related_acct_nbr_5,           
            :pte_ccf02p.related_acct_type_6,           
            :pte_ccf02p.related_acct_nbr_6,           
            :pte_ccf02p.related_acct_type_7,           
            :pte_ccf02p.related_acct_nbr_7,           
            :pte_ccf02p.related_acct_type_8,           
            :pte_ccf02p.related_acct_nbr_8,           
            :pte_ccf02p.related_acct_type_9,           
            :pte_ccf02p.related_acct_nbr_9,           
            :pte_ccf02p.related_acct_type_10,           
            :pte_ccf02p.related_acct_nbr_10,           
            :pte_ccf02p.pin_verification_override,           
            :pte_ccf02p.pin,
            :pte_ccf02p.pvki,
            :pte_ccf02p.add_on_rate,
            :pte_ccf02p.add_on_term,
            :pte_ccf02p.peso_tran_limit,
            :pte_ccf02p.dollar_tran_limit
      );
      
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF02P ,Fun_Name : db_insert_ccf02p , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_ccf02p ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_ccf04( pCCF04 ccf04_ptr, pCHAR ErrorMsg )
{
   ccf04_to_db( ccf04_ptr );

	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL INSERT INTO ccf04
     ( card_type,               
       card_nbr,
       mcc_lo_range,
       mcc_hi_range
     )               
   VALUES(  :pte_ccf04.card_type,
            :pte_ccf04.card_nbr,
            :pte_ccf04.mcc_lo_range,
            :pte_ccf04.mcc_hi_range
          
      );
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF04 ,Fun_Name : db_insert_ccf04 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_ccf04 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}




/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_ccf02h( pCCF02H ccf02h_ptr, pCHAR ErrorMsg )
{
   ccf02h_to_db( ccf02h_ptr );

	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL INSERT INTO ccf02h
     ( card_type,               
       card_nbr,
       caf_profile_id,
       status,     
       date_added,    
       maint_date, 
       changed_by
     )
   VALUES( :pte_ccf02h.card_type,
            :pte_ccf02h.card_nbr,
            :pte_ccf02h.caf_profile_id,
            :pte_ccf02h.status,           
            :pte_ccf02h.date_added,           
            :pte_ccf02h.maint_date,           
            :pte_ccf02h.changed_by
          );
     if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF02H ,Fun_Name : db_insert_ccf02h , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }     
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_ccf02h ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}                   

/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_atp02( pATP02 atp02_ptr, pCHAR ErrorMsg )
{
   atp02_to_db( atp02_ptr );

	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL INSERT INTO atp02
      ( workstation_id,
        workstation_status
      )
   VALUES( :pte_atp02.workstation_id,
        :pte_atp02.workstation_status
      );
      
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ATP02 ,Fun_Name : db_insert_atp02 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_atp02 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/

/*************************************************************************************/

BYTE db_insert_atp01( pATP01 atp01_ptr, pCHAR ErrorMsg )

{

   atp01_to_db( atp01_ptr );

	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL INSERT INTO atp01
      ( site_name, tlf_log_date,
        subsystem_name_1, 
        subsystem_name_2,
        subsystem_name_3,
        subsystem_name_4,
        subsystem_name_5,
        subsystem_name_6,
        subsystem_name_7,
        subsystem_name_8,
        subsystem_name_9,
        subsystem_name_10,
        subsystem_name_11,
        subsystem_name_12,
        subsystem_name_13,
        subsystem_name_14,
        subsystem_name_15,
        subsystem_name_16,
        subsystem_name_17,
        subsystem_name_18,
        subsystem_name_19,
        subsystem_name_20
      )

   VALUES( :pte_atp01.site_name, :pte_atp01.tlf_log_date,
        :pte_atp01.subsystem_name_1,
        :pte_atp01.subsystem_name_2,
        :pte_atp01.subsystem_name_3,
        :pte_atp01.subsystem_name_4,
        :pte_atp01.subsystem_name_5,
        :pte_atp01.subsystem_name_6,
        :pte_atp01.subsystem_name_7,
        :pte_atp01.subsystem_name_8,
        :pte_atp01.subsystem_name_9,
        :pte_atp01.subsystem_name_10,
        :pte_atp01.subsystem_name_11,
        :pte_atp01.subsystem_name_12,
        :pte_atp01.subsystem_name_13,
        :pte_atp01.subsystem_name_14,
        :pte_atp01.subsystem_name_15,
        :pte_atp01.subsystem_name_16,
        :pte_atp01.subsystem_name_17,
        :pte_atp01.subsystem_name_18,
        :pte_atp01.subsystem_name_19,
        :pte_atp01.subsystem_name_20
      );

	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ATP01 ,Fun_Name : db_insert_atp01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   
   if ( SQLCODE != 0 )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_atp01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;

}

/*************************************************************************************/

/*************************************************************************************/

BYTE db_insert_hst01( pHST01 hst01_ptr, pCHAR ErrorMsg)

{
   hst01_to_db( hst01_ptr );

	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL INSERT INTO hst01
      ( unique_id, file_name, file_primary_key, changed_by, date_modified, time_modified,
        field_tag, previous_data, current_data, reserved
      )
   VALUES(:pte_hst01.unique_id, :pte_hst01.file_name, :pte_hst01.file_primary_key,
        :pte_hst01.changed_by, :pte_hst01.date_modified, :pte_hst01.time_modified,    
        :pte_hst01.field_tag, :pte_hst01.previous_data, :pte_hst01.current_data, :pte_hst01.reserved
      );

	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : HST01 ,Fun_Name : db_insert_hst01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }

   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_hst01 ,ST1:%d , ST2:%d   ,Unique ID : %s, File name : %s ,File Primary Key : %s ,user name : %s, date modified : %s ,Field tag : %s  ",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_hst01.unique_id,pte_hst01.file_name,pte_hst01.file_primary_key,pte_hst01.changed_by,pte_hst01.date_modified,pte_hst01.field_tag);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;

}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_bin01( pBIN01 bin01_ptr, pCHAR ErrorMsg)
{
   EXEC SQL BEGIN DECLARE SECTION;
   int NumRowsReturned = 0;
   EXEC SQL END DECLARE SECTION;
   

   bin01_to_db( bin01_ptr );

	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL SELECT COUNT(*) INTO :NumRowsReturned FROM bin01
   WHERE (type = :pte_bin01.type) AND (length = :pte_bin01.length) AND NOT (low  > :pte_bin01.high OR
             high  < :pte_bin01.low);
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BIN01 ,Fun_Name : db_insert_bin01_C , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (NumRowsReturned != 0) 
   {
      strcpy (ErrorMsg, "Binn Range values cannot overlap each other") ;
      return (PTEMSG_DATABASE_ERROR) ;
   }  

   bin01_to_db( bin01_ptr );

	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL INSERT INTO bin01
      ( type, low, high, length, pan_length, auth_ind,
        caf_profile_id, destination_name, alt_destination_name, credit_subtype, 
        description, card_type, settle_file_prefix, card_family, acquirer_id1,acquirer_id2,
		acquirer_id3,acquirer_id4,acquirer_id5,acquirer_id6,acquirer_id7,acquirer_id8,
		acquirer_id9,acquirer_id10,acquirer_id11,acquirer_id12,acquirer_id13,acquirer_id14,
		acquirer_id15,acquirer_id16,acquirer_id17,acquirer_id18,acquirer_id19,acquirer_id20,				        
		mcc1_low,mcc1_high,mcc2_low,mcc2_high,mcc3_low,mcc3_high,mcc4_low,mcc4_high,
		mcc5_low,mcc5_high,mcc6_low,mcc6_high,mcc7_low,mcc7_high,mcc8_low,mcc8_high,
		mcc9_low,mcc9_high,mcc10_low,mcc10_high,mod_check
      )
   VALUES(:pte_bin01.type, :pte_bin01.low, :pte_bin01.high, :pte_bin01.length, :pte_bin01.pan_length, :pte_bin01.auth_ind,    
        :pte_bin01.caf_profile_id, :pte_bin01.destination_name, 
        :pte_bin01.alt_destination_name, :pte_bin01.credit_subtype,
        :pte_bin01.description, :pte_bin01.card_type,
        :pte_bin01.settle_file_prefix,
		:pte_bin01.card_family,:pte_bin01.acquirer_id1,
        :pte_bin01.acquirer_id2,:pte_bin01.acquirer_id3,
		:pte_bin01.acquirer_id4,:pte_bin01.acquirer_id5,
		:pte_bin01.acquirer_id6,:pte_bin01.acquirer_id7,
		:pte_bin01.acquirer_id8,:pte_bin01.acquirer_id9,
		:pte_bin01.acquirer_id10,:pte_bin01.acquirer_id11,
		:pte_bin01.acquirer_id12,:pte_bin01.acquirer_id13,
		:pte_bin01.acquirer_id14,:pte_bin01.acquirer_id15,
		:pte_bin01.acquirer_id16,:pte_bin01.acquirer_id17,
		:pte_bin01.acquirer_id18,:pte_bin01.acquirer_id19,
		:pte_bin01.acquirer_id20,:pte_bin01.mcc1_low,:pte_bin01.mcc1_high,
		:pte_bin01.mcc2_low,:pte_bin01.mcc2_high,:pte_bin01.mcc3_low,:pte_bin01.mcc3_high,
		:pte_bin01.mcc4_low,:pte_bin01.mcc4_high,:pte_bin01.mcc5_low,:pte_bin01.mcc5_high,
		:pte_bin01.mcc6_low,:pte_bin01.mcc6_high,:pte_bin01.mcc7_low,:pte_bin01.mcc7_high,
		:pte_bin01.mcc8_low,:pte_bin01.mcc8_high,:pte_bin01.mcc9_low,:pte_bin01.mcc9_high,
		:pte_bin01.mcc10_low,:pte_bin01.mcc10_high,:pte_bin01.mod_check

      );
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BIN01 ,Fun_Name : db_insert_bin01_I , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_bin01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_ucf01( pUCF01 ucf01_ptr, pCHAR ErrorMsg )
{
   ucf01_to_db( ucf01_ptr );

	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL INSERT INTO ucf01
      ( name, password, date_added, group_id, subsystem_name_1, action_1,
        subsystem_name_2, action_2, subsystem_name_3, action_3,
        subsystem_name_4, action_4, subsystem_name_5, action_5, 
        subsystem_name_6, action_6, subsystem_name_7, action_7,
        subsystem_name_8, action_8, subsystem_name_9, action_9,
        subsystem_name_10, action_10, subsystem_name_11, action_11,
        subsystem_name_12, action_12, subsystem_name_13, action_13,
        subsystem_name_14, action_14, subsystem_name_15, action_15,
        terminals_1, terminals_2, terminals_3, terminals_4, terminals_5,
        terminals_6, terminals_7, terminals_8, terminals_9, terminals_10,
         password_1, password_2, password_3, password_4	,         
         accountstatus	, password_modified_date,
 		user_info_1, user_info_2, user_info_3, user_info_4, user_info_5, user_info_6, user_info_7, ekey, dekey, 
        subsystem_name_16, action_16, subsystem_name_17, action_17,
        subsystem_name_18, action_18, subsystem_name_19, action_19,
        subsystem_name_20, action_20, buffer, Login_WorkStationId, Login_Status, User_Status, Days_Inactive, Login_Date, User_Expiry_Date,Date_Of_Deactivation,
          password_5, password_6, password_7, password_8,
           password_9, password_10,Logout_Date
      )
   VALUES( :pte_ucf01.name, :pte_ucf01.password, :pte_ucf01.date_added, :pte_ucf01.group_id, :pte_ucf01.subsystem_name_1, :pte_ucf01.action_1,
        :pte_ucf01.subsystem_name_2, :pte_ucf01.action_2, :pte_ucf01.subsystem_name_3, :pte_ucf01.action_3,
        :pte_ucf01.subsystem_name_4, :pte_ucf01.action_4, :pte_ucf01.subsystem_name_5, :pte_ucf01.action_5, 
        :pte_ucf01.subsystem_name_6, :pte_ucf01.action_6, :pte_ucf01.subsystem_name_7, :pte_ucf01.action_7,
        :pte_ucf01.subsystem_name_8, :pte_ucf01.action_8, :pte_ucf01.subsystem_name_9, :pte_ucf01.action_9,
        :pte_ucf01.subsystem_name_10, :pte_ucf01.action_10, :pte_ucf01.subsystem_name_11, :pte_ucf01.action_11,
        :pte_ucf01.subsystem_name_12, :pte_ucf01.action_12, :pte_ucf01.subsystem_name_13, :pte_ucf01.action_13,
        :pte_ucf01.subsystem_name_14, :pte_ucf01.action_14, :pte_ucf01.subsystem_name_15, :pte_ucf01.action_15,
        :pte_ucf01.terminals_1, :pte_ucf01.terminals_2, :pte_ucf01.terminals_3, :pte_ucf01.terminals_4, :pte_ucf01.terminals_5,
        :pte_ucf01.terminals_6, :pte_ucf01.terminals_7, :pte_ucf01.terminals_8, :pte_ucf01.terminals_9, :pte_ucf01.terminals_10,
        :pte_ucf01.password_1,  :pte_ucf01.password_2,  :pte_ucf01.password_3,  :pte_ucf01.password_4 ,          
         :pte_ucf01.accountstatus ,
	    :pte_ucf01.password_modified_date, :pte_ucf01.user_info_1,  :pte_ucf01.user_info_2,  :pte_ucf01.user_info_3,  :pte_ucf01.user_info_4,
	    :pte_ucf01.user_info_5,  :pte_ucf01.user_info_6,  :pte_ucf01.user_info_7,  :pte_ucf01.ekey,  :pte_ucf01.dekey, 
        :pte_ucf01.subsystem_name_16, :pte_ucf01.action_16, :pte_ucf01.subsystem_name_17, :pte_ucf01.action_17,
        :pte_ucf01.subsystem_name_18, :pte_ucf01.action_18, :pte_ucf01.subsystem_name_19, :pte_ucf01.action_19,
        :pte_ucf01.subsystem_name_20, :pte_ucf01.action_20, :pte_ucf01.buffer, :pte_ucf01.Login_WorkStationId,
        :pte_ucf01.Login_Status, :pte_ucf01.User_Status, :pte_ucf01.Days_Inactive, :pte_ucf01.Login_Date, :pte_ucf01.User_Expiry_Date,
        :pte_ucf01.Date_Of_Deactivation,:pte_ucf01.password_5,:pte_ucf01.password_6,:pte_ucf01.password_7,:pte_ucf01.password_8,:pte_ucf01.password_9,
         :pte_ucf01.password_10,:pte_ucf01.Logout_Date
   			   
      );
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF01 ,Fun_Name : db_insert_ucf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_ucf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}

/*************************************************************************************/
/*Added UCF03 Table for PCI Changes by TF-Srikanth */
/*************************************************************************************/
BYTE db_insert_ucf03( pUCF03 ucf03_ptr, pCHAR ErrorMsg )
{
   ucf03_to_db( ucf03_ptr );

	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL INSERT INTO ucf03
      ( name, password_1 , password_2 , password_3 , password_4 , 
	    accountstatus, password_modified_date, user_info_1, user_info_2, user_info_3, user_info_4, ekey, dekey       
      )
   VALUES( :pte_ucf03.name, :pte_ucf03.password_1, :pte_ucf03.password_2, :pte_ucf03.password_3, :pte_ucf03.password_4,
         :pte_ucf03.accountstatus, :pte_ucf03.password_modified_date, :pte_ucf03.user_info_1, :pte_ucf03.user_info_2
		 , :pte_ucf03.user_info_3, :pte_ucf03.user_info_4, :pte_ucf03.ekey, :pte_ucf03.dekey
      );
      
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF03 ,Fun_Name : db_insert_ucf03 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_ucf03 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_ucf02( pUCF02 ucf02_ptr, pCHAR ErrorMsg )
{
   ucf02_to_db( ucf02_ptr );
   
	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL INSERT INTO ucf02
      ( group_id, date_added, subsystem_name_1, action_1,
        subsystem_name_2, action_2, subsystem_name_3, action_3,
        subsystem_name_4, action_4, subsystem_name_5, action_5, 
        subsystem_name_6, action_6, subsystem_name_7, action_7,
        subsystem_name_8, action_8, subsystem_name_9, action_9,
        subsystem_name_10, action_10, subsystem_name_11, action_11,
        subsystem_name_12, action_12, subsystem_name_13, action_13,
        subsystem_name_14, action_14, subsystem_name_15, action_15,
        terminals_1, terminals_2, terminals_3, terminals_4, terminals_5,
        terminals_6, terminals_7, terminals_8, terminals_9, terminals_10, 
        subsystem_name_16, action_16, subsystem_name_17, action_17,
        subsystem_name_18, action_18, subsystem_name_19, action_19,
        subsystem_name_20, action_20, buffer
      )
   VALUES( :pte_ucf02.group_id, :pte_ucf02.date_added, :pte_ucf02.subsystem_name_1, :pte_ucf02.action_1,
        :pte_ucf02.subsystem_name_2, :pte_ucf02.action_2, :pte_ucf02.subsystem_name_3, :pte_ucf02.action_3,
        :pte_ucf02.subsystem_name_4, :pte_ucf02.action_4, :pte_ucf02.subsystem_name_5, :pte_ucf02.action_5, 
        :pte_ucf02.subsystem_name_6, :pte_ucf02.action_6, :pte_ucf02.subsystem_name_7, :pte_ucf02.action_7,
        :pte_ucf02.subsystem_name_8, :pte_ucf02.action_8, :pte_ucf02.subsystem_name_9, :pte_ucf02.action_9,
        :pte_ucf02.subsystem_name_10, :pte_ucf02.action_10, :pte_ucf02.subsystem_name_11, :pte_ucf02.action_11,
        :pte_ucf02.subsystem_name_12, :pte_ucf02.action_12, :pte_ucf02.subsystem_name_13, :pte_ucf02.action_13,
        :pte_ucf02.subsystem_name_14, :pte_ucf02.action_14, :pte_ucf02.subsystem_name_15, :pte_ucf02.action_15,
        :pte_ucf02.terminals_1, :pte_ucf02.terminals_2, :pte_ucf02.terminals_3, :pte_ucf02.terminals_4, :pte_ucf02.terminals_5,
        :pte_ucf02.terminals_6, :pte_ucf02.terminals_7, :pte_ucf02.terminals_8, :pte_ucf02.terminals_9, :pte_ucf02.terminals_10, 
        :pte_ucf02.subsystem_name_16, :pte_ucf02.action_16, :pte_ucf02.subsystem_name_17, :pte_ucf02.action_17,
        :pte_ucf02.subsystem_name_18, :pte_ucf02.action_18, :pte_ucf02.subsystem_name_19, :pte_ucf02.action_19,
        :pte_ucf02.subsystem_name_20, :pte_ucf02.action_20, :pte_ucf02.buffer
      );
      
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF02 ,Fun_Name : db_insert_ucf02 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_ucf02 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_ucf01_count_by_group( pUCF02 ucf02_ptr, pCHAR crf_count, pCHAR ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
   int NumRowsReturned = 0;
   EXEC SQL END DECLARE SECTION;
   
   ucf02_to_db( ucf02_ptr );

	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL SELECT COUNT(*) INTO :NumRowsReturned FROM ucf01 WHERE  group_id = :pte_ucf02.group_id;

   	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF01 ,Fun_Name : db_get_ucf01_count_by_group , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_ucf01_count_by_group ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }
   else
   {
      itoa(NumRowsReturned, crf_count, 10);
      return PTEMSG_OK;
   }
}
 
/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_crf01_count( pCHAR crf_count, pCHAR ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
   int NumRowsReturned = 0;
   EXEC SQL END DECLARE SECTION;
 
	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL SELECT COUNT(*) INTO :NumRowsReturned FROM crf01;

   	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CRF01 ,Fun_Name : db_get_crf01_count , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_crf01_count ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }
   else
   {
      itoa(NumRowsReturned, crf_count, 10);
      return PTEMSG_OK;
   }
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_csf01_count( pCHAR csf_count, pCHAR ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
   int NumRowsReturned = 0;
   EXEC SQL END DECLARE SECTION;
   
	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL SELECT COUNT(*) INTO :NumRowsReturned FROM csf01;

   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CSF01 ,Fun_Name : db_get_csf01_count , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_csf01_count ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }
   else
   {
      itoa(NumRowsReturned, csf_count, 10);
      return PTEMSG_OK;
   }
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_faf01_count( pCHAR faf_count, pCHAR ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
   int NumRowsReturned = 0;
   EXEC SQL END DECLARE SECTION;
 
	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL SELECT COUNT(*) INTO :NumRowsReturned FROM faf01;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : FAF01 ,Fun_Name : db_get_faf01_count , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_faf01_count ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }
   else
   {
      itoa(NumRowsReturned, faf_count, 10);
      return PTEMSG_OK;
   }
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_caf01_count( pCHAR caf_count, pCHAR ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
   int NumRowsReturned = 0;
   EXEC SQL END DECLARE SECTION;

	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL SELECT COUNT(*) INTO :NumRowsReturned FROM caf01;

	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01 ,Fun_Name : db_get_caf01_count , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_caf01_count ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }
   else
   {
      itoa(NumRowsReturned, caf_count, 10);
      return PTEMSG_OK;
   }
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_atp02_count( pCHAR atp_count, pCHAR ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
   int NumRowsReturned = 0;
   EXEC SQL END DECLARE SECTION;

	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL SELECT COUNT(*) INTO :NumRowsReturned FROM atp02;

   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ATP02 ,Fun_Name : db_get_atp02_count , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_atp02_count ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }
   else
   {
      itoa(NumRowsReturned, atp_count, 10);
      return PTEMSG_OK;
   }
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_bin01_count( pCHAR binn_count, pCHAR ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
   int NumRowsReturned = 0;
   EXEC SQL END DECLARE SECTION;

	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL SELECT COUNT(*) INTO :NumRowsReturned FROM bin01;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BIN01 ,Fun_Name : db_get_bin01_count , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_bin01_count ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }
   else
   {
      itoa(NumRowsReturned, binn_count, 10);
      return PTEMSG_OK;
   }
}

/******************************************************************************/

/******************************************************************************/
BYTE db_get_bon01_count( pCHAR bon_count, pCHAR ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
      int NumRowsReturned = 0;
   EXEC SQL END DECLARE SECTION;

	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL SELECT COUNT(*) INTO :NumRowsReturned FROM bon01;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BON01 ,Fun_Name : db_get_bon01_count , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_bon01_count ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }
   else
   {
      itoa(NumRowsReturned, bon_count, 10);
   }
   return PTEMSG_OK;
}


/******************************************************************************/
/******************************************************************************/
BYTE db_get_bon02_count( pCHAR bon_count, pCHAR ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
      int NumRowsReturned = 0;
   EXEC SQL END DECLARE SECTION;

	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL SELECT COUNT(*) INTO :NumRowsReturned FROM bon02;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BON02 ,Fun_Name : db_get_bon02_count , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_bon02_count ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }
   else
   {
      itoa(NumRowsReturned, bon_count, 10);
   }
   return PTEMSG_OK;
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_bpf01_sch_list( pBPF01 Batch_Profile,
                        pBPF01_SCH_LIST Bpf01List,
                        pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char profile_id[16];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Bpf01List, 0, sizeof(BPF01_SCH_LIST) );
   strcpy(Bpf01List->num_returned,"0");
   strncpy( profile_id, Batch_Profile->primary_key.profile_id, sizeof(profile_id) );

	if ( db_error_statics_flag == true )
    {
      		start_time = ptetime_get_time();
    }
   EXEC SQL DECLARE bpf01_cursor1 CURSOR FOR
      SELECT * from bpf01
      WHERE  profile_id = :profile_id;
    if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BPF01 ,Fun_Name : db_get_bpf01_sch_list , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN bpf01_cursor1;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < SCH_MAX_LIST_SIZE; temp++ )
   {
   		if ( db_error_statics_flag == true )
    	{
      		start_time = ptetime_get_time();
        }
      memset(&db_bpf01, 0x00, sizeof(db_bpf01));
      EXEC SQL FETCH bpf01_cursor1
      INTO :db_bpf01;
      
	   if ( db_error_statics_flag == true )
  	   {
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BPF01 ,Fun_Name : db_get_bpf01_sch_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA  )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE bpf01_cursor1;
         
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_bpf01_sch_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      db_to_bpf01(&Bpf01List->batch_profile[temp]);
      itoa(temp + 1, Bpf01List->num_returned, 10);
   }

   EXEC SQL CLOSE bpf01_cursor1;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_bpf01_sch_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_atp02_service_list( pATP02 atp02_ptr,
                               pATP02_LIST Atp02_List,
                               pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char workstation_id[21];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Atp02_List, 0, sizeof(ATP02_LIST) );
   strcpy(Atp02_List->num_returned,"0");
   strncpy( workstation_id, atp02_ptr->primary_key.workstation_id, sizeof(workstation_id) );

	if ( db_error_statics_flag == true )
    {
      	start_time = ptetime_get_time();
    }
   EXEC SQL DECLARE atp02_cursor2 CURSOR FOR
      SELECT * from atp02
      WHERE  workstation_id >= :workstation_id;
    if ( db_error_statics_flag == true )
  	{
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ATP02 ,Fun_Name : db_get_atp02_service_list_COURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN atp02_cursor2;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < SERVICE_LIST_SIZE; temp++ )
   {
   	   if ( db_error_statics_flag == true )
      {
      	start_time = ptetime_get_time();
      }
      memset(&db_atp02, 0x00, sizeof(db_atp02));
      EXEC SQL FETCH atp02_cursor2
      INTO :db_atp02;
		if ( db_error_statics_flag == true )
  	   {
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ATP02 ,Fun_Name : db_get_atp02_service_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
        }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA  )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE atp02_cursor2;
  		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_atp02_service_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      db_to_atp02(&Atp02_List->atp_list[temp]);
      itoa(temp + 1, Atp02_List->num_returned, 10);
   }

   EXEC SQL CLOSE atp02_cursor2;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_atp02_service_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;

}


/*************************************************************************************/
/*    
      Revision History: Modified WHERE clause from '>' to '>=' 
      Authour         :supriya, 20th,Nov,98.  
 */
/*************************************************************************************/
BYTE db_get_ccf10_gui_list( pCCF10 ccf10_ptr,
                                pCCF10_GUI_LIST Ccf10_List,
                                pCHAR ErrorMsg )
{
    EXEC SQL BEGIN DECLARE SECTION;
    char card_nbr[20];
    char retrieval_ref_num[13];
    char primary_acct_nbr[20];
    int temp;
    int curs_flag;
    EXEC SQL END DECLARE SECTION;

   memset( Ccf10_List, 0, sizeof(CCF10_GUI_LIST) );
   strcpy(Ccf10_List->num_returned,"0");
   strncpy( card_nbr, ccf10_ptr->primary_key.card_nbr, sizeof(card_nbr) );
   strncpy( retrieval_ref_num, ccf10_ptr->primary_key.retrieval_ref_num, sizeof(retrieval_ref_num) );
   strncpy( primary_acct_nbr, ccf10_ptr->primary_acct_nbr, sizeof(primary_acct_nbr) );

   if(strlen(primary_acct_nbr) == 0)
      curs_flag = 1;
   else
      curs_flag = 2;

   if(curs_flag == 1)
   {
	  if ( db_error_statics_flag == true )
      {
      	start_time = ptetime_get_time();
      }
      EXEC SQL DECLARE ccf10_cursor1 CURSOR FOR
         SELECT * from ccf10
         WHERE  retrieval_ref_num >= :retrieval_ref_num AND card_nbr = :card_nbr;
         if ( db_error_statics_flag == true )
  	   {
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF10 ,Fun_Name : db_get_ccf10_gui_list_CURSOR1 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
        }
   }
   else
   { 
	  if ( db_error_statics_flag == true )
      {
      	start_time = ptetime_get_time();
      }
      EXEC SQL DECLARE ccf10_cursor2 CURSOR FOR
         SELECT * from ccf10
         WHERE  retrieval_ref_num >= :retrieval_ref_num AND primary_acct_nbr = :primary_acct_nbr;
         if ( db_error_statics_flag == true )
  	    {
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF10 ,Fun_Name : db_get_ccf10_gui_list_CURSOR2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
        }
   }

   EXEC SQL WHENEVER SQLERROR goto sql_error;
   
   if(curs_flag == 1)
      EXEC SQL OPEN ccf10_cursor1;
   else
      EXEC SQL OPEN ccf10_cursor2;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
      memset(&db_ccf10, 0x00, sizeof(db_ccf10));
      if(curs_flag == 1)
      {
      	if ( db_error_statics_flag == true )
      	{
      		start_time = ptetime_get_time();
      	}
         EXEC SQL FETCH ccf10_cursor1
         INTO :db_ccf10;
         if ( db_error_statics_flag == true )
  	    {
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF10 ,Fun_Name : db_get_ccf10_gui_list_FETCH1 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
         }
      }
      else
      {
      	if ( db_error_statics_flag == true )
      	{
      		start_time = ptetime_get_time();
      	}
         EXEC SQL FETCH ccf10_cursor2
         INTO :db_ccf10;
         if ( db_error_statics_flag == true )
  	    {
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF10 ,Fun_Name : db_get_ccf10_gui_list_FETCH2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
        }
      }

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA  )
      {
         if(curs_flag == 1)
         {
            SQL_CODE = SQLCODE;
            EXEC SQL CLOSE ccf10_cursor1;
			memset(er_buf,0x00,sizeof(er_buf));
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In  db_get_ccf10_gui_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;

         }
         else
         {
            SQL_CODE = SQLCODE;
            EXEC SQL CLOSE ccf10_cursor2; 
           
			memset(er_buf,0x00,sizeof(er_buf));
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In  db_get_ccf10_gui_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
    
          }
      }
      db_to_ccf10(&Ccf10_List->ccf10_record[temp]);
      itoa(temp + 1, Ccf10_List->num_returned, 10);
   }

   if(curs_flag == 1)
      EXEC SQL CLOSE ccf10_cursor1;
   else
      EXEC SQL CLOSE ccf10_cursor2;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;

	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_ccf10_gui_list ,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}


/*************************************************************************************/
/*    
      Revision History: Modified WHERE clause from '>' to '>=' 
      Authour         :supriya, 20th,Nov,98.  
 */
/*************************************************************************************/
BYTE db_get_mct01_gui_list( pMCT01 mct01_ptr,
                                pMCT01_GUI_LIST Mct01_List,
                                pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char card_type[5];
    char merchant_id[16];
    char organization_id[5];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Mct01_List, 0, sizeof(MCT01_GUI_LIST) );
   strcpy(Mct01_List->num_returned,"0");
   strncpy( card_type, mct01_ptr->primary_key.card_type, sizeof(card_type) );
   strncpy( merchant_id, mct01_ptr->primary_key.merchant_id, sizeof(merchant_id) );
   strncpy( organization_id, mct01_ptr->primary_key.organization_id, sizeof(organization_id) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DECLARE mct01_cursor2 CURSOR FOR
      SELECT * from mct01
      WHERE  merchant_id = :merchant_id AND organization_id = :organization_id AND card_type >= :card_type;
    if ( db_error_statics_flag == true )
  	{
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCT01 ,Fun_Name : db_get_mct01_gui_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN mct01_cursor2;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
   	  if ( db_error_statics_flag == true )
  	  {
       		start_time = ptetime_get_time();
   	  }
      memset(&db_mct01, 0x00, sizeof(db_mct01));
      EXEC SQL FETCH mct01_cursor2
      INTO :db_mct01;
	  if ( db_error_statics_flag == true )
  	  {
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCT01 ,Fun_Name : db_get_mct01_gui_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE mct01_cursor2;
         
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_mct01_gui_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
             
      }
      db_to_mct01(&Mct01_List->merch_card[temp]);
      itoa(temp + 1, Mct01_List->num_returned, 10);
   }

   EXEC SQL CLOSE mct01_cursor2;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
  
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_mct01_gui_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_mct01_gui_list_by_type( pMCT01 mct01_ptr,
                                pMCT01_GUI_LIST Mct01_List,
                                pCHAR ErrorMsg )
{
    EXEC SQL BEGIN DECLARE SECTION;
    char card_type[5];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Mct01_List, 0, sizeof(MCT01_GUI_LIST) );
   strcpy(Mct01_List->num_returned,"0");
   strncpy( card_type, mct01_ptr->primary_key.card_type, sizeof(card_type) );

	if ( db_error_statics_flag == true )
  	{
       		start_time = ptetime_get_time();
   	}
   EXEC SQL DECLARE mct01_cursor3 CURSOR FOR
      SELECT * from mct01
      WHERE  card_type = :card_type;
    if ( db_error_statics_flag == true )
  	{
     	end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCT01 ,Fun_Name : db_get_mct01_gui_list_by_type_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 	}
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN mct01_cursor3;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE; temp++ )
   {
   	   if ( db_error_statics_flag == true )
  	  {
       		start_time = ptetime_get_time();
   	  }
      memset(&db_mct01, 0x00, sizeof(db_mct01));
      EXEC SQL FETCH mct01_cursor3
      INTO :db_mct01;
		if ( db_error_statics_flag == true )
  	   {
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCT01 ,Fun_Name : db_get_mct01_gui_list_by_type_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
        }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE mct01_cursor3;
         memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In  db_get_mct01_gui_list_by_type ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;
    
      }
      db_to_mct01(&Mct01_List->merch_card[temp]);
      itoa(temp + 1, Mct01_List->num_returned, 10);
   }

   EXEC SQL CLOSE mct01_cursor3;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_mct01_gui_list_by_type ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}


/*************************************************************************************/
/*    
      Revision History: Modified WHERE clause from '>' to '>=' 
      Authour         :supriya, 20th,Nov,98.  
 */
/*************************************************************************************/
BYTE db_get_csf01_gui_list( pCHAR Primary_Key,
                        pCSF01_GUI_LIST Csf01List,
                        pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char status[3];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Csf01List, 0, sizeof(CSF01_GUI_LIST) );
   strcpy( Csf01List->num_returned,"0");
   strncpy( status, Primary_Key, sizeof(status) );

	if ( db_error_statics_flag == true )
  	{
       	start_time = ptetime_get_time();
   	}
   EXEC SQL DECLARE csf01_cursor CURSOR FOR
      SELECT * from csf01
      WHERE  status >= :status order by status asc;
    if ( db_error_statics_flag == true )
    {
     	end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CSF01 ,Fun_Name : db_get_csf01_gui_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 	}
    }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN csf01_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
   	  if ( db_error_statics_flag == true )
  	  {
       		start_time = ptetime_get_time();
   	  }
      memset(&db_csf01, 0x00, sizeof(db_csf01));
      EXEC SQL FETCH csf01_cursor
      INTO :db_csf01;
      
	   if ( db_error_statics_flag == true )
  	   {
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CSF01 ,Fun_Name : db_get_csf01_gui_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
       }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA  )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE csf01_cursor;
  
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_csf01_gui_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      db_to_csf01(&Csf01List->csf01_record[temp]);
      itoa(temp + 1, Csf01List->num_returned, 10);
   }

   EXEC SQL CLOSE csf01_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_csf01_gui_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
   
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_csf01_list( pCSF01_LIST Csf01List,
                        pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Csf01List, 0, sizeof(CSF01_LIST) );
   strcpy( Csf01List->num_returned,"0");

	if ( db_error_statics_flag == true )
  	{
       		start_time = ptetime_get_time();
   	}
   EXEC SQL DECLARE csf02_cursor CURSOR FOR
      SELECT * from csf01;
    if ( db_error_statics_flag == true )
  	{
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CSF01 ,Fun_Name : db_get_csf01_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
    }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN csf02_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < SERVICE_LIST_SIZE; temp++ )
   {
   	  if ( db_error_statics_flag == true )
  	  {
       		start_time = ptetime_get_time();
   	  }
      memset(&db_csf01, 0x00, sizeof(db_csf01));
      EXEC SQL FETCH csf02_cursor
      INTO :db_csf01;
		if ( db_error_statics_flag == true )
  	   {
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CSF01 ,Fun_Name : db_get_csf01_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
        }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA  )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE csf02_cursor;
         
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_csf01_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      db_to_csf01(&Csf01List->csf01_list[temp]);
      itoa(temp + 1, Csf01List->num_returned, 10);
   }

   EXEC SQL CLOSE csf02_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;

	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_csf01_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}


/*************************************************************************************/
/*    
      Revision History: Modified WHERE clause from 'card_nbr >' to 'card_nbr >=' 
      Authour         :supriya, 20th,Nov,98.  
 */
/*************************************************************************************/
BYTE db_get_ccf02p_gui_list( pCHAR Primary_Key,
                        pCCF02P_GUI_LIST Ccf02pList,
                        pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char card_type[2];
    char card_nbr[20];
    varchar db_card_type[2];
    varchar db_card_nbr[20];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Ccf02pList, 0, sizeof(CCF02P_GUI_LIST) );
   strcpy(Ccf02pList->num_returned,"0");
   strncpy( card_type, Primary_Key, sizeof(card_type) );
   strncpy( card_nbr, Primary_Key + sizeof(card_type), sizeof(card_nbr) );

	if ( db_error_statics_flag == true )
  	{
       		start_time = ptetime_get_time();
   	}
   EXEC SQL DECLARE ccf02p_cursor CURSOR FOR
      SELECT card_nbr, card_type from ccf02p
      WHERE  (card_nbr >= :card_nbr AND card_type = :card_type) OR (card_type > :card_type);
	/*  ORDER BY card_nbr, card_type;*/
    if ( db_error_statics_flag == true )
  	{
     	end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF02P ,Fun_Name : db_get_ccf02p_gui_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 	}
    }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN ccf02p_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
   		if ( db_error_statics_flag == true )
  	  {
       		start_time = ptetime_get_time();
   	  }
      memset(&db_ccf02p, 0x00, sizeof(db_ccf02p));
      EXEC SQL FETCH ccf02p_cursor
      INTO db_card_nbr, db_card_type;
	  if ( db_error_statics_flag == true )
  	  {
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : NCF30 ,Fun_Name : db_get_ccf02p_gui_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
       }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA  )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE ccf02p_cursor;
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_ccf02p_gui_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      memcpy( Ccf02pList->ccf02p_pk[temp].card_type, db_card_type.arr, db_card_type.len );
      memcpy( Ccf02pList->ccf02p_pk[temp].card_nbr, db_card_nbr.arr, db_card_nbr.len );
      itoa(temp + 1, Ccf02pList->num_returned, 10);

   }

   EXEC SQL CLOSE ccf02p_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_ccf02p_gui_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}

/*********************************************************************************************/
/*************************************************************************************/
BYTE db_get_mppara01_gui_list( pCHAR Primary_Key,BYTE Select_Flag,
                        pMPPARA01_GUI_LIST Mppara01_Gui_List,
                        pCHAR ErrorMsg )
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   char product_code[15];
   varchar db_product_code[15];
   int temp;
   EXEC SQL END DECLARE SECTION;

   memset( Mppara01_Gui_List, 0, sizeof(MPPARA01_GUI_LIST) );
   strcpy( Mppara01_Gui_List->num_returned,"0");
   strncpy( product_code, Primary_Key , sizeof(product_code) );

   if(Select_Flag == 0)
   {
		if ( db_error_statics_flag == true )
  	  {
       		start_time = ptetime_get_time();
   	  }
      EXEC SQL DECLARE mppara01_cursor1 CURSOR FOR
         SELECT product_code from mppara01
         WHERE  product_code >= :product_code
         ORDER BY product_code, product_code;
         if ( db_error_statics_flag == true )
  	   {
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MPPARA ,Fun_Name : db_get_mppara01_gui_list_CURSOR1 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
        }
   }
   else
   {
	  if ( db_error_statics_flag == true )
  	  {
       		start_time = ptetime_get_time();
   	  }
      EXEC SQL DECLARE mppara01_cursor2 CURSOR FOR
         SELECT product_code from mppara01
         WHERE  product_code >= :product_code
         ORDER BY product_code, product_code;
         if ( db_error_statics_flag == true )
  	    {
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MPPARA ,Fun_Name : db_get_mppara01_gui_list_CURSOR2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
         }
   } 
   
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   if(Select_Flag == 0)
      EXEC SQL OPEN mppara01_cursor1;
   else
      EXEC SQL OPEN mppara01_cursor2;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
      memset(&db_mppara01, 0x00, sizeof(db_mppara01));
      if(Select_Flag == 0)
      {
      	 if ( db_error_statics_flag == true )
  	  	 {
       		start_time = ptetime_get_time();
   	  	 }
         EXEC SQL FETCH mppara01_cursor1
         INTO  db_product_code;
         if ( db_error_statics_flag == true )
  	    {
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MPPARA ,Fun_Name : db_get_mppara01_gui_list_FETCH1 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
        }
      }
      else
      {
      	 if ( db_error_statics_flag == true )
  	  	 {
       		start_time = ptetime_get_time();
   	  	 }
         EXEC SQL FETCH mppara01_cursor2
         INTO db_product_code;
         if ( db_error_statics_flag == true )
  	    {
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MPPARA ,Fun_Name : db_get_mppara01_gui_list_FETCH2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
        }
      }

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         if(Select_Flag == 0)
            EXEC SQL CLOSE mppara01_cursor1;
         else
            EXEC SQL CLOSE mppara01_cursor2;
       
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_mppara01_gui_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;

      }
      memcpy( Mppara01_Gui_List->mppara_info[temp].product_code, db_product_code.arr, db_product_code.len );
      itoa(temp + 1, Mppara01_Gui_List->num_returned, 10);
   }

   if(Select_Flag == 0)
      EXEC SQL CLOSE mppara01_cursor1;
   else
      EXEC SQL CLOSE mppara01_cursor2;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_mppara01_gui_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}

/*********************************************************************************************/

/*************************************************************************************/
/*    
      Revision History: Modified WHERE clause from 'card_nbr >' to 'card_nbr >=' 
      Authour         :supriya, 20th,Nov,98.  
 */
/*************************************************************************************/
BYTE db_get_ccf02p_gui_list_by_type( pCHAR Primary_Key,
                        pCCF02P_GUI_LIST Ccf02pList,
                        pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char card_type[2] = {0};
    char card_nbr[20] = {0};
	varchar db_card_type[2] = {0};
	varchar db_card_nbr[20] = {0};
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Ccf02pList, 0, sizeof(CCF02P_GUI_LIST) );
   strcpy(Ccf02pList->num_returned,"0");
   strncpy( card_type, Primary_Key, sizeof(card_type) );
   strncpy( card_nbr, Primary_Key + sizeof(card_type), sizeof(card_nbr) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DECLARE ccf02p_cursor1 CURSOR FOR
      SELECT card_nbr, card_type from ccf02p
      WHERE  card_nbr >= :card_nbr AND card_type = :card_type;
	  /*ORDER BY card_nbr, card_type;*/
	if ( db_error_statics_flag == true )
  	{
     	end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF02P ,Fun_Name : db_get_ccf02p_gui_list_by_type , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 	}
    }
    
   EXEC SQL WHENEVER SQLERROR goto sql_error;
	EXEC SQL OPEN ccf02p_cursor1;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
   	  if ( db_error_statics_flag == true )
   	 {
      		start_time = ptetime_get_time();
  	 }
      memset(&db_ccf02p, 0x00, sizeof(db_ccf02p));
      EXEC SQL FETCH ccf02p_cursor1
      INTO db_card_nbr, db_card_type;
		if ( db_error_statics_flag == true )
  	   {
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF02P ,Fun_Name : db_get_ccf02p_gui_list_by_type_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
        }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA  )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE ccf02p_cursor1;
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_ccf02p_gui_list_by_type ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      memcpy( Ccf02pList->ccf02p_pk[temp].card_type, db_card_type.arr, db_card_type.len );
      memcpy( Ccf02pList->ccf02p_pk[temp].card_nbr, db_card_nbr.arr,  db_card_nbr.len );
      itoa(temp + 1, Ccf02pList->num_returned, 10);

   }
 
   EXEC SQL CLOSE ccf02p_cursor1;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;

	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_ccf02p_gui_list_by_type ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}

/*************************************************************************************/

/*************************************************************************************/
BYTE db_get_omc01_gui_list( pCHAR Primary_key,
                        pOMC01_GUI_LIST Omc01List,
                        pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char	merchant_id	[16];
    char	card_nbr	[20];
    char	max_repeat	[11];
    char	repeated	[11];
    char	expiry_date	[9];
    char	peso_amt_limit  [13];
    char	usd_amt_limit   [13];
    char	bypass		[9]; 
    char	future_use1	[33];
    char	future_use2	[33];
    char	future_use3	[33];
    char	future_use4	[33];

    varchar	db_merchant_id		[16];
    varchar	db_card_nbr		[20];
    varchar	db_max_repeat		[11];
    varchar	db_repeated		[11];
    varchar	db_expiry_date		[9]; 
    varchar	db_peso_amt_limit	[13];
    varchar	db_usd_amt_limit	[13];
    varchar	db_bypass		[9]; 
    varchar	db_future_use1		[33];
    varchar	db_future_use2		[33];
    varchar	db_future_use3		[33];
    varchar	db_future_use4		[33];


    int temp;
    int temp1;
    EXEC SQL END DECLARE SECTION;

   temp = 0;
   temp1 = 0;
   memset( Omc01List, 0, sizeof(OMC01_GUI_LIST) );
   strcpy(Omc01List->num_returned,"0");
   strncpy( merchant_id	,Primary_key, sizeof(pte_omc01.merchant_id) );
   strncpy( card_nbr	,Primary_key + sizeof(pte_omc01.merchant_id), sizeof(pte_omc01.card_nbr) );
   strncpy( max_repeat	,Primary_key + sizeof(pte_omc01.merchant_id) + sizeof(pte_omc01.card_nbr) , sizeof(pte_omc01.max_repeat) );
   strncpy( repeated	,Primary_key + sizeof(pte_omc01.merchant_id) + sizeof(pte_omc01.card_nbr) + sizeof(pte_omc01.max_repeat) , sizeof(pte_omc01.repeated) );
   strncpy( expiry_date	,Primary_key + sizeof(pte_omc01.merchant_id) + sizeof(pte_omc01.card_nbr) + sizeof(pte_omc01.max_repeat) + sizeof(pte_omc01.repeated) , sizeof(pte_omc01.expiry_date) );
   strncpy( peso_amt_limit ,Primary_key + sizeof(pte_omc01.merchant_id) + sizeof(pte_omc01.card_nbr) + sizeof(pte_omc01.max_repeat) + sizeof(pte_omc01.repeated) + sizeof(pte_omc01.expiry_date),sizeof(pte_omc01.peso_amt_limit));
   strncpy( usd_amt_limit  ,Primary_key + sizeof(pte_omc01.merchant_id) + sizeof(pte_omc01.card_nbr) + sizeof(pte_omc01.max_repeat) + sizeof(pte_omc01.repeated) + sizeof(pte_omc01.expiry_date) + sizeof(pte_omc01.peso_amt_limit),sizeof(pte_omc01.usd_amt_limit));

   if ( db_error_statics_flag == true )
   	 {
      		start_time = ptetime_get_time();
  	 }
   EXEC SQL DECLARE omc01_cursor2 CURSOR FOR
      SELECT MERCHANT_ID, CARD_NBR, MAX_REPEAT, REPEATED, EXPIRY_DATE, PESO_AMT_LIMIT, USD_AMT_LIMIT, BYPASS, FUTURE_USE1, FUTURE_USE2, FUTURE_USE3, FUTURE_USE4 from omc01
         WHERE  (merchant_id = :merchant_id) AND ((card_nbr >= :card_nbr) OR (card_nbr IS NULL))
         ORDER BY merchant_id, card_nbr;

    if ( db_error_statics_flag == true )
  	{
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : OMC01 ,Fun_Name : db_get_omc01_gui_list_CURSOR1 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
    }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
	EXEC SQL OPEN omc01_cursor2;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
/*   printf("------------------------------------------------------------\n"); */
   for ( temp1 = 0; temp1 < GUI_MAX_LIST_SIZE ; temp1++ )
   {
   	 if ( db_error_statics_flag == true )
   	 {
      		start_time = ptetime_get_time();
  	 }
      memset(&db_omc01, 0x00, sizeof(db_omc01));
      EXEC SQL FETCH omc01_cursor2
      INTO :db_omc01;
	   if ( db_error_statics_flag == true )
  	   {
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : OMC01 ,Fun_Name : db_get_omc01_gui_list_FETCH1 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
        }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA  )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE omc01_cursor2;
        
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_omc01_gui_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      memcpy(Omc01List->omc01_pk[temp1].merchant_id, db_omc01.merchant_id.arr, db_omc01.merchant_id.len);
      memcpy(Omc01List->omc01_pk[temp1].card_nbr, db_omc01.card_nbr.arr, db_omc01.card_nbr.len);
      memcpy(Omc01List->omc01_pk[temp1].max_repeat, db_omc01.max_repeat.arr, db_omc01.max_repeat.len);
      memcpy(Omc01List->omc01_pk[temp1].repeated, db_omc01.repeated.arr, db_omc01.repeated.len);
      memcpy(Omc01List->omc01_pk[temp1].expiry_date, db_omc01.expiry_date.arr, db_omc01.expiry_date.len);
      memcpy(Omc01List->omc01_pk[temp1].peso_amt_limit, db_omc01.peso_amt_limit.arr, db_omc01.peso_amt_limit.len);
      memcpy(Omc01List->omc01_pk[temp1].usd_amt_limit, db_omc01.usd_amt_limit.arr, db_omc01.usd_amt_limit.len);

      memcpy(Omc01List->omc01_pk[temp1].bypass, db_omc01.bypass.arr, db_omc01.bypass.len);               
      memcpy(Omc01List->omc01_pk[temp1].future_use1, db_omc01.future_use1.arr, db_omc01.future_use1.len);
      memcpy(Omc01List->omc01_pk[temp1].future_use2, db_omc01.future_use2.arr, db_omc01.future_use2.len);
      memcpy(Omc01List->omc01_pk[temp1].future_use3, db_omc01.future_use3.arr, db_omc01.future_use3.len);
      memcpy(Omc01List->omc01_pk[temp1].future_use4, db_omc01.future_use4.arr, db_omc01.future_use4.len);

     /*printf("%d\t%s\t%s\t%s\t%s\n",temp1, Omc01List->omc01_pk[temp1].merchant_id,Omc01List->omc01_pk[temp1].card_nbr,Omc01List->omc01_pk[temp1].max_repeat,Omc01List->omc01_pk[temp1].expiry_date); */
      itoa(temp1 + 1, Omc01List->num_returned, 10);

   }
 
   EXEC SQL CLOSE omc01_cursor2;

   if ( db_error_statics_flag == true )
   {
      	start_time = ptetime_get_time();
  	}
   EXEC SQL DECLARE omc01_cursor1 CURSOR FOR
      SELECT MERCHANT_ID, CARD_NBR, MAX_REPEAT, REPEATED, EXPIRY_DATE, PESO_AMT_LIMIT, USD_AMT_LIMIT, BYPASS, FUTURE_USE1, FUTURE_USE2, FUTURE_USE3, FUTURE_USE4 from omc01
         WHERE  (merchant_id > :merchant_id)
         ORDER BY merchant_id, card_nbr;

    if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : OMC01 ,Fun_Name : db_get_omc01_gui_list_CURSOR2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 	}
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
	EXEC SQL OPEN omc01_cursor1;

   EXEC SQL WHENEVER SQLERROR goto sql_error3;
   EXEC SQL WHENEVER NOTFOUND DO break;
   /*printf("TEMP1 = %d\n",temp1);  */
   /*printf("------------------------------------------------------------\n");*/
   for ( temp = temp1; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
   	 if ( db_error_statics_flag == true )
   	 {
      		start_time = ptetime_get_time();
  	 }
      memset(&db_omc01, 0x00, sizeof(db_omc01));
      EXEC SQL FETCH omc01_cursor1
      INTO :db_omc01 ;
	   if ( db_error_statics_flag == true )
  	   {
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : OMC01 ,Fun_Name : db_get_omc01_gui_list_FETCH2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
        }
      sql_error3:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA  )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE omc01_cursor1;
 
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_omc01_gui_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      memcpy(Omc01List->omc01_pk[temp].merchant_id, db_omc01.merchant_id.arr, db_omc01.merchant_id.len);
      memcpy(Omc01List->omc01_pk[temp].card_nbr, db_omc01.card_nbr.arr, db_omc01.card_nbr.len);
      memcpy(Omc01List->omc01_pk[temp].max_repeat, db_omc01.max_repeat.arr, db_omc01.max_repeat.len);
      memcpy(Omc01List->omc01_pk[temp].repeated, db_omc01.repeated.arr, db_omc01.repeated.len);
      memcpy(Omc01List->omc01_pk[temp].expiry_date, db_omc01.expiry_date.arr, db_omc01.expiry_date.len);
      memcpy(Omc01List->omc01_pk[temp].peso_amt_limit, db_omc01.peso_amt_limit.arr, db_omc01.peso_amt_limit.len);
      memcpy(Omc01List->omc01_pk[temp].usd_amt_limit, db_omc01.usd_amt_limit.arr, db_omc01.usd_amt_limit.len);

      memcpy(Omc01List->omc01_pk[temp].bypass, db_omc01.bypass.arr, db_omc01.bypass.len);
      memcpy(Omc01List->omc01_pk[temp].future_use1, db_omc01.future_use1.arr, db_omc01.future_use1.len);
      memcpy(Omc01List->omc01_pk[temp].future_use2, db_omc01.future_use2.arr, db_omc01.future_use2.len);
      memcpy(Omc01List->omc01_pk[temp].future_use3, db_omc01.future_use3.arr, db_omc01.future_use3.len);
      memcpy(Omc01List->omc01_pk[temp].future_use4, db_omc01.future_use4.arr, db_omc01.future_use4.len);

     /*printf("%d\t%s\t%s\t%s\t%s\n",temp, Omc01List->omc01_pk[temp].merchant_id,Omc01List->omc01_pk[temp].card_nbr,Omc01List->omc01_pk[temp].max_repeat,Omc01List->omc01_pk[temp].expiry_date); */
	itoa(temp + 1, Omc01List->num_returned, 10);

   }
 
   EXEC SQL CLOSE omc01_cursor1;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_omc01_gui_list ,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}
/************************************************************************************/

BYTE db_select_mcc01_list( pCHAR Primary_Key,
                        pMCC01_LIST Mcc01List,
                        pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char low[11];
    char high[11];
    varchar db_low[11];
    varchar db_high[11];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Mcc01List, 0, sizeof(MCC01_LIST) );
   strcpy(Mcc01List->num_returned,"0");
   strncpy( low, Primary_Key, sizeof(low) );
	printf("%s\n",Primary_Key);

	if ( db_error_statics_flag == true )
   	 {
      		start_time = ptetime_get_time();
  	 }
   EXEC SQL DECLARE mcc01_cursor2 CURSOR FOR
      SELECT LOW, HIGH, ALLOW from mcc01
       ORDER BY LOW;

    if ( db_error_statics_flag == true )
  	{
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCC01 ,Fun_Name : db_select_mcc01_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
    }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN mcc01_cursor2;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < MAX_MCC_ALLOWED_LIST ; temp++ )
   {
   	 if ( db_error_statics_flag == true )
   	 {
      		start_time = ptetime_get_time();
  	 }
      memset(&db_mcc01, 0x00, sizeof(db_mcc01));
      EXEC SQL FETCH mcc01_cursor2
      INTO :db_mcc01;
	   if ( db_error_statics_flag == true )
  	   {
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCC01 ,Fun_Name : db_select_mcc01_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
        }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA  )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE mcc01_cursor2;
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_mcc01_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      memcpy( Mcc01List->mcc01_pk[temp].primary_key.low, db_mcc01.low.arr, db_mcc01.low.len );
      memcpy( Mcc01List->mcc01_pk[temp].primary_key.high, db_mcc01.high.arr, db_mcc01.high.len );
      itoa(temp + 1, Mcc01List->num_returned, 10);

   }

   EXEC SQL CLOSE mcc01_cursor2;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_select_mcc01_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_mcc01_gui_list( pCHAR Primary_Key,
                        pMCC01_GUI_LIST Mcc01List,
                        pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char low[11];
    char high[11];
    varchar db_low[11];
    varchar db_high[11];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Mcc01List, 0, sizeof(MCC01_GUI_LIST) );
   strcpy(Mcc01List->num_returned,"0");
   strncpy( low, Primary_Key, sizeof(low) );
printf("%s\n",Primary_Key);

	if ( db_error_statics_flag == true )
   	{
      		start_time = ptetime_get_time();
  	}
   EXEC SQL DECLARE mcc01_cursor1 CURSOR FOR
      SELECT LOW, HIGH, ALLOW from mcc01
      WHERE  LOW >= :low ORDER BY LOW;

    if ( db_error_statics_flag == true )
  	{
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCC01 ,Fun_Name : db_get_mcc01_gui_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
    }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN mcc01_cursor1;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
   	 if ( db_error_statics_flag == true )
   	 {
      		start_time = ptetime_get_time();
  	 }
      memset(&db_mcc01, 0x00, sizeof(db_mcc01));
      EXEC SQL FETCH mcc01_cursor1
      INTO :db_mcc01;
	   if ( db_error_statics_flag == true )
  	   {
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCC01 ,Fun_Name : db_get_mcc01_gui_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
        }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA  )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE mcc01_cursor1;
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_mcc01_gui_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      memcpy( Mcc01List->mcc01_pk[temp].primary_key.low, db_mcc01.low.arr, db_mcc01.low.len );
      memcpy( Mcc01List->mcc01_pk[temp].primary_key.high, db_mcc01.high.arr, db_mcc01.high.len );
      itoa(temp + 1, Mcc01List->num_returned, 10);

   }

   EXEC SQL CLOSE mcc01_cursor1;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_mcc01_gui_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}


/*************************************************************************************/
/*    
      Revision History: Modified WHERE clause from '>' to '>=' 
      Authour         :supriya, 20th,Nov,98.  
 */
/*************************************************************************************/
BYTE db_get_paf01_gui_list( pCHAR Primary_Key,
                        pPAF01_GUI_LIST Paf01List,
                        pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char primary_acct_nbr[20];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Paf01List, 0, sizeof(PAF01_GUI_LIST) );
   strcpy(Paf01List->num_returned,"0");
   strncpy( primary_acct_nbr, Primary_Key, sizeof(primary_acct_nbr) );

	if ( db_error_statics_flag == true )
   	{
      		start_time = ptetime_get_time();
  	}
   EXEC SQL DECLARE paf01_cursor CURSOR FOR
      SELECT * from paf01
      WHERE  primary_acct_nbr >= :primary_acct_nbr;
    if ( db_error_statics_flag == true )
  	{
     	end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : PAF01 ,Fun_Name : db_get_paf01_gui_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 	}
    }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN paf01_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
   	  if ( db_error_statics_flag == true )
   	  {
      		start_time = ptetime_get_time();
  	  }
      memset(&db_paf01, 0x00, sizeof(db_paf01));
      EXEC SQL FETCH paf01_cursor
      INTO :db_paf01;
	   if ( db_error_statics_flag == true )
  	   {
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : PAF01 ,Fun_Name : db_get_paf01_gui_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
        }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE paf01_cursor;
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_paf01_gui_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      memcpy( Paf01List->paf_info[temp].primary_acct_nbr, db_paf01.primary_acct_nbr.arr, db_paf01.primary_acct_nbr.len );
      memcpy( Paf01List->paf_info[temp].name_dba, db_paf01.name_dba.arr, db_paf01.name_dba.len );
      itoa(temp + 1, Paf01List->num_returned, 10);
   }

   EXEC SQL CLOSE paf01_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_paf01_gui_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}

/******************************************************************************/
/******************************************************************************/
BYTE db_get_bon02_gui_list( pCHAR           Primary_Key,
                            pBON02_GUI_LIST Bon02List,
                            pCHAR           ErrorMsg )
{
    EXEC SQL BEGIN DECLARE SECTION;
    char cash_id[21];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Bon02List, 0, sizeof(BON02_GUI_LIST) );
   strcpy(Bon02List->num_returned,"0");
   strncpy( cash_id, Primary_Key, sizeof(cash_id) );

	if ( db_error_statics_flag == true )
    {
      	start_time = ptetime_get_time();
  	}
   EXEC SQL DECLARE bon02_cursor CURSOR FOR
      SELECT * from bon02
      WHERE  cash_promo_id >= :cash_id;
	if ( db_error_statics_flag == true )
  	{
     	end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BON02 ,Fun_Name : db_get_bon02_gui_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 	}
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN bon02_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
   	  if ( db_error_statics_flag == true )
   	  {
      		start_time = ptetime_get_time();
  	  }
      memset(&db_bon02, 0x00, sizeof(db_bon02));
      EXEC SQL FETCH bon02_cursor
      INTO :db_bon02;
	  if ( db_error_statics_flag == true )
  	  {
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BON02 ,Fun_Name : db_get_bon02_gui_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
        }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE bon02_cursor;
         
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_bon02_gui_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      memcpy( Bon02List->cash_bonus_info[temp].cash_id, db_bon02.cash_id.arr, db_bon02.cash_id.len );
      itoa(temp + 1, Bon02List->num_returned, 10);
   }

   EXEC SQL CLOSE bon02_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;

	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_bon02_gui_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}



/*************************************************************************************/
/*    
      Revision History: Modified WHERE clause from ' >' to ' >=' 
      Authour         :supriya, 20th,Nov,98.  
 */
/*************************************************************************************/
BYTE db_get_apf01_gui_list( pCHAR App_Name,
                        pAPF01_GUI_LIST Apf01List,
                        pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char app_name[16];
    varchar new_app_name[16];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Apf01List, 0, sizeof(APF01_GUI_LIST) );
   strcpy(Apf01List->num_returned,"0");
   strncpy( app_name, App_Name, sizeof(app_name) );

	if ( db_error_statics_flag == true )
   	{
      		start_time = ptetime_get_time();
  	}
   EXEC SQL DECLARE apf01_cursor CURSOR FOR
      SELECT app_name from apf01
      WHERE  app_name >= :app_name;
    if ( db_error_statics_flag == true )
  	{
     		end_time = ptetime_get_time();

      		duration = end_time - start_time;

      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : APF01 ,Fun_Name : db_get_apf01_gui_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
    }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN apf01_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
   		if ( db_error_statics_flag == true )
   	  {
      		start_time = ptetime_get_time();
  	  }
      memset(&new_app_name, 0x00, sizeof(new_app_name));
      EXEC SQL FETCH apf01_cursor
      INTO :new_app_name;
		if ( db_error_statics_flag == true )
  	   {
     		 end_time = ptetime_get_time();

      		duration = end_time - start_time;

      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : APF01 ,Fun_Name : db_get_apf01_gui_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
        }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE apf01_cursor;
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_apf01_gui_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
      }
      strncpy( Apf01List->app_name[temp], new_app_name.arr, new_app_name.len );
      itoa(temp + 1, Apf01List->num_returned, 10);
   }

   EXEC SQL CLOSE apf01_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_apf01_gui_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}



/*************************************************************************************/
/*    
      Revision History: Modified WHERE clause from ' >' to ' >=' 
      Authour         :supriya, 20th,Nov,98.  
 */
/*************************************************************************************/
BYTE db_get_jbf01_gui_list( pCHAR Job_Id,
                        pJBF01_GUI_LIST Jbf01List,
                        pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char job_id[16];
    varchar new_job_id[16];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Jbf01List, 0, sizeof(JBF01_GUI_LIST) );
   strcpy(Jbf01List->num_returned,"0");
   strncpy( job_id, Job_Id, sizeof(job_id) );

	if ( db_error_statics_flag == true )
   	 {
      		start_time = ptetime_get_time();
  	 }
   EXEC SQL DECLARE jbf01_cursor CURSOR FOR
      SELECT job_id from jbf01
      WHERE  job_id >= :job_id;
    if ( db_error_statics_flag == true )
  	{
     	end_time = ptetime_get_time();

      	duration = end_time - start_time;

      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : JBF01 ,Fun_Name : db_get_jbf01_gui_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 	}
    }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN jbf01_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
   	  if ( db_error_statics_flag == true )
   	  {
      		start_time = ptetime_get_time();
  	  }
      memset(&new_job_id, 0x00, sizeof(new_job_id));
      EXEC SQL FETCH jbf01_cursor
      INTO :new_job_id;
	   if ( db_error_statics_flag == true )
  	   {
     		 end_time = ptetime_get_time();

      		duration = end_time - start_time;

      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : JBF01 ,Fun_Name : db_get_jbf01_gui_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
        }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE jbf01_cursor;
       	memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_jbf01_gui_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      strncpy( Jbf01List->job_id[temp], new_job_id.arr, new_job_id.len );
      itoa(temp + 1, Jbf01List->num_returned, 10);
   }

   EXEC SQL CLOSE jbf01_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_jbf01_gui_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}



/*************************************************************************************/
/*    
      Revision History: Modified WHERE clause from ' >' to ' >=' 
      Authour         :supriya, 20th,Nov,98.  
 */
/*************************************************************************************/
BYTE db_get_bpf01_gui_list( pCHAR Profile_Id,
                        pBPF01_GUI_LIST Bpf01List,
                        pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char profile_id[16];
    varchar new_profile_id[16];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Bpf01List, 0, sizeof(BPF01_GUI_LIST) );
   strcpy(Bpf01List->num_returned,"0");
   strncpy( profile_id, Profile_Id, sizeof(profile_id) );

	if ( db_error_statics_flag == true )
   	{
      		start_time = ptetime_get_time();
  	}
   EXEC SQL DECLARE bpf01_cursor CURSOR FOR
      SELECT DISTINCT profile_id from bpf01
      WHERE  profile_id >= :profile_id;
    if ( db_error_statics_flag == true )
  	{
     	end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BPF01 ,Fun_Name : db_get_bpf01_gui_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 	}
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN bpf01_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
   		if ( db_error_statics_flag == true )
   	  {
      		start_time = ptetime_get_time();
  	  }
      memset(&new_profile_id, 0x00, sizeof(new_profile_id));
      EXEC SQL FETCH bpf01_cursor
      INTO :new_profile_id;
	   if ( db_error_statics_flag == true )
  	   {
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BPF01 ,Fun_Name : db_get_bpf01_gui_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
        }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE bpf01_cursor;
         memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In  db_get_bpf01_gui_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;    
      }
      strncpy( Bpf01List->profile_id[temp], new_profile_id.arr, new_profile_id.len );
      itoa(temp + 1, Bpf01List->num_returned, 10);
   }

   EXEC SQL CLOSE bpf01_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;

	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_bpf01_gui_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}

//TF Phani
#if 0
BYTE db_get_caf01_emv_gui_list( pCAF01_EMV caf01_ptr,
                            pCAF01_GUI_LIST Caf01_List,     pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char  caf_profile_id[6];
    char  type[3];
    varchar db_caf_profile_id[6];
    varchar db_type[3];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Caf01_List, 0, sizeof(CAF01_GUI_LIST) );
   strcpy(Caf01_List->num_returned,"0");
   strncpy( caf_profile_id, caf01_ptr->primary_key.caf_profile_id, sizeof(caf_profile_id) );
   strncpy( type, caf01_ptr->primary_key.type, sizeof(type) );
	if ( db_error_statics_flag == true )
   	{
      	start_time = ptetime_get_time();
  	}
   EXEC SQL DECLARE caf01_cursor3 CURSOR FOR
      SELECT caf_profile_id,type from caf01
      WHERE  (caf_profile_id = :caf_profile_id AND type >= :type) OR
             (caf_profile_id > :caf_profile_id);
	  
	if ( db_error_statics_flag == true )
  	{
     	end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01 ,Fun_Name : db_get_caf01_emv_gui_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 	}
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN caf01_cursor3;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
   		if ( db_error_statics_flag == true )
   	  {
      		start_time = ptetime_get_time();
  	  }
      memset(&db_caf01, 0x00, sizeof(db_caf01));
      EXEC SQL FETCH caf01_cursor3
      INTO db_caf_profile_id,db_type;
	   if ( db_error_statics_flag == true )
  	   {
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01 ,Fun_Name : db_get_caf01_emv_gui_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 		 }
        }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA  )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE caf01_cursor3;
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_caf01_emv_gui_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
     

	  strncpy( Caf01_List->caf01_list[temp].primary_key.caf_profile_id, db_caf_profile_id.arr,  db_caf_profile_id.len );
	  strncpy( Caf01_List->caf01_list[temp].primary_key.type, db_type.arr, db_type.len );
          itoa(temp + 1, Caf01_List->num_returned, 10);
   }

   EXEC SQL CLOSE caf01_cursor3;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_caf01_emv_gui_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}
#endif

//TF Phani

/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_caf01_gui_list_by_type( pCHAR Caf_Profile_Id,
                        pCAF01_GUI_LIST Caf01List,
                        pCHAR ErrorMsg )
{
    EXEC SQL BEGIN DECLARE SECTION;
    char caf_profile_id[5];
    char type[2];
    varchar new_caf_profile_id[5];
	varchar new_type[2];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Caf01List, 0, sizeof(CAF01_GUI_LIST) );
   strcpy(Caf01List->num_returned,"0");
   strncpy( caf_profile_id, Caf_Profile_Id, sizeof(caf_profile_id) );
   strncpy( type, Caf_Profile_Id + sizeof(caf_profile_id), sizeof(type) );

	if ( db_error_statics_flag == true )
   	{
      		start_time = ptetime_get_time();
  	}
   EXEC SQL DECLARE caf01_cursor CURSOR FOR
      SELECT caf_profile_id, type from caf01
      WHERE  caf_profile_id >= :caf_profile_id AND type = :type ORDER BY caf_profile_id ASC;
    if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01 ,Fun_Name : db_get_caf01_gui_list_by_type_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN caf01_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE; temp++ )
   {
   	  if ( db_error_statics_flag == true )
   	  {
      	 start_time = ptetime_get_time();
  	  }
      memset(&new_caf_profile_id, 0x00, sizeof(new_caf_profile_id));
      EXEC SQL FETCH caf01_cursor
      INTO :new_caf_profile_id, new_type;
	  if ( db_error_statics_flag == true )
  	  {
      	end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01 ,Fun_Name : db_get_caf01_gui_list_by_type_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   	  }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE caf01_cursor;
         memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In  db_get_caf01_gui_list_by_type ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;
      }
      strncpy( Caf01List->caf_info[temp].caf_profile_id, new_caf_profile_id.arr, new_caf_profile_id.len );
      strncpy( Caf01List->caf_info[temp].type, new_type.arr, new_type.len );
      itoa(temp + 1, Caf01List->num_returned, 10);
   }

   EXEC SQL CLOSE caf01_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_caf01_gui_list_by_type ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}



/*************************************************************************************/
/*    
      Revision History: Modified WHERE clause from ' type >' to 'type >=' 

      Authour         :supriya, 20th,Nov,98.  
*/
/*************************************************************************************/
BYTE db_get_caf01_gui_list( pCHAR Caf_Profile_Id,
                        pCAF01_GUI_LIST Caf01List,
                        pCHAR ErrorMsg )
{
    EXEC SQL BEGIN DECLARE SECTION;
    char caf_profile_id[5];
    char type[2];
    varchar new_caf_profile_id[5];
	varchar new_type[2];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Caf01List, 0, sizeof(CAF01_GUI_LIST) );
   strcpy(Caf01List->num_returned,"0");
   strncpy( caf_profile_id, Caf_Profile_Id, sizeof(caf_profile_id) );
   strncpy( type, Caf_Profile_Id + sizeof(caf_profile_id), sizeof(type) );

	if ( db_error_statics_flag == true )
   	{
      	start_time = ptetime_get_time();
  	}
   EXEC SQL DECLARE caf01_cursor1 CURSOR FOR
      SELECT caf_profile_id, type from caf01
      WHERE  (caf_profile_id = :caf_profile_id AND type >= :type) OR
	         (caf_profile_id > :caf_profile_id) ORDER BY caf_profile_id ASC;
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01 ,Fun_Name : db_get_caf01_gui_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN caf01_cursor1;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;

   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
   		if ( db_error_statics_flag == true )
   	  {
      		start_time = ptetime_get_time();
  	  }
      memset(&new_caf_profile_id, 0x00, sizeof(new_caf_profile_id));
      EXEC SQL FETCH caf01_cursor1
      INTO :new_caf_profile_id, new_type;
	  if ( db_error_statics_flag == true )
      {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
     	if(duration >= db_error_statics_value)
	 	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01 ,Fun_Name : db_get_caf01_gui_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
     }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE caf01_cursor1;
         
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_caf01_gui_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      strncpy( Caf01List->caf_info[temp].caf_profile_id, new_caf_profile_id.arr, new_caf_profile_id.len );
      strncpy( Caf01List->caf_info[temp].type, new_type.arr, new_type.len );
      itoa(temp + 1, Caf01List->num_returned, 10);
   }

   EXEC SQL CLOSE caf01_cursor1;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_caf01_gui_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}


/******************************************************************************/
/******************************************************************************/
BYTE db_get_mcc_limits_gui_list( pCHAR           Caf_Profile_Id,
                                 pMCC_LIMITS_GUI MccLimitsList,
                                 pCHAR           ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
      char    caf_profile_id[5];
      char    type[2];
      varchar new_caf_profile_id[5];
      varchar new_type[2];
      varchar new_mcc[6];
      varchar new_usage[5];
      varchar new_p_amount[13];
      varchar new_u_amount[13];
      int     temp;
      int     num_rows = 0;
   EXEC SQL END DECLARE SECTION;

   memset( MccLimitsList, 0x00, sizeof(MCC_LIMITS_GUI) );
   strcpy( MccLimitsList->num_returned,"0" );
   strncpy( caf_profile_id, Caf_Profile_Id, sizeof(caf_profile_id) );
   strncpy( type, Caf_Profile_Id + sizeof(caf_profile_id), sizeof(type) );

	if ( db_error_statics_flag == true )
    {
      	start_time = ptetime_get_time();
  	}
   /* First get number of rows that we will return. */
   EXEC SQL SELECT COUNT(*)
            INTO :num_rows
            FROM mcc_limits
            WHERE  caf_profile_id = :caf_profile_id
              AND  type           = :type;
	if ( db_error_statics_flag == true )
    {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
     	if(duration >= db_error_statics_value)
	 	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCC_LIMITS ,Fun_Name : db_get_mcc_limits_gui_list_C , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
     }
   /* Make sure it does not exceed the limit. */
   if ( num_rows > SELECT_MCC_LIST_SIZE )
      num_rows = SELECT_MCC_LIST_SIZE;

   itoa(num_rows, MccLimitsList->num_returned, 10);

	if ( db_error_statics_flag == true )
   	{
      		start_time = ptetime_get_time();
  	}
   EXEC SQL DECLARE mcc_limits_cursor1 CURSOR FOR
      SELECT caf_profile_id, type, mcc, usage, peso_amt_limit, usd_amt_limit
      FROM   mcc_limits
      WHERE  caf_profile_id = :caf_profile_id
        AND  type           = :type;
	if ( db_error_statics_flag == true )
    {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
     	if(duration >= db_error_statics_value)
	 	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCC_LIMITS ,Fun_Name : db_get_mcc_limits_gui_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
     }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN mcc_limits_cursor1;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;

   /* Select each row into our GUI list structure. */
   for ( temp = 0; temp < num_rows ; temp++ )
   {
      memset( &new_caf_profile_id, 0x00, sizeof(new_caf_profile_id));
      memset( &new_type,     0x00, sizeof(new_type));
      memset( &new_mcc,      0x00, sizeof(new_mcc));
      memset( &new_usage,    0x00, sizeof(new_usage));
      memset( &new_p_amount, 0x00, sizeof(new_p_amount));
      memset( &new_u_amount, 0x00, sizeof(new_u_amount));
      if ( db_error_statics_flag == true )
   	  {
      		start_time = ptetime_get_time();
  	  }
      
      EXEC SQL FETCH mcc_limits_cursor1
      INTO :new_caf_profile_id, new_type, new_mcc,
            new_usage, new_p_amount, new_u_amount;
	  if ( db_error_statics_flag == true )
      {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MCC_LIMITS ,Fun_Name : db_get_mcc_limits_gui_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
     }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE mcc_limits_cursor1;
        
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_mcc_limits_gui_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      strncpy( MccLimitsList->mcc_limits[temp].primary_key.caf_profile_id, new_caf_profile_id.arr, new_caf_profile_id.len );
      strncpy( MccLimitsList->mcc_limits[temp].primary_key.type,           new_type.arr,     new_type.len     );
      strncpy( MccLimitsList->mcc_limits[temp].primary_key.mcc,            new_mcc.arr,      new_mcc.len      );
      strncpy( MccLimitsList->mcc_limits[temp].usage,                      new_usage.arr,    new_usage.len    );
      strncpy( MccLimitsList->mcc_limits[temp].peso_amt_limit,             new_p_amount.arr, new_p_amount.len );
      strncpy( MccLimitsList->mcc_limits[temp].usd_amt_limit,              new_u_amount.arr, new_u_amount.len );
   }

   EXEC SQL CLOSE mcc_limits_cursor1;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_mcc_limits_gui_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
   
}

/******************************************************************************/
/******************************************************************************/
BYTE db_get_cntry_amt_limits_gui_list( pCHAR                 Caf_Profile_Id,
                                       pCOUNTRY_AMT_LIMITS_GUI CountryAmtLimitsList,
                                       pCHAR                 ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
      char    caf_profile_id[5];
      char    type[2];
      varchar new_caf_profile_id[5];
      varchar new_type[2];
      varchar new_cntrycode[4];
      varchar new_amount[13];
      int     temp;
      int     num_rows = 0;
   EXEC SQL END DECLARE SECTION;

   memset( CountryAmtLimitsList, 0x00, sizeof(COUNTRY_AMT_LIMITS_GUI) );
   strcpy( CountryAmtLimitsList->num_returned,"0" );
   strncpy( caf_profile_id, Caf_Profile_Id, sizeof(caf_profile_id) );
   strncpy( type, Caf_Profile_Id + sizeof(caf_profile_id), sizeof(type) );

	if ( db_error_statics_flag == true )
   	{
      		start_time = ptetime_get_time();
  	}
   /* First get number of rows that we will return. */
   EXEC SQL SELECT COUNT(*)
            INTO :num_rows
            FROM country_amt_limits
            WHERE  caf_profile_id = :caf_profile_id
              AND  type           = :type;
	if ( db_error_statics_flag == true )
    {
	      end_time = ptetime_get_time();
	      duration = end_time - start_time;
	      if(duration >= db_error_statics_value)
		  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CNTRY_AMT_LIMITS ,Fun_Name : db_get_cntry_amt_limits_gui_list_CURSOR1 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		  }
   }
   /* Make sure it does not exceed the limit. */
   if ( num_rows > SELECT_LIST_SIZE )
      num_rows = SELECT_LIST_SIZE;

   itoa(num_rows, CountryAmtLimitsList->num_returned, 10);

	if ( db_error_statics_flag == true )
   	{
      	start_time = ptetime_get_time();
  	}
   EXEC SQL DECLARE country_amt_limits_cursor1 CURSOR FOR
      SELECT caf_profile_id, type, country_code, amount_limit
      FROM   country_amt_limits
      WHERE  caf_profile_id = :caf_profile_id
        AND  type           = :type;
	if ( db_error_statics_flag == true )
   {
        end_time = ptetime_get_time();
        duration = end_time - start_time;
     	if(duration >= db_error_statics_value)
	 	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CNTRY_AMT_LIMITS ,Fun_Name : db_get_cntry_amt_limits_gui_list_FETCH1 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN country_amt_limits_cursor1;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;

   /* Select each row into our GUI list structure. */
   for ( temp = 0; temp < num_rows ; temp++ )
   {
      memset( &new_caf_profile_id, 0x00, sizeof(new_caf_profile_id));
      memset( &new_type,     0x00, sizeof(new_type));
      memset( &new_cntrycode, 0x00, sizeof(new_cntrycode));
      memset( &new_amount, 0x00, sizeof(new_amount));
      if ( db_error_statics_flag == true )
   	  {
      		start_time = ptetime_get_time();
  	  }
      EXEC SQL FETCH country_amt_limits_cursor1
      INTO :new_caf_profile_id, new_type, new_cntrycode, new_amount;
	  if ( db_error_statics_flag == true )
      {
      	end_time = ptetime_get_time();

     	 duration = end_time - start_time;

     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CNTRY_AMT_LIMITS ,Fun_Name : db_get_cntry_amt_limits_gui_list_CURSOR2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
     }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE country_amt_limits_cursor1;
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_cntry_amt_limits_gui_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      strncpy( CountryAmtLimitsList->country_amt_limits[temp].primary_key.caf_profile_id, new_caf_profile_id.arr, new_caf_profile_id.len );
      strncpy( CountryAmtLimitsList->country_amt_limits[temp].primary_key.type,           new_type.arr,           new_type.len );
      strncpy( CountryAmtLimitsList->country_amt_limits[temp].country_code,               new_cntrycode.arr,      new_cntrycode.len );
      strncpy( CountryAmtLimitsList->country_amt_limits[temp].amount_limit,               new_amount.arr,         new_amount.len );
   }

   EXEC SQL CLOSE country_amt_limits_cursor1;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_cntry_amt_limits_gui_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;

}



/*************************************************************************************/
/*    
      Revision History: Modified WHERE clause from ' >' to ' >=' 
      Authour         :supriya, 20th,Nov,98.  
 */
/*************************************************************************************/
BYTE db_get_crf01_gui_list( pCHAR Currency_Code,
                        pCRF01_GUI_LIST Crf01List,
                        pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char currency_code[4];
    varchar new_currency_code[4];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Crf01List, 0, sizeof(CRF01_GUI_LIST) );
   strcpy(Crf01List->num_returned,"0");
   strncpy( currency_code, Currency_Code, sizeof(currency_code) );

	if ( db_error_statics_flag == true )
   	{
      	start_time = ptetime_get_time();
  	}
   EXEC SQL DECLARE crf01_cursor CURSOR FOR
      SELECT currency_code from crf01
      WHERE  currency_code >= :currency_code;
    if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CRF01 ,Fun_Name : db_get_crf01_gui_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
    }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN crf01_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
   		if ( db_error_statics_flag == true )
   	  {
      		start_time = ptetime_get_time();
  	  }
      memset(&new_currency_code, 0x00, sizeof(new_currency_code));
      EXEC SQL FETCH crf01_cursor
      INTO :new_currency_code;
	  if ( db_error_statics_flag == true )
      {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CRF01 ,Fun_Name : db_get_crf01_gui_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
     }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE crf01_cursor;
  		 memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In  db_get_crf01_gui_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;   
      }
      strncpy( Crf01List->currency_code[temp], new_currency_code.arr, new_currency_code.len );
      itoa(temp + 1, Crf01List->num_returned, 10);
   }

   EXEC SQL CLOSE crf01_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_crf01_gui_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
}


/*************************************************************************************/
/*    
      Revision History: Modified WHERE clause from ' >' to ' >=' 
      Authour         :supriya, 20th,Nov,98.  
 */
/*************************************************************************************/
/*BYTE db_get_ptf01_gui_list( pCHAR File_Prefix,
                        pPTF01_GUI_LIST Ptf01List,
                        pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char settle_file_prefix[7];
    varchar new_settle_file_prefix[7];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Ptf01List, 0, sizeof(PTF01_GUI_LIST) );
   strcpy(Ptf01List->num_returned,"0");
   strncpy( settle_file_prefix, File_Prefix, sizeof(settle_file_prefix) );
	if ( db_error_statics_flag == true )
   	{
      	start_time = ptetime_get_time();
  	}
   EXEC SQL DECLARE ptf01_cursor CURSOR FOR
      SELECT settle_file_prefix from ptf01
      WHERE  settle_file_prefix >= :settle_file_prefix;
    if ( db_error_statics_flag == true )
    {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : PTF01 ,Fun_Name : db_get_ptf01_gui_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
    }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN ptf01_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
   		if ( db_error_statics_flag == true )
   	  {
      		start_time = ptetime_get_time();
  	  }
      memset(&new_settle_file_prefix, 0x00, sizeof(new_settle_file_prefix));
      EXEC SQL FETCH ptf01_cursor
      INTO :new_settle_file_prefix;
	  if ( db_error_statics_flag == true )
      {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : PTF01 ,Fun_Name : db_get_ptf01_gui_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
     }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE ptf01_cursor;
         
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_ptf01_gui_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      strncpy( Ptf01List->settle_file_prefix[temp], new_settle_file_prefix.arr, new_settle_file_prefix.len );
      itoa(temp + 1, Ptf01List->num_returned, 10);
   }

   EXEC SQL CLOSE ptf01_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_ptf01_gui_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
}*/



/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_ctf01_service_list( pCHAR Card_type,
                        pCTF01_LIST Ctf01List,
                        pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char card_type[5];
    varchar new_card_type[5];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Ctf01List, 0, sizeof(CTF01_LIST) );
   strcpy(Ctf01List->num_returned,"0");
   strncpy( card_type, Card_type, sizeof(card_type) );

	if ( db_error_statics_flag == true )
   	{
        start_time = ptetime_get_time();
  	}
   EXEC SQL DECLARE ctf01_cursor1 CURSOR FOR
      SELECT card_type from ctf01
      WHERE  card_type > :card_type;
    if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CTF01 ,Fun_Name : db_get_ctf01_service_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
    }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN ctf01_cursor1;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < SERVICE_LIST_SIZE; temp++ )
   {
   	   if ( db_error_statics_flag == true )
   	  {
      		start_time = ptetime_get_time();
  	  }
      memset(&new_card_type, 0x00, sizeof(new_card_type));
      EXEC SQL FETCH ctf01_cursor1
      INTO :new_card_type;
	  if ( db_error_statics_flag == true )
      {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CTF01 ,Fun_Name : db_get_ctf01_service_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
     }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE ctf01_cursor1;
         
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_ctf01_service_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      strncpy( Ctf01List->card_type[temp], new_card_type.arr, new_card_type.len );
      itoa(temp + 1, Ctf01List->num_returned, 10);
   }

   EXEC SQL CLOSE ctf01_cursor1;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;

	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_ctf01_service_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}


/*************************************************************************************/
/*    
      Revision History: Modified WHERE clause from ' >' to ' >=' 
      Authour         :supriya, 20th,Nov,98.  
 */
/*************************************************************************************/
BYTE db_get_ctf01_gui_list( pCHAR Card_type,
                        pCTF01_GUI_LIST Ctf01List,
                        pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char card_type[5];
    varchar new_card_type[5];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Ctf01List, 0, sizeof(CTF01_GUI_LIST) );
   strcpy(Ctf01List->num_returned,"0");
   strncpy( card_type, Card_type, sizeof(card_type) );

	if ( db_error_statics_flag == true )
   	{
      	start_time = ptetime_get_time();
  	}
   EXEC SQL DECLARE ctf01_cursor CURSOR FOR
      SELECT card_type from ctf01
      WHERE  card_type >= :card_type;
    if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CTF01 ,Fun_Name : db_get_ctf01_gui_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
     }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN ctf01_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
   		if ( db_error_statics_flag == true )
   	  {
      		start_time = ptetime_get_time();
  	  }
      memset(&new_card_type, 0x00, sizeof(new_card_type));
      EXEC SQL FETCH ctf01_cursor
      INTO :new_card_type;
	  if ( db_error_statics_flag == true )
      {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CTF01 ,Fun_Name : db_get_ctf01_gui_list_FTECH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
     }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
	         SQL_CODE = SQLCODE;
	         EXEC SQL CLOSE ctf01_cursor;
	
			memset(er_buf,0x00,sizeof(er_buf));
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In  db_get_ctf01_gui_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
    
      }
      strncpy( Ctf01List->card_type[temp], new_card_type.arr, new_card_type.len );
      itoa(temp + 1, Ctf01List->num_returned, 10);
   }

   EXEC SQL CLOSE ctf01_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;

	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_ctf01_gui_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}



/*************************************************************************************/
/*    
      Revision History: Modified WHERE clause from ' >' to ' >=' 
      Authour         :supriya, 20th,Nov,98.  
 */
/*************************************************************************************/
BYTE db_get_atp02_gui_list( pATP02 atp02_ptr,
                            pATP02_GUI_LIST Atp02_Gui_List,
                            pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char workstation_id[21];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Atp02_Gui_List, 0, sizeof(ATP02_GUI_LIST) );
   strcpy(Atp02_Gui_List->num_returned,"0");
   strncpy( workstation_id, atp02_ptr->primary_key.workstation_id, sizeof(workstation_id) );

	if ( db_error_statics_flag == true )
   	{
      	start_time = ptetime_get_time();
  	}
   EXEC SQL DECLARE atp02_cursor1 CURSOR FOR
      SELECT * from atp02
      WHERE  workstation_id >= :workstation_id;
    if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ATP02 ,Fun_Name : db_get_atp02_gui_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN atp02_cursor1;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
   	  if ( db_error_statics_flag == true )
   	  {
      		start_time = ptetime_get_time();
  	  }
      memset(&db_atp02, 0x00, sizeof(db_atp02));
      EXEC SQL FETCH atp02_cursor1
      INTO :db_atp02;
	   if ( db_error_statics_flag == true )
       {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ATP02 ,Fun_Name : db_get_atp02_gui_list_FTECH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE atp02_cursor1;
         
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_atp02_gui_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      db_to_atp02(&Atp02_Gui_List->atp_list[temp]);
      itoa(temp + 1, Atp02_Gui_List->num_returned, 10);
   }

   EXEC SQL CLOSE atp02_cursor1;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
 	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_atp02_gui_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_bin01_service_list( pBIN01 bin01_ptr,
                                pBIN01_LIST Bin01_List,
                                pCHAR ErrorMsg )
{
    EXEC SQL BEGIN DECLARE SECTION;
    char length[3];
    char low[17];
    char type[2];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Bin01_List, 0, sizeof(BIN01_LIST) );
   strcpy(Bin01_List->num_returned,"0");
   strncpy( length, bin01_ptr->primary_key.length, sizeof(length) );
   strncpy( low, bin01_ptr->primary_key.low, sizeof(low) );
   strncpy( type, bin01_ptr->primary_key.type, sizeof(type) );

	if ( db_error_statics_flag == true )
   	{
      	start_time = ptetime_get_time();
  	}
   EXEC SQL DECLARE bin01_cursor2 CURSOR FOR
      SELECT * from bin01
      WHERE  (length = :length AND low > :low) OR (length > :length);
    if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BIN01 ,Fun_Name : db_get_bin01_service_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN bin01_cursor2;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < SERVICE_LIST_SIZE; temp++ )
   {
   		if ( db_error_statics_flag == true )
   	  {
      		start_time = ptetime_get_time();
  	  }
      memset(&db_bin01, 0x00, sizeof(db_bin01));
      EXEC SQL FETCH bin01_cursor2
      INTO :db_bin01;
	  if ( db_error_statics_flag == true )
      {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BIN01 ,Fun_Name : db_get_bin01_service_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE bin01_cursor2;
   		 memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In  db_get_bin01_service_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;    
      }
      db_to_bin01(&Bin01_List->bin_range_list[temp]);
      itoa(temp + 1, Bin01_List->num_returned, 10);
   }

   EXEC SQL CLOSE bin01_cursor2;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
  	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_bin01_service_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}


/*************************************************************************************/
/*    
      Revision History: Modified WHERE clause from 'low >' to 'low >=' & ORDER BY clause
      Authour         :supriya, 20th,Nov,98.  
 */
/*************************************************************************************/
BYTE db_get_bin01_gui_list( pBIN01 bin01_ptr,
                            pBIN01_GUI_LIST Bin01_Gui_List,
                            pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char length[3];
    char low[17];
    char type[2];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Bin01_Gui_List, 0, sizeof(BIN01_GUI_LIST) );
   strcpy(Bin01_Gui_List->num_returned,"0");
   strncpy( length, bin01_ptr->primary_key.length, sizeof(length) );
   strncpy( low, bin01_ptr->primary_key.low, sizeof(low) );
   strncpy( type, bin01_ptr->primary_key.type, sizeof(type));


	if ( db_error_statics_flag == true )
   	{
      	start_time = ptetime_get_time();
  	}
   EXEC SQL DECLARE bin01_cursor1 CURSOR FOR
      SELECT * from bin01
      WHERE  (type >= :type AND low = :low) OR (low > :low)
	  ORDER BY low, length, type;
    if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BIN01 ,Fun_Name : db_get_bin01_gui_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN bin01_cursor1;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
   		if ( db_error_statics_flag == true )
   	  {
      		start_time = ptetime_get_time();
  	  }
      memset(&db_bin01, 0x00, sizeof(db_bin01));
      EXEC SQL FETCH bin01_cursor1
      INTO :db_bin01;
	  if ( db_error_statics_flag == true )
      {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BIN01 ,Fun_Name : db_get_bin01_gui_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE bin01_cursor1;
     
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_bin01_gui_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      db_to_bin01(&Bin01_Gui_List->bin_range_list[temp]);
      itoa(temp + 1, Bin01_Gui_List->num_returned, 10);
   }

   EXEC SQL CLOSE bin01_cursor1;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
  
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_bin01_gui_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}


/*************************************************************************************/
/*    
      Revision History: Modified WHERE clause from 'low >' to 'low >=' & ORDER BY clause
      Authour         :supriya, 20th,Nov,98.  
 */
/*************************************************************************************/
BYTE db_get_bin01_gui_list_by_type ( pBIN01 bin01_ptr,
                            pBIN01_GUI_LIST Bin01_Gui_List,
                            pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char length[3];
    char low[17];
    char type[2];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Bin01_Gui_List, 0, sizeof(BIN01_GUI_LIST) );
   strcpy(Bin01_Gui_List->num_returned,"0");
   strncpy( length, bin01_ptr->primary_key.length, sizeof(length) );
   strncpy( low, bin01_ptr->primary_key.low, sizeof(low) );
   strncpy( type, bin01_ptr->primary_key.type, sizeof(type));

	if ( db_error_statics_flag == true )
   {
      	start_time = ptetime_get_time();
  }
   EXEC SQL DECLARE bin01_cursor3 CURSOR FOR
      SELECT * from bin01
      WHERE   low >= :low AND type = :type 
	  ORDER BY low, length, type;
    if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BIN01 ,Fun_Name : db_get_bin01_gui_list_by_type_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
    }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN bin01_cursor3;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
   		if ( db_error_statics_flag == true )
   	  {
      		start_time = ptetime_get_time();
  	  }
      memset(&db_bin01, 0x00, sizeof(db_bin01));
      EXEC SQL FETCH bin01_cursor3
      INTO :db_bin01;
	   if ( db_error_statics_flag == true )
       {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BIN01 ,Fun_Name : db_get_bin01_gui_list_by_type_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE bin01_cursor3;
       	 memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In  db_get_bin01_gui_list_by_type ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;
    
      }
      db_to_bin01(&Bin01_Gui_List->bin_range_list[temp]);
      itoa(temp + 1, Bin01_Gui_List->num_returned, 10);
   }

   EXEC SQL CLOSE bin01_cursor3;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_bin01_gui_list_by_type ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}

/*************************************************************************************/
/*    
      Revision History: Modified WHERE clause from 'low >' to 'low >=' & ORDER BY clause
      Authour         :supriya, 20th,Nov,98.  
 */
/*************************************************************************************/
BYTE db_get_def01_gui_list( pDEF01 def01_ptr,
                            pDEF01_GUI_LIST Def01_Gui_List,
                            pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char merchant_id[16];
    char term_length[4];
    char organization_id[5];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Def01_Gui_List, 0, sizeof(DEF01_GUI_LIST) );
   strcpy(Def01_Gui_List->num_returned,"0");
   strncpy( merchant_id, def01_ptr->primary_key.merchant_id, sizeof(merchant_id) );
   strncpy( organization_id, def01_ptr->primary_key.organization_id, sizeof(organization_id) );
   strncpy( term_length, def01_ptr->primary_key.term_length, sizeof(term_length));

	if ( db_error_statics_flag == true )
    {
        start_time = ptetime_get_time();
  	}
   EXEC SQL DECLARE def01_cursor1 CURSOR FOR
      SELECT * from def01
	    WHERE  (merchant_id = :merchant_id AND organization_id = :organization_id AND term_length >= :term_length)
	    OR (merchant_id > :merchant_id AND organization_id >= :organization_id)
   ORDER BY organization_id, merchant_id, term_length;
  if ( db_error_statics_flag == true )
  {
     end_time = ptetime_get_time();
     duration = end_time - start_time;
     if(duration >= db_error_statics_value)
	 {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : DEF01 ,Fun_Name : db_get_def01_gui_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN def01_cursor1;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
   		if ( db_error_statics_flag == true )
   	  {
      		start_time = ptetime_get_time();
  	  }
      memset(&db_def01, 0x00, sizeof(db_def01));
      EXEC SQL FETCH def01_cursor1
      INTO :db_def01;
	  if ( db_error_statics_flag == true )
      {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : DEF01 ,Fun_Name : db_get_def01_gui_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE def01_cursor1;
        
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_def01_gui_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;   
      }
      db_to_def01(&Def01_Gui_List->def_list[temp]);
      itoa(temp + 1, Def01_Gui_List->num_returned, 10);
   }

   EXEC SQL CLOSE def01_cursor1;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_def01_gui_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}



/*************************************************************************************/
/*    
      Revision History: Modified WHERE clause from 'low >' to 'low >=' & ORDER BY clause
      Authour         :supriya, 20th,Nov,98.  
 */
/*************************************************************************************/
BYTE db_get_def01_gui_list_by_merchant_and_org( pDEF01 def01_ptr,
                            pDEF01_GUI_LIST Def01_Gui_List,
                            pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char merchant_id[16];
    char term_length[4];
    char organization_id[5];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Def01_Gui_List, 0, sizeof(DEF01_GUI_LIST) );
   strcpy(Def01_Gui_List->num_returned,"0");
   strncpy( merchant_id, def01_ptr->primary_key.merchant_id, sizeof(merchant_id) );
   strncpy( organization_id, def01_ptr->primary_key.organization_id, sizeof(organization_id) );
   strncpy( term_length, def01_ptr->primary_key.term_length, sizeof(term_length));

	if ( db_error_statics_flag == true )
   	 {
      		start_time = ptetime_get_time();
  	  }
   EXEC SQL DECLARE def01_cursor2 CURSOR FOR
      SELECT * from def01
      WHERE  merchant_id = :merchant_id AND organization_id = :organization_id;

    if ( db_error_statics_flag == true )
    {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
     	if(duration >= db_error_statics_value)
	 	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : DEF01 ,Fun_Name : db_get_def01_gui_list_by_merchant_and_org_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
    }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN def01_cursor2;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
   	  if ( db_error_statics_flag == true )
   	  {
      		start_time = ptetime_get_time();
  	  }
      memset(&db_def01, 0x00, sizeof(db_def01));
      EXEC SQL FETCH def01_cursor2
      INTO :db_def01;
		if ( db_error_statics_flag == true )
       {
      	end_time = ptetime_get_time();

     	 duration = end_time - start_time;

     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : DEF01 ,Fun_Name : db_get_def01_gui_list_by_merchant_and_org_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE def01_cursor2;
        
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_def01_gui_list_by_merchant_and_org ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      db_to_def01(&Def01_Gui_List->def_list[temp]);
      itoa(temp + 1, Def01_Gui_List->num_returned, 10);
   }

   EXEC SQL CLOSE def01_cursor2;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
  	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_def01_gui_list_by_merchant_and_org ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}

BYTE DateIsNumeric (char str[])
{
    int n = 0 ;
    int length = strlen (str) ;
    if (length == 0)
        return 0 ;
    for (n = 0 ; n < length ; n++)
    {
        if (str[n] < '0' || str[n] > '9')
            return 0 ;
    }
    return 1 ;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_hst01_list_all( pHST01 hst01_ptr,
                                     pHST01_LIST Hst01List,
                                     pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char file_name[10] = {0};
    char unique_id[18] = {0};
    char end_date[18]  = {0};
    int temp = 0;
    long int date = 0;
    EXEC SQL END DECLARE SECTION;

   memset( Hst01List, 0, sizeof(HST01_LIST) );
   strcpy(Hst01List->num_returned,"0");
   strncpy( unique_id, hst01_ptr->primary_key.unique_id, sizeof(unique_id) );
   
   //audit log issue
   strncpy(end_date, hst01_ptr->reserved, sizeof(end_date));
   if(strlen(end_date) <= 0 || !(DateIsNumeric(end_date)))
   {
	   memset(&end_date, 0, sizeof(end_date));
   }
   
   date = atoi(end_date) +1;
   itoa(date, end_date, 10);

	if ( db_error_statics_flag == true )
   	{
      		start_time = ptetime_get_time();
  	}
  	
    EXEC SQL DECLARE hst01_cursor4 CURSOR FOR
    SELECT * from hst01
    WHERE  unique_id >= (:unique_id || '%') AND
		   unique_id < (:end_date || '%')
    ORDER BY UNIQUE_ID;
	  
    if ( db_error_statics_flag == true )
    {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
        if(duration >= db_error_statics_value)
	 	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : HST01 ,Fun_Name : db_get_hst01_list_all_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN hst01_cursor4;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE; temp++ )
   {
   		if ( db_error_statics_flag == true )
   	  {
      		start_time = ptetime_get_time();
  	  }
      memset(&db_hst01, 0x00, sizeof(db_hst01));
      EXEC SQL FETCH hst01_cursor4
      INTO :db_hst01;
	   if ( db_error_statics_flag == true )
       {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : HST01 ,Fun_Name : db_get_hst01_list_all_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE hst01_cursor4;
        
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_hst01_list_all ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      db_to_hst01(&Hst01List->history[temp]);
      /*strncpy( Hst01List->file_name[temp], new_file_name.arr, new_file_name.len );*/
      itoa(temp + 1, Hst01List->num_returned, 10);
   }

   EXEC SQL CLOSE hst01_cursor4;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
  
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_hst01_list_all ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_hst01_list_all_same_date( pHST01 hst01_ptr,
                                     pHST01_LIST Hst01List,
                                     pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char file_name[10] = {0};
    char unique_id[18] = {0};
    char end_date[18]  = {0};
    int temp = 0;
    long int date = 0;
    EXEC SQL END DECLARE SECTION;

   memset( Hst01List, 0, sizeof(HST01_LIST) );
   strcpy(Hst01List->num_returned,"0");
   strncpy( unique_id, hst01_ptr->primary_key.unique_id, sizeof(unique_id) );
   
   
   //audit log issue
   strncpy(end_date, hst01_ptr->reserved, sizeof(end_date));
   if(strlen(end_date) <= 0 || !(DateIsNumeric(end_date)))
   {
	   memset(&end_date, 0, sizeof(end_date));
   }
   
   date = atoi(end_date) +1;
   itoa(date, end_date, 10);
   

	if ( db_error_statics_flag == true )
   	{
      		start_time = ptetime_get_time();
  	}
  	
    EXEC SQL DECLARE hst01_cursor6 CURSOR FOR
    SELECT * from hst01
    WHERE  unique_id >= (:unique_id || '%') AND unique_id < (:end_date || '%') 
    ORDER BY UNIQUE_ID;
	  
    if ( db_error_statics_flag == true )
    {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
        if(duration >= db_error_statics_value)
	 	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : HST01 ,Fun_Name : db_get_hst01_list_all_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN hst01_cursor6;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE; temp++ )
   {
   		if ( db_error_statics_flag == true )
   	  {
      		start_time = ptetime_get_time();
  	  }
      memset(&db_hst01, 0x00, sizeof(db_hst01));
      EXEC SQL FETCH hst01_cursor6
      INTO :db_hst01;
	   if ( db_error_statics_flag == true )
       {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : HST01 ,Fun_Name : db_get_hst01_list_all_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE hst01_cursor6;
        
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_hst01_list_all ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      db_to_hst01(&Hst01List->history[temp]);
      /*strncpy( Hst01List->file_name[temp], new_file_name.arr, new_file_name.len );*/
      itoa(temp + 1, Hst01List->num_returned, 10);
   }

   EXEC SQL CLOSE hst01_cursor6;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
  
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_hst01_list_all ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_hst01_list_by_user( pHST01 hst01_ptr,
                                     pHST01_LIST Hst01List,
                                     pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char file_name[10]  = {0};
    char unique_id[18]  = {0};
    char changed_by[21] = {0};
    char end_date[18] = {0};
    long int date = 0;
    
    int temp = 0;
    EXEC SQL END DECLARE SECTION;

   memset( Hst01List, 0, sizeof(HST01_LIST) );
   strcpy(Hst01List->num_returned,"0");
   strncpy( unique_id, hst01_ptr->primary_key.unique_id, sizeof(unique_id) );
   strncpy( changed_by, hst01_ptr->changed_by, sizeof(changed_by) );
   
   strncpy(end_date, hst01_ptr->reserved, sizeof(end_date));
   if(strlen(end_date) <= 0 || !(DateIsNumeric(end_date)))
   {
	   memset(&end_date, 0, sizeof(end_date));
   }
   
   date = atoi(end_date) +1;
   itoa(date, end_date, 10);
   
	if ( db_error_statics_flag == true )
   	{
      	start_time = ptetime_get_time();
  	}
  	
   EXEC SQL DECLARE hst01_cursor5 CURSOR FOR
      SELECT * from hst01
      WHERE  unique_id >= (:unique_id ) AND unique_id < (:end_date  || '%')
      AND changed_by = :changed_by
      ORDER BY UNIQUE_ID;
      
    if ( db_error_statics_flag == true )
    {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
     	if(duration >= db_error_statics_value)
	 	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : HST01 ,Fun_Name : db_get_hst01_list_by_user_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN hst01_cursor5;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE; temp++ )
   {
   		if ( db_error_statics_flag == true )
   	  {
      		start_time = ptetime_get_time();
  	  }
      memset(&db_hst01, 0x00, sizeof(db_hst01));
      EXEC SQL FETCH hst01_cursor5
      INTO :db_hst01;
		if ( db_error_statics_flag == true )
       {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : HST01 ,Fun_Name : db_get_hst01_list_by_user_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE hst01_cursor5;
  		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_hst01_list_by_user ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      db_to_hst01(&Hst01List->history[temp]);
      /*strncpy( Hst01List->file_name[temp], new_file_name.arr, new_file_name.len );*/
      itoa(temp + 1, Hst01List->num_returned, 10);
   }

   EXEC SQL CLOSE hst01_cursor5;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_hst01_list_by_user ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_hst01_list_by_user_same_date( pHST01 hst01_ptr,
                                     pHST01_LIST Hst01List,
                                     pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char file_name[10] = {0};
    char unique_id[18] = {0};
    char changed_by[21]= {0};
    char end_date[18] = {0};
    long int date = 0;

    int temp = 0;
    EXEC SQL END DECLARE SECTION;

   memset( Hst01List, 0, sizeof(HST01_LIST) );
   strcpy(Hst01List->num_returned,"0");
   strncpy( unique_id, hst01_ptr->primary_key.unique_id, sizeof(unique_id) );
   strncpy( changed_by, hst01_ptr->changed_by, sizeof(changed_by) );
   
   strncpy(end_date, hst01_ptr->reserved, sizeof(end_date));
   if(strlen(end_date) <= 0 || !(DateIsNumeric(end_date)))
   {
	   memset(&end_date, 0, sizeof(end_date));
   }
   
   date = atoi(end_date) +1;
   itoa(date, end_date, 10);
   
	if ( db_error_statics_flag == true )
   	{
      	start_time = ptetime_get_time();
  	}
  	
   EXEC SQL DECLARE hst01_cursor7 CURSOR FOR
      SELECT * from hst01
      WHERE  unique_id >= (:unique_id || '%') AND unique_id < (:end_date || '%')
      AND changed_by = :changed_by
      ORDER BY UNIQUE_ID;
      
    if ( db_error_statics_flag == true )
    {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
     	if(duration >= db_error_statics_value)
	 	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : HST01 ,Fun_Name : db_get_hst01_list_by_user_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN hst01_cursor7;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE; temp++ )
   {
   		if ( db_error_statics_flag == true )
   	  {
      		start_time = ptetime_get_time();
  	  }
      memset(&db_hst01, 0x00, sizeof(db_hst01));
      EXEC SQL FETCH hst01_cursor7
      INTO :db_hst01;
		if ( db_error_statics_flag == true )
       {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : HST01 ,Fun_Name : db_get_hst01_list_by_user_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE hst01_cursor7;
  		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_hst01_list_by_user ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      db_to_hst01(&Hst01List->history[temp]);
      /*strncpy( Hst01List->file_name[temp], new_file_name.arr, new_file_name.len );*/
      itoa(temp + 1, Hst01List->num_returned, 10);
   }

   EXEC SQL CLOSE hst01_cursor7;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_hst01_list_by_user ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_hst01_list_by_file_name( pHST01 hst01_ptr,
                                     pHST01_LIST Hst01List,
                                     pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char file_name[10];
    char unique_id[18];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Hst01List, 0, sizeof(HST01_LIST) );
   strcpy(Hst01List->num_returned,"0");
   strncpy( file_name, hst01_ptr->file_name, sizeof(file_name) );
   strncpy( unique_id, hst01_ptr->primary_key.unique_id, sizeof(unique_id) );

	if ( db_error_statics_flag == true )
  	{
      	start_time = ptetime_get_time();
   	}
   EXEC SQL DECLARE hst01_cursor1 CURSOR FOR
      SELECT * from hst01
      WHERE  file_name = :file_name AND unique_id >= :unique_id
      ORDER BY UNIQUE_ID;
    if ( db_error_statics_flag == true )
    {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
     	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : HST01 ,Fun_Name : db_get_hst01_list_by_file_name_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN hst01_cursor1;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE; temp++ )
   {
   	  if ( db_error_statics_flag == true )
  	  {
      		start_time = ptetime_get_time();
   	  }
      memset(&db_hst01, 0x00, sizeof(db_hst01));
      EXEC SQL FETCH hst01_cursor1
      INTO :db_hst01;
	   if ( db_error_statics_flag == true )
       {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : HST01 ,Fun_Name : db_get_hst01_list_by_file_name_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE hst01_cursor1;
       	memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_hst01_list_by_file_name ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      db_to_hst01(&Hst01List->history[temp]);
      /*strncpy( Hst01List->file_name[temp], new_file_name.arr, new_file_name.len );*/
      itoa(temp + 1, Hst01List->num_returned, 10);
   } 

   EXEC SQL CLOSE hst01_cursor1;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_hst01_list_by_file_name ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}




/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_hst01_list_by_file_name_key( pHST01 hst01_ptr,
                                         pHST01_LIST Hst01List,
                                         pCHAR ErrorMsg )
{
    EXEC SQL BEGIN DECLARE SECTION;
    char file_name[10];
    char file_primary_key[51];
    char unique_id[18];
    int temp;
    char login[15] = "LogIN Date";
    char logout[15] = "LogOut Date";
    EXEC SQL END DECLARE SECTION;

   memset( Hst01List, 0, sizeof(HST01_LIST) );
   strcpy(Hst01List->num_returned,"0");
   strncpy( file_name, hst01_ptr->file_name, sizeof(file_name) );
   strncat(file_name,"%",1);
   strncpy( file_primary_key, hst01_ptr->file_primary_key, sizeof(file_primary_key) );
   strncpy( unique_id, hst01_ptr->primary_key.unique_id, sizeof(unique_id) );

   if((strncmp(hst01_ptr->file_name, "UCF01", 5) == 0) && (strncmp(hst01_ptr->changed_by, "USERDEFN", 8) == 0))
   {
		if ( db_error_statics_flag == true )
		{
			start_time = ptetime_get_time();
		}
		
	   EXEC SQL DECLARE hst01_udef_cursor CURSOR FOR
		  SELECT * from hst01
		  WHERE  file_name like :file_name AND file_primary_key = :file_primary_key AND unique_id >= :unique_id AND
		  	  	 ((field_tag != :login AND field_tag != :logout) OR field_tag is null)
		  ORDER BY unique_id;
		if ( db_error_statics_flag == true )
		{
			 end_time = ptetime_get_time();
			 duration = end_time - start_time;
			 if(duration >= db_error_statics_value)
			 {
				memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : HST01 ,Fun_Name : db_get_hst01_list_by_file_name_key_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
			}
		  }
	   EXEC SQL WHENEVER SQLERROR goto sql_error;
	   EXEC SQL OPEN hst01_udef_cursor;
	
	   EXEC SQL WHENEVER SQLERROR goto sql_error3;
	   EXEC SQL WHENEVER NOTFOUND DO break;
	   for ( temp = 0; temp < GUI_MAX_LIST_SIZE; temp++ )
	   {
		  if ( db_error_statics_flag == true )
		  {
			 start_time = ptetime_get_time();
		  }
		  memset(&db_hst01, 0x00, sizeof(db_hst01));
		  EXEC SQL FETCH hst01_udef_cursor
		  INTO :db_hst01;
			if ( db_error_statics_flag == true )
		   {
			 end_time = ptetime_get_time();
			 duration = end_time - start_time;
			 if(duration >= db_error_statics_value)
			 {
				memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : HST01 ,Fun_Name : db_get_hst01_list_by_file_name_key_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
			}
		  }
		  sql_error3:
		  if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
		  {
			 SQL_CODE = SQLCODE;
			 EXEC SQL CLOSE hst01_udef_cursor;
			memset(er_buf,0x00,sizeof(er_buf));
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In  db_get_hst01_list_by_file_name_key ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
		
		  }
		  db_to_hst01(&Hst01List->history[temp]);
		  /*strncpy( Hst01List->file_name[temp], new_file_name.arr, new_file_name.len );*/
		  itoa(temp + 1, Hst01List->num_returned, 10);
	   }
	
	   EXEC SQL CLOSE hst01_udef_cursor;
	
	   return PTEMSG_OK;
   }
   else
   {
		if ( db_error_statics_flag == true )
	  	{
	      	start_time = ptetime_get_time();
	   	}
		
	   EXEC SQL DECLARE hst01_cursor3 CURSOR FOR
	      SELECT * from hst01
	      WHERE  file_name like :file_name AND file_primary_key = :file_primary_key AND unique_id >= :unique_id
		  ORDER BY unique_id;
	    if ( db_error_statics_flag == true )
	    {
	      	 end_time = ptetime_get_time();
	     	 duration = end_time - start_time;
	     	 if(duration >= db_error_statics_value)
		 	 {
		  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : HST01 ,Fun_Name : db_get_hst01_list_by_file_name_key_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		  	}
	      }
	   EXEC SQL WHENEVER SQLERROR goto sql_error;
	   EXEC SQL OPEN hst01_cursor3;

	   EXEC SQL WHENEVER SQLERROR goto sql_error2;
	   EXEC SQL WHENEVER NOTFOUND DO break;
	   for ( temp = 0; temp < GUI_MAX_LIST_SIZE; temp++ )
	   {
	   	  if ( db_error_statics_flag == true )
	  	  {
	      	 start_time = ptetime_get_time();
	      }
	      memset(&db_hst01, 0x00, sizeof(db_hst01));
	      EXEC SQL FETCH hst01_cursor3
	      INTO :db_hst01;
			if ( db_error_statics_flag == true )
	       {
	      	 end_time = ptetime_get_time();
	     	 duration = end_time - start_time;
	     	 if(duration >= db_error_statics_value)
		 	 {
		  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : HST01 ,Fun_Name : db_get_hst01_list_by_file_name_key_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		  	}
	      }
	      sql_error2:
	      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
	      {
	         SQL_CODE = SQLCODE;
	         EXEC SQL CLOSE hst01_cursor3;
	        memset(er_buf,0x00,sizeof(er_buf));
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In  db_get_hst01_list_by_file_name_key ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
	    
	      }
	      db_to_hst01(&Hst01List->history[temp]);
	      /*strncpy( Hst01List->file_name[temp], new_file_name.arr, new_file_name.len );*/
	      itoa(temp + 1, Hst01List->num_returned, 10);
	   }

	   EXEC SQL CLOSE hst01_cursor3;

	   return PTEMSG_OK;
   }

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
 	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_hst01_list_by_file_name_key ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_hst01_list_by_user_name( pHST01 hst01_ptr,
                                     pHST01_LIST Hst01List,
                                     pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char changed_by[9];
    char unique_id[18];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Hst01List, 0, sizeof(HST01_LIST) );
   strcpy(Hst01List->num_returned,"0");
   strncpy( changed_by, hst01_ptr->changed_by, sizeof(changed_by) );
   strncpy( unique_id, hst01_ptr->primary_key.unique_id, sizeof(unique_id) );

   if ( db_error_statics_flag == true )
   {
      	 start_time = ptetime_get_time();
   }
   EXEC SQL DECLARE hst01_cursor2 CURSOR FOR
      SELECT * from hst01
      WHERE  changed_by = :changed_by AND unique_id >= :unique_id
      ORDER BY UNIQUE_ID;

   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : HST01 ,Fun_Name : db_get_hst01_list_by_user_name_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN hst01_cursor2;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE; temp++ )
   {
   	   if ( db_error_statics_flag == true )
      {
      	 start_time = ptetime_get_time();
      }
      memset(&db_hst01, 0x00, sizeof(db_hst01));
      EXEC SQL FETCH hst01_cursor2
      INTO :db_hst01;
		if ( db_error_statics_flag == true )
       {
      	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : HST01 ,Fun_Name : db_get_hst01_list_by_user_name_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE hst01_cursor2;
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_hst01_list_by_user_name ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      db_to_hst01(&Hst01List->history[temp]);
      /*strncpy( Hst01List->file_name[temp], new_file_name.arr, new_file_name.len );*/
      itoa(temp + 1, Hst01List->num_returned, 10);
   }

   EXEC SQL CLOSE hst01_cursor2;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_hst01_list_by_user_name ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}


/*************************************************************************************/
/*    
      Revision History: Modified WHERE clause from '>' to '>=' 
      Authour         :supriya, 20th,Nov,98.  
 */
/*************************************************************************************/
BYTE db_get_ucf01_list( pCHAR Name,
                        pUCF01_LIST Ucf01List,
                        pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char name[21];
    varchar new_name[21];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Ucf01List, 0, sizeof(UCF01_LIST) );
   strcpy(Ucf01List->num_returned,"0");
   strncpy( name, Name, sizeof(name) );

   if ( db_error_statics_flag == true )
   {
      	 start_time = ptetime_get_time();
   }
   EXEC SQL DECLARE ucf01_cursor CURSOR FOR
      SELECT name from ucf01
      WHERE  name >= :name ORDER BY NAME;
    if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF01 ,Fun_Name : db_get_ucf01_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN ucf01_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
   	   if ( db_error_statics_flag == true )
      {
      	  start_time = ptetime_get_time();
      }
      memset(&new_name, 0x00, sizeof(new_name));
      EXEC SQL FETCH ucf01_cursor
      INTO :new_name;
     if ( db_error_statics_flag == true )
     {
         end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF01 ,Fun_Name : db_get_ucf01_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE ucf01_cursor;
        memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_ucf01_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      strncpy( Ucf01List->name[temp], new_name.arr, new_name.len );
      itoa(temp + 1, Ucf01List->num_returned, 10);
   }

   EXEC SQL CLOSE ucf01_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_ucf01_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}
BYTE db_get_ucf01_Userlist( pCHAR Name,
                        pUCF01_LIST Ucf01List,
                        pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char name[21];
    varchar new_name[21];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Ucf01List, 0, sizeof(UCF01_LIST) );
   strcpy(Ucf01List->num_returned,"0");
   strncpy( name, Name, sizeof(name) );

   if ( db_error_statics_flag == true )
   {
      	 start_time = ptetime_get_time();
   }
   EXEC SQL DECLARE ucf01userlist_cursor CURSOR FOR
      SELECT name from ucf01
      WHERE  name >= :name and
      USER_STATUS!='DELETED' ORDER BY NAME;
    if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF01 ,Fun_Name : db_get_ucf01_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN ucf01userlist_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
   	   if ( db_error_statics_flag == true )
      {
      	  start_time = ptetime_get_time();
      }
      memset(&new_name, 0x00, sizeof(new_name));
      EXEC SQL FETCH ucf01userlist_cursor
      INTO :new_name;
     if ( db_error_statics_flag == true )
     {
         end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF01 ,Fun_Name : db_get_ucf01_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE ucf01userlist_cursor;
        memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_ucf01_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      strncpy( Ucf01List->name[temp], new_name.arr, new_name.len );
      itoa(temp + 1, Ucf01List->num_returned, 10);
   }

   EXEC SQL CLOSE ucf01userlist_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_ucf01_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}
/*************************************************************************************/
  
/*Added UCF03 Table for PCI Changes by TF-Srikanth */

/*************************************************************************************/
BYTE db_get_ucf03_list( pCHAR Name,
                        pUCF03_LIST Ucf03List,
                        pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char name[21];
    varchar new_name[21];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Ucf03List, 0, sizeof(UCF03_LIST) );
   strcpy(Ucf03List->num_returned,"0");
   strncpy( name, Name, sizeof(name) );

   if ( db_error_statics_flag == true )
   {
      	start_time = ptetime_get_time();
   }
   EXEC SQL DECLARE ucf03_cursor CURSOR FOR
      SELECT name from ucf03
      WHERE  name >= :name;
    if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF03 ,Fun_Name : db_get_ucf03_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN ucf03_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
   	   if ( db_error_statics_flag == true )
      {
      	  start_time = ptetime_get_time();
      }
      memset(&new_name, 0x00, sizeof(new_name));
      EXEC SQL FETCH ucf03_cursor
      INTO :new_name;
	  if ( db_error_statics_flag == true )
      {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF03 ,Fun_Name : db_get_ucf03_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE ucf03_cursor;
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_ucf03_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      strncpy( Ucf03List->name[temp], new_name.arr, new_name.len );
      itoa(temp + 1, Ucf03List->num_returned, 10);
   }

   EXEC SQL CLOSE ucf03_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_ucf03_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}



/*************************************************************************************/
/*    
      Revision History:
      Authour         :
 */
/*************************************************************************************/

BYTE db_get_acf01_gui_list( pACF01 acf01_ptr,
                            pACF01_GUI_LIST Acf01_List,     pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char account_nbr[20];
    char account_type[3];
    varchar db_account_nbr[20];
    varchar db_account_type[3];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Acf01_List, 0, sizeof(ACF01_GUI_LIST) );
   strcpy(Acf01_List->num_returned,"0");
   strncpy( account_nbr, acf01_ptr->primary_key.account_nbr, sizeof(account_nbr) );
   strncpy( account_type, acf01_ptr->primary_key.account_type, sizeof(account_type) );

	if ( db_error_statics_flag == true )
    {
      	  start_time = ptetime_get_time();
    }
   EXEC SQL DECLARE acf01_cursor3 CURSOR FOR
      SELECT account_nbr,account_type from acf01
      WHERE  (account_nbr >= :account_nbr AND account_type >= :account_type) OR
                  (account_nbr > :account_nbr)
	  ORDER BY account_nbr,account_type ;
    if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ACF01 ,Fun_Name : db_get_acf01_gui_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN acf01_cursor3;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
      if ( db_error_statics_flag == true )
      {
      	  start_time = ptetime_get_time();
      }
      memset(&db_acf01, 0x00, sizeof(db_acf01));
      EXEC SQL FETCH acf01_cursor3
      INTO db_account_nbr,db_account_type;
		if ( db_error_statics_flag == true )
        {
      	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;

     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ACF01 ,Fun_Name : db_get_acf01_gui_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA  )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE acf01_cursor3;
         
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_acf01_gui_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      /*db_to_acf01(&Acf01_List->acf01_list[temp]);*/

	  strncpy( Acf01_List->acf01_list[temp].primary_key.account_nbr,  db_account_nbr.arr,  db_account_nbr.len );
	  strncpy( Acf01_List->acf01_list[temp].primary_key.account_type, db_account_type.arr, db_account_type.len );
      itoa(temp + 1, Acf01_List->num_returned, 10);
   }

   EXEC SQL CLOSE acf01_cursor3;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_acf01_gui_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
   
}



/*************************************************************************************/
/*    
      Revision History:
      Authour         :
 */
/*************************************************************************************/
BYTE db_get_acf01_gui_list_by_type ( pACF01 acf01_ptr,
                            pACF01_GUI_LIST Acf01_List,     pCHAR ErrorMsg )
{
    EXEC SQL BEGIN DECLARE SECTION;
    char account_nbr[20];
    char account_type[3];
    varchar db_account_nbr[20];
    varchar db_account_type[3];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Acf01_List, 0, sizeof(ACF01_GUI_LIST) );
   strcpy(Acf01_List->num_returned,"0");
   strncpy( account_nbr, acf01_ptr->primary_key.account_nbr, sizeof(account_nbr) );
   strncpy( account_type, acf01_ptr->primary_key.account_type, sizeof(account_type) );

	if ( db_error_statics_flag == true )
    {
      	 start_time = ptetime_get_time();
    }
   EXEC SQL DECLARE acf01_cursor4 CURSOR FOR
      SELECT account_nbr,account_type from acf01
      WHERE  (account_nbr >= :account_nbr AND account_type = :account_type)
	  ORDER BY account_nbr;
   EXEC SQL WHENEVER SQLERROR goto sql_error;
	if ( db_error_statics_flag == true )
       {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ACF01 ,Fun_Name : db_get_acf01_gui_list_by_type_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
   EXEC SQL OPEN acf01_cursor4;


   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
   	  if ( db_error_statics_flag == true )
      {
      	  start_time = ptetime_get_time();
      }
      memset(&db_acf01, 0x00, sizeof(db_acf01));
      EXEC SQL FETCH acf01_cursor4
      INTO db_account_nbr,db_account_type;
	  if ( db_error_statics_flag == true )
       {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : ACF01 ,Fun_Name : db_get_acf01_gui_list_by_type_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA  )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE acf01_cursor4;
         
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_acf01_gui_list_by_type ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }

      /*db_to_acf01(&Acf01_List->acf01_list[temp]);*/
	  strncpy( Acf01_List->acf01_list[temp].primary_key.account_nbr,  db_account_nbr.arr,  db_account_nbr.len );
	  strncpy( Acf01_List->acf01_list[temp].primary_key.account_type, db_account_type.arr, db_account_type.len );
      itoa(temp + 1, Acf01_List->num_returned, 10);
   }

   EXEC SQL CLOSE acf01_cursor4;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_acf01_gui_list_by_type ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}



/*************************************************************************************/
/*    
      Revision History:
      Authour         :
 */
/*************************************************************************************/

BYTE db_get_ccf04_gui_list( pCCF04 ccf04_ptr,
                            pCCF04_GUI_LIST Ccf04_List,     pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char card_nbr[20];
    char card_type[3];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Ccf04_List, 0, sizeof(CCF04_GUI_LIST) );
   strcpy(Ccf04_List->num_returned,"0");
   strncpy( card_nbr, ccf04_ptr->primary_key.card_nbr, sizeof(card_nbr) );
   strncpy( card_type, ccf04_ptr->primary_key.card_type, sizeof(card_type) );

	if ( db_error_statics_flag == true )
    {
      	  start_time = ptetime_get_time();
    }
   EXEC SQL DECLARE ccf04_cursor3 CURSOR FOR
      SELECT * from ccf04
      WHERE  (card_nbr = :card_nbr AND card_type >= :card_type)
	  ORDER BY card_type,mcc_lo_range ;
    if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF04 ,Fun_Name : db_get_ccf04_gui_list_CUSRS0R , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN ccf04_cursor3;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
   		if ( db_error_statics_flag == true )
      {
      	  start_time = ptetime_get_time();
      }
      memset(&db_ccf04, 0x00, sizeof(db_ccf04));
      EXEC SQL FETCH ccf04_cursor3
      INTO :db_ccf04;
		if ( db_error_statics_flag == true )
       {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF04 ,Fun_Name : db_get_ccf04_gui_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA  )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE ccf04_cursor3;
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_ccf04_gui_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      db_to_ccf04(&Ccf04_List->ccf04_list[temp]);
      itoa(temp + 1, Ccf04_List->num_returned, 10);
   }

   EXEC SQL CLOSE ccf04_cursor3;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_ccf04_gui_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}



/*************************************************************************************/
/*    
      Revision History:
      Authour         :
 */
/*************************************************************************************/

BYTE db_get_ccf04_gui_list_by_type ( pCCF04 ccf04_ptr,
                            pCCF04_GUI_LIST Ccf04_List,     pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char card_nbr[20];
    char card_type[3];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Ccf04_List, 0, sizeof(CCF04_GUI_LIST) );
   strcpy(Ccf04_List->num_returned,"0");
   strncpy( card_nbr, ccf04_ptr->primary_key.card_nbr, sizeof(card_nbr) );
   strncpy( card_type, ccf04_ptr->primary_key.card_type, sizeof(card_type) );

	if ( db_error_statics_flag == true )
    {
      	 start_time = ptetime_get_time();
    }
   EXEC SQL DECLARE ccf04_cursor4 CURSOR FOR
      SELECT * from ccf04
      WHERE  card_nbr >= :card_nbr AND card_type = :card_type
	  ORDER BY card_nbr ;
    if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF04 ,Fun_Name : db_get_ccf04_gui_list_by_type_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN ccf04_cursor4;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
   	  if ( db_error_statics_flag == true )
      {
      	  start_time = ptetime_get_time();
      }
      memset(&db_ccf04, 0x00, sizeof(db_ccf04));
      EXEC SQL FETCH ccf04_cursor4
      INTO :db_ccf04;
		if ( db_error_statics_flag == true )
       {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CCF04 ,Fun_Name : db_get_ccf04_gui_list_by_type_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA  )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE ccf04_cursor4;
        
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_ccf04_gui_list_by_type ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      db_to_ccf04(&Ccf04_List->ccf04_list[temp]);
      itoa(temp + 1, Ccf04_List->num_returned, 10);
   }

   EXEC SQL CLOSE ccf04_cursor4;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
 	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_ccf04_gui_list_by_type ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_ucf01_list_by_terminal( pUCF01 ucf01_rec,
                        pUCF01_LIST Ucf01List,
                        pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char terminal[21];
    char name[21];
    varchar new_name[21];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Ucf01List, 0, sizeof(UCF01_LIST) );
   strcpy(Ucf01List->num_returned,"0");
   strncpy( name, ucf01_rec->primary_key.name, sizeof(name) );
   strncpy( terminal, ucf01_rec->login[0].terminals, sizeof(terminal) );

	if ( db_error_statics_flag == true )
    {
      	  start_time = ptetime_get_time();
    }
   EXEC SQL DECLARE ucf01_cursor1 CURSOR FOR
      SELECT name from ucf01
      WHERE  terminals_1 = :terminal AND name > :name ORDER BY NAME;
    if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF01 ,Fun_Name : db_get_ucf01_list_by_terminal_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN ucf01_cursor1;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE; temp++ )
   {
      if ( db_error_statics_flag == true )
     {
      	  start_time = ptetime_get_time();
     }
      memset(&new_name, 0x00, sizeof(new_name));
      EXEC SQL FETCH ucf01_cursor1
      INTO :new_name;
		if ( db_error_statics_flag == true )
       {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF01 ,Fun_Name : db_get_ucf01_list_by_terminal_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE ucf01_cursor1;
        
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_ucf01_list_by_terminal ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      strncpy( Ucf01List->name[temp], new_name.arr, new_name.len );
      itoa(temp + 1, Ucf01List->num_returned, 10);
   }

   EXEC SQL CLOSE ucf01_cursor1;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_ucf01_list_by_terminal ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}

/*************************************************************************************/
/*Added UCF03 Table for PCI Changes by TF-Srikanth */
/*************************************************************************************/
BYTE db_get_ucf03_list_by_terminal( pUCF03 ucf03_rec,
                        pUCF03_LIST Ucf03List,
                        pCHAR ErrorMsg )
{
    
   return PTEMSG_OK;

}



/*************************************************************************************/
/*    
      Revision History: Modified WHERE clause from '>' to '>=' 
      Authour         :supriya, 22nd,Nov,98.  
 */
/*************************************************************************************/
BYTE db_get_ucf02_list( pCHAR Group_id,
                        pUCF02_LIST Ucf02List,
                        pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char group_id[16];
    varchar new_group_id[16];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Ucf02List, 0, sizeof(UCF02_LIST) );
   strcpy(Ucf02List->num_returned,"0");
   strncpy( group_id, Group_id, sizeof(group_id) );

	if ( db_error_statics_flag == true )
    {
      	  start_time = ptetime_get_time();
    }
   EXEC SQL DECLARE ucf02_cursor CURSOR FOR
      SELECT group_id from ucf02
      WHERE  group_id >= :group_id;
    if ( db_error_statics_flag == true )
     {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF01 ,Fun_Name : db_get_ucf02_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN ucf02_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
      if ( db_error_statics_flag == true )
     {
      	  start_time = ptetime_get_time();
     }
      memset(&new_group_id, 0x00, sizeof(new_group_id));
      EXEC SQL FETCH ucf02_cursor
      INTO :new_group_id;
      if ( db_error_statics_flag == true )
      {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF01 ,Fun_Name : db_get_ucf02_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE ucf02_cursor;
        
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_ucf02_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      strncpy( Ucf02List->group_id[temp], new_group_id.arr, new_group_id.len );
      itoa(temp + 1, Ucf02List->num_returned, 10);
   }

   EXEC SQL CLOSE ucf02_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_ucf02_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_ucf02_list_by_terminal( pUCF02 ucf02_rec,
                        pUCF02_LIST Ucf02List,
                        pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    char terminal[21];
    varchar new_group_id[16];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Ucf02List, 0, sizeof(UCF02_LIST) );
   strcpy(Ucf02List->num_returned,"0");
   strncpy( terminal, ucf02_rec->login[0].terminals, sizeof(terminal) );


	if ( db_error_statics_flag == true )
    {
      	  start_time = ptetime_get_time();
    }
   EXEC SQL DECLARE ucf02_cursor1 CURSOR FOR
      SELECT group_id from ucf02
      WHERE  terminals_1 = :terminal;
    if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF02 ,Fun_Name : db_get_ucf02_list_by_terminal_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
    }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN ucf02_cursor1;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE; temp++ )
   {
   	 if ( db_error_statics_flag == true )
     {
      	  start_time = ptetime_get_time();
     }
      memset(&new_group_id, 0x00, sizeof(new_group_id));
      EXEC SQL FETCH ucf02_cursor1
      INTO :new_group_id;
	  if ( db_error_statics_flag == true )
      {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF02 ,Fun_Name : db_get_ucf02_list_by_terminal_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE ucf02_cursor1;
        
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_ucf02_list_by_terminal ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      strncpy( Ucf02List->group_id[temp], new_group_id.arr, new_group_id.len );
      itoa(temp + 1, Ucf02List->num_returned, 10);
   }

   EXEC SQL CLOSE ucf02_cursor1;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
  	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_ucf02_list_by_terminal ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}




/***********************************************************************************/
/***********************************************************************************/

BYTE db_check_binn_range(pCHAR card_num, pBIN01 binn_range, pCHAR ErrorMsg ) 
{
   EXEC SQL BEGIN DECLARE SECTION;
      int card_len;
      char type[2];
      char temp_card[5] = {0};
   EXEC SQL END DECLARE SECTION;

   memset (binn_range, 0, sizeof(BIN01));
   memcpy (type, card_num + 20, sizeof(type));
   card_len = strlen(card_num);

   strncpy(temp_card,card_num,4);
 
	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
	sprintf(DB_Tmr_Lgng_Buf,"Fetch Bin details from DB for card num: %s , Bin type: %s ,Fun_Name : db_check_binn_range_CURSOR ",temp_card,type);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
			
	if ( db_error_statics_flag == true )
    {
      	  start_time = ptetime_get_time();
    }
   EXEC SQL DECLARE binn_range_table_cursor CURSOR FOR 
   SELECT * from bin01
   WHERE  (to_number(pan_length) = 0  OR  to_number(pan_length) = :card_len)
	 AND  type = :type 
   ORDER BY to_number(length) DESC ;
	if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BIN01 ,Fun_Name : db_check_binn_range_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
    }
   EXEC SQL WHENEVER SQLERROR goto sql_error ;
   EXEC SQL OPEN binn_range_table_cursor ;

   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;

   while(true)
   {
   	  if ( db_error_statics_flag == true )
     {
      	  start_time = ptetime_get_time();
     }
      /* Fetch each row into the data struct. */
      memset(&db_bin01, 0x00, sizeof(db_bin01));
      EXEC SQL FETCH binn_range_table_cursor INTO :db_bin01 ;
		if ( db_error_statics_flag == true )
       {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BIN01 ,Fun_Name : db_check_binn_range_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
      if(SQLCODE == NO_DATA_FOUND)
         return(PTEMSG_NOT_FOUND);

      if((SQLCODE != 0) && (SQLCODE != NULL_COLUMN_DATA))
         break;

      if ( (strncmp(card_num, db_bin01.low.arr, db_bin01.low.len) >= 0) &&
           (strncmp(card_num, db_bin01.high.arr, db_bin01.high.len) <= 0) )
      {
         db_to_bin01 (binn_range);

		 EXEC SQL CLOSE binn_range_table_cursor;

		 return (PTEMSG_OK);  /* Bin Range Found */
      }
   }

   sql_error:
      EXEC SQL WHENEVER SQLERROR CONTINUE;

      EXEC SQL WHENEVER NOTFOUND CONTINUE;

      EXEC SQL CLOSE binn_range_table_cursor ;

      /* printf("Oracle SQL ERROR\n"); */

      if(SQLCODE == NO_DATA_FOUND)
         return(PTEMSG_NOT_FOUND);

   
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_check_binn_range ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}



BYTE db_check_binn02_range(pCHAR card_num, pBIN02 binn_range, pCHAR ErrorMsg ) 
{
   EXEC SQL BEGIN DECLARE SECTION;
      int  bin02_size;
      int  card_len;
      char strTemp [10] = {0};
      char strCardLen[3]= {0};
   EXEC SQL END DECLARE SECTION;

   bin02_size = sizeof(db_bin02);
   memset( binn_range, 0x00, sizeof(BIN02) );
	card_len = strlen(card_num);
   sprintf( strCardLen, "%02d", card_len );

   /* We want to ensure that we only pick bins that start with the same
    * 4 characters as the card number.  The smallest bin is 4 digits.
    */    
   strncpy( strTemp, card_num, 4 );
   strcat(  strTemp, "%" );



   if ( db_error_statics_flag == true )
    {
      	  start_time = ptetime_get_time();
    }
   EXEC SQL DECLARE binn02_range_table_cursor CURSOR FOR 

   SELECT * 
   FROM   bin02
   WHERE  lo like :strTemp
     AND  pan_length = :strCardLen
   ORDER BY to_number(length) DESC ;

   if ( db_error_statics_flag == true )
   {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BIN02 ,Fun_Name : db_check_binn02_range_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
   EXEC SQL WHENEVER SQLERROR goto sql_error ;

   EXEC SQL OPEN binn02_range_table_cursor ;

   /* Check each row from the Bin02 results
    * to see if it is the one we want.
    */
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;

   while(true)
   {
   	  if ( db_error_statics_flag == true )
      {
      	  start_time = ptetime_get_time();
      }
      memset( &db_bin02, 0x00, bin02_size );
      EXEC SQL FETCH binn02_range_table_cursor INTO :db_bin02 ;
      if ( db_error_statics_flag == true )
      {
         end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BIN02 ,Fun_Name : db_check_binn02_range_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
      }
      if(SQLCODE == NO_DATA_FOUND)
         return(PTEMSG_NOT_FOUND);

      if((SQLCODE != 0) && (SQLCODE != NULL_COLUMN_DATA))
         break;

      if ( (strncmp(card_num, db_bin02.lo.arr,   db_bin02.lo.len  ) >= 0) &&
           (strncmp(card_num, db_bin02.high.arr, db_bin02.high.len) <= 0) )
      {
         db_to_bin02 (binn_range);
         EXEC SQL CLOSE binn02_range_table_cursor;
         return (PTEMSG_OK);
      }
   }

   sql_error:
      EXEC SQL WHENEVER SQLERROR CONTINUE;
      EXEC SQL WHENEVER NOTFOUND CONTINUE;
      EXEC SQL CLOSE binn02_range_table_cursor ;

      if(SQLCODE == NO_DATA_FOUND)
         return(PTEMSG_NOT_FOUND);

      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_check_binn02_range ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
}


/******************************************************************************/
/******************************************************************************/
BYTE db_select_negative_fraud( pCHAR            p_data,
                               pNEGATIVE_FRAUD  negfraud,
                               pCHAR            ErrorMsg ) 
{
   BYTE  ret_val = PTEMSG_OK;

   EXEC SQL BEGIN DECLARE SECTION;
      int  pan_len;
      int  bin_len;
      int  card_len;
      char card_num[20];
      char mcc[6];
      char bin_low[17];
      char bin_high[17];
      char country_code[4];
   EXEC SQL END DECLARE SECTION;

   memset( negfraud, 0x00, sizeof(NEGATIVE_FRAUD) );
   memset( mcc,      0x00, sizeof(mcc)            );
   memset( card_num, 0x00, sizeof(card_num)       );

   memcpy( card_num, p_data,   20 );
   memcpy( mcc,      p_data+20, 6 );
   card_len = strlen( card_num );

	if ( db_error_statics_flag == true )
    {
      	  start_time = ptetime_get_time();
    }
   EXEC SQL DECLARE neg_fraud_cursor CURSOR FOR 
      SELECT    *
      FROM      negative_fraud
      WHERE     mcc = :mcc
        AND     pan_length = :card_len
      ORDER BY  bin_length DESC;
	if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : NEGATIVE_FRAUD ,Fun_Name : db_select_negative_fraud_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   EXEC SQL OPEN neg_fraud_cursor;
   if ( SQLCODE != 0 )
      ret_val = PTEMSG_NOT_FOUND;


   while( ret_val == PTEMSG_OK )
   {
      /* Fetch negative fraud records one row at a time for this MCC. */
      memset( mcc,          0x00, sizeof(mcc)          );
      memset( bin_low,      0x00, sizeof(bin_low)      );
      memset( bin_high,     0x00, sizeof(bin_high)     );
      memset( country_code, 0x00, sizeof(country_code) );
      pan_len = 0;
      bin_len = 0;
	  if ( db_error_statics_flag == true )
      {
      	  start_time = ptetime_get_time();
      }
      EXEC SQL FETCH neg_fraud_cursor
      INTO :mcc, :bin_low, :bin_high, :pan_len, :bin_len, :country_code;
		if ( db_error_statics_flag == true )
       {
      	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;

     	  if(duration >= db_error_statics_value)
	 	  {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : NEGATIVE_FGAURD ,Fun_Name : db_select_negative_fraud_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
      }
      if ( SQLCODE == NO_DATA_FOUND )
         ret_val = PTEMSG_NOT_FOUND;

      else if( (SQLCODE != 0) && (SQLCODE != NULL_COLUMN_DATA) )
         ret_val = PTEMSG_NOT_FOUND;

      else
      {
         if ( (strncmp(card_num, bin_low,  bin_len ) >= 0) &&
              (strncmp(card_num, bin_high, bin_len ) <= 0) )
         {
            /* Negative Fraud record found. */
            memcpy( negfraud->primary_key.mcc,      mcc,      sizeof(mcc)     );
            memcpy( negfraud->primary_key.bin_low,  bin_low,  sizeof(bin_low) );
            memcpy( negfraud->primary_key.bin_high, bin_high, sizeof(bin_high));
            negfraud->primary_key.pan_length = pan_len;
            negfraud->bin_length = bin_len;
            memcpy( negfraud->country_code, country_code, sizeof(country_code));
            break;
         }
      }
   }

   if ( (SQLCODE != 0) && (SQLCODE != NULL_COLUMN_DATA) )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_negative_fraud ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   EXEC SQL CLOSE neg_fraud_cursor;
   return( ret_val );
}


/******************************************************************************/
/******************************************************************************/
BYTE db_select_fgraw_single( pCHAR    Primary_key,
                             pFG_RAW  fgraw_ptr,
                             pCHAR    ErrorMsg )
{
   BYTE  retval;

   memset( &db_fgraw, 0x00, sizeof(db_fgraw ) );
   memcpy( pte_fgraw.transaction_id, Primary_key, sizeof(pte_fgraw.transaction_id)-1 );

	if ( db_error_statics_flag == true )
    {
      	  start_time = ptetime_get_time();
    }
   EXEC SQL SELECT *
   INTO :db_fgraw
   FROM FG_RAW
   WHERE transaction_id = :pte_fgraw.transaction_id;
	if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : FG_RAW ,Fun_Name : db_select_fgraw_single_FG_RAW , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_fgraw_single ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }
   else
   {
      db_to_fgraw( fgraw_ptr );
      retval = PTEMSG_OK;
   }
   return( retval );
}


/******************************************************************************/
/******************************************************************************/
BYTE db_select_fgraw_multiple( pCHAR            tranid_list,
                               pFGRAW_GUI_LIST  Fgraw_List,
                               INT              st2,
                               pCHAR            ErrorMsg )
{
   pCHAR  tptr1 = NULL;
   pCHAR  tptr2 = NULL;

   EXEC SQL BEGIN DECLARE SECTION;
      char    transaction_id[21];

      char    tranids[10][21];

      varchar  db_transaction_id  [21];
      varchar  db_system_date      [9];
      varchar  db_length           [5];
      varchar  db_raw_data      [1500];

      varchar  sqltextvar    [1000];

      int   len, i;
      int   temp;
   EXEC SQL END DECLARE SECTION;

   memset( Fgraw_List, 0x00, sizeof(FGRAW_GUI_LIST) );
   strcpy( Fgraw_List->num_returned,"0" );

   /* The primary key is transaction Id.  It can vary in 3 ways:
    * 1.  Not present    - This means get all failed transactions.  Must do this
    *                      ten at a time, so just get the first 10 failed txns.
    * 2.  Single Tran Id - This can mean one of two things:
    *                      a) st2 = 1: This means getting all failed txns ten at
    *                         a time.  Last group ended with this tran id.
    *                      b) st2 = 2: This means getting a group of 10 or less,
    *                         in this case we are getting just one.
    * 3.  More than 1 Id - This means get all of these txns in the same batch.
    *
    * Note: Transaction IDs are separated by 0x1F if more than 1.
    */


   /* -------------------------------------------------------------- */
   /* Dynamically build select based on presence or absence of data. */
   /* -------------------------------------------------------------- */

    /* Determine which of the above cases is true. */
   if ( tranid_list[0] == 0x00 )
   {
      /* Case 1 */
      strcpy( sqltextvar.arr,
             "SELECT transaction_id, system_date, length, raw_data "
             " FROM FG_RAW "
             " WHERE transaction_id in "
             "       (select transaction_id from FGUARD where transaction_id > ' ' and result_code = 'FALSE') "
             " ORDER BY transaction_id"
              );
   }
   else
   {
      if ( NULL == strchr(tranid_list,0x1F) )
      {
         /* Case 2 */

         memcpy( transaction_id, tranid_list, sizeof(transaction_id) );
         strcpy( sqltextvar.arr,
                "SELECT transaction_id, system_date, length, raw_data "
                " FROM FG_RAW "
                " WHERE transaction_id in "
                "    (select transaction_id from FGUARD where"
               );

         if ( st2 == 1 )
         {
            /* Case 2a - Get the next group of transaction Ids. */
            sprintf( sqltextvar.arr,
                    "%s transaction_id > '%s' and result_code = 'FALSE') ORDER BY transaction_id",
                     sqltextvar.arr, transaction_id );
         }
         else
         {
            /* Case 2b - Get a single transaction id. */
            sprintf( sqltextvar.arr,
                    "%s transaction_id = '%s' and result_code = 'FALSE') ORDER BY transaction_id",
                     sqltextvar.arr, transaction_id );
         }
      }
      else
      {
         /* Case 3 - Get all of the Tran IDs from the input stream. */
         memset( tranids, 0x00, sizeof(tranids) );
         i = 0;
         tptr1 = tranid_list;
         while( NULL != strchr(tptr1,0x1F) )
         {
            len = tptr2 - tptr1;
            memcpy( tranids[i++], tptr1, len );
            tptr1 = tptr2 + 1;
            if ( i > 9 )
               break;
         }

         strcpy( sqltextvar.arr,
                "SELECT transaction_id, system_date, length, raw_data "
                " FROM FG_RAW "
                " WHERE transaction_id in "
                "    (select transaction_id from FGUARD where transaction_id in ("
               );

         sprintf( sqltextvar.arr,
                 "%s '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' ) and result_code = 'FALSE')",
                  sqltextvar.arr,
                  tranids[0], tranids[1], tranids[2], tranids[3], tranids[4],
                  tranids[5], tranids[6], tranids[7], tranids[8], tranids[9] );
      }
   }
   sqltextvar.len = strlen(sqltextvar.arr);

	if ( db_error_statics_flag == true )
    {
      	  start_time = ptetime_get_time();
    }
   EXEC SQL PREPARE S FROM :sqltextvar;
   EXEC SQL DECLARE fgraw_cursor CURSOR FOR S;

	if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : FGRAW ,Fun_Name : db_select_fgraw_multiple_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
    }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN fgraw_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE1; temp++ )
   {
   	 if ( db_error_statics_flag == true )
     {
      	  start_time = ptetime_get_time();
     }
      EXEC SQL FETCH fgraw_cursor
      INTO :db_transaction_id, db_system_date,  db_length, db_raw_data;
		if ( db_error_statics_flag == true )
       {
      	  end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : FGRAW ,Fun_Name : db_select_fgraw_multiple_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE fgraw_cursor;
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_fgraw_multiple ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      memcpy( Fgraw_List->FG_RAW_record[temp].transaction_id,
              db_transaction_id.arr, db_transaction_id.len );

      memcpy( Fgraw_List->FG_RAW_record[temp].system_date,
              db_system_date.arr, db_system_date.len );

      memcpy( Fgraw_List->FG_RAW_record[temp].length,
              db_length.arr, db_length.len );

      memcpy( Fgraw_List->FG_RAW_record[temp].raw_data,
              db_raw_data.arr, db_raw_data.len );

      itoa(temp + 1, Fgraw_List->num_returned, 10);
   }

   EXEC SQL CLOSE fgraw_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;

	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_select_fgraw_multiple ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_caf01_list( pCAF01_LIST Caf01List,
                        pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Caf01List, 0, sizeof(CAF01_LIST) );
   strcpy(Caf01List->num_returned,"0");

	if ( db_error_statics_flag == true )
    {
      	  start_time = ptetime_get_time();
    }
   EXEC SQL DECLARE caf01_list_cursor CURSOR FOR
      SELECT * from caf01;
    if ( db_error_statics_flag == true )
    {
         end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01 ,Fun_Name : db_get_caf01_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
    }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN caf01_list_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < CAF01_SERVICE_LIST_SIZE; temp++ )
   {
   	  if ( db_error_statics_flag == true )
      {
      	  start_time = ptetime_get_time();
      }
      EXEC SQL FETCH caf01_list_cursor
      INTO :db_caf01;
		if ( db_error_statics_flag == true )
       {
      	  end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CAF01 ,Fun_Name : db_get_caf01_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE caf01_list_cursor;
   		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_caf01_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      db_to_caf01(&Caf01List->caf01_list[temp]);
      itoa(temp + 1, Caf01List->num_returned, 10);
   }

   EXEC SQL CLOSE caf01_list_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_caf01_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_crf01_list( pCRF01_LIST Crf01List,
                        pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Crf01List, 0, sizeof(CRF01_LIST) );
   strcpy(Crf01List->num_returned,"0");

	if ( db_error_statics_flag == true )
    {
      	  start_time = ptetime_get_time();
    }
   EXEC SQL DECLARE crf01_list_cursor CURSOR FOR
      SELECT * from crf01;
    if ( db_error_statics_flag == true )
   {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CRF01 ,Fun_Name : db_get_crf01_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN crf01_list_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < SERVICE_LIST_SIZE; temp++ )
   {
   	 if ( db_error_statics_flag == true )
     {
      	  start_time = ptetime_get_time();
     }
      EXEC SQL FETCH crf01_list_cursor
      INTO :db_crf01;
		if ( db_error_statics_flag == true )
       {
      	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : CRF01 ,Fun_Name : db_get_crf01_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE crf01_list_cursor;
         
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_crf01_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      db_to_crf01(&Crf01List->crf01_list[temp]);
      itoa(temp + 1, Crf01List->num_returned, 10);
   }

   EXEC SQL CLOSE crf01_list_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_crf01_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_faf01_list( pFAF01_LIST Faf01List,
                        pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Faf01List, 0, sizeof(FAF01_LIST) );
   strcpy(Faf01List->num_returned,"0");

	if ( db_error_statics_flag == true )
    {
      	  start_time = ptetime_get_time();
    }
   EXEC SQL DECLARE faf01_list_cursor CURSOR FOR
      SELECT * from faf01;
    if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : FAF01 ,Fun_Name : db_get_faf01_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN faf01_list_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < FAF01_SERVICE_LIST_SIZE; temp++ )
   {
   	 if ( db_error_statics_flag == true )
     {
      	  start_time = ptetime_get_time();
     }
      EXEC SQL FETCH faf01_list_cursor
      INTO :db_faf01;
		if ( db_error_statics_flag == true )
       {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : FAF01 ,Fun_Name : db_get_faf01_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE faf01_list_cursor;
         
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_faf01_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      db_to_faf01(&Faf01List->faf01_list[temp]);
      itoa(temp + 1, Faf01List->num_returned, 10);
   }

   EXEC SQL CLOSE faf01_list_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   	memset(er_buf,0x00,sizeof(er_buf));
   	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_faf01_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_bin01_list( pBIN01_LIST Bin01List,
                        pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    int temp;
    LONG db_bin_count=0;
    EXEC SQL END DECLARE SECTION;

	if(DB_bin01_count > SERVICE_LIST_SIZE)
	{
		db_bin_count=DB_bin01_count;
	}
	else
	{
		db_bin_count=SERVICE_LIST_SIZE;
	}
	


   memset( Bin01List, 0, sizeof(BIN01_LIST) );
   strcpy(Bin01List->num_returned,"0");

	if ( db_error_statics_flag == true )
    {
      	  start_time = ptetime_get_time();
    }
   EXEC SQL DECLARE bin01_list_cursor CURSOR FOR
   SELECT * from bin01
   ORDER BY to_number(length) DESC ;
    if ( db_error_statics_flag == true )
       {
      	end_time = ptetime_get_time();

     	 duration = end_time - start_time;

     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BIB01 ,Fun_Name : db_get_bin01_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN bin01_list_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < db_bin_count; temp++ )
   {
   	 if ( db_error_statics_flag == true )
     {
      	  start_time = ptetime_get_time();
     }
      EXEC SQL FETCH bin01_list_cursor
      INTO :db_bin01;
		if ( db_error_statics_flag == true )
       {
      	end_time = ptetime_get_time();

     	 duration = end_time - start_time;

     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BIN01 ,Fun_Name : db_get_bin01_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE bin01_list_cursor;
		 memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In  db_get_bin01_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;
    
      }
      db_to_bin01(&Bin01List->bin_range_list[temp]);
      itoa(temp + 1, Bin01List->num_returned, 10);
   }

   EXEC SQL CLOSE bin01_list_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_bin01_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}


/******************************************************************************/
/******************************************************************************/
BYTE db_get_bon01_list( pBON01_LIST Bon01List,
                        pCHAR ErrorMsg )
{
    EXEC SQL BEGIN DECLARE SECTION;
       int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Bon01List, 0, sizeof(BON01_LIST) );
   strcpy( Bon01List->num_returned,"0" );

	if ( db_error_statics_flag == true )
    {
      	  start_time = ptetime_get_time();
    }
   EXEC SQL DECLARE bon01_list_cursor CURSOR FOR
   SELECT * from bon01;
    if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BON01 ,Fun_Name : db_get_bon01_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
      }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN bon01_list_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;

   for ( temp = 0; temp < SERVICE_LIST_SIZE; temp++ )
   {
   	 if ( db_error_statics_flag == true )
     {
      	  start_time = ptetime_get_time();
     }
      EXEC SQL FETCH bon01_list_cursor
      INTO :db_bon01;
		if ( db_error_statics_flag == true )
       {
      		end_time = ptetime_get_time();
     	 	duration = end_time - start_time;
     	 	if(duration >= db_error_statics_value)
	 	 	{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BON01 ,Fun_Name : db_get_bon01_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE bon01_list_cursor;
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_bon01_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      db_to_bon01(&Bon01List->bon_list[temp]);
      itoa(temp + 1, Bon01List->num_returned, 10);
   }

   EXEC SQL CLOSE bon01_list_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_bon01_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}


/******************************************************************************/
/******************************************************************************/
BYTE db_get_bon02_list( pBON02_LIST Bon02List,
                        pCHAR ErrorMsg )
{
    EXEC SQL BEGIN DECLARE SECTION;
       int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Bon02List, 0, sizeof(BON02_LIST) );
   strcpy( Bon02List->num_returned,"0" );

	if ( db_error_statics_flag == true )
    {
      	  start_time = ptetime_get_time();
    }
   EXEC SQL DECLARE bon02_list_cursor CURSOR FOR
   SELECT * from bon02;
    if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BON02 ,Fun_Name : db_get_bon02_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
    }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN bon02_list_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;

   for ( temp = 0; temp < SERVICE_LIST_SIZE; temp++ )
   {
   	  if ( db_error_statics_flag == true )
     {
      	  start_time = ptetime_get_time();
     }
      EXEC SQL FETCH bon02_list_cursor
      INTO :db_bon02;
		if ( db_error_statics_flag == true )
       {
      		end_time = ptetime_get_time();
     	 	duration = end_time - start_time;
     	 	if(duration >= db_error_statics_value)
	 	 	{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BON02 ,Fun_Name : db_get_bon02_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE bon02_list_cursor;         
		 memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In  db_get_bon02_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;
      }
      db_to_bon02(&Bon02List->bon_list[temp]);
      itoa(temp + 1, Bon02List->num_returned, 10);
   }

   EXEC SQL CLOSE bon02_list_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_bon02_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}


/*************************************************************************************/

/******************************************************************************/
BYTE db_get_mppara01_list( pMPPARA01_GUI_LIST mppara01_Gui_List,
                        pCHAR ErrorMsg )
{
    EXEC SQL BEGIN DECLARE SECTION;
       int temp;
    EXEC SQL END DECLARE SECTION;

   memset( mppara01_Gui_List, 0, sizeof(MPPARA01_GUI_LIST) );
   strcpy( mppara01_Gui_List->num_returned,"0" );

	if ( db_error_statics_flag == true )
    {
      	  start_time = ptetime_get_time();
    }
   EXEC SQL DECLARE mppara01_Gui_List_cursor CURSOR FOR
   SELECT * from mppara01;
    if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MPPARA ,Fun_Name : db_get_mppara01_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN mppara01_Gui_List_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;

   for ( temp = 0; temp < SERVICE_LIST_SIZE; temp++ )
   {
   	  if ( db_error_statics_flag == true )
     {
      	  start_time = ptetime_get_time();
     }
      EXEC SQL FETCH mppara01_Gui_List_cursor
      INTO :db_mppara01;
		if ( db_error_statics_flag == true )
       {
   	   		end_time = ptetime_get_time();
     	 	duration = end_time - start_time;
     	 	if(duration >= db_error_statics_value)
	 	 	{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MPPARA ,Fun_Name : db_get_mppara01_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
      }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE mppara01_Gui_List_cursor;
         
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_mppara01_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    
      }
      db_to_mppara01(mppara01_Gui_List->mppara_info[temp].product_code);
      itoa(temp + 1, mppara01_Gui_List->num_returned, 10);
   }

   EXEC SQL CLOSE mppara01_Gui_List_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_mppara01_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
    
}


/******************************************************************************/


/*************************************************************************************/
BYTE db_check_bpf01_by_job_id ( pBPF01          bpf01_rec, 
                        pCHAR          ErrorMsg )
{
   memset( &db_bpf01, 0, sizeof( db_bpf01 ) );
   strncpy( pte_bpf01.job_id, bpf01_rec->primary_key.job_id, sizeof(pte_bpf01.job_id) );

	if ( db_error_statics_flag == true )
    {
      	  start_time = ptetime_get_time();
    }
   EXEC SQL SELECT *
   INTO :db_bpf01
   FROM bpf01
   WHERE  job_id = :pte_bpf01.job_id;
     if ( db_error_statics_flag == true )
     {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BPF01 ,Fun_Name : db_check_bpf01_by_job_id , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
     } 
   if(SQLCODE == NO_DATA_FOUND)
         return(PTEMSG_NOT_FOUND);

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_bpf01( pBPF01 bpf01_ptr, pCHAR ErrorMsg)
{
   bpf01_to_db( bpf01_ptr );

	if ( db_error_statics_flag == true )
    {
      	  start_time = ptetime_get_time();
    }
   EXEC SQL DELETE FROM bpf01
   WHERE profile_id = :pte_bpf01.profile_id AND job_id = :pte_bpf01.job_id;
	if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BPF01 ,Fun_Name : db_delete_bpf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_bpf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}

/*************************************************************************************/
/*Deleting New Row*/
/*************************************************************************************/
BYTE db_delete_binblkmid01( pMIDBINBLK01 binblkmid01_ptr, pCHAR ErrorMsg)
{
   binblkmid01_to_db( binblkmid01_ptr );

	if ( db_error_statics_flag == true )
    {
      	  start_time = ptetime_get_time();
    }
   // Make sure we can access the record before attempting to delete it. 
   EXEC SQL
      SELECT *
      INTO  :db_binblkmid01
      FROM   MIDBINBLK01
      WHERE  card_type    = :pte_binblkmid01.card_type AND  
             bin_low      = :pte_binblkmid01.bin_low   AND 
			 bin_length   = :pte_binblkmid01.bin_length
      For Update NOWAIT;
      
    if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d , ST2: %d  ,Data_Type : MIDBINBLK01 ,Fun_Name : db_delete_binblkmid01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }  

   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_binblkmid01 ,ST1 : %d,ST2 : %d _1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   
	if ( db_error_statics_flag == true )
    {
      	  start_time = ptetime_get_time();
    }

   EXEC SQL DELETE FROM MIDBINBLK01
   WHERE card_type  = :pte_binblkmid01.card_type AND 
   		 bin_low    = :pte_binblkmid01.bin_low   AND 
		 bin_length = :pte_binblkmid01.bin_length;

    if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d , ST2: %d  ,Data_Type : MIDBINBLK01 ,Fun_Name : db_delete_binblkmid01_D , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    } 
   if (( SQLCODE != 0 ) )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_binblkmid01 ,ST1 : %d,ST2 : %d _2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_bpf01_by_job_id( pBPF01 bpf01_ptr, pCHAR ErrorMsg)
{
   bpf01_to_db( bpf01_ptr );

	if ( db_error_statics_flag == true )
    {
      	  start_time = ptetime_get_time();
    }
   EXEC SQL DELETE FROM bpf01
   WHERE  job_id = :pte_bpf01.job_id;
	if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BPF01 ,Fun_Name : db_delete_bpf01_by_job_id , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_bpf01_by_job_id ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_bpf01_by_profile_id( pBPF01 bpf01_ptr, pCHAR ErrorMsg)
{
   bpf01_to_db( bpf01_ptr );

	if ( db_error_statics_flag == true )
    {
      	  start_time = ptetime_get_time();
    }
   EXEC SQL DELETE FROM bpf01
   WHERE  profile_id = :pte_bpf01.profile_id;
	if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BPF01 ,Fun_Name : db_delete_bpf01_by_profile_id , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
    }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_bpf01_by_profile_id ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/
/*************************************************************************************/

BYTE db_delete_jbf01_by_app_name( pJBF01 jbf01_ptr, pCHAR ErrorMsg)
{
   jbf01_to_db( jbf01_ptr );

	if ( db_error_statics_flag == true )
    {
      	  start_time = ptetime_get_time();
    }
   EXEC SQL DELETE FROM jbf01
   WHERE app_name = :pte_jbf01.app_name;
	if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : JBF01 ,Fun_Name : db_delete_jbf01_by_app_name , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_jbf01_by_app_name ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/
/*   If rec. with 'job_id' exists return PTEMSG_OK,else return PTEMSG_NOT_FOUND  */
/*************************************************************************************/
BYTE db_check_jbf01_by_app_name (  pCHAR          Primary_key, 
                                   pCHAR          ErrorMsg )
{
   memset( &db_jbf01, 0, sizeof( db_jbf01 ) );
   strncpy( pte_jbf01.job_id, Primary_key, sizeof(pte_jbf01.job_id) );

	if ( db_error_statics_flag == true )
    {
      	  start_time = ptetime_get_time();
    }
   EXEC SQL SELECT *
   INTO :db_jbf01
   FROM jbf01
   WHERE app_name = :pte_jbf01.app_name;
	if ( db_error_statics_flag == true )
    {
         end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : JBF01 ,Fun_Name : db_check_jbf01_by_app_name , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if (SQLCODE == NO_DATA_FOUND)
         return(PTEMSG_NOT_FOUND);

   return PTEMSG_OK;
}


/******************************************************************************
 *
 *  NAME:         db_select_auth_id
 *
 *  DESCRIPTION:  This function generates an authorization number
 *                based on the value in UAG01.  The format is Annnnn, where
 *                A is alphanumeric.  Make sure 'A' is numeric if the
 *                subtype2 input parameter asks for numeric only.
 *
 *  INPUTS:       subtype2 - Requests numeric or alphanumeric auth id
 *
 *  OUTPUTS:      uag01_ptr - UAG01 struct containing Authorization number
 *
 *  RTRN VALUE:   PTEMSG_OK if successful, else a different value
 *
 *  AUTHOR:       Dennis Irby
 *
 ******************************************************************************/
BYTE db_select_auth_id( pUAG01 uag01_ptr, BYTE subtype2, pCHAR ErrorMsg )
{
   BYTE  retval = PTEMSG_OK;

   EXEC SQL BEGIN DECLARE SECTION;
      char strNewAuthId[10] ;
   EXEC SQL END DECLARE SECTION;

   memset (&db_uag01, 0, sizeof db_uag01) ;
   memset (strNewAuthId, 0, sizeof strNewAuthId) ;

	if ( db_error_statics_flag == true )
    {
      	  start_time = ptetime_get_time();
    }
   EXEC SQL SELECT auth_id
   INTO :db_uag01
   FROM uag01;    /* auth number table*/
	if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UAG01 ,Fun_Name : db_select_auth_id_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA && SQLCODE != NO_DATA_FOUND)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_auth_id ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }
   else
   {
      /* if the record is not found, start with "000000" */
      if (SQLCODE == NO_DATA_FOUND) 
      {
         strcpy (uag01_ptr->auth_id, "000000") ;
         GenerateNewAuthId (uag01_ptr->auth_id, strNewAuthId );

		if ( db_error_statics_flag == true )
        {
      	 	 start_time = ptetime_get_time();
        }
         EXEC SQL INSERT INTO uag01(auth_id) VALUES ('000001');
		if ( db_error_statics_flag == true )
        {
      		end_time = ptetime_get_time();
     	 	duration = end_time - start_time;
     	 	if(duration >= db_error_statics_value)
	 	 	{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UAG01 ,Fun_Name : db_select_auth_id_I , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
      	}
         if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA && SQLCODE != NO_DATA_FOUND)
         {
			memset(er_buf,0x00,sizeof(er_buf));
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In  db_select_auth_id ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
    	 }
         else
            EXEC SQL COMMIT;
      }
      else
      {
         db_to_uag01( uag01_ptr );
         GenerateNewAuthId( uag01_ptr->auth_id, strNewAuthId );

		if ( db_error_statics_flag == true )
        {
      	 	 start_time = ptetime_get_time();
        }
         /* Make sure we can access the record before attempting to update it. */
         EXEC SQL
            SELECT *
            INTO  :db_uag01
            FROM   uag01
            For Update NOWAIT;
		if ( db_error_statics_flag == true )
   		{
  			end_time = ptetime_get_time();
 	 		duration = end_time - start_time;
 	 		if(duration >= db_error_statics_value)
 	 		{
  				memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UAG01 ,Fun_Name : db_select_auth_id_S2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
  			}
  		}
         if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
         {
            /* Record is inaccessible. Return with error. */
			memset(er_buf,0x00,sizeof(er_buf));
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In  db_select_auth_id ,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
    
         }
         else
         {
			if ( db_error_statics_flag == true )
            {
      	 	  	 start_time = ptetime_get_time();
            }
            EXEC SQL UPDATE uag01
            SET auth_id = :strNewAuthId;
			if ( db_error_statics_flag == true )
       		{
      			end_time = ptetime_get_time();

     	 		duration = end_time - start_time;

     	 		if(duration >= db_error_statics_value)
	 	 		{
	  				memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
					sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UAG01 ,Fun_Name : db_select_auth_id_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
					Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  			}
      		}
            if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
		    {
				memset(er_buf,0x00,sizeof(er_buf));
				DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
				sprintf(er_buf,"In  db_select_auth_id ,ST1:%d,ST2:%d_4",DB_MsgSubtype1,DB_MsgSubtype2);
				strcat(er_buf,ErrorMsg);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
				return DB_rcode;
		    }
            else
            {
               EXEC SQL COMMIT;

               if ( subtype2 == ST2_DB_SELECT_NUMERIC_AUTH_ID )
               {
                  /* Make sure the auth id is totally numeric. */
                  if ( !isdigit(strNewAuthId[0]) )
                  {
                     switch( strNewAuthId[0] )
                     {
                        /* Dont set to 0. Do not want all zeroes. */
                        case 'A':
                        case 'B':
                        case 'C':  strNewAuthId[0] = '1'; break;
                        case 'D':
                        case 'E':
                        case 'F':  strNewAuthId[0] = '2'; break;
                        case 'G':
                        case 'H':
                        case 'I':  strNewAuthId[0] = '3'; break;
                        case 'J':
                        case 'K':
                        case 'L':  strNewAuthId[0] = '4'; break;
                        case 'M':
                        case 'N':
                        case 'O':  strNewAuthId[0] = '5'; break;
                        case 'P':
                        case 'Q':
                        case 'R':  strNewAuthId[0] = '6'; break;
                        case 'S':
                        case 'T':
                        case 'U':  strNewAuthId[0] = '7'; break;
                        case 'V':
                        case 'W':
                        case 'X':  strNewAuthId[0] = '8'; break;
                        case 'Y':
                        case 'Z':  strNewAuthId[0] = '9'; break;
                     }
                     strcpy( uag01_ptr->auth_id, strNewAuthId );
                  }
               }
            }
         }
      }
   }
   return( retval );	
}

/******************************************************************************
 *
 *  NAME:         GenerateNewAuthId
 *
 *  DESCRIPTION:  This function generates an authorization number.  It uses
 *                an existing authorization number as a starting point.  It
 *                increments the first character only after the last 5 have
 *                reached 99999.  The first character is alphanumeric
 *                ( 0, 1,..., 9, A, B,..., Y, Z ).  The last 5 characters
 *                are numeric.  These also get incremented, as a whole.
 *
 *                   Auth Number:  Annnnn
 *                      where
 *                                 A = 0 - Z (alphanumeric)
 *                                 n = 0 - 9 (numeric)
 *
 *                Never let it start with 'K'.  K is reserved for deferred
 *                and RSB transactions.  The authorizer takes care of that
 *                logic.
 *
 *  INPUTS:       pstrCurrentAuthId - An existing authorization number
 *
 *  OUTPUTS:      pstrNewAuthId - A new authorization number
 *
 *  RTRN VALUE:   None
 *
 *  AUTHOR:       Dennis Irby
 *
 *  MODIFICATIONS:
 ******************************************************************************/
void GenerateNewAuthId (char* pstrCurrentAuthId, char* pstrNewAuthId)
{
   INT  nIndex;
   CHAR five_zeroes[] = "00000";

   /*+------------------------------------------------------------+
     | Verify the existing auth number contains valid characters. |
     | Replace with zeroes if not.                                |
     +------------------------------------------------------------+*/

   /* Verify first character to be alphanumeric ( upper case alpha ). */
   if ( isalnum(pstrCurrentAuthId[0]) )
   {
      /* Convert to UPPER CASE if it is a lower case letter. */
      if ( islower(pstrCurrentAuthId[0]) )
         pstrCurrentAuthId[0] = toupper( pstrCurrentAuthId[0] );
   }
   else
      pstrCurrentAuthId[0] = '0';

   /* Verify next five characters to be numeric. */
   for( nIndex=1; nIndex<=5; nIndex++ )
   {
      if ( !isdigit( pstrCurrentAuthId[nIndex] )  )
         pstrCurrentAuthId[nIndex] = '0';
   }

   /*+----------------------------+
     | Generate a new Auth Number |
     +----------------------------+*/

   /* Increment last five characters, which are numeric. */
   for (nIndex = 5; nIndex > 0; nIndex--)
   {
      if ( pstrCurrentAuthId[nIndex] >= '9' )
         pstrCurrentAuthId[nIndex] = '0';

      else
      {
         pstrCurrentAuthId[nIndex] += 1;
         nIndex = 0;  /* Number has been incremented, so break the loop. */
      }
   }

   /* If the last five rolled over to '00000', increment the first character. */
   if ( 0 == strcmp(pstrCurrentAuthId+1, five_zeroes) )
   {
      /* Increment first character; it is alphanumeric. */
      if ( pstrCurrentAuthId[0] == '9' )
         pstrCurrentAuthId[0] = 'A';

      else if ( pstrCurrentAuthId[0] == 'Z' )
         pstrCurrentAuthId[0] = '0';

      else
         pstrCurrentAuthId[0] += 1;
   }

   /* Never let it start with K. */
   if ( pstrCurrentAuthId[0] == 'K' )
      pstrCurrentAuthId[0] = 'L';
	/* SCR#1111 fixed by SDG on 05/22/03 : Client wants to skip approval codes
	starting with D,G,I,J,O,Q,S, and Y */
	else if (pstrCurrentAuthId[0] == 'D')
		pstrCurrentAuthId[0] = 'E';
	else if (pstrCurrentAuthId[0] == 'G')
		pstrCurrentAuthId[0] = 'H';
	else if (pstrCurrentAuthId[0] == 'I')
		pstrCurrentAuthId[0] = 'L';
	else if (pstrCurrentAuthId[0] == 'J')
		pstrCurrentAuthId[0] = 'L';
	else if (pstrCurrentAuthId[0] == 'O')
		pstrCurrentAuthId[0] = 'P';
	else if (pstrCurrentAuthId[0] == 'Q')
		pstrCurrentAuthId[0] = 'R';
	else if (pstrCurrentAuthId[0] == 'S')
		pstrCurrentAuthId[0] = 'T';
	else if (pstrCurrentAuthId[0] == 'Y')
		pstrCurrentAuthId[0] = 'Z';
   strcpy (pstrNewAuthId, pstrCurrentAuthId) ;

   return;
}


/****************************************** BIN02 ************************************************/ 

void bin02_to_db (pBIN02 bin02_ptr)
{
	memcpy (&pte_bin02, bin02_ptr, sizeof pte_bin02);
}

void db_to_bin02 (pBIN02 bin02_ptr)
{
	memset(bin02_ptr, 0, sizeof (BIN02));

	memcpy(bin02_ptr->primary_key.length,	db_bin02.length.arr,			db_bin02.length.len) ;
    memcpy(bin02_ptr->primary_key.lo,		db_bin02.lo.arr,				db_bin02.lo.len) ;

	memcpy(bin02_ptr->high,					db_bin02.high.arr,				db_bin02.high.len) ;
	memcpy(bin02_ptr->pan_length,			db_bin02.pan_length.arr,		db_bin02.pan_length.len) ;
	memcpy(bin02_ptr->destination_name,		db_bin02.destination_name.arr,	db_bin02.destination_name.len) ;
	memcpy(bin02_ptr->description,			db_bin02.description.arr,		db_bin02.description.len) ;
}

BYTE db_delete_bin02 (pCHAR ErrorMsg) 
{
	if ( db_error_statics_flag == true )
    {
      	start_time = ptetime_get_time();
    }
	/* Delete the whole table*/
	EXEC SQL DELETE FROM bin02 ;
	if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BIB02 ,Fun_Name : db_delete_bin02 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
	if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_bin02 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



BYTE db_insert_bin02 (pBIN02 bin02_ptr, pCHAR ErrorMsg)
{
   bin02_to_db (bin02_ptr) ;

	if ( db_error_statics_flag == true )
    {
      	start_time = ptetime_get_time();
    }
   EXEC SQL INSERT INTO bin02
     (  
       length, 
	   lo, 
	   high,          
       pan_length, 
	   destination_name, 
	   description 
     )               
   VALUES(  
           :pte_bin02.length, 
		   :pte_bin02.lo, 
		   :pte_bin02.high,          
           :pte_bin02.pan_length, 
		   :pte_bin02.destination_name, 
		   :pte_bin02.description 
      );
	if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BIN02 ,Fun_Name : db_insert_bin02 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_bin02 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}

/*************************************************************************************/
BYTE db_insert_mppara01( pMPPARA01 mppara01_ptr, pCHAR ErrorMsg )
{
   mppara01_to_db( mppara01_ptr );

	if ( db_error_statics_flag == true )
    {
      	start_time = ptetime_get_time();
    }
   EXEC SQL INSERT INTO mppara01
     (  product_code,			
		minmajpurchamt,		
		maxmajpurchamt,		
		mininstamt,			
		maxinstamt,			
		minmajpurchlmt,		
		minpenaltyamt,			
		maxpenaltyamt,			
		penaltyper,			
		penaltyday,			
		minamtofaging,			
		mntowrtof,			
		BPIminamt,			
		brokenperdinst,		
		minfreepurchamt,		
		errorunauthamt,		
		fixedmpfee,			
		mpfeepercnt,			
		earlyrepayfeeper, 		
		effective_date,		
		maxtrnperday, 			
		maxamtperday, 			
		authoverlimit,			
		authpara_response_code_1, 	
		authpara_message_1,		
		authpara_response_code_2, 
		authpara_message_2,	
		authpara_response_code_3, 	
		authpara_message_3
     )               
   VALUES(  
   		:pte_mppara01.product_code,			
		:pte_mppara01.minmajpurchamt,		
		:pte_mppara01.maxmajpurchamt,		
		:pte_mppara01.mininstamt,			
		:pte_mppara01.maxinstamt,			
		:pte_mppara01.minmajpurchlmt,		
		:pte_mppara01.minpenaltyamt,			
		:pte_mppara01.maxpenaltyamt,			
		:pte_mppara01.penaltyper,			
		:pte_mppara01.penaltyday,			
		:pte_mppara01.minamtofaging,			
		:pte_mppara01.mntowrtof,			
		:pte_mppara01.BPIminamt,			
		:pte_mppara01.brokenperdinst,		
		:pte_mppara01.minfreepurchamt,		
		:pte_mppara01.errorunauthamt,		
		:pte_mppara01.fixedmpfee,			
		:pte_mppara01.mpfeepercnt,			
		:pte_mppara01.earlyrepayfeeper, 		
		:pte_mppara01.effective_date,		
		:pte_mppara01.maxtrnperday, 			
		:pte_mppara01.maxamtperday, 			
		:pte_mppara01.authoverlimit,			
		:pte_mppara01.authpara_response_code_1, 
		:pte_mppara01.authpara_message_1,		
		:pte_mppara01.authpara_response_code_2, 
		:pte_mppara01.authpara_message_2,
		:pte_mppara01.authpara_response_code_3, 	
		:pte_mppara01.authpara_message_3
      );
	if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : MPPARA ,Fun_Name : db_insert_mppara01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_mppara01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



/*************************************************************************************/


BYTE db_update_bin02 (pBIN02 bin02_ptr, pCHAR ErrorMsg)
{
   bin02_to_db (bin02_ptr) ;


	if ( db_error_statics_flag == true )
    {
      	start_time = ptetime_get_time();
    }
   EXEC SQL UPDATE bin02 
   SET  length				= :pte_bin02.length,
        lo					= :pte_bin02.lo,
        high				= :pte_bin02.high,
        pan_length			= :pte_bin02.pan_length,
        destination_name	= :pte_bin02.destination_name,
        description         = :pte_bin02.description
                
   WHERE length = :pte_bin02.length AND lo = :pte_bin02.lo;
   
   if ( db_error_statics_flag == true )
   {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BIN02 ,Fun_Name : db_update_bin02 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_bin02 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}



BYTE db_select_bin02 (pCHAR		Primary_key, 
                      pBIN02	bin02_ptr, 
                      pCHAR		ErrorMsg)
{
   memset  (&db_bin02, 0, sizeof db_bin02) ;
   memset  (&pte_bin02, 0, sizeof pte_bin02) ;
   strncpy (pte_bin02.length, Primary_key, sizeof pte_bin02.length) ;
   strncpy (pte_bin02.lo,     Primary_key + sizeof pte_bin02.length, sizeof pte_bin02.lo) ;

	if ( db_error_statics_flag == true )
    {
      	start_time = ptetime_get_time();
    }
   EXEC SQL SELECT	length, 
					lo, 
					high, 
					pan_length, 
					destination_name, 
					description
   INTO :db_bin02
   FROM bin02
   WHERE length = :pte_bin02.length AND lo = :pte_bin02.lo ;
   if ( db_error_statics_flag == true )
   {
  	 	end_time = ptetime_get_time();
 	 	duration = end_time - start_time;
 	 	if(duration >= db_error_statics_value)
 	 	{
  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : BIN02 ,Fun_Name : db_select_bin02 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
  		}
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_bin02 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   db_to_bin02 (bin02_ptr);

   return PTEMSG_OK;
}

/*****************************************************************************/
/*****************************************************************************/
BYTE db_cache_bon02( pCHAR  ErrorMsg )
{
   EXEC SQL ALTER TABLE BON02 CACHE;

   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_cache_bon02 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}

/****************************************** BIN02 ************************************************/ 

/*****************************************************************************/
/*****************************************************************************/

BYTE db_get_ucf01_list_by_User_Status( pUCF01 ucf01_ptr , pCHAR ErrorMsg )
{
	EXEC SQL BEGIN DECLARE SECTION;
    char status1[10]={0};
    char status2[5]="";
    BYTE rcode=0;
    int temp=0;
    int year=0;
    int month=0;
    int day=0;
    int Days_Inactive=0;
    int Updte_fail_cnt=0;
    int len = 0;
	char error_msg[100]={0};
	char toDayDate[20]={0};
	char ExpiryDate[20]={0};
	char prevLoginDate[20]={0};
	char Primary_key[10]={0};
	char date[25]={0};
	CHAR time_date[25]={0};
	CHAR current_mmdd[5]={0};
	CHAR Buffer[256]={0};
	long jday_toDayDate=0;
	long jday_ExpiryDate=0;
	long jday_prevLoginDate = 0;
	#define NUM_SIZE_WRITES 1
	FILE *User_fp;
	GPCF01 gpcf01;
    EXEC SQL END DECLARE SECTION;
	
	
	User_status_Control_Report_file_name;
	
	/* Get system timestamp "YYYY-MM-DD-hh.mm.ss.jjj" */
	ptetime_get_timestamp( time_date );
   /* Pick out the month and day to compare to filename extenstion. */
    memcpy( current_mmdd,   time_date+5, 2 );
    memcpy( current_mmdd+2, time_date+8, 2 );
    
    len = strlen(User_status_Control_Report_file_name);
	if(len == 0) 
	{
		Create_userstatuscontrol_tool_report();
	}
	else if(0 == strcmp(&User_status_Control_Report_file_name[len-4],current_mmdd))
	{
		Create_userstatuscontrol_tool_report();
	}
	if((User_fp = fopen(User_status_Control_Report_file_name,"a+b"))==NULL)
	{
		// Do nothing
	}
	else
	{
		sprintf(Buffer," Date & Time : %s, User name : %s ",time_date,ucf01_ptr->primary_key.name);
		strcat(Buffer,"\n");
		len=strlen(Buffer);
		fwrite(Buffer, len, NUM_SIZE_WRITES, User_fp);
		fclose(User_fp);
	}
	
	
	memset( ucf01_ptr, 0, sizeof(UCF01) );
   
    strncpy(status1, "ACTIVE",6);
	
    db_select_gpcf01(Primary_key,&gpcf01, ErrorMsg);
   
   Days_Inactive =atoi((char *)gpcf01.days_inactive);
   if ( db_error_statics_flag == true )
   {
      	start_time = ptetime_get_time();
   } 
   EXEC SQL DECLARE ucf01_ST2_DB_SELECT_UCF01_FOR_USR_STS_CNRL_cursor CURSOR FOR
   SELECT *
   FROM ucf01 
   WHERE  User_Status != 'DELETED' ;
 /* The above line commented to fix the issue EXPIRED? was copying in the DB
 *  Before this only ACTIVE users were selected by the cursor. Now all the users will be selected by the Cusrsor
 */
	if ( db_error_statics_flag == true )
    {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF01 ,Fun_Name : db_get_ucf01_list_by_User_Status , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }	
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN  ucf01_ST2_DB_SELECT_UCF01_FOR_USR_STS_CNRL_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   
   while(1)
   {
		memset(&db_ucf01, 0x00, sizeof(db_ucf01));
      
		printf(" fetching records from cursour\n");
		if ( db_error_statics_flag == true )
        {
      		start_time = ptetime_get_time();
        } 
		EXEC SQL FETCH ucf01_ST2_DB_SELECT_UCF01_FOR_USR_STS_CNRL_cursor
		INTO :db_ucf01;
		if ( db_error_statics_flag == true )
       {
      	 	end_time = ptetime_get_time();
     	 	duration = end_time - start_time;
     	 	if(duration >= db_error_statics_value)
	 	 	{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Trands, ST1:%d,ST2:%d ,Data_Type : UCF01 ,Fun_Name : db_get_ucf01_list_by_User_Status , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
       }
		sql_error2:
		if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
		{
			SQL_CODE = SQLCODE;
			EXEC SQL CLOSE UCF01_cursor;
			
			memset(er_buf,0x00,sizeof(er_buf));
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In  db_get_ucf01_list_by_User_Status ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return PTEMSG_UPDATE_FAILED;
		}
		
		db_to_ucf01(ucf01_ptr);
		
		ptetime_get_timestamp(date);
		
		strncpy(toDayDate,date,4);
		strncat(toDayDate,date+5,2);
		strncat(toDayDate,date+8,2);
		jday_toDayDate = Txutils_Calculate_Julian_Date(toDayDate);

		memcpy(ExpiryDate,ucf01_ptr->User_Expiry_Date,strlen(ucf01_ptr->User_Expiry_Date));
		jday_ExpiryDate=Txutils_Calculate_Julian_Date(ExpiryDate);
		
		memcpy(prevLoginDate,ucf01_ptr->Login_Date,strlen(ucf01_ptr->Login_Date));
		jday_prevLoginDate=Txutils_Calculate_Julian_Date(prevLoginDate);
		
		if((  jday_toDayDate - jday_prevLoginDate) > Days_Inactive )
		{
			memset(ucf01_ptr->User_Status,0x00,sizeof(ucf01_ptr->User_Status));
			memcpy(ucf01_ptr->User_Status,"INACTIVE ",9);
			ucf01_ptr->User_Status[9] = '\0' ;
			rcode = db_update_ucf01( ucf01_ptr, ErrorMsg );
		}
		else if(jday_toDayDate > jday_ExpiryDate)
		{
			memset(ucf01_ptr->User_Status,0x00,sizeof(ucf01_ptr->User_Status));
			memcpy(ucf01_ptr->User_Status,"EXPIRED ",8);
			ucf01_ptr->User_Status[8] = '\0' ;
			rcode = db_update_ucf01( ucf01_ptr, ErrorMsg );
		}
		
		
		if(rcode != PTEMSG_OK)
		{
			Updte_fail_cnt=1;
		}
   }
  
   EXEC SQL CLOSE ucf01_ST2_DB_SELECT_UCF01_FOR_USR_STS_CNRL_cursor;     
   

   sql_error:
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In  db_get_ucf01_list_by_User_Status,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return PTEMSG_UPDATE_FAILED;
   }
   if(Updte_fail_cnt==1)
   {
   		return PTEMSG_UPDATE_FAILED;
   }
   else
   {
   		return PTEMSG_OK;
   }
	   
}

/*****************************************************************************/
/*****************************************************************************/



