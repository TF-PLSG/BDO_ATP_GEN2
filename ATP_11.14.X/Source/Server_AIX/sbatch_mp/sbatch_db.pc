/******************************************************************************
  
   Module:           standin_database.pc
  
   Title:            Standin Batch to Host DB Routines
  
   Description:
   
   Application:      Equitable

   Authour:          Ravikumar Nageshaiah @ ThoughtFocus

   Revision History: 1.0
    
   $Log:   \sbatch_db.pc  $  
   
      Rev 1.0   
   Initial Equitable Revision

******************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#ifdef WIN32
#include <sqlproto.h>
#endif

#include <math.h>
#include <time.h>
#include <sys/timeb.h>

#include "basictyp.h"
#include "pte.h"
#include "pteipc.h"
#include "ptemsg.h"
#include "ptetimer.h"
#include "ntutils.h"
#include "app_info.h"
#include "dc_dbstruct.h"
#include "equitdb.h"
#include "dbcommon.h"
#include "txutils.h"
#include "ptetime.h"
#include "memmnger.h"
#include "sbatch.h"

/* For DB statics added by raghu */
extern BYTE DB_MsgSubtype2 ;
extern BYTE DB_MsgSubtype1 ;
char DB_Tmr_Lgng_Buf[512];
double start_time;
double end_time  ;
double duration  ; 
extern INT db_error_statics_flag;
extern double db_error_statics_value;
char er_buf[512];
BYTE DB_rcode;
extern CHAR  DB_Logging_Filename[256];
extern CHAR  DB_module_file_name[256];
extern CHAR  DB_file_path[256];
/* End   */

//HCTS3
BYTE db_get_bch01_mp_open_release_date(char *, char *);
void get_lookback_date(char *);
int daytoJulian( int, int, int);
int daysInMonth(int, int);
int leapYear(int);
BYTE JuliantoDay(int, int, char*);

/* Function prototypes */
extern long Txutils_Calculate_Julian_Date(BYTE * );
extern void Txutils_Calculate_Gregorian_Date(LONG , pCHAR );
extern void genutil_format_date(pCHAR temp);
extern CHAR	TxnDate[9];
/* Oracle error codes */
#define NULL_COLUMN_DATA -1405
#define NO_DATA_FOUND    1403

extern CHAR AppName[];
SQL01 Sql01;
INT    rtnval;

/* Dynamic sql IA */
typedef char dynsql[100]; 
EXEC SQL TYPE dynsql IS STRING(80) REFERENCE;

EXEC SQL INCLUDE sqlca;

typedef struct
{
   WORD len;
   BYTE pin_data[100];
}RAWPINDATA;

EXEC SQL BEGIN DECLARE SECTION;

   /* error code variable */
   long    SQLCODE;
   long    SQL_CODE;
   extern  AUTH_TX Auth_Tx_BCH10, Auth_Tx;
   extern  TLF01 Auth_Tx_TLFstip ;
   extern  BCH10 bch10;
   extern  BCH11 bch11;
/**/
EXEC SQL TYPE RAWPINDATA is VARRAW(5000);


struct
{
    char transaction_id                     [21]; 

    char entry_type                         ;
    char tpdu_id                            [16];
    char issuer_id                          [21];
    char acquirer_id                        [21];
    char tx_key                             ;
    char terminal_id                        [9];
    char terminal_type                      [3];
    char response_text                      [41];
    char card_num_len                       [3];
    char card_num                           [20];
    char exp_date                           [5];
    char total_amount                       [13];
    char add_amounts                        [25];
    char invoice_number                     [9];
    char orig_amount                        [13];
    char auth_number                        [7];
    char processing_code                    [7];
    char sys_trace_audit_num                [7];
    char orig_sys_trace_num                 [7];
    char pos_entry_mode                     [5];
    char nii                                [5];
    char pos_condition_code                 [3];
    char track1                             [77];
    char track2                             [38];
    char retrieval_ref_num                  [13];
    char orig_retrieval_ref_num             [13];
    char merchant_id                        [16];
    char orig_message                       [5];
    char settlement_total                   [17];
    char message_type                       [5];
    char card_holder_name                   [31];
    char general_status                     ;
    char originator_queue                   [17];
    char originator_info                    [33];
    char batch_number                       [7];
    char response_code                      [3];
    char date_yyyymmdd                      [9];
    char time_hhmmss                        [7];
    char num_sales                          [4];
    char sales_amount                       [13];
    char num_refunds                        [4];
    char refund_amount                      [13];
    char num_dbsales                        [4];
    char dbsales_amount                     [13];
    char num_dbrefunds                      [4];
    char dbrefund_amount                    [13];
    char pin_block                          [19];
    char tax_amount                         [13];
    char tip_amount                         [13];
    char tran_start_time                    [17];
    char host_start_time                    [17];
    char host_finish_time                   [17];
    char tran_finish_time                   [17];
    char settle_file_prefix                 [7];
    char resp_source_len                    [3];
    char visa_char_indicator                ;
    char visa_tran_id                       [16];
    char visa_validation_code               [5];
    char mcard_banknet_len                  [4];
    char mcard_banknet                      [51];
    char agent_id_len                       [4];
    char agent_id                           [12];
    char cvc                                ;
    char settlement_date                    [5];

    char category_code                      [5];
    char conversion_rate                    [10];
    char product_code                       [9];
    char odometer                           [8];
    char organization_id                    [5];
    char dynamic_keychange                  ;

   char source_key                          [49];
   char txn_cnt                            [4];
   char dcf01_retired_cwk                  [49];
   char dest_key                           [49];
   char ncf01_retired_cwk                  [49];
   char handler_queue        		       [8];
   char authorizing_host_queue		   	   [8];
   char max_net_consec_tmouts              [4];
   char max_active_txns                    [4];
   char forwarding_institution_id          [12];
   char remote_nsp_type                    [2];
   char kek                                [17]; 
   char acquiring_id                       [12];
   char outstanding_balance                [13]; 
   char credit_limit                       [13];
   char nfi_name                           [11];
   char nfi_seq_nbr                        [7];
   char nfi_start_date                     [9];
   char nfi_end_date                       [9];
   char resp_source                        [26];

   char origin                             [3];
   char auth_1                             [3];
   char auth_2                             [3];
   char update_mask                        [2];
   char type_of_data                       [3];
   char down_payment                       [13];
   char period                             [3];
   char interest_rate                      [5];
   char total_interest                     [13];
   char redemption_amount                  [13];
   char vehicle_number                     [9];

   char profile                                    [3];
   char nbr_of_prod_codes                          [3];
   
   char product1_code                              [7];
   char product1_quantity                          [3];
   char product1_amount                            [13];
   char product2_code                              [7];
   char product2_quantity                          [3];
   char product2_amount                            [13];
   char product3_code                              [7];
   char product3_quantity                          [3];
   char product3_amount                            [13];
   char product4_code                              [7];
   char product4_quantity                          [3];
   char product4_amount                            [13];
   char product5_code                              [7];
   char product5_quantity                          [3];
   char product5_amount                            [13];
   char product6_code                              [7];
   char product6_quantity                          [3];
   char product6_amount                            [13];
   char product7_code                              [7];
   char product7_quantity                          [3];
   char product7_amount                            [13];
   char product8_code                              [7];
   char product8_quantity                          [3];
   char product8_amount                            [13];
   char product9_code                              [7];
   char product9_quantity                          [3];
   char product9_amount                            [13];
   char product10_code                              [7];
   char product10_quantity                          [3];
   char product10_amount                            [13];
   char product11_code                              [7];
   char product11_quantity                          [3];
   char product11_amount                            [13];
   char product12_code                              [7];
   char product12_quantity                          [3];
   char product12_amount                            [13];
   char product13_code                              [7];
   char product13_quantity                          [3];
   char product13_amount                            [13];
   char product14_code                              [7];
   char product14_quantity                          [3];
   char product14_amount                            [13];
   char product15_code                              [7];
   char product15_quantity                          [3];
   char product15_amount                            [13];
   char product16_code                              [7];
   char product16_quantity                          [3];
   char product16_amount                            [13];
   char product17_code                              [7];
   char product17_quantity                          [3];
   char product17_amount                            [13];
   char product18_code                              [7];
   char product18_quantity                          [3];
   char product18_amount                            [13];
   char product19_code                              [7];
   char product19_quantity                          [3];
   char product19_amount                            [13];
   char product20_code                              [7];
   char product20_quantity                          [3];
   char product20_amount                            [13];
   char visa_merchant_id                            [16];
   char cash_bonus                                  [2];  /* added 01-29-99 by IG */
   char deferred_factor                             [8];  /* added 01-29-99 by IG */
   char deferred_term_length                        [4];  /* added 01-29-99 by IG */
   char currency_code                               [4];  /* added 01-29-99 by IG */
   char transmission_timestamp                      [11]; /* added 01-29-99 by IG */
   char tran_fee_amount                             [9];  /* added 01-29-99 by IG */
   char cvc_data                                    [4];  /* added 01-29-99 by IG */

   char verify_mag_stripe                           [2];  /* added 02-09-99 by IG */
   char saf                                         [2];  /* added 02-09-99 by IG */
   char security_response_code                      [3];  /* added 02-09-99 by IG */
   char service_code                                [4];  /* added 02-09-99 by IG */
   char source_pin_format                           [3];  /* added 02-09-99 by IG */
   char dest_pin_format                             [3];  /* added 02-09-99 by IG */
   char voice_auth                                  [2];  /* added 02-09-99 by IG */
   char actual_amount                               [13]; /* AP IG, Equitable 02-10-99 */
   char reversal_amount                             [13]; /* AP IG, Equitable 02-10-99 */
   char voice_auth_text                             [241]; /* IG 02-22-99 */ 
   char operator_id                                 [21];  /* IA 03-09-99 */
   char workstation                                 [21];  /* IA 03-16-99 */
   char orig_auth_number                            [7];   /* IA 04-08-99 */
   char ticket_nbr									[16];
   char system_date                                 [9];
   char def_gross_amt                               [13];
   char monthly_amort_amt                           [13];
}pte_tlf01_stip;

struct
{
    varchar transaction_id                     [21]; 

    varchar entry_type                         [1];
    varchar tpdu_id                            [16];
    varchar issuer_id                          [21];
    varchar acquirer_id                        [21];
    varchar tx_key                             [1];
    varchar terminal_id                        [9];
    varchar terminal_type                      [3];
    varchar response_text                      [41];
    varchar card_num_len                       [3];
    varchar card_num                           [20];
    varchar exp_date                           [5];
    varchar total_amount                       [13];
    varchar add_amounts                        [25];
    varchar invoice_number                     [9];
    varchar orig_amount                        [13];
    varchar auth_number                        [7];
    varchar processing_code                    [7];
    varchar sys_trace_audit_num                [7];
    varchar orig_sys_trace_num                 [7];
    varchar pos_entry_mode                     [5];
    varchar nii                                [5];
    varchar pos_condition_code                 [3];
    varchar track1                             [77];
    varchar track2                             [38];
    varchar retrieval_ref_num                  [13];
    varchar orig_retrieval_ref_num             [13];
    varchar merchant_id                        [16];
    varchar orig_message                       [5];
    varchar settlement_total                   [17];
    varchar message_type                       [5];
    varchar card_holder_name                   [31];
    varchar general_status                     [1];
    varchar originator_queue                   [17];
    varchar originator_info                    [33];
    varchar batch_number                       [7];
    varchar response_code                      [3];
    varchar date_yyyymmdd                      [9];
    varchar time_hhmmss                        [7];
    varchar num_sales                          [4];
    varchar sales_amount                       [13];
    varchar num_refunds                        [4];
    varchar refund_amount                      [13];
    varchar num_dbsales                        [4];
    varchar dbsales_amount                     [13];
    varchar num_dbrefunds                      [4];
    varchar dbrefund_amount                    [13];
    varchar pin_block                          [19];
    varchar tax_amount                         [13];
    varchar tip_amount                         [13];
    varchar tran_start_time                    [17];
    varchar host_start_time                    [17];
    varchar host_finish_time                   [17];
    varchar tran_finish_time                   [17];
    varchar settle_file_prefix                 [7];
    varchar resp_source_len                    [3];
    varchar visa_char_indicator                [1];
    varchar visa_tran_id                       [16];
    varchar visa_validation_code               [5];
    varchar mcard_banknet_len                  [4];
    varchar mcard_banknet                      [51];
    varchar agent_id_len                       [4];
    varchar agent_id                           [12];
    varchar cvc                                [1];
    varchar settlement_date                    [5];

    varchar category_code                      [5];
    varchar conversion_rate                    [10];
    varchar product_code                       [9];
    varchar odometer                           [8];
    varchar organization_id                    [5];
    varchar dynamic_keychange                  [1];

   varchar source_key                         [49];
   varchar txn_cnt                            [4];
   varchar dcf01_retired_cwk                  [49];
   varchar dest_key                           [49];
   varchar ncf01_retired_cwk                  [49];
   varchar handler_queue        		      [8];
   varchar authorizing_host_queue		   	  [8];
   varchar max_net_consec_tmouts              [4];
   varchar max_active_txns                    [4];
   varchar forwarding_institution_id          [12];
   varchar remote_nsp_type                    [2];
   varchar kek                                [17];
   varchar acquiring_id                       [12];
   varchar outstanding_balance                [13];
   varchar credit_limit                       [13];
   varchar nfi_name                           [11];
   varchar nfi_seq_nbr                        [7];
   varchar nfi_start_date                     [9];
   varchar nfi_end_date                       [9];
   varchar resp_source                        [26];
   varchar origin                             [3];
   varchar auth_1                             [3];
   varchar auth_2                             [3];
   varchar update_mask                        [2];
   varchar type_of_data                       [3];
   varchar down_payment                       [13];
   varchar period                             [3];
   varchar interest_rate                      [5];
   varchar total_interest                     [13];
   varchar redemption_amount                  [13];
   varchar vehicle_number                     [9];

   varchar profile                                    [3];
   varchar nbr_of_prod_codes                          [3];
   
   varchar product1_code                              [7];
   varchar product1_quantity                          [3];
   varchar product1_amount                            [13];
   varchar product2_code                              [7];
   varchar product2_quantity                          [3];
   varchar product2_amount                            [13];
   varchar product3_code                              [7];
   varchar product3_quantity                          [3];
   varchar product3_amount                            [13];
   varchar product4_code                              [7];
   varchar product4_quantity                          [3];
   varchar product4_amount                            [13];
   varchar product5_code                              [7];
   varchar product5_quantity                          [3];
   varchar product5_amount                            [13];
   varchar product6_code                              [7];
   varchar product6_quantity                          [3];
   varchar product6_amount                            [13];
   varchar product7_code                              [7];
   varchar product7_quantity                          [3];
   varchar product7_amount                            [13];
   varchar product8_code                              [7];
   varchar product8_quantity                          [3];
   varchar product8_amount                            [13];
   varchar product9_code                              [7];
   varchar product9_quantity                          [3];
   varchar product9_amount                            [13];
   varchar product10_code                              [7];
   varchar product10_quantity                          [3];
   varchar product10_amount                            [13];
   varchar product11_code                              [7];
   varchar product11_quantity                          [3];
   varchar product11_amount                            [13];
   varchar product12_code                              [7];
   varchar product12_quantity                          [3];
   varchar product12_amount                            [13];
   varchar product13_code                              [7];
   varchar product13_quantity                          [3];
   varchar product13_amount                            [13];
   varchar product14_code                              [7];
   varchar product14_quantity                          [3];
   varchar product14_amount                            [13];
   varchar product15_code                              [7];
   varchar product15_quantity                          [3];
   varchar product15_amount                            [13];
   varchar product16_code                              [7];
   varchar product16_quantity                          [3];
   varchar product16_amount                            [13];
   varchar product17_code                              [7];
   varchar product17_quantity                          [3];
   varchar product17_amount                            [13];
   varchar product18_code                              [7];
   varchar product18_quantity                          [3];
   varchar product18_amount                            [13];
   varchar product19_code                              [7];
   varchar product19_quantity                          [3];
   varchar product19_amount                            [13];
   varchar product20_code                              [7];
   varchar product20_quantity                          [3];
   varchar product20_amount                            [13];
   varchar visa_merchant_id                            [16];
   varchar cash_bonus                                  [2];  /* added 01-29-99 by IG */
   varchar deferred_factor                             [8];  /* added 01-29-99 by IG */
   varchar deferred_term_length                        [4];  /* added 01-29-99 by IG */
   varchar currency_code                               [4];  /* added 01-29-99 by IG */
   varchar transmission_timestamp                      [11]; /* added 01-29-99 by IG */
   varchar tran_fee_amount                             [9];  /* added 01-29-99 by IG */
   varchar cvc_data                                    [4];  /* added 01-29-99 by IG */
   varchar verify_mag_stripe                           [2];  /* added 02-09-99 by IG */
   varchar saf                                         [2];  /* added 02-09-99 by IG */
   varchar security_response_code                      [3];  /* added 02-09-99 by IG */
   varchar service_code                                [4];  /* added 02-09-99 by IG */
   varchar source_pin_format                           [3];  /* added 02-09-99 by IG */
   varchar dest_pin_format                             [3];  /* added 02-09-99 by IG */
   varchar voice_auth                                  [2];  /* added 02-09-99 by IG */
   varchar actual_amount                               [13]; /* AP IG, Equitable 02-10-99 */
   varchar reversal_amount                             [13]; /* AP IG, Equitable 02-10-99 */
   varchar voice_auth_text                             [241]; /* IG 02-22-99 */
   varchar operator_id                                 [21];  /* IA 03-09-99 */
   varchar workstation                                 [21];  /* IA 03-16-99 */
   varchar orig_auth_number                            [7];   /* IA 04-08-99 */
   varchar ticket_nbr									[16];
   varchar system_date                                 [9];
   varchar def_gross_amt                               [13];
   varchar monthly_amort_amt                           [13];
}db_tlf01_stip, db_tlf01_stip_structure,db_Auth_Tx_TLFstip;



struct
 {
   char network_id                                 [11];
   char network_type                               [2];

   char  name                                      [30];
   char  status                                    [2];
   char  totals_ind                                [2];
   char  statistics_ind                            [2];
   char  acquirer_inst_id_code                     [12];
   char  forwarding_inst_id_code                   [12];
   char  receiving_inst_id_code                    [12];
   char  remote_nsp_type                           [2];
   char  pin_type                                  [2];
   char  encr_type                                 [2];
   char  pad_char                                  [2];
   char  cwk                                       [49];
   char  kek                                       [17];
   char  retired_cwk                               [49];
   char  auto_logon                                [2];
   char  echo_interval                             [4];
   char  max_consecutive_timeouts                  [4];
   char  max_active_txns                           [4];
   char  que_name                                  [12];
   char  local_nsp_type                            [8];
   char  request_timer                             [4];
   char  idle_line_timer                           [4];
   char  advice_repeat_counter                     [3];
   char  admin_message_timer                       [4];
   char  store_forward_processing                  [2];
   char  currency_code_purchase                    [4];
   char  currency_code_cash                        [4];
   char  country_code                              [4];
   char  station_id1                               [7];
   char  station_id2                               [7];
   char  prev_src_station                          [7];
   char  tpdu_id                                   [16];
   
   char  identifier1                               [7];
   char  identifier2                               [7];
   char  identifier3                               [7];
   char  identifier4                               [7];
   char  identifier5                               [7];
   char  identifier6                               [7];
   char  identifier7                               [7];
   char  identifier8                               [7];
   char  identifier9                               [7];
   char  identifier10                              [7];
   
   char  processing_code1                          [7];
   char  processing_code2                          [7];
   char  processing_code3                          [7];
   char  processing_code4                          [7];
   char  processing_code5                          [7];
   char  processing_code6                          [7];
   char  processing_code7                          [7];
   char  processing_code8                          [7];
   char  processing_code9                          [7];
   char  processing_code10                         [7];
   char  processing_code11                         [7];
   char  processing_code12                         [7];
   char  processing_code13                         [7];
   char  processing_code14                         [7];
   char  processing_code15                         [7];
   char  processing_code16                         [7];
   char  processing_code17                         [7];
   char  processing_code18                         [7];
   char  processing_code19                         [7];
   char  processing_code20                         [7];
   char  zmk                                       [49];
   char  neg_access_code                           [7];
      
} pte_ncf01;

struct
 {
   varchar network_id                              [11];
   varchar network_type                            [2];

   varchar  name                                   [30];
   varchar  status                                 [2];
   varchar  totals_ind                             [2];
   varchar  statistics_ind                         [2];
   varchar  acquirer_inst_id_code                  [12];
   varchar  forwarding_inst_id_code                [12];
   varchar  receiving_inst_id_code                 [12];
   varchar  remote_nsp_type                        [2];
   varchar  pin_type                               [2];
   varchar  encr_type                              [2];
   varchar  pad_char                               [2];
   varchar  cwk                                    [49];
   varchar  kek                                    [17];
   varchar  retired_cwk                            [49];
   varchar  auto_logon                             [2];
   varchar  echo_interval                          [4];
   varchar  max_consecutive_timeouts               [4];
   varchar  max_active_txns                        [4];
   varchar  que_name                               [12];
   varchar  local_nsp_type                         [8];
   varchar  request_timer                          [4];
   varchar  idle_line_timer                        [4];
   varchar  advice_repeat_counter                  [3];
   varchar  admin_message_timer                    [4];
   varchar  store_forward_processing               [2];
   varchar  currency_code_purchase                 [4];
   varchar  currency_code_cash                     [4];
   varchar  country_code                           [4];
   varchar  station_id1                            [7];
   varchar  station_id2                            [7];
   varchar  prev_src_station                       [7];
   varchar  tpdu_id                                [16];
   
   varchar  identifier1                            [7];
   varchar  identifier2                            [7];
   varchar  identifier3                            [7];
   varchar  identifier4                            [7];
   varchar  identifier5                            [7];
   varchar  identifier6                            [7];
   varchar  identifier7                            [7];
   varchar  identifier8                            [7];
   varchar  identifier9                            [7];
   varchar  identifier10                           [7];
   
   varchar  processing_code1                       [7];
   varchar  processing_code2                       [7];
   varchar  processing_code3                       [7];
   varchar  processing_code4                       [7];
   varchar  processing_code5                       [7];
   varchar  processing_code6                       [7];
   varchar  processing_code7                       [7];
   varchar  processing_code8                       [7];
   varchar  processing_code9                       [7];
   varchar  processing_code10                      [7];
   varchar  processing_code11                      [7];
   varchar  processing_code12                      [7];
   varchar  processing_code13                      [7];
   varchar  processing_code14                      [7];
   varchar  processing_code15                      [7];
   varchar  processing_code16                      [7];
   varchar  processing_code17                      [7];
   varchar  processing_code18                      [7];
   varchar  processing_code19                      [7];
   varchar  processing_code20                      [7];
   varchar  zmk                                    [49];
   varchar  neg_access_code                        [7];

} db_ncf01;

/* EMV Raw Data for Reversals/Voids */
typedef struct
{
   unsigned short len;
   unsigned char  emv_data[300];

}RAWEMVDATA;

EXEC SQL TYPE RAWEMVDATA is VARRAW(5000);

struct
{
      char       tran_id[21];   
      char       sys_date[9];
      char       len[4];
      RAWEMVDATA emvblock;
}
db_emv_raw;

struct
{
   char  device_id                                 [9];
   char  batch_nbr                                 [7];
 
   char  merchant_id                               [16];
   char  total_credit_cnt                          [5];
   char  total_credit_amt                          [13];
   char  total_credit_refund_cnt                   [5];
   char  total_credit_refund_amt                   [13];
   char  total_debit_cnt                           [5];
   char  total_debit_amt                           [13];
   char  total_debit_refund_cnt                    [5];
   char  total_debit_refund_amt                    [13];
   char  total_void_credit_cnt                     [5];
   char  total_void_credit_amt                     [13];
   char  total_void_credit_refund_cnt              [5];
   char  total_void_credit_refund_amt              [13];
   char  open_date                                 [9];
   char  open_time                                 [7];
   char  release_date                              [9];
   char  release_time                              [7];
   char  batch_status                              [2];      /*R-released;C-closed;A-active*/
   char  visa_merchant_id                          [16];

}pte_bch01_mp;

struct
{
   varchar  device_id                                 [9];
   varchar  batch_nbr                                 [7];

   varchar  merchant_id                               [16];
   varchar  total_credit_cnt                          [5];
   varchar  total_credit_amt                          [13];
   varchar  total_credit_refund_cnt                   [5];
   varchar  total_credit_refund_amt                   [13];
   varchar  total_debit_cnt                           [5];
   varchar  total_debit_amt                           [13];
   varchar  total_debit_refund_cnt                    [5];
   varchar  total_debit_refund_amt                    [13];
   varchar  total_void_credit_cnt                     [5];
   varchar  total_void_credit_amt                     [13];
   varchar  total_void_credit_refund_cnt              [5];
   varchar  total_void_credit_refund_amt              [13];
   varchar  open_date                                 [9];
   varchar  open_time                                 [7];
   varchar  release_date                              [9];
   varchar  release_time                              [7];
   varchar  batch_status                              [2];      /*R-released;C-closed;A-active*/
   varchar  visa_merchant_id                          [16];

}db_bch01_mp;


struct
{
   varchar  device_id                              [9];
   varchar  batch_nbr                              [7];
   varchar  retrieval_ref_num                      [13];
   varchar  merchant_id                            [16];
   varchar  processing_code                        [7];
   varchar  tran_amount                            [13];
   varchar  response_code                          [3];
   varchar  auth_number                            [7];
   varchar  tran_date                              [9];
   varchar  tran_time                              [7];
   varchar  transaction_id                         [21];
   varchar  message_type                           [5];
   varchar  card_nbr                               [20];
   varchar  invoice_nbr                            [9];
   varchar  settle_file_prefix                     [7];
   varchar  product_code                           [9];
   varchar  odometer                               [7];
   varchar  sys_trace_audit_num                    [7];
   varchar  tx_key                                 [1];
   varchar  bin_type                               [1];
   varchar  type_of_data                           [3];
   varchar  down_payment                           [13];
   varchar  period                                 [3];
   varchar  interest_rate                          [5];
   varchar  total_interest                         [13];
   varchar  redemption_amount                      [13];
   varchar  vehicle_number                         [9];
   varchar  pos_entry_mode                         [5];
   varchar  profile                                [3];
   varchar  nbr_of_prod_codes                      [3];
   varchar  product1_code                          [7];
   varchar  product1_quantity                      [3];
   varchar  product1_amount                        [13];
   varchar  product2_code                          [7];
   varchar  product2_quantity                      [3];
   varchar  product2_amount                        [13];
   varchar  product3_code                          [7];
   varchar  product3_quantity                      [3];
   varchar  product3_amount                        [13];
   varchar  product4_code                          [7];
   varchar  product4_quantity                      [3];
   varchar  product4_amount                        [13];
   varchar  product5_code                          [7];
   varchar  product5_quantity                      [3];
   varchar  product5_amount                        [13];
   varchar  product6_code                          [7];
   varchar  product6_quantity                      [3];
   varchar  product6_amount                        [13];
   varchar  product7_code                          [7];
   varchar  product7_quantity                      [3];
   varchar  product7_amount                        [13];
   varchar  product8_code                          [7];
   varchar  product8_quantity                      [3];
   varchar  product8_amount                        [13];
   varchar  product9_code                          [7];
   varchar  product9_quantity                      [3];
   varchar  product9_amount                        [13];
   varchar  product10_code                         [7];
   varchar  product10_quantity                     [3];
   varchar  product10_amount                       [13];
   varchar  product11_code                         [7];
   varchar  product11_quantity                     [3];
   varchar  product11_amount                       [13];
   varchar  product12_code                         [7];
   varchar  product12_quantity                     [3];
   varchar  product12_amount                       [13];
   varchar  product13_code                         [7];
   varchar  product13_quantity                     [3];
   varchar  product13_amount                       [13];
   varchar  product14_code                         [7];
   varchar  product14_quantity                     [3];
   varchar  product14_amount                       [13];
   varchar  product15_code                         [7];
   varchar  product15_quantity                     [3];
   varchar  product15_amount                       [13];
   varchar  product16_code                         [7];
   varchar  product16_quantity                     [3];
   varchar  product16_amount                       [13];
   varchar  product17_code                         [7];
   varchar  product17_quantity                     [3];
   varchar  product17_amount                       [13];
   varchar  product18_code                         [7];
   varchar  product18_quantity                     [3];
   varchar  product18_amount                       [13];
   varchar  product19_code                         [7];
   varchar  product19_quantity                     [3];
   varchar  product19_amount                       [13];
   varchar  product20_code                         [7];
   varchar  product20_quantity                     [3];
   varchar  product20_amount                       [13];
   varchar  aportionment_flag                      [2];
   varchar  exp_date                               [5];
   varchar  open_date                              [9];
   varchar  open_time                              [7];
   varchar  cash_bonus                             [2];
   varchar  transmission_timestamp                 [11];
   varchar  mcard_banknet                          [51];
   varchar  ticket_nbr                             [16];
   varchar  def_gross_amt                          [13];
   varchar  term                                   [4];

}db_bch10;

struct
{
   char  device_id                                 [9];
   char  batch_nbr                                 [7];
   char  retrieval_ref_num                         [13];

   char  merchant_id                               [16];
   char  processing_code                           [7];
   char  tran_amount                               [13];
   char  response_code                             [3];
   char  auth_number                               [7];
   char  tran_date                                 [9];
   char  tran_time                                 [7];
   char  transaction_id                            [21];
   char  message_type                              [5];
   char  card_nbr                                  [20];
   char  invoice_nbr                               [9];
   char  settle_file_prefix                        [7];
   char  product_code                              [9];
   char  odometer                                  [8];
   char  sys_trace_audit_num                       [7];
   char  tx_key                                    ;
   char  bin_type                                  ;
   char type_of_data                               [3];
   char down_payment                               [13];
   char period                                     [3];
   char interest_rate                              [5];
   char total_interest                             [13];
   char redemption_amount                          [13];
   char vehicle_number                             [9];
   char pos_entry_mode                             [5];
   char profile                                    [3];
   char nbr_of_prod_codes                          [3];
   
   char product1_code                              [7];
   char product1_quantity                          [3];
   char product1_amount                            [13];
   char product2_code                              [7];
   char product2_quantity                          [3];
   char product2_amount                            [13];
   char product3_code                              [7];
   char product3_quantity                          [3];
   char product3_amount                            [13];
   char product4_code                              [7];
   char product4_quantity                          [3];
   char product4_amount                            [13];
   char product5_code                              [7];
   char product5_quantity                          [3];
   char product5_amount                            [13];
   char product6_code                              [7];
   char product6_quantity                          [3];
   char product6_amount                            [13];
   char product7_code                              [7];
   char product7_quantity                          [3];
   char product7_amount                            [13];
   char product8_code                              [7];
   char product8_quantity                          [3];
   char product8_amount                            [13];
   char product9_code                              [7];
   char product9_quantity                          [3];
   char product9_amount                            [13];
   char product10_code                              [7];
   char product10_quantity                          [3];
   char product10_amount                            [13];
   char product11_code                              [7];
   char product11_quantity                          [3];
   char product11_amount                            [13];
   char product12_code                              [7];
   char product12_quantity                          [3];
   char product12_amount                            [13];
   char product13_code                              [7];
   char product13_quantity                          [3];
   char product13_amount                            [13];
   char product14_code                              [7];
   char product14_quantity                          [3];
   char product14_amount                            [13];
   char product15_code                              [7];
   char product15_quantity                          [3];
   char product15_amount                            [13];
   char product16_code                              [7];
   char product16_quantity                          [3];
   char product16_amount                            [13];
   char product17_code                              [7];
   char product17_quantity                          [3];
   char product17_amount                            [13];
   char product18_code                              [7];
   char product18_quantity                          [3];
   char product18_amount                            [13];
   char product19_code                              [7];
   char product19_quantity                          [3];
   char product19_amount                            [13];
   char product20_code                              [7];
   char product20_quantity                          [3];
   char product20_amount                            [13];
   char aportionment_flag                           [2];
   char exp_date                                    [5];
   char open_date                                   [9];
   char open_time                                   [7];
   char cash_bonus                                  [2];
   char transmission_timestamp                      [11];
   char mcard_banknet                               [51];
   char ticket_nbr                                  [16];
   char def_gross_amt                               [13];
   char term                                        [4];

}pte_bch10;


struct
{
   varchar  device_id                              [9];
   varchar  batch_nbr                              [7];
   varchar  retrieval_ref_num                      [13];
   varchar  merchant_id                            [16];
   varchar  processing_code                        [7];
   varchar  tran_amount                            [13];
   varchar  response_code                          [3];
   varchar  auth_number                            [7];
   varchar  tran_date                              [9];
   varchar  tran_time                              [7];
   varchar  transaction_id                         [21];
   varchar  message_type                           [5];
   varchar  card_nbr                               [20];
   varchar  invoice_nbr                            [9];
   varchar  settle_file_prefix                     [7];
   varchar  product_code                           [9];
   varchar  odometer                               [7];
   varchar  sys_trace_audit_num                    [7];
   varchar  tx_key                                 [1];
   varchar  bin_type                               [1];
   varchar  type_of_data                           [3];
   varchar  down_payment                           [13];
   varchar  period                                 [3];
   varchar  interest_rate                          [5];
   varchar  total_interest                         [13];
   varchar  redemption_amount                      [13];
   varchar  vehicle_number                         [9];
   varchar  pos_entry_mode                         [5];
   varchar  profile                                [3];
   varchar  nbr_of_prod_codes                      [3];
   varchar  product1_code                          [7];
   varchar  product1_quantity                      [3];
   varchar  product1_amount                        [13];
   varchar  product2_code                          [7];
   varchar  product2_quantity                      [3];
   varchar  product2_amount                        [13];
   varchar  product3_code                          [7];
   varchar  product3_quantity                      [3];
   varchar  product3_amount                        [13];
   varchar  product4_code                          [7];
   varchar  product4_quantity                      [3];
   varchar  product4_amount                        [13];
   varchar  product5_code                          [7];
   varchar  product5_quantity                      [3];
   varchar  product5_amount                        [13];
   varchar  product6_code                          [7];
   varchar  product6_quantity                      [3];
   varchar  product6_amount                        [13];
   varchar  product7_code                          [7];
   varchar  product7_quantity                      [3];
   varchar  product7_amount                        [13];
   varchar  product8_code                          [7];
   varchar  product8_quantity                      [3];
   varchar  product8_amount                        [13];
   varchar  product9_code                          [7];
   varchar  product9_quantity                      [3];
   varchar  product9_amount                        [13];
   varchar  product10_code                         [7];
   varchar  product10_quantity                     [3];
   varchar  product10_amount                       [13];
   varchar  product11_code                         [7];
   varchar  product11_quantity                     [3];
   varchar  product11_amount                       [13];
   varchar  product12_code                         [7];
   varchar  product12_quantity                     [3];
   varchar  product12_amount                       [13];
   varchar  product13_code                         [7];
   varchar  product13_quantity                     [3];
   varchar  product13_amount                       [13];
   varchar  product14_code                         [7];
   varchar  product14_quantity                     [3];
   varchar  product14_amount                       [13];
   varchar  product15_code                         [7];
   varchar  product15_quantity                     [3];
   varchar  product15_amount                       [13];
   varchar  product16_code                         [7];
   varchar  product16_quantity                     [3];
   varchar  product16_amount                       [13];
   varchar  product17_code                         [7];
   varchar  product17_quantity                     [3];
   varchar  product17_amount                       [13];
   varchar  product18_code                         [7];
   varchar  product18_quantity                     [3];
   varchar  product18_amount                       [13];
   varchar  product19_code                         [7];
   varchar  product19_quantity                     [3];
   varchar  product19_amount                       [13];
   varchar  product20_code                         [7];
   varchar  product20_quantity                     [3];
   varchar  product20_amount                       [13];
   varchar  aportionment_flag                      [2];
   varchar  exp_date                               [5];
   varchar  open_date                              [9];
   varchar  open_time                              [7];
   varchar  cash_bonus                             [2];
   varchar  transmission_timestamp                 [11];
   varchar  mcard_banknet                          [51];
   varchar  ticket_nbr                             [16];
   varchar  def_gross_amt                          [13];
   varchar  term                                   [4];

}db_bch11;

struct
{
   char  device_id                                 [9];
   char  batch_nbr                                 [7];
   char  retrieval_ref_num                         [13];

   char  merchant_id                               [16];
   char  processing_code                           [7];
   char  tran_amount                               [13];
   char  response_code                             [3];
   char  auth_number                               [7];
   char  tran_date                                 [9];
   char  tran_time                                 [7];
   char  transaction_id                            [21];
   char  message_type                              [5];
   char  card_nbr                                  [20];
   char  invoice_nbr                               [9];
   char  settle_file_prefix                        [7];
   char  product_code                              [9];
   char  odometer                                  [8];
   char  sys_trace_audit_num                       [7];
   char  tx_key                                    ;
   char  bin_type                                  ;
   char type_of_data                               [3];
   char down_payment                               [13];
   char period                                     [3];
   char interest_rate                              [5];
   char total_interest                             [13];
   char redemption_amount                          [13];
   char vehicle_number                             [9];
   char pos_entry_mode                             [5];
   char profile                                    [3];
   char nbr_of_prod_codes                          [3];
   
   char product1_code                              [7];
   char product1_quantity                          [3];
   char product1_amount                            [13];
   char product2_code                              [7];
   char product2_quantity                          [3];
   char product2_amount                            [13];
   char product3_code                              [7];
   char product3_quantity                          [3];
   char product3_amount                            [13];
   char product4_code                              [7];
   char product4_quantity                          [3];
   char product4_amount                            [13];
   char product5_code                              [7];
   char product5_quantity                          [3];
   char product5_amount                            [13];
   char product6_code                              [7];
   char product6_quantity                          [3];
   char product6_amount                            [13];
   char product7_code                              [7];
   char product7_quantity                          [3];
   char product7_amount                            [13];
   char product8_code                              [7];
   char product8_quantity                          [3];
   char product8_amount                            [13];
   char product9_code                              [7];
   char product9_quantity                          [3];
   char product9_amount                            [13];
   char product10_code                              [7];
   char product10_quantity                          [3];
   char product10_amount                            [13];
   char product11_code                              [7];
   char product11_quantity                          [3];
   char product11_amount                            [13];
   char product12_code                              [7];
   char product12_quantity                          [3];
   char product12_amount                            [13];
   char product13_code                              [7];
   char product13_quantity                          [3];
   char product13_amount                            [13];
   char product14_code                              [7];
   char product14_quantity                          [3];
   char product14_amount                            [13];
   char product15_code                              [7];
   char product15_quantity                          [3];
   char product15_amount                            [13];
   char product16_code                              [7];
   char product16_quantity                          [3];
   char product16_amount                            [13];
   char product17_code                              [7];
   char product17_quantity                          [3];
   char product17_amount                            [13];
   char product18_code                              [7];
   char product18_quantity                          [3];
   char product18_amount                            [13];
   char product19_code                              [7];
   char product19_quantity                          [3];
   char product19_amount                            [13];
   char product20_code                              [7];
   char product20_quantity                          [3];
   char product20_amount                            [13];
   char aportionment_flag                           [2];
   char exp_date                                    [5];
   char open_date                                   [9];
   char open_time                                   [7];
   char cash_bonus                                  [2];
   char transmission_timestamp                      [11];
   char mcard_banknet                               [51];
   char ticket_nbr                                  [16];
   char def_gross_amt                               [13];
   char term                                        [4];

}pte_bch11;

EXEC SQL END DECLARE SECTION;

/*************************************************************************************/
/*************************************************************************************/
void tlf01_stip_to_db( pTLF01 tlf01_ptr )
{
  memcpy (&pte_tlf01_stip, tlf01_ptr, sizeof(pte_tlf01_stip));
}



/*************************************************************************************/

/*************************************************************************************/

void bch01_mp_to_db( pBCH01_MP bch01_mp_ptr )
{
  memcpy (&pte_bch01_mp, bch01_mp_ptr, sizeof(pte_bch01_mp));
}
/*************************************************************************************/
/*************************************************************************************/
void db_to_tlf01_stip ( pTLF01 tlf01_ptr )
{
   
   memset(tlf01_ptr, 0, sizeof(TLF01));
   memcpy(tlf01_ptr->primary_key.transaction_id, db_tlf01_stip.transaction_id.arr, db_tlf01_stip.transaction_id.len);
   tlf01_ptr->entry_type = db_tlf01_stip.entry_type.arr[0];
   memcpy(tlf01_ptr->tpdu_id, db_tlf01_stip.tpdu_id.arr, db_tlf01_stip.tpdu_id.len);
   memcpy(tlf01_ptr->issuer_id, db_tlf01_stip.issuer_id.arr, db_tlf01_stip.issuer_id.len);
   memcpy(tlf01_ptr->acquirer_id, db_tlf01_stip.acquirer_id.arr, db_tlf01_stip.acquirer_id.len);
   tlf01_ptr->tx_key = db_tlf01_stip.tx_key.arr[0];
   memcpy(tlf01_ptr->terminal_id, db_tlf01_stip.terminal_id.arr, db_tlf01_stip.terminal_id.len);
   memcpy(tlf01_ptr->terminal_type, db_tlf01_stip.terminal_type.arr, db_tlf01_stip.terminal_type.len);
   memcpy(tlf01_ptr->response_text, db_tlf01_stip.response_text.arr, db_tlf01_stip.response_text.len);
   memcpy(tlf01_ptr->card_num_len, db_tlf01_stip.card_num_len.arr, db_tlf01_stip.card_num_len.len);
   memcpy(tlf01_ptr->card_num, db_tlf01_stip.card_num.arr, db_tlf01_stip.card_num.len);
   memcpy(tlf01_ptr->exp_date, db_tlf01_stip.exp_date.arr, db_tlf01_stip.exp_date.len);
   memcpy(tlf01_ptr->total_amount, db_tlf01_stip.total_amount.arr, db_tlf01_stip.total_amount.len);
   memcpy(tlf01_ptr->add_amounts, db_tlf01_stip.add_amounts.arr, db_tlf01_stip.add_amounts.len);
   memcpy(tlf01_ptr->invoice_number, db_tlf01_stip.invoice_number.arr, db_tlf01_stip.invoice_number.len);
   memcpy(tlf01_ptr->orig_amount, db_tlf01_stip.orig_amount.arr, db_tlf01_stip.orig_amount.len);
   memcpy(tlf01_ptr->auth_number, db_tlf01_stip.auth_number.arr, db_tlf01_stip.auth_number.len);
   memcpy(tlf01_ptr->processing_code, db_tlf01_stip.processing_code.arr, db_tlf01_stip.processing_code.len);
   memcpy(tlf01_ptr->sys_trace_audit_num, db_tlf01_stip.sys_trace_audit_num.arr, db_tlf01_stip.sys_trace_audit_num.len);
   memcpy(tlf01_ptr->orig_sys_trace_num, db_tlf01_stip.orig_sys_trace_num.arr, db_tlf01_stip.orig_sys_trace_num.len);
   memcpy(tlf01_ptr->pos_entry_mode, db_tlf01_stip.pos_entry_mode.arr, db_tlf01_stip.pos_entry_mode.len);
   memcpy(tlf01_ptr->nii, db_tlf01_stip.nii.arr, db_tlf01_stip.nii.len);
   memcpy(tlf01_ptr->pos_condition_code, db_tlf01_stip.pos_condition_code.arr, db_tlf01_stip.pos_condition_code.len);
   memcpy(tlf01_ptr->track1, db_tlf01_stip.track1.arr, db_tlf01_stip.track1.len);
   memcpy(tlf01_ptr->track2, db_tlf01_stip.track2.arr, db_tlf01_stip.track2.len);
   memcpy(tlf01_ptr->retrieval_ref_num, db_tlf01_stip.retrieval_ref_num.arr, db_tlf01_stip.retrieval_ref_num.len);
   memcpy(tlf01_ptr->orig_retrieval_ref_num, db_tlf01_stip.orig_retrieval_ref_num.arr, db_tlf01_stip.orig_retrieval_ref_num.len);
   memcpy(tlf01_ptr->merchant_id, db_tlf01_stip.merchant_id.arr, db_tlf01_stip.merchant_id.len);
   memcpy(tlf01_ptr->orig_message, db_tlf01_stip.orig_message.arr, db_tlf01_stip.orig_message.len);
   memcpy(tlf01_ptr->settlement_total, db_tlf01_stip.settlement_total.arr, db_tlf01_stip.settlement_total.len);
   memcpy(tlf01_ptr->message_type, db_tlf01_stip.message_type.arr, db_tlf01_stip.message_type.len);
   memcpy(tlf01_ptr->card_holder_name, db_tlf01_stip.card_holder_name.arr, db_tlf01_stip.card_holder_name.len);
   tlf01_ptr->general_status = db_tlf01_stip.general_status.arr[0];
   memcpy(tlf01_ptr->originator_queue, db_tlf01_stip.originator_queue.arr, db_tlf01_stip.originator_queue.len);
   memcpy(tlf01_ptr->originator_info, db_tlf01_stip.originator_info.arr, db_tlf01_stip.originator_info.len);
   memcpy(tlf01_ptr->batch_number, db_tlf01_stip.batch_number.arr, db_tlf01_stip.batch_number.len);
   memcpy(tlf01_ptr->response_code, db_tlf01_stip.response_code.arr, db_tlf01_stip.response_code.len);
   memcpy(tlf01_ptr->date_yyyymmdd, db_tlf01_stip.date_yyyymmdd.arr, db_tlf01_stip.date_yyyymmdd.len);
   memcpy(tlf01_ptr->time_hhmmss, db_tlf01_stip.time_hhmmss.arr, db_tlf01_stip.time_hhmmss.len);
   memcpy(tlf01_ptr->num_sales, db_tlf01_stip.num_sales.arr, db_tlf01_stip.num_sales.len);
   memcpy(tlf01_ptr->sales_amount, db_tlf01_stip.sales_amount.arr, db_tlf01_stip.sales_amount.len);
   memcpy(tlf01_ptr->num_refunds, db_tlf01_stip.num_refunds.arr, db_tlf01_stip.num_refunds.len);
   memcpy(tlf01_ptr->refund_amount, db_tlf01_stip.refund_amount.arr, db_tlf01_stip.refund_amount.len);
   memcpy(tlf01_ptr->num_dbsales, db_tlf01_stip.num_dbsales.arr, db_tlf01_stip.num_dbsales.len);
   memcpy(tlf01_ptr->dbsales_amount, db_tlf01_stip.dbsales_amount.arr, db_tlf01_stip.dbsales_amount.len);
   memcpy(tlf01_ptr->num_dbrefunds, db_tlf01_stip.num_dbrefunds.arr, db_tlf01_stip.num_dbrefunds.len);
   memcpy(tlf01_ptr->dbrefund_amount, db_tlf01_stip.dbrefund_amount.arr, db_tlf01_stip.dbrefund_amount.len);
   memcpy(tlf01_ptr->pin_block, db_tlf01_stip.pin_block.arr, db_tlf01_stip.pin_block.len);
   memcpy(tlf01_ptr->tax_amount, db_tlf01_stip.tax_amount.arr, db_tlf01_stip.tax_amount.len);
   memcpy(tlf01_ptr->tip_amount, db_tlf01_stip.tip_amount.arr, db_tlf01_stip.tip_amount.len);
   memcpy(tlf01_ptr->tran_start_time, db_tlf01_stip.tran_start_time.arr, db_tlf01_stip.tran_start_time.len);
   memcpy(tlf01_ptr->host_start_time, db_tlf01_stip.host_start_time.arr, db_tlf01_stip.host_start_time.len);
   memcpy(tlf01_ptr->host_finish_time, db_tlf01_stip.host_finish_time.arr, db_tlf01_stip.host_finish_time.len);
   memcpy(tlf01_ptr->tran_finish_time, db_tlf01_stip.tran_finish_time.arr, db_tlf01_stip.tran_finish_time.len);
   memcpy(tlf01_ptr->settle_file_prefix, db_tlf01_stip.settle_file_prefix.arr, db_tlf01_stip.settle_file_prefix.len);
   memcpy(tlf01_ptr->resp_source_len, db_tlf01_stip.resp_source_len.arr, db_tlf01_stip.resp_source_len.len);
   tlf01_ptr->visa_char_indicator = db_tlf01_stip.visa_char_indicator.arr[0];
   memcpy(tlf01_ptr->visa_tran_id, db_tlf01_stip.visa_tran_id.arr, db_tlf01_stip.visa_tran_id.len);
   memcpy(tlf01_ptr->visa_validation_code, db_tlf01_stip.visa_validation_code.arr, db_tlf01_stip.visa_validation_code.len);
   memcpy(tlf01_ptr->mcard_banknet_len, db_tlf01_stip.mcard_banknet_len.arr, db_tlf01_stip.mcard_banknet_len.len);
   memcpy(tlf01_ptr->mcard_banknet, db_tlf01_stip.mcard_banknet.arr, db_tlf01_stip.mcard_banknet.len);
   memcpy(tlf01_ptr->agent_id_len, db_tlf01_stip.agent_id_len.arr, db_tlf01_stip.agent_id_len.len);
   memcpy(tlf01_ptr->agent_id, db_tlf01_stip.agent_id.arr, db_tlf01_stip.agent_id.len);
   tlf01_ptr->cvc = db_tlf01_stip.cvc.arr[0];
   memcpy(tlf01_ptr->settlement_date, db_tlf01_stip.settlement_date.arr, db_tlf01_stip.settlement_date.len);
   memcpy(tlf01_ptr->category_code, db_tlf01_stip.category_code.arr, db_tlf01_stip.category_code.len);
   memcpy(tlf01_ptr->conversion_rate, db_tlf01_stip.conversion_rate.arr, db_tlf01_stip.conversion_rate.len);
   memcpy(tlf01_ptr->product_code, db_tlf01_stip.product_code.arr, db_tlf01_stip.product_code.len);
   memcpy(tlf01_ptr->odometer, db_tlf01_stip.odometer.arr, db_tlf01_stip.odometer.len);
   memcpy(tlf01_ptr->organization_id, db_tlf01_stip.organization_id.arr, db_tlf01_stip.organization_id.len);
   tlf01_ptr->dynamic_keychange = db_tlf01_stip.dynamic_keychange.arr[0];

   memcpy(tlf01_ptr->txn_cnt, db_tlf01_stip.txn_cnt.arr, db_tlf01_stip.txn_cnt.len);
   memcpy(tlf01_ptr->source_key, db_tlf01_stip.source_key.arr, db_tlf01_stip.source_key.len);
   memcpy(tlf01_ptr->dcf01_retired_cwk, db_tlf01_stip.dcf01_retired_cwk.arr, db_tlf01_stip.dcf01_retired_cwk.len);
   memcpy(tlf01_ptr->dest_key, db_tlf01_stip.dest_key.arr, db_tlf01_stip.dest_key.len);
   memcpy(tlf01_ptr->ncf01_retired_cwk, db_tlf01_stip.ncf01_retired_cwk.arr, db_tlf01_stip.ncf01_retired_cwk.len);
   memcpy(tlf01_ptr->handler_queue, db_tlf01_stip.handler_queue.arr, db_tlf01_stip.handler_queue.len);
   memcpy(tlf01_ptr->authorizing_host_queue, db_tlf01_stip.authorizing_host_queue.arr, db_tlf01_stip.authorizing_host_queue.len);
   memcpy(tlf01_ptr->max_net_consec_tmouts, db_tlf01_stip.max_net_consec_tmouts.arr, db_tlf01_stip.max_net_consec_tmouts.len);
   memcpy(tlf01_ptr->max_active_txns, db_tlf01_stip.max_active_txns.arr, db_tlf01_stip.max_active_txns.len);
   memcpy(tlf01_ptr->remote_nsp_type, db_tlf01_stip.remote_nsp_type.arr, db_tlf01_stip.remote_nsp_type.len);
   memcpy(tlf01_ptr->kek, db_tlf01_stip.kek.arr, db_tlf01_stip.kek.len);
   
   memcpy(tlf01_ptr->credit_limit, db_tlf01_stip.credit_limit.arr, db_tlf01_stip.credit_limit.len);
   memcpy(tlf01_ptr->forwarding_institution_id, db_tlf01_stip.forwarding_institution_id.arr, db_tlf01_stip.forwarding_institution_id.len);
   memcpy(tlf01_ptr->acquiring_id, db_tlf01_stip.acquiring_id.arr, db_tlf01_stip.acquiring_id.len);
   memcpy(tlf01_ptr->outstanding_balance, db_tlf01_stip.outstanding_balance.arr, db_tlf01_stip.outstanding_balance.len);
   memcpy(tlf01_ptr->nfi_name, db_tlf01_stip.nfi_name.arr, db_tlf01_stip.nfi_name.len);
   memcpy(tlf01_ptr->nfi_seq_nbr, db_tlf01_stip.nfi_seq_nbr.arr, db_tlf01_stip.nfi_seq_nbr.len);
   memcpy(tlf01_ptr->nfi_start_date, db_tlf01_stip.nfi_start_date.arr, db_tlf01_stip.nfi_start_date.len);
   memcpy(tlf01_ptr->nfi_end_date, db_tlf01_stip.nfi_end_date.arr, db_tlf01_stip.nfi_end_date.len);
   memcpy(tlf01_ptr->resp_source, db_tlf01_stip.resp_source.arr, db_tlf01_stip.resp_source.len);
   memcpy(tlf01_ptr->dispensation.origin, db_tlf01_stip.origin.arr, db_tlf01_stip.origin.len);
   memcpy(tlf01_ptr->dispensation.auth_1, db_tlf01_stip.auth_1.arr, db_tlf01_stip.auth_1.len);
   memcpy(tlf01_ptr->dispensation.auth_2, db_tlf01_stip.auth_2.arr, db_tlf01_stip.auth_2.len);
   memcpy(tlf01_ptr->update_mask, db_tlf01_stip.update_mask.arr, db_tlf01_stip.update_mask.len);

   memcpy(tlf01_ptr->type_of_data, db_tlf01_stip.type_of_data.arr, db_tlf01_stip.type_of_data.len);
   memcpy(tlf01_ptr->down_payment, db_tlf01_stip.down_payment.arr, db_tlf01_stip.down_payment.len);
   memcpy(tlf01_ptr->period, db_tlf01_stip.period.arr, db_tlf01_stip.period.len);
   memcpy(tlf01_ptr->interest_rate, db_tlf01_stip.interest_rate.arr, db_tlf01_stip.interest_rate.len);
   memcpy(tlf01_ptr->total_interest, db_tlf01_stip.total_interest.arr, db_tlf01_stip.total_interest.len);
   memcpy(tlf01_ptr->redemption_amount, db_tlf01_stip.redemption_amount.arr, db_tlf01_stip.redemption_amount.len);
   memcpy(tlf01_ptr->vehicle_number, db_tlf01_stip.vehicle_number.arr, db_tlf01_stip.vehicle_number.len);
  
   memcpy(tlf01_ptr->profile, db_tlf01_stip.profile.arr, db_tlf01_stip.profile.len);
   memcpy(tlf01_ptr->nbr_of_prod_codes, db_tlf01_stip.nbr_of_prod_codes.arr, db_tlf01_stip.nbr_of_prod_codes.len);
  
   memcpy(tlf01_ptr->product_codes[0].code, db_tlf01_stip.product1_code.arr, db_tlf01_stip.product1_code.len);
   memcpy(tlf01_ptr->product_codes[0].quantity, db_tlf01_stip.product1_quantity.arr, db_tlf01_stip.product1_quantity.len);
   memcpy(tlf01_ptr->product_codes[0].amount, db_tlf01_stip.product1_amount.arr, db_tlf01_stip.product1_amount.len);   
   memcpy(tlf01_ptr->product_codes[1].code, db_tlf01_stip.product2_code.arr, db_tlf01_stip.product2_code.len);
   memcpy(tlf01_ptr->product_codes[1].quantity, db_tlf01_stip.product2_quantity.arr, db_tlf01_stip.product2_quantity.len);
   memcpy(tlf01_ptr->product_codes[1].amount, db_tlf01_stip.product2_amount.arr, db_tlf01_stip.product2_amount.len);
   memcpy(tlf01_ptr->product_codes[2].code, db_tlf01_stip.product3_code.arr, db_tlf01_stip.product3_code.len);
   memcpy(tlf01_ptr->product_codes[2].quantity, db_tlf01_stip.product3_quantity.arr, db_tlf01_stip.product3_quantity.len);
   memcpy(tlf01_ptr->product_codes[2].amount, db_tlf01_stip.product3_amount.arr, db_tlf01_stip.product3_amount.len);
   memcpy(tlf01_ptr->product_codes[3].code, db_tlf01_stip.product4_code.arr, db_tlf01_stip.product4_code.len);
   memcpy(tlf01_ptr->product_codes[3].quantity, db_tlf01_stip.product4_quantity.arr, db_tlf01_stip.product4_quantity.len);
   memcpy(tlf01_ptr->product_codes[3].amount, db_tlf01_stip.product4_amount.arr, db_tlf01_stip.product4_amount.len);
   memcpy(tlf01_ptr->product_codes[4].code, db_tlf01_stip.product5_code.arr, db_tlf01_stip.product5_code.len);
   memcpy(tlf01_ptr->product_codes[4].quantity, db_tlf01_stip.product5_quantity.arr, db_tlf01_stip.product5_quantity.len);
   memcpy(tlf01_ptr->product_codes[4].amount, db_tlf01_stip.product5_amount.arr, db_tlf01_stip.product5_amount.len);
   memcpy(tlf01_ptr->product_codes[5].code, db_tlf01_stip.product6_code.arr, db_tlf01_stip.product6_code.len);
   memcpy(tlf01_ptr->product_codes[5].quantity, db_tlf01_stip.product6_quantity.arr, db_tlf01_stip.product6_quantity.len);
   memcpy(tlf01_ptr->product_codes[5].amount, db_tlf01_stip.product6_amount.arr, db_tlf01_stip.product6_amount.len);
   memcpy(tlf01_ptr->product_codes[6].code, db_tlf01_stip.product7_code.arr, db_tlf01_stip.product7_code.len);
   memcpy(tlf01_ptr->product_codes[6].quantity, db_tlf01_stip.product7_quantity.arr, db_tlf01_stip.product7_quantity.len);
   memcpy(tlf01_ptr->product_codes[6].amount, db_tlf01_stip.product7_amount.arr, db_tlf01_stip.product7_amount.len);
   memcpy(tlf01_ptr->product_codes[7].code, db_tlf01_stip.product8_code.arr, db_tlf01_stip.product8_code.len);
   memcpy(tlf01_ptr->product_codes[7].quantity, db_tlf01_stip.product8_quantity.arr, db_tlf01_stip.product8_quantity.len);
   memcpy(tlf01_ptr->product_codes[7].amount, db_tlf01_stip.product8_amount.arr, db_tlf01_stip.product8_amount.len);
   memcpy(tlf01_ptr->product_codes[8].code, db_tlf01_stip.product9_code.arr, db_tlf01_stip.product9_code.len);
   memcpy(tlf01_ptr->product_codes[8].quantity, db_tlf01_stip.product9_quantity.arr, db_tlf01_stip.product9_quantity.len);
   memcpy(tlf01_ptr->product_codes[8].amount, db_tlf01_stip.product9_amount.arr, db_tlf01_stip.product9_amount.len);
   memcpy(tlf01_ptr->product_codes[9].code, db_tlf01_stip.product10_code.arr, db_tlf01_stip.product10_code.len);
   memcpy(tlf01_ptr->product_codes[9].quantity, db_tlf01_stip.product10_quantity.arr, db_tlf01_stip.product10_quantity.len);
   memcpy(tlf01_ptr->product_codes[9].amount, db_tlf01_stip.product10_amount.arr, db_tlf01_stip.product10_amount.len);
   memcpy(tlf01_ptr->product_codes[10].code, db_tlf01_stip.product11_code.arr, db_tlf01_stip.product11_code.len);
   memcpy(tlf01_ptr->product_codes[10].quantity, db_tlf01_stip.product11_quantity.arr, db_tlf01_stip.product11_quantity.len);
   memcpy(tlf01_ptr->product_codes[10].amount, db_tlf01_stip.product11_amount.arr, db_tlf01_stip.product11_amount.len);
   memcpy(tlf01_ptr->product_codes[11].code, db_tlf01_stip.product12_code.arr, db_tlf01_stip.product12_code.len);
   memcpy(tlf01_ptr->product_codes[11].quantity, db_tlf01_stip.product12_quantity.arr, db_tlf01_stip.product12_quantity.len);
   memcpy(tlf01_ptr->product_codes[11].amount, db_tlf01_stip.product12_amount.arr, db_tlf01_stip.product12_amount.len);
   memcpy(tlf01_ptr->product_codes[12].code, db_tlf01_stip.product13_code.arr, db_tlf01_stip.product13_code.len);
   memcpy(tlf01_ptr->product_codes[12].quantity, db_tlf01_stip.product13_quantity.arr, db_tlf01_stip.product13_quantity.len);
   memcpy(tlf01_ptr->product_codes[12].amount, db_tlf01_stip.product13_amount.arr, db_tlf01_stip.product13_amount.len);
   memcpy(tlf01_ptr->product_codes[13].code, db_tlf01_stip.product14_code.arr, db_tlf01_stip.product14_code.len);
   memcpy(tlf01_ptr->product_codes[13].quantity, db_tlf01_stip.product14_quantity.arr, db_tlf01_stip.product14_quantity.len);
   memcpy(tlf01_ptr->product_codes[13].amount, db_tlf01_stip.product14_amount.arr, db_tlf01_stip.product14_amount.len);
   memcpy(tlf01_ptr->product_codes[14].code, db_tlf01_stip.product15_code.arr, db_tlf01_stip.product15_code.len);
   memcpy(tlf01_ptr->product_codes[14].quantity, db_tlf01_stip.product15_quantity.arr, db_tlf01_stip.product15_quantity.len);
   memcpy(tlf01_ptr->product_codes[14].amount, db_tlf01_stip.product15_amount.arr, db_tlf01_stip.product15_amount.len);
   memcpy(tlf01_ptr->product_codes[15].code, db_tlf01_stip.product16_code.arr, db_tlf01_stip.product16_code.len);
   memcpy(tlf01_ptr->product_codes[15].quantity, db_tlf01_stip.product16_quantity.arr, db_tlf01_stip.product16_quantity.len);
   memcpy(tlf01_ptr->product_codes[15].amount, db_tlf01_stip.product16_amount.arr, db_tlf01_stip.product16_amount.len);
   memcpy(tlf01_ptr->product_codes[16].code, db_tlf01_stip.product17_code.arr, db_tlf01_stip.product17_code.len);
   memcpy(tlf01_ptr->product_codes[16].quantity, db_tlf01_stip.product17_quantity.arr, db_tlf01_stip.product17_quantity.len);
   memcpy(tlf01_ptr->product_codes[16].amount, db_tlf01_stip.product17_amount.arr, db_tlf01_stip.product17_amount.len);
   memcpy(tlf01_ptr->product_codes[17].code, db_tlf01_stip.product18_code.arr, db_tlf01_stip.product18_code.len);
   memcpy(tlf01_ptr->product_codes[17].quantity, db_tlf01_stip.product18_quantity.arr, db_tlf01_stip.product18_quantity.len);
   memcpy(tlf01_ptr->product_codes[17].amount, db_tlf01_stip.product18_amount.arr, db_tlf01_stip.product18_amount.len);
   memcpy(tlf01_ptr->product_codes[18].code, db_tlf01_stip.product19_code.arr, db_tlf01_stip.product19_code.len);
   memcpy(tlf01_ptr->product_codes[18].quantity, db_tlf01_stip.product19_quantity.arr, db_tlf01_stip.product19_quantity.len);
   memcpy(tlf01_ptr->product_codes[18].amount, db_tlf01_stip.product19_amount.arr, db_tlf01_stip.product19_amount.len);
   memcpy(tlf01_ptr->product_codes[19].code, db_tlf01_stip.product20_code.arr, db_tlf01_stip.product20_code.len);
   memcpy(tlf01_ptr->product_codes[19].quantity, db_tlf01_stip.product20_quantity.arr, db_tlf01_stip.product20_quantity.len);
   memcpy(tlf01_ptr->product_codes[19].amount, db_tlf01_stip.product20_amount.arr, db_tlf01_stip.product20_amount.len);
   memcpy(tlf01_ptr->visa_merchant_id, db_tlf01_stip.visa_merchant_id.arr, db_tlf01_stip.visa_merchant_id.len);
   
   memcpy(tlf01_ptr->cash_bonus, db_tlf01_stip.cash_bonus.arr, db_tlf01_stip.cash_bonus.len);
   memcpy(tlf01_ptr->deferred_factor, db_tlf01_stip.deferred_factor.arr, db_tlf01_stip.deferred_factor.len);
   memcpy(tlf01_ptr->deferred_term_length, db_tlf01_stip.deferred_term_length.arr, db_tlf01_stip.deferred_term_length.len);
   memcpy(tlf01_ptr->currency_code, db_tlf01_stip.currency_code.arr, db_tlf01_stip.currency_code.len);
   memcpy(tlf01_ptr->transmission_timestamp, db_tlf01_stip.transmission_timestamp.arr, db_tlf01_stip.transmission_timestamp.len);
   memcpy(tlf01_ptr->tran_fee_amount, db_tlf01_stip.tran_fee_amount.arr, db_tlf01_stip.tran_fee_amount.len);
   memcpy(tlf01_ptr->cvc_data, db_tlf01_stip.cvc_data.arr, db_tlf01_stip.cvc_data.len);

   memcpy(tlf01_ptr->verify_mag_stripe, db_tlf01_stip.verify_mag_stripe.arr, db_tlf01_stip.verify_mag_stripe.len);
   memcpy(tlf01_ptr->saf, db_tlf01_stip.saf.arr, db_tlf01_stip.saf.len);
   memcpy(tlf01_ptr->security_response_code, db_tlf01_stip.security_response_code.arr, db_tlf01_stip.security_response_code.len);
   memcpy(tlf01_ptr->service_code, db_tlf01_stip.service_code.arr, db_tlf01_stip.service_code.len);
   memcpy(tlf01_ptr->source_pin_format, db_tlf01_stip.source_pin_format.arr, db_tlf01_stip.source_pin_format.len);
   memcpy(tlf01_ptr->dest_pin_format, db_tlf01_stip.dest_pin_format.arr, db_tlf01_stip.dest_pin_format.len);
   memcpy(tlf01_ptr->voice_auth, db_tlf01_stip.voice_auth.arr, db_tlf01_stip.voice_auth.len);

   memcpy(tlf01_ptr->actual_amount, db_tlf01_stip.actual_amount.arr, db_tlf01_stip.actual_amount.len);
   memcpy(tlf01_ptr->reversal_amount, db_tlf01_stip.reversal_amount.arr, db_tlf01_stip.reversal_amount.len);
  
   memcpy(tlf01_ptr->voice_auth_text, db_tlf01_stip.voice_auth_text.arr, db_tlf01_stip.voice_auth_text.len);
   memcpy(tlf01_ptr->operator_id, db_tlf01_stip.operator_id.arr, db_tlf01_stip.operator_id.len);
   memcpy(tlf01_ptr->workstation, db_tlf01_stip.workstation.arr, db_tlf01_stip.workstation.len);
   memcpy(tlf01_ptr->orig_auth_number, db_tlf01_stip.orig_auth_number.arr, db_tlf01_stip.orig_auth_number.len);
   memcpy(tlf01_ptr->ticket_nbr, db_tlf01_stip.ticket_nbr.arr, db_tlf01_stip.ticket_nbr.len);
   memcpy(tlf01_ptr->system_date, db_tlf01_stip.system_date.arr, db_tlf01_stip.system_date.len);
   memcpy(tlf01_ptr->def_gross_amt, db_tlf01_stip.def_gross_amt.arr, db_tlf01_stip.def_gross_amt.len);
   memcpy(tlf01_ptr->monthly_amort_amt, db_tlf01_stip.monthly_amort_amt.arr, db_tlf01_stip.monthly_amort_amt.len);


}
/*************************************************************************************/
void db_to_bch01_mp ( pBCH01_MP bch01_mp_ptr)
{
   memset(bch01_mp_ptr, 0, sizeof(BCH01_MP));
   memcpy(bch01_mp_ptr->primary_key.device_id, db_bch01_mp.device_id.arr, db_bch01_mp.device_id.len);
   memcpy(bch01_mp_ptr->primary_key.batch_nbr, db_bch01_mp.batch_nbr.arr, db_bch01_mp.batch_nbr.len);

   memcpy(bch01_mp_ptr->merchant_id, db_bch01_mp.merchant_id.arr, db_bch01_mp.merchant_id.len);
   memcpy(bch01_mp_ptr->batch_status, db_bch01_mp.batch_status.arr, db_bch01_mp.batch_status.len);
   memcpy(bch01_mp_ptr->total_credit_cnt, db_bch01_mp.total_credit_cnt.arr, db_bch01_mp.total_credit_cnt.len);
   memcpy(bch01_mp_ptr->total_credit_amt, db_bch01_mp.total_credit_amt.arr, db_bch01_mp.total_credit_amt.len);
   memcpy(bch01_mp_ptr->total_credit_refund_cnt, db_bch01_mp.total_credit_refund_cnt.arr, db_bch01_mp.total_credit_refund_cnt.len);
   memcpy(bch01_mp_ptr->total_credit_refund_amt, db_bch01_mp.total_credit_refund_amt.arr, db_bch01_mp.total_credit_refund_amt.len);
   memcpy(bch01_mp_ptr->total_debit_cnt, db_bch01_mp.total_debit_cnt.arr, db_bch01_mp.total_debit_cnt.len);
   memcpy(bch01_mp_ptr->total_debit_amt, db_bch01_mp.total_debit_amt.arr, db_bch01_mp.total_debit_amt.len);
   memcpy(bch01_mp_ptr->total_debit_refund_cnt, db_bch01_mp.total_debit_refund_cnt.arr, db_bch01_mp.total_debit_refund_cnt.len);
   memcpy(bch01_mp_ptr->total_debit_refund_amt, db_bch01_mp.total_debit_refund_amt.arr, db_bch01_mp.total_debit_refund_amt.len);
   memcpy(bch01_mp_ptr->total_void_credit_cnt, db_bch01_mp.total_void_credit_cnt.arr, db_bch01_mp.total_void_credit_cnt.len);
   memcpy(bch01_mp_ptr->total_void_credit_amt, db_bch01_mp.total_void_credit_amt.arr, db_bch01_mp.total_void_credit_amt.len);
   memcpy(bch01_mp_ptr->total_void_credit_refund_cnt, db_bch01_mp.total_void_credit_refund_cnt.arr, db_bch01_mp.total_void_credit_refund_cnt.len);
   memcpy(bch01_mp_ptr->total_void_credit_refund_amt, db_bch01_mp.total_void_credit_refund_amt.arr, db_bch01_mp.total_void_credit_refund_amt.len);
   memcpy(bch01_mp_ptr->open_date, db_bch01_mp.open_date.arr, db_bch01_mp.open_date.len);
   memcpy(bch01_mp_ptr->open_time, db_bch01_mp.open_time.arr, db_bch01_mp.open_time.len);
   memcpy(bch01_mp_ptr->release_date, db_bch01_mp.release_date.arr, db_bch01_mp.release_date.len);
   memcpy(bch01_mp_ptr->release_time, db_bch01_mp.release_time.arr, db_bch01_mp.release_time.len);
   memcpy(bch01_mp_ptr->visa_merchant_id, db_bch01_mp.visa_merchant_id.arr, db_bch01_mp.visa_merchant_id.len);

}

/*************************************************************************************/

/*************************************************************************************/
void db_to_bch10 ( pBCH10 bch10_ptr)
{
   memset(bch10_ptr, 0, sizeof(BCH10));
   memcpy(bch10_ptr->primary_key.device_id, db_bch10.device_id.arr, db_bch10.device_id.len);
   memcpy(bch10_ptr->primary_key.batch_nbr, db_bch10.batch_nbr.arr, db_bch10.batch_nbr.len);
   memcpy(bch10_ptr->primary_key.retrieval_ref_num, db_bch10.retrieval_ref_num.arr, db_bch10.retrieval_ref_num.len);
   memcpy(bch10_ptr->merchant_id, db_bch10.merchant_id.arr, db_bch10.merchant_id.len);
   memcpy(bch10_ptr->processing_code, db_bch10.processing_code.arr, db_bch10.processing_code.len);
   memcpy(bch10_ptr->tran_amount, db_bch10.tran_amount.arr, db_bch10.tran_amount.len);
   memcpy(bch10_ptr->response_code, db_bch10.response_code.arr, db_bch10.response_code.len);
   memcpy(bch10_ptr->auth_number, db_bch10.auth_number.arr, db_bch10.auth_number.len);
   memcpy(bch10_ptr->tran_date, db_bch10.tran_date.arr, db_bch10.tran_date.len);
   memcpy(bch10_ptr->tran_time, db_bch10.tran_time.arr, db_bch10.tran_time.len);
   memcpy(bch10_ptr->transaction_id, db_bch10.transaction_id.arr, db_bch10.transaction_id.len);
   memcpy(bch10_ptr->message_type, db_bch10.message_type.arr, db_bch10.message_type.len);
   memcpy(bch10_ptr->card_nbr, db_bch10.card_nbr.arr, db_bch10.card_nbr.len);
   memcpy(bch10_ptr->invoice_nbr, db_bch10.invoice_nbr.arr, db_bch10.invoice_nbr.len);
   memcpy(bch10_ptr->settle_file_prefix, db_bch10.settle_file_prefix.arr, db_bch10.settle_file_prefix.len);
   memcpy(bch10_ptr->product_code, db_bch10.product_code.arr, db_bch10.product_code.len);
   memcpy(bch10_ptr->odometer, db_bch10.odometer.arr, db_bch10.odometer.len);
   memcpy(bch10_ptr->sys_trace_audit_num, db_bch10.sys_trace_audit_num.arr, db_bch10.sys_trace_audit_num.len);
   bch10_ptr->tx_key = db_bch10.tx_key.arr[0];
   bch10_ptr->bin_type = db_bch10.bin_type.arr[0];
   memcpy(bch10_ptr->type_of_data, db_bch10.type_of_data.arr, db_bch10.type_of_data.len);
   memcpy(bch10_ptr->down_payment, db_bch10.down_payment.arr, db_bch10.down_payment.len);
   memcpy(bch10_ptr->period, db_bch10.period.arr, db_bch10.period.len);
   memcpy(bch10_ptr->interest_rate, db_bch10.interest_rate.arr, db_bch10.interest_rate.len);
   memcpy(bch10_ptr->total_interest, db_bch10.total_interest.arr, db_bch10.total_interest.len);
   memcpy(bch10_ptr->redemption_amount, db_bch10.redemption_amount.arr, db_bch10.redemption_amount.len);
   memcpy(bch10_ptr->vehicle_number, db_bch10.vehicle_number.arr, db_bch10.vehicle_number.len);
   memcpy(bch10_ptr->pos_entry_mode, db_bch10.pos_entry_mode.arr, db_bch10.pos_entry_mode.len);
   memcpy(bch10_ptr->profile, db_bch10.profile.arr, db_bch10.profile.len);
   memcpy(bch10_ptr->nbr_of_prod_codes, db_bch10.nbr_of_prod_codes.arr, db_bch10.nbr_of_prod_codes.len);  
   memcpy(bch10_ptr->product_codes[0].code, db_bch10.product1_code.arr, db_bch10.product1_code.len);
   memcpy(bch10_ptr->product_codes[0].quantity, db_bch10.product1_quantity.arr, db_bch10.product1_quantity.len);
   memcpy(bch10_ptr->product_codes[0].amount, db_bch10.product1_amount.arr, db_bch10.product1_amount.len);   
   memcpy(bch10_ptr->product_codes[1].code, db_bch10.product2_code.arr, db_bch10.product2_code.len);
   memcpy(bch10_ptr->product_codes[1].quantity, db_bch10.product2_quantity.arr, db_bch10.product2_quantity.len);
   memcpy(bch10_ptr->product_codes[1].amount, db_bch10.product2_amount.arr, db_bch10.product2_amount.len);
   memcpy(bch10_ptr->product_codes[2].code, db_bch10.product3_code.arr, db_bch10.product3_code.len);
   memcpy(bch10_ptr->product_codes[2].quantity, db_bch10.product3_quantity.arr, db_bch10.product3_quantity.len);
   memcpy(bch10_ptr->product_codes[2].amount, db_bch10.product3_amount.arr, db_bch10.product3_amount.len);
   memcpy(bch10_ptr->product_codes[3].code, db_bch10.product4_code.arr, db_bch10.product4_code.len);
   memcpy(bch10_ptr->product_codes[3].quantity, db_bch10.product4_quantity.arr, db_bch10.product4_quantity.len);
   memcpy(bch10_ptr->product_codes[3].amount, db_bch10.product4_amount.arr, db_bch10.product4_amount.len);
   memcpy(bch10_ptr->product_codes[4].code, db_bch10.product5_code.arr, db_bch10.product5_code.len);
   memcpy(bch10_ptr->product_codes[4].quantity, db_bch10.product5_quantity.arr, db_bch10.product5_quantity.len);
   memcpy(bch10_ptr->product_codes[4].amount, db_bch10.product5_amount.arr, db_bch10.product5_amount.len);
   memcpy(bch10_ptr->product_codes[5].code, db_bch10.product6_code.arr, db_bch10.product6_code.len);
   memcpy(bch10_ptr->product_codes[5].quantity, db_bch10.product6_quantity.arr, db_bch10.product6_quantity.len);
   memcpy(bch10_ptr->product_codes[5].amount, db_bch10.product6_amount.arr, db_bch10.product6_amount.len);
   memcpy(bch10_ptr->product_codes[6].code, db_bch10.product7_code.arr, db_bch10.product7_code.len);
   memcpy(bch10_ptr->product_codes[6].quantity, db_bch10.product7_quantity.arr, db_bch10.product7_quantity.len);
   memcpy(bch10_ptr->product_codes[6].amount, db_bch10.product7_amount.arr, db_bch10.product7_amount.len);
   memcpy(bch10_ptr->product_codes[7].code, db_bch10.product8_code.arr, db_bch10.product8_code.len);
   memcpy(bch10_ptr->product_codes[7].quantity, db_bch10.product8_quantity.arr, db_bch10.product8_quantity.len);
   memcpy(bch10_ptr->product_codes[7].amount, db_bch10.product8_amount.arr, db_bch10.product8_amount.len);
   memcpy(bch10_ptr->product_codes[8].code, db_bch10.product9_code.arr, db_bch10.product9_code.len);
   memcpy(bch10_ptr->product_codes[8].quantity, db_bch10.product9_quantity.arr, db_bch10.product9_quantity.len);
   memcpy(bch10_ptr->product_codes[8].amount, db_bch10.product9_amount.arr, db_bch10.product9_amount.len);
   memcpy(bch10_ptr->product_codes[9].code, db_bch10.product10_code.arr, db_bch10.product10_code.len);
   memcpy(bch10_ptr->product_codes[9].quantity, db_bch10.product10_quantity.arr, db_bch10.product10_quantity.len);
   memcpy(bch10_ptr->product_codes[9].amount, db_bch10.product10_amount.arr, db_bch10.product10_amount.len);
   memcpy(bch10_ptr->product_codes[10].code, db_bch10.product11_code.arr, db_bch10.product11_code.len);
   memcpy(bch10_ptr->product_codes[10].quantity, db_bch10.product11_quantity.arr, db_bch10.product11_quantity.len);
   memcpy(bch10_ptr->product_codes[10].amount, db_bch10.product11_amount.arr, db_bch10.product11_amount.len);
   memcpy(bch10_ptr->product_codes[11].code, db_bch10.product12_code.arr, db_bch10.product12_code.len);
   memcpy(bch10_ptr->product_codes[11].quantity, db_bch10.product12_quantity.arr, db_bch10.product12_quantity.len);
   memcpy(bch10_ptr->product_codes[11].amount, db_bch10.product12_amount.arr, db_bch10.product12_amount.len);
   memcpy(bch10_ptr->product_codes[12].code, db_bch10.product13_code.arr, db_bch10.product13_code.len);
   memcpy(bch10_ptr->product_codes[12].quantity, db_bch10.product13_quantity.arr, db_bch10.product13_quantity.len);
   memcpy(bch10_ptr->product_codes[12].amount, db_bch10.product13_amount.arr, db_bch10.product13_amount.len);
   memcpy(bch10_ptr->product_codes[13].code, db_bch10.product14_code.arr, db_bch10.product14_code.len);
   memcpy(bch10_ptr->product_codes[13].quantity, db_bch10.product14_quantity.arr, db_bch10.product14_quantity.len);
   memcpy(bch10_ptr->product_codes[13].amount, db_bch10.product14_amount.arr, db_bch10.product14_amount.len);
   memcpy(bch10_ptr->product_codes[14].code, db_bch10.product15_code.arr, db_bch10.product15_code.len);
   memcpy(bch10_ptr->product_codes[14].quantity, db_bch10.product15_quantity.arr, db_bch10.product15_quantity.len);
   memcpy(bch10_ptr->product_codes[14].amount, db_bch10.product15_amount.arr, db_bch10.product15_amount.len);
   memcpy(bch10_ptr->product_codes[15].code, db_bch10.product16_code.arr, db_bch10.product16_code.len);
   memcpy(bch10_ptr->product_codes[15].quantity, db_bch10.product16_quantity.arr, db_bch10.product16_quantity.len);
   memcpy(bch10_ptr->product_codes[15].amount, db_bch10.product16_amount.arr, db_bch10.product16_amount.len);
   memcpy(bch10_ptr->product_codes[16].code, db_bch10.product17_code.arr, db_bch10.product17_code.len);
   memcpy(bch10_ptr->product_codes[16].quantity, db_bch10.product17_quantity.arr, db_bch10.product17_quantity.len);
   memcpy(bch10_ptr->product_codes[16].amount, db_bch10.product17_amount.arr, db_bch10.product17_amount.len);
   memcpy(bch10_ptr->product_codes[17].code, db_bch10.product18_code.arr, db_bch10.product18_code.len);
   memcpy(bch10_ptr->product_codes[17].quantity, db_bch10.product18_quantity.arr, db_bch10.product18_quantity.len);
   memcpy(bch10_ptr->product_codes[17].amount, db_bch10.product18_amount.arr, db_bch10.product18_amount.len);
   memcpy(bch10_ptr->product_codes[18].code, db_bch10.product19_code.arr, db_bch10.product19_code.len);
   memcpy(bch10_ptr->product_codes[18].quantity, db_bch10.product19_quantity.arr, db_bch10.product19_quantity.len);
   memcpy(bch10_ptr->product_codes[18].amount, db_bch10.product19_amount.arr, db_bch10.product19_amount.len);
   memcpy(bch10_ptr->product_codes[19].code, db_bch10.product20_code.arr, db_bch10.product20_code.len);
   memcpy(bch10_ptr->product_codes[19].quantity, db_bch10.product20_quantity.arr, db_bch10.product20_quantity.len);
   memcpy(bch10_ptr->product_codes[19].amount, db_bch10.product20_amount.arr, db_bch10.product20_amount.len);
   memcpy(bch10_ptr->aportionment_flag, db_bch10.aportionment_flag.arr, db_bch10.aportionment_flag.len);
   memcpy(bch10_ptr->exp_date, db_bch10.exp_date.arr, db_bch10.exp_date.len);
   memcpy(bch10_ptr->open_date, db_bch10.open_date.arr, db_bch10.open_date.len);
   memcpy(bch10_ptr->open_time, db_bch10.open_time.arr, db_bch10.open_time.len);
   memcpy(bch10_ptr->cash_bonus, db_bch10.cash_bonus.arr, db_bch10.cash_bonus.len);
   memcpy(bch10_ptr->transmission_timestamp,  db_bch10.transmission_timestamp.arr, db_bch10.transmission_timestamp.len);
   memcpy(bch10_ptr->mcard_banknet, db_bch10.mcard_banknet.arr, db_bch10.mcard_banknet.len);
   memcpy(bch10_ptr->ticket_nbr, db_bch10.ticket_nbr.arr, db_bch10.ticket_nbr.len);
   memcpy(bch10_ptr->def_gross_amt, db_bch10.def_gross_amt.arr, db_bch10.def_gross_amt.len);
   memcpy(bch10_ptr->term, db_bch10.term.arr, db_bch10.term.len);
}
/*************************************************************************************/

/*************************************************************************************/
void db_to_bch11 ( pBCH11 bch11_ptr)
{
   memset(bch11_ptr, 0, sizeof(bch11));
   memcpy(bch11_ptr->primary_key.device_id, db_bch11.device_id.arr, db_bch11.device_id.len);
   memcpy(bch11_ptr->primary_key.batch_nbr, db_bch11.batch_nbr.arr, db_bch11.batch_nbr.len);
   memcpy(bch11_ptr->primary_key.retrieval_ref_num, db_bch11.retrieval_ref_num.arr, db_bch11.retrieval_ref_num.len);
   memcpy(bch11_ptr->merchant_id, db_bch11.merchant_id.arr, db_bch11.merchant_id.len);
   memcpy(bch11_ptr->processing_code, db_bch11.processing_code.arr, db_bch11.processing_code.len);
   memcpy(bch11_ptr->tran_amount, db_bch11.tran_amount.arr, db_bch11.tran_amount.len);
   memcpy(bch11_ptr->response_code, db_bch11.response_code.arr, db_bch11.response_code.len);
   memcpy(bch11_ptr->auth_number, db_bch11.auth_number.arr, db_bch11.auth_number.len);
   memcpy(bch11_ptr->tran_date, db_bch11.tran_date.arr, db_bch11.tran_date.len);
   memcpy(bch11_ptr->tran_time, db_bch11.tran_time.arr, db_bch11.tran_time.len);
   memcpy(bch11_ptr->transaction_id, db_bch11.transaction_id.arr, db_bch11.transaction_id.len);
   memcpy(bch11_ptr->message_type, db_bch11.message_type.arr, db_bch11.message_type.len);
   memcpy(bch11_ptr->card_nbr, db_bch11.card_nbr.arr, db_bch11.card_nbr.len);
   memcpy(bch11_ptr->invoice_nbr, db_bch11.invoice_nbr.arr, db_bch11.invoice_nbr.len);
   memcpy(bch11_ptr->settle_file_prefix, db_bch11.settle_file_prefix.arr, db_bch11.settle_file_prefix.len);
   memcpy(bch11_ptr->product_code, db_bch11.product_code.arr, db_bch11.product_code.len);
   memcpy(bch11_ptr->odometer, db_bch11.odometer.arr, db_bch11.odometer.len);
   memcpy(bch11_ptr->sys_trace_audit_num, db_bch11.sys_trace_audit_num.arr, db_bch11.sys_trace_audit_num.len);
   bch11_ptr->tx_key = db_bch11.tx_key.arr[0];
   bch11_ptr->bin_type = db_bch11.bin_type.arr[0];
   memcpy(bch11_ptr->type_of_data, db_bch11.type_of_data.arr, db_bch11.type_of_data.len);
   memcpy(bch11_ptr->down_payment, db_bch11.down_payment.arr, db_bch11.down_payment.len);
   memcpy(bch11_ptr->period, db_bch11.period.arr, db_bch11.period.len);
   memcpy(bch11_ptr->interest_rate, db_bch11.interest_rate.arr, db_bch11.interest_rate.len);
   memcpy(bch11_ptr->total_interest, db_bch11.total_interest.arr, db_bch11.total_interest.len);
   memcpy(bch11_ptr->redemption_amount, db_bch11.redemption_amount.arr, db_bch11.redemption_amount.len);
   memcpy(bch11_ptr->vehicle_number, db_bch11.vehicle_number.arr, db_bch11.vehicle_number.len);
   memcpy(bch11_ptr->pos_entry_mode, db_bch11.pos_entry_mode.arr, db_bch11.pos_entry_mode.len);
   memcpy(bch11_ptr->profile, db_bch11.profile.arr, db_bch11.profile.len);
   memcpy(bch11_ptr->nbr_of_prod_codes, db_bch11.nbr_of_prod_codes.arr, db_bch11.nbr_of_prod_codes.len);  
   memcpy(bch11_ptr->product_codes[0].code, db_bch11.product1_code.arr, db_bch11.product1_code.len);
   memcpy(bch11_ptr->product_codes[0].quantity, db_bch11.product1_quantity.arr, db_bch11.product1_quantity.len);
   memcpy(bch11_ptr->product_codes[0].amount, db_bch11.product1_amount.arr, db_bch11.product1_amount.len);   
   memcpy(bch11_ptr->product_codes[1].code, db_bch11.product2_code.arr, db_bch11.product2_code.len);
   memcpy(bch11_ptr->product_codes[1].quantity, db_bch11.product2_quantity.arr, db_bch11.product2_quantity.len);
   memcpy(bch11_ptr->product_codes[1].amount, db_bch11.product2_amount.arr, db_bch11.product2_amount.len);
   memcpy(bch11_ptr->product_codes[2].code, db_bch11.product3_code.arr, db_bch11.product3_code.len);
   memcpy(bch11_ptr->product_codes[2].quantity, db_bch11.product3_quantity.arr, db_bch11.product3_quantity.len);
   memcpy(bch11_ptr->product_codes[2].amount, db_bch11.product3_amount.arr, db_bch11.product3_amount.len);
   memcpy(bch11_ptr->product_codes[3].code, db_bch11.product4_code.arr, db_bch11.product4_code.len);
   memcpy(bch11_ptr->product_codes[3].quantity, db_bch11.product4_quantity.arr, db_bch11.product4_quantity.len);
   memcpy(bch11_ptr->product_codes[3].amount, db_bch11.product4_amount.arr, db_bch11.product4_amount.len);
   memcpy(bch11_ptr->product_codes[4].code, db_bch11.product5_code.arr, db_bch11.product5_code.len);
   memcpy(bch11_ptr->product_codes[4].quantity, db_bch11.product5_quantity.arr, db_bch11.product5_quantity.len);
   memcpy(bch11_ptr->product_codes[4].amount, db_bch11.product5_amount.arr, db_bch11.product5_amount.len);
   memcpy(bch11_ptr->product_codes[5].code, db_bch11.product6_code.arr, db_bch11.product6_code.len);
   memcpy(bch11_ptr->product_codes[5].quantity, db_bch11.product6_quantity.arr, db_bch11.product6_quantity.len);
   memcpy(bch11_ptr->product_codes[5].amount, db_bch11.product6_amount.arr, db_bch11.product6_amount.len);
   memcpy(bch11_ptr->product_codes[6].code, db_bch11.product7_code.arr, db_bch11.product7_code.len);
   memcpy(bch11_ptr->product_codes[6].quantity, db_bch11.product7_quantity.arr, db_bch11.product7_quantity.len);
   memcpy(bch11_ptr->product_codes[6].amount, db_bch11.product7_amount.arr, db_bch11.product7_amount.len);
   memcpy(bch11_ptr->product_codes[7].code, db_bch11.product8_code.arr, db_bch11.product8_code.len);
   memcpy(bch11_ptr->product_codes[7].quantity, db_bch11.product8_quantity.arr, db_bch11.product8_quantity.len);
   memcpy(bch11_ptr->product_codes[7].amount, db_bch11.product8_amount.arr, db_bch11.product8_amount.len);
   memcpy(bch11_ptr->product_codes[8].code, db_bch11.product9_code.arr, db_bch11.product9_code.len);
   memcpy(bch11_ptr->product_codes[8].quantity, db_bch11.product9_quantity.arr, db_bch11.product9_quantity.len);
   memcpy(bch11_ptr->product_codes[8].amount, db_bch11.product9_amount.arr, db_bch11.product9_amount.len);
   memcpy(bch11_ptr->product_codes[9].code, db_bch11.product10_code.arr, db_bch11.product10_code.len);
   memcpy(bch11_ptr->product_codes[9].quantity, db_bch11.product10_quantity.arr, db_bch11.product10_quantity.len);
   memcpy(bch11_ptr->product_codes[9].amount, db_bch11.product10_amount.arr, db_bch11.product10_amount.len);
   memcpy(bch11_ptr->product_codes[10].code, db_bch11.product11_code.arr, db_bch11.product11_code.len);
   memcpy(bch11_ptr->product_codes[10].quantity, db_bch11.product11_quantity.arr, db_bch11.product11_quantity.len);
   memcpy(bch11_ptr->product_codes[10].amount, db_bch11.product11_amount.arr, db_bch11.product11_amount.len);
   memcpy(bch11_ptr->product_codes[11].code, db_bch11.product12_code.arr, db_bch11.product12_code.len);
   memcpy(bch11_ptr->product_codes[11].quantity, db_bch11.product12_quantity.arr, db_bch11.product12_quantity.len);
   memcpy(bch11_ptr->product_codes[11].amount, db_bch11.product12_amount.arr, db_bch11.product12_amount.len);
   memcpy(bch11_ptr->product_codes[12].code, db_bch11.product13_code.arr, db_bch11.product13_code.len);
   memcpy(bch11_ptr->product_codes[12].quantity, db_bch11.product13_quantity.arr, db_bch11.product13_quantity.len);
   memcpy(bch11_ptr->product_codes[12].amount, db_bch11.product13_amount.arr, db_bch11.product13_amount.len);
   memcpy(bch11_ptr->product_codes[13].code, db_bch11.product14_code.arr, db_bch11.product14_code.len);
   memcpy(bch11_ptr->product_codes[13].quantity, db_bch11.product14_quantity.arr, db_bch11.product14_quantity.len);
   memcpy(bch11_ptr->product_codes[13].amount, db_bch11.product14_amount.arr, db_bch11.product14_amount.len);
   memcpy(bch11_ptr->product_codes[14].code, db_bch11.product15_code.arr, db_bch11.product15_code.len);
   memcpy(bch11_ptr->product_codes[14].quantity, db_bch11.product15_quantity.arr, db_bch11.product15_quantity.len);
   memcpy(bch11_ptr->product_codes[14].amount, db_bch11.product15_amount.arr, db_bch11.product15_amount.len);
   memcpy(bch11_ptr->product_codes[15].code, db_bch11.product16_code.arr, db_bch11.product16_code.len);
   memcpy(bch11_ptr->product_codes[15].quantity, db_bch11.product16_quantity.arr, db_bch11.product16_quantity.len);
   memcpy(bch11_ptr->product_codes[15].amount, db_bch11.product16_amount.arr, db_bch11.product16_amount.len);
   memcpy(bch11_ptr->product_codes[16].code, db_bch11.product17_code.arr, db_bch11.product17_code.len);
   memcpy(bch11_ptr->product_codes[16].quantity, db_bch11.product17_quantity.arr, db_bch11.product17_quantity.len);
   memcpy(bch11_ptr->product_codes[16].amount, db_bch11.product17_amount.arr, db_bch11.product17_amount.len);
   memcpy(bch11_ptr->product_codes[17].code, db_bch11.product18_code.arr, db_bch11.product18_code.len);
   memcpy(bch11_ptr->product_codes[17].quantity, db_bch11.product18_quantity.arr, db_bch11.product18_quantity.len);
   memcpy(bch11_ptr->product_codes[17].amount, db_bch11.product18_amount.arr, db_bch11.product18_amount.len);
   memcpy(bch11_ptr->product_codes[18].code, db_bch11.product19_code.arr, db_bch11.product19_code.len);
   memcpy(bch11_ptr->product_codes[18].quantity, db_bch11.product19_quantity.arr, db_bch11.product19_quantity.len);
   memcpy(bch11_ptr->product_codes[18].amount, db_bch11.product19_amount.arr, db_bch11.product19_amount.len);
   memcpy(bch11_ptr->product_codes[19].code, db_bch11.product20_code.arr, db_bch11.product20_code.len);
   memcpy(bch11_ptr->product_codes[19].quantity, db_bch11.product20_quantity.arr, db_bch11.product20_quantity.len);
   memcpy(bch11_ptr->product_codes[19].amount, db_bch11.product20_amount.arr, db_bch11.product20_amount.len);
   memcpy(bch11_ptr->aportionment_flag, db_bch11.aportionment_flag.arr, db_bch11.aportionment_flag.len);
   memcpy(bch11_ptr->exp_date, db_bch11.exp_date.arr, db_bch11.exp_date.len);
   memcpy(bch11_ptr->open_date, db_bch11.open_date.arr, db_bch11.open_date.len);
   memcpy(bch11_ptr->open_time, db_bch11.open_time.arr, db_bch11.open_time.len);
   memcpy(bch11_ptr->cash_bonus, db_bch11.cash_bonus.arr, db_bch11.cash_bonus.len);
   memcpy(bch11_ptr->transmission_timestamp,  db_bch11.transmission_timestamp.arr, db_bch11.transmission_timestamp.len);
   memcpy(bch11_ptr->mcard_banknet, db_bch11.mcard_banknet.arr, db_bch11.mcard_banknet.len);
   memcpy(bch11_ptr->ticket_nbr, db_bch11.ticket_nbr.arr, db_bch11.ticket_nbr.len);
   memcpy(bch11_ptr->def_gross_amt, db_bch11.def_gross_amt.arr, db_bch11.def_gross_amt.len);
   memcpy(bch11_ptr->term, db_bch11.term.arr, db_bch11.term.len);
}

/*************************************************************************************/
/*************************************************************************************/
void db_to_db_Auth_Tx_TLFstip ( pTLF01 tlf01_ptr )
{
   
   memset(tlf01_ptr, 0, sizeof(TLF01));
   memcpy(tlf01_ptr->primary_key.transaction_id, db_Auth_Tx_TLFstip.transaction_id.arr, db_Auth_Tx_TLFstip.transaction_id.len);
   tlf01_ptr->entry_type = db_Auth_Tx_TLFstip.entry_type.arr[0];
   memcpy(tlf01_ptr->tpdu_id, db_Auth_Tx_TLFstip.tpdu_id.arr, db_Auth_Tx_TLFstip.tpdu_id.len);
   memcpy(tlf01_ptr->issuer_id, db_Auth_Tx_TLFstip.issuer_id.arr, db_Auth_Tx_TLFstip.issuer_id.len);
   memcpy(tlf01_ptr->acquirer_id, db_Auth_Tx_TLFstip.acquirer_id.arr, db_Auth_Tx_TLFstip.acquirer_id.len);
   tlf01_ptr->tx_key = db_Auth_Tx_TLFstip.tx_key.arr[0];
   memcpy(tlf01_ptr->terminal_id, db_Auth_Tx_TLFstip.terminal_id.arr, db_Auth_Tx_TLFstip.terminal_id.len);
   memcpy(tlf01_ptr->terminal_type, db_Auth_Tx_TLFstip.terminal_type.arr, db_Auth_Tx_TLFstip.terminal_type.len);
   memcpy(tlf01_ptr->response_text, db_Auth_Tx_TLFstip.response_text.arr, db_Auth_Tx_TLFstip.response_text.len);
   memcpy(tlf01_ptr->card_num_len, db_Auth_Tx_TLFstip.card_num_len.arr, db_Auth_Tx_TLFstip.card_num_len.len);
   memcpy(tlf01_ptr->card_num, db_Auth_Tx_TLFstip.card_num.arr, db_Auth_Tx_TLFstip.card_num.len);
   memcpy(tlf01_ptr->exp_date, db_Auth_Tx_TLFstip.exp_date.arr, db_Auth_Tx_TLFstip.exp_date.len);
   memcpy(tlf01_ptr->total_amount, db_Auth_Tx_TLFstip.total_amount.arr, db_Auth_Tx_TLFstip.total_amount.len);
   memcpy(tlf01_ptr->add_amounts, db_Auth_Tx_TLFstip.add_amounts.arr, db_Auth_Tx_TLFstip.add_amounts.len);
   memcpy(tlf01_ptr->invoice_number, db_Auth_Tx_TLFstip.invoice_number.arr, db_Auth_Tx_TLFstip.invoice_number.len);
   memcpy(tlf01_ptr->orig_amount, db_Auth_Tx_TLFstip.orig_amount.arr, db_Auth_Tx_TLFstip.orig_amount.len);
   memcpy(tlf01_ptr->auth_number, db_Auth_Tx_TLFstip.auth_number.arr, db_Auth_Tx_TLFstip.auth_number.len);
   memcpy(tlf01_ptr->processing_code, db_Auth_Tx_TLFstip.processing_code.arr, db_Auth_Tx_TLFstip.processing_code.len);
   memcpy(tlf01_ptr->sys_trace_audit_num, db_Auth_Tx_TLFstip.sys_trace_audit_num.arr, db_Auth_Tx_TLFstip.sys_trace_audit_num.len);
   memcpy(tlf01_ptr->orig_sys_trace_num, db_Auth_Tx_TLFstip.orig_sys_trace_num.arr, db_Auth_Tx_TLFstip.orig_sys_trace_num.len);
   memcpy(tlf01_ptr->pos_entry_mode, db_Auth_Tx_TLFstip.pos_entry_mode.arr, db_Auth_Tx_TLFstip.pos_entry_mode.len);
   memcpy(tlf01_ptr->nii, db_Auth_Tx_TLFstip.nii.arr, db_Auth_Tx_TLFstip.nii.len);
   memcpy(tlf01_ptr->pos_condition_code, db_Auth_Tx_TLFstip.pos_condition_code.arr, db_Auth_Tx_TLFstip.pos_condition_code.len);
   memcpy(tlf01_ptr->track1, db_Auth_Tx_TLFstip.track1.arr, db_Auth_Tx_TLFstip.track1.len);
   memcpy(tlf01_ptr->track2, db_Auth_Tx_TLFstip.track2.arr, db_Auth_Tx_TLFstip.track2.len);
   memcpy(tlf01_ptr->retrieval_ref_num, db_Auth_Tx_TLFstip.retrieval_ref_num.arr, db_Auth_Tx_TLFstip.retrieval_ref_num.len);
   memcpy(tlf01_ptr->orig_retrieval_ref_num, db_Auth_Tx_TLFstip.orig_retrieval_ref_num.arr, db_Auth_Tx_TLFstip.orig_retrieval_ref_num.len);
   memcpy(tlf01_ptr->merchant_id, db_Auth_Tx_TLFstip.merchant_id.arr, db_Auth_Tx_TLFstip.merchant_id.len);
   memcpy(tlf01_ptr->orig_message, db_Auth_Tx_TLFstip.orig_message.arr, db_Auth_Tx_TLFstip.orig_message.len);
   memcpy(tlf01_ptr->settlement_total, db_Auth_Tx_TLFstip.settlement_total.arr, db_Auth_Tx_TLFstip.settlement_total.len);
   memcpy(tlf01_ptr->message_type, db_Auth_Tx_TLFstip.message_type.arr, db_Auth_Tx_TLFstip.message_type.len);
   memcpy(tlf01_ptr->card_holder_name, db_Auth_Tx_TLFstip.card_holder_name.arr, db_Auth_Tx_TLFstip.card_holder_name.len);
   tlf01_ptr->general_status = db_Auth_Tx_TLFstip.general_status.arr[0];
   memcpy(tlf01_ptr->originator_queue, db_Auth_Tx_TLFstip.originator_queue.arr, db_Auth_Tx_TLFstip.originator_queue.len);
   memcpy(tlf01_ptr->originator_info, db_Auth_Tx_TLFstip.originator_info.arr, db_Auth_Tx_TLFstip.originator_info.len);
   memcpy(tlf01_ptr->batch_number, db_Auth_Tx_TLFstip.batch_number.arr, db_Auth_Tx_TLFstip.batch_number.len);
   memcpy(tlf01_ptr->response_code, db_Auth_Tx_TLFstip.response_code.arr, db_Auth_Tx_TLFstip.response_code.len);
   memcpy(tlf01_ptr->date_yyyymmdd, db_Auth_Tx_TLFstip.date_yyyymmdd.arr, db_Auth_Tx_TLFstip.date_yyyymmdd.len);
   memcpy(tlf01_ptr->time_hhmmss, db_Auth_Tx_TLFstip.time_hhmmss.arr, db_Auth_Tx_TLFstip.time_hhmmss.len);
   memcpy(tlf01_ptr->num_sales, db_Auth_Tx_TLFstip.num_sales.arr, db_Auth_Tx_TLFstip.num_sales.len);
   memcpy(tlf01_ptr->sales_amount, db_Auth_Tx_TLFstip.sales_amount.arr, db_Auth_Tx_TLFstip.sales_amount.len);
   memcpy(tlf01_ptr->num_refunds, db_Auth_Tx_TLFstip.num_refunds.arr, db_Auth_Tx_TLFstip.num_refunds.len);
   memcpy(tlf01_ptr->refund_amount, db_Auth_Tx_TLFstip.refund_amount.arr, db_Auth_Tx_TLFstip.refund_amount.len);
   memcpy(tlf01_ptr->num_dbsales, db_Auth_Tx_TLFstip.num_dbsales.arr, db_Auth_Tx_TLFstip.num_dbsales.len);
   memcpy(tlf01_ptr->dbsales_amount, db_Auth_Tx_TLFstip.dbsales_amount.arr, db_Auth_Tx_TLFstip.dbsales_amount.len);
   memcpy(tlf01_ptr->num_dbrefunds, db_Auth_Tx_TLFstip.num_dbrefunds.arr, db_Auth_Tx_TLFstip.num_dbrefunds.len);
   memcpy(tlf01_ptr->dbrefund_amount, db_Auth_Tx_TLFstip.dbrefund_amount.arr, db_Auth_Tx_TLFstip.dbrefund_amount.len);
   memcpy(tlf01_ptr->pin_block, db_Auth_Tx_TLFstip.pin_block.arr, db_Auth_Tx_TLFstip.pin_block.len);
   memcpy(tlf01_ptr->tax_amount, db_Auth_Tx_TLFstip.tax_amount.arr, db_Auth_Tx_TLFstip.tax_amount.len);
   memcpy(tlf01_ptr->tip_amount, db_Auth_Tx_TLFstip.tip_amount.arr, db_Auth_Tx_TLFstip.tip_amount.len);
   memcpy(tlf01_ptr->tran_start_time, db_Auth_Tx_TLFstip.tran_start_time.arr, db_Auth_Tx_TLFstip.tran_start_time.len);
   memcpy(tlf01_ptr->host_start_time, db_Auth_Tx_TLFstip.host_start_time.arr, db_Auth_Tx_TLFstip.host_start_time.len);
   memcpy(tlf01_ptr->host_finish_time, db_Auth_Tx_TLFstip.host_finish_time.arr, db_Auth_Tx_TLFstip.host_finish_time.len);
   memcpy(tlf01_ptr->tran_finish_time, db_Auth_Tx_TLFstip.tran_finish_time.arr, db_Auth_Tx_TLFstip.tran_finish_time.len);
   memcpy(tlf01_ptr->settle_file_prefix, db_Auth_Tx_TLFstip.settle_file_prefix.arr, db_Auth_Tx_TLFstip.settle_file_prefix.len);
   memcpy(tlf01_ptr->resp_source_len, db_Auth_Tx_TLFstip.resp_source_len.arr, db_Auth_Tx_TLFstip.resp_source_len.len);
   tlf01_ptr->visa_char_indicator = db_Auth_Tx_TLFstip.visa_char_indicator.arr[0];
   memcpy(tlf01_ptr->visa_tran_id, db_Auth_Tx_TLFstip.visa_tran_id.arr, db_Auth_Tx_TLFstip.visa_tran_id.len);
   memcpy(tlf01_ptr->visa_validation_code, db_Auth_Tx_TLFstip.visa_validation_code.arr, db_Auth_Tx_TLFstip.visa_validation_code.len);
   memcpy(tlf01_ptr->mcard_banknet_len, db_Auth_Tx_TLFstip.mcard_banknet_len.arr, db_Auth_Tx_TLFstip.mcard_banknet_len.len);
   memcpy(tlf01_ptr->mcard_banknet, db_Auth_Tx_TLFstip.mcard_banknet.arr, db_Auth_Tx_TLFstip.mcard_banknet.len);
   memcpy(tlf01_ptr->agent_id_len, db_Auth_Tx_TLFstip.agent_id_len.arr, db_Auth_Tx_TLFstip.agent_id_len.len);
   memcpy(tlf01_ptr->agent_id, db_Auth_Tx_TLFstip.agent_id.arr, db_Auth_Tx_TLFstip.agent_id.len);
   tlf01_ptr->cvc = db_Auth_Tx_TLFstip.cvc.arr[0];
   memcpy(tlf01_ptr->settlement_date, db_Auth_Tx_TLFstip.settlement_date.arr, db_Auth_Tx_TLFstip.settlement_date.len);
   memcpy(tlf01_ptr->category_code, db_Auth_Tx_TLFstip.category_code.arr, db_Auth_Tx_TLFstip.category_code.len);
   memcpy(tlf01_ptr->conversion_rate, db_Auth_Tx_TLFstip.conversion_rate.arr, db_Auth_Tx_TLFstip.conversion_rate.len);
   memcpy(tlf01_ptr->product_code, db_Auth_Tx_TLFstip.product_code.arr, db_Auth_Tx_TLFstip.product_code.len);
   memcpy(tlf01_ptr->odometer, db_Auth_Tx_TLFstip.odometer.arr, db_Auth_Tx_TLFstip.odometer.len);
   memcpy(tlf01_ptr->organization_id, db_Auth_Tx_TLFstip.organization_id.arr, db_Auth_Tx_TLFstip.organization_id.len);
   tlf01_ptr->dynamic_keychange = db_Auth_Tx_TLFstip.dynamic_keychange.arr[0];

   memcpy(tlf01_ptr->txn_cnt, db_Auth_Tx_TLFstip.txn_cnt.arr, db_Auth_Tx_TLFstip.txn_cnt.len);
   memcpy(tlf01_ptr->source_key, db_Auth_Tx_TLFstip.source_key.arr, db_Auth_Tx_TLFstip.source_key.len);
   memcpy(tlf01_ptr->dcf01_retired_cwk, db_Auth_Tx_TLFstip.dcf01_retired_cwk.arr, db_Auth_Tx_TLFstip.dcf01_retired_cwk.len);
   memcpy(tlf01_ptr->dest_key, db_Auth_Tx_TLFstip.dest_key.arr, db_Auth_Tx_TLFstip.dest_key.len);
   memcpy(tlf01_ptr->ncf01_retired_cwk, db_Auth_Tx_TLFstip.ncf01_retired_cwk.arr, db_Auth_Tx_TLFstip.ncf01_retired_cwk.len);
   memcpy(tlf01_ptr->handler_queue, db_Auth_Tx_TLFstip.handler_queue.arr, db_Auth_Tx_TLFstip.handler_queue.len);
   memcpy(tlf01_ptr->authorizing_host_queue, db_Auth_Tx_TLFstip.authorizing_host_queue.arr, db_Auth_Tx_TLFstip.authorizing_host_queue.len);
   memcpy(tlf01_ptr->max_net_consec_tmouts, db_Auth_Tx_TLFstip.max_net_consec_tmouts.arr, db_Auth_Tx_TLFstip.max_net_consec_tmouts.len);
   memcpy(tlf01_ptr->max_active_txns, db_Auth_Tx_TLFstip.max_active_txns.arr, db_Auth_Tx_TLFstip.max_active_txns.len);
   memcpy(tlf01_ptr->remote_nsp_type, db_Auth_Tx_TLFstip.remote_nsp_type.arr, db_Auth_Tx_TLFstip.remote_nsp_type.len);
   memcpy(tlf01_ptr->kek, db_Auth_Tx_TLFstip.kek.arr, db_Auth_Tx_TLFstip.kek.len);
   
   memcpy(tlf01_ptr->credit_limit, db_Auth_Tx_TLFstip.credit_limit.arr, db_Auth_Tx_TLFstip.credit_limit.len);
   memcpy(tlf01_ptr->forwarding_institution_id, db_Auth_Tx_TLFstip.forwarding_institution_id.arr, db_Auth_Tx_TLFstip.forwarding_institution_id.len);
   memcpy(tlf01_ptr->acquiring_id, db_Auth_Tx_TLFstip.acquiring_id.arr, db_Auth_Tx_TLFstip.acquiring_id.len);
   memcpy(tlf01_ptr->outstanding_balance, db_Auth_Tx_TLFstip.outstanding_balance.arr, db_Auth_Tx_TLFstip.outstanding_balance.len);
   memcpy(tlf01_ptr->nfi_name, db_Auth_Tx_TLFstip.nfi_name.arr, db_Auth_Tx_TLFstip.nfi_name.len);
   memcpy(tlf01_ptr->nfi_seq_nbr, db_Auth_Tx_TLFstip.nfi_seq_nbr.arr, db_Auth_Tx_TLFstip.nfi_seq_nbr.len);
   memcpy(tlf01_ptr->nfi_start_date, db_Auth_Tx_TLFstip.nfi_start_date.arr, db_Auth_Tx_TLFstip.nfi_start_date.len);
   memcpy(tlf01_ptr->nfi_end_date, db_Auth_Tx_TLFstip.nfi_end_date.arr, db_Auth_Tx_TLFstip.nfi_end_date.len);
   memcpy(tlf01_ptr->resp_source, db_Auth_Tx_TLFstip.resp_source.arr, db_Auth_Tx_TLFstip.resp_source.len);
   memcpy(tlf01_ptr->dispensation.origin, db_Auth_Tx_TLFstip.origin.arr, db_Auth_Tx_TLFstip.origin.len);
   memcpy(tlf01_ptr->dispensation.auth_1, db_Auth_Tx_TLFstip.auth_1.arr, db_Auth_Tx_TLFstip.auth_1.len);
   memcpy(tlf01_ptr->dispensation.auth_2, db_Auth_Tx_TLFstip.auth_2.arr, db_Auth_Tx_TLFstip.auth_2.len);
   memcpy(tlf01_ptr->update_mask, db_Auth_Tx_TLFstip.update_mask.arr, db_Auth_Tx_TLFstip.update_mask.len);

   memcpy(tlf01_ptr->type_of_data, db_Auth_Tx_TLFstip.type_of_data.arr, db_Auth_Tx_TLFstip.type_of_data.len);
   memcpy(tlf01_ptr->down_payment, db_Auth_Tx_TLFstip.down_payment.arr, db_Auth_Tx_TLFstip.down_payment.len);
   memcpy(tlf01_ptr->period, db_Auth_Tx_TLFstip.period.arr, db_Auth_Tx_TLFstip.period.len);
   memcpy(tlf01_ptr->interest_rate, db_Auth_Tx_TLFstip.interest_rate.arr, db_Auth_Tx_TLFstip.interest_rate.len);
   memcpy(tlf01_ptr->total_interest, db_Auth_Tx_TLFstip.total_interest.arr, db_Auth_Tx_TLFstip.total_interest.len);
   memcpy(tlf01_ptr->redemption_amount, db_Auth_Tx_TLFstip.redemption_amount.arr, db_Auth_Tx_TLFstip.redemption_amount.len);
   memcpy(tlf01_ptr->vehicle_number, db_Auth_Tx_TLFstip.vehicle_number.arr, db_Auth_Tx_TLFstip.vehicle_number.len);
  
   memcpy(tlf01_ptr->profile, db_Auth_Tx_TLFstip.profile.arr, db_Auth_Tx_TLFstip.profile.len);
   memcpy(tlf01_ptr->nbr_of_prod_codes, db_Auth_Tx_TLFstip.nbr_of_prod_codes.arr, db_Auth_Tx_TLFstip.nbr_of_prod_codes.len);
  
   memcpy(tlf01_ptr->product_codes[0].code, db_Auth_Tx_TLFstip.product1_code.arr, db_Auth_Tx_TLFstip.product1_code.len);
   memcpy(tlf01_ptr->product_codes[0].quantity, db_Auth_Tx_TLFstip.product1_quantity.arr, db_Auth_Tx_TLFstip.product1_quantity.len);
   memcpy(tlf01_ptr->product_codes[0].amount, db_Auth_Tx_TLFstip.product1_amount.arr, db_Auth_Tx_TLFstip.product1_amount.len);   
   memcpy(tlf01_ptr->product_codes[1].code, db_Auth_Tx_TLFstip.product2_code.arr, db_Auth_Tx_TLFstip.product2_code.len);
   memcpy(tlf01_ptr->product_codes[1].quantity, db_Auth_Tx_TLFstip.product2_quantity.arr, db_Auth_Tx_TLFstip.product2_quantity.len);
   memcpy(tlf01_ptr->product_codes[1].amount, db_Auth_Tx_TLFstip.product2_amount.arr, db_Auth_Tx_TLFstip.product2_amount.len);
   memcpy(tlf01_ptr->product_codes[2].code, db_Auth_Tx_TLFstip.product3_code.arr, db_Auth_Tx_TLFstip.product3_code.len);
   memcpy(tlf01_ptr->product_codes[2].quantity, db_Auth_Tx_TLFstip.product3_quantity.arr, db_Auth_Tx_TLFstip.product3_quantity.len);
   memcpy(tlf01_ptr->product_codes[2].amount, db_Auth_Tx_TLFstip.product3_amount.arr, db_Auth_Tx_TLFstip.product3_amount.len);
   memcpy(tlf01_ptr->product_codes[3].code, db_Auth_Tx_TLFstip.product4_code.arr, db_Auth_Tx_TLFstip.product4_code.len);
   memcpy(tlf01_ptr->product_codes[3].quantity, db_Auth_Tx_TLFstip.product4_quantity.arr, db_Auth_Tx_TLFstip.product4_quantity.len);
   memcpy(tlf01_ptr->product_codes[3].amount, db_Auth_Tx_TLFstip.product4_amount.arr, db_Auth_Tx_TLFstip.product4_amount.len);
   memcpy(tlf01_ptr->product_codes[4].code, db_Auth_Tx_TLFstip.product5_code.arr, db_Auth_Tx_TLFstip.product5_code.len);
   memcpy(tlf01_ptr->product_codes[4].quantity, db_Auth_Tx_TLFstip.product5_quantity.arr, db_Auth_Tx_TLFstip.product5_quantity.len);
   memcpy(tlf01_ptr->product_codes[4].amount, db_Auth_Tx_TLFstip.product5_amount.arr, db_Auth_Tx_TLFstip.product5_amount.len);
   memcpy(tlf01_ptr->product_codes[5].code, db_Auth_Tx_TLFstip.product6_code.arr, db_Auth_Tx_TLFstip.product6_code.len);
   memcpy(tlf01_ptr->product_codes[5].quantity, db_Auth_Tx_TLFstip.product6_quantity.arr, db_Auth_Tx_TLFstip.product6_quantity.len);
   memcpy(tlf01_ptr->product_codes[5].amount, db_Auth_Tx_TLFstip.product6_amount.arr, db_Auth_Tx_TLFstip.product6_amount.len);
   memcpy(tlf01_ptr->product_codes[6].code, db_Auth_Tx_TLFstip.product7_code.arr, db_Auth_Tx_TLFstip.product7_code.len);
   memcpy(tlf01_ptr->product_codes[6].quantity, db_Auth_Tx_TLFstip.product7_quantity.arr, db_Auth_Tx_TLFstip.product7_quantity.len);
   memcpy(tlf01_ptr->product_codes[6].amount, db_Auth_Tx_TLFstip.product7_amount.arr, db_Auth_Tx_TLFstip.product7_amount.len);
   memcpy(tlf01_ptr->product_codes[7].code, db_Auth_Tx_TLFstip.product8_code.arr, db_Auth_Tx_TLFstip.product8_code.len);
   memcpy(tlf01_ptr->product_codes[7].quantity, db_Auth_Tx_TLFstip.product8_quantity.arr, db_Auth_Tx_TLFstip.product8_quantity.len);
   memcpy(tlf01_ptr->product_codes[7].amount, db_Auth_Tx_TLFstip.product8_amount.arr, db_Auth_Tx_TLFstip.product8_amount.len);
   memcpy(tlf01_ptr->product_codes[8].code, db_Auth_Tx_TLFstip.product9_code.arr, db_Auth_Tx_TLFstip.product9_code.len);
   memcpy(tlf01_ptr->product_codes[8].quantity, db_Auth_Tx_TLFstip.product9_quantity.arr, db_Auth_Tx_TLFstip.product9_quantity.len);
   memcpy(tlf01_ptr->product_codes[8].amount, db_Auth_Tx_TLFstip.product9_amount.arr, db_Auth_Tx_TLFstip.product9_amount.len);
   memcpy(tlf01_ptr->product_codes[9].code, db_Auth_Tx_TLFstip.product10_code.arr, db_Auth_Tx_TLFstip.product10_code.len);
   memcpy(tlf01_ptr->product_codes[9].quantity, db_Auth_Tx_TLFstip.product10_quantity.arr, db_Auth_Tx_TLFstip.product10_quantity.len);
   memcpy(tlf01_ptr->product_codes[9].amount, db_Auth_Tx_TLFstip.product10_amount.arr, db_Auth_Tx_TLFstip.product10_amount.len);
   memcpy(tlf01_ptr->product_codes[10].code, db_Auth_Tx_TLFstip.product11_code.arr, db_Auth_Tx_TLFstip.product11_code.len);
   memcpy(tlf01_ptr->product_codes[10].quantity, db_Auth_Tx_TLFstip.product11_quantity.arr, db_Auth_Tx_TLFstip.product11_quantity.len);
   memcpy(tlf01_ptr->product_codes[10].amount, db_Auth_Tx_TLFstip.product11_amount.arr, db_Auth_Tx_TLFstip.product11_amount.len);
   memcpy(tlf01_ptr->product_codes[11].code, db_Auth_Tx_TLFstip.product12_code.arr, db_Auth_Tx_TLFstip.product12_code.len);
   memcpy(tlf01_ptr->product_codes[11].quantity, db_Auth_Tx_TLFstip.product12_quantity.arr, db_Auth_Tx_TLFstip.product12_quantity.len);
   memcpy(tlf01_ptr->product_codes[11].amount, db_Auth_Tx_TLFstip.product12_amount.arr, db_Auth_Tx_TLFstip.product12_amount.len);
   memcpy(tlf01_ptr->product_codes[12].code, db_Auth_Tx_TLFstip.product13_code.arr, db_Auth_Tx_TLFstip.product13_code.len);
   memcpy(tlf01_ptr->product_codes[12].quantity, db_Auth_Tx_TLFstip.product13_quantity.arr, db_Auth_Tx_TLFstip.product13_quantity.len);
   memcpy(tlf01_ptr->product_codes[12].amount, db_Auth_Tx_TLFstip.product13_amount.arr, db_Auth_Tx_TLFstip.product13_amount.len);
   memcpy(tlf01_ptr->product_codes[13].code, db_Auth_Tx_TLFstip.product14_code.arr, db_Auth_Tx_TLFstip.product14_code.len);
   memcpy(tlf01_ptr->product_codes[13].quantity, db_Auth_Tx_TLFstip.product14_quantity.arr, db_Auth_Tx_TLFstip.product14_quantity.len);
   memcpy(tlf01_ptr->product_codes[13].amount, db_Auth_Tx_TLFstip.product14_amount.arr, db_Auth_Tx_TLFstip.product14_amount.len);
   memcpy(tlf01_ptr->product_codes[14].code, db_Auth_Tx_TLFstip.product15_code.arr, db_Auth_Tx_TLFstip.product15_code.len);
   memcpy(tlf01_ptr->product_codes[14].quantity, db_Auth_Tx_TLFstip.product15_quantity.arr, db_Auth_Tx_TLFstip.product15_quantity.len);
   memcpy(tlf01_ptr->product_codes[14].amount, db_Auth_Tx_TLFstip.product15_amount.arr, db_Auth_Tx_TLFstip.product15_amount.len);
   memcpy(tlf01_ptr->product_codes[15].code, db_Auth_Tx_TLFstip.product16_code.arr, db_Auth_Tx_TLFstip.product16_code.len);
   memcpy(tlf01_ptr->product_codes[15].quantity, db_Auth_Tx_TLFstip.product16_quantity.arr, db_Auth_Tx_TLFstip.product16_quantity.len);
   memcpy(tlf01_ptr->product_codes[15].amount, db_Auth_Tx_TLFstip.product16_amount.arr, db_Auth_Tx_TLFstip.product16_amount.len);
   memcpy(tlf01_ptr->product_codes[16].code, db_Auth_Tx_TLFstip.product17_code.arr, db_Auth_Tx_TLFstip.product17_code.len);
   memcpy(tlf01_ptr->product_codes[16].quantity, db_Auth_Tx_TLFstip.product17_quantity.arr, db_Auth_Tx_TLFstip.product17_quantity.len);
   memcpy(tlf01_ptr->product_codes[16].amount, db_Auth_Tx_TLFstip.product17_amount.arr, db_Auth_Tx_TLFstip.product17_amount.len);
   memcpy(tlf01_ptr->product_codes[17].code, db_Auth_Tx_TLFstip.product18_code.arr, db_Auth_Tx_TLFstip.product18_code.len);
   memcpy(tlf01_ptr->product_codes[17].quantity, db_Auth_Tx_TLFstip.product18_quantity.arr, db_Auth_Tx_TLFstip.product18_quantity.len);
   memcpy(tlf01_ptr->product_codes[17].amount, db_Auth_Tx_TLFstip.product18_amount.arr, db_Auth_Tx_TLFstip.product18_amount.len);
   memcpy(tlf01_ptr->product_codes[18].code, db_Auth_Tx_TLFstip.product19_code.arr, db_Auth_Tx_TLFstip.product19_code.len);
   memcpy(tlf01_ptr->product_codes[18].quantity, db_Auth_Tx_TLFstip.product19_quantity.arr, db_Auth_Tx_TLFstip.product19_quantity.len);
   memcpy(tlf01_ptr->product_codes[18].amount, db_Auth_Tx_TLFstip.product19_amount.arr, db_Auth_Tx_TLFstip.product19_amount.len);
   memcpy(tlf01_ptr->product_codes[19].code, db_Auth_Tx_TLFstip.product20_code.arr, db_Auth_Tx_TLFstip.product20_code.len);
   memcpy(tlf01_ptr->product_codes[19].quantity, db_Auth_Tx_TLFstip.product20_quantity.arr, db_Auth_Tx_TLFstip.product20_quantity.len);
   memcpy(tlf01_ptr->product_codes[19].amount, db_Auth_Tx_TLFstip.product20_amount.arr, db_Auth_Tx_TLFstip.product20_amount.len);
   memcpy(tlf01_ptr->visa_merchant_id, db_Auth_Tx_TLFstip.visa_merchant_id.arr, db_Auth_Tx_TLFstip.visa_merchant_id.len);
   
   memcpy(tlf01_ptr->cash_bonus, db_Auth_Tx_TLFstip.cash_bonus.arr, db_Auth_Tx_TLFstip.cash_bonus.len);
   memcpy(tlf01_ptr->deferred_factor, db_Auth_Tx_TLFstip.deferred_factor.arr, db_Auth_Tx_TLFstip.deferred_factor.len);
   memcpy(tlf01_ptr->deferred_term_length, db_Auth_Tx_TLFstip.deferred_term_length.arr, db_Auth_Tx_TLFstip.deferred_term_length.len);
   memcpy(tlf01_ptr->currency_code, db_Auth_Tx_TLFstip.currency_code.arr, db_Auth_Tx_TLFstip.currency_code.len);
   memcpy(tlf01_ptr->transmission_timestamp, db_Auth_Tx_TLFstip.transmission_timestamp.arr, db_Auth_Tx_TLFstip.transmission_timestamp.len);
   memcpy(tlf01_ptr->tran_fee_amount, db_Auth_Tx_TLFstip.tran_fee_amount.arr, db_Auth_Tx_TLFstip.tran_fee_amount.len);
   memcpy(tlf01_ptr->cvc_data, db_Auth_Tx_TLFstip.cvc_data.arr, db_Auth_Tx_TLFstip.cvc_data.len);

   memcpy(tlf01_ptr->verify_mag_stripe, db_Auth_Tx_TLFstip.verify_mag_stripe.arr, db_Auth_Tx_TLFstip.verify_mag_stripe.len);
   memcpy(tlf01_ptr->saf, db_Auth_Tx_TLFstip.saf.arr, db_Auth_Tx_TLFstip.saf.len);
   memcpy(tlf01_ptr->security_response_code, db_Auth_Tx_TLFstip.security_response_code.arr, db_Auth_Tx_TLFstip.security_response_code.len);
   memcpy(tlf01_ptr->service_code, db_Auth_Tx_TLFstip.service_code.arr, db_Auth_Tx_TLFstip.service_code.len);
   memcpy(tlf01_ptr->source_pin_format, db_Auth_Tx_TLFstip.source_pin_format.arr, db_Auth_Tx_TLFstip.source_pin_format.len);
   memcpy(tlf01_ptr->dest_pin_format, db_Auth_Tx_TLFstip.dest_pin_format.arr, db_Auth_Tx_TLFstip.dest_pin_format.len);
   memcpy(tlf01_ptr->voice_auth, db_Auth_Tx_TLFstip.voice_auth.arr, db_Auth_Tx_TLFstip.voice_auth.len);

   memcpy(tlf01_ptr->actual_amount, db_Auth_Tx_TLFstip.actual_amount.arr, db_Auth_Tx_TLFstip.actual_amount.len);
   memcpy(tlf01_ptr->reversal_amount, db_Auth_Tx_TLFstip.reversal_amount.arr, db_Auth_Tx_TLFstip.reversal_amount.len);
  
   memcpy(tlf01_ptr->voice_auth_text, db_Auth_Tx_TLFstip.voice_auth_text.arr, db_Auth_Tx_TLFstip.voice_auth_text.len);
   memcpy(tlf01_ptr->operator_id, db_Auth_Tx_TLFstip.operator_id.arr, db_Auth_Tx_TLFstip.operator_id.len);
   memcpy(tlf01_ptr->workstation, db_Auth_Tx_TLFstip.workstation.arr, db_Auth_Tx_TLFstip.workstation.len);
   memcpy(tlf01_ptr->orig_auth_number, db_Auth_Tx_TLFstip.orig_auth_number.arr, db_Auth_Tx_TLFstip.orig_auth_number.len);
   memcpy(tlf01_ptr->ticket_nbr, db_Auth_Tx_TLFstip.ticket_nbr.arr, db_Auth_Tx_TLFstip.ticket_nbr.len);
   memcpy(tlf01_ptr->system_date, db_Auth_Tx_TLFstip.system_date.arr, db_Auth_Tx_TLFstip.system_date.len);
   memcpy(tlf01_ptr->def_gross_amt, db_Auth_Tx_TLFstip.def_gross_amt.arr, db_Auth_Tx_TLFstip.def_gross_amt.len);
   memcpy(tlf01_ptr->monthly_amort_amt, db_Auth_Tx_TLFstip.monthly_amort_amt.arr, db_Auth_Tx_TLFstip.monthly_amort_amt.len);
}

/*************************************************************************************/

void Copy_to_Auth_Tx_TLF (pBCH10 bch10_ptr)
{
   memset(&Auth_Tx_BCH10, 0, sizeof(Auth_Tx_BCH10));
   strcpy(Auth_Tx_BCH10.TLF01_details.terminal_id ,bch10_ptr->primary_key.device_id);
   strcpy(Auth_Tx_BCH10.TLF01_details.batch_number,bch10_ptr->primary_key.batch_nbr);
   strcpy(Auth_Tx_BCH10.TLF01_details.retrieval_ref_num,bch10_ptr->primary_key.retrieval_ref_num);
   strcpy(Auth_Tx_BCH10.TLF01_details.merchant_id, bch10_ptr->merchant_id);
   strcpy(Auth_Tx_BCH10.TLF01_details.processing_code, bch10_ptr->processing_code);
   strcpy(Auth_Tx_BCH10.TLF01_details.total_amount,bch10_ptr->tran_amount);
   strcpy(Auth_Tx_BCH10.TLF01_details.response_code,bch10_ptr->response_code);
   strcpy(Auth_Tx_BCH10.TLF01_details.auth_number ,bch10_ptr->auth_number);
   strcpy(Auth_Tx_BCH10.TLF01_details.date_yyyymmdd,bch10_ptr->tran_date);
   strcpy(Auth_Tx_BCH10.TLF01_details.time_hhmmss,bch10_ptr->tran_time);
   strcpy(Auth_Tx_BCH10.TLF01_details.primary_key.transaction_id,bch10_ptr->transaction_id);
   strcpy(Auth_Tx_BCH10.TLF01_details.message_type,bch10_ptr->message_type);
   strcpy(Auth_Tx_BCH10.TLF01_details.card_num,bch10_ptr->card_nbr);
   strcpy(Auth_Tx_BCH10.TLF01_details.invoice_number, bch10_ptr->invoice_nbr);
   strcpy(Auth_Tx_BCH10.TLF01_details.settle_file_prefix,bch10_ptr->settle_file_prefix);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_code, bch10_ptr->product_code);
   strcpy(Auth_Tx_BCH10.TLF01_details.odometer, bch10_ptr->odometer);
   strcpy(Auth_Tx_BCH10.TLF01_details.sys_trace_audit_num,bch10_ptr->sys_trace_audit_num);
   //bch10_ptr->tx_key = db_bch10.tx_key.arr[0];
  // bch10_ptr->bin_type = db_bch10.bin_type.arr[0];
   Auth_Tx_BCH10.TLF01_details.tx_key = bch10_ptr->tx_key;
   //Auth_Tx_BCH10.TLF01_details.bin_type =bch10_ptr->bin_type;
   strcpy(Auth_Tx_BCH10.TLF01_details.type_of_data , bch10_ptr->type_of_data);
   strcpy(Auth_Tx_BCH10.TLF01_details.down_payment, bch10_ptr->down_payment);
   strcpy(Auth_Tx_BCH10.TLF01_details.period,bch10_ptr->period);
   strcpy(Auth_Tx_BCH10.TLF01_details.interest_rate,bch10_ptr->interest_rate);
   strcpy(Auth_Tx_BCH10.TLF01_details.total_interest ,bch10_ptr->total_interest);
   strcpy(Auth_Tx_BCH10.TLF01_details.redemption_amount,bch10_ptr->redemption_amount);
   strcpy(Auth_Tx_BCH10.TLF01_details.vehicle_number , bch10_ptr->vehicle_number);
   strcpy(Auth_Tx_BCH10.TLF01_details.pos_entry_mode,bch10_ptr->pos_entry_mode);
   strcpy(Auth_Tx_BCH10.TLF01_details.profile,bch10_ptr->profile);
   strcpy(Auth_Tx_BCH10.TLF01_details.nbr_of_prod_codes, bch10_ptr->nbr_of_prod_codes);  
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[0].code,  bch10_ptr->product_codes[0].code);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[0].quantity, bch10_ptr->product_codes[0].quantity);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[0].amount, bch10_ptr->product_codes[0].amount);   
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[1].code, bch10_ptr->product_codes[1].code);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[1].quantity, bch10_ptr->product_codes[1].quantity);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[1].amount,bch10_ptr->product_codes[1].amount);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[2].code, bch10_ptr->product_codes[2].code);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[2].quantity,bch10_ptr->product_codes[2].quantity);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[2].amount, bch10_ptr->product_codes[2].amount);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[3].code,bch10_ptr->product_codes[3].code);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[3].quantity, bch10_ptr->product_codes[3].quantity);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[3].amount,bch10_ptr->product_codes[3].amount);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[4].code, bch10_ptr->product_codes[4].code);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[4].quantity, bch10_ptr->product_codes[4].quantity);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[4].amount, bch10_ptr->product_codes[4].amount);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[5].code,bch10_ptr->product_codes[5].code);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[5].quantity, bch10_ptr->product_codes[5].quantity);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[5].amount,bch10_ptr->product_codes[5].amount);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[6].code,bch10_ptr->product_codes[6].code);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[6].quantity, bch10_ptr->product_codes[6].quantity);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[6].amount,bch10_ptr->product_codes[6].amount);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[7].code, bch10_ptr->product_codes[7].code);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[7].quantity, bch10_ptr->product_codes[7].quantity);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[7].amount,bch10_ptr->product_codes[7].amount);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[8].code,bch10_ptr->product_codes[8].code);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[8].quantity, bch10_ptr->product_codes[8].quantity);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[8].amount,bch10_ptr->product_codes[8].amount);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[9].code, bch10_ptr->product_codes[9].code);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[9].quantity,bch10_ptr->product_codes[9].quantity);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[9].amount, bch10_ptr->product_codes[9].amount);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[10].code, bch10_ptr->product_codes[10].code);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[10].quantity,bch10_ptr->product_codes[10].quantity);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[10].amount,bch10_ptr->product_codes[10].amount);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[11].code,bch10_ptr->product_codes[11].code);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[11].quantity,bch10_ptr->product_codes[11].quantity);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[11].amount,bch10_ptr->product_codes[11].amount);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[12].code,bch10_ptr->product_codes[12].code);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[12].quantity,bch10_ptr->product_codes[12].quantity);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[12].amount, bch10_ptr->product_codes[12].amount);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[13].code,bch10_ptr->product_codes[13].code);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[13].quantity,bch10_ptr->product_codes[13].quantity);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[13].amount, bch10_ptr->product_codes[13].amount);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[14].code,bch10_ptr->product_codes[14].code);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[14].quantity,bch10_ptr->product_codes[14].quantity);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[14].amount, bch10_ptr->product_codes[14].amount);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[15].code,bch10_ptr->product_codes[15].code);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[15].quantity,bch10_ptr->product_codes[15].quantity);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[15].amount, bch10_ptr->product_codes[15].amount);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[16].code,bch10_ptr->product_codes[16].code);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[16].quantity,bch10_ptr->product_codes[16].quantity);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[16].amount, bch10_ptr->product_codes[16].amount);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[17].code,bch10_ptr->product_codes[17].code);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[17].quantity,bch10_ptr->product_codes[17].quantity);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[17].amount, bch10_ptr->product_codes[17].amount);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[18].code,bch10_ptr->product_codes[18].code);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[18].quantity,bch10_ptr->product_codes[18].quantity);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[18].amount, bch10_ptr->product_codes[18].amount);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[19].code,bch10_ptr->product_codes[19].code);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[19].quantity,bch10_ptr->product_codes[19].quantity);
   strcpy(Auth_Tx_BCH10.TLF01_details.product_codes[19].amount, bch10_ptr->product_codes[19].amount);
   strcpy(bch10_ptr->aportionment_flag, db_bch10.aportionment_flag.arr);
   //strcpy(bch10_ptr->exp_date, db_bch10.exp_date.arr);
   //strcpy(bch10_ptr->open_date, db_bch10.open_date.arr);
   //strcpy(bch10_ptr->open_time, db_bch10.open_time.arr);
   //strcpy(bch10_ptr->cash_bonus, db_bch10.cash_bonus.arr);
   strcpy(Auth_Tx_BCH10.TLF01_details.transmission_timestamp,bch10_ptr->transmission_timestamp);
   strcpy(Auth_Tx_BCH10.TLF01_details.mcard_banknet,bch10_ptr->mcard_banknet);
   strcpy(Auth_Tx_BCH10.TLF01_details.ticket_nbr, bch10_ptr->ticket_nbr);
   strncpy(Auth_Tx_BCH10.TLF01_details.deferred_factor,bch10_ptr->product_codes[16].amount,7);
   strncpy(Auth_Tx_BCH10.TLF01_details.def_gross_amt, bch10_ptr->def_gross_amt,12);
   strncpy(Auth_Tx_BCH10.TLF01_details.monthly_amort_amt,bch10_ptr->product_codes[15].amount,12);
   strncpy(Auth_Tx_BCH10.TLF01_details.deferred_term_length,bch10_ptr->term,2);
 }



/**************************************************************************************/

/*************************************************************************************/
void bch10_to_db( pBCH10 bch10_ptr )
{
  memcpy (&pte_bch10, bch10_ptr, sizeof(pte_bch10));
}
/*************************************************************************************/

/******************************************************************************
 *
 *  NAME:         db_to_ncf01
 *
 *  DESCRIPTION:  This function copies an NCF01 record from db_ncf01 into
 *                ncf01_ptr.
 *
 *  INPUTS:       None
 *
 *  OUTPUTS:      ncf01_ptr - NCF01 structure
 *
 *  RTRN VALUE:   None
 *
 *  AUTHOR:       Unknown
 *
 *  MODIFICATIONS:
 *      Ravikumar Nageshaiah, Rel 08-16 ThoughtFocus Technologies for standin processing 
 *		Changes
 ******************************************************************************/
void db_to_ncf01 ( pNCF01 ncf01_ptr )
{
   memset( ncf01_ptr, 0, sizeof(NCF01) );
   memcpy( ncf01_ptr->primary_key.network_id, db_ncf01.network_id.arr, db_ncf01.network_id.len );
   memcpy( ncf01_ptr->primary_key.network_type, db_ncf01.network_type.arr, db_ncf01.network_type.len);

   memcpy(ncf01_ptr->name, db_ncf01.name.arr, db_ncf01.name.len);
   memcpy(ncf01_ptr->status, db_ncf01.status.arr, db_ncf01.status.len);
   memcpy(ncf01_ptr->totals_ind, db_ncf01.totals_ind.arr, db_ncf01.totals_ind.len);
   memcpy(ncf01_ptr->statistics_ind, db_ncf01.statistics_ind.arr, db_ncf01.statistics_ind.len);
   memcpy(ncf01_ptr->acquirer_inst_id_code, db_ncf01.acquirer_inst_id_code.arr, db_ncf01.acquirer_inst_id_code.len);
   memcpy(ncf01_ptr->forwarding_inst_id_code, db_ncf01.forwarding_inst_id_code.arr, db_ncf01.forwarding_inst_id_code.len);
   memcpy(ncf01_ptr->receiving_inst_id_code, db_ncf01.receiving_inst_id_code.arr, db_ncf01.receiving_inst_id_code.len);
   memcpy(ncf01_ptr->remote_nsp_type, db_ncf01.remote_nsp_type.arr, db_ncf01.remote_nsp_type.len);
   memcpy(ncf01_ptr->pin_type, db_ncf01.pin_type.arr, db_ncf01.pin_type.len);
   memcpy(ncf01_ptr->encr_type, db_ncf01.encr_type.arr, db_ncf01.encr_type.len);
   memcpy(ncf01_ptr->pad_char, db_ncf01.pad_char.arr, db_ncf01.pad_char.len);
   memcpy(ncf01_ptr->cwk, db_ncf01.cwk.arr, db_ncf01.cwk.len);
   memcpy(ncf01_ptr->kek, db_ncf01.kek.arr, db_ncf01.kek.len);
   memcpy(ncf01_ptr->retired_cwk, db_ncf01.retired_cwk.arr, db_ncf01.retired_cwk.len);
   memcpy(ncf01_ptr->auto_logon, db_ncf01.auto_logon.arr, db_ncf01.auto_logon.len);
   memcpy(ncf01_ptr->echo_interval, db_ncf01.echo_interval.arr, db_ncf01.echo_interval.len);
   memcpy(ncf01_ptr->max_consecutive_timeouts, db_ncf01.max_consecutive_timeouts.arr, db_ncf01.max_consecutive_timeouts.len);
   memcpy(ncf01_ptr->max_active_txns, db_ncf01.max_active_txns.arr, db_ncf01.max_active_txns.len);
   memcpy(ncf01_ptr->que_name, db_ncf01.que_name.arr, db_ncf01.que_name.len);
  
   memcpy(ncf01_ptr->local_nsp_type, db_ncf01.local_nsp_type.arr, db_ncf01.local_nsp_type.len);
   memcpy(ncf01_ptr->request_timer, db_ncf01.request_timer.arr, db_ncf01.request_timer.len);
   memcpy(ncf01_ptr->idle_line_timer, db_ncf01.idle_line_timer.arr, db_ncf01.idle_line_timer.len);
   memcpy(ncf01_ptr->advice_repeat_counter, db_ncf01.advice_repeat_counter.arr, db_ncf01.advice_repeat_counter.len);
   memcpy(ncf01_ptr->admin_message_timer, db_ncf01.admin_message_timer.arr, db_ncf01.admin_message_timer.len);
   memcpy(ncf01_ptr->store_forward_processing, db_ncf01.store_forward_processing.arr, db_ncf01.store_forward_processing.len);
   memcpy(ncf01_ptr->currency_code_purchase, db_ncf01.currency_code_purchase.arr, db_ncf01.currency_code_purchase.len);
   memcpy(ncf01_ptr->currency_code_cash, db_ncf01.currency_code_cash.arr, db_ncf01.currency_code_cash.len);
   memcpy(ncf01_ptr->country_code, db_ncf01.country_code.arr, db_ncf01.country_code.len);
  
   memcpy(ncf01_ptr->station_id1, db_ncf01.station_id1.arr, db_ncf01.station_id1.len);
   memcpy(ncf01_ptr->station_id2, db_ncf01.station_id2.arr, db_ncf01.station_id2.len);
   memcpy(ncf01_ptr->prev_src_station, db_ncf01.prev_src_station.arr, db_ncf01.prev_src_station.len);
   memcpy(ncf01_ptr->tpdu_id, db_ncf01.tpdu_id.arr, db_ncf01.tpdu_id.len);
   memcpy(ncf01_ptr->logon_bin[0].identifier, db_ncf01.identifier1.arr,  db_ncf01.identifier1.len);
   memcpy(ncf01_ptr->logon_bin[1].identifier, db_ncf01.identifier2.arr,  db_ncf01.identifier2.len);
   memcpy(ncf01_ptr->logon_bin[2].identifier, db_ncf01.identifier3.arr,  db_ncf01.identifier3.len);
   memcpy(ncf01_ptr->logon_bin[3].identifier, db_ncf01.identifier4.arr,  db_ncf01.identifier4.len);
   memcpy(ncf01_ptr->logon_bin[4].identifier, db_ncf01.identifier5.arr,  db_ncf01.identifier5.len);
   memcpy(ncf01_ptr->logon_bin[5].identifier, db_ncf01.identifier6.arr,  db_ncf01.identifier6.len);
   memcpy(ncf01_ptr->logon_bin[6].identifier, db_ncf01.identifier7.arr,  db_ncf01.identifier7.len);
   memcpy(ncf01_ptr->logon_bin[7].identifier, db_ncf01.identifier8.arr,  db_ncf01.identifier8.len);
   memcpy(ncf01_ptr->logon_bin[8].identifier, db_ncf01.identifier9.arr,  db_ncf01.identifier9.len);
   memcpy(ncf01_ptr->logon_bin[9].identifier, db_ncf01.identifier10.arr, db_ncf01.identifier10.len);
   memcpy(ncf01_ptr->allowed[0].processing_code,  db_ncf01.processing_code1.arr,  db_ncf01.processing_code1.len);
   memcpy(ncf01_ptr->allowed[1].processing_code,  db_ncf01.processing_code2.arr,  db_ncf01.processing_code2.len);
   memcpy(ncf01_ptr->allowed[2].processing_code,  db_ncf01.processing_code3.arr,  db_ncf01.processing_code3.len);
   memcpy(ncf01_ptr->allowed[3].processing_code,  db_ncf01.processing_code4.arr,  db_ncf01.processing_code4.len);
   memcpy(ncf01_ptr->allowed[4].processing_code,  db_ncf01.processing_code5.arr,  db_ncf01.processing_code5.len);
   memcpy(ncf01_ptr->allowed[5].processing_code,  db_ncf01.processing_code6.arr,  db_ncf01.processing_code6.len);
   memcpy(ncf01_ptr->allowed[6].processing_code,  db_ncf01.processing_code7.arr,  db_ncf01.processing_code7.len);
   memcpy(ncf01_ptr->allowed[7].processing_code,  db_ncf01.processing_code8.arr,  db_ncf01.processing_code8.len);
   memcpy(ncf01_ptr->allowed[8].processing_code,  db_ncf01.processing_code9.arr,  db_ncf01.processing_code9.len);
   memcpy(ncf01_ptr->allowed[9].processing_code,  db_ncf01.processing_code10.arr, db_ncf01.processing_code10.len);
   memcpy(ncf01_ptr->allowed[10].processing_code, db_ncf01.processing_code11.arr, db_ncf01.processing_code11.len);
   memcpy(ncf01_ptr->allowed[11].processing_code, db_ncf01.processing_code12.arr, db_ncf01.processing_code12.len);
   memcpy(ncf01_ptr->allowed[12].processing_code, db_ncf01.processing_code13.arr, db_ncf01.processing_code13.len);
   memcpy(ncf01_ptr->allowed[13].processing_code, db_ncf01.processing_code14.arr, db_ncf01.processing_code14.len);
   memcpy(ncf01_ptr->allowed[14].processing_code, db_ncf01.processing_code15.arr, db_ncf01.processing_code15.len);
   memcpy(ncf01_ptr->allowed[15].processing_code, db_ncf01.processing_code16.arr, db_ncf01.processing_code16.len);
   memcpy(ncf01_ptr->allowed[16].processing_code, db_ncf01.processing_code17.arr, db_ncf01.processing_code17.len);
   memcpy(ncf01_ptr->allowed[17].processing_code, db_ncf01.processing_code18.arr, db_ncf01.processing_code18.len);
   memcpy(ncf01_ptr->allowed[18].processing_code, db_ncf01.processing_code19.arr, db_ncf01.processing_code19.len);
   memcpy(ncf01_ptr->allowed[19].processing_code, db_ncf01.processing_code20.arr, db_ncf01.processing_code20.len);
   memcpy(ncf01_ptr->zmk,                         db_ncf01.zmk.arr,               db_ncf01.zmk.len);
   memcpy(ncf01_ptr->neg_access_code,             db_ncf01.neg_access_code.arr,   db_ncf01.neg_access_code.len);
   
}


/******************************************************************************
 *
 *  NAME:         GET_DATE
 *
 *  DESCRIPTION:  This procedure takes an input string that contains a date and
 *                time.  It copies the date portion into an output string,
 *                formatted slightly different.
 *
 *  INPUTS:       time_date : Format = "YYYY-0M-0D-0H.0I.0S.JJJ"
 *
 *  OUTPUTS:      date_str  : Format = "YYYY0M0D"
 *
 *  RTRN VALUE:   None
 *
 *  AUTHOR:       Abhishek Verma
 *
 *  MODIFICATIONS:
 ******************************************************************************/
void get_date( pCHAR time_date, pCHAR date_str )
{
   memset ( date_str,  0x00,         9 );
   strncpy( date_str,  time_date,    4 );
   strncat( date_str, &time_date[5], 2 );
   strncat( date_str, &time_date[8], 2 );
}

/******************************************************************************
 *
 *  NAME:         GET_TIME
 *
 *  DESCRIPTION:  This procedure takes an input string that contains a date and
 *                time.  It copies the time portion into an output string,
 *                formatted slightly different.
 *
 *  INPUTS:       time_date : Format = "YYYY-0M-0D-0H.0I.0S.JJJ"
 *
 *  OUTPUTS:      time_str  : Format = "0H0I0S"
 *
 *  RTRN VALUE:   None
 *
 *  AUTHOR:       Abhishek Verma
 *
 *  MODIFICATIONS:
 ******************************************************************************/
void get_time( pCHAR time_date, pCHAR time_str )
{
   memset ( time_str,  0x00,          7 );
   strncpy( time_str, &time_date[11], 2 );
   strncat( time_str, &time_date[14], 2 );
   strncat( time_str, &time_date[17], 2 );
}

/******************************************************************************
 *
 *  NAME:         db_select_emvraw
 *
 *  DESCRIPTION:  This function makes the call to the database to select a
 *                record from EMV_RAW.
 *
 *  INPUTS:       emvraw_ptr - EMV_RAW structure
 *
 *  OUTPUTS:      ErrorMsg - Error message if database call failed.
 *
 *  RTRN VALUE:   A PTE code is returned:
 *                       PTEMSG_OK  if no errors else a code to identify
 *                       the reason for the failure.
 *
 ******************************************************************************/
BYTE db_select_emvraw( pCHAR     Primary_key, 
                       pEMV_RAW  emvraw_ptr, 
                       pCHAR     ErrorMsg )
{
   BYTE retval;

   memset( &db_emv_raw, 0x00, sizeof(db_emv_raw) );
   memset( &pte_tlf01_stip,   0x00, sizeof(pte_tlf01_stip ) );
   memcpy( pte_tlf01_stip.transaction_id, Primary_key, sizeof(pte_tlf01_stip.transaction_id));

	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}

   EXEC SQL SELECT *
            INTO  :db_emv_raw
            FROM   EMV_RAW
            WHERE  transaction_id = :pte_tlf01_stip.transaction_id;

	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : EMV_RAW ,Fun_Name : db_select_emvraw , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}
   if ( SQLCODE != 0 )
   {
      	memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_emvraw,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
     	memset( emvraw_ptr, 0x00, sizeof(EMV_RAW));
      	retval = PTEMSG_NOT_FOUND;
   }
   else
   {
      memcpy( emvraw_ptr->transaction_id, db_emv_raw.tran_id,           sizeof(db_emv_raw.tran_id)  );   
      memcpy( emvraw_ptr->DATA_LENGTH,    db_emv_raw.len,               sizeof(db_emv_raw.len)      );
      memcpy( emvraw_ptr->RAW_DATA,      &db_emv_raw.emvblock.emv_data, sizeof(emvraw_ptr->RAW_DATA));
      memcpy( emvraw_ptr->system_date,    db_emv_raw.sys_date,          sizeof(db_emv_raw.sys_date) );
      retval = PTEMSG_OK;
   }
   return( retval );   
}



/*************************************************************************************/
/*************************************************************************************/

BYTE db_get_tlf01_stip_standin_rec (CHAR aut_host_queue[],
                                    pTLF01         tlf01_ptr, 
                        			pCHAR          ErrorMsg )
{
  

   EXEC SQL BEGIN DECLARE SECTION;
        char response_code[3]="00";
		char reconciliation_code[3]="95";
		int  retval;
		char product2_code_sale[40]={0};
		char product2_code_void[40]={0};
		char product2_code_reversal[40]={0};
		char auth_host_queue[40];
		char date_yyyymmdd[9];
		INT dateFlag = 0;
   EXEC SQL END DECLARE SECTION;

   memset( &db_tlf01_stip, 0, sizeof( db_tlf01_stip ) );
   
   
   strcpy( product2_code_sale, "stndin");
   strcpy( product2_code_void, "voided");
   strcpy( product2_code_reversal, "revers");
   strcpy(auth_host_queue,aut_host_queue);
   if(strlen(TxnDate) > 0)
   {
	  	strcpy(date_yyyymmdd,TxnDate);
		dateFlag =1;
   }

	if((0 == strncmp(auth_host_queue,"nciftr",6)))
	{
		/*For MP/PL we have to even pull out settlement with response code 95*/
		if(dateFlag == 1)
		{  /* Force usage of the card number index. */
		
			if ( db_error_statics_flag == true )
			{
				start_time = ptetime_get_time();
			}
			EXEC SQL SELECT *
			INTO :db_tlf01_stip
			FROM ( select * from tlf01_stip
			WHERE (product2_code = :product2_code_sale OR product2_code = :product2_code_void OR product2_code = :product2_code_reversal)
			AND (response_code = :response_code OR response_code = :reconciliation_code)
			AND (authorizing_host_queue = :auth_host_queue  OR acquirer_id = :auth_host_queue)
			AND date_yyyymmdd = :date_yyyymmdd
			order by transaction_id) WHERE rownum = 1;
			
			if ( db_error_statics_flag == true )
			{
				end_time = ptetime_get_time();
				duration = end_time - start_time;
				if(duration >= db_error_statics_value)
				{
					memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
					sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_get_tlf01_stip_standin_rec_s1 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
					Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
				}
			}
		}
		else
		{
			if ( db_error_statics_flag == true )
			{
				start_time = ptetime_get_time();
			}
			EXEC SQL SELECT *
			INTO :db_tlf01_stip
			FROM ( select * from tlf01_stip
			WHERE (product2_code = :product2_code_sale OR product2_code = :product2_code_void OR product2_code = :product2_code_reversal)
			AND (response_code = :response_code OR response_code = :reconciliation_code)
			AND (authorizing_host_queue = :auth_host_queue  OR acquirer_id = :auth_host_queue)
			order by transaction_id)  WHERE rownum = 1;
			
			if ( db_error_statics_flag == true )
			{
				end_time = ptetime_get_time();
				duration = end_time - start_time;
				if(duration >= db_error_statics_value)
				{
					memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
					sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_get_tlf01_stip_standin_rec_s2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
					Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
				}
			}
		}
	}
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_tlf01_stip_standin_rec,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}	
   
   db_to_tlf01_stip (tlf01_ptr);

   return PTEMSG_OK;
}

/*******************************************************************************/


/*******************************************************************************/



/******************************************************************************
 *
 *  NAME:         db_select_ncf01
 *
 *  DESCRIPTION:  This function makes the call to the database to select a
 *                record from NCF01 based on a key value.  The record is
 *                selected into db_ncf01, then copied into ncf01_ptr for
 *                the calling function.
 *
 *  INPUTS:       key - Network Id and Network Type
 *
 *  OUTPUTS:      ncf01_ptr - NCF01 structure containing the selected record
 *                ErrorMsg  - Error message if database call failed.
 *
 *  RTRN VALUE:   A PTE code is returned:
 *                       PTEMSG_OK  if no errors else a code to identify
 *                       the reason for the failure.
 *
 *  AUTHOR:       Unknown
 *
 *  MODIFICATIONS:
 *     Ravikumar Nageshaiah, Rel 08-16 ThoughtFocus Technologies for standin processing 
 *		Changes
 ******************************************************************************/
BYTE db_select_ncf01 (  pCHAR         key, 
                        pNCF01        ncf01_ptr,
                        pCHAR         ErrorMsg )
{
   memset( &db_ncf01, 0, sizeof( db_ncf01 ) );

   strcpy( pte_ncf01.network_id, key);
   strcpy(pte_ncf01.network_type,"I");

	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}

   EXEC SQL SELECT network_id, network_type, name, status, totals_ind,
               statistics_ind, acquirer_inst_id_code, forwarding_inst_id_code, 
               receiving_inst_id_code, 
               remote_nsp_type, pin_type, encr_type, pad_char, cwk, kek, 
               retired_cwk, auto_logon, echo_interval, max_consecutive_timeouts,
               max_active_txns,que_name, local_nsp_type, request_timer,
               idle_line_timer, advice_repeat_counter, admin_message_timer,
               store_forward_processing, currency_code_purchase,
               currency_code_cash, country_code, station_id1 ,station_id2,
               prev_src_station,tpdu_id, identifier1 ,identifier2, identifier3,
               identifier4, identifier5 ,identifier6, identifier7, identifier8,
               identifier9 ,identifier10,processing_code1, processing_code2,
               processing_code3,  processing_code4,  processing_code5,
               processing_code6,  processing_code7,  processing_code8,
               processing_code9,  processing_code10, processing_code11,
               processing_code12, processing_code13, processing_code14,
               processing_code15, processing_code16,processing_code17,
               processing_code18, processing_code19, processing_code20, zmk,
               neg_access_code 
   INTO :db_ncf01
   FROM ncf01
   WHERE network_id   = :pte_ncf01.network_id and
   network_type = :pte_ncf01.network_type ;
      
	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : NCF01 ,Fun_Name : db_select_ncf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}   
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_ncf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_ncf01 (ncf01_ptr);

   return PTEMSG_OK;

}

/* TF AJAY added to update BCH10 flag*/
/*************************************************************************************/
BYTE db_update_bch10_stip( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   tlf01_stip_to_db( tlf01_ptr );

	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
   EXEC SQL UPDATE bch10
   SET  product2_code	= :pte_tlf01_stip.product2_code 
    WHERE device_id 		  = :pte_tlf01_stip.terminal_id         AND 
    	  sys_trace_audit_num = :pte_tlf01_stip.sys_trace_audit_num AND 
	   	  batch_nbr 		  = 'ACTIVE' ; 
             
   	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : BCH10 ,Fun_Name : db_update_bch10_stip , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}     
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_ncf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   EXEC SQL COMMIT WORK;	
   return PTEMSG_OK;
}

/* TF- Ajay update BCH20 for STIP txn */
BYTE db_update_bch20_stip( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   tlf01_stip_to_db( tlf01_ptr );

	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
   EXEC SQL UPDATE bch20
   SET  product2_code	= :pte_tlf01_stip.product2_code 
    WHERE device_id           = :pte_tlf01_stip.terminal_id         AND 
    	  merchant_id 	      = :pte_tlf01_stip.merchant_id 		AND
          sys_trace_audit_num = :pte_tlf01_stip.sys_trace_audit_num AND 
	      batch_nbr = 'ACTIVE' ; 
   
   	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : BCH20 ,Fun_Name : db_update_bch20_stip , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}   
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_bch20_stip,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
	
   EXEC SQL COMMIT WORK;	
   return PTEMSG_OK;
}
 /* TF AJAY added to update NCF30 flag*/
/*************************************************************************************/
BYTE db_update_ncf30_stip( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   tlf01_stip_to_db( tlf01_ptr );

	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}

   EXEC SQL UPDATE ncf30 
   SET  invoice_nbr	= :pte_tlf01_stip.product2_code 
    WHERE device_id = :pte_tlf01_stip.terminal_id 
       AND sys_trace_audit_nbr = :pte_tlf01_stip.sys_trace_audit_num AND 
	   batch_number = 'ACTIVE';  
       
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : NCF30 ,Fun_Name : db_update_ncf30_stip , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}     
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_ncf30_stip,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   EXEC SQL COMMIT WORK;	
   return PTEMSG_OK;
}
 
/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_tlf01_stip( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
   INT  retval;
   CHAR  date_str [ 9] = {0};
   CHAR  time_str [ 7] = {0};
   CHAR  time_date[25] = {0};
   CHAR  local_key[17] = {0};

   tlf01_stip_to_db( tlf01_ptr );

	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}

   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_tlf01_stip
      FROM   tlf01_stip
      WHERE  transaction_id = :pte_tlf01_stip.transaction_id
      For Update NOWAIT;

    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	} 
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {   
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_tlf01_stip,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   
   // Lets prepare time stamp details at which we have received response.
   ptetime_get_timestamp( time_date );
   get_date( time_date, date_str );
   get_time( time_date, time_str );

   /* Store MMDDhhmms format for ATP Advice timestamp MMDDHHMMSS format */
   /* Store MMDD in transmission_timestamp */
   memcpy( local_key, date_str + 4, 4);
   memcpy( local_key + 4, time_str, 6);
   memcpy(pte_tlf01_stip.kek,local_key,10);

	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
   EXEC SQL UPDATE tlf01_stip
   SET   response_text                      = :pte_tlf01_stip.response_text,
         sys_trace_audit_num                = :pte_tlf01_stip.sys_trace_audit_num,
         retrieval_ref_num                  = :pte_tlf01_stip.retrieval_ref_num,
         orig_retrieval_ref_num             = :pte_tlf01_stip.orig_retrieval_ref_num,
         message_type                       = :pte_tlf01_stip.message_type,
		 orig_message						= :pte_tlf01_stip.orig_message,
         general_status                     = :pte_tlf01_stip.general_status,
         originator_queue                   = :pte_tlf01_stip.originator_queue,
         response_code                      = :pte_tlf01_stip.response_code,
		 product2_code						= :pte_tlf01_stip.product2_code,
		 kek                                = :pte_tlf01_stip.kek             
    WHERE transaction_id = :pte_tlf01_stip.transaction_id;
    
    
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	} 
       
   if ( SQLCODE != 0 )
   {   
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_tlf01_stip,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   EXEC SQL COMMIT WORK;	
   return PTEMSG_OK;
}
/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_tlf01_stip_500_success( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
  
  EXEC SQL BEGIN DECLARE SECTION;
	 INT  retval;
	 char product2_code_sale[40]={0};
	 char product2_code_void[40]={0};
	 char product2_code_reversal[40]={0};
	 CHAR  date_str [ 9] = {0};
     CHAR  time_str [ 7] = {0};
     CHAR  time_date[25] = {0};
   	 CHAR  local_key[17] = {0};
   EXEC SQL END DECLARE SECTION;  

   strcpy( product2_code_sale, "stndin");
   strcpy( product2_code_void, "voided");
   strcpy( product2_code_reversal, "revers");
   tlf01_stip_to_db( tlf01_ptr );
   
   // Lets prepare time stamp details at which we have received response.
   ptetime_get_timestamp( time_date );
   get_date( time_date, date_str );
   get_time( time_date, time_str );

   /* Store MMDDhhmms format for ATP Advice timestamp MMDDHHMMSS format */
   /* Store MMDD in transmission_timestamp */
   memcpy( local_key, date_str + 4, 4);
   memcpy( local_key + 4, time_str, 6);
   memcpy(pte_tlf01_stip.kek,local_key,10);
   
   	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
   EXEC SQL UPDATE tlf01_stip
   SET   response_text                      = :pte_tlf01_stip.response_text,
         sys_trace_audit_num                = :pte_tlf01_stip.sys_trace_audit_num,
         retrieval_ref_num                  = :pte_tlf01_stip.retrieval_ref_num,
         orig_retrieval_ref_num             = :pte_tlf01_stip.orig_retrieval_ref_num,
         message_type                       = :pte_tlf01_stip.message_type,
		 orig_message						= :pte_tlf01_stip.orig_message,
         general_status                     = :pte_tlf01_stip.general_status,
         originator_queue                   = :pte_tlf01_stip.originator_queue,
         response_code                      = :pte_tlf01_stip.response_code,
		 product2_code						= :pte_tlf01_stip.product2_code,
		 kek                                = :pte_tlf01_stip.kek             
    WHERE transaction_id = :pte_tlf01_stip.transaction_id;
    
        if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_500_success_U1 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}
       
   if ( SQLCODE != 0 )
   {   
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_tlf01_stip_500_success,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   
   EXEC SQL COMMIT WORK;

   
   // Let us update all record for this batch as processed message which we may have received from POS.
   
   	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
   EXEC SQL UPDATE tlf01_stip
   SET product2_code = 'procsd'
   where acquirer_id  = 'nciftr' and
   		 terminal_id  = :pte_tlf01_stip.terminal_id and
   		 merchant_id  = :pte_tlf01_stip.merchant_id and
   		 batch_number = :pte_tlf01_stip.batch_number;
   		 
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_500_success_U2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}		 
      
   EXEC SQL COMMIT WORK;	
   return PTEMSG_OK;
}
/*************************************************************************************/

/*************************************************************************************/
BYTE db_update_tlf01_stip_500_after_RC_95( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
  
  EXEC SQL BEGIN DECLARE SECTION;
	 INT  retval;
	 char temp_message_type[5]="0500";
   	 char temp_response_code[3]="95";
   	 INT  duplicate_count = 0;
   	 CHAR  date_str [ 9] = {0};
     CHAR  time_str [ 7] = {0};
     CHAR  time_date[25] = {0};
     CHAR  local_key[17] = {0};
   EXEC SQL END DECLARE SECTION;  
  
   tlf01_stip_to_db( tlf01_ptr );
   
   // Lets prepare time stamp details at which we have received response.
   ptetime_get_timestamp( time_date );
   get_date( time_date, date_str );
   get_time( time_date, time_str );

   /* Store MMDDhhmms format for ATP Advice timestamp MMDDHHMMSS format */
   /* Store MMDD in transmission_timestamp */
   memcpy( local_key, date_str + 4, 4);
   memcpy( local_key + 4, time_str, 6);
   memcpy(pte_tlf01_stip.kek,local_key,10);
   
   	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
   EXEC SQL UPDATE tlf01_stip
   SET   response_text                      = :pte_tlf01_stip.response_text,
         sys_trace_audit_num                = :pte_tlf01_stip.sys_trace_audit_num,
         retrieval_ref_num                  = :pte_tlf01_stip.retrieval_ref_num,
         orig_retrieval_ref_num             = :pte_tlf01_stip.orig_retrieval_ref_num,
         message_type                       = :pte_tlf01_stip.message_type,
		 orig_message						= :pte_tlf01_stip.orig_message,
         general_status                     = :pte_tlf01_stip.general_status,
         originator_queue                   = :pte_tlf01_stip.originator_queue,
         response_code                      = :pte_tlf01_stip.response_code,
		 product2_code						= :pte_tlf01_stip.product2_code,
		 kek                                = :pte_tlf01_stip.kek             
    WHERE transaction_id = :pte_tlf01_stip.transaction_id;
   
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_500_after_RC_95_U1 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}    
   if ( SQLCODE != 0 )
   {   
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_tlf01_stip_500_after_RC_95_U1,ST1:%d,ST2:%d _1 ",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
     
   EXEC SQL COMMIT WORK;
      
   // Let us update all duplicate 500 message  with RC = 95 which we may have received from POS.
   
   	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
     EXEC SQL  SELECT COUNT(*) 
     	  INTO duplicate_count
	      FROM  tlf01_stip
   	where product2_code = 'stndin' and
   		 acquirer_id = 'nciftr' and
   				message_type  = :temp_message_type and
   		 		response_code = :temp_response_code and
   		 		terminal_id   = :pte_tlf01_stip.terminal_id and
   		 		merchant_id   = :pte_tlf01_stip.merchant_id and
   		 		batch_number  = :pte_tlf01_stip.batch_number
	      For Update NOWAIT;
	      
	 if ( db_error_statics_flag == true )
	 {
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_500_after_RC_95_C , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	 } 
	   if (duplicate_count == 0 )
	   {
	        /* There is no duplicate 0500 message with RC 95 for terminal */
	        return PTEMSG_OK; 
	   }
	   
   	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}	   
   EXEC SQL UPDATE tlf01_stip
   SET product2_code = 'procsd'
   where product2_code = 'stndin' and
   		 acquirer_id   = 'nciftr' and
   		 message_type  = :temp_message_type and
   		 response_code = :temp_response_code and
   		 terminal_id  = :pte_tlf01_stip.terminal_id and
   		 merchant_id = :pte_tlf01_stip.merchant_id and
   		 batch_number = :pte_tlf01_stip.batch_number;
   		 
   	 if ( db_error_statics_flag == true )
	 {
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_500_after_RC_95_U2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	 }		 
    
   if ( SQLCODE != 0 )
   {   
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_tlf01_stip_500_after_RC_95_U2,ST1:%d,ST2:%d_2 ",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
     
   EXEC SQL COMMIT WORK;	
   return PTEMSG_OK;
}
/*************************************************************************************/


/*************************************************************************************/
BYTE db_update_tlf01_stip_320_found( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
  
  EXEC SQL BEGIN DECLARE SECTION;
	 INT  retval;
   	 char temp_message_type[5]="0500";
   	 char temp_response_code[3]="95";
   	 INT  duplicate_count = 0;
   	 CHAR  date_str [ 9] = {0};
   	 CHAR  time_str [ 7] = {0};
   	 CHAR  time_date[25] = {0};
   	 CHAR  local_key[17] = {0};
   EXEC SQL END DECLARE SECTION;  

   tlf01_stip_to_db( tlf01_ptr );
   
   // Lets prepare time stamp details at which we have received response.
   ptetime_get_timestamp( time_date );
   get_date( time_date, date_str );
   get_time( time_date, time_str );

   /* Store MMDDhhmms format for ATP Advice timestamp MMDDHHMMSS format */
   /* Store MMDD in transmission_timestamp */
   memcpy( local_key, date_str + 4, 4);
   memcpy( local_key + 4, time_str, 6);
   memcpy(pte_tlf01_stip.kek,local_key,10);
 
   	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	} 
   EXEC SQL UPDATE tlf01_stip
   SET   response_text                      = :pte_tlf01_stip.response_text,
         sys_trace_audit_num                = :pte_tlf01_stip.sys_trace_audit_num,
         retrieval_ref_num                  = :pte_tlf01_stip.retrieval_ref_num,
         orig_retrieval_ref_num             = :pte_tlf01_stip.orig_retrieval_ref_num,
         message_type                       = :pte_tlf01_stip.message_type,
		 orig_message						= :pte_tlf01_stip.orig_message,
         general_status                     = :pte_tlf01_stip.general_status,
         originator_queue                   = :pte_tlf01_stip.originator_queue,
         response_code                      = :pte_tlf01_stip.response_code,
		 product2_code						= :pte_tlf01_stip.product2_code,
		 kek                                = :pte_tlf01_stip.kek             
    WHERE transaction_id = :pte_tlf01_stip.transaction_id;
       
     if ( db_error_statics_flag == true )
	 {
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_320_found_U1 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	 }    
   if ( SQLCODE != 0 )
   {   
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_tlf01_stip_320_found,ST1:%d,ST2:%d_1 ",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
    
    EXEC SQL COMMIT WORK;
    
    // Let us update all duplicate 500 message  with RC = 95 which we may have received from POS.
    if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
     EXEC SQL  SELECT COUNT(*) 
     	  INTO duplicate_count
	      FROM  tlf01_stip
	      where product2_code = 'stndin' and
   		 		acquirer_id   = 'nciftr' and
   				message_type  = :temp_message_type and
   		 		response_code = :temp_response_code and
   		 		terminal_id   = :pte_tlf01_stip.terminal_id and
   		 		merchant_id   = :pte_tlf01_stip.merchant_id and
   		 		batch_number  = :pte_tlf01_stip.batch_number
	      For Update NOWAIT;
	   
	 if ( db_error_statics_flag == true )
	 {
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_320_found_C , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	 }  
	 if (duplicate_count == 0 )
	 {
	        /* There is no duplicate 0500 message with RC 95 for terminal */
	     return PTEMSG_OK; 
	 }
	   	   	
	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
   EXEC SQL UPDATE tlf01_stip
   SET product2_code = 'procsd'
   where product2_code = 'stndin' and
   		 acquirer_id = 'nciftr' and
   		 message_type = :temp_message_type and
   		 response_code= :temp_response_code and
   		 terminal_id  = :pte_tlf01_stip.terminal_id and
   		 merchant_id = :pte_tlf01_stip.merchant_id and
   		 batch_number = :pte_tlf01_stip.batch_number;
   
   	 if ( db_error_statics_flag == true )
	 {
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_320_found_U2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	 }  
	  if ( SQLCODE != 0 )
   {   
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_tlf01_stip_320_found,ST1:%d,ST2:%d_2 ",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
	   
   EXEC SQL COMMIT WORK;	
   return PTEMSG_OK;
}
/*************************************************************************************/

/*************************************************************************************/
BYTE db_update_tlf01_stip_320_not_found( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
	 INT  retval;
   	 char temp_product2_code[7]="batchE";
   	 char temp_message_type[5]="0500";
   	 char temp_response_code[3]="95";
   	 INT  duplicate_count = 0;
   	 CHAR  date_str [ 9] = {0};
     CHAR  time_str [ 7] = {0};
     CHAR  time_date[25] = {0};
     CHAR  local_key[17] = {0};
   EXEC SQL END DECLARE SECTION;  

   tlf01_stip_to_db( tlf01_ptr );
   
      
   // Lets prepare time stamp details at which we have received response.
   ptetime_get_timestamp( time_date );
   get_date( time_date, date_str );
   get_time( time_date, time_str );

   /* Store MMDDhhmms format for ATP Advice timestamp MMDDHHMMSS format */
   /* Store MMDD in transmission_timestamp */
   memcpy( local_key, date_str + 4, 4);
   memcpy( local_key + 4, time_str, 6);
   memcpy(pte_tlf01_stip.kek,local_key,10);

	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
    EXEC SQL UPDATE tlf01_stip
   SET   response_text                      = :pte_tlf01_stip.response_text,
         sys_trace_audit_num                = :pte_tlf01_stip.sys_trace_audit_num,
         retrieval_ref_num                  = :pte_tlf01_stip.retrieval_ref_num,
         orig_retrieval_ref_num             = :pte_tlf01_stip.orig_retrieval_ref_num,
         message_type                       = :pte_tlf01_stip.message_type,
		 orig_message						= :pte_tlf01_stip.orig_message,
         general_status                     = :pte_tlf01_stip.general_status,
         originator_queue                   = :pte_tlf01_stip.originator_queue,
         response_code                      = :pte_tlf01_stip.response_code,
		 product2_code						= :temp_product2_code,
		 kek                                = :pte_tlf01_stip.kek            
    WHERE transaction_id = :pte_tlf01_stip.transaction_id;
   
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_320_not_found_U1 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}  
	    
   if ( SQLCODE != 0 )
   {   
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_tlf01_stip_320_not_found,ST1:%d,ST2:%d_1 ",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
      
    EXEC SQL COMMIT WORK;
      // Let us update all duplicate 500 message  with RC = 95 which we may have received from POS.
      
  	 if ( db_error_statics_flag == true )
	 {
		start_time = ptetime_get_time();
	 }
     EXEC SQL  SELECT COUNT(*) 
     	  INTO duplicate_count
	      FROM  tlf01_stip
	      where product2_code = 'stndin' and
   		 		acquirer_id   = 'nciftr' and
   				message_type  = :temp_message_type and
   		 		response_code = :temp_response_code and
   		 		terminal_id   = :pte_tlf01_stip.terminal_id and
   		 		merchant_id   = :pte_tlf01_stip.merchant_id and
   		 		batch_number  = :pte_tlf01_stip.batch_number
	      For Update NOWAIT;
	   
	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_320_not_found_C , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}  
	   if (duplicate_count == 0)
	   {
	        /* There is no duplicate 0500 message with RC = 95 for terminal */
	        return PTEMSG_OK; 
	   }
	  
	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}	   
   EXEC SQL UPDATE tlf01_stip
   SET product2_code = 'procsd'
   where product2_code = 'stndin' and
   		 acquirer_id   = 'nciftr' and
   		 message_type  = :temp_message_type and
   		 response_code = :temp_response_code and
   		 terminal_id   = :pte_tlf01_stip.terminal_id and
   		 merchant_id   = :pte_tlf01_stip.merchant_id and
   		 batch_number  = :pte_tlf01_stip.batch_number;
   
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_320_not_found_U2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}		 
	
   if ( SQLCODE != 0 )
   {   
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_tlf01_stip_320_not_found,ST1:%d,ST2:%d_2 ",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   
   EXEC SQL COMMIT WORK;	
   return PTEMSG_OK;
}

/*************************************************************************************/

/*************************************************************************************/
BYTE db_update_tlf01_stip_settle_batch_error( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
	 INT  retval;
   	 char temp_product2_code[7]="batcSE";
   	 INT  duplicate_count = 0;
   	 char temp_message_type[5]="0500";
   	 char temp_response_code[3]="95";
   	 CHAR  date_str [ 9] = {0};
     CHAR  time_str [ 7] = {0};
     CHAR  time_date[25] = {0};
   	 CHAR  local_key[17] = {0};
   EXEC SQL END DECLARE SECTION;  

   tlf01_stip_to_db( tlf01_ptr );
   
   // Lets prepare time stamp details at which we have received response.
   ptetime_get_timestamp( time_date );
   get_date( time_date, date_str );
   get_time( time_date, time_str );

   /* Store MMDDhhmms format for ATP Advice timestamp MMDDHHMMSS format */
   /* Store MMDD in transmission_timestamp */
   memcpy( local_key, date_str + 4, 4);
   memcpy( local_key + 4, time_str, 6);
   memcpy(pte_tlf01_stip.kek,local_key,10);

   	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
    EXEC SQL UPDATE tlf01_stip
   SET   response_text                      = :pte_tlf01_stip.response_text,
         sys_trace_audit_num                = :pte_tlf01_stip.sys_trace_audit_num,
         retrieval_ref_num                  = :pte_tlf01_stip.retrieval_ref_num,
         orig_retrieval_ref_num             = :pte_tlf01_stip.orig_retrieval_ref_num,
         message_type                       = :pte_tlf01_stip.message_type,
		 orig_message						= :pte_tlf01_stip.orig_message,
         general_status                     = :pte_tlf01_stip.general_status,
         originator_queue                   = :pte_tlf01_stip.originator_queue,
         response_code                      = :pte_tlf01_stip.response_code,
		 product2_code						= :temp_product2_code,
		 kek                                = :pte_tlf01_stip.kek         
    WHERE transaction_id = :pte_tlf01_stip.transaction_id;
   
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_settle_batch_error , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}	    
   if ( SQLCODE != 0 )
   {   
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_tlf01_stip_settle_batch_error,ST1:%d,ST2:%d_1 ",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   
    EXEC SQL COMMIT WORK;
    
    // Let us update all duplicate 500 message  with RC = 95 which we may have received from POS.
      
    if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	} 
     EXEC SQL  SELECT COUNT(*) 
     	  INTO duplicate_count
	      FROM  tlf01_stip
	      where product2_code = 'stndin' and
   		 		acquirer_id   = 'nciftr' and
   				message_type  = :temp_message_type and
   		 		response_code = :temp_response_code and
   		 		terminal_id   = :pte_tlf01_stip.terminal_id and
   		 		merchant_id   = :pte_tlf01_stip.merchant_id and
   		 		batch_number  = :pte_tlf01_stip.batch_number
	      For Update NOWAIT;
	      
	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_settle_batch_error_C , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}      
	   
   if (duplicate_count == 0 || duplicate_count == 1 )
   {
        /* There is no duplicate 0500 message with RC = 95 for terminal */
        return PTEMSG_OK; 
   }
	   
	   
	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}	   
   EXEC SQL UPDATE tlf01_stip
   SET product2_code = 'procsd'
   where product2_code = 'stndin' and
   		 acquirer_id   = 'nciftr' and
   		 message_type  = :temp_message_type and
   		 response_code = :temp_response_code and
   		 terminal_id   = :pte_tlf01_stip.terminal_id and
   		 merchant_id   = :pte_tlf01_stip.merchant_id and
   		 batch_number  = :pte_tlf01_stip.batch_number; 
   		  
	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_settle_batch_error_U2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	} 
	    
   if ( SQLCODE != 0 )
   {   
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_tlf01_stip_settle_batch_error,ST1:%d,ST2:%d_2 ",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   	    
   EXEC SQL COMMIT WORK;	
   return PTEMSG_OK;
}

/*************************************************************************************/

BYTE db_update_tlf01_stip_MID_RESTRICTED( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
	 INT   retval = 0;
	 INT   count = 0;
   	 char  temp_product2_code[7]="MIDRST";
   	 CHAR  date_str [ 9] = {0};
   	 CHAR  time_str [ 7] = {0};
   	 CHAR  time_date[25] = {0};
   	 CHAR  local_key[17] = {0};
   EXEC SQL END DECLARE SECTION;  

   tlf01_stip_to_db( tlf01_ptr );
   
   // Lets prepare time stamp details at which we have received response.
   ptetime_get_timestamp( time_date );
   get_date( time_date, date_str );
   get_time( time_date, time_str );

   /* Store MMDDhhmms format for ATP Advice timestamp MMDDHHMMSS format */
   /* Store MMDD in transmission_timestamp */
   memcpy( local_key, date_str + 4, 4);
   memcpy( local_key + 4, time_str, 6);
   memcpy(pte_tlf01_stip.kek,local_key,10);

	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
    EXEC SQL UPDATE tlf01_stip
    SET   response_text                 = :pte_tlf01_stip.response_text,
          sys_trace_audit_num           = :pte_tlf01_stip.sys_trace_audit_num,
          retrieval_ref_num             = :pte_tlf01_stip.retrieval_ref_num,
          orig_retrieval_ref_num        = :pte_tlf01_stip.orig_retrieval_ref_num,
          message_type                  = :pte_tlf01_stip.message_type,
	 	  orig_message					= :pte_tlf01_stip.orig_message,
          general_status                = :pte_tlf01_stip.general_status,
          originator_queue              = :pte_tlf01_stip.originator_queue,
          response_code                 = :pte_tlf01_stip.response_code,
		  product2_code					= :temp_product2_code,
		  kek                           = :pte_tlf01_stip.kek            
    WHERE transaction_id = :pte_tlf01_stip.transaction_id;
    
   	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_MID_RESTRICTED_U1 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}    
   if ( SQLCODE != 0 )
   {   
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_tlf01_stip_MID_RESTRICTED_U1,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
      
   EXEC SQL COMMIT WORK;	
   
   EXEC SQL SELECT COUNT(*) 
     	  INTO count
	      FROM  tlf01_stip
   	where product2_code = 'stndin' and
   		  acquirer_id   = 'nciftr' and
   		  terminal_id   = :pte_tlf01_stip.terminal_id and
   		  merchant_id   = :pte_tlf01_stip.merchant_id and
   		  batch_number  = :pte_tlf01_stip.batch_number
	      For Update NOWAIT;
	      
	 if ( db_error_statics_flag == true )
	 {
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_MID_RESTRICTED_S1 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	 } 
	 if (count == 0 )
	 {
	        /* No other transaction for this batch is available*/
	        return PTEMSG_OK; 
	 }
	    
   // Let us update all record for this batch as processed message which we may have received from POS.
   
   	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
   EXEC SQL UPDATE tlf01_stip
   SET product2_code   = 'MIDRST'
   where acquirer_id   = 'nciftr' and
   	     terminal_id   = :pte_tlf01_stip.terminal_id and
   		 merchant_id   = :pte_tlf01_stip.merchant_id and
   		 batch_number  = :pte_tlf01_stip.batch_number and
   		 product2_code = 'stndin';
   		 
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_MID_RESTRICTED_U2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}		 
      
    if ( SQLCODE != 0 )
   {   
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_tlf01_stip_MID_RESTRICTED_U2,ST1:%d,ST2:%d_2 ",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   EXEC SQL COMMIT WORK;	
   return PTEMSG_OK;
}

/*************************************************************************************/

BYTE db_update_tlf01_stip_RC_80( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
	 INT   retval = 0;
	 INT   count = 0;
   	 char  temp_product2_code[7]="BERC80";
   	 CHAR  date_str [ 9] = {0};
   	 CHAR  time_str [ 7] = {0};
   	 CHAR  time_date[25] = {0};
   	 CHAR  local_key[17] = {0};
   EXEC SQL END DECLARE SECTION;  

   tlf01_stip_to_db( tlf01_ptr );
   
   // Lets prepare time stamp details at which we have received response.
   ptetime_get_timestamp( time_date );
   get_date( time_date, date_str );
   get_time( time_date, time_str );

   /* Store MMDDhhmms format for ATP Advice timestamp MMDDHHMMSS format */
   /* Store MMDD in transmission_timestamp */
   memcpy( local_key, date_str + 4, 4);
   memcpy( local_key + 4, time_str, 6);
   memcpy(pte_tlf01_stip.kek,local_key,10);

	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
    EXEC SQL UPDATE tlf01_stip
    SET   response_text                 = :pte_tlf01_stip.response_text,
          sys_trace_audit_num           = :pte_tlf01_stip.sys_trace_audit_num,
          retrieval_ref_num             = :pte_tlf01_stip.retrieval_ref_num,
          orig_retrieval_ref_num        = :pte_tlf01_stip.orig_retrieval_ref_num,
          message_type                  = :pte_tlf01_stip.message_type,
	 	  orig_message					= :pte_tlf01_stip.orig_message,
          general_status                = :pte_tlf01_stip.general_status,
          originator_queue              = :pte_tlf01_stip.originator_queue,
          response_code                 = :pte_tlf01_stip.response_code,
		  product2_code					= :temp_product2_code,
		  kek                           = :pte_tlf01_stip.kek            
    WHERE transaction_id = :pte_tlf01_stip.transaction_id;
    
   	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_RC_80 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}    
   if ( SQLCODE != 0 )
   {   
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_tlf01_stip_RC_80,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
      
   EXEC SQL COMMIT WORK;
   
   EXEC SQL SELECT COUNT(*) 
     	  INTO count
	      FROM  tlf01_stip
   	where product2_code = 'stndin' and
   		  acquirer_id   = 'nciftr' and
   		  terminal_id   = :pte_tlf01_stip.terminal_id and
   		  merchant_id   = :pte_tlf01_stip.merchant_id and
   		  batch_number  = :pte_tlf01_stip.batch_number
	      For Update NOWAIT;
	      
	 if ( db_error_statics_flag == true )
	 {
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_MID_RESTRICTED_S1 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	 } 
	 if (count == 0 )
	 {
	        /* No other transaction for this batch is available*/
	        return PTEMSG_OK; 
	 }
	    
   // Let us update all record for this batch as processed message which we may have received from POS.
   
   	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
	
   EXEC SQL UPDATE tlf01_stip
   SET product2_code   = 'BERC80'
   where acquirer_id   = 'nciftr' and
   	     terminal_id   = :pte_tlf01_stip.terminal_id and
   		 merchant_id   = :pte_tlf01_stip.merchant_id and
   		 batch_number  = :pte_tlf01_stip.batch_number and
   		 product2_code = 'stndin';
   		 
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_MID_RESTRICTED_U2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}		 
      
    if ( SQLCODE != 0 )
   {   
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_tlf01_stip_MID_RESTRICTED_U2,ST1:%d,ST2:%d_2 ",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   EXEC SQL COMMIT WORK;
   return PTEMSG_OK; 	
}

/*************************************************************************************/
BYTE db_update_tlf01_stip_INVALID_RSP( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
	 INT  retval;
	 char temp_product2_code[7]="INVRSP";
	 CHAR  date_str [ 9] = {0};
   	 CHAR  time_str [ 7] = {0};
   	 CHAR  time_date[25] = {0};
   	 CHAR  local_key[17] = {0};
   EXEC SQL END DECLARE SECTION;  

   tlf01_stip_to_db( tlf01_ptr );
   
   // Lets prepare time stamp details at which we have received response.
   ptetime_get_timestamp( time_date );
   get_date( time_date, date_str );
   get_time( time_date, time_str );

   /* Store MMDDhhmms format for ATP Advice timestamp MMDDHHMMSS format */
   /* Store MMDD in transmission_timestamp */
   memcpy( local_key, date_str + 4, 4);
   memcpy( local_key + 4, time_str, 6);
   memcpy(pte_tlf01_stip.kek,local_key,10);

	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
    EXEC SQL UPDATE tlf01_stip
    SET   response_text                = :pte_tlf01_stip.response_text,
          sys_trace_audit_num          = :pte_tlf01_stip.sys_trace_audit_num,
          retrieval_ref_num            = :pte_tlf01_stip.retrieval_ref_num,
          orig_retrieval_ref_num       = :pte_tlf01_stip.orig_retrieval_ref_num,
          message_type                 = :pte_tlf01_stip.message_type,
		  orig_message				   = :pte_tlf01_stip.orig_message,
          general_status               = :pte_tlf01_stip.general_status,
          originator_queue             = :pte_tlf01_stip.originator_queue,
          response_code                = :pte_tlf01_stip.response_code,
		  product2_code				   = :temp_product2_code,
		  kek                          = :pte_tlf01_stip.kek            
    WHERE transaction_id = :pte_tlf01_stip.transaction_id;
   
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_INVALID_RSP , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}    
   if ( SQLCODE != 0 )
   {   
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_tlf01_stip_INVALID_RSP,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   EXEC SQL COMMIT WORK;	
   return PTEMSG_OK;
}

/*************************************************************************************/

/*************************************************************************************/
BYTE db_update_tlf01_stip_0200_not_found( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
	 INT  retval;
   	 char temp_product2_code[7]="batchS";
   	 CHAR  date_str [ 9] = {0};
     CHAR  time_str [ 7] = {0};
     CHAR  time_date[25] = {0};
     CHAR  local_key[17] = {0};
   EXEC SQL END DECLARE SECTION;  

   tlf01_stip_to_db( tlf01_ptr );
   
   // Lets prepare time stamp details at which we have received response.
   ptetime_get_timestamp( time_date );
   get_date( time_date, date_str );
   get_time( time_date, time_str );

   /* Store MMDDhhmms format for ATP Advice timestamp MMDDHHMMSS format */
   /* Store MMDD in transmission_timestamp */
   memcpy( local_key, date_str + 4, 4);
   memcpy( local_key + 4, time_str, 6);
   memcpy(pte_tlf01_stip.kek,local_key,10);
   
	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
    EXEC SQL UPDATE tlf01_stip
   SET   response_text                      = :pte_tlf01_stip.response_text,
         sys_trace_audit_num                = :pte_tlf01_stip.sys_trace_audit_num,
         retrieval_ref_num                  = :pte_tlf01_stip.retrieval_ref_num,
         orig_retrieval_ref_num             = :pte_tlf01_stip.orig_retrieval_ref_num,
         message_type                       = :pte_tlf01_stip.message_type,
		 orig_message						= :pte_tlf01_stip.orig_message,
         general_status                     = :pte_tlf01_stip.general_status,
         originator_queue                   = :pte_tlf01_stip.originator_queue,
         response_code                      = :pte_tlf01_stip.response_code,
		 product2_code						= :temp_product2_code,
		 kek                                = :pte_tlf01_stip.kek            
    WHERE transaction_id = :pte_tlf01_stip.transaction_id;
   
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_0200_not_found , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	} 
	   
   if ( SQLCODE != 0 )
   {   
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_tlf01_stip_0200_not_found,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   EXEC SQL COMMIT WORK;	
   return PTEMSG_OK;
}

/*************************************************************************************/
BYTE db_update_tlf01_stip_count( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   tlf01_stip_to_db( tlf01_ptr );

	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}

   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_tlf01_stip
      FROM   tlf01_stip
      WHERE  transaction_id = :pte_tlf01_stip.transaction_id
      For Update NOWAIT;

    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_count_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {  
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_tlf01_stip_count,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   
   }

	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
   EXEC SQL UPDATE tlf01_stip
   SET    product7_code						= :pte_tlf01_stip.product7_code             
    WHERE transaction_id = :pte_tlf01_stip.transaction_id;
   
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_count_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}    
   if ( SQLCODE != 0 )
   {  
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_tlf01_stip_count,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;   
   }
   EXEC SQL COMMIT WORK;	
   return PTEMSG_OK;
}


/*************************************************************************************/
BYTE db_update_bch01_mp_batch_status( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
   char batch_nbr[7]="";
   char device_id[9]="";
   char merchant_id[16]="";
   char batch_status[2]="P"; // Indicate its Processed By Sbatmp
   EXEC SQL END DECLARE SECTION;
   
   tlf01_stip_to_db( tlf01_ptr );
   
	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}   
    /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch01_mp
      FROM   bch01_mp
      WHERE device_id   = :pte_tlf01_stip.terminal_id   AND 
			merchant_id = :pte_tlf01_stip.merchant_id 	AND 
			batch_nbr   = :pte_tlf01_stip.batch_number  AND
			rownum 		= 1
      For Update NOWAIT;

    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : BCH01_MP ,Fun_Name : db_update_bch01_mp_batch_status_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	} 
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {  
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_bch01_mp_batch_status,ST1:%d,ST2:%d_1 ",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;   
   }

	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
   EXEC SQL UPDATE bch01_mp
   SET   BATCH_STATUS        = :batch_status
        WHERE device_id   = :pte_tlf01_stip.terminal_id AND 
			  merchant_id = :pte_tlf01_stip.merchant_id AND 
			  batch_nbr   = :pte_tlf01_stip.batch_number;
			
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : BCH01_MP ,Fun_Name : db_update_bch01_mp_batch_status_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}   
   if ( SQLCODE != 0 )
   {  
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_bch01_mp_batch_status,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;   
   }
   EXEC SQL COMMIT WORK;	
   return PTEMSG_OK;
}
/*************************************************************************************/
BYTE db_select_tlf01_stip_320_msg (pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
 
   EXEC SQL BEGIN DECLARE SECTION;
        char response_code[3]="00";
		int  retval;
		char product2_code[40]={0};
		char temp_message_type[5]={0};
		char Message_type[5]="0320";
   EXEC SQL END DECLARE SECTION;

    tlf01_stip_to_db( tlf01_ptr );
	strncpy( product2_code, "stndin",6);
	
	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}	
	EXEC SQL SELECT 
	message_type INTO :temp_message_type
	FROM ( select * from tlf01_stip
	WHERE product2_code = :product2_code AND
		  terminal_id   = :pte_tlf01_stip.terminal_id AND
		  merchant_id	= :pte_tlf01_stip.merchant_id AND
		  acquirer_id	= :pte_tlf01_stip.acquirer_id AND
		  batch_number 	= :pte_tlf01_stip.batch_number AND
		  message_type  = :Message_type order by transaction_id)
		  where rownum = 1;
		
	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_select_tlf01_stip_320_msg, Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}	
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {  
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_tlf01_stip_320_msg,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;   
   }
   
   if(strlen(temp_message_type) > 0)
   {
		if(( 0 == strncmp(temp_message_type,"0320",4)))
		{
			return PTEMSG_OK;
		}
		else
		{
			return PTEMSG_NOT_FOUND;
		}
	}
	else
    {
		return PTEMSG_NOT_FOUND;
	}
}	

/*******************************************************************************/

/*************************************************************************************/
BYTE db_select_tlf01_stip_0200_msg (pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
 
   EXEC SQL BEGIN DECLARE SECTION;
        char response_code[3]="00";
		int  retval;
		char product2_code[40]={0};
		char temp_message_type[5]={0};
		char Message_type[5]="0200";
   EXEC SQL END DECLARE SECTION;

    tlf01_stip_to_db( tlf01_ptr );
    
	strncpy( product2_code, "stndin",6);
	
	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}	
	EXEC SQL SELECT 
	message_type INTO :temp_message_type
	FROM ( select * from tlf01_stip
	WHERE product2_code = :product2_code AND
		  terminal_id   = :pte_tlf01_stip.terminal_id AND
		  merchant_id	= :pte_tlf01_stip.merchant_id AND
		  acquirer_id	= :pte_tlf01_stip.acquirer_id AND
		  batch_number 	= :pte_tlf01_stip.batch_number AND
		  message_type  = :Message_type order by transaction_id)
		  where rownum = 1;
		  
	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_select_tlf01_stip_0200_msg , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {  
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_tlf01_stip_0200_msg,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;   
   }
   
   if(strlen(temp_message_type) > 0)
   {
		if(( 0 == strncmp(temp_message_type,"0200",4)))
		{
			return PTEMSG_OK;
		}
		else
		{
			return PTEMSG_NOT_FOUND;
		}
	}
	else
    {
		return PTEMSG_NOT_FOUND;
	}
}	

/*******************************************************************************/

/***************************** ********************************************************/
BYTE db_get_tlf01_settlement_trn( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
   char message_type[5]= {0};
   char product2_code[40]= {0};
   char acquirer_id[10]= {0};
   EXEC SQL END DECLARE SECTION;    
   
   printf(" Inside db_get_tlf01_settlement_trn function\n");    
   memset( &db_tlf01_stip, 0, sizeof( db_tlf01_stip ) );
   strcpy( message_type, "0500");
   strcpy( product2_code, "procsd");
   strcpy( acquirer_id , "nciftr");
   tlf01_stip_to_db( tlf01_ptr );
   
   printf("Settlement transaction terminal_id %s merchant_id %s acquirer_id %s batch_number %s \n"
   			,pte_tlf01_stip.terminal_id,	pte_tlf01_stip.merchant_id,	pte_tlf01_stip.acquirer_id, pte_tlf01_stip.batch_number);		

	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}	
   EXEC SQL SELECT *
   INTO :db_tlf01_stip
   FROM (select * from tlf01_stip
   WHERE  product2_code = :product2_code AND
		  terminal_id   = :pte_tlf01_stip.terminal_id AND
		  merchant_id	= :pte_tlf01_stip.merchant_id AND
		  acquirer_id	= :acquirer_id AND
		  batch_number 	= :pte_tlf01_stip.batch_number AND
		  message_type  = :message_type order by transaction_id DESC)
		  WHERE ROWNUM = 1;

	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_get_tlf01_settlement_trn , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_tlf01_settlement_trn,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;   
   }
   
   db_to_tlf01_stip (tlf01_ptr);
   return PTEMSG_OK;
   
}

/**************************************************************************************/
/*HCTS3*/
BYTE db_get_bch01_mp_open_release_date(char *open_date, char *release_date)
{
	char bch01_open_date[9] = {0};
	char bch01_release_date[9] = {0};
	char batch_lookback_date[9] = {0};
	char ErrorMsg[100] = {0};

	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	} 

	/* Get the open and release date from BCH01_MP */
	EXEC SQL
	SELECT * 
	INTO :db_bch01_mp
	FROM (SELECT * FROM BCH01_MP
		  WHERE device_id   = :pte_tlf01_stip.terminal_id  AND
		  	    merchant_id = :pte_tlf01_stip.merchant_id  AND
				batch_nbr   = :pte_tlf01_stip.batch_number
		  ORDER BY release_date desc)
	WHERE rownum = 1;
	
	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : BCH01_MP ,Fun_Name : db_get_bch01_mp_open_release_date , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}

	if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
    {	
    	/*lookupback 30 days*/
    	get_lookback_date(&batch_lookback_date);
    	memcpy(bch01_open_date, batch_lookback_date, 8);
    	memcpy(bch01_release_date, pte_tlf01_stip.date_yyyymmdd, 8);
    	
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"Batch open/release date not found, copied default lookback date:[%s] as open date and release date:[%s], In db_get_bch01_mp_open_release_date,ST1:%d,ST2:%d_1",batch_lookback_date,bch01_release_date,DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
    }
	else
	{
    	memcpy(bch01_open_date, db_bch01_mp.open_date.arr, db_bch01_mp.open_date.len);
    	memcpy(bch01_release_date, db_bch01_mp.release_date.arr, db_bch01_mp.release_date.len);
	}
	
	memcpy(open_date, bch01_open_date, 8);
    memcpy(release_date, bch01_release_date, 8);
    
    return PTEMSG_OK;;
}

/**************************************************************************************/

/**************************************************************************************/

BYTE db_get_bch10_stip_service_list( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
   double            start_time;
   double            end_time;
   double            duration;  
   char bch01_open_date[9] = {0};
   char bch01_release_date[9] = {0};
   
   EXEC SQL BEGIN DECLARE SECTION;
   char message_type[5]="";
   char product2_code[40]="";
   BYTE temp_tx_key_sale='e';
   BYTE temp_tx_key_AUTH='o';
   BYTE temp_tx_key_OFFLINE='i';
   
   EXEC SQL END DECLARE SECTION;       

   tlf01_stip_to_db( tlf01_ptr );
   
   printf("Inside db_get_bch10_stip_service_list funtion \n");
   printf(" Terminal number %s Merchant id = %s ,  batch number %s ", 
   	        pte_tlf01_stip.terminal_id,pte_tlf01_stip.merchant_id,pte_tlf01_stip.batch_number);
	
   /*HCTS3*/
   db_get_bch01_mp_open_release_date(&bch01_open_date, &bch01_release_date);

	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}		
   EXEC SQL DECLARE bch10_stip_cursor2 CURSOR FOR
   SELECT *
   FROM bch10
   WHERE  device_id     = :pte_tlf01_stip.terminal_id AND
		  merchant_id	= :pte_tlf01_stip.merchant_id AND
		  tx_key		= :temp_tx_key_sale 		  AND 
		  batch_nbr 	= :pte_tlf01_stip.batch_number AND
		  tran_date    >= :bch01_open_date 			   AND
		  tran_date    <= :bch01_release_date; /*HCTS3*/

	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : BCH10 ,Fun_Name : db_get_bch10_stip_service_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}		
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN  bch10_stip_cursor2;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;

   while(1)
   {
      memset(&db_bch10, 0x00, sizeof(db_bch10));
      
      printf(" fetching records from cursour\n");
      
      	if ( db_error_statics_flag == true )
		{
			start_time = ptetime_get_time();
		}	
      EXEC SQL FETCH bch10_stip_cursor2
      INTO :db_bch10;
      
		if ( db_error_statics_flag == true )
		{
			end_time = ptetime_get_time();
			duration = end_time - start_time;
			if(duration >= db_error_statics_value)
			{
				memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : BCH10 ,Fun_Name : db_get_bch10_stip_service_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
			}
		}
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
	         SQL_CODE = SQLCODE;
	         EXEC SQL CLOSE bch10_stip_cursor2;
	
			memset(er_buf,0x00,sizeof(er_buf));
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In  db_get_bch10_stip_service_list,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;   
  
      }

         db_to_bch10(&bch10);
         printf("convert BCH10 detaisl to TLF01 table details\n");
		 Copy_to_Auth_Tx_TLF(&bch10);
      if (!tlf01_stip_handler_0320())
		return PTEMSG_DATABASE_ERROR;
   }
  
   EXEC SQL CLOSE bch10_stip_cursor2;     
   

   sql_error:
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
       	memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_bch10_stip_service_list,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   return PTEMSG_OK;
   
}
/*************************************************************************************/


/*************************************************************************************/
BYTE db_get_bch11_stip_service_list( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
   double            start_time;
   double            end_time;
   double            duration;
   char				bch01_open_date[9] = {0};
   char				bch01_release_date[9] = {0};
   
   EXEC SQL BEGIN DECLARE SECTION;
   char message_type[5]="";
   char product2_code[40]="";
   BYTE temp_tx_key_sale='e';
   BYTE temp_tx_key_AUTH='o';
   BYTE temp_tx_key_OFFLINE='i';
   
   EXEC SQL END DECLARE SECTION;       

   tlf01_stip_to_db( tlf01_ptr );
   
   printf("Inside db_get_bch11_stip_service_list funtion \n");
   printf(" Terminal number %s Merchant id = %s ,  batch number %s ", 
   	        pte_tlf01_stip.terminal_id,pte_tlf01_stip.merchant_id,pte_tlf01_stip.batch_number);
	
   /*HCTS3*/   
   db_get_bch01_mp_open_release_date(&bch01_open_date, &bch01_release_date);
    
	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}	
   EXEC SQL DECLARE bch11_stip_cursor2 CURSOR FOR
   SELECT *
   FROM bch11
   WHERE  device_id     = :pte_tlf01_stip.terminal_id AND
		  merchant_id	= :pte_tlf01_stip.merchant_id AND
		  tx_key		= :temp_tx_key_sale           AND 
		  batch_nbr 	= :pte_tlf01_stip.batch_number  AND
		  tran_date    >= :bch01_open_date 			   AND
		  tran_date    <= :bch01_release_date; /*HCTS3*/
	
	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : BCH11 ,Fun_Name : db_get_bch11_stip_service_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}		
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN  bch11_stip_cursor2;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;

   while(1)
   {
      	memset(&db_bch11, 0x00, sizeof(db_bch11));
      
		printf(" fetching records from cursour\n");
		
		if ( db_error_statics_flag == true )
		{
			start_time = ptetime_get_time();
		}		
      	EXEC SQL FETCH bch11_stip_cursor2
      	INTO :db_bch11;
		if ( db_error_statics_flag == true )
		{
			end_time = ptetime_get_time();
			duration = end_time - start_time;
			if(duration >= db_error_statics_value)
			{
				memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : BCH11 ,Fun_Name : db_get_bch11_stip_service_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
			}
		}
     	sql_error2:
      	if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      	{
	         SQL_CODE = SQLCODE;
	         EXEC SQL CLOSE bch11_stip_cursor2;
	       	memset(er_buf,0x00,sizeof(er_buf));
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In  db_get_bch11_stip_service_list,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;   
      	}

       	db_to_bch11(&bch11);
      	printf("convert BCH11 detaisl to TLF01 table details\n");
	   	Copy_to_Auth_Tx_TLF(&bch11);
      	if (!tlf01_stip_handler_0320())
			return PTEMSG_DATABASE_ERROR;
   }
  
   EXEC SQL CLOSE bch11_stip_cursor2;     
   

   sql_error:
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {  	
	    memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_bch11_stip_service_list,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   return PTEMSG_OK;
   
}
/*************************************************************************************/

/*************************************************************************************/
BYTE db_get_TLF10_stip_0200_service_list( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
 
   //printf("Inside db_get_TLF10_stip_0200_service_list function\n");
   
   EXEC SQL BEGIN DECLARE SECTION;
   char Message_type[5]="0200";
   char product2_code[40]={0};
   char acquirer_id[10]={0};
   
   EXEC SQL END DECLARE SECTION;       

   tlf01_stip_to_db( tlf01_ptr );

   strncpy( product2_code, "stndin",6);
   strncpy( acquirer_id, "nciftr",6);
   
   printf("Opening Cursore for TID %s MID %s , batch_number %s, acquire_id %s\n",
   		   pte_tlf01_stip.terminal_id,pte_tlf01_stip.merchant_id,pte_tlf01_stip.batch_number,
   		   pte_tlf01_stip.acquirer_id);
   		   
   	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}			   
   EXEC SQL DECLARE TLF01_stip_cursor3 CURSOR FOR
   SELECT *
   FROM tlf01_stip
   WHERE  product2_code = :product2_code AND
   		  terminal_id   = :pte_tlf01_stip.terminal_id AND
		  merchant_id	= :pte_tlf01_stip.merchant_id AND
		  batch_number 	= :pte_tlf01_stip.batch_number AND
		  acquirer_id	= :acquirer_id AND
		  message_type  = :Message_type ;	
		  
	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_get_TLF10_stip_0200_service_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN  TLF01_stip_cursor3;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;

   while(1)
   {
		memset(&db_Auth_Tx_TLFstip, 0x00, sizeof(db_Auth_Tx_TLFstip));
      	memset(&Auth_Tx, 0x00, sizeof(Auth_Tx));
      
      	if ( db_error_statics_flag == true )
		{
			start_time = ptetime_get_time();
		}
			
	    EXEC SQL FETCH TLF01_stip_cursor3
	      INTO :db_Auth_Tx_TLFstip;
		if ( db_error_statics_flag == true )
		{
			end_time = ptetime_get_time();
			duration = end_time - start_time;
			if(duration >= db_error_statics_value)
			{
				memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Sbatch_mp, ST1:%d,ST2:%d,Data_Type : TLF01_STIP ,Fun_Name : db_get_TLF10_stip_0200_service_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
			}
		}
	      sql_error2:
	      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
	      {
		         SQL_CODE = SQLCODE;
		         printf("Error in fatching data %d \n",SQLCODE);
		         EXEC SQL CLOSE TLF01_stip_cursor3;
	         	memset(er_buf,0x00,sizeof(er_buf));
				DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
				sprintf(er_buf,"In  db_get_TLF10_stip_0200_service_list,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
				strcat(er_buf,ErrorMsg);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
				return DB_rcode;
	      }
	      
	      db_to_db_Auth_Tx_TLFstip (&Auth_Tx_TLFstip);
	      memcpy (&Auth_Tx.TLF01_details, &Auth_Tx_TLFstip, sizeof (TLF01)) ;
	      printf("Transaction ID %s\n",Auth_Tx.TLF01_details.primary_key.transaction_id);
	     
	      if (!tlf01_stip_handler_0200())
			return PTEMSG_DATABASE_ERROR;
   }
  
   EXEC SQL CLOSE TLF01_stip_cursor3;     
   

   sql_error:
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
   		printf("Error in Opening cursor  %d \n",SQLCODE);
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_get_TLF10_stip_0200_service_list,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;

   }
   return PTEMSG_OK;
   
}
/***************************** ********************************************************/

/******************************************************************************/
/*HCTS3*/
void get_lookback_date(char *lookback_date)
{
	char temp_date_YYYYMMDD[9]={0};
	BYTE strTransactionYYYY[5]={0};
	BYTE strTransactionMM[3]={0};
	BYTE strTransactionDD[3]={0};
	char current_date[9]={0};
	int  TransactionYYYY = 0;
	int  TransactionMM = 0;
	int  TransactionDD = 0 ;
	int  Transactionjulianday=0;
	
	ptetime_get_timestamp(&current_date);//YYYY-MM-DD-HH.II.SS.JJJ
	
	strncpy(strTransactionYYYY,current_date, 4);
	TransactionYYYY = atoi (strTransactionYYYY) ;
	
	strncpy(strTransactionMM,current_date+5, 2);
	TransactionMM = atoi (strTransactionMM) ;
	
	strncpy(strTransactionDD,current_date+8, 2);
	TransactionDD = atoi (strTransactionDD) ;
	
    Transactionjulianday=daytoJulian(TransactionDD,TransactionMM,TransactionYYYY);
    JuliantoDay(Transactionjulianday,TransactionYYYY,temp_date_YYYYMMDD);
    
    memcpy(lookback_date, temp_date_YYYYMMDD, strlen(temp_date_YYYYMMDD));
    
    return;
}

int daytoJulian( int day,int month, int year) //takes calendar date and calculates its julian day within the year
{
	int count;
	int temp_date=day;
	for(count = 1; count < month; ++count)
	{
		temp_date = temp_date + daysInMonth(count, year);
	}
	return temp_date;
}

int daysInMonth(int month, int year) //takes a month and year and calculates how many days are in this particular month
{
	int numDays;
	switch(month)
	{
		case 1:
			numDays = 31;
			break;
		case 2:
			numDays = 28 + leapYear(year);
			break;
		case 3:
			numDays = 31;
			break;
		case 4:
			numDays = 30;
			break;
		case 5:
			numDays = 31;
			break;
		case 6:
			numDays = 30;
			break;
		case 7:
			numDays = 31;
			break;
		case 8:
			numDays = 31;
			break;
		case 9:
			numDays = 30;
			break;
		case 10:
			numDays = 31;
			break;
		case 11:
			numDays = 30;
			break;
		case 12:
			numDays = 31;
			break;
	}
	return numDays;
}

int leapYear(int year) //takes year and returns 1 if leap year otherwise 0
{
	if(year%4 == 0)
	{
		if( year%100 == 0) /* Checking for a century year */
		{
			if ( year%400 == 0)
			{
				return 1;
			}
			else
			{
				return 0;
			}
		}
		else
		{
			return 1;
		}
	}
	else
	{
		return 0;
	}
}

BYTE JuliantoDay(int Julianday, int year, char* temp_date_YYYYMMDD)
{
	int transactionDD=0;
	int transactionMM=0;
	int Julian_Jan = 31;
	int Julina_feb = 59;
	int Julian_mar = 90;
	int Julian_apr = 120;
	int Julian_may = 151;
	int Julian_jun = 181;
	int Julian_jul = 212;
	int Julian_aug = 243;
	int Julian_sep = 273;
	int Julian_oct = 304;
	int Julian_nov = 334;
	int Julian_dec = 365;
	CHAR tempyear_YYYY[5]={0};  
	CHAR tempmonth_MM[3]={0};  
	CHAR tempdate_DD[3]={0};  
	
	if ( Julianday <= 31)
	{
		if ( Julianday == 31 )
		{
			transactionMM = 01;
			transactionDD = Julianday - 30;
		}
		else if ( Julianday < 31 )
		{
			transactionMM = 12;
			if(Julianday==0)
			{
				transactionDD = 31;
			}
			else
			{
				transactionDD  = Julianday + 1;
			} 
			year = year -1;
		}
	}
	
	else if(Julianday <= (Julina_feb +leapYear(year)))
	{
	
		transactionDD = Julianday - Julian_Jan;
		transactionMM=01;
		
	}
	else if(Julianday <= (Julian_mar +leapYear(year)))
	{
		transactionDD = Julianday - (Julina_feb +leapYear(year));
		if(transactionDD ==30)
		{
			if(leapYear(year))
			{
				transactionDD=29;
			}
			else
			{
				transactionDD=28;
			}
			transactionMM=02;
		}
		else if(transactionDD>30)
		{
			transactionMM = 03;
			transactionDD = transactionDD -30;
		}
		else
		{
			transactionMM=02;
		}
	}
	else if(Julianday <= (Julian_apr +leapYear(year)))
	{
		transactionDD = Julianday - (Julian_mar +leapYear(year)) ;
		if(transactionDD ==30)
		{
			transactionDD=31;
			transactionMM=03;
		}
		else
		{
			transactionMM=03;
		}
	}
	else if(Julianday <= (Julian_may +leapYear(year)))
	{
		transactionDD = Julianday - (Julian_apr +leapYear(year));
		if(transactionDD>30)
		{
			transactionMM = 05;
			transactionDD = transactionDD - 30;
		}
		else
		{
			transactionMM=04;
		}
	}
	else if(Julianday <= (Julian_jun +leapYear(year)))
	{
		transactionDD = Julianday - (Julian_may +leapYear(year));
		if(transactionDD ==30)
		{
			transactionDD=31;
		}
		transactionMM=05;
	}
	else if(Julianday <= (Julian_jul +leapYear(year)))
	{
		transactionDD = Julianday - (Julian_jun +leapYear(year));
		if(transactionDD>30)
		{
			transactionMM = 07;
			transactionDD = transactionDD - 30;
		}
		else
		{
			transactionMM=06;
		}
	}
	else if(Julianday <= (Julian_aug +leapYear(year)))
	{
		transactionDD = Julianday - (Julian_jul +leapYear(year));
		if(transactionDD ==30)
		{
			transactionDD=31;
			transactionMM = 07;
		}
		else if(transactionDD>30)
		{
			transactionMM = 8;
			transactionDD = transactionDD - 30;
		}
		else
		{
			transactionMM=07;
		}
	}
	else if(Julianday <= (Julian_sep +leapYear(year)))
	{
		transactionDD = Julianday - (Julian_aug +leapYear(year));
		if(transactionDD ==30)
		{
			transactionDD=31;
			transactionMM = 8;
		}
		else
		{
			transactionMM=8;
		}
	}
	else if(Julianday <= (Julian_oct +leapYear(year)))
	{
		transactionDD = Julianday - (Julian_sep +leapYear(year));
		if(transactionDD>30)
		{
			transactionMM = 10;
			transactionDD = transactionDD - 30;
		}
		else
		{
			transactionMM=9;
		}
	}
	else if(Julianday <= (Julian_nov +leapYear(year)))
	{
		transactionDD = Julianday - (Julian_oct +leapYear(year));
		if(transactionDD==30)
		{
			transactionDD = 31;
		}
		transactionMM=10;
	}
	else if(Julianday <= (Julian_dec +leapYear(year)))
	{
		transactionDD = Julianday - (Julian_nov +leapYear(year));
		if(transactionDD>30)
		{
			transactionMM = 12;
			transactionDD = transactionDD - 30;
		}
		else
		{
			transactionMM=11;
		}
	}
	
	  
	sprintf(tempyear_YYYY, "%04d",year);
	sprintf(tempmonth_MM, "%02d",transactionMM);
	sprintf(tempdate_DD, "%02d",transactionDD);
	 
    strncpy(temp_date_YYYYMMDD,tempyear_YYYY,(sizeof(tempyear_YYYY)-1));
    strncat(temp_date_YYYYMMDD,tempmonth_MM,(sizeof(tempmonth_MM)-1));
    strncat(temp_date_YYYYMMDD,tempdate_DD,(sizeof(tempmonth_MM)-1));
    printf("date befor 30 day for this julian date is : %d %s\n",Julianday,temp_date_YYYYMMDD);
    return 0;
}

/*************************************************************/
