#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

#include <math.h>
#include <time.h>
#include <sys/timeb.h>

#include "basictyp.h"
#include "pte.h"
#include "pteipc.h"
#include "ptemsg.h"
#include "ptetimer.h"
#include "ntutils.h"
#include "app_info.h"
#include "dc_dbstruct.h"
#include "equitdb.h"
#include "dbcommon.h"
#include "txutils.h"
#include "ptetime.h"
#include "memmnger.h"
#include "nc_dbstruct.h"

#include "parvbh.h"

#ifdef WIN32
#include <sqlproto.h>
#endif

#define NULL_COLUMN_DATA -1405
#define NO_DATA_FOUND    1403

char er_buf[512];
BYTE DB_rcode;
double start_time;
double end_time  ;
double duration  ; 
extern INT db_error_statics_flag;
extern double db_error_statics_value;
long SQLCODE;
long SQL_CODE;
extern CHAR sys_current_date[9];

struct
{
   char  device_id                                 [9];
   char  batch_nbr                                 [7];
   char  retrieval_ref_num                         [13];
   char  merchant_id                               [16];
   char  processing_code                           [7];
   char  tran_amount                               [13];
   char  response_code                             [3];
   char  auth_number                               [7];
   char  tran_date                                 [9];
   char  tran_time                                 [7];
   char  transaction_id                            [21];
   char  message_type                              [5];
   char  card_nbr                                  [20];
   char  invoice_nbr                               [9];
   char  settle_file_prefix                        [7];
   char  product_code                              [9];
   char  odometer                                  [8];
   char  sys_trace_audit_num                       [7];
   char  tx_key                                    ;
   char  bin_type                                  ;
   char type_of_data                               [3];
   char down_payment                               [13];
   char period                                     [3];
   char interest_rate                              [5];
   char total_interest                             [13];
   char redemption_amount                          [13];
   char vehicle_number                             [9];
   char pos_entry_mode                             [5];
   char profile                                    [3];
   char nbr_of_prod_codes                          [3];
   char product1_code                              [7];
   char product1_quantity                          [3];
   char product1_amount                            [13];
   char product2_code                              [7];
   char product2_quantity                          [3];
   char product2_amount                            [13];
   char product3_code                              [7];
   char product3_quantity                          [3];
   char product3_amount                            [13];
   char product4_code                              [7];
   char product4_quantity                          [3];
   char product4_amount                            [13];
   char product5_code                              [7];
   char product5_quantity                          [3];
   char product5_amount                            [13];
   char product6_code                              [7];
   char product6_quantity                          [3];
   char product6_amount                            [13];
   char product7_code                              [7];
   char product7_quantity                          [3];
   char product7_amount                            [13];
   char product8_code                              [7];
   char product8_quantity                          [3];
   char product8_amount                            [13];
   char product9_code                              [7];
   char product9_quantity                          [3];
   char product9_amount                            [13];
   char product10_code                              [7];
   char product10_quantity                          [3];
   char product10_amount                            [13];
   char product11_code                              [7];
   char product11_quantity                          [3];
   char product11_amount                            [13];
   char product12_code                              [7];
   char product12_quantity                          [3];
   char product12_amount                            [13];
   char product13_code                              [7];
   char product13_quantity                          [3];
   char product13_amount                            [13];
   char product14_code                              [7];
   char product14_quantity                          [3];
   char product14_amount                            [13];
   char product15_code                              [7];
   char product15_quantity                          [3];
   char product15_amount                            [13];
   char product16_code                              [7];
   char product16_quantity                          [3];
   char product16_amount                            [13];
   char product17_code                              [7];
   char product17_quantity                          [3];
   char product17_amount                            [13];
   char product18_code                              [7];
   char product18_quantity                          [3];
   char product18_amount                            [13];
   char product19_code                              [7];
   char product19_quantity                          [3];
   char product19_amount                            [13];
   char product20_code                              [7];
   char product20_quantity                          [3];
   char product20_amount                            [13];
   char aportionment_flag                           [2];
   char exp_date                                    [5];
   char open_date                                   [9];
   char open_time                                   [7];
   char cash_bonus                                  [2];
   char transmission_timestamp                      [11];
   char mcard_banknet                               [51];
   char  processed                                 [2];
   char ticket_nbr									[16];
   char def_gross_amt                               [13];
   char term                                        [4];
}pte_bch20;

struct
{
   varchar  device_id                                 [9];
   varchar  batch_nbr                                 [7];
   varchar  retrieval_ref_num                         [13];
   varchar  merchant_id                               [16];
   varchar  processing_code                           [7];
   varchar  tran_amount                               [13];
   varchar  response_code                             [3];
   varchar  auth_number                               [7];
   varchar  tran_date                                 [9];
   varchar  tran_time                                 [7];
   varchar  transaction_id                            [21];
   varchar  message_type                              [5];
   varchar  card_nbr                                  [20];
   varchar  invoice_nbr                               [9];
   varchar  settle_file_prefix                        [7];
   varchar  product_code                              [9];
   varchar  odometer                                  [8];
   varchar  sys_trace_audit_num                       [7];
   varchar  tx_key                                    [1];
   varchar  bin_type                                  [1];
   varchar type_of_data                               [3];
   varchar down_payment                               [13];
   varchar period                                     [3];
   varchar interest_rate                              [5];
   varchar total_interest                             [13];
   varchar redemption_amount                          [13];
   varchar vehicle_number                             [9];
   varchar pos_entry_mode                             [5];
   varchar profile                                    [3];
   varchar nbr_of_prod_codes                          [3];
   varchar product1_code                              [7];
   varchar product1_quantity                          [3];
   varchar product1_amount                            [13];
   varchar product2_code                              [7];
   varchar product2_quantity                          [3];
   varchar product2_amount                            [13];
   varchar product3_code                              [7];
   varchar product3_quantity                          [3];
   varchar product3_amount                            [13];
   varchar product4_code                              [7];
   varchar product4_quantity                          [3];
   varchar product4_amount                            [13];
   varchar product5_code                              [7];
   varchar product5_quantity                          [3];
   varchar product5_amount                            [13];
   varchar product6_code                              [7];
   varchar product6_quantity                          [3];
   varchar product6_amount                            [13];
   varchar product7_code                              [7];
   varchar product7_quantity                          [3];
   varchar product7_amount                            [13];
   varchar product8_code                              [7];
   varchar product8_quantity                          [3];
   varchar product8_amount                            [13];
   varchar product9_code                              [7];
   varchar product9_quantity                          [3];
   varchar product9_amount                            [13];
   varchar product10_code                              [7];
   varchar product10_quantity                          [3];
   varchar product10_amount                            [13];
   varchar product11_code                              [7];
   varchar product11_quantity                          [3];
   varchar product11_amount                            [13];
   varchar product12_code                              [7];
   varchar product12_quantity                          [3];
   varchar product12_amount                            [13];
   varchar product13_code                              [7];
   varchar product13_quantity                          [3];
   varchar product13_amount                            [13];
   varchar product14_code                              [7];
   varchar product14_quantity                          [3];
   varchar product14_amount                            [13];
   varchar product15_code                              [7];
   varchar product15_quantity                          [3];
   varchar product15_amount                            [13];
   varchar product16_code                              [7];
   varchar product16_quantity                          [3];
   varchar product16_amount                            [13];
   varchar product17_code                              [7];
   varchar product17_quantity                          [3];
   varchar product17_amount                            [13];
   varchar product18_code                              [7];
   varchar product18_quantity                          [3];
   varchar product18_amount                            [13];
   varchar product19_code                              [7];
   varchar product19_quantity                          [3];
   varchar product19_amount                            [13];
   varchar product20_code                              [7];
   varchar product20_quantity                          [3];
   varchar product20_amount                            [13];
   varchar aportionment_flag                           [2];
   varchar exp_date                                    [5];
   varchar open_date                                   [9];
   varchar open_time                                   [7];
   varchar cash_bonus                                  [2];
   varchar transmission_timestamp                      [11];
   varchar mcard_banknet                               [51];
   varchar  processed                                 [2];
   varchar ticket_nbr									[16];
   varchar def_gross_amt                               [13];
   varchar term                                        [4];
}db_bch20;

struct
{
    char transaction_id                     [21]; 

    char entry_type                         ;
    char tpdu_id                            [16];
    char issuer_id                          [21];
    char acquirer_id                        [21];
    char tx_key                             ;
    char terminal_id                        [9];
    char terminal_type                      [3];
    char response_text                      [41];
    char card_num_len                       [3];
    char card_num                           [20];
    char exp_date                           [5];
    char total_amount                       [13];
    char add_amounts                        [25];
    char invoice_number                     [9];
    char orig_amount                        [13];
    char auth_number                        [7];
    char processing_code                    [7];
    char sys_trace_audit_num                [7];
    char orig_sys_trace_num                 [7];
    char pos_entry_mode                     [5];
    char nii                                [5];
    char pos_condition_code                 [3];
    char track1                             [77];
    char track2                             [38];
    char retrieval_ref_num                  [13];
    char orig_retrieval_ref_num             [13];
    char merchant_id                        [16];
    char orig_message                       [5];
    char settlement_total                   [17];
    char message_type                       [5];
    char card_holder_name                   [31];
    char general_status                     ;
    char originator_queue                   [17];
    char originator_info                    [33];
    char batch_number                       [7];
    char response_code                      [3];
    char date_yyyymmdd                      [9];
    char time_hhmmss                        [7];
    char num_sales                          [4];
    char sales_amount                       [13];
    char num_refunds                        [4];
    char refund_amount                      [13];
    char num_dbsales                        [4];
    char dbsales_amount                     [13];
    char num_dbrefunds                      [4];
    char dbrefund_amount                    [13];
    char pin_block                          [19];
    char tax_amount                         [13];
    char tip_amount                         [13];
    char tran_start_time                    [17];
    char host_start_time                    [17];
    char host_finish_time                   [17];
    char tran_finish_time                   [17];
    char settle_file_prefix                 [7];
    char resp_source_len                    [3];
    char visa_char_indicator                ;
    char visa_tran_id                       [16];
    char visa_validation_code               [5];
    char mcard_banknet_len                  [4];
    char mcard_banknet                      [51];
    char agent_id_len                       [4];
    char agent_id                           [12];
    char cvc                                ;
    char settlement_date                    [5];

    char category_code                      [5];
    char conversion_rate                    [10];
    char product_code                       [9];
    char odometer                           [8];
    char organization_id                    [5];
    char dynamic_keychange                  ;

   char source_key                          [49];
   char txn_cnt                            [4];
   char dcf01_retired_cwk                  [49];
   char dest_key                           [49];
   char ncf01_retired_cwk                  [49];
   char handler_queue        		       [8];
   char authorizing_host_queue		   	   [8];
   char max_net_consec_tmouts              [4];
   char max_active_txns                    [4];
   char forwarding_institution_id          [12];
   char remote_nsp_type                    [2];
   char kek                                [17]; 
   char acquiring_id                       [12];
   char outstanding_balance                [13]; 
   char credit_limit                       [13];
   char nfi_name                           [11];
   char nfi_seq_nbr                        [7];
   char nfi_start_date                     [9];
   char nfi_end_date                       [9];
   char resp_source                        [26];

   char origin                             [3];
   char auth_1                             [3];
   char auth_2                             [3];
   char update_mask                        [2];
   char type_of_data                       [3];
   char down_payment                       [13];
   char period                             [3];
   char interest_rate                      [5];
   char total_interest                     [13];
   char redemption_amount                  [13];
   char vehicle_number                     [9];

   char profile                                    [3];
   char nbr_of_prod_codes                          [3];
   
   char product1_code                              [7];
   char product1_quantity                          [3];
   char product1_amount                            [13];
   char product2_code                              [7];
   char product2_quantity                          [3];
   char product2_amount                            [13];
   char product3_code                              [7];
   char product3_quantity                          [3];
   char product3_amount                            [13];
   char product4_code                              [7];
   char product4_quantity                          [3];
   char product4_amount                            [13];
   char product5_code                              [7];
   char product5_quantity                          [3];
   char product5_amount                            [13];
   char product6_code                              [7];
   char product6_quantity                          [3];
   char product6_amount                            [13];
   char product7_code                              [7];
   char product7_quantity                          [3];
   char product7_amount                            [13];
   char product8_code                              [7];
   char product8_quantity                          [3];
   char product8_amount                            [13];
   char product9_code                              [7];
   char product9_quantity                          [3];
   char product9_amount                            [13];
   char product10_code                              [7];
   char product10_quantity                          [3];
   char product10_amount                            [13];
   char product11_code                              [7];
   char product11_quantity                          [3];
   char product11_amount                            [13];
   char product12_code                              [7];
   char product12_quantity                          [3];
   char product12_amount                            [13];
   char product13_code                              [7];
   char product13_quantity                          [3];
   char product13_amount                            [13];
   char product14_code                              [7];
   char product14_quantity                          [3];
   char product14_amount                            [13];
   char product15_code                              [7];
   char product15_quantity                          [3];
   char product15_amount                            [13];
   char product16_code                              [7];
   char product16_quantity                          [3];
   char product16_amount                            [13];
   char product17_code                              [7];
   char product17_quantity                          [3];
   char product17_amount                            [13];
   char product18_code                              [7];
   char product18_quantity                          [3];
   char product18_amount                            [13];
   char product19_code                              [7];
   char product19_quantity                          [3];
   char product19_amount                            [13];
   char product20_code                              [7];
   char product20_quantity                          [3];
   char product20_amount                            [13];
   char visa_merchant_id                            [16];
   char cash_bonus                                  [2];  /* added 01-29-99 by IG */
   char deferred_factor                             [8];  /* added 01-29-99 by IG */
   char deferred_term_length                        [4];  /* added 01-29-99 by IG */
   char currency_code                               [4];  /* added 01-29-99 by IG */
   char transmission_timestamp                      [11]; /* added 01-29-99 by IG */
   char tran_fee_amount                             [9];  /* added 01-29-99 by IG */
   char cvc_data                                    [4];  /* added 01-29-99 by IG */

   char verify_mag_stripe                           [2];  /* added 02-09-99 by IG */
   char saf                                         [2];  /* added 02-09-99 by IG */
   char security_response_code                      [3];  /* added 02-09-99 by IG */
   char service_code                                [4];  /* added 02-09-99 by IG */
   char source_pin_format                           [3];  /* added 02-09-99 by IG */
   char dest_pin_format                             [3];  /* added 02-09-99 by IG */
   char voice_auth                                  [2];  /* added 02-09-99 by IG */
   char actual_amount                               [13]; /* AP IG, Equitable 02-10-99 */
   char reversal_amount                             [13]; /* AP IG, Equitable 02-10-99 */
   char voice_auth_text                             [241]; /* IG 02-22-99 */ 
   char operator_id                                 [21];  /* IA 03-09-99 */
   char workstation                                 [21];  /* IA 03-16-99 */
   char orig_auth_number                            [7];   /* IA 04-08-99 */
   char ticket_nbr									[16];
   char system_date                                 [9];
   char def_gross_amt                               [13];
   char monthly_amort_amt                           [13];
}pte_tlf01;

struct
{
    varchar transaction_id                     [21]; 

    varchar entry_type                         [1];
    varchar tpdu_id                            [16];
    varchar issuer_id                          [21];
    varchar acquirer_id                        [21];
    varchar tx_key                             [1];
    varchar terminal_id                        [9];
    varchar terminal_type                      [3];
    varchar response_text                      [41];
    varchar card_num_len                       [3];
    varchar card_num                           [20];
    varchar exp_date                           [5];
    varchar total_amount                       [13];
    varchar add_amounts                        [25];
    varchar invoice_number                     [9];
    varchar orig_amount                        [13];
    varchar auth_number                        [7];
    varchar processing_code                    [7];
    varchar sys_trace_audit_num                [7];
    varchar orig_sys_trace_num                 [7];
    varchar pos_entry_mode                     [5];
    varchar nii                                [5];
    varchar pos_condition_code                 [3];
    varchar track1                             [77];
    varchar track2                             [38];
    varchar retrieval_ref_num                  [13];
    varchar orig_retrieval_ref_num             [13];
    varchar merchant_id                        [16];
    varchar orig_message                       [5];
    varchar settlement_total                   [17];
    varchar message_type                       [5];
    varchar card_holder_name                   [31];
    varchar general_status                     [1];
    varchar originator_queue                   [17];
    varchar originator_info                    [33];
    varchar batch_number                       [7];
    varchar response_code                      [3];
    varchar date_yyyymmdd                      [9];
    varchar time_hhmmss                        [7];
    varchar num_sales                          [4];
    varchar sales_amount                       [13];
    varchar num_refunds                        [4];
    varchar refund_amount                      [13];
    varchar num_dbsales                        [4];
    varchar dbsales_amount                     [13];
    varchar num_dbrefunds                      [4];
    varchar dbrefund_amount                    [13];
    varchar pin_block                          [19];
    varchar tax_amount                         [13];
    varchar tip_amount                         [13];
    varchar tran_start_time                    [17];
    varchar host_start_time                    [17];
    varchar host_finish_time                   [17];
    varchar tran_finish_time                   [17];
    varchar settle_file_prefix                 [7];
    varchar resp_source_len                    [3];
    varchar visa_char_indicator                [1];
    varchar visa_tran_id                       [16];
    varchar visa_validation_code               [5];
    varchar mcard_banknet_len                  [4];
    varchar mcard_banknet                      [51];
    varchar agent_id_len                       [4];
    varchar agent_id                           [12];
    varchar cvc                                [1];
    varchar settlement_date                    [5];

    varchar category_code                      [5];
    varchar conversion_rate                    [10];
    varchar product_code                       [9];
    varchar odometer                           [8];
    varchar organization_id                    [5];
    varchar dynamic_keychange                  [1];

   varchar source_key                         [49];
   varchar txn_cnt                            [4];
   varchar dcf01_retired_cwk                  [49];
   varchar dest_key                           [49];
   varchar ncf01_retired_cwk                  [49];
   varchar handler_queue        		      [8];
   varchar authorizing_host_queue		   	  [8];
   varchar max_net_consec_tmouts              [4];
   varchar max_active_txns                    [4];
   varchar forwarding_institution_id          [12];
   varchar remote_nsp_type                    [2];
   varchar kek                                [17];
   varchar acquiring_id                       [12];
   varchar outstanding_balance                [13];
   varchar credit_limit                       [13];
   varchar nfi_name                           [11];
   varchar nfi_seq_nbr                        [7];
   varchar nfi_start_date                     [9];
   varchar nfi_end_date                       [9];
   varchar resp_source                        [26];
   varchar origin                             [3];
   varchar auth_1                             [3];
   varchar auth_2                             [3];
   varchar update_mask                        [2];
   varchar type_of_data                       [3];
   varchar down_payment                       [13];
   varchar period                             [3];
   varchar interest_rate                      [5];
   varchar total_interest                     [13];
   varchar redemption_amount                  [13];
   varchar vehicle_number                     [9];

   varchar profile                                    [3];
   varchar nbr_of_prod_codes                          [3];
   
   varchar product1_code                              [7];
   varchar product1_quantity                          [3];
   varchar product1_amount                            [13];
   varchar product2_code                              [7];
   varchar product2_quantity                          [3];
   varchar product2_amount                            [13];
   varchar product3_code                              [7];
   varchar product3_quantity                          [3];
   varchar product3_amount                            [13];
   varchar product4_code                              [7];
   varchar product4_quantity                          [3];
   varchar product4_amount                            [13];
   varchar product5_code                              [7];
   varchar product5_quantity                          [3];
   varchar product5_amount                            [13];
   varchar product6_code                              [7];
   varchar product6_quantity                          [3];
   varchar product6_amount                            [13];
   varchar product7_code                              [7];
   varchar product7_quantity                          [3];
   varchar product7_amount                            [13];
   varchar product8_code                              [7];
   varchar product8_quantity                          [3];
   varchar product8_amount                            [13];
   varchar product9_code                              [7];
   varchar product9_quantity                          [3];
   varchar product9_amount                            [13];
   varchar product10_code                              [7];
   varchar product10_quantity                          [3];
   varchar product10_amount                            [13];
   varchar product11_code                              [7];
   varchar product11_quantity                          [3];
   varchar product11_amount                            [13];
   varchar product12_code                              [7];
   varchar product12_quantity                          [3];
   varchar product12_amount                            [13];
   varchar product13_code                              [7];
   varchar product13_quantity                          [3];
   varchar product13_amount                            [13];
   varchar product14_code                              [7];
   varchar product14_quantity                          [3];
   varchar product14_amount                            [13];
   varchar product15_code                              [7];
   varchar product15_quantity                          [3];
   varchar product15_amount                            [13];
   varchar product16_code                              [7];
   varchar product16_quantity                          [3];
   varchar product16_amount                            [13];
   varchar product17_code                              [7];
   varchar product17_quantity                          [3];
   varchar product17_amount                            [13];
   varchar product18_code                              [7];
   varchar product18_quantity                          [3];
   varchar product18_amount                            [13];
   varchar product19_code                              [7];
   varchar product19_quantity                          [3];
   varchar product19_amount                            [13];
   varchar product20_code                              [7];
   varchar product20_quantity                          [3];
   varchar product20_amount                            [13];
   varchar visa_merchant_id                            [16];
   varchar cash_bonus                                  [2];  /* added 01-29-99 by IG */
   varchar deferred_factor                             [8];  /* added 01-29-99 by IG */
   varchar deferred_term_length                        [4];  /* added 01-29-99 by IG */
   varchar currency_code                               [4];  /* added 01-29-99 by IG */
   varchar transmission_timestamp                      [11]; /* added 01-29-99 by IG */
   varchar tran_fee_amount                             [9];  /* added 01-29-99 by IG */
   varchar cvc_data                                    [4];  /* added 01-29-99 by IG */
   varchar verify_mag_stripe                           [2];  /* added 02-09-99 by IG */
   varchar saf                                         [2];  /* added 02-09-99 by IG */
   varchar security_response_code                      [3];  /* added 02-09-99 by IG */
   varchar service_code                                [4];  /* added 02-09-99 by IG */
   varchar source_pin_format                           [3];  /* added 02-09-99 by IG */
   varchar dest_pin_format                             [3];  /* added 02-09-99 by IG */
   varchar voice_auth                                  [2];  /* added 02-09-99 by IG */
   varchar actual_amount                               [13]; /* AP IG, Equitable 02-10-99 */
   varchar reversal_amount                             [13]; /* AP IG, Equitable 02-10-99 */
   varchar voice_auth_text                             [241]; /* IG 02-22-99 */
   varchar operator_id                                 [21];  /* IA 03-09-99 */
   varchar workstation                                 [21];  /* IA 03-16-99 */
   varchar orig_auth_number                            [7];   /* IA 04-08-99 */
   varchar ticket_nbr									[16];
   varchar system_date                                 [9];
   varchar def_gross_amt                               [13];
   varchar monthly_amort_amt                           [13];
}db_tlf01;

struct
{
    char transaction_id                     [21]; 

    char entry_type                         ;
    char tpdu_id                            [16];
    char issuer_id                          [21];
    char acquirer_id                        [21];
    char tx_key                             ;
    char terminal_id                        [9];
    char terminal_type                      [3];
    char response_text                      [41];
    char card_num_len                       [3];
    char card_num                           [20];
    char exp_date                           [5];
    char total_amount                       [13];
    char add_amounts                        [25];
    char invoice_number                     [9];
    char orig_amount                        [13];
    char auth_number                        [7];
    char processing_code                    [7];
    char sys_trace_audit_num                [7];
    char orig_sys_trace_num                 [7];
    char pos_entry_mode                     [5];
    char nii                                [5];
    char pos_condition_code                 [3];
    char track1                             [77];
    char track2                             [38];
    char retrieval_ref_num                  [13];
    char orig_retrieval_ref_num             [13];
    char merchant_id                        [16];
    char orig_message                       [5];
    char settlement_total                   [17];
    char message_type                       [5];
    char card_holder_name                   [31];
    char general_status                     ;
    char originator_queue                   [17];
    char originator_info                    [33];
    char batch_number                       [7];
    char response_code                      [3];
    char date_yyyymmdd                      [9];
    char time_hhmmss                        [7];
    char num_sales                          [4];
    char sales_amount                       [13];
    char num_refunds                        [4];
    char refund_amount                      [13];
    char num_dbsales                        [4];
    char dbsales_amount                     [13];
    char num_dbrefunds                      [4];
    char dbrefund_amount                    [13];
    char pin_block                          [19];
    char tax_amount                         [13];
    char tip_amount                         [13];
    char tran_start_time                    [17];
    char host_start_time                    [17];
    char host_finish_time                   [17];
    char tran_finish_time                   [17];
    char settle_file_prefix                 [7];
    char resp_source_len                    [3];
    char visa_char_indicator                ;
    char visa_tran_id                       [16];
    char visa_validation_code               [5];
    char mcard_banknet_len                  [4];
    char mcard_banknet                      [51];
    char agent_id_len                       [4];
    char agent_id                           [12];
    char cvc                                ;
    char settlement_date                    [5];

    char category_code                      [5];
    char conversion_rate                    [10];
    char product_code                       [9];
    char odometer                           [8];
    char organization_id                    [5];
    char dynamic_keychange                  ;

   char source_key                          [49];
   char txn_cnt                            [4];
   char dcf01_retired_cwk                  [49];
   char dest_key                           [49];
   char ncf01_retired_cwk                  [49];
   char handler_queue        		       [8];
   char authorizing_host_queue		   	   [8];
   char max_net_consec_tmouts              [4];
   char max_active_txns                    [4];
   char forwarding_institution_id          [12];
   char remote_nsp_type                    [2];
   char kek                                [17]; 
   char acquiring_id                       [12];
   char outstanding_balance                [13]; 
   char credit_limit                       [13];
   char nfi_name                           [11];
   char nfi_seq_nbr                        [7];
   char nfi_start_date                     [9];
   char nfi_end_date                       [9];
   char resp_source                        [26];

   char origin                             [3];
   char auth_1                             [3];
   char auth_2                             [3];
   char update_mask                        [2];
   char type_of_data                       [3];
   char down_payment                       [13];
   char period                             [3];
   char interest_rate                      [5];
   char total_interest                     [13];
   char redemption_amount                  [13];
   char vehicle_number                     [9];

   char profile                                    [3];
   char nbr_of_prod_codes                          [3];
   
   char product1_code                              [7];
   char product1_quantity                          [3];
   char product1_amount                            [13];
   char product2_code                              [7];
   char product2_quantity                          [3];
   char product2_amount                            [13];
   char product3_code                              [7];
   char product3_quantity                          [3];
   char product3_amount                            [13];
   char product4_code                              [7];
   char product4_quantity                          [3];
   char product4_amount                            [13];
   char product5_code                              [7];
   char product5_quantity                          [3];
   char product5_amount                            [13];
   char product6_code                              [7];
   char product6_quantity                          [3];
   char product6_amount                            [13];
   char product7_code                              [7];
   char product7_quantity                          [3];
   char product7_amount                            [13];
   char product8_code                              [7];
   char product8_quantity                          [3];
   char product8_amount                            [13];
   char product9_code                              [7];
   char product9_quantity                          [3];
   char product9_amount                            [13];
   char product10_code                              [7];
   char product10_quantity                          [3];
   char product10_amount                            [13];
   char product11_code                              [7];
   char product11_quantity                          [3];
   char product11_amount                            [13];
   char product12_code                              [7];
   char product12_quantity                          [3];
   char product12_amount                            [13];
   char product13_code                              [7];
   char product13_quantity                          [3];
   char product13_amount                            [13];
   char product14_code                              [7];
   char product14_quantity                          [3];
   char product14_amount                            [13];
   char product15_code                              [7];
   char product15_quantity                          [3];
   char product15_amount                            [13];
   char product16_code                              [7];
   char product16_quantity                          [3];
   char product16_amount                            [13];
   char product17_code                              [7];
   char product17_quantity                          [3];
   char product17_amount                            [13];
   char product18_code                              [7];
   char product18_quantity                          [3];
   char product18_amount                            [13];
   char product19_code                              [7];
   char product19_quantity                          [3];
   char product19_amount                            [13];
   char product20_code                              [7];
   char product20_quantity                          [3];
   char product20_amount                            [13];
   char visa_merchant_id                            [16];
   char cash_bonus                                  [2];  /* added 01-29-99 by IG */
   char deferred_factor                             [8];  /* added 01-29-99 by IG */
   char deferred_term_length                        [4];  /* added 01-29-99 by IG */
   char currency_code                               [4];  /* added 01-29-99 by IG */
   char transmission_timestamp                      [11]; /* added 01-29-99 by IG */
   char tran_fee_amount                             [9];  /* added 01-29-99 by IG */
   char cvc_data                                    [4];  /* added 01-29-99 by IG */

   char verify_mag_stripe                           [2];  /* added 02-09-99 by IG */
   char saf                                         [2];  /* added 02-09-99 by IG */
   char security_response_code                      [3];  /* added 02-09-99 by IG */
   char service_code                                [4];  /* added 02-09-99 by IG */
   char source_pin_format                           [3];  /* added 02-09-99 by IG */
   char dest_pin_format                             [3];  /* added 02-09-99 by IG */
   char voice_auth                                  [2];  /* added 02-09-99 by IG */
   char actual_amount                               [13]; /* AP IG, Equitable 02-10-99 */
   char reversal_amount                             [13]; /* AP IG, Equitable 02-10-99 */
   char voice_auth_text                             [241]; /* IG 02-22-99 */ 
   char operator_id                                 [21];  /* IA 03-09-99 */
   char workstation                                 [21];  /* IA 03-16-99 */
   char orig_auth_number                            [7];   /* IA 04-08-99 */
   char ticket_nbr									[16];
   char system_date                                 [9];
   char def_gross_amt                               [13];
   char monthly_amort_amt                           [13];
}pte_tlf01_stip;

struct
{
    varchar transaction_id                     [21]; 

    varchar entry_type                         [1];
    varchar tpdu_id                            [16];
    varchar issuer_id                          [21];
    varchar acquirer_id                        [21];
    varchar tx_key                             [1];
    varchar terminal_id                        [9];
    varchar terminal_type                      [3];
    varchar response_text                      [41];
    varchar card_num_len                       [3];
    varchar card_num                           [20];
    varchar exp_date                           [5];
    varchar total_amount                       [13];
    varchar add_amounts                        [25];
    varchar invoice_number                     [9];
    varchar orig_amount                        [13];
    varchar auth_number                        [7];
    varchar processing_code                    [7];
    varchar sys_trace_audit_num                [7];
    varchar orig_sys_trace_num                 [7];
    varchar pos_entry_mode                     [5];
    varchar nii                                [5];
    varchar pos_condition_code                 [3];
    varchar track1                             [77];
    varchar track2                             [38];
    varchar retrieval_ref_num                  [13];
    varchar orig_retrieval_ref_num             [13];
    varchar merchant_id                        [16];
    varchar orig_message                       [5];
    varchar settlement_total                   [17];
    varchar message_type                       [5];
    varchar card_holder_name                   [31];
    varchar general_status                     [1];
    varchar originator_queue                   [17];
    varchar originator_info                    [33];
    varchar batch_number                       [7];
    varchar response_code                      [3];
    varchar date_yyyymmdd                      [9];
    varchar time_hhmmss                        [7];
    varchar num_sales                          [4];
    varchar sales_amount                       [13];
    varchar num_refunds                        [4];
    varchar refund_amount                      [13];
    varchar num_dbsales                        [4];
    varchar dbsales_amount                     [13];
    varchar num_dbrefunds                      [4];
    varchar dbrefund_amount                    [13];
    varchar pin_block                          [19];
    varchar tax_amount                         [13];
    varchar tip_amount                         [13];
    varchar tran_start_time                    [17];
    varchar host_start_time                    [17];
    varchar host_finish_time                   [17];
    varchar tran_finish_time                   [17];
    varchar settle_file_prefix                 [7];
    varchar resp_source_len                    [3];
    varchar visa_char_indicator                [1];
    varchar visa_tran_id                       [16];
    varchar visa_validation_code               [5];
    varchar mcard_banknet_len                  [4];
    varchar mcard_banknet                      [51];
    varchar agent_id_len                       [4];
    varchar agent_id                           [12];
    varchar cvc                                [1];
    varchar settlement_date                    [5];

    varchar category_code                      [5];
    varchar conversion_rate                    [10];
    varchar product_code                       [9];
    varchar odometer                           [8];
    varchar organization_id                    [5];
    varchar dynamic_keychange                  [1];

   varchar source_key                         [49];
   varchar txn_cnt                            [4];
   varchar dcf01_retired_cwk                  [49];
   varchar dest_key                           [49];
   varchar ncf01_retired_cwk                  [49];
   varchar handler_queue        		      [8];
   varchar authorizing_host_queue		   	  [8];
   varchar max_net_consec_tmouts              [4];
   varchar max_active_txns                    [4];
   varchar forwarding_institution_id          [12];
   varchar remote_nsp_type                    [2];
   varchar kek                                [17];
   varchar acquiring_id                       [12];
   varchar outstanding_balance                [13];
   varchar credit_limit                       [13];
   varchar nfi_name                           [11];
   varchar nfi_seq_nbr                        [7];
   varchar nfi_start_date                     [9];
   varchar nfi_end_date                       [9];
   varchar resp_source                        [26];
   varchar origin                             [3];
   varchar auth_1                             [3];
   varchar auth_2                             [3];
   varchar update_mask                        [2];
   varchar type_of_data                       [3];
   varchar down_payment                       [13];
   varchar period                             [3];
   varchar interest_rate                      [5];
   varchar total_interest                     [13];
   varchar redemption_amount                  [13];
   varchar vehicle_number                     [9];

   varchar profile                                    [3];
   varchar nbr_of_prod_codes                          [3];
   
   varchar product1_code                              [7];
   varchar product1_quantity                          [3];
   varchar product1_amount                            [13];
   varchar product2_code                              [7];
   varchar product2_quantity                          [3];
   varchar product2_amount                            [13];
   varchar product3_code                              [7];
   varchar product3_quantity                          [3];
   varchar product3_amount                            [13];
   varchar product4_code                              [7];
   varchar product4_quantity                          [3];
   varchar product4_amount                            [13];
   varchar product5_code                              [7];
   varchar product5_quantity                          [3];
   varchar product5_amount                            [13];
   varchar product6_code                              [7];
   varchar product6_quantity                          [3];
   varchar product6_amount                            [13];
   varchar product7_code                              [7];
   varchar product7_quantity                          [3];
   varchar product7_amount                            [13];
   varchar product8_code                              [7];
   varchar product8_quantity                          [3];
   varchar product8_amount                            [13];
   varchar product9_code                              [7];
   varchar product9_quantity                          [3];
   varchar product9_amount                            [13];
   varchar product10_code                              [7];
   varchar product10_quantity                          [3];
   varchar product10_amount                            [13];
   varchar product11_code                              [7];
   varchar product11_quantity                          [3];
   varchar product11_amount                            [13];
   varchar product12_code                              [7];
   varchar product12_quantity                          [3];
   varchar product12_amount                            [13];
   varchar product13_code                              [7];
   varchar product13_quantity                          [3];
   varchar product13_amount                            [13];
   varchar product14_code                              [7];
   varchar product14_quantity                          [3];
   varchar product14_amount                            [13];
   varchar product15_code                              [7];
   varchar product15_quantity                          [3];
   varchar product15_amount                            [13];
   varchar product16_code                              [7];
   varchar product16_quantity                          [3];
   varchar product16_amount                            [13];
   varchar product17_code                              [7];
   varchar product17_quantity                          [3];
   varchar product17_amount                            [13];
   varchar product18_code                              [7];
   varchar product18_quantity                          [3];
   varchar product18_amount                            [13];
   varchar product19_code                              [7];
   varchar product19_quantity                          [3];
   varchar product19_amount                            [13];
   varchar product20_code                              [7];
   varchar product20_quantity                          [3];
   varchar product20_amount                            [13];
   varchar visa_merchant_id                            [16];
   varchar cash_bonus                                  [2];  /* added 01-29-99 by IG */
   varchar deferred_factor                             [8];  /* added 01-29-99 by IG */
   varchar deferred_term_length                        [4];  /* added 01-29-99 by IG */
   varchar currency_code                               [4];  /* added 01-29-99 by IG */
   varchar transmission_timestamp                      [11]; /* added 01-29-99 by IG */
   varchar tran_fee_amount                             [9];  /* added 01-29-99 by IG */
   varchar cvc_data                                    [4];  /* added 01-29-99 by IG */
   varchar verify_mag_stripe                           [2];  /* added 02-09-99 by IG */
   varchar saf                                         [2];  /* added 02-09-99 by IG */
   varchar security_response_code                      [3];  /* added 02-09-99 by IG */
   varchar service_code                                [4];  /* added 02-09-99 by IG */
   varchar source_pin_format                           [3];  /* added 02-09-99 by IG */
   varchar dest_pin_format                             [3];  /* added 02-09-99 by IG */
   varchar voice_auth                                  [2];  /* added 02-09-99 by IG */
   varchar actual_amount                               [13]; /* AP IG, Equitable 02-10-99 */
   varchar reversal_amount                             [13]; /* AP IG, Equitable 02-10-99 */
   varchar voice_auth_text                             [241]; /* IG 02-22-99 */
   varchar operator_id                                 [21];  /* IA 03-09-99 */
   varchar workstation                                 [21];  /* IA 03-16-99 */
   varchar orig_auth_number                            [7];   /* IA 04-08-99 */
   varchar ticket_nbr									[16];
   varchar system_date                                 [9];
   varchar def_gross_amt                               [13];
   varchar monthly_amort_amt                           [13];
}db_tlf01_stip, db_tlf01_stip_structure;

/* EMV Raw Data for Reversals/Voids */
typedef struct
{
   unsigned short len;
   unsigned char  emv_data[300];

}RAWEMVDATA;

EXEC SQL TYPE RAWEMVDATA is VARRAW(5000);

/* PAD Raw Data */
typedef struct
{
   unsigned short len;
   unsigned char  raw_data[300];

}PADRAWDATA;
EXEC SQL TYPE PADRAWDATA is VARRAW(5000);

struct
{
      char       tran_id[21];   
      char       sys_date[9];
      char       len[4];
      RAWEMVDATA emvblock;
}
db_emv_raw;

struct
{
      char       tran_id[21];   
      char       sys_date[9];
      char       len[4];
      PADRAWDATA padrawblock;
}
db_pad_raw;

struct
{
   char network_id                                 [11];
   char network_type                               [2];

   char  name                                      [30];
   char  status                                    [2];
   char  totals_ind                                [2];
   char  statistics_ind                            [2];
   char  acquirer_inst_id_code                     [12];
   char  forwarding_inst_id_code                   [12];
   char  receiving_inst_id_code                    [12];
   char  remote_nsp_type                           [2];
   char  pin_type                                  [2];
   char  encr_type                                 [2];
   char  pad_char                                  [2];
   char  cwk                                       [49];
   char  kek                                       [17];
   char  retired_cwk                               [49];
   char  auto_logon                                [2];
   char  echo_interval                             [4];
   char  max_consecutive_timeouts                  [4];
   char  max_active_txns                           [4];
   char  que_name                                  [12];
   char  local_nsp_type                            [8];
   char  request_timer                             [4];
   char  idle_line_timer                           [4];
   char  advice_repeat_counter                     [3];
   char  admin_message_timer                       [4];
   char  store_forward_processing                  [2];
   char  currency_code_purchase                    [4];
   char  currency_code_cash                        [4];
   char  country_code                              [4];
   char  station_id1                               [7];
   char  station_id2                               [7];
   char  prev_src_station                          [7];
   char  tpdu_id                                   [16];
   
   char  identifier1                               [7];
   char  identifier2                               [7];
   char  identifier3                               [7];
   char  identifier4                               [7];
   char  identifier5                               [7];
   char  identifier6                               [7];
   char  identifier7                               [7];
   char  identifier8                               [7];
   char  identifier9                               [7];
   char  identifier10                              [7];
   
   char  processing_code1                          [7];
   char  processing_code2                          [7];
   char  processing_code3                          [7];
   char  processing_code4                          [7];
   char  processing_code5                          [7];
   char  processing_code6                          [7];
   char  processing_code7                          [7];
   char  processing_code8                          [7];
   char  processing_code9                          [7];
   char  processing_code10                         [7];
   char  processing_code11                         [7];
   char  processing_code12                         [7];
   char  processing_code13                         [7];
   char  processing_code14                         [7];
   char  processing_code15                         [7];
   char  processing_code16                         [7];
   char  processing_code17                         [7];
   char  processing_code18                         [7];
   char  processing_code19                         [7];
   char  processing_code20                         [7];
   char  zmk                                       [49];
   char  neg_access_code                           [7];
      
} pte_ncf01;

struct
{
   varchar network_id                              [11];
   varchar network_type                            [2];

   varchar  name                                   [30];
   varchar  status                                 [2];
   varchar  totals_ind                             [2];
   varchar  statistics_ind                         [2];
   varchar  acquirer_inst_id_code                  [12];
   varchar  forwarding_inst_id_code                [12];
   varchar  receiving_inst_id_code                 [12];
   varchar  remote_nsp_type                        [2];
   varchar  pin_type                               [2];
   varchar  encr_type                              [2];
   varchar  pad_char                               [2];
   varchar  cwk                                    [49];
   varchar  kek                                    [17];
   varchar  retired_cwk                            [49];
   varchar  auto_logon                             [2];
   varchar  echo_interval                          [4];
   varchar  max_consecutive_timeouts               [4];
   varchar  max_active_txns                        [4];
   varchar  que_name                               [12];
   varchar  local_nsp_type                         [8];
   varchar  request_timer                          [4];
   varchar  idle_line_timer                        [4];
   varchar  advice_repeat_counter                  [3];
   varchar  admin_message_timer                    [4];
   varchar  store_forward_processing               [2];
   varchar  currency_code_purchase                 [4];
   varchar  currency_code_cash                     [4];
   varchar  country_code                           [4];
   varchar  station_id1                            [7];
   varchar  station_id2                            [7];
   varchar  prev_src_station                       [7];
   varchar  tpdu_id                                [16];
   
   varchar  identifier1                            [7];
   varchar  identifier2                            [7];
   varchar  identifier3                            [7];
   varchar  identifier4                            [7];
   varchar  identifier5                            [7];
   varchar  identifier6                            [7];
   varchar  identifier7                            [7];
   varchar  identifier8                            [7];
   varchar  identifier9                            [7];
   varchar  identifier10                           [7];
   
   varchar  processing_code1                       [7];
   varchar  processing_code2                       [7];
   varchar  processing_code3                       [7];
   varchar  processing_code4                       [7];
   varchar  processing_code5                       [7];
   varchar  processing_code6                       [7];
   varchar  processing_code7                       [7];
   varchar  processing_code8                       [7];
   varchar  processing_code9                       [7];
   varchar  processing_code10                      [7];
   varchar  processing_code11                      [7];
   varchar  processing_code12                      [7];
   varchar  processing_code13                      [7];
   varchar  processing_code14                      [7];
   varchar  processing_code15                      [7];
   varchar  processing_code16                      [7];
   varchar  processing_code17                      [7];
   varchar  processing_code18                      [7];
   varchar  processing_code19                      [7];
   varchar  processing_code20                      [7];
   varchar  zmk                                    [49];
   varchar  neg_access_code                        [7];

} db_ncf01;

void bch20_to_db( pBCH20 bch20_ptr )
{
   memcpy (&pte_bch20, bch20_ptr, sizeof(pte_bch20));

   /* Unix implements unsigned chars greater than 127 by wrapping around zero.
    * That causes the tx_key in the database to not be accurate.  So for tx_keys
    * above 127, subtract 100.  This puts the request tx_key, not the response
    * tx_key, into the database.
    */
   if ( bch20_ptr->tx_key > 127 )
      pte_bch20.tx_key -= 100;
}

void db_to_bch20( pBCH20 bch20_ptr)
{
   memset(bch20_ptr, 0, sizeof(BCH20));
   memcpy(bch20_ptr->primary_key.device_id, db_bch20.device_id.arr, db_bch20.device_id.len);
   memcpy(bch20_ptr->primary_key.batch_nbr, db_bch20.batch_nbr.arr, db_bch20.batch_nbr.len);
   memcpy(bch20_ptr->primary_key.retrieval_ref_num, db_bch20.retrieval_ref_num.arr, db_bch20.retrieval_ref_num.len);
   memcpy(bch20_ptr->merchant_id, db_bch20.merchant_id.arr, db_bch20.merchant_id.len);
   memcpy(bch20_ptr->processing_code, db_bch20.processing_code.arr, db_bch20.processing_code.len);
   memcpy(bch20_ptr->tran_amount, db_bch20.tran_amount.arr, db_bch20.tran_amount.len);
   memcpy(bch20_ptr->response_code, db_bch20.response_code.arr, db_bch20.response_code.len);
   memcpy(bch20_ptr->auth_number, db_bch20.auth_number.arr, db_bch20.auth_number.len);
   memcpy(bch20_ptr->tran_date, db_bch20.tran_date.arr, db_bch20.tran_date.len);
   memcpy(bch20_ptr->tran_time, db_bch20.tran_time.arr, db_bch20.tran_time.len);
   memcpy(bch20_ptr->transaction_id, db_bch20.transaction_id.arr, db_bch20.transaction_id.len);
   memcpy(bch20_ptr->message_type, db_bch20.message_type.arr, db_bch20.message_type.len);
   memcpy(bch20_ptr->card_nbr, db_bch20.card_nbr.arr, db_bch20.card_nbr.len);
   memcpy(bch20_ptr->invoice_nbr, db_bch20.invoice_nbr.arr, db_bch20.invoice_nbr.len);
   memcpy(bch20_ptr->settle_file_prefix, db_bch20.settle_file_prefix.arr, db_bch20.settle_file_prefix.len);
   memcpy(bch20_ptr->product_code, db_bch20.product_code.arr, db_bch20.product_code.len);
   memcpy(bch20_ptr->odometer, db_bch20.odometer.arr, db_bch20.odometer.len);
   memcpy(bch20_ptr->sys_trace_audit_num, db_bch20.sys_trace_audit_num.arr, db_bch20.sys_trace_audit_num.len);
   bch20_ptr->tx_key = db_bch20.tx_key.arr[0];
   bch20_ptr->bin_type = db_bch20.bin_type.arr[0];

   memcpy(bch20_ptr->type_of_data, db_bch20.type_of_data.arr, db_bch20.type_of_data.len);
   memcpy(bch20_ptr->down_payment, db_bch20.down_payment.arr, db_bch20.down_payment.len);
   memcpy(bch20_ptr->period, db_bch20.period.arr, db_bch20.period.len);
   memcpy(bch20_ptr->interest_rate, db_bch20.interest_rate.arr, db_bch20.interest_rate.len);
   memcpy(bch20_ptr->total_interest, db_bch20.total_interest.arr, db_bch20.total_interest.len);
   memcpy(bch20_ptr->redemption_amount, db_bch20.redemption_amount.arr, db_bch20.redemption_amount.len);
   memcpy(bch20_ptr->vehicle_number, db_bch20.vehicle_number.arr, db_bch20.vehicle_number.len);
   memcpy(bch20_ptr->pos_entry_mode, db_bch20.pos_entry_mode.arr, db_bch20.pos_entry_mode.len);
   memcpy(bch20_ptr->profile, db_bch20.profile.arr, db_bch20.profile.len);
   
   memcpy(bch20_ptr->aportionment_flag, db_bch20.aportionment_flag.arr, db_bch20.aportionment_flag.len);
   memcpy(bch20_ptr->exp_date, db_bch20.exp_date.arr, db_bch20.exp_date.len);
   memcpy(bch20_ptr->open_date, db_bch20.open_date.arr, db_bch20.open_date.len);
   memcpy(bch20_ptr->open_time, db_bch20.open_time.arr, db_bch20.open_time.len);
   memcpy(bch20_ptr->cash_bonus, db_bch20.cash_bonus.arr, db_bch20.cash_bonus.len);
   memcpy(bch20_ptr->processed, db_bch20.processed.arr, db_bch20.processed.len);

   /* The following 2 lines have been added by SDG */
	memcpy(bch20_ptr->transmission_timestamp, db_bch20.transmission_timestamp.arr, db_bch20.transmission_timestamp.len);
	memcpy(bch20_ptr->mcard_banknet, db_bch20.mcard_banknet.arr, db_bch20.mcard_banknet.len);
	memcpy(bch20_ptr->ticket_nbr, db_bch20.ticket_nbr.arr, db_bch20.ticket_nbr.len);
	memcpy(bch20_ptr->def_gross_amt, db_bch20.def_gross_amt.arr, db_bch20.def_gross_amt.len);
	memcpy(bch20_ptr->term, db_bch20.term.arr, db_bch20.term.len);
	memcpy(bch20_ptr->product_codes[0].code, db_bch20.product1_code.arr, db_bch20.product1_code.len);
    memcpy(bch20_ptr->product_codes[1].code, db_bch20.product2_code.arr, db_bch20.product2_code.len);
    memcpy(bch20_ptr->product_codes[19].code, db_bch20.product20_code.arr, db_bch20.product20_code.len);
    memcpy(bch20_ptr->product_codes[16].amount, db_bch20.product17_amount.arr, db_bch20.product17_amount.len);
    memcpy(bch20_ptr->product_codes[13].code, db_bch20.product14_code.arr, db_bch20.product14_code.len);
    memcpy(bch20_ptr->product_codes[13].quantity, db_bch20.product14_quantity.arr, db_bch20.product14_quantity.len);
    memcpy(bch20_ptr->product_codes[13].amount, db_bch20.product14_amount.arr, db_bch20.product14_amount.len);
    memcpy(bch20_ptr->product_codes[6].amount, db_bch20.product7_amount.arr, db_bch20.product7_amount.len);
    memcpy(bch20_ptr->product_codes[5].code, db_bch20.product6_code.arr, db_bch20.product6_code.len);
    memcpy(bch20_ptr->product_codes[12].amount, db_bch20.product13_amount.arr, db_bch20.product13_amount.len);
    memcpy(bch20_ptr->product_codes[10].amount, db_bch20.product11_amount.arr, db_bch20.product11_amount.len);//MC02_APR2024
    memcpy(bch20_ptr->product_codes[1].amount, db_bch20.product2_amount.arr, db_bch20.product2_amount.len);
    memcpy(bch20_ptr->product_codes[4].code, db_bch20.product5_code.arr, db_bch20.product5_code.len);
    memcpy(bch20_ptr->product_codes[4].amount, db_bch20.product5_amount.arr, db_bch20.product5_amount.len);
    memcpy(bch20_ptr->product_codes[4].quantity, db_bch20.product5_quantity.arr, db_bch20.product5_quantity.len);
    memcpy(bch20_ptr->product_codes[7].code, db_bch20.product8_code.arr, db_bch20.product8_code.len);
}

void tlf01_to_db( pTLF01 tlf01_ptr )
{
	memcpy (&pte_tlf01, tlf01_ptr, sizeof(pte_tlf01));
}

void db_to_tlf01( pTLF01 tlf01_ptr )
{
   memset(tlf01_ptr, 0, sizeof(TLF01));
   memcpy(tlf01_ptr->primary_key.transaction_id, db_tlf01.transaction_id.arr, db_tlf01.transaction_id.len);
   tlf01_ptr->entry_type = db_tlf01.entry_type.arr[0];
   memcpy(tlf01_ptr->tpdu_id, db_tlf01.tpdu_id.arr, db_tlf01.tpdu_id.len);
   memcpy(tlf01_ptr->issuer_id, db_tlf01.issuer_id.arr, db_tlf01.issuer_id.len);
   memcpy(tlf01_ptr->acquirer_id, db_tlf01.acquirer_id.arr, db_tlf01.acquirer_id.len);
   tlf01_ptr->tx_key = db_tlf01.tx_key.arr[0];
   memcpy(tlf01_ptr->terminal_id, db_tlf01.terminal_id.arr, db_tlf01.terminal_id.len);
   memcpy(tlf01_ptr->terminal_type, db_tlf01.terminal_type.arr, db_tlf01.terminal_type.len);
   memcpy(tlf01_ptr->response_text, db_tlf01.response_text.arr, db_tlf01.response_text.len);
   memcpy(tlf01_ptr->card_num_len, db_tlf01.card_num_len.arr, db_tlf01.card_num_len.len);
   memcpy(tlf01_ptr->card_num, db_tlf01.card_num.arr, db_tlf01.card_num.len);
   memcpy(tlf01_ptr->exp_date, db_tlf01.exp_date.arr, db_tlf01.exp_date.len);
   memcpy(tlf01_ptr->total_amount, db_tlf01.total_amount.arr, db_tlf01.total_amount.len);
   memcpy(tlf01_ptr->add_amounts, db_tlf01.add_amounts.arr, db_tlf01.add_amounts.len);
   memcpy(tlf01_ptr->invoice_number, db_tlf01.invoice_number.arr, db_tlf01.invoice_number.len);
   memcpy(tlf01_ptr->orig_amount, db_tlf01.orig_amount.arr, db_tlf01.orig_amount.len);
   memcpy(tlf01_ptr->auth_number, db_tlf01.auth_number.arr, db_tlf01.auth_number.len);
   memcpy(tlf01_ptr->processing_code, db_tlf01.processing_code.arr, db_tlf01.processing_code.len);
   memcpy(tlf01_ptr->sys_trace_audit_num, db_tlf01.sys_trace_audit_num.arr, db_tlf01.sys_trace_audit_num.len);
   memcpy(tlf01_ptr->orig_sys_trace_num, db_tlf01.orig_sys_trace_num.arr, db_tlf01.orig_sys_trace_num.len);
   memcpy(tlf01_ptr->pos_entry_mode, db_tlf01.pos_entry_mode.arr, db_tlf01.pos_entry_mode.len);
   memcpy(tlf01_ptr->nii, db_tlf01.nii.arr, db_tlf01.nii.len);
   memcpy(tlf01_ptr->pos_condition_code, db_tlf01.pos_condition_code.arr, db_tlf01.pos_condition_code.len);
   memcpy(tlf01_ptr->track1, db_tlf01.track1.arr, db_tlf01.track1.len);
   memcpy(tlf01_ptr->track2, db_tlf01.track2.arr, db_tlf01.track2.len);
   memcpy(tlf01_ptr->retrieval_ref_num, db_tlf01.retrieval_ref_num.arr, db_tlf01.retrieval_ref_num.len);
   memcpy(tlf01_ptr->orig_retrieval_ref_num, db_tlf01.orig_retrieval_ref_num.arr, db_tlf01.orig_retrieval_ref_num.len);
   memcpy(tlf01_ptr->merchant_id, db_tlf01.merchant_id.arr, db_tlf01.merchant_id.len);
   memcpy(tlf01_ptr->orig_message, db_tlf01.orig_message.arr, db_tlf01.orig_message.len);
   memcpy(tlf01_ptr->settlement_total, db_tlf01.settlement_total.arr, db_tlf01.settlement_total.len);
   memcpy(tlf01_ptr->message_type, db_tlf01.message_type.arr, db_tlf01.message_type.len);
   memcpy(tlf01_ptr->card_holder_name, db_tlf01.card_holder_name.arr, db_tlf01.card_holder_name.len);
   tlf01_ptr->general_status = db_tlf01.general_status.arr[0];
   memcpy(tlf01_ptr->originator_queue, db_tlf01.originator_queue.arr, db_tlf01.originator_queue.len);
   memcpy(tlf01_ptr->originator_info, db_tlf01.originator_info.arr, db_tlf01.originator_info.len);
   memcpy(tlf01_ptr->batch_number, db_tlf01.batch_number.arr, db_tlf01.batch_number.len);
   memcpy(tlf01_ptr->response_code, db_tlf01.response_code.arr, db_tlf01.response_code.len);
   memcpy(tlf01_ptr->date_yyyymmdd, db_tlf01.date_yyyymmdd.arr, db_tlf01.date_yyyymmdd.len);
   memcpy(tlf01_ptr->time_hhmmss, db_tlf01.time_hhmmss.arr, db_tlf01.time_hhmmss.len);
   memcpy(tlf01_ptr->num_sales, db_tlf01.num_sales.arr, db_tlf01.num_sales.len);
   memcpy(tlf01_ptr->sales_amount, db_tlf01.sales_amount.arr, db_tlf01.sales_amount.len);
   memcpy(tlf01_ptr->num_refunds, db_tlf01.num_refunds.arr, db_tlf01.num_refunds.len);
   memcpy(tlf01_ptr->refund_amount, db_tlf01.refund_amount.arr, db_tlf01.refund_amount.len);
   memcpy(tlf01_ptr->num_dbsales, db_tlf01.num_dbsales.arr, db_tlf01.num_dbsales.len);
   memcpy(tlf01_ptr->dbsales_amount, db_tlf01.dbsales_amount.arr, db_tlf01.dbsales_amount.len);
   memcpy(tlf01_ptr->num_dbrefunds, db_tlf01.num_dbrefunds.arr, db_tlf01.num_dbrefunds.len);
   memcpy(tlf01_ptr->dbrefund_amount, db_tlf01.dbrefund_amount.arr, db_tlf01.dbrefund_amount.len);
   memcpy(tlf01_ptr->pin_block, db_tlf01.pin_block.arr, db_tlf01.pin_block.len);
   memcpy(tlf01_ptr->tax_amount, db_tlf01.tax_amount.arr, db_tlf01.tax_amount.len);
   memcpy(tlf01_ptr->tip_amount, db_tlf01.tip_amount.arr, db_tlf01.tip_amount.len);
   memcpy(tlf01_ptr->tran_start_time, db_tlf01.tran_start_time.arr, db_tlf01.tran_start_time.len);
   memcpy(tlf01_ptr->host_start_time, db_tlf01.host_start_time.arr, db_tlf01.host_start_time.len);
   memcpy(tlf01_ptr->host_finish_time, db_tlf01.host_finish_time.arr, db_tlf01.host_finish_time.len);
   memcpy(tlf01_ptr->tran_finish_time, db_tlf01.tran_finish_time.arr, db_tlf01.tran_finish_time.len);
   memcpy(tlf01_ptr->settle_file_prefix, db_tlf01.settle_file_prefix.arr, db_tlf01.settle_file_prefix.len);
   memcpy(tlf01_ptr->resp_source_len, db_tlf01.resp_source_len.arr, db_tlf01.resp_source_len.len);
   tlf01_ptr->visa_char_indicator = db_tlf01.visa_char_indicator.arr[0];
   memcpy(tlf01_ptr->visa_tran_id, db_tlf01.visa_tran_id.arr, db_tlf01.visa_tran_id.len);
   memcpy(tlf01_ptr->visa_validation_code, db_tlf01.visa_validation_code.arr, db_tlf01.visa_validation_code.len);
   memcpy(tlf01_ptr->mcard_banknet_len, db_tlf01.mcard_banknet_len.arr, db_tlf01.mcard_banknet_len.len);
   memcpy(tlf01_ptr->mcard_banknet, db_tlf01.mcard_banknet.arr, db_tlf01.mcard_banknet.len);
   memcpy(tlf01_ptr->agent_id_len, db_tlf01.agent_id_len.arr, db_tlf01.agent_id_len.len);
   memcpy(tlf01_ptr->agent_id, db_tlf01.agent_id.arr, db_tlf01.agent_id.len);
   tlf01_ptr->cvc = db_tlf01.cvc.arr[0];
   memcpy(tlf01_ptr->settlement_date, db_tlf01.settlement_date.arr, db_tlf01.settlement_date.len);
   memcpy(tlf01_ptr->category_code, db_tlf01.category_code.arr, db_tlf01.category_code.len);
   memcpy(tlf01_ptr->conversion_rate, db_tlf01.conversion_rate.arr, db_tlf01.conversion_rate.len);
   memcpy(tlf01_ptr->product_code, db_tlf01.product_code.arr, db_tlf01.product_code.len);
   memcpy(tlf01_ptr->odometer, db_tlf01.odometer.arr, db_tlf01.odometer.len);
   memcpy(tlf01_ptr->organization_id, db_tlf01.organization_id.arr, db_tlf01.organization_id.len);
   tlf01_ptr->dynamic_keychange = db_tlf01.dynamic_keychange.arr[0];

   memcpy(tlf01_ptr->txn_cnt, db_tlf01.txn_cnt.arr, db_tlf01.txn_cnt.len);
   memcpy(tlf01_ptr->source_key, db_tlf01.source_key.arr, db_tlf01.source_key.len);
   memcpy(tlf01_ptr->dcf01_retired_cwk, db_tlf01.dcf01_retired_cwk.arr, db_tlf01.dcf01_retired_cwk.len);
   memcpy(tlf01_ptr->dest_key, db_tlf01.dest_key.arr, db_tlf01.dest_key.len);
   memcpy(tlf01_ptr->ncf01_retired_cwk, db_tlf01.ncf01_retired_cwk.arr, db_tlf01.ncf01_retired_cwk.len);
   memcpy(tlf01_ptr->handler_queue, db_tlf01.handler_queue.arr, db_tlf01.handler_queue.len);
   memcpy(tlf01_ptr->authorizing_host_queue, db_tlf01.authorizing_host_queue.arr, db_tlf01.authorizing_host_queue.len);
   memcpy(tlf01_ptr->max_net_consec_tmouts, db_tlf01.max_net_consec_tmouts.arr, db_tlf01.max_net_consec_tmouts.len);
   memcpy(tlf01_ptr->max_active_txns, db_tlf01.max_active_txns.arr, db_tlf01.max_active_txns.len);
   memcpy(tlf01_ptr->remote_nsp_type, db_tlf01.remote_nsp_type.arr, db_tlf01.remote_nsp_type.len);
   memcpy(tlf01_ptr->kek, db_tlf01.kek.arr, db_tlf01.kek.len);
   
   memcpy(tlf01_ptr->credit_limit, db_tlf01.credit_limit.arr, db_tlf01.credit_limit.len);
   memcpy(tlf01_ptr->forwarding_institution_id, db_tlf01.forwarding_institution_id.arr, db_tlf01.forwarding_institution_id.len);
   memcpy(tlf01_ptr->acquiring_id, db_tlf01.acquiring_id.arr, db_tlf01.acquiring_id.len);
   memcpy(tlf01_ptr->outstanding_balance, db_tlf01.outstanding_balance.arr, db_tlf01.outstanding_balance.len);
   memcpy(tlf01_ptr->nfi_name, db_tlf01.nfi_name.arr, db_tlf01.nfi_name.len);
   memcpy(tlf01_ptr->nfi_seq_nbr, db_tlf01.nfi_seq_nbr.arr, db_tlf01.nfi_seq_nbr.len);
   memcpy(tlf01_ptr->nfi_start_date, db_tlf01.nfi_start_date.arr, db_tlf01.nfi_start_date.len);
   memcpy(tlf01_ptr->nfi_end_date, db_tlf01.nfi_end_date.arr, db_tlf01.nfi_end_date.len);
   memcpy(tlf01_ptr->resp_source, db_tlf01.resp_source.arr, db_tlf01.resp_source.len);
   memcpy(tlf01_ptr->dispensation.origin, db_tlf01.origin.arr, db_tlf01.origin.len);
   memcpy(tlf01_ptr->dispensation.auth_1, db_tlf01.auth_1.arr, db_tlf01.auth_1.len);
   memcpy(tlf01_ptr->dispensation.auth_2, db_tlf01.auth_2.arr, db_tlf01.auth_2.len);
   memcpy(tlf01_ptr->update_mask, db_tlf01.update_mask.arr, db_tlf01.update_mask.len);

   memcpy(tlf01_ptr->type_of_data, db_tlf01.type_of_data.arr, db_tlf01.type_of_data.len);
   memcpy(tlf01_ptr->down_payment, db_tlf01.down_payment.arr, db_tlf01.down_payment.len);
   memcpy(tlf01_ptr->period, db_tlf01.period.arr, db_tlf01.period.len);
   memcpy(tlf01_ptr->interest_rate, db_tlf01.interest_rate.arr, db_tlf01.interest_rate.len);
   memcpy(tlf01_ptr->total_interest, db_tlf01.total_interest.arr, db_tlf01.total_interest.len);
   memcpy(tlf01_ptr->redemption_amount, db_tlf01.redemption_amount.arr, db_tlf01.redemption_amount.len);
   memcpy(tlf01_ptr->vehicle_number, db_tlf01.vehicle_number.arr, db_tlf01.vehicle_number.len);
  
   memcpy(tlf01_ptr->profile, db_tlf01.profile.arr, db_tlf01.profile.len);
   memcpy(tlf01_ptr->nbr_of_prod_codes, db_tlf01.nbr_of_prod_codes.arr, db_tlf01.nbr_of_prod_codes.len);
  
   memcpy(tlf01_ptr->product_codes[0].code, db_tlf01.product1_code.arr, db_tlf01.product1_code.len);
   memcpy(tlf01_ptr->product_codes[0].quantity, db_tlf01.product1_quantity.arr, db_tlf01.product1_quantity.len);
   memcpy(tlf01_ptr->product_codes[0].amount, db_tlf01.product1_amount.arr, db_tlf01.product1_amount.len);   
   memcpy(tlf01_ptr->product_codes[1].code, db_tlf01.product2_code.arr, db_tlf01.product2_code.len);
   memcpy(tlf01_ptr->product_codes[1].quantity, db_tlf01.product2_quantity.arr, db_tlf01.product2_quantity.len);
   memcpy(tlf01_ptr->product_codes[1].amount, db_tlf01.product2_amount.arr, db_tlf01.product2_amount.len);
   memcpy(tlf01_ptr->product_codes[2].code, db_tlf01.product3_code.arr, db_tlf01.product3_code.len);
   memcpy(tlf01_ptr->product_codes[2].quantity, db_tlf01.product3_quantity.arr, db_tlf01.product3_quantity.len);
   memcpy(tlf01_ptr->product_codes[2].amount, db_tlf01.product3_amount.arr, db_tlf01.product3_amount.len);
   memcpy(tlf01_ptr->product_codes[3].code, db_tlf01.product4_code.arr, db_tlf01.product4_code.len);
   memcpy(tlf01_ptr->product_codes[3].quantity, db_tlf01.product4_quantity.arr, db_tlf01.product4_quantity.len);
   memcpy(tlf01_ptr->product_codes[3].amount, db_tlf01.product4_amount.arr, db_tlf01.product4_amount.len);
   memcpy(tlf01_ptr->product_codes[4].code, db_tlf01.product5_code.arr, db_tlf01.product5_code.len);
   memcpy(tlf01_ptr->product_codes[4].quantity, db_tlf01.product5_quantity.arr, db_tlf01.product5_quantity.len);
   memcpy(tlf01_ptr->product_codes[4].amount, db_tlf01.product5_amount.arr, db_tlf01.product5_amount.len);
   memcpy(tlf01_ptr->product_codes[5].code, db_tlf01.product6_code.arr, db_tlf01.product6_code.len);
   memcpy(tlf01_ptr->product_codes[5].quantity, db_tlf01.product6_quantity.arr, db_tlf01.product6_quantity.len);
   memcpy(tlf01_ptr->product_codes[5].amount, db_tlf01.product6_amount.arr, db_tlf01.product6_amount.len);
   memcpy(tlf01_ptr->product_codes[6].code, db_tlf01.product7_code.arr, db_tlf01.product7_code.len);
   memcpy(tlf01_ptr->product_codes[6].quantity, db_tlf01.product7_quantity.arr, db_tlf01.product7_quantity.len);
   memcpy(tlf01_ptr->product_codes[6].amount, db_tlf01.product7_amount.arr, db_tlf01.product7_amount.len);
   memcpy(tlf01_ptr->product_codes[7].code, db_tlf01.product8_code.arr, db_tlf01.product8_code.len);
   memcpy(tlf01_ptr->product_codes[7].quantity, db_tlf01.product8_quantity.arr, db_tlf01.product8_quantity.len);
   memcpy(tlf01_ptr->product_codes[7].amount, db_tlf01.product8_amount.arr, db_tlf01.product8_amount.len);
   memcpy(tlf01_ptr->product_codes[8].code, db_tlf01.product9_code.arr, db_tlf01.product9_code.len);
   memcpy(tlf01_ptr->product_codes[8].quantity, db_tlf01.product9_quantity.arr, db_tlf01.product9_quantity.len);
   memcpy(tlf01_ptr->product_codes[8].amount, db_tlf01.product9_amount.arr, db_tlf01.product9_amount.len);
   memcpy(tlf01_ptr->product_codes[9].code, db_tlf01.product10_code.arr, db_tlf01.product10_code.len);
   memcpy(tlf01_ptr->product_codes[9].quantity, db_tlf01.product10_quantity.arr, db_tlf01.product10_quantity.len);
   memcpy(tlf01_ptr->product_codes[9].amount, db_tlf01.product10_amount.arr, db_tlf01.product10_amount.len);
   memcpy(tlf01_ptr->product_codes[10].code, db_tlf01.product11_code.arr, db_tlf01.product11_code.len);
   memcpy(tlf01_ptr->product_codes[10].quantity, db_tlf01.product11_quantity.arr, db_tlf01.product11_quantity.len);
   memcpy(tlf01_ptr->product_codes[10].amount, db_tlf01.product11_amount.arr, db_tlf01.product11_amount.len);
   memcpy(tlf01_ptr->product_codes[11].code, db_tlf01.product12_code.arr, db_tlf01.product12_code.len);
   memcpy(tlf01_ptr->product_codes[11].quantity, db_tlf01.product12_quantity.arr, db_tlf01.product12_quantity.len);
   memcpy(tlf01_ptr->product_codes[11].amount, db_tlf01.product12_amount.arr, db_tlf01.product12_amount.len);
   memcpy(tlf01_ptr->product_codes[12].code, db_tlf01.product13_code.arr, db_tlf01.product13_code.len);
   memcpy(tlf01_ptr->product_codes[12].quantity, db_tlf01.product13_quantity.arr, db_tlf01.product13_quantity.len);
   memcpy(tlf01_ptr->product_codes[12].amount, db_tlf01.product13_amount.arr, db_tlf01.product13_amount.len);
   memcpy(tlf01_ptr->product_codes[13].code, db_tlf01.product14_code.arr, db_tlf01.product14_code.len);
   memcpy(tlf01_ptr->product_codes[13].quantity, db_tlf01.product14_quantity.arr, db_tlf01.product14_quantity.len);
   memcpy(tlf01_ptr->product_codes[13].amount, db_tlf01.product14_amount.arr, db_tlf01.product14_amount.len);
   memcpy(tlf01_ptr->product_codes[14].code, db_tlf01.product15_code.arr, db_tlf01.product15_code.len);
   memcpy(tlf01_ptr->product_codes[14].quantity, db_tlf01.product15_quantity.arr, db_tlf01.product15_quantity.len);
   memcpy(tlf01_ptr->product_codes[14].amount, db_tlf01.product15_amount.arr, db_tlf01.product15_amount.len);
   memcpy(tlf01_ptr->product_codes[15].code, db_tlf01.product16_code.arr, db_tlf01.product16_code.len);
   memcpy(tlf01_ptr->product_codes[15].quantity, db_tlf01.product16_quantity.arr, db_tlf01.product16_quantity.len);
   memcpy(tlf01_ptr->product_codes[15].amount, db_tlf01.product16_amount.arr, db_tlf01.product16_amount.len);
   memcpy(tlf01_ptr->product_codes[16].code, db_tlf01.product17_code.arr, db_tlf01.product17_code.len);
   memcpy(tlf01_ptr->product_codes[16].quantity, db_tlf01.product17_quantity.arr, db_tlf01.product17_quantity.len);
   memcpy(tlf01_ptr->product_codes[16].amount, db_tlf01.product17_amount.arr, db_tlf01.product17_amount.len);
   memcpy(tlf01_ptr->product_codes[17].code, db_tlf01.product18_code.arr, db_tlf01.product18_code.len);
   memcpy(tlf01_ptr->product_codes[17].quantity, db_tlf01.product18_quantity.arr, db_tlf01.product18_quantity.len);
   memcpy(tlf01_ptr->product_codes[17].amount, db_tlf01.product18_amount.arr, db_tlf01.product18_amount.len);
   memcpy(tlf01_ptr->product_codes[18].code, db_tlf01.product19_code.arr, db_tlf01.product19_code.len);
   memcpy(tlf01_ptr->product_codes[18].quantity, db_tlf01.product19_quantity.arr, db_tlf01.product19_quantity.len);
   memcpy(tlf01_ptr->product_codes[18].amount, db_tlf01.product19_amount.arr, db_tlf01.product19_amount.len);
   memcpy(tlf01_ptr->product_codes[19].code, db_tlf01.product20_code.arr, db_tlf01.product20_code.len);
   memcpy(tlf01_ptr->product_codes[19].quantity, db_tlf01.product20_quantity.arr, db_tlf01.product20_quantity.len);
   memcpy(tlf01_ptr->product_codes[19].amount, db_tlf01.product20_amount.arr, db_tlf01.product20_amount.len);
   memcpy(tlf01_ptr->visa_merchant_id, db_tlf01.visa_merchant_id.arr, db_tlf01.visa_merchant_id.len);
   
   memcpy(tlf01_ptr->cash_bonus, db_tlf01.cash_bonus.arr, db_tlf01.cash_bonus.len);
   memcpy(tlf01_ptr->deferred_factor, db_tlf01.deferred_factor.arr, db_tlf01.deferred_factor.len);
   memcpy(tlf01_ptr->deferred_term_length, db_tlf01.deferred_term_length.arr, db_tlf01.deferred_term_length.len);
   memcpy(tlf01_ptr->currency_code, db_tlf01.currency_code.arr, db_tlf01.currency_code.len);
   memcpy(tlf01_ptr->transmission_timestamp, db_tlf01.transmission_timestamp.arr, db_tlf01.transmission_timestamp.len);
   memcpy(tlf01_ptr->tran_fee_amount, db_tlf01.tran_fee_amount.arr, db_tlf01.tran_fee_amount.len);
   memcpy(tlf01_ptr->cvc_data, db_tlf01.cvc_data.arr, db_tlf01.cvc_data.len);

   memcpy(tlf01_ptr->verify_mag_stripe, db_tlf01.verify_mag_stripe.arr, db_tlf01.verify_mag_stripe.len);
   memcpy(tlf01_ptr->saf, db_tlf01.saf.arr, db_tlf01.saf.len);
   memcpy(tlf01_ptr->security_response_code, db_tlf01.security_response_code.arr, db_tlf01.security_response_code.len);
   memcpy(tlf01_ptr->service_code, db_tlf01.service_code.arr, db_tlf01.service_code.len);
   memcpy(tlf01_ptr->source_pin_format, db_tlf01.source_pin_format.arr, db_tlf01.source_pin_format.len);
   memcpy(tlf01_ptr->dest_pin_format, db_tlf01.dest_pin_format.arr, db_tlf01.dest_pin_format.len);
   memcpy(tlf01_ptr->voice_auth, db_tlf01.voice_auth.arr, db_tlf01.voice_auth.len);

   memcpy(tlf01_ptr->actual_amount, db_tlf01.actual_amount.arr, db_tlf01.actual_amount.len);
   memcpy(tlf01_ptr->reversal_amount, db_tlf01.reversal_amount.arr, db_tlf01.reversal_amount.len);
  
   memcpy(tlf01_ptr->voice_auth_text, db_tlf01.voice_auth_text.arr, db_tlf01.voice_auth_text.len);
   memcpy(tlf01_ptr->operator_id, db_tlf01.operator_id.arr, db_tlf01.operator_id.len);
   memcpy(tlf01_ptr->workstation, db_tlf01.workstation.arr, db_tlf01.workstation.len);
   memcpy(tlf01_ptr->orig_auth_number, db_tlf01.orig_auth_number.arr, db_tlf01.orig_auth_number.len);
   memcpy(tlf01_ptr->ticket_nbr, db_tlf01.ticket_nbr.arr, db_tlf01.ticket_nbr.len);
   memcpy(tlf01_ptr->system_date, db_tlf01.system_date.arr, db_tlf01.system_date.len);
   memcpy(tlf01_ptr->def_gross_amt, db_tlf01.def_gross_amt.arr, db_tlf01.def_gross_amt.len);
   memcpy(tlf01_ptr->monthly_amort_amt, db_tlf01.monthly_amort_amt.arr, db_tlf01.monthly_amort_amt.len);
}

void tlf01_stip_to_db( pTLF01 tlf01_ptr )
{
   memcpy (&pte_tlf01_stip, tlf01_ptr, sizeof(pte_tlf01_stip));
}

void db_to_tlf01_stip ( pTLF01 tlf01_ptr )
{
   memset(tlf01_ptr, 0, sizeof(TLF01));
   memcpy(tlf01_ptr->primary_key.transaction_id, db_tlf01_stip.transaction_id.arr, db_tlf01_stip.transaction_id.len);
   tlf01_ptr->entry_type = db_tlf01_stip.entry_type.arr[0];
   memcpy(tlf01_ptr->tpdu_id, db_tlf01_stip.tpdu_id.arr, db_tlf01_stip.tpdu_id.len);
   memcpy(tlf01_ptr->issuer_id, db_tlf01_stip.issuer_id.arr, db_tlf01_stip.issuer_id.len);
   memcpy(tlf01_ptr->acquirer_id, db_tlf01_stip.acquirer_id.arr, db_tlf01_stip.acquirer_id.len);
   tlf01_ptr->tx_key = db_tlf01_stip.tx_key.arr[0];
   memcpy(tlf01_ptr->terminal_id, db_tlf01_stip.terminal_id.arr, db_tlf01_stip.terminal_id.len);
   memcpy(tlf01_ptr->terminal_type, db_tlf01_stip.terminal_type.arr, db_tlf01_stip.terminal_type.len);
   memcpy(tlf01_ptr->response_text, db_tlf01_stip.response_text.arr, db_tlf01_stip.response_text.len);
   memcpy(tlf01_ptr->card_num_len, db_tlf01_stip.card_num_len.arr, db_tlf01_stip.card_num_len.len);
   memcpy(tlf01_ptr->card_num, db_tlf01_stip.card_num.arr, db_tlf01_stip.card_num.len);
   memcpy(tlf01_ptr->exp_date, db_tlf01_stip.exp_date.arr, db_tlf01_stip.exp_date.len);
   memcpy(tlf01_ptr->total_amount, db_tlf01_stip.total_amount.arr, db_tlf01_stip.total_amount.len);
   memcpy(tlf01_ptr->add_amounts, db_tlf01_stip.add_amounts.arr, db_tlf01_stip.add_amounts.len);
   memcpy(tlf01_ptr->invoice_number, db_tlf01_stip.invoice_number.arr, db_tlf01_stip.invoice_number.len);
   memcpy(tlf01_ptr->orig_amount, db_tlf01_stip.orig_amount.arr, db_tlf01_stip.orig_amount.len);
   memcpy(tlf01_ptr->auth_number, db_tlf01_stip.auth_number.arr, db_tlf01_stip.auth_number.len);
   memcpy(tlf01_ptr->processing_code, db_tlf01_stip.processing_code.arr, db_tlf01_stip.processing_code.len);
   memcpy(tlf01_ptr->sys_trace_audit_num, db_tlf01_stip.sys_trace_audit_num.arr, db_tlf01_stip.sys_trace_audit_num.len);
   memcpy(tlf01_ptr->orig_sys_trace_num, db_tlf01_stip.orig_sys_trace_num.arr, db_tlf01_stip.orig_sys_trace_num.len);
   memcpy(tlf01_ptr->pos_entry_mode, db_tlf01_stip.pos_entry_mode.arr, db_tlf01_stip.pos_entry_mode.len);
   memcpy(tlf01_ptr->nii, db_tlf01_stip.nii.arr, db_tlf01_stip.nii.len);
   memcpy(tlf01_ptr->pos_condition_code, db_tlf01_stip.pos_condition_code.arr, db_tlf01_stip.pos_condition_code.len);
   memcpy(tlf01_ptr->track1, db_tlf01_stip.track1.arr, db_tlf01_stip.track1.len);
   memcpy(tlf01_ptr->track2, db_tlf01_stip.track2.arr, db_tlf01_stip.track2.len);
   memcpy(tlf01_ptr->retrieval_ref_num, db_tlf01_stip.retrieval_ref_num.arr, db_tlf01_stip.retrieval_ref_num.len);
   memcpy(tlf01_ptr->orig_retrieval_ref_num, db_tlf01_stip.orig_retrieval_ref_num.arr, db_tlf01_stip.orig_retrieval_ref_num.len);
   memcpy(tlf01_ptr->merchant_id, db_tlf01_stip.merchant_id.arr, db_tlf01_stip.merchant_id.len);
   memcpy(tlf01_ptr->orig_message, db_tlf01_stip.orig_message.arr, db_tlf01_stip.orig_message.len);
   memcpy(tlf01_ptr->settlement_total, db_tlf01_stip.settlement_total.arr, db_tlf01_stip.settlement_total.len);
   memcpy(tlf01_ptr->message_type, db_tlf01_stip.message_type.arr, db_tlf01_stip.message_type.len);
   memcpy(tlf01_ptr->card_holder_name, db_tlf01_stip.card_holder_name.arr, db_tlf01_stip.card_holder_name.len);
   tlf01_ptr->general_status = db_tlf01_stip.general_status.arr[0];
   memcpy(tlf01_ptr->originator_queue, db_tlf01_stip.originator_queue.arr, db_tlf01_stip.originator_queue.len);
   memcpy(tlf01_ptr->originator_info, db_tlf01_stip.originator_info.arr, db_tlf01_stip.originator_info.len);
   memcpy(tlf01_ptr->batch_number, db_tlf01_stip.batch_number.arr, db_tlf01_stip.batch_number.len);
   memcpy(tlf01_ptr->response_code, db_tlf01_stip.response_code.arr, db_tlf01_stip.response_code.len);
   memcpy(tlf01_ptr->date_yyyymmdd, db_tlf01_stip.date_yyyymmdd.arr, db_tlf01_stip.date_yyyymmdd.len);
   memcpy(tlf01_ptr->time_hhmmss, db_tlf01_stip.time_hhmmss.arr, db_tlf01_stip.time_hhmmss.len);
   memcpy(tlf01_ptr->num_sales, db_tlf01_stip.num_sales.arr, db_tlf01_stip.num_sales.len);
   memcpy(tlf01_ptr->sales_amount, db_tlf01_stip.sales_amount.arr, db_tlf01_stip.sales_amount.len);
   memcpy(tlf01_ptr->num_refunds, db_tlf01_stip.num_refunds.arr, db_tlf01_stip.num_refunds.len);
   memcpy(tlf01_ptr->refund_amount, db_tlf01_stip.refund_amount.arr, db_tlf01_stip.refund_amount.len);
   memcpy(tlf01_ptr->num_dbsales, db_tlf01_stip.num_dbsales.arr, db_tlf01_stip.num_dbsales.len);
   memcpy(tlf01_ptr->dbsales_amount, db_tlf01_stip.dbsales_amount.arr, db_tlf01_stip.dbsales_amount.len);
   memcpy(tlf01_ptr->num_dbrefunds, db_tlf01_stip.num_dbrefunds.arr, db_tlf01_stip.num_dbrefunds.len);
   memcpy(tlf01_ptr->dbrefund_amount, db_tlf01_stip.dbrefund_amount.arr, db_tlf01_stip.dbrefund_amount.len);
   memcpy(tlf01_ptr->pin_block, db_tlf01_stip.pin_block.arr, db_tlf01_stip.pin_block.len);
   memcpy(tlf01_ptr->tax_amount, db_tlf01_stip.tax_amount.arr, db_tlf01_stip.tax_amount.len);
   memcpy(tlf01_ptr->tip_amount, db_tlf01_stip.tip_amount.arr, db_tlf01_stip.tip_amount.len);
   memcpy(tlf01_ptr->tran_start_time, db_tlf01_stip.tran_start_time.arr, db_tlf01_stip.tran_start_time.len);
   memcpy(tlf01_ptr->host_start_time, db_tlf01_stip.host_start_time.arr, db_tlf01_stip.host_start_time.len);
   memcpy(tlf01_ptr->host_finish_time, db_tlf01_stip.host_finish_time.arr, db_tlf01_stip.host_finish_time.len);
   memcpy(tlf01_ptr->tran_finish_time, db_tlf01_stip.tran_finish_time.arr, db_tlf01_stip.tran_finish_time.len);
   memcpy(tlf01_ptr->settle_file_prefix, db_tlf01_stip.settle_file_prefix.arr, db_tlf01_stip.settle_file_prefix.len);
   memcpy(tlf01_ptr->resp_source_len, db_tlf01_stip.resp_source_len.arr, db_tlf01_stip.resp_source_len.len);
   tlf01_ptr->visa_char_indicator = db_tlf01_stip.visa_char_indicator.arr[0];
   memcpy(tlf01_ptr->visa_tran_id, db_tlf01_stip.visa_tran_id.arr, db_tlf01_stip.visa_tran_id.len);
   memcpy(tlf01_ptr->visa_validation_code, db_tlf01_stip.visa_validation_code.arr, db_tlf01_stip.visa_validation_code.len);
   memcpy(tlf01_ptr->mcard_banknet_len, db_tlf01_stip.mcard_banknet_len.arr, db_tlf01_stip.mcard_banknet_len.len);
   memcpy(tlf01_ptr->mcard_banknet, db_tlf01_stip.mcard_banknet.arr, db_tlf01_stip.mcard_banknet.len);
   memcpy(tlf01_ptr->agent_id_len, db_tlf01_stip.agent_id_len.arr, db_tlf01_stip.agent_id_len.len);
   memcpy(tlf01_ptr->agent_id, db_tlf01_stip.agent_id.arr, db_tlf01_stip.agent_id.len);
   tlf01_ptr->cvc = db_tlf01_stip.cvc.arr[0];
   memcpy(tlf01_ptr->settlement_date, db_tlf01_stip.settlement_date.arr, db_tlf01_stip.settlement_date.len);
   memcpy(tlf01_ptr->category_code, db_tlf01_stip.category_code.arr, db_tlf01_stip.category_code.len);
   memcpy(tlf01_ptr->conversion_rate, db_tlf01_stip.conversion_rate.arr, db_tlf01_stip.conversion_rate.len);
   memcpy(tlf01_ptr->product_code, db_tlf01_stip.product_code.arr, db_tlf01_stip.product_code.len);
   memcpy(tlf01_ptr->odometer, db_tlf01_stip.odometer.arr, db_tlf01_stip.odometer.len);
   memcpy(tlf01_ptr->organization_id, db_tlf01_stip.organization_id.arr, db_tlf01_stip.organization_id.len);
   tlf01_ptr->dynamic_keychange = db_tlf01_stip.dynamic_keychange.arr[0];

   memcpy(tlf01_ptr->txn_cnt, db_tlf01_stip.txn_cnt.arr, db_tlf01_stip.txn_cnt.len);
   memcpy(tlf01_ptr->source_key, db_tlf01_stip.source_key.arr, db_tlf01_stip.source_key.len);
   memcpy(tlf01_ptr->dcf01_retired_cwk, db_tlf01_stip.dcf01_retired_cwk.arr, db_tlf01_stip.dcf01_retired_cwk.len);
   memcpy(tlf01_ptr->dest_key, db_tlf01_stip.dest_key.arr, db_tlf01_stip.dest_key.len);
   memcpy(tlf01_ptr->ncf01_retired_cwk, db_tlf01_stip.ncf01_retired_cwk.arr, db_tlf01_stip.ncf01_retired_cwk.len);
   memcpy(tlf01_ptr->handler_queue, db_tlf01_stip.handler_queue.arr, db_tlf01_stip.handler_queue.len);
   memcpy(tlf01_ptr->authorizing_host_queue, db_tlf01_stip.authorizing_host_queue.arr, db_tlf01_stip.authorizing_host_queue.len);
   memcpy(tlf01_ptr->max_net_consec_tmouts, db_tlf01_stip.max_net_consec_tmouts.arr, db_tlf01_stip.max_net_consec_tmouts.len);
   memcpy(tlf01_ptr->max_active_txns, db_tlf01_stip.max_active_txns.arr, db_tlf01_stip.max_active_txns.len);
   memcpy(tlf01_ptr->remote_nsp_type, db_tlf01_stip.remote_nsp_type.arr, db_tlf01_stip.remote_nsp_type.len);
   memcpy(tlf01_ptr->kek, db_tlf01_stip.kek.arr, db_tlf01_stip.kek.len);
   
   memcpy(tlf01_ptr->credit_limit, db_tlf01_stip.credit_limit.arr, db_tlf01_stip.credit_limit.len);
   memcpy(tlf01_ptr->forwarding_institution_id, db_tlf01_stip.forwarding_institution_id.arr, db_tlf01_stip.forwarding_institution_id.len);
   memcpy(tlf01_ptr->acquiring_id, db_tlf01_stip.acquiring_id.arr, db_tlf01_stip.acquiring_id.len);
   memcpy(tlf01_ptr->outstanding_balance, db_tlf01_stip.outstanding_balance.arr, db_tlf01_stip.outstanding_balance.len);
   memcpy(tlf01_ptr->nfi_name, db_tlf01_stip.nfi_name.arr, db_tlf01_stip.nfi_name.len);
   memcpy(tlf01_ptr->nfi_seq_nbr, db_tlf01_stip.nfi_seq_nbr.arr, db_tlf01_stip.nfi_seq_nbr.len);
   memcpy(tlf01_ptr->nfi_start_date, db_tlf01_stip.nfi_start_date.arr, db_tlf01_stip.nfi_start_date.len);
   memcpy(tlf01_ptr->nfi_end_date, db_tlf01_stip.nfi_end_date.arr, db_tlf01_stip.nfi_end_date.len);
   memcpy(tlf01_ptr->resp_source, db_tlf01_stip.resp_source.arr, db_tlf01_stip.resp_source.len);
   memcpy(tlf01_ptr->dispensation.origin, db_tlf01_stip.origin.arr, db_tlf01_stip.origin.len);
   memcpy(tlf01_ptr->dispensation.auth_1, db_tlf01_stip.auth_1.arr, db_tlf01_stip.auth_1.len);
   memcpy(tlf01_ptr->dispensation.auth_2, db_tlf01_stip.auth_2.arr, db_tlf01_stip.auth_2.len);
   memcpy(tlf01_ptr->update_mask, db_tlf01_stip.update_mask.arr, db_tlf01_stip.update_mask.len);

   memcpy(tlf01_ptr->type_of_data, db_tlf01_stip.type_of_data.arr, db_tlf01_stip.type_of_data.len);
   memcpy(tlf01_ptr->down_payment, db_tlf01_stip.down_payment.arr, db_tlf01_stip.down_payment.len);
   memcpy(tlf01_ptr->period, db_tlf01_stip.period.arr, db_tlf01_stip.period.len);
   memcpy(tlf01_ptr->interest_rate, db_tlf01_stip.interest_rate.arr, db_tlf01_stip.interest_rate.len);
   memcpy(tlf01_ptr->total_interest, db_tlf01_stip.total_interest.arr, db_tlf01_stip.total_interest.len);
   memcpy(tlf01_ptr->redemption_amount, db_tlf01_stip.redemption_amount.arr, db_tlf01_stip.redemption_amount.len);
   memcpy(tlf01_ptr->vehicle_number, db_tlf01_stip.vehicle_number.arr, db_tlf01_stip.vehicle_number.len);
  
   memcpy(tlf01_ptr->profile, db_tlf01_stip.profile.arr, db_tlf01_stip.profile.len);
   memcpy(tlf01_ptr->nbr_of_prod_codes, db_tlf01_stip.nbr_of_prod_codes.arr, db_tlf01_stip.nbr_of_prod_codes.len);
  
   memcpy(tlf01_ptr->product_codes[0].code, db_tlf01_stip.product1_code.arr, db_tlf01_stip.product1_code.len);
   memcpy(tlf01_ptr->product_codes[0].quantity, db_tlf01_stip.product1_quantity.arr, db_tlf01_stip.product1_quantity.len);
   memcpy(tlf01_ptr->product_codes[0].amount, db_tlf01_stip.product1_amount.arr, db_tlf01_stip.product1_amount.len);   
   memcpy(tlf01_ptr->product_codes[1].code, db_tlf01_stip.product2_code.arr, db_tlf01_stip.product2_code.len);
   memcpy(tlf01_ptr->product_codes[1].quantity, db_tlf01_stip.product2_quantity.arr, db_tlf01_stip.product2_quantity.len);
   memcpy(tlf01_ptr->product_codes[1].amount, db_tlf01_stip.product2_amount.arr, db_tlf01_stip.product2_amount.len);
   memcpy(tlf01_ptr->product_codes[2].code, db_tlf01_stip.product3_code.arr, db_tlf01_stip.product3_code.len);
   memcpy(tlf01_ptr->product_codes[2].quantity, db_tlf01_stip.product3_quantity.arr, db_tlf01_stip.product3_quantity.len);
   memcpy(tlf01_ptr->product_codes[2].amount, db_tlf01_stip.product3_amount.arr, db_tlf01_stip.product3_amount.len);
   memcpy(tlf01_ptr->product_codes[3].code, db_tlf01_stip.product4_code.arr, db_tlf01_stip.product4_code.len);
   memcpy(tlf01_ptr->product_codes[3].quantity, db_tlf01_stip.product4_quantity.arr, db_tlf01_stip.product4_quantity.len);
   memcpy(tlf01_ptr->product_codes[3].amount, db_tlf01_stip.product4_amount.arr, db_tlf01_stip.product4_amount.len);
   memcpy(tlf01_ptr->product_codes[4].code, db_tlf01_stip.product5_code.arr, db_tlf01_stip.product5_code.len);
   memcpy(tlf01_ptr->product_codes[4].quantity, db_tlf01_stip.product5_quantity.arr, db_tlf01_stip.product5_quantity.len);
   memcpy(tlf01_ptr->product_codes[4].amount, db_tlf01_stip.product5_amount.arr, db_tlf01_stip.product5_amount.len);
   memcpy(tlf01_ptr->product_codes[5].code, db_tlf01_stip.product6_code.arr, db_tlf01_stip.product6_code.len);
   memcpy(tlf01_ptr->product_codes[5].quantity, db_tlf01_stip.product6_quantity.arr, db_tlf01_stip.product6_quantity.len);
   memcpy(tlf01_ptr->product_codes[5].amount, db_tlf01_stip.product6_amount.arr, db_tlf01_stip.product6_amount.len);
   memcpy(tlf01_ptr->product_codes[6].code, db_tlf01_stip.product7_code.arr, db_tlf01_stip.product7_code.len);
   memcpy(tlf01_ptr->product_codes[6].quantity, db_tlf01_stip.product7_quantity.arr, db_tlf01_stip.product7_quantity.len);
   memcpy(tlf01_ptr->product_codes[6].amount, db_tlf01_stip.product7_amount.arr, db_tlf01_stip.product7_amount.len);
   memcpy(tlf01_ptr->product_codes[7].code, db_tlf01_stip.product8_code.arr, db_tlf01_stip.product8_code.len);
   memcpy(tlf01_ptr->product_codes[7].quantity, db_tlf01_stip.product8_quantity.arr, db_tlf01_stip.product8_quantity.len);
   memcpy(tlf01_ptr->product_codes[7].amount, db_tlf01_stip.product8_amount.arr, db_tlf01_stip.product8_amount.len);
   memcpy(tlf01_ptr->product_codes[8].code, db_tlf01_stip.product9_code.arr, db_tlf01_stip.product9_code.len);
   memcpy(tlf01_ptr->product_codes[8].quantity, db_tlf01_stip.product9_quantity.arr, db_tlf01_stip.product9_quantity.len);
   memcpy(tlf01_ptr->product_codes[8].amount, db_tlf01_stip.product9_amount.arr, db_tlf01_stip.product9_amount.len);
   memcpy(tlf01_ptr->product_codes[9].code, db_tlf01_stip.product10_code.arr, db_tlf01_stip.product10_code.len);
   memcpy(tlf01_ptr->product_codes[9].quantity, db_tlf01_stip.product10_quantity.arr, db_tlf01_stip.product10_quantity.len);
   memcpy(tlf01_ptr->product_codes[9].amount, db_tlf01_stip.product10_amount.arr, db_tlf01_stip.product10_amount.len);
   memcpy(tlf01_ptr->product_codes[10].code, db_tlf01_stip.product11_code.arr, db_tlf01_stip.product11_code.len);
   memcpy(tlf01_ptr->product_codes[10].quantity, db_tlf01_stip.product11_quantity.arr, db_tlf01_stip.product11_quantity.len);
   memcpy(tlf01_ptr->product_codes[10].amount, db_tlf01_stip.product11_amount.arr, db_tlf01_stip.product11_amount.len);
   memcpy(tlf01_ptr->product_codes[11].code, db_tlf01_stip.product12_code.arr, db_tlf01_stip.product12_code.len);
   memcpy(tlf01_ptr->product_codes[11].quantity, db_tlf01_stip.product12_quantity.arr, db_tlf01_stip.product12_quantity.len);
   memcpy(tlf01_ptr->product_codes[11].amount, db_tlf01_stip.product12_amount.arr, db_tlf01_stip.product12_amount.len);
   memcpy(tlf01_ptr->product_codes[12].code, db_tlf01_stip.product13_code.arr, db_tlf01_stip.product13_code.len);
   memcpy(tlf01_ptr->product_codes[12].quantity, db_tlf01_stip.product13_quantity.arr, db_tlf01_stip.product13_quantity.len);
   memcpy(tlf01_ptr->product_codes[12].amount, db_tlf01_stip.product13_amount.arr, db_tlf01_stip.product13_amount.len);
   memcpy(tlf01_ptr->product_codes[13].code, db_tlf01_stip.product14_code.arr, db_tlf01_stip.product14_code.len);
   memcpy(tlf01_ptr->product_codes[13].quantity, db_tlf01_stip.product14_quantity.arr, db_tlf01_stip.product14_quantity.len);
   memcpy(tlf01_ptr->product_codes[13].amount, db_tlf01_stip.product14_amount.arr, db_tlf01_stip.product14_amount.len);
   memcpy(tlf01_ptr->product_codes[14].code, db_tlf01_stip.product15_code.arr, db_tlf01_stip.product15_code.len);
   memcpy(tlf01_ptr->product_codes[14].quantity, db_tlf01_stip.product15_quantity.arr, db_tlf01_stip.product15_quantity.len);
   memcpy(tlf01_ptr->product_codes[14].amount, db_tlf01_stip.product15_amount.arr, db_tlf01_stip.product15_amount.len);
   memcpy(tlf01_ptr->product_codes[15].code, db_tlf01_stip.product16_code.arr, db_tlf01_stip.product16_code.len);
   memcpy(tlf01_ptr->product_codes[15].quantity, db_tlf01_stip.product16_quantity.arr, db_tlf01_stip.product16_quantity.len);
   memcpy(tlf01_ptr->product_codes[15].amount, db_tlf01_stip.product16_amount.arr, db_tlf01_stip.product16_amount.len);
   memcpy(tlf01_ptr->product_codes[16].code, db_tlf01_stip.product17_code.arr, db_tlf01_stip.product17_code.len);
   memcpy(tlf01_ptr->product_codes[16].quantity, db_tlf01_stip.product17_quantity.arr, db_tlf01_stip.product17_quantity.len);
   memcpy(tlf01_ptr->product_codes[16].amount, db_tlf01_stip.product17_amount.arr, db_tlf01_stip.product17_amount.len);
   memcpy(tlf01_ptr->product_codes[17].code, db_tlf01_stip.product18_code.arr, db_tlf01_stip.product18_code.len);
   memcpy(tlf01_ptr->product_codes[17].quantity, db_tlf01_stip.product18_quantity.arr, db_tlf01_stip.product18_quantity.len);
   memcpy(tlf01_ptr->product_codes[17].amount, db_tlf01_stip.product18_amount.arr, db_tlf01_stip.product18_amount.len);
   memcpy(tlf01_ptr->product_codes[18].code, db_tlf01_stip.product19_code.arr, db_tlf01_stip.product19_code.len);
   memcpy(tlf01_ptr->product_codes[18].quantity, db_tlf01_stip.product19_quantity.arr, db_tlf01_stip.product19_quantity.len);
   memcpy(tlf01_ptr->product_codes[18].amount, db_tlf01_stip.product19_amount.arr, db_tlf01_stip.product19_amount.len);
   memcpy(tlf01_ptr->product_codes[19].code, db_tlf01_stip.product20_code.arr, db_tlf01_stip.product20_code.len);
   memcpy(tlf01_ptr->product_codes[19].quantity, db_tlf01_stip.product20_quantity.arr, db_tlf01_stip.product20_quantity.len);
   memcpy(tlf01_ptr->product_codes[19].amount, db_tlf01_stip.product20_amount.arr, db_tlf01_stip.product20_amount.len);
   memcpy(tlf01_ptr->visa_merchant_id, db_tlf01_stip.visa_merchant_id.arr, db_tlf01_stip.visa_merchant_id.len);
   
   memcpy(tlf01_ptr->cash_bonus, db_tlf01_stip.cash_bonus.arr, db_tlf01_stip.cash_bonus.len);
   memcpy(tlf01_ptr->deferred_factor, db_tlf01_stip.deferred_factor.arr, db_tlf01_stip.deferred_factor.len);
   memcpy(tlf01_ptr->deferred_term_length, db_tlf01_stip.deferred_term_length.arr, db_tlf01_stip.deferred_term_length.len);
   memcpy(tlf01_ptr->currency_code, db_tlf01_stip.currency_code.arr, db_tlf01_stip.currency_code.len);
   memcpy(tlf01_ptr->transmission_timestamp, db_tlf01_stip.transmission_timestamp.arr, db_tlf01_stip.transmission_timestamp.len);
   memcpy(tlf01_ptr->tran_fee_amount, db_tlf01_stip.tran_fee_amount.arr, db_tlf01_stip.tran_fee_amount.len);
   memcpy(tlf01_ptr->cvc_data, db_tlf01_stip.cvc_data.arr, db_tlf01_stip.cvc_data.len);

   memcpy(tlf01_ptr->verify_mag_stripe, db_tlf01_stip.verify_mag_stripe.arr, db_tlf01_stip.verify_mag_stripe.len);
   memcpy(tlf01_ptr->saf, db_tlf01_stip.saf.arr, db_tlf01_stip.saf.len);
   memcpy(tlf01_ptr->security_response_code, db_tlf01_stip.security_response_code.arr, db_tlf01_stip.security_response_code.len);
   memcpy(tlf01_ptr->service_code, db_tlf01_stip.service_code.arr, db_tlf01_stip.service_code.len);
   memcpy(tlf01_ptr->source_pin_format, db_tlf01_stip.source_pin_format.arr, db_tlf01_stip.source_pin_format.len);
   memcpy(tlf01_ptr->dest_pin_format, db_tlf01_stip.dest_pin_format.arr, db_tlf01_stip.dest_pin_format.len);
   memcpy(tlf01_ptr->voice_auth, db_tlf01_stip.voice_auth.arr, db_tlf01_stip.voice_auth.len);

   memcpy(tlf01_ptr->actual_amount, db_tlf01_stip.actual_amount.arr, db_tlf01_stip.actual_amount.len);
   memcpy(tlf01_ptr->reversal_amount, db_tlf01_stip.reversal_amount.arr, db_tlf01_stip.reversal_amount.len);
  
   memcpy(tlf01_ptr->voice_auth_text, db_tlf01_stip.voice_auth_text.arr, db_tlf01_stip.voice_auth_text.len);
   memcpy(tlf01_ptr->operator_id, db_tlf01_stip.operator_id.arr, db_tlf01_stip.operator_id.len);
   memcpy(tlf01_ptr->workstation, db_tlf01_stip.workstation.arr, db_tlf01_stip.workstation.len);
   memcpy(tlf01_ptr->orig_auth_number, db_tlf01_stip.orig_auth_number.arr, db_tlf01_stip.orig_auth_number.len);
   memcpy(tlf01_ptr->ticket_nbr, db_tlf01_stip.ticket_nbr.arr, db_tlf01_stip.ticket_nbr.len);
   memcpy(tlf01_ptr->system_date, db_tlf01_stip.system_date.arr, db_tlf01_stip.system_date.len);
   memcpy(tlf01_ptr->def_gross_amt, db_tlf01_stip.def_gross_amt.arr, db_tlf01_stip.def_gross_amt.len);
   memcpy(tlf01_ptr->monthly_amort_amt, db_tlf01_stip.monthly_amort_amt.arr, db_tlf01_stip.monthly_amort_amt.len);
}

void db_to_ncf01 ( pNCF01 ncf01_ptr )
{
   memset( ncf01_ptr, 0, sizeof(NCF01) );
   memcpy( ncf01_ptr->primary_key.network_id, db_ncf01.network_id.arr, db_ncf01.network_id.len );
   memcpy( ncf01_ptr->primary_key.network_type, db_ncf01.network_type.arr, db_ncf01.network_type.len);

   memcpy(ncf01_ptr->name, db_ncf01.name.arr, db_ncf01.name.len);
   memcpy(ncf01_ptr->status, db_ncf01.status.arr, db_ncf01.status.len);
   memcpy(ncf01_ptr->totals_ind, db_ncf01.totals_ind.arr, db_ncf01.totals_ind.len);
   memcpy(ncf01_ptr->statistics_ind, db_ncf01.statistics_ind.arr, db_ncf01.statistics_ind.len);
   memcpy(ncf01_ptr->acquirer_inst_id_code, db_ncf01.acquirer_inst_id_code.arr, db_ncf01.acquirer_inst_id_code.len);
   memcpy(ncf01_ptr->forwarding_inst_id_code, db_ncf01.forwarding_inst_id_code.arr, db_ncf01.forwarding_inst_id_code.len);
   memcpy(ncf01_ptr->receiving_inst_id_code, db_ncf01.receiving_inst_id_code.arr, db_ncf01.receiving_inst_id_code.len);
   memcpy(ncf01_ptr->remote_nsp_type, db_ncf01.remote_nsp_type.arr, db_ncf01.remote_nsp_type.len);
   memcpy(ncf01_ptr->pin_type, db_ncf01.pin_type.arr, db_ncf01.pin_type.len);
   memcpy(ncf01_ptr->encr_type, db_ncf01.encr_type.arr, db_ncf01.encr_type.len);
   memcpy(ncf01_ptr->pad_char, db_ncf01.pad_char.arr, db_ncf01.pad_char.len);
   memcpy(ncf01_ptr->cwk, db_ncf01.cwk.arr, db_ncf01.cwk.len);
   memcpy(ncf01_ptr->kek, db_ncf01.kek.arr, db_ncf01.kek.len);
   memcpy(ncf01_ptr->retired_cwk, db_ncf01.retired_cwk.arr, db_ncf01.retired_cwk.len);
   memcpy(ncf01_ptr->auto_logon, db_ncf01.auto_logon.arr, db_ncf01.auto_logon.len);
   memcpy(ncf01_ptr->echo_interval, db_ncf01.echo_interval.arr, db_ncf01.echo_interval.len);
   memcpy(ncf01_ptr->max_consecutive_timeouts, db_ncf01.max_consecutive_timeouts.arr, db_ncf01.max_consecutive_timeouts.len);
   memcpy(ncf01_ptr->max_active_txns, db_ncf01.max_active_txns.arr, db_ncf01.max_active_txns.len);
   memcpy(ncf01_ptr->que_name, db_ncf01.que_name.arr, db_ncf01.que_name.len);
  
   memcpy(ncf01_ptr->local_nsp_type, db_ncf01.local_nsp_type.arr, db_ncf01.local_nsp_type.len);
   memcpy(ncf01_ptr->request_timer, db_ncf01.request_timer.arr, db_ncf01.request_timer.len);
   memcpy(ncf01_ptr->idle_line_timer, db_ncf01.idle_line_timer.arr, db_ncf01.idle_line_timer.len);
   memcpy(ncf01_ptr->advice_repeat_counter, db_ncf01.advice_repeat_counter.arr, db_ncf01.advice_repeat_counter.len);
   memcpy(ncf01_ptr->admin_message_timer, db_ncf01.admin_message_timer.arr, db_ncf01.admin_message_timer.len);
   memcpy(ncf01_ptr->store_forward_processing, db_ncf01.store_forward_processing.arr, db_ncf01.store_forward_processing.len);
   memcpy(ncf01_ptr->currency_code_purchase, db_ncf01.currency_code_purchase.arr, db_ncf01.currency_code_purchase.len);
   memcpy(ncf01_ptr->currency_code_cash, db_ncf01.currency_code_cash.arr, db_ncf01.currency_code_cash.len);
   memcpy(ncf01_ptr->country_code, db_ncf01.country_code.arr, db_ncf01.country_code.len);
  
   memcpy(ncf01_ptr->station_id1, db_ncf01.station_id1.arr, db_ncf01.station_id1.len);
   memcpy(ncf01_ptr->station_id2, db_ncf01.station_id2.arr, db_ncf01.station_id2.len);
   memcpy(ncf01_ptr->prev_src_station, db_ncf01.prev_src_station.arr, db_ncf01.prev_src_station.len);
   memcpy(ncf01_ptr->tpdu_id, db_ncf01.tpdu_id.arr, db_ncf01.tpdu_id.len);
   memcpy(ncf01_ptr->logon_bin[0].identifier, db_ncf01.identifier1.arr,  db_ncf01.identifier1.len);
   memcpy(ncf01_ptr->logon_bin[1].identifier, db_ncf01.identifier2.arr,  db_ncf01.identifier2.len);
   memcpy(ncf01_ptr->logon_bin[2].identifier, db_ncf01.identifier3.arr,  db_ncf01.identifier3.len);
   memcpy(ncf01_ptr->logon_bin[3].identifier, db_ncf01.identifier4.arr,  db_ncf01.identifier4.len);
   memcpy(ncf01_ptr->logon_bin[4].identifier, db_ncf01.identifier5.arr,  db_ncf01.identifier5.len);
   memcpy(ncf01_ptr->logon_bin[5].identifier, db_ncf01.identifier6.arr,  db_ncf01.identifier6.len);
   memcpy(ncf01_ptr->logon_bin[6].identifier, db_ncf01.identifier7.arr,  db_ncf01.identifier7.len);
   memcpy(ncf01_ptr->logon_bin[7].identifier, db_ncf01.identifier8.arr,  db_ncf01.identifier8.len);
   memcpy(ncf01_ptr->logon_bin[8].identifier, db_ncf01.identifier9.arr,  db_ncf01.identifier9.len);
   memcpy(ncf01_ptr->logon_bin[9].identifier, db_ncf01.identifier10.arr, db_ncf01.identifier10.len);
   memcpy(ncf01_ptr->allowed[0].processing_code,  db_ncf01.processing_code1.arr,  db_ncf01.processing_code1.len);
   memcpy(ncf01_ptr->allowed[1].processing_code,  db_ncf01.processing_code2.arr,  db_ncf01.processing_code2.len);
   memcpy(ncf01_ptr->allowed[2].processing_code,  db_ncf01.processing_code3.arr,  db_ncf01.processing_code3.len);
   memcpy(ncf01_ptr->allowed[3].processing_code,  db_ncf01.processing_code4.arr,  db_ncf01.processing_code4.len);
   memcpy(ncf01_ptr->allowed[4].processing_code,  db_ncf01.processing_code5.arr,  db_ncf01.processing_code5.len);
   memcpy(ncf01_ptr->allowed[5].processing_code,  db_ncf01.processing_code6.arr,  db_ncf01.processing_code6.len);
   memcpy(ncf01_ptr->allowed[6].processing_code,  db_ncf01.processing_code7.arr,  db_ncf01.processing_code7.len);
   memcpy(ncf01_ptr->allowed[7].processing_code,  db_ncf01.processing_code8.arr,  db_ncf01.processing_code8.len);
   memcpy(ncf01_ptr->allowed[8].processing_code,  db_ncf01.processing_code9.arr,  db_ncf01.processing_code9.len);
   memcpy(ncf01_ptr->allowed[9].processing_code,  db_ncf01.processing_code10.arr, db_ncf01.processing_code10.len);
   memcpy(ncf01_ptr->allowed[10].processing_code, db_ncf01.processing_code11.arr, db_ncf01.processing_code11.len);
   memcpy(ncf01_ptr->allowed[11].processing_code, db_ncf01.processing_code12.arr, db_ncf01.processing_code12.len);
   memcpy(ncf01_ptr->allowed[12].processing_code, db_ncf01.processing_code13.arr, db_ncf01.processing_code13.len);
   memcpy(ncf01_ptr->allowed[13].processing_code, db_ncf01.processing_code14.arr, db_ncf01.processing_code14.len);
   memcpy(ncf01_ptr->allowed[14].processing_code, db_ncf01.processing_code15.arr, db_ncf01.processing_code15.len);
   memcpy(ncf01_ptr->allowed[15].processing_code, db_ncf01.processing_code16.arr, db_ncf01.processing_code16.len);
   memcpy(ncf01_ptr->allowed[16].processing_code, db_ncf01.processing_code17.arr, db_ncf01.processing_code17.len);
   memcpy(ncf01_ptr->allowed[17].processing_code, db_ncf01.processing_code18.arr, db_ncf01.processing_code18.len);
   memcpy(ncf01_ptr->allowed[18].processing_code, db_ncf01.processing_code19.arr, db_ncf01.processing_code19.len);
   memcpy(ncf01_ptr->allowed[19].processing_code, db_ncf01.processing_code20.arr, db_ncf01.processing_code20.len);
   memcpy(ncf01_ptr->zmk,                         db_ncf01.zmk.arr,               db_ncf01.zmk.len);
   memcpy(ncf01_ptr->neg_access_code,             db_ncf01.neg_access_code.arr,   db_ncf01.neg_access_code.len);  
}


/*************************************PREAUTH REVERSALS FUNCTIONS With SMCC STARTS *************************************************************/
int db_select_non_processed_preauths_count_smcc(char *lookupDate, char *card_brand_flag)
{
	char batchNbr[7] = "ACTIVE";
	char primary_auth[7] = {0};
	INT  retval, index, preauth_count_smcc=0;
	char buffer[256] = {0};
	char smcc_flag[3] ="CF";
	BCH20 bch20 = {0};
	char onusflag[5] = "ONUS";
	
	strncpy(primary_auth, INITIAL_PREAUTH_TRA, PREAUTH_TRA_LEN);
	   	
	EXEC SQL SELECT COUNT(*) 
	INTO :preauth_count_smcc 
	FROM BCH20
	WHERE
	tran_date < :lookupDate		 		AND
	batch_nbr = :batchNbr 				AND
	product5_code is null				AND
	product8_code = :primary_auth		AND
	product2_quantity = :smcc_flag		AND
	product3_code = :card_brand_flag    AND
	(product6_code != :onusflag OR product6_code is null);

	if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
	{
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		parvbh_log_message(2, 3, ErrorMsg, " db_select_non_processed_preauths_count");
		return (-1);
	}
	
	return (preauth_count_smcc);
}
/********************************************/

BYTE db_select_non_processed_preauth_smcc(char *lookupDate, char *card_brand_flag, pBCH20 bch20_ptr)
{
	char batchNbr[7] = "ACTIVE";
	char primary_auth[7] = {0};
	char total_preauth_amount[13] = {0};
	char buffer[256] = {0};
	char smcc_flag[3] ="CF";
	BYTE ret_val = 0; 
	BCH20 bch20_temp;
	char onusflag[5] = "ONUS";
	
	strncpy(primary_auth, INITIAL_PREAUTH_TRA, PREAUTH_TRA_LEN);
	
    if ( db_error_statics_flag == true )
    {
       start_time = ptetime_get_time();
    }
    
	EXEC SQL SELECT *
	INTO :db_bch20 FROM
	(SELECT * FROM BCH20
	 WHERE
	 	tran_date < :lookupDate				AND
		batch_nbr = :batchNbr 				AND
		product5_code is null				AND
		product8_code = :primary_auth		AND
		product3_code = :card_brand_flag 	AND
		product2_quantity = :smcc_flag	    AND
		(product6_code != :onusflag OR product6_code is null)	
	 ORDER BY tran_date asc)
	WHERE rownum = 1;
	
    if ( db_error_statics_flag == true )
    {
        end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
		   	sprintf(ErrorMsg,"Exceeded Query: %s, Data_Type : BCH20, Duration = %f",AppName,duration);
			parvbh_log_message(2, 3, ErrorMsg, " db_select_non_processed_preauth_1");
	  	}
    } 
    
	if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
	{
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		parvbh_log_message(2, 3, ErrorMsg, " db_select_non_processed_preauth_2");
		return DB_rcode;
	}
	   
	db_to_bch20(bch20_ptr);
	
	if(0 == strncmp(bch20_ptr->product_codes[4].quantity, INITIAL_PREAUTH_TRA_WITH_INCREMENTAL, PREAUTH_TRA_LEN_WITH_INCREMENTAL_FLAG))
	{
		/* this preauth contains the incremental preauths, 
		 * let get the total amount of all preauths */
		memset(&bch20_temp, 0x00, sizeof(BCH20));
		memcpy(&bch20_temp, bch20_ptr, sizeof(BCH20));
		ret_val = db_select_bch20_for_preauth_total_amount(&bch20_temp, lookupDate);
		if(ret_val == PTEMSG_OK)
		{
			strncpy(bch20_ptr->product_codes[4].amount, bch20_temp.product_codes[4].amount, 12);
		}
		return ret_val;
		
	}
	return PTEMSG_OK;
}

/*******************************************PREAUTH REVERSALS FUNCTIONS With SMCC END**************/

/*******************************PREAUTH REVERSALS FUNCTIONS - START**************************************/

int db_select_non_processed_preauths_count(char *lookupDate, char *card_brand_flag)
{
	char batchNbr[7] = "ACTIVE";
	char primary_auth[7] = {0};
	INT  retval, index, preauth_count=0;
	char buffer[256] = {0};
	BCH20 bch20 = {0};
	char onusflag[5] = "ONUS";
	
	strncpy(primary_auth, INITIAL_PREAUTH_TRA, PREAUTH_TRA_LEN);
	   
	//get the exact count of records
	EXEC SQL SELECT COUNT(*) 
	INTO :preauth_count 
	FROM BCH20
	WHERE
	tran_date < :lookupDate		 	AND
	batch_nbr = :batchNbr 			AND
	product5_code is null			AND
	product8_code = :primary_auth	AND
	product3_code = :card_brand_flag AND
	(product6_code != :onusflag OR product6_code is null);

	if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
	{
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		parvbh_log_message(2, 3, ErrorMsg, " db_select_non_processed_preauths_count");
		return (-1);
	}
	
	return (preauth_count);
}

BYTE db_select_non_processed_preauth(char *lookupDate, char *card_brand_flag, pBCH20 bch20_ptr)
{
	char batchNbr[7] = "ACTIVE";
	char primary_auth[7] = {0};
	char total_preauth_amount[13] = {0};
	char buffer[256] = {0};
	BYTE ret_val = 0; 
	BCH20 bch20_temp;
	char onusflag[5] = "ONUS";
	
	strncpy(primary_auth, INITIAL_PREAUTH_TRA, PREAUTH_TRA_LEN);
	
    if ( db_error_statics_flag == true )
    {
       start_time = ptetime_get_time();
    }
    
	EXEC SQL SELECT *
	INTO :db_bch20 FROM
	(SELECT * FROM BCH20
	 WHERE
	 	tran_date < :lookupDate			AND
		batch_nbr = :batchNbr 			AND
		product5_code is null			AND
		product8_code = :primary_auth	AND
		product3_code = :card_brand_flag AND
		(product6_code != :onusflag OR product6_code is null)
	 ORDER BY tran_date asc)
	WHERE rownum = 1;
	
    if ( db_error_statics_flag == true )
    {
        end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
		   	sprintf(ErrorMsg,"Exceeded Query: %s, Data_Type : BCH20, Duration = %f",AppName,duration);
			parvbh_log_message(2, 3, ErrorMsg, " db_select_non_processed_preauth_1");
	  	}
    } 
    
	if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
	{
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		parvbh_log_message(2, 3, ErrorMsg, " db_select_non_processed_preauth_2");
		return DB_rcode;
	}
	   
	db_to_bch20(bch20_ptr);
	
	if(0 == strncmp(bch20_ptr->product_codes[4].quantity, INITIAL_PREAUTH_TRA_WITH_INCREMENTAL, PREAUTH_TRA_LEN_WITH_INCREMENTAL_FLAG))
	{
		/* this preauth contains the incremental preauths, 
		 * let get the total amount of all preauths */
		memset(&bch20_temp, 0x00, sizeof(BCH20));
		memcpy(&bch20_temp, bch20_ptr, sizeof(BCH20));
		ret_val = db_select_bch20_for_preauth_total_amount(&bch20_temp, lookupDate);
		if(ret_val == PTEMSG_OK)
		{
			strncpy(bch20_ptr->product_codes[4].amount, bch20_temp.product_codes[4].amount, 12);
		}
		return ret_val;
		
	}
	return PTEMSG_OK;
}

BYTE db_get_tlf01_rec (pCHAR 		tran_id,
					   pTLF01      tlf01_ptr, 
                       pCHAR       ErrorMsg )
{
	EXEC SQL BEGIN DECLARE SECTION;
	char response_code[3]="00";
	int  retval;
	EXEC SQL END DECLARE SECTION;
	
	memset( &db_tlf01, 0, sizeof( db_tlf01 ) );
 
	/* Force usage of the card number index. */
	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
	
	EXEC SQL SELECT *
	INTO :db_tlf01
	FROM TLF01
	WHERE transaction_id = :tran_id;

	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			sprintf(ErrorMsg,"Exceeded Query: %s, Data_Type : TLF01, Duration = %f",AppName,duration);
			parvbh_log_message(2, 3, ErrorMsg, " db_get_tlf01_rec_3");
		}
	} 

	if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
	{
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		parvbh_log_message(2, 3, ErrorMsg, " db_get_tlf01_rec_3");
		return DB_rcode;
	}
	   
	db_to_tlf01(tlf01_ptr);
	
	return PTEMSG_OK;
}

BYTE db_select_ncf01 (  pCHAR         key, 
                        pNCF01        ncf01_ptr,
                        pCHAR         ErrorMsg )
{
   memset( &db_ncf01, 0, sizeof( db_ncf01 ) );

   strcpy( pte_ncf01.network_id, key);
   strcpy(pte_ncf01.network_type,"I");

	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
	
   EXEC SQL SELECT network_id, network_type, name, status, totals_ind,
               statistics_ind, acquirer_inst_id_code, forwarding_inst_id_code, 
               receiving_inst_id_code, 
               remote_nsp_type, pin_type, encr_type, pad_char, cwk, kek, 
               retired_cwk, auto_logon, echo_interval, max_consecutive_timeouts,
               max_active_txns,que_name, local_nsp_type, request_timer,
               idle_line_timer, advice_repeat_counter, admin_message_timer,
               store_forward_processing, currency_code_purchase,
               currency_code_cash, country_code, station_id1 ,station_id2,
               prev_src_station,tpdu_id, identifier1 ,identifier2, identifier3,
               identifier4, identifier5 ,identifier6, identifier7, identifier8,
               identifier9 ,identifier10,processing_code1, processing_code2,
               processing_code3,  processing_code4,  processing_code5,
               processing_code6,  processing_code7,  processing_code8,
               processing_code9,  processing_code10, processing_code11,
               processing_code12, processing_code13, processing_code14,
               processing_code15, processing_code16,processing_code17,
               processing_code18, processing_code19, processing_code20, zmk,
               neg_access_code 
   INTO :db_ncf01
   FROM ncf01
   WHERE network_id   = :pte_ncf01.network_id and
   network_type = :pte_ncf01.network_type ;
   
   	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			sprintf(ErrorMsg,"Exceeded Query: %s, Data_Type : NCF01, , Duration = %f",AppName,duration);
			parvbh_log_message(2, 3, ErrorMsg, " db_select_emvraw_1");
		}
	}
      
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		parvbh_log_message(2, 3, ErrorMsg, " db_update_bch20_stip_2");
		return DB_rcode;
	}

   db_to_ncf01 (ncf01_ptr);

   return PTEMSG_OK;
}

BYTE db_select_emvraw( pCHAR     Primary_key, 
                       pEMV_RAW  emvraw_ptr, 
                       pCHAR     ErrorMsg )
{
   BYTE retval;

   memset( &db_emv_raw, 0x00, sizeof(db_emv_raw) );
   memset( &pte_tlf01_stip,   0x00, sizeof(pte_tlf01_stip ) );
   memcpy( pte_tlf01_stip.transaction_id, Primary_key, sizeof(pte_tlf01_stip.transaction_id));

	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
	
   EXEC SQL SELECT *
            INTO  :db_emv_raw
            FROM   EMV_RAW
            WHERE  transaction_id = :pte_tlf01_stip.transaction_id;
            
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			sprintf(ErrorMsg,"Exceeded Query: %s, Data_Type : EMV_RAW, , Duration = %f",AppName,duration);
			parvbh_log_message(2, 3, ErrorMsg, " db_select_emvraw_1");
		}
	}        

   if ( SQLCODE != 0 )
   {
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		parvbh_log_message(2, 3, ErrorMsg, " db_select_emvraw_2");
      	retval = PTEMSG_NOT_FOUND;
   }
   else
   {
      memcpy( emvraw_ptr->transaction_id, db_emv_raw.tran_id,           sizeof(db_emv_raw.tran_id)  );   
      memcpy( emvraw_ptr->DATA_LENGTH,    db_emv_raw.len,               sizeof(db_emv_raw.len)      );
      memcpy( emvraw_ptr->RAW_DATA,      &db_emv_raw.emvblock.emv_data, sizeof(emvraw_ptr->RAW_DATA));
      memcpy( emvraw_ptr->system_date,    db_emv_raw.sys_date,          sizeof(db_emv_raw.sys_date) );
      retval = PTEMSG_OK;
   }
   return( retval );   
}

BYTE db_update_bch20_stip( pTLF01 tlf01_ptr )
{
    INT  retval;
    char deviceId[9] = {0};
    char ErrorMsg[256] = {0};

    tlf01_to_db( tlf01_ptr );
	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
	
	/* Make sure we can access the record before attempting to update it. */
    EXEC SQL SELECT device_id
    INTO  :deviceId
    FROM   bch20
    WHERE device_id   = :pte_tlf01.terminal_id	AND
		  merchant_id = :pte_tlf01.merchant_id	AND
		  batch_nbr	  = 'ACTIVE'				AND
		  card_nbr	  = :pte_tlf01.card_num		AND
		  product5_code is null					AND
		  rownum      = 1
    For Update NOWAIT;
      
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			sprintf(ErrorMsg,"Exceeded Query: %s, Data_Type : BCH20, Duration = %f",AppName,duration);
			parvbh_log_message(2, 3, ErrorMsg, " db_update_bch20_stip_1");
		}
	}	   
       
   if ( SQLCODE != 0 )
   {
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		parvbh_log_message(2, 3, ErrorMsg, " db_update_bch20_stip_2");
		return DB_rcode;
   } 
	
	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
	
   EXEC SQL UPDATE bch20
   SET   product5_code = :pte_tlf01.product5_code,
   	     product2_code = :pte_tlf01.product2_code 
   WHERE device_id   = :pte_tlf01.terminal_id	AND
		 merchant_id = :pte_tlf01.merchant_id	AND
		 batch_nbr	 = 'ACTIVE'					AND
		 card_nbr	 = :pte_tlf01.card_num		AND
		 product5_code is null;
	   
	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			sprintf(ErrorMsg,"Exceeded Query: %s, Data_Type : BCH20, Duration = %f", AppName, duration);
			parvbh_log_message(2, 3, ErrorMsg, " db_update_bch20_stip_3");
		}
	}	   
       
   if ( SQLCODE != 0 )
   {
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		parvbh_log_message(2, 3, ErrorMsg, " db_update_bch20_stip_4");
		return DB_rcode;
   }
      
   EXEC SQL COMMIT WORK;	
   return PTEMSG_OK;
}

BYTE db_update_tlf01( pTLF01 tlf01_ptr )
{
    INT  retval;
    char ErrorMsg[256] = {0};

    tlf01_to_db( tlf01_ptr );

	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}

    /* Make sure we can access the record before attempting to update it. */
    EXEC SQL SELECT *
    INTO  :db_tlf01
    FROM   tlf01
    WHERE transaction_id = :pte_tlf01.transaction_id AND
		  rownum      = 1
    For Update NOWAIT;
      
   	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			sprintf(ErrorMsg,"Exceeded Query: %s, Data_Type : TLF01, Duration = %f",AppName,duration);
			parvbh_log_message(2, 3, ErrorMsg, " db_update_tlf01_1");
		}
	}   

    if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
    {
    	/* Record is inaccessible. Return with error. */ 
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		parvbh_log_message(2, 3, ErrorMsg, " db_update_tlf01_2");
		return DB_rcode;
    }
  
	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}

	EXEC SQL UPDATE tlf01
	SET  response_code = :pte_tlf01.response_code,
	   voice_auth_text = :pte_tlf01.voice_auth_text
	WHERE  transaction_id = :pte_tlf01.transaction_id;
    
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			sprintf(ErrorMsg,"Exceeded Query: %s, Data_Type : TLF01, Duration = %f",AppName,duration);
			parvbh_log_message(2, 3, ErrorMsg, " db_update_tlf01_3");
		}
	}   
       
    if ( SQLCODE != 0 )
    {
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		parvbh_log_message(2, 3, ErrorMsg, " db_update_tlf01_4");
		return DB_rcode;	
    }
	
    EXEC SQL COMMIT WORK;	
    return PTEMSG_OK;
}

BYTE db_update_tlf01_stip( pTLF01 tlf01_ptr )
{
    INT  retval;
    char ErrorMsg[256] = {0};

    tlf01_stip_to_db( tlf01_ptr );

	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}

    /* Make sure we can access the record before attempting to update it. */
    EXEC SQL SELECT *
    INTO  :db_tlf01_stip
    FROM   tlf01_stip
    WHERE terminal_id = :pte_tlf01_stip.terminal_id	AND
		  merchant_id = :pte_tlf01_stip.merchant_id	AND
		  card_num	  = :pte_tlf01_stip.card_num	AND
		  product2_code = 'stndin'					AND
		  rownum      = 1
    For Update NOWAIT;
      
   	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			sprintf(ErrorMsg,"Exceeded Query: %s, Data_Type : TLF01_STIP, Duration = %f",AppName,duration);
			parvbh_log_message(2, 3, ErrorMsg, " db_update_tlf01_stip_1");
		}
	}   

    if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
    {
    	/* Record is inaccessible. Return with error. */ 
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		parvbh_log_message(2, 3, ErrorMsg, " db_update_tlf01_stip_2");
		return DB_rcode;
    }
   
	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}

	EXEC SQL UPDATE tlf01_stip
	SET  product2_code = :pte_tlf01_stip.product2_code,
		 response_code = :pte_tlf01_stip.response_code,
	   voice_auth_text = :pte_tlf01_stip.voice_auth_text
	WHERE  terminal_id = :pte_tlf01_stip.terminal_id	AND
		   merchant_id = :pte_tlf01_stip.merchant_id	AND
		   card_num	   = :pte_tlf01_stip.card_num		AND
		   product2_code = 'stndin';
    
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			sprintf(ErrorMsg,"Exceeded Query: %s, Data_Type : TLF01_STIP, Duration = %f",AppName,duration);
			parvbh_log_message(2, 3, ErrorMsg, " db_update_tlf01_stip_3");
		}
	}   
       
    if ( SQLCODE != 0 )
    {
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		parvbh_log_message(2, 3, ErrorMsg, " db_update_tlf01_stip_4");
		return DB_rcode;	
    }
	
    EXEC SQL COMMIT WORK;	
    return PTEMSG_OK;
}

void get_time( pCHAR time_date, pCHAR time_str )
{
   memset ( time_str,  0x00,          7 );
   strncpy( time_str, &time_date[11], 2 );
   strncat( time_str, &time_date[14], 2 );
   strncat( time_str, &time_date[17], 2 );
}

int Convert_Amt_To_Auth_Tx_String_Format(double nAmount, char* strAmount)
{
	char strTemp[256] = {0} ;
	int  nStringLength = 0 ;
	int  nIndex = 0 ;

	gcvt (nAmount*100, 15, strTemp) ; // choice of 15 is arbitrary

	nStringLength = strlen (strTemp) ;
	// Discard all characters after the decimal point, if present
	for (nIndex = 0; nIndex < nStringLength ; nIndex++)
	{
		if ('.' == strTemp[nIndex])
		{
			strTemp[nIndex] = 0 ;
			break ;
		}
	}

	strcpy (strAmount, strTemp) ;
	return 1 ;
} /* Convert_Amt_To_Auth_Tx_String_Format */

void LeftFill_String_With_Character (unsigned int destination_array_size,
                                     char* strAmount,
                                     unsigned char fill_character) 
{
   unsigned char strTemp[256] = {0} ;
   int len = 0 ;
   memset (strTemp, fill_character, sizeof strTemp) ;
   
   len = strlen (strAmount) ;
   strTemp [destination_array_size - len] = 0 ;
   strcat (strTemp, strAmount) ;
   strcpy (strAmount, strTemp) ;
}

BYTE db_select_padraw( pCHAR     Primary_key, 
                       pPAD_RAW  padraw_ptr, 
                       pCHAR     ErrorMsg )
{
   BYTE retval;

   memset( &db_pad_raw, 0x00, sizeof(db_pad_raw) );
   memset( &pte_tlf01_stip,   0x00, sizeof(pte_tlf01_stip ) );
   memcpy( pte_tlf01_stip.transaction_id, Primary_key, sizeof(pte_tlf01_stip.transaction_id));

	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
	
   EXEC SQL SELECT *
            INTO  :db_pad_raw
            FROM   PAD_RAW
            WHERE  transaction_id = :pte_tlf01_stip.transaction_id;
            
    if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			sprintf(ErrorMsg,"Exceeded Query: %s, Data_Type : PAD_RAW, Duration = %f",AppName,duration);
			parvbh_log_message(2, 3, ErrorMsg, " db_select_padraw_1");
		}
	}        

   if ( SQLCODE != 0 )
   {
	   DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	   parvbh_log_message(2, 3, ErrorMsg, " db_select_padraw_2");
	   retval = PTEMSG_NOT_FOUND;
   }
   else
   {
      memcpy( padraw_ptr->transaction_id, db_pad_raw.tran_id,           sizeof(db_pad_raw.tran_id)  );   
      memcpy( padraw_ptr->DATA_LENGTH,    db_pad_raw.len,               sizeof(db_pad_raw.len)      );
      memcpy( padraw_ptr->RAW_DATA,       &db_pad_raw.padrawblock.raw_data, sizeof(padraw_ptr->RAW_DATA));
      memcpy( padraw_ptr->system_date,    db_pad_raw.sys_date,          sizeof(db_pad_raw.sys_date) );
      retval = PTEMSG_OK;
   }
   return( retval );   
}

BYTE db_select_bch20_for_preauth_total_amount(pBCH20 bch20_record, pCHAR lookupDate)
{
	INT  retval;
	double amount = 0.0;
	double camount = 0.0;
	double offline_auth_amount=0.0;
	double Preauth_auth_amount=0.0;
    char temp_total_debit_amt[13]={0};
    BYTE temp_offline_auth_amount[13]={0};
    BYTE temp_Preauth_auth_amount[13]={0};
	
	char temp_response_code[3]="00";
	char LErrorMsg[1000]={0};
	BCH20 OrigBch20;

	memset( &db_bch20, 0, sizeof( db_bch20 ) );
	memset( &pte_bch20, 0, sizeof( pte_bch20 ) );
   
   strncpy( pte_bch20.merchant_id, bch20_record->merchant_id, sizeof(pte_bch20.merchant_id) );
   strncpy( pte_bch20.auth_number, bch20_record->auth_number, sizeof(pte_bch20.auth_number) );
   strncpy( pte_bch20.card_nbr,    bch20_record->card_nbr,    sizeof(pte_bch20.card_nbr   ) );
   strncpy( pte_bch20.retrieval_ref_num, bch20_record->primary_key.retrieval_ref_num, sizeof(pte_bch20.retrieval_ref_num) );
   strncpy( pte_bch20.tran_date, bch20_record->tran_date, (sizeof(pte_bch20.tran_date) -1));
		   
    EXEC SQL DECLARE bch20_preauth_cursor_1 CURSOR FOR
    SELECT *
    FROM bch20
    WHERE merchant_id = :pte_bch20.merchant_id AND 
    	  card_nbr 	  = :pte_bch20.card_nbr    AND 
    	  product5_code is null				   AND
    	  tran_date < :sys_current_date; 
    
    EXEC SQL WHENEVER SQLERROR goto sql_error_pa1;
    
    EXEC SQL OPEN bch20_preauth_cursor_1;

    EXEC SQL WHENEVER SQLERROR goto sql_error_pa2;
    EXEC SQL WHENEVER NOTFOUND DO break;

    while(1)
    {
      memset(&db_bch20, 0x00, sizeof(db_bch20));
      EXEC SQL FETCH bch20_preauth_cursor_1
      INTO :db_bch20;

      sql_error_pa2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE bch20_preauth_cursor_1;

		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 parvbh_log_message(2, 3, ErrorMsg, " db_select_bch20_for_preauth_total_amount_1");
		 return DB_rcode;
	  }

      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
 		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
 		 parvbh_log_message(2, 3, ErrorMsg, " db_select_bch20_for_preauth_total_amount_2");
 		 return DB_rcode;
      }

      memcpy(temp_Preauth_auth_amount, db_bch20.tran_amount.arr, db_bch20.tran_amount.len);
      // Add the total Auth Amount
      camount = strtod (temp_Preauth_auth_amount, 0) / 100;
      amount = amount  + camount;
   }
  
   EXEC SQL CLOSE bch20_preauth_cursor_1;     
  
   sql_error_pa1:
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 parvbh_log_message(2, 3, ErrorMsg, " db_select_bch20_for_preauth_total_amount_3");
		 return DB_rcode;
   }
   
   Convert_Amt_To_Auth_Tx_String_Format(amount,temp_total_debit_amt);
   LeftFill_String_With_Character (sizeof temp_total_debit_amt-1, temp_total_debit_amt,'0') ;
   strncpy (bch20_record->product_codes[4].amount, &temp_total_debit_amt, 12) ;
		
   return PTEMSG_OK;
}

/*******************************PREAUTH REVERSALS FUNCTIONS - END**************************************/

