/******************************************************************************
  
   Module:           rep_database.pc
  
   Title:            Report Server Dataserver DB Routines
  
   Description:
   
   Application:      EQITABLE

   Authour:          irina

   Revision History
   ----------------
      Rev 1.26   Aug 24 2007   dirby
  
******************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#ifdef WIN32
#include <sqlproto.h>
#endif
#include <math.h>
#include <time.h>
#include <sys/timeb.h>

#include "basictyp.h"
#include "pte.h"
#include "pteipc.h"
#include "ptemsg.h"
#include "ptetimer.h"
#include "app_info.h"
#include "equitdb.h"
#include "dbcommon.h"
#include "tx_dbstruct.h"
#include "txutils.h"
#include "ptetime.h"
#include "rep_database.h"
#include "ntutils.h"
#include "memmnger.h"
#include "nc_dbstruct.h"

/* Oracle error codes */
#define NULL_COLUMN_DATA -1405
#define NO_DATA_FOUND    1403
#define TABLE_DOESNT_EXIST -942


#ifdef _DEBUG
   #define PRINT( X ) printf( X )
#else
   #define PRINT( X )
#endif


/* For DB statics added by raghu */
extern BYTE DB_MsgSubtype2 ;
extern BYTE DB_MsgSubtype1 ;
char DB_Tmr_Lgng_Buf[512];
double start_time;
double end_time  ;
double duration  ; 
extern INT db_error_statics_flag;
extern double db_error_statics_value;
char er_buf[512];
BYTE DB_rcode;
extern CHAR  DB_Logging_Filename[256];
extern CHAR  DB_module_file_name[256];
extern CHAR  DB_file_path[256];
/* End   */

extern CHAR AppName[];
SQL01  Sql01;
INT    rtnval;

EXEC SQL BEGIN DECLARE SECTION;

   /* error code variable */
   long    SQLCODE;
   long    SQL_CODE;

/* A structure copied from update_ds/update_db.pc */
typedef struct
{
   unsigned short len;
   unsigned char  pin_data[300];

}RAWEMVDATA;

EXEC SQL TYPE RAWEMVDATA is VARRAW(5000);


struct
{
    char transaction_id                     [21]; 

    char entry_type                         ;
    char tpdu_id                            [16];
    char issuer_id                          [21];
    char acquirer_id                        [21];
    char tx_key                             ;
    char terminal_id                        [9];
    char terminal_type                      [3];
    char response_text                      [41];
    char card_num_len                       [3];
    char card_num                           [20];
    char exp_date                           [5];
    char total_amount                       [13];
    char add_amounts                        [25];
    char invoice_number                     [9];
    char orig_amount                        [13];
    char auth_number                        [7];
    char processing_code                    [7];
    char sys_trace_audit_num                [7];
    char orig_sys_trace_num                 [7];
    char pos_entry_mode                     [5];
    char nii                                [5];
    char pos_condition_code                 [3];
    char track1                             [77];
    char track2                             [38];
    char retrieval_ref_num                  [13];
    char orig_retrieval_ref_num             [13];
    char merchant_id                        [16];
    char orig_message                       [5];
    char settlement_total                   [17];
    char message_type                       [5];
    char card_holder_name                   [31];
    char general_status                     ;
    char originator_queue                   [17];
    char originator_info                    [33];
    char batch_number                       [7];
    char response_code                      [3];
    char date_yyyymmdd                      [9];
    char time_hhmmss                        [7];
    char num_sales                          [4];
    char sales_amount                       [13];
    char num_refunds                        [4];
    char refund_amount                      [13];
    char num_dbsales                        [4];
    char dbsales_amount                     [13];
    char num_dbrefunds                      [4];
    char dbrefund_amount                    [13];
    char pin_block                          [19];
    char tax_amount                         [13];
    char tip_amount                         [13];
    char tran_start_time                    [17];
    char host_start_time                    [17];
    char host_finish_time                   [17];
    char tran_finish_time                   [17];
    char settle_file_prefix                 [7];
    char resp_source_len                    [3];
    char visa_char_indicator                ;
    char visa_tran_id                       [16];
    char visa_validation_code               [5];
    char mcard_banknet_len                  [4];
    char mcard_banknet                      [51];
    char agent_id_len                       [4];
    char agent_id                           [12];
    char cvc                                ;
    char settlement_date                    [5];

    char category_code                      [5];
    char conversion_rate                    [10];
    char product_code                       [9];
    char odometer                           [8];
    char organization_id                    [5];
    char dynamic_keychange                  ;

   char source_key                         [49];
   char txn_cnt                            [4];
   char dcf01_retired_cwk                  [49];
   char dest_key                           [49];
   char ncf01_retired_cwk                  [49];
   char handler_queue                      [8];
   char authorizing_host_queue             [8];
   char max_net_consec_tmouts              [4];
   char max_active_txns                    [4];
   char forwarding_institution_id          [12];
   char remote_nsp_type                    [2];
   char kek                                [17]; 
   char acquiring_id                       [12];
   char outstanding_balance                [13]; 
   char credit_limit                       [13];
   char nfi_name                           [11];
   char nfi_seq_nbr                        [7];
   char nfi_start_date                     [9];
   char nfi_end_date                       [9];
   char resp_source                        [26];

   char origin                             [3];
   char auth_1                             [3];
   char auth_2                             [3];
   char update_mask                        [2];
   char type_of_data                       [3];
   char down_payment                       [13];
   char period                             [3];
   char interest_rate                      [5];
   char total_interest                     [13];
   char redemption_amount                  [13];
   char vehicle_number                     [9];

   char profile                                    [3];
   char nbr_of_prod_codes                          [3];
   
   char product1_code                              [7];
   char product1_quantity                          [3];
   char product1_amount                            [13];
   char product2_code                              [7];
   char product2_quantity                          [3];
   char product2_amount                            [13];
   char product3_code                              [7];
   char product3_quantity                          [3];
   char product3_amount                            [13];
   char product4_code                              [7];
   char product4_quantity                          [3];
   char product4_amount                            [13];
   char product5_code                              [7];
   char product5_quantity                          [3];
   char product5_amount                            [13];
   char product6_code                              [7];
   char product6_quantity                          [3];
   char product6_amount                            [13];
   char product7_code                              [7];
   char product7_quantity                          [3];
   char product7_amount                            [13];
   char product8_code                              [7];
   char product8_quantity                          [3];
   char product8_amount                            [13];
   char product9_code                              [7];
   char product9_quantity                          [3];
   char product9_amount                            [13];
   char product10_code                              [7];
   char product10_quantity                          [3];
   char product10_amount                            [13];
   char product11_code                              [7];
   char product11_quantity                          [3];
   char product11_amount                            [13];
   char product12_code                              [7];
   char product12_quantity                          [3];
   char product12_amount                            [13];
   char product13_code                              [7];
   char product13_quantity                          [3];
   char product13_amount                            [13];
   char product14_code                              [7];
   char product14_quantity                          [3];
   char product14_amount                            [13];
   char product15_code                              [7];
   char product15_quantity                          [3];
   char product15_amount                            [13];
   char product16_code                              [7];
   char product16_quantity                          [3];
   char product16_amount                            [13];
   char product17_code                              [7];
   char product17_quantity                          [3];
   char product17_amount                            [13];
   char product18_code                              [7];
   char product18_quantity                          [3];
   char product18_amount                            [13];
   char product19_code                              [7];
   char product19_quantity                          [3];
   char product19_amount                            [13];
   char product20_code                              [7];
   char product20_quantity                          [3];
   char product20_amount                            [13];
   char visa_merchant_id                            [16];
   char cash_bonus                                  [2];  /* added 01-29-99 by IG */
   char deferred_factor                             [8];  /* added 01-29-99 by IG */
   char deferred_term_length                        [4];  /* added 01-29-99 by IG */
   char currency_code                               [4];  /* added 01-29-99 by IG */
   char transmission_timestamp                      [11]; /* added 01-29-99 by IG */
   char tran_fee_amount                             [9];  /* added 01-29-99 by IG */
   char cvc_data                                    [4];  /* added 01-29-99 by IG */

   char verify_mag_stripe                           [2];  /* added 02-09-99 by IG */
   char saf                                         [2];  /* added 02-09-99 by IG */
   char security_response_code                      [3];  /* added 02-09-99 by IG */
   char service_code                                [4];  /* added 02-09-99 by IG */
   char source_pin_format                           [3];  /* added 02-09-99 by IG */
   char dest_pin_format                             [3];  /* added 02-09-99 by IG */
   char voice_auth                                  [2];  /* added 02-09-99 by IG */
   char actual_amount                               [13]; /* AP IG, Equitable 02-10-99 */
   char reversal_amount                             [13]; /* AP IG, Equitable 02-10-99 */
   char voice_auth_text                             [241]; /* IG 02-22-99 */ 
   char operator_id                                 [21];  /* IA 03-09-99 */
   char workstation                                 [21];  /* IA 03-16-99 */
   char orig_auth_number                            [7];   /* IA 04-08-99 */
   char ticket_nbr									[16];
   char system_date									[9];
   char def_gross_amt                               [13];
   char monthly_amort_amt                           [13];

}pte_tlf01;

struct
{
    varchar transaction_id                     [21]; 

    varchar entry_type                         [1];
    varchar tpdu_id                            [16];
    varchar issuer_id                          [21];
    varchar acquirer_id                        [21];
    varchar tx_key                             [1];
    varchar terminal_id                        [9];
    varchar terminal_type                      [3];
    varchar response_text                      [41];
    varchar card_num_len                       [3];
    varchar card_num                           [20];
    varchar exp_date                           [5];
    varchar total_amount                       [13];
    varchar add_amounts                        [25];
    varchar invoice_number                     [9];
    varchar orig_amount                        [13];
    varchar auth_number                        [7];
    varchar processing_code                    [7];
    varchar sys_trace_audit_num                [7];
    varchar orig_sys_trace_num                 [7];
    varchar pos_entry_mode                     [5];
    varchar nii                                [5];
    varchar pos_condition_code                 [3];
    varchar track1                             [77];
    varchar track2                             [38];
    varchar retrieval_ref_num                  [13];
    varchar orig_retrieval_ref_num             [13];
    varchar merchant_id                        [16];
    varchar orig_message                       [5];
    varchar settlement_total                   [17];
    varchar message_type                       [5];
    varchar card_holder_name                   [31];
    varchar general_status                     [1];
    varchar originator_queue                   [17];
    varchar originator_info                    [33];
    varchar batch_number                       [7];
    varchar response_code                      [3];
    varchar date_yyyymmdd                      [9];
    varchar time_hhmmss                        [7];
    varchar num_sales                          [4];
    varchar sales_amount                       [13];
    varchar num_refunds                        [4];
    varchar refund_amount                      [13];
    varchar num_dbsales                        [4];
    varchar dbsales_amount                     [13];
    varchar num_dbrefunds                      [4];
    varchar dbrefund_amount                    [13];
    varchar pin_block                          [19];
    varchar tax_amount                         [13];
    varchar tip_amount                         [13];
    varchar tran_start_time                    [17];
    varchar host_start_time                    [17];
    varchar host_finish_time                   [17];
    varchar tran_finish_time                   [17];
    varchar settle_file_prefix                 [7];
    varchar resp_source_len                    [3];
    varchar visa_char_indicator                [1];
    varchar visa_tran_id                       [16];
    varchar visa_validation_code               [5];
    varchar mcard_banknet_len                  [4];
    varchar mcard_banknet                      [51];
    varchar agent_id_len                       [4];
    varchar agent_id                           [12];
    varchar cvc                                [1];
    varchar settlement_date                    [5];

    varchar category_code                      [5];
    varchar conversion_rate                    [10];
    varchar product_code                       [9];
    varchar odometer                           [8];
    varchar organization_id                    [5];
    varchar dynamic_keychange                  [1];

   varchar source_key                         [49];
   varchar txn_cnt                            [4];
   varchar dcf01_retired_cwk                  [49];
   varchar dest_key                           [49];
   varchar ncf01_retired_cwk                  [49];
   varchar handler_queue                      [8];
   varchar authorizing_host_queue             [8];
   varchar max_net_consec_tmouts              [4];
   varchar max_active_txns                    [4];
   varchar forwarding_institution_id          [12];
   varchar remote_nsp_type                    [2];
   varchar kek                                [17];
   varchar acquiring_id                       [12];
   varchar outstanding_balance                [13];
   varchar credit_limit                       [13];
   varchar nfi_name                           [11];
   varchar nfi_seq_nbr                        [7];
   varchar nfi_start_date                     [9];
   varchar nfi_end_date                       [9];
   varchar resp_source                        [26];
   varchar origin                             [3];
   varchar auth_1                             [3];
   varchar auth_2                             [3];
   varchar update_mask                        [2];
   varchar type_of_data                       [3];
   varchar down_payment                       [13];
   varchar period                             [3];
   varchar interest_rate                      [5];
   varchar total_interest                     [13];
   varchar redemption_amount                  [13];
   varchar vehicle_number                     [9];

   varchar profile                                    [3];
   varchar nbr_of_prod_codes                          [3];
   
   varchar product1_code                              [7];
   varchar product1_quantity                          [3];
   varchar product1_amount                            [13];
   varchar product2_code                              [7];
   varchar product2_quantity                          [3];
   varchar product2_amount                            [13];
   varchar product3_code                              [7];
   varchar product3_quantity                          [3];
   varchar product3_amount                            [13];
   varchar product4_code                              [7];
   varchar product4_quantity                          [3];
   varchar product4_amount                            [13];
   varchar product5_code                              [7];
   varchar product5_quantity                          [3];
   varchar product5_amount                            [13];
   varchar product6_code                              [7];
   varchar product6_quantity                          [3];
   varchar product6_amount                            [13];
   varchar product7_code                              [7];
   varchar product7_quantity                          [3];
   varchar product7_amount                            [13];
   varchar product8_code                              [7];
   varchar product8_quantity                          [3];
   varchar product8_amount                            [13];
   varchar product9_code                              [7];
   varchar product9_quantity                          [3];
   varchar product9_amount                            [13];
   varchar product10_code                              [7];
   varchar product10_quantity                          [3];
   varchar product10_amount                            [13];
   varchar product11_code                              [7];
   varchar product11_quantity                          [3];
   varchar product11_amount                            [13];
   varchar product12_code                              [7];
   varchar product12_quantity                          [3];
   varchar product12_amount                            [13];
   varchar product13_code                              [7];
   varchar product13_quantity                          [3];
   varchar product13_amount                            [13];
   varchar product14_code                              [7];
   varchar product14_quantity                          [3];
   varchar product14_amount                            [13];
   varchar product15_code                              [7];
   varchar product15_quantity                          [3];
   varchar product15_amount                            [13];
   varchar product16_code                              [7];
   varchar product16_quantity                          [3];
   varchar product16_amount                            [13];
   varchar product17_code                              [7];
   varchar product17_quantity                          [3];
   varchar product17_amount                            [13];
   varchar product18_code                              [7];
   varchar product18_quantity                          [3];
   varchar product18_amount                            [13];
   varchar product19_code                              [7];
   varchar product19_quantity                          [3];
   varchar product19_amount                            [13];
   varchar product20_code                              [7];
   varchar product20_quantity                          [3];
   varchar product20_amount                            [13];
   varchar visa_merchant_id                            [16];
   varchar cash_bonus                                  [2];  /* added 01-29-99 by IG */
   varchar deferred_factor                             [8];  /* added 01-29-99 by IG */
   varchar deferred_term_length                        [4];  /* added 01-29-99 by IG */
   varchar currency_code                               [4];  /* added 01-29-99 by IG */
   varchar transmission_timestamp                      [11]; /* added 01-29-99 by IG */
   varchar tran_fee_amount                             [9];  /* added 01-29-99 by IG */
   varchar cvc_data                                    [4];  /* added 01-29-99 by IG */
   varchar verify_mag_stripe                           [2];  /* added 02-09-99 by IG */
   varchar saf                                         [2];  /* added 02-09-99 by IG */
   varchar security_response_code                      [3];  /* added 02-09-99 by IG */
   varchar service_code                                [4];  /* added 02-09-99 by IG */
   varchar source_pin_format                           [3];  /* added 02-09-99 by IG */
   varchar dest_pin_format                             [3];  /* added 02-09-99 by IG */
   varchar voice_auth                                  [2];  /* added 02-09-99 by IG */
   varchar actual_amount                               [13]; /* AP IG, Equitable 02-10-99 */
   varchar reversal_amount                             [13]; /* AP IG, Equitable 02-10-99 */
   varchar voice_auth_text                             [241]; /* IG 02-22-99 */
   varchar operator_id                                 [21];  /* IA 03-09-99 */
   varchar workstation                                 [21];  /* IA 03-16-99 */
   varchar orig_auth_number                            [7];   /* IA 04-08-99 */
   varchar ticket_nbr							       [16];
   varchar system_date							       [9];
   varchar def_gross_amt                               [13];
   varchar monthly_amort_amt                           [13];

}db_tlf01;


struct
{
      char       tran_id[21];   
      char       len[4];
      char       sys_date[9];
      RAWEMVDATA emvblock;
}
db_emv_raw;

struct
{
	varchar  organization_id     [5];
	varchar  merchant_id         [16];
	varchar  name01				[31];
	varchar  name02				[31];
	varchar  address01			[31];
	varchar  address02			[31];
	varchar  city				[21];
}
db_mcf01_report;

struct
{
	varchar  card_nbr           [20];
	varchar  card_type          [2];
	varchar  name_dba			[31];
	varchar  address1			[31];
	varchar  address2			[31];
	varchar  city				[21];
}
db_ccf01_report;

struct
{
	varchar  primary_acct_nbr   [20];
	varchar  name_dba			[31];
	varchar  address1			[31];
	varchar  address2			[31];
	varchar  city				[21];
}
db_paf01_report;


/* ----------------------------- */
/* Fraudguard Transaction Tables */
/* ----------------------------- */
struct
{
   char  transaction_id         [21];
   char  timestamp              [20];
   char  message_type            [5];
   char  card_num               [20];
   char  processing_code         [7];
   char  amount_peso            [13];
   char  amount_usd             [13];
   char  gmt                    [11];
   char  sys_trace_audit_num     [7];
   char  mcc                     [5];
   char  country_code            [5];
   char  pos_entry_mode          [5];
   char  pos_condition_code      [3];
   char  acquiring_id           [21];
   char  auth_number             [7];
   char  response_code           [3];
   char  terminal_id             [9];
   char  merchant_id            [16];
   char  card_acceptor_name     [26];
   char  card_acceptor_city     [14];
   char  card_acceptor_country   [4];
   char  currency_code_txn       [4];
   char  currency_code_billing   [4];
   char  pos_info               [31];
   char  status                     ;
   char  system_date             [9];
   char  result_code             [6];
   char  application            [21];
   char  rule_domain            [81];
   char  caller_id               [6];
   char  caller_msg_id         [256];
   char  result_text           [256];
   char  product                [31];

} pte_fguard;

struct
{
   varchar  transaction_id         [21];
   varchar  timestamp              [20];
   varchar  message_type            [5];
   varchar  card_num               [20];
   varchar  processing_code         [7];
   varchar  amount_peso            [13];
   varchar  amount_usd             [13];
   varchar  gmt                    [11];
   varchar  sys_trace_audit_num     [7];
   varchar  mcc                     [5];
   varchar  country_code            [5];
   varchar  pos_entry_mode          [5];
   varchar  pos_condition_code      [3];
   varchar  acquiring_id           [21];
   varchar  auth_number             [7];
   varchar  response_code           [3];
   varchar  terminal_id             [9];
   varchar  merchant_id            [16];
   varchar  card_acceptor_name     [26];
   varchar  card_acceptor_city     [14];
   varchar  card_acceptor_country   [4];
   varchar  currency_code_txn       [4];
   varchar  currency_code_billing   [4];
   varchar  pos_info               [31];
   varchar  status                  [1];
   varchar  system_date             [9];
   varchar  result_code             [6];
   varchar  application            [21];
   varchar  rule_domain            [81];
   varchar  caller_id               [6];
   varchar  caller_msg_id         [256];
   varchar  result_text           [256];
   varchar  product                [31];

} db_fguard;


struct
{
   char   transaction_id[21];
   char   system_date    [9];
   char   length         [5];
   char   raw_data    [1500];
}
db_fg_raw;

struct
{
    char  transaction_id                            [21];
    char  system_date                        [9]; 
    char  length_serial_no                          [3];
    char  total_length                     [3];
    char  table_id                       [4];
    char  serial_number                            [51];
    char  future_field_1                          [51];
    char  future_field_2                          [51];


}pte_ptsn01;


struct
{
    varchar  transaction_id                            [21];
    varchar  system_date                        [9]; 
    varchar  length_serial_no                          [3];
    varchar  total_length                     [3];
    varchar  table_id                       [4];
    varchar  serial_number                            [51];
    varchar  future_field_1                          [51];
    varchar  future_field_2                          [51];


}db_ptsn01;

/* Created new table to hold stand-in procesed transactions - Girija Y */
struct
{
    char transaction_id                     [21]; 

    char entry_type                         ;
    char tpdu_id                            [16];
    char issuer_id                          [21];
    char acquirer_id                        [21];
    char tx_key                             ;
    char terminal_id                        [9];
    char terminal_type                      [3];
    char response_text                      [41];
    char card_num_len                       [3];
    char card_num                           [20];
    char exp_date                           [5];
    char total_amount                       [13];
    char add_amounts                        [25];
    char invoice_number                     [9];
    char orig_amount                        [13];
    char auth_number                        [7];
    char processing_code                    [7];
    char sys_trace_audit_num                [7];
    char orig_sys_trace_num                 [7];
    char pos_entry_mode                     [5];
    char nii                                [5];
    char pos_condition_code                 [3];
    char track1                             [77];
    char track2                             [38];
    char retrieval_ref_num                  [13];
    char orig_retrieval_ref_num             [13];
    char merchant_id                        [16];
    char orig_message                       [5];
    char settlement_total                   [17];
    char message_type                       [5];
    char card_holder_name                   [31];
    char general_status                     ;
    char originator_queue                   [17];
    char originator_info                    [33];
    char batch_number                       [7];
    char response_code                      [3];
    char date_yyyymmdd                      [9];
    char time_hhmmss                        [7];
    char num_sales                          [4];
    char sales_amount                       [13];
    char num_refunds                        [4];
    char refund_amount                      [13];
    char num_dbsales                        [4];
    char dbsales_amount                     [13];
    char num_dbrefunds                      [4];
    char dbrefund_amount                    [13];
    char pin_block                          [19];
    char tax_amount                         [13];
    char tip_amount                         [13];
    char tran_start_time                    [17];
    char host_start_time                    [17];
    char host_finish_time                   [17];
    char tran_finish_time                   [17];
    char settle_file_prefix                 [7];
    char resp_source_len                    [3];
    char visa_char_indicator                ;
    char visa_tran_id                       [16];
    char visa_validation_code               [5];
    char mcard_banknet_len                  [4];
    char mcard_banknet                      [51];
    char agent_id_len                       [4];
    char agent_id                           [12];
    char cvc                                ;
    char settlement_date                    [5];

    char category_code                      [5];
    char conversion_rate                    [10];
    char product_code                       [9];
    char odometer                           [8];
    char organization_id                    [5];
    char dynamic_keychange                  ;

   char source_key                          [49];
   char txn_cnt                            [4];
   char dcf01_retired_cwk                  [49];
   char dest_key                           [49];
   char ncf01_retired_cwk                  [49];
   char handler_queue        		       [8];
   char authorizing_host_queue		   	   [8];
   char max_net_consec_tmouts              [4];
   char max_active_txns                    [4];
   char forwarding_institution_id          [12];
   char remote_nsp_type                    [2];
   char kek                                [17]; 
   char acquiring_id                       [12];
   char outstanding_balance                [13]; 
   char credit_limit                       [13];
   char nfi_name                           [11];
   char nfi_seq_nbr                        [7];
   char nfi_start_date                     [9];
   char nfi_end_date                       [9];
   char resp_source                        [26];

   char origin                             [3];
   char auth_1                             [3];
   char auth_2                             [3];
   char update_mask                        [2];
   char type_of_data                       [3];
   char down_payment                       [13];
   char period                             [3];
   char interest_rate                      [5];
   char total_interest                     [13];
   char redemption_amount                  [13];
   char vehicle_number                     [9];

   char profile                                    [3];
   char nbr_of_prod_codes                          [3];
   
   char product1_code                              [7];
   char product1_quantity                          [3];
   char product1_amount                            [13];
   char product2_code                              [7];
   char product2_quantity                          [3];
   char product2_amount                            [13];
   char product3_code                              [7];
   char product3_quantity                          [3];
   char product3_amount                            [13];
   char product4_code                              [7];
   char product4_quantity                          [3];
   char product4_amount                            [13];
   char product5_code                              [7];
   char product5_quantity                          [3];
   char product5_amount                            [13];
   char product6_code                              [7];
   char product6_quantity                          [3];
   char product6_amount                            [13];
   char product7_code                              [7];
   char product7_quantity                          [3];
   char product7_amount                            [13];
   char product8_code                              [7];
   char product8_quantity                          [3];
   char product8_amount                            [13];
   char product9_code                              [7];
   char product9_quantity                          [3];
   char product9_amount                            [13];
   char product10_code                              [7];
   char product10_quantity                          [3];
   char product10_amount                            [13];
   char product11_code                              [7];
   char product11_quantity                          [3];
   char product11_amount                            [13];
   char product12_code                              [7];
   char product12_quantity                          [3];
   char product12_amount                            [13];
   char product13_code                              [7];
   char product13_quantity                          [3];
   char product13_amount                            [13];
   char product14_code                              [7];
   char product14_quantity                          [3];
   char product14_amount                            [13];
   char product15_code                              [7];
   char product15_quantity                          [3];
   char product15_amount                            [13];
   char product16_code                              [7];
   char product16_quantity                          [3];
   char product16_amount                            [13];
   char product17_code                              [7];
   char product17_quantity                          [3];
   char product17_amount                            [13];
   char product18_code                              [7];
   char product18_quantity                          [3];
   char product18_amount                            [13];
   char product19_code                              [7];
   char product19_quantity                          [3];
   char product19_amount                            [13];
   char product20_code                              [7];
   char product20_quantity                          [3];
   char product20_amount                            [13];
   char visa_merchant_id                            [16];
   char cash_bonus                                  [2];  
   char deferred_factor                             [8]; 
   char deferred_term_length                        [4]; 
   char currency_code                               [4];  
   char transmission_timestamp                      [11]; 
   char tran_fee_amount                             [9];  
   char cvc_data                                    [4];  

   char verify_mag_stripe                           [2];  
   char saf                                         [2];  
   char security_response_code                      [3];  
   char service_code                                [4];  
   char source_pin_format                           [3];  
   char dest_pin_format                             [3];  
   char voice_auth                                  [2]; 
   char actual_amount                               [13]; 
   char reversal_amount                             [13]; 
   char voice_auth_text                             [241]; 
   char operator_id                                 [21];  
   char workstation                                 [21];  
   char orig_auth_number                            [7];  
   char ticket_nbr									[16];
   char system_date                                 [9];
   char def_gross_amt                               [13];
   char monthly_amort_amt                           [13];
}pte_tlf01_stip;

struct
{
    varchar transaction_id                     [21]; 

    varchar entry_type                         [1];
    varchar tpdu_id                            [16];
    varchar issuer_id                          [21];
    varchar acquirer_id                        [21];
    varchar tx_key                             [1];
    varchar terminal_id                        [9];
    varchar terminal_type                      [3];
    varchar response_text                      [41];
    varchar card_num_len                       [3];
    varchar card_num                           [20];
    varchar exp_date                           [5];
    varchar total_amount                       [13];
    varchar add_amounts                        [25];
    varchar invoice_number                     [9];
    varchar orig_amount                        [13];
    varchar auth_number                        [7];
    varchar processing_code                    [7];
    varchar sys_trace_audit_num                [7];
    varchar orig_sys_trace_num                 [7];
    varchar pos_entry_mode                     [5];
    varchar nii                                [5];
    varchar pos_condition_code                 [3];
    varchar track1                             [77];
    varchar track2                             [38];
    varchar retrieval_ref_num                  [13];
    varchar orig_retrieval_ref_num             [13];
    varchar merchant_id                        [16];
    varchar orig_message                       [5];
    varchar settlement_total                   [17];
    varchar message_type                       [5];
    varchar card_holder_name                   [31];
    varchar general_status                     [1];
    varchar originator_queue                   [17];
    varchar originator_info                    [33];
    varchar batch_number                       [7];
    varchar response_code                      [3];
    varchar date_yyyymmdd                      [9];
    varchar time_hhmmss                        [7];
    varchar num_sales                          [4];
    varchar sales_amount                       [13];
    varchar num_refunds                        [4];
    varchar refund_amount                      [13];
    varchar num_dbsales                        [4];
    varchar dbsales_amount                     [13];
    varchar num_dbrefunds                      [4];
    varchar dbrefund_amount                    [13];
    varchar pin_block                          [19];
    varchar tax_amount                         [13];
    varchar tip_amount                         [13];
    varchar tran_start_time                    [17];
    varchar host_start_time                    [17];
    varchar host_finish_time                   [17];
    varchar tran_finish_time                   [17];
    varchar settle_file_prefix                 [7];
    varchar resp_source_len                    [3];
    varchar visa_char_indicator                [1];
    varchar visa_tran_id                       [16];
    varchar visa_validation_code               [5];
    varchar mcard_banknet_len                  [4];
    varchar mcard_banknet                      [51];
    varchar agent_id_len                       [4];
    varchar agent_id                           [12];
    varchar cvc                                [1];
    varchar settlement_date                    [5];

    varchar category_code                      [5];
    varchar conversion_rate                    [10];
    varchar product_code                       [9];
    varchar odometer                           [8];
    varchar organization_id                    [5];
    varchar dynamic_keychange                  [1];

   varchar source_key                         [49];
   varchar txn_cnt                            [4];
   varchar dcf01_retired_cwk                  [49];
   varchar dest_key                           [49];
   varchar ncf01_retired_cwk                  [49];
   varchar handler_queue        		      [8];
   varchar authorizing_host_queue		   	  [8];
   varchar max_net_consec_tmouts              [4];
   varchar max_active_txns                    [4];
   varchar forwarding_institution_id          [12];
   varchar remote_nsp_type                    [2];
   varchar kek                                [17];
   varchar acquiring_id                       [12];
   varchar outstanding_balance                [13];
   varchar credit_limit                       [13];
   varchar nfi_name                           [11];
   varchar nfi_seq_nbr                        [7];
   varchar nfi_start_date                     [9];
   varchar nfi_end_date                       [9];
   varchar resp_source                        [26];
   varchar origin                             [3];
   varchar auth_1                             [3];
   varchar auth_2                             [3];
   varchar update_mask                        [2];
   varchar type_of_data                       [3];
   varchar down_payment                       [13];
   varchar period                             [3];
   varchar interest_rate                      [5];
   varchar total_interest                     [13];
   varchar redemption_amount                  [13];
   varchar vehicle_number                     [9];

   varchar profile                                    [3];
   varchar nbr_of_prod_codes                          [3];
   
   varchar product1_code                              [7];
   varchar product1_quantity                          [3];
   varchar product1_amount                            [13];
   varchar product2_code                              [7];
   varchar product2_quantity                          [3];
   varchar product2_amount                            [13];
   varchar product3_code                              [7];
   varchar product3_quantity                          [3];
   varchar product3_amount                            [13];
   varchar product4_code                              [7];
   varchar product4_quantity                          [3];
   varchar product4_amount                            [13];
   varchar product5_code                              [7];
   varchar product5_quantity                          [3];
   varchar product5_amount                            [13];
   varchar product6_code                              [7];
   varchar product6_quantity                          [3];
   varchar product6_amount                            [13];
   varchar product7_code                              [7];
   varchar product7_quantity                          [3];
   varchar product7_amount                            [13];
   varchar product8_code                              [7];
   varchar product8_quantity                          [3];
   varchar product8_amount                            [13];
   varchar product9_code                              [7];
   varchar product9_quantity                          [3];
   varchar product9_amount                            [13];
   varchar product10_code                              [7];
   varchar product10_quantity                          [3];
   varchar product10_amount                            [13];
   varchar product11_code                              [7];
   varchar product11_quantity                          [3];
   varchar product11_amount                            [13];
   varchar product12_code                              [7];
   varchar product12_quantity                          [3];
   varchar product12_amount                            [13];
   varchar product13_code                              [7];
   varchar product13_quantity                          [3];
   varchar product13_amount                            [13];
   varchar product14_code                              [7];
   varchar product14_quantity                          [3];
   varchar product14_amount                            [13];
   varchar product15_code                              [7];
   varchar product15_quantity                          [3];
   varchar product15_amount                            [13];
   varchar product16_code                              [7];
   varchar product16_quantity                          [3];
   varchar product16_amount                            [13];
   varchar product17_code                              [7];
   varchar product17_quantity                          [3];
   varchar product17_amount                            [13];
   varchar product18_code                              [7];
   varchar product18_quantity                          [3];
   varchar product18_amount                            [13];
   varchar product19_code                              [7];
   varchar product19_quantity                          [3];
   varchar product19_amount                            [13];
   varchar product20_code                              [7];
   varchar product20_quantity                          [3];
   varchar product20_amount                            [13];
   varchar visa_merchant_id                            [16];
   varchar cash_bonus                                  [2];  
   varchar deferred_factor                             [8];  
   varchar deferred_term_length                        [4];  
   varchar currency_code                               [4];  
   varchar transmission_timestamp                      [11]; 
   varchar tran_fee_amount                             [9];  
   varchar cvc_data                                    [4];  
   varchar verify_mag_stripe                           [2];  
   varchar saf                                         [2];  
   varchar security_response_code                      [3];  
   varchar service_code                                [4];  
   varchar source_pin_format                           [3];  
   varchar dest_pin_format                             [3];  
   varchar voice_auth                                  [2];  
   varchar actual_amount                               [13]; 
   varchar reversal_amount                             [13]; 
   varchar voice_auth_text                             [241]; 
   varchar operator_id                                 [21];  
   varchar workstation                                 [21];  
   varchar orig_auth_number                            [7];   
   varchar ticket_nbr									[16];
   varchar system_date                                 [9];
   varchar def_gross_amt                               [13];
   varchar monthly_amort_amt                           [13];
}db_tlf01_stip;

struct
{
	char transaction_id                      [21];
	char system_date                         [9];
	char transaction_send_time				 [18];
	char mracon_sender_name				     [7];
	char transaction_number				     [21];
	char future_1						 	 [51];
	char future_2						 	 [51];
	char future_3						 	 [51];
	char future_4						 	 [51];
	char future_5						 	 [51];
	char future_use_1						 [101];
	char future_use_2						 [101];
	char future_use_3						 [101];
	char future_use_4						 [101];
	char future_use_5						 [101];
	char date_yyyymmdd						 [9];
}pte_mra01;

struct
{
	varchar transaction_id                       [20];
	varchar system_date                          [8];
	varchar transaction_send_time				 [17];
	varchar mracon_sender_name				     [6];
	varchar transaction_number				     [20];
	varchar future_1						 	 [50];
	varchar future_2						 	 [50];
	varchar future_3						 	 [50];
	varchar future_4						 	 [50];
	varchar future_5						 	 [50];
	varchar future_use_1						 [100];
	varchar future_use_2						 [100];
	varchar future_use_3						 [100];
	varchar future_use_4						 [100];
	varchar future_use_5						 [100];
	varchar date_yyyymmdd						 [8];
}db_mra01;


struct
{
	char tran_id      				[21];
	char sys_date                	[9];
	char card_brand              	[11];
	char handler_queue           	[11];
	char tran_req_sent_time      	[11];
	char tran_resp_recv_time     	[11];
	char tran_req_sent_mode    		[3];
	char tran_resp_recv_mode      	[3];
	char response_text           	[101];
	char decision_code_1_value   	[33];
	char decision_code_2_value   	[33];
	char decision_code_3_value   	[33];
	char decision_code_4_value   	[33];
	char decision_code_5_value   	[33];
	char decision_code_6_value   	[33];
	char decision_code_7_value   	[33];
	char decision_code_8_value   	[33];
	char decision_code_9_value  	[33];
	char decision_code_10_value  	[33];
	char future_field1				[13];
	char future_field2				[25];
	char future_field3				[37];
	char future_field4				[49];
	char future_field5				[61];
}pte_ftlf01;

struct
{
	varchar tran_id      				[20];
	varchar sys_date                	[8];
	varchar card_brand              	[10];
	varchar handler_queue           	[10];
	varchar tran_req_sent_time      	[10];
	varchar tran_resp_recv_time     	[10];
	varchar tran_req_sent_mode    		[2];
	varchar tran_resp_recv_mode      	[2];
	varchar response_text           	[100];
	varchar decision_code_1_value   	[32];
	varchar decision_code_2_value   	[32];
	varchar decision_code_3_value   	[32];
	varchar decision_code_4_value   	[32];
	varchar decision_code_5_value   	[32];
	varchar decision_code_6_value   	[32];
	varchar decision_code_7_value   	[32];
	varchar decision_code_8_value   	[32];
	varchar decision_code_9_value  		[32];
	varchar decision_code_10_value  	[32];
	varchar future_field1				[12];
	varchar future_field2				[24];
	varchar future_field3				[36];
	varchar future_field4				[48];
	varchar future_field5				[60];
}db_ftlf01;

EXEC SQL END DECLARE SECTION;


/*************************************************************************************/
/*************************************************************************************/
void db_to_tlf01 ( pTLF01 tlf01_ptr )
{
   
   memset(tlf01_ptr, 0, sizeof(TLF01));
   memcpy(tlf01_ptr->primary_key.transaction_id, db_tlf01.transaction_id.arr, db_tlf01.transaction_id.len);
   tlf01_ptr->entry_type = db_tlf01.entry_type.arr[0];
   memcpy(tlf01_ptr->tpdu_id, db_tlf01.tpdu_id.arr, db_tlf01.tpdu_id.len);
   memcpy(tlf01_ptr->issuer_id, db_tlf01.issuer_id.arr, db_tlf01.issuer_id.len);
   memcpy(tlf01_ptr->acquirer_id, db_tlf01.acquirer_id.arr, db_tlf01.acquirer_id.len);
   tlf01_ptr->tx_key = db_tlf01.tx_key.arr[0];
   memcpy(tlf01_ptr->terminal_id, db_tlf01.terminal_id.arr, db_tlf01.terminal_id.len);
   memcpy(tlf01_ptr->terminal_type, db_tlf01.terminal_type.arr, db_tlf01.terminal_type.len);
   memcpy(tlf01_ptr->response_text, db_tlf01.response_text.arr, db_tlf01.response_text.len);
   memcpy(tlf01_ptr->card_num_len, db_tlf01.card_num_len.arr, db_tlf01.card_num_len.len);
   memcpy(tlf01_ptr->card_num, db_tlf01.card_num.arr, db_tlf01.card_num.len);
   memcpy(tlf01_ptr->exp_date, db_tlf01.exp_date.arr, db_tlf01.exp_date.len);
   memcpy(tlf01_ptr->total_amount, db_tlf01.total_amount.arr, db_tlf01.total_amount.len);
   memcpy(tlf01_ptr->add_amounts, db_tlf01.add_amounts.arr, db_tlf01.add_amounts.len);
   memcpy(tlf01_ptr->invoice_number, db_tlf01.invoice_number.arr, db_tlf01.invoice_number.len);
   memcpy(tlf01_ptr->orig_amount, db_tlf01.orig_amount.arr, db_tlf01.orig_amount.len);
   memcpy(tlf01_ptr->auth_number, db_tlf01.auth_number.arr, db_tlf01.auth_number.len);
   memcpy(tlf01_ptr->processing_code, db_tlf01.processing_code.arr, db_tlf01.processing_code.len);
   memcpy(tlf01_ptr->sys_trace_audit_num, db_tlf01.sys_trace_audit_num.arr, db_tlf01.sys_trace_audit_num.len);
   memcpy(tlf01_ptr->orig_sys_trace_num, db_tlf01.orig_sys_trace_num.arr, db_tlf01.orig_sys_trace_num.len);
   memcpy(tlf01_ptr->pos_entry_mode, db_tlf01.pos_entry_mode.arr, db_tlf01.pos_entry_mode.len);
   memcpy(tlf01_ptr->nii, db_tlf01.nii.arr, db_tlf01.nii.len);
   memcpy(tlf01_ptr->pos_condition_code, db_tlf01.pos_condition_code.arr, db_tlf01.pos_condition_code.len);
   memcpy(tlf01_ptr->track1, db_tlf01.track1.arr, db_tlf01.track1.len);
   memcpy(tlf01_ptr->track2, db_tlf01.track2.arr, db_tlf01.track2.len);
   memcpy(tlf01_ptr->retrieval_ref_num, db_tlf01.retrieval_ref_num.arr, db_tlf01.retrieval_ref_num.len);
   memcpy(tlf01_ptr->orig_retrieval_ref_num, db_tlf01.orig_retrieval_ref_num.arr, db_tlf01.orig_retrieval_ref_num.len);
   memcpy(tlf01_ptr->merchant_id, db_tlf01.merchant_id.arr, db_tlf01.merchant_id.len);
   memcpy(tlf01_ptr->orig_message, db_tlf01.orig_message.arr, db_tlf01.orig_message.len);
   memcpy(tlf01_ptr->settlement_total, db_tlf01.settlement_total.arr, db_tlf01.settlement_total.len);
   memcpy(tlf01_ptr->message_type, db_tlf01.message_type.arr, db_tlf01.message_type.len);
   memcpy(tlf01_ptr->card_holder_name, db_tlf01.card_holder_name.arr, db_tlf01.card_holder_name.len);
   tlf01_ptr->general_status = db_tlf01.general_status.arr[0];
   memcpy(tlf01_ptr->originator_queue, db_tlf01.originator_queue.arr, db_tlf01.originator_queue.len);
   memcpy(tlf01_ptr->originator_info, db_tlf01.originator_info.arr, db_tlf01.originator_info.len);
   memcpy(tlf01_ptr->batch_number, db_tlf01.batch_number.arr, db_tlf01.batch_number.len);
   memcpy(tlf01_ptr->response_code, db_tlf01.response_code.arr, db_tlf01.response_code.len);
   memcpy(tlf01_ptr->date_yyyymmdd, db_tlf01.date_yyyymmdd.arr, db_tlf01.date_yyyymmdd.len);
   memcpy(tlf01_ptr->time_hhmmss, db_tlf01.time_hhmmss.arr, db_tlf01.time_hhmmss.len);
   memcpy(tlf01_ptr->num_sales, db_tlf01.num_sales.arr, db_tlf01.num_sales.len);
   memcpy(tlf01_ptr->sales_amount, db_tlf01.sales_amount.arr, db_tlf01.sales_amount.len);
   memcpy(tlf01_ptr->num_refunds, db_tlf01.num_refunds.arr, db_tlf01.num_refunds.len);
   memcpy(tlf01_ptr->refund_amount, db_tlf01.refund_amount.arr, db_tlf01.refund_amount.len);
   memcpy(tlf01_ptr->num_dbsales, db_tlf01.num_dbsales.arr, db_tlf01.num_dbsales.len);
   memcpy(tlf01_ptr->dbsales_amount, db_tlf01.dbsales_amount.arr, db_tlf01.dbsales_amount.len);
   memcpy(tlf01_ptr->num_dbrefunds, db_tlf01.num_dbrefunds.arr, db_tlf01.num_dbrefunds.len);
   memcpy(tlf01_ptr->dbrefund_amount, db_tlf01.dbrefund_amount.arr, db_tlf01.dbrefund_amount.len);
   memcpy(tlf01_ptr->pin_block, db_tlf01.pin_block.arr, db_tlf01.pin_block.len);
   memcpy(tlf01_ptr->tax_amount, db_tlf01.tax_amount.arr, db_tlf01.tax_amount.len);
   memcpy(tlf01_ptr->tip_amount, db_tlf01.tip_amount.arr, db_tlf01.tip_amount.len);
   memcpy(tlf01_ptr->tran_start_time, db_tlf01.tran_start_time.arr, db_tlf01.tran_start_time.len);
   memcpy(tlf01_ptr->host_start_time, db_tlf01.host_start_time.arr, db_tlf01.host_start_time.len);
   memcpy(tlf01_ptr->host_finish_time, db_tlf01.host_finish_time.arr, db_tlf01.host_finish_time.len);
   memcpy(tlf01_ptr->tran_finish_time, db_tlf01.tran_finish_time.arr, db_tlf01.tran_finish_time.len);
   memcpy(tlf01_ptr->settle_file_prefix, db_tlf01.settle_file_prefix.arr, db_tlf01.settle_file_prefix.len);
   memcpy(tlf01_ptr->resp_source_len, db_tlf01.resp_source_len.arr, db_tlf01.resp_source_len.len);
   tlf01_ptr->visa_char_indicator = db_tlf01.visa_char_indicator.arr[0];
   memcpy(tlf01_ptr->visa_tran_id, db_tlf01.visa_tran_id.arr, db_tlf01.visa_tran_id.len);
   memcpy(tlf01_ptr->visa_validation_code, db_tlf01.visa_validation_code.arr, db_tlf01.visa_validation_code.len);
   memcpy(tlf01_ptr->mcard_banknet_len, db_tlf01.mcard_banknet_len.arr, db_tlf01.mcard_banknet_len.len);
   memcpy(tlf01_ptr->mcard_banknet, db_tlf01.mcard_banknet.arr, db_tlf01.mcard_banknet.len);
   memcpy(tlf01_ptr->agent_id_len, db_tlf01.agent_id_len.arr, db_tlf01.agent_id_len.len);
   memcpy(tlf01_ptr->agent_id, db_tlf01.agent_id.arr, db_tlf01.agent_id.len);
   tlf01_ptr->cvc = db_tlf01.cvc.arr[0];
   memcpy(tlf01_ptr->settlement_date, db_tlf01.settlement_date.arr, db_tlf01.settlement_date.len);
   memcpy(tlf01_ptr->category_code, db_tlf01.category_code.arr, db_tlf01.category_code.len);
   memcpy(tlf01_ptr->conversion_rate, db_tlf01.conversion_rate.arr, db_tlf01.conversion_rate.len);
   memcpy(tlf01_ptr->product_code, db_tlf01.product_code.arr, db_tlf01.product_code.len);
   memcpy(tlf01_ptr->odometer, db_tlf01.odometer.arr, db_tlf01.odometer.len);
   memcpy(tlf01_ptr->organization_id, db_tlf01.organization_id.arr, db_tlf01.organization_id.len);
   tlf01_ptr->dynamic_keychange = db_tlf01.dynamic_keychange.arr[0];

   memcpy(tlf01_ptr->txn_cnt, db_tlf01.txn_cnt.arr, db_tlf01.txn_cnt.len);
   memcpy(tlf01_ptr->source_key, db_tlf01.source_key.arr, db_tlf01.source_key.len);
   memcpy(tlf01_ptr->dcf01_retired_cwk, db_tlf01.dcf01_retired_cwk.arr, db_tlf01.dcf01_retired_cwk.len);
   memcpy(tlf01_ptr->dest_key, db_tlf01.dest_key.arr, db_tlf01.dest_key.len);
   memcpy(tlf01_ptr->ncf01_retired_cwk, db_tlf01.ncf01_retired_cwk.arr, db_tlf01.ncf01_retired_cwk.len);
   memcpy(tlf01_ptr->handler_queue, db_tlf01.handler_queue.arr, db_tlf01.handler_queue.len);
   memcpy(tlf01_ptr->authorizing_host_queue, db_tlf01.authorizing_host_queue.arr, db_tlf01.authorizing_host_queue.len);
   memcpy(tlf01_ptr->max_net_consec_tmouts, db_tlf01.max_net_consec_tmouts.arr, db_tlf01.max_net_consec_tmouts.len);
   memcpy(tlf01_ptr->max_active_txns, db_tlf01.max_active_txns.arr, db_tlf01.max_active_txns.len);
   memcpy(tlf01_ptr->remote_nsp_type, db_tlf01.remote_nsp_type.arr, db_tlf01.remote_nsp_type.len);
   memcpy(tlf01_ptr->kek, db_tlf01.kek.arr, db_tlf01.kek.len);
   
   memcpy(tlf01_ptr->credit_limit, db_tlf01.credit_limit.arr, db_tlf01.credit_limit.len);
   memcpy(tlf01_ptr->forwarding_institution_id, db_tlf01.forwarding_institution_id.arr, db_tlf01.forwarding_institution_id.len);
   memcpy(tlf01_ptr->acquiring_id, db_tlf01.acquiring_id.arr, db_tlf01.acquiring_id.len);
   memcpy(tlf01_ptr->outstanding_balance, db_tlf01.outstanding_balance.arr, db_tlf01.outstanding_balance.len);
   memcpy(tlf01_ptr->nfi_name, db_tlf01.nfi_name.arr, db_tlf01.nfi_name.len);
   memcpy(tlf01_ptr->nfi_seq_nbr, db_tlf01.nfi_seq_nbr.arr, db_tlf01.nfi_seq_nbr.len);
   memcpy(tlf01_ptr->nfi_start_date, db_tlf01.nfi_start_date.arr, db_tlf01.nfi_start_date.len);
   memcpy(tlf01_ptr->nfi_end_date, db_tlf01.nfi_end_date.arr, db_tlf01.nfi_end_date.len);
   memcpy(tlf01_ptr->resp_source, db_tlf01.resp_source.arr, db_tlf01.resp_source.len);
   memcpy(tlf01_ptr->dispensation.origin, db_tlf01.origin.arr, db_tlf01.origin.len);
   memcpy(tlf01_ptr->dispensation.auth_1, db_tlf01.auth_1.arr, db_tlf01.auth_1.len);
   memcpy(tlf01_ptr->dispensation.auth_2, db_tlf01.auth_2.arr, db_tlf01.auth_2.len);
   memcpy(tlf01_ptr->update_mask, db_tlf01.update_mask.arr, db_tlf01.update_mask.len);

   memcpy(tlf01_ptr->type_of_data, db_tlf01.type_of_data.arr, db_tlf01.type_of_data.len);
   memcpy(tlf01_ptr->down_payment, db_tlf01.down_payment.arr, db_tlf01.down_payment.len);
   memcpy(tlf01_ptr->period, db_tlf01.period.arr, db_tlf01.period.len);
   memcpy(tlf01_ptr->interest_rate, db_tlf01.interest_rate.arr, db_tlf01.interest_rate.len);
   memcpy(tlf01_ptr->total_interest, db_tlf01.total_interest.arr, db_tlf01.total_interest.len);
   memcpy(tlf01_ptr->redemption_amount, db_tlf01.redemption_amount.arr, db_tlf01.redemption_amount.len);
   memcpy(tlf01_ptr->vehicle_number, db_tlf01.vehicle_number.arr, db_tlf01.vehicle_number.len);
  
   memcpy(tlf01_ptr->profile, db_tlf01.profile.arr, db_tlf01.profile.len);
   memcpy(tlf01_ptr->nbr_of_prod_codes, db_tlf01.nbr_of_prod_codes.arr, db_tlf01.nbr_of_prod_codes.len);
  
   memcpy(tlf01_ptr->product_codes[0].code, db_tlf01.product1_code.arr, db_tlf01.product1_code.len);
   memcpy(tlf01_ptr->product_codes[0].quantity, db_tlf01.product1_quantity.arr, db_tlf01.product1_quantity.len);
   memcpy(tlf01_ptr->product_codes[0].amount, db_tlf01.product1_amount.arr, db_tlf01.product1_amount.len);   
   memcpy(tlf01_ptr->product_codes[1].code, db_tlf01.product2_code.arr, db_tlf01.product2_code.len);
   memcpy(tlf01_ptr->product_codes[1].quantity, db_tlf01.product2_quantity.arr, db_tlf01.product2_quantity.len);
   memcpy(tlf01_ptr->product_codes[1].amount, db_tlf01.product2_amount.arr, db_tlf01.product2_amount.len);
   memcpy(tlf01_ptr->product_codes[2].code, db_tlf01.product3_code.arr, db_tlf01.product3_code.len);
   memcpy(tlf01_ptr->product_codes[2].quantity, db_tlf01.product3_quantity.arr, db_tlf01.product3_quantity.len);
   memcpy(tlf01_ptr->product_codes[2].amount, db_tlf01.product3_amount.arr, db_tlf01.product3_amount.len);
   memcpy(tlf01_ptr->product_codes[3].code, db_tlf01.product4_code.arr, db_tlf01.product4_code.len);
   memcpy(tlf01_ptr->product_codes[3].quantity, db_tlf01.product4_quantity.arr, db_tlf01.product4_quantity.len);
   memcpy(tlf01_ptr->product_codes[3].amount, db_tlf01.product4_amount.arr, db_tlf01.product4_amount.len);
   memcpy(tlf01_ptr->product_codes[4].code, db_tlf01.product5_code.arr, db_tlf01.product5_code.len);
   memcpy(tlf01_ptr->product_codes[4].quantity, db_tlf01.product5_quantity.arr, db_tlf01.product5_quantity.len);
   memcpy(tlf01_ptr->product_codes[4].amount, db_tlf01.product5_amount.arr, db_tlf01.product5_amount.len);
   memcpy(tlf01_ptr->product_codes[5].code, db_tlf01.product6_code.arr, db_tlf01.product6_code.len);
   memcpy(tlf01_ptr->product_codes[5].quantity, db_tlf01.product6_quantity.arr, db_tlf01.product6_quantity.len);
   memcpy(tlf01_ptr->product_codes[5].amount, db_tlf01.product6_amount.arr, db_tlf01.product6_amount.len);
   memcpy(tlf01_ptr->product_codes[6].code, db_tlf01.product7_code.arr, db_tlf01.product7_code.len);
   memcpy(tlf01_ptr->product_codes[6].quantity, db_tlf01.product7_quantity.arr, db_tlf01.product7_quantity.len);
   memcpy(tlf01_ptr->product_codes[6].amount, db_tlf01.product7_amount.arr, db_tlf01.product7_amount.len);
   memcpy(tlf01_ptr->product_codes[7].code, db_tlf01.product8_code.arr, db_tlf01.product8_code.len);
   memcpy(tlf01_ptr->product_codes[7].quantity, db_tlf01.product8_quantity.arr, db_tlf01.product8_quantity.len);
   memcpy(tlf01_ptr->product_codes[7].amount, db_tlf01.product8_amount.arr, db_tlf01.product8_amount.len);
   memcpy(tlf01_ptr->product_codes[8].code, db_tlf01.product9_code.arr, db_tlf01.product9_code.len);
   memcpy(tlf01_ptr->product_codes[8].quantity, db_tlf01.product9_quantity.arr, db_tlf01.product9_quantity.len);
   memcpy(tlf01_ptr->product_codes[8].amount, db_tlf01.product9_amount.arr, db_tlf01.product9_amount.len);
   memcpy(tlf01_ptr->product_codes[9].code, db_tlf01.product10_code.arr, db_tlf01.product10_code.len);
   memcpy(tlf01_ptr->product_codes[9].quantity, db_tlf01.product10_quantity.arr, db_tlf01.product10_quantity.len);
   memcpy(tlf01_ptr->product_codes[9].amount, db_tlf01.product10_amount.arr, db_tlf01.product10_amount.len);
   memcpy(tlf01_ptr->product_codes[10].code, db_tlf01.product11_code.arr, db_tlf01.product11_code.len);
   memcpy(tlf01_ptr->product_codes[10].quantity, db_tlf01.product11_quantity.arr, db_tlf01.product11_quantity.len);
   memcpy(tlf01_ptr->product_codes[10].amount, db_tlf01.product11_amount.arr, db_tlf01.product11_amount.len);
   memcpy(tlf01_ptr->product_codes[11].code, db_tlf01.product12_code.arr, db_tlf01.product12_code.len);
   memcpy(tlf01_ptr->product_codes[11].quantity, db_tlf01.product12_quantity.arr, db_tlf01.product12_quantity.len);
   memcpy(tlf01_ptr->product_codes[11].amount, db_tlf01.product12_amount.arr, db_tlf01.product12_amount.len);
   memcpy(tlf01_ptr->product_codes[12].code, db_tlf01.product13_code.arr, db_tlf01.product13_code.len);
   memcpy(tlf01_ptr->product_codes[12].quantity, db_tlf01.product13_quantity.arr, db_tlf01.product13_quantity.len);
   memcpy(tlf01_ptr->product_codes[12].amount, db_tlf01.product13_amount.arr, db_tlf01.product13_amount.len);
   memcpy(tlf01_ptr->product_codes[13].code, db_tlf01.product14_code.arr, db_tlf01.product14_code.len);
   memcpy(tlf01_ptr->product_codes[13].quantity, db_tlf01.product14_quantity.arr, db_tlf01.product14_quantity.len);
   memcpy(tlf01_ptr->product_codes[13].amount, db_tlf01.product14_amount.arr, db_tlf01.product14_amount.len);
   memcpy(tlf01_ptr->product_codes[14].code, db_tlf01.product15_code.arr, db_tlf01.product15_code.len);
   memcpy(tlf01_ptr->product_codes[14].quantity, db_tlf01.product15_quantity.arr, db_tlf01.product15_quantity.len);
   memcpy(tlf01_ptr->product_codes[14].amount, db_tlf01.product15_amount.arr, db_tlf01.product15_amount.len);
   memcpy(tlf01_ptr->product_codes[15].code, db_tlf01.product16_code.arr, db_tlf01.product16_code.len);
   memcpy(tlf01_ptr->product_codes[15].quantity, db_tlf01.product16_quantity.arr, db_tlf01.product16_quantity.len);
   memcpy(tlf01_ptr->product_codes[15].amount, db_tlf01.product16_amount.arr, db_tlf01.product16_amount.len);
   memcpy(tlf01_ptr->product_codes[16].code, db_tlf01.product17_code.arr, db_tlf01.product17_code.len);
   memcpy(tlf01_ptr->product_codes[16].quantity, db_tlf01.product17_quantity.arr, db_tlf01.product17_quantity.len);
   memcpy(tlf01_ptr->product_codes[16].amount, db_tlf01.product17_amount.arr, db_tlf01.product17_amount.len);
   memcpy(tlf01_ptr->product_codes[17].code, db_tlf01.product18_code.arr, db_tlf01.product18_code.len);
   memcpy(tlf01_ptr->product_codes[17].quantity, db_tlf01.product18_quantity.arr, db_tlf01.product18_quantity.len);
   memcpy(tlf01_ptr->product_codes[17].amount, db_tlf01.product18_amount.arr, db_tlf01.product18_amount.len);
   memcpy(tlf01_ptr->product_codes[18].code, db_tlf01.product19_code.arr, db_tlf01.product19_code.len);
   memcpy(tlf01_ptr->product_codes[18].quantity, db_tlf01.product19_quantity.arr, db_tlf01.product19_quantity.len);
   memcpy(tlf01_ptr->product_codes[18].amount, db_tlf01.product19_amount.arr, db_tlf01.product19_amount.len);
   memcpy(tlf01_ptr->product_codes[19].code, db_tlf01.product20_code.arr, db_tlf01.product20_code.len);
   memcpy(tlf01_ptr->product_codes[19].quantity, db_tlf01.product20_quantity.arr, db_tlf01.product20_quantity.len);
   memcpy(tlf01_ptr->product_codes[19].amount, db_tlf01.product20_amount.arr, db_tlf01.product20_amount.len);
   memcpy(tlf01_ptr->visa_merchant_id, db_tlf01.visa_merchant_id.arr, db_tlf01.visa_merchant_id.len);
   
   memcpy(tlf01_ptr->cash_bonus, db_tlf01.cash_bonus.arr, db_tlf01.cash_bonus.len);
   memcpy(tlf01_ptr->deferred_factor, db_tlf01.deferred_factor.arr, db_tlf01.deferred_factor.len);
   memcpy(tlf01_ptr->deferred_term_length, db_tlf01.deferred_term_length.arr, db_tlf01.deferred_term_length.len);
   memcpy(tlf01_ptr->currency_code, db_tlf01.currency_code.arr, db_tlf01.currency_code.len);
   memcpy(tlf01_ptr->transmission_timestamp, db_tlf01.transmission_timestamp.arr, db_tlf01.transmission_timestamp.len);
   memcpy(tlf01_ptr->tran_fee_amount, db_tlf01.tran_fee_amount.arr, db_tlf01.tran_fee_amount.len);
   memcpy(tlf01_ptr->cvc_data, db_tlf01.cvc_data.arr, db_tlf01.cvc_data.len);

   memcpy(tlf01_ptr->verify_mag_stripe, db_tlf01.verify_mag_stripe.arr, db_tlf01.verify_mag_stripe.len);
   memcpy(tlf01_ptr->saf, db_tlf01.saf.arr, db_tlf01.saf.len);
   memcpy(tlf01_ptr->security_response_code, db_tlf01.security_response_code.arr, db_tlf01.security_response_code.len);
   memcpy(tlf01_ptr->service_code, db_tlf01.service_code.arr, db_tlf01.service_code.len);
   memcpy(tlf01_ptr->source_pin_format, db_tlf01.source_pin_format.arr, db_tlf01.source_pin_format.len);
   memcpy(tlf01_ptr->dest_pin_format, db_tlf01.dest_pin_format.arr, db_tlf01.dest_pin_format.len);
   memcpy(tlf01_ptr->voice_auth, db_tlf01.voice_auth.arr, db_tlf01.voice_auth.len);

   memcpy(tlf01_ptr->actual_amount, db_tlf01.actual_amount.arr, db_tlf01.actual_amount.len);
   memcpy(tlf01_ptr->reversal_amount, db_tlf01.reversal_amount.arr, db_tlf01.reversal_amount.len);
  
   memcpy(tlf01_ptr->voice_auth_text, db_tlf01.voice_auth_text.arr, db_tlf01.voice_auth_text.len);
   memcpy(tlf01_ptr->operator_id, db_tlf01.operator_id.arr, db_tlf01.operator_id.len);
   memcpy(tlf01_ptr->workstation, db_tlf01.workstation.arr, db_tlf01.workstation.len);
   memcpy(tlf01_ptr->orig_auth_number, db_tlf01.orig_auth_number.arr, db_tlf01.orig_auth_number.len);
   memcpy(tlf01_ptr->ticket_nbr, db_tlf01.ticket_nbr.arr, db_tlf01.ticket_nbr.len);
   memcpy(tlf01_ptr->system_date, db_tlf01.system_date.arr, db_tlf01.system_date.len);
   memcpy(tlf01_ptr->def_gross_amt, db_tlf01.def_gross_amt.arr, db_tlf01.def_gross_amt.len);
   memcpy(tlf01_ptr->monthly_amort_amt, db_tlf01.monthly_amort_amt.arr, db_tlf01.monthly_amort_amt.len);
}
/*************************************************************************************/
/* Girija Y - ThoughtFocus */
/*************************************************************************************/
void db_to_tlf01_stip ( pTLF01 tlf01_ptr )
{
   
   memset(tlf01_ptr, 0, sizeof(TLF01));
   memcpy(tlf01_ptr->primary_key.transaction_id, db_tlf01_stip.transaction_id.arr, db_tlf01_stip.transaction_id.len);
   tlf01_ptr->entry_type = db_tlf01_stip.entry_type.arr[0];
   memcpy(tlf01_ptr->tpdu_id, db_tlf01_stip.tpdu_id.arr, db_tlf01_stip.tpdu_id.len);
   memcpy(tlf01_ptr->issuer_id, db_tlf01_stip.issuer_id.arr, db_tlf01_stip.issuer_id.len);
   memcpy(tlf01_ptr->acquirer_id, db_tlf01_stip.acquirer_id.arr, db_tlf01_stip.acquirer_id.len);
   tlf01_ptr->tx_key = db_tlf01_stip.tx_key.arr[0];
   memcpy(tlf01_ptr->terminal_id, db_tlf01_stip.terminal_id.arr, db_tlf01_stip.terminal_id.len);
   memcpy(tlf01_ptr->terminal_type, db_tlf01_stip.terminal_type.arr, db_tlf01_stip.terminal_type.len);
   memcpy(tlf01_ptr->response_text, db_tlf01_stip.response_text.arr, db_tlf01_stip.response_text.len);
   memcpy(tlf01_ptr->card_num_len, db_tlf01_stip.card_num_len.arr, db_tlf01_stip.card_num_len.len);
   memcpy(tlf01_ptr->card_num, db_tlf01_stip.card_num.arr, db_tlf01_stip.card_num.len);
   memcpy(tlf01_ptr->exp_date, db_tlf01_stip.exp_date.arr, db_tlf01_stip.exp_date.len);
   memcpy(tlf01_ptr->total_amount, db_tlf01_stip.total_amount.arr, db_tlf01_stip.total_amount.len);
   memcpy(tlf01_ptr->add_amounts, db_tlf01_stip.add_amounts.arr, db_tlf01_stip.add_amounts.len);
   memcpy(tlf01_ptr->invoice_number, db_tlf01_stip.invoice_number.arr, db_tlf01_stip.invoice_number.len);
   memcpy(tlf01_ptr->orig_amount, db_tlf01_stip.orig_amount.arr, db_tlf01_stip.orig_amount.len);
   memcpy(tlf01_ptr->auth_number, db_tlf01_stip.auth_number.arr, db_tlf01_stip.auth_number.len);
   memcpy(tlf01_ptr->processing_code, db_tlf01_stip.processing_code.arr, db_tlf01_stip.processing_code.len);
   memcpy(tlf01_ptr->sys_trace_audit_num, db_tlf01_stip.sys_trace_audit_num.arr, db_tlf01_stip.sys_trace_audit_num.len);
   memcpy(tlf01_ptr->orig_sys_trace_num, db_tlf01_stip.orig_sys_trace_num.arr, db_tlf01_stip.orig_sys_trace_num.len);
   memcpy(tlf01_ptr->pos_entry_mode, db_tlf01_stip.pos_entry_mode.arr, db_tlf01_stip.pos_entry_mode.len);
   memcpy(tlf01_ptr->nii, db_tlf01_stip.nii.arr, db_tlf01_stip.nii.len);
   memcpy(tlf01_ptr->pos_condition_code, db_tlf01_stip.pos_condition_code.arr, db_tlf01_stip.pos_condition_code.len);
   memcpy(tlf01_ptr->track1, db_tlf01_stip.track1.arr, db_tlf01_stip.track1.len);
   memcpy(tlf01_ptr->track2, db_tlf01_stip.track2.arr, db_tlf01_stip.track2.len);
   memcpy(tlf01_ptr->retrieval_ref_num, db_tlf01_stip.retrieval_ref_num.arr, db_tlf01_stip.retrieval_ref_num.len);
   memcpy(tlf01_ptr->orig_retrieval_ref_num, db_tlf01_stip.orig_retrieval_ref_num.arr, db_tlf01_stip.orig_retrieval_ref_num.len);
   memcpy(tlf01_ptr->merchant_id, db_tlf01_stip.merchant_id.arr, db_tlf01_stip.merchant_id.len);
   memcpy(tlf01_ptr->orig_message, db_tlf01_stip.orig_message.arr, db_tlf01_stip.orig_message.len);
   memcpy(tlf01_ptr->settlement_total, db_tlf01_stip.settlement_total.arr, db_tlf01_stip.settlement_total.len);
   memcpy(tlf01_ptr->message_type, db_tlf01_stip.message_type.arr, db_tlf01_stip.message_type.len);
   memcpy(tlf01_ptr->card_holder_name, db_tlf01_stip.card_holder_name.arr, db_tlf01_stip.card_holder_name.len);
   tlf01_ptr->general_status = db_tlf01_stip.general_status.arr[0];
   memcpy(tlf01_ptr->originator_queue, db_tlf01_stip.originator_queue.arr, db_tlf01_stip.originator_queue.len);
   memcpy(tlf01_ptr->originator_info, db_tlf01_stip.originator_info.arr, db_tlf01_stip.originator_info.len);
   memcpy(tlf01_ptr->batch_number, db_tlf01_stip.batch_number.arr, db_tlf01_stip.batch_number.len);
   memcpy(tlf01_ptr->response_code, db_tlf01_stip.response_code.arr, db_tlf01_stip.response_code.len);
   memcpy(tlf01_ptr->date_yyyymmdd, db_tlf01_stip.date_yyyymmdd.arr, db_tlf01_stip.date_yyyymmdd.len);
   memcpy(tlf01_ptr->time_hhmmss, db_tlf01_stip.time_hhmmss.arr, db_tlf01_stip.time_hhmmss.len);
   memcpy(tlf01_ptr->num_sales, db_tlf01_stip.num_sales.arr, db_tlf01_stip.num_sales.len);
   memcpy(tlf01_ptr->sales_amount, db_tlf01_stip.sales_amount.arr, db_tlf01_stip.sales_amount.len);
   memcpy(tlf01_ptr->num_refunds, db_tlf01_stip.num_refunds.arr, db_tlf01_stip.num_refunds.len);
   memcpy(tlf01_ptr->refund_amount, db_tlf01_stip.refund_amount.arr, db_tlf01_stip.refund_amount.len);
   memcpy(tlf01_ptr->num_dbsales, db_tlf01_stip.num_dbsales.arr, db_tlf01_stip.num_dbsales.len);
   memcpy(tlf01_ptr->dbsales_amount, db_tlf01_stip.dbsales_amount.arr, db_tlf01_stip.dbsales_amount.len);
   memcpy(tlf01_ptr->num_dbrefunds, db_tlf01_stip.num_dbrefunds.arr, db_tlf01_stip.num_dbrefunds.len);
   memcpy(tlf01_ptr->dbrefund_amount, db_tlf01_stip.dbrefund_amount.arr, db_tlf01_stip.dbrefund_amount.len);
   memcpy(tlf01_ptr->pin_block, db_tlf01_stip.pin_block.arr, db_tlf01_stip.pin_block.len);
   memcpy(tlf01_ptr->tax_amount, db_tlf01_stip.tax_amount.arr, db_tlf01_stip.tax_amount.len);
   memcpy(tlf01_ptr->tip_amount, db_tlf01_stip.tip_amount.arr, db_tlf01_stip.tip_amount.len);
   memcpy(tlf01_ptr->tran_start_time, db_tlf01_stip.tran_start_time.arr, db_tlf01_stip.tran_start_time.len);
   memcpy(tlf01_ptr->host_start_time, db_tlf01_stip.host_start_time.arr, db_tlf01_stip.host_start_time.len);
   memcpy(tlf01_ptr->host_finish_time, db_tlf01_stip.host_finish_time.arr, db_tlf01_stip.host_finish_time.len);
   memcpy(tlf01_ptr->tran_finish_time, db_tlf01_stip.tran_finish_time.arr, db_tlf01_stip.tran_finish_time.len);
   memcpy(tlf01_ptr->settle_file_prefix, db_tlf01_stip.settle_file_prefix.arr, db_tlf01_stip.settle_file_prefix.len);
   memcpy(tlf01_ptr->resp_source_len, db_tlf01_stip.resp_source_len.arr, db_tlf01_stip.resp_source_len.len);
   tlf01_ptr->visa_char_indicator = db_tlf01_stip.visa_char_indicator.arr[0];
   memcpy(tlf01_ptr->visa_tran_id, db_tlf01_stip.visa_tran_id.arr, db_tlf01_stip.visa_tran_id.len);
   memcpy(tlf01_ptr->visa_validation_code, db_tlf01_stip.visa_validation_code.arr, db_tlf01_stip.visa_validation_code.len);
   memcpy(tlf01_ptr->mcard_banknet_len, db_tlf01_stip.mcard_banknet_len.arr, db_tlf01_stip.mcard_banknet_len.len);
   memcpy(tlf01_ptr->mcard_banknet, db_tlf01_stip.mcard_banknet.arr, db_tlf01_stip.mcard_banknet.len);
   memcpy(tlf01_ptr->agent_id_len, db_tlf01_stip.agent_id_len.arr, db_tlf01_stip.agent_id_len.len);
   memcpy(tlf01_ptr->agent_id, db_tlf01_stip.agent_id.arr, db_tlf01_stip.agent_id.len);
   tlf01_ptr->cvc = db_tlf01_stip.cvc.arr[0];
   memcpy(tlf01_ptr->settlement_date, db_tlf01_stip.settlement_date.arr, db_tlf01_stip.settlement_date.len);
   memcpy(tlf01_ptr->category_code, db_tlf01_stip.category_code.arr, db_tlf01_stip.category_code.len);
   memcpy(tlf01_ptr->conversion_rate, db_tlf01_stip.conversion_rate.arr, db_tlf01_stip.conversion_rate.len);
   memcpy(tlf01_ptr->product_code, db_tlf01_stip.product_code.arr, db_tlf01_stip.product_code.len);
   memcpy(tlf01_ptr->odometer, db_tlf01_stip.odometer.arr, db_tlf01_stip.odometer.len);
   memcpy(tlf01_ptr->organization_id, db_tlf01_stip.organization_id.arr, db_tlf01_stip.organization_id.len);
   tlf01_ptr->dynamic_keychange = db_tlf01_stip.dynamic_keychange.arr[0];

   memcpy(tlf01_ptr->txn_cnt, db_tlf01_stip.txn_cnt.arr, db_tlf01_stip.txn_cnt.len);
   memcpy(tlf01_ptr->source_key, db_tlf01_stip.source_key.arr, db_tlf01_stip.source_key.len);
   memcpy(tlf01_ptr->dcf01_retired_cwk, db_tlf01_stip.dcf01_retired_cwk.arr, db_tlf01_stip.dcf01_retired_cwk.len);
   memcpy(tlf01_ptr->dest_key, db_tlf01_stip.dest_key.arr, db_tlf01_stip.dest_key.len);
   memcpy(tlf01_ptr->ncf01_retired_cwk, db_tlf01_stip.ncf01_retired_cwk.arr, db_tlf01_stip.ncf01_retired_cwk.len);
   memcpy(tlf01_ptr->handler_queue, db_tlf01_stip.handler_queue.arr, db_tlf01_stip.handler_queue.len);
   memcpy(tlf01_ptr->authorizing_host_queue, db_tlf01_stip.authorizing_host_queue.arr, db_tlf01_stip.authorizing_host_queue.len);
   memcpy(tlf01_ptr->max_net_consec_tmouts, db_tlf01_stip.max_net_consec_tmouts.arr, db_tlf01_stip.max_net_consec_tmouts.len);
   memcpy(tlf01_ptr->max_active_txns, db_tlf01_stip.max_active_txns.arr, db_tlf01_stip.max_active_txns.len);
   memcpy(tlf01_ptr->remote_nsp_type, db_tlf01_stip.remote_nsp_type.arr, db_tlf01_stip.remote_nsp_type.len);
   memcpy(tlf01_ptr->kek, db_tlf01_stip.kek.arr, db_tlf01_stip.kek.len);
   
   memcpy(tlf01_ptr->credit_limit, db_tlf01_stip.credit_limit.arr, db_tlf01_stip.credit_limit.len);
   memcpy(tlf01_ptr->forwarding_institution_id, db_tlf01_stip.forwarding_institution_id.arr, db_tlf01_stip.forwarding_institution_id.len);
   memcpy(tlf01_ptr->acquiring_id, db_tlf01_stip.acquiring_id.arr, db_tlf01_stip.acquiring_id.len);
   memcpy(tlf01_ptr->outstanding_balance, db_tlf01_stip.outstanding_balance.arr, db_tlf01_stip.outstanding_balance.len);
   memcpy(tlf01_ptr->nfi_name, db_tlf01_stip.nfi_name.arr, db_tlf01_stip.nfi_name.len);
   memcpy(tlf01_ptr->nfi_seq_nbr, db_tlf01_stip.nfi_seq_nbr.arr, db_tlf01_stip.nfi_seq_nbr.len);
   memcpy(tlf01_ptr->nfi_start_date, db_tlf01_stip.nfi_start_date.arr, db_tlf01_stip.nfi_start_date.len);
   memcpy(tlf01_ptr->nfi_end_date, db_tlf01_stip.nfi_end_date.arr, db_tlf01_stip.nfi_end_date.len);
   memcpy(tlf01_ptr->resp_source, db_tlf01_stip.resp_source.arr, db_tlf01_stip.resp_source.len);
   memcpy(tlf01_ptr->dispensation.origin, db_tlf01_stip.origin.arr, db_tlf01_stip.origin.len);
   memcpy(tlf01_ptr->dispensation.auth_1, db_tlf01_stip.auth_1.arr, db_tlf01_stip.auth_1.len);
   memcpy(tlf01_ptr->dispensation.auth_2, db_tlf01_stip.auth_2.arr, db_tlf01_stip.auth_2.len);
   memcpy(tlf01_ptr->update_mask, db_tlf01_stip.update_mask.arr, db_tlf01_stip.update_mask.len);

   memcpy(tlf01_ptr->type_of_data, db_tlf01_stip.type_of_data.arr, db_tlf01_stip.type_of_data.len);
   memcpy(tlf01_ptr->down_payment, db_tlf01_stip.down_payment.arr, db_tlf01_stip.down_payment.len);
   memcpy(tlf01_ptr->period, db_tlf01_stip.period.arr, db_tlf01_stip.period.len);
   memcpy(tlf01_ptr->interest_rate, db_tlf01_stip.interest_rate.arr, db_tlf01_stip.interest_rate.len);
   memcpy(tlf01_ptr->total_interest, db_tlf01_stip.total_interest.arr, db_tlf01_stip.total_interest.len);
   memcpy(tlf01_ptr->redemption_amount, db_tlf01_stip.redemption_amount.arr, db_tlf01_stip.redemption_amount.len);
   memcpy(tlf01_ptr->vehicle_number, db_tlf01_stip.vehicle_number.arr, db_tlf01_stip.vehicle_number.len);
  
   memcpy(tlf01_ptr->profile, db_tlf01_stip.profile.arr, db_tlf01_stip.profile.len);
   memcpy(tlf01_ptr->nbr_of_prod_codes, db_tlf01_stip.nbr_of_prod_codes.arr, db_tlf01_stip.nbr_of_prod_codes.len);
  
   memcpy(tlf01_ptr->product_codes[0].code, db_tlf01_stip.product1_code.arr, db_tlf01_stip.product1_code.len);
   memcpy(tlf01_ptr->product_codes[0].quantity, db_tlf01_stip.product1_quantity.arr, db_tlf01_stip.product1_quantity.len);
   memcpy(tlf01_ptr->product_codes[0].amount, db_tlf01_stip.product1_amount.arr, db_tlf01_stip.product1_amount.len);   
   memcpy(tlf01_ptr->product_codes[1].code, db_tlf01_stip.product2_code.arr, db_tlf01_stip.product2_code.len);
   memcpy(tlf01_ptr->product_codes[1].quantity, db_tlf01_stip.product2_quantity.arr, db_tlf01_stip.product2_quantity.len);
   memcpy(tlf01_ptr->product_codes[1].amount, db_tlf01_stip.product2_amount.arr, db_tlf01_stip.product2_amount.len);
   memcpy(tlf01_ptr->product_codes[2].code, db_tlf01_stip.product3_code.arr, db_tlf01_stip.product3_code.len);
   memcpy(tlf01_ptr->product_codes[2].quantity, db_tlf01_stip.product3_quantity.arr, db_tlf01_stip.product3_quantity.len);
   memcpy(tlf01_ptr->product_codes[2].amount, db_tlf01_stip.product3_amount.arr, db_tlf01_stip.product3_amount.len);
   memcpy(tlf01_ptr->product_codes[3].code, db_tlf01_stip.product4_code.arr, db_tlf01_stip.product4_code.len);
   memcpy(tlf01_ptr->product_codes[3].quantity, db_tlf01_stip.product4_quantity.arr, db_tlf01_stip.product4_quantity.len);
   memcpy(tlf01_ptr->product_codes[3].amount, db_tlf01_stip.product4_amount.arr, db_tlf01_stip.product4_amount.len);
   memcpy(tlf01_ptr->product_codes[4].code, db_tlf01_stip.product5_code.arr, db_tlf01_stip.product5_code.len);
   memcpy(tlf01_ptr->product_codes[4].quantity, db_tlf01_stip.product5_quantity.arr, db_tlf01_stip.product5_quantity.len);
   memcpy(tlf01_ptr->product_codes[4].amount, db_tlf01_stip.product5_amount.arr, db_tlf01_stip.product5_amount.len);
   memcpy(tlf01_ptr->product_codes[5].code, db_tlf01_stip.product6_code.arr, db_tlf01_stip.product6_code.len);
   memcpy(tlf01_ptr->product_codes[5].quantity, db_tlf01_stip.product6_quantity.arr, db_tlf01_stip.product6_quantity.len);
   memcpy(tlf01_ptr->product_codes[5].amount, db_tlf01_stip.product6_amount.arr, db_tlf01_stip.product6_amount.len);
   memcpy(tlf01_ptr->product_codes[6].code, db_tlf01_stip.product7_code.arr, db_tlf01_stip.product7_code.len);
   memcpy(tlf01_ptr->product_codes[6].quantity, db_tlf01_stip.product7_quantity.arr, db_tlf01_stip.product7_quantity.len);
   memcpy(tlf01_ptr->product_codes[6].amount, db_tlf01_stip.product7_amount.arr, db_tlf01_stip.product7_amount.len);
   memcpy(tlf01_ptr->product_codes[7].code, db_tlf01_stip.product8_code.arr, db_tlf01_stip.product8_code.len);
   memcpy(tlf01_ptr->product_codes[7].quantity, db_tlf01_stip.product8_quantity.arr, db_tlf01_stip.product8_quantity.len);
   memcpy(tlf01_ptr->product_codes[7].amount, db_tlf01_stip.product8_amount.arr, db_tlf01_stip.product8_amount.len);
   memcpy(tlf01_ptr->product_codes[8].code, db_tlf01_stip.product9_code.arr, db_tlf01_stip.product9_code.len);
   memcpy(tlf01_ptr->product_codes[8].quantity, db_tlf01_stip.product9_quantity.arr, db_tlf01_stip.product9_quantity.len);
   memcpy(tlf01_ptr->product_codes[8].amount, db_tlf01_stip.product9_amount.arr, db_tlf01_stip.product9_amount.len);
   memcpy(tlf01_ptr->product_codes[9].code, db_tlf01_stip.product10_code.arr, db_tlf01_stip.product10_code.len);
   memcpy(tlf01_ptr->product_codes[9].quantity, db_tlf01_stip.product10_quantity.arr, db_tlf01_stip.product10_quantity.len);
   memcpy(tlf01_ptr->product_codes[9].amount, db_tlf01_stip.product10_amount.arr, db_tlf01_stip.product10_amount.len);
   memcpy(tlf01_ptr->product_codes[10].code, db_tlf01_stip.product11_code.arr, db_tlf01_stip.product11_code.len);
   memcpy(tlf01_ptr->product_codes[10].quantity, db_tlf01_stip.product11_quantity.arr, db_tlf01_stip.product11_quantity.len);
   memcpy(tlf01_ptr->product_codes[10].amount, db_tlf01_stip.product11_amount.arr, db_tlf01_stip.product11_amount.len);
   memcpy(tlf01_ptr->product_codes[11].code, db_tlf01_stip.product12_code.arr, db_tlf01_stip.product12_code.len);
   memcpy(tlf01_ptr->product_codes[11].quantity, db_tlf01_stip.product12_quantity.arr, db_tlf01_stip.product12_quantity.len);
   memcpy(tlf01_ptr->product_codes[11].amount, db_tlf01_stip.product12_amount.arr, db_tlf01_stip.product12_amount.len);
   memcpy(tlf01_ptr->product_codes[12].code, db_tlf01_stip.product13_code.arr, db_tlf01_stip.product13_code.len);
   memcpy(tlf01_ptr->product_codes[12].quantity, db_tlf01_stip.product13_quantity.arr, db_tlf01_stip.product13_quantity.len);
   memcpy(tlf01_ptr->product_codes[12].amount, db_tlf01_stip.product13_amount.arr, db_tlf01_stip.product13_amount.len);
   memcpy(tlf01_ptr->product_codes[13].code, db_tlf01_stip.product14_code.arr, db_tlf01_stip.product14_code.len);
   memcpy(tlf01_ptr->product_codes[13].quantity, db_tlf01_stip.product14_quantity.arr, db_tlf01_stip.product14_quantity.len);
   memcpy(tlf01_ptr->product_codes[13].amount, db_tlf01_stip.product14_amount.arr, db_tlf01_stip.product14_amount.len);
   memcpy(tlf01_ptr->product_codes[14].code, db_tlf01_stip.product15_code.arr, db_tlf01_stip.product15_code.len);
   memcpy(tlf01_ptr->product_codes[14].quantity, db_tlf01_stip.product15_quantity.arr, db_tlf01_stip.product15_quantity.len);
   memcpy(tlf01_ptr->product_codes[14].amount, db_tlf01_stip.product15_amount.arr, db_tlf01_stip.product15_amount.len);
   memcpy(tlf01_ptr->product_codes[15].code, db_tlf01_stip.product16_code.arr, db_tlf01_stip.product16_code.len);
   memcpy(tlf01_ptr->product_codes[15].quantity, db_tlf01_stip.product16_quantity.arr, db_tlf01_stip.product16_quantity.len);
   memcpy(tlf01_ptr->product_codes[15].amount, db_tlf01_stip.product16_amount.arr, db_tlf01_stip.product16_amount.len);
   memcpy(tlf01_ptr->product_codes[16].code, db_tlf01_stip.product17_code.arr, db_tlf01_stip.product17_code.len);
   memcpy(tlf01_ptr->product_codes[16].quantity, db_tlf01_stip.product17_quantity.arr, db_tlf01_stip.product17_quantity.len);
   memcpy(tlf01_ptr->product_codes[16].amount, db_tlf01_stip.product17_amount.arr, db_tlf01_stip.product17_amount.len);
   memcpy(tlf01_ptr->product_codes[17].code, db_tlf01_stip.product18_code.arr, db_tlf01_stip.product18_code.len);
   memcpy(tlf01_ptr->product_codes[17].quantity, db_tlf01_stip.product18_quantity.arr, db_tlf01_stip.product18_quantity.len);
   memcpy(tlf01_ptr->product_codes[17].amount, db_tlf01_stip.product18_amount.arr, db_tlf01_stip.product18_amount.len);
   memcpy(tlf01_ptr->product_codes[18].code, db_tlf01_stip.product19_code.arr, db_tlf01_stip.product19_code.len);
   memcpy(tlf01_ptr->product_codes[18].quantity, db_tlf01_stip.product19_quantity.arr, db_tlf01_stip.product19_quantity.len);
   memcpy(tlf01_ptr->product_codes[18].amount, db_tlf01_stip.product19_amount.arr, db_tlf01_stip.product19_amount.len);
   memcpy(tlf01_ptr->product_codes[19].code, db_tlf01_stip.product20_code.arr, db_tlf01_stip.product20_code.len);
   memcpy(tlf01_ptr->product_codes[19].quantity, db_tlf01_stip.product20_quantity.arr, db_tlf01_stip.product20_quantity.len);
   memcpy(tlf01_ptr->product_codes[19].amount, db_tlf01_stip.product20_amount.arr, db_tlf01_stip.product20_amount.len);
   memcpy(tlf01_ptr->visa_merchant_id, db_tlf01_stip.visa_merchant_id.arr, db_tlf01_stip.visa_merchant_id.len);
   
   memcpy(tlf01_ptr->cash_bonus, db_tlf01_stip.cash_bonus.arr, db_tlf01_stip.cash_bonus.len);
   memcpy(tlf01_ptr->deferred_factor, db_tlf01_stip.deferred_factor.arr, db_tlf01_stip.deferred_factor.len);
   memcpy(tlf01_ptr->deferred_term_length, db_tlf01_stip.deferred_term_length.arr, db_tlf01_stip.deferred_term_length.len);
   memcpy(tlf01_ptr->currency_code, db_tlf01_stip.currency_code.arr, db_tlf01_stip.currency_code.len);
   memcpy(tlf01_ptr->transmission_timestamp, db_tlf01_stip.transmission_timestamp.arr, db_tlf01_stip.transmission_timestamp.len);
   memcpy(tlf01_ptr->tran_fee_amount, db_tlf01_stip.tran_fee_amount.arr, db_tlf01_stip.tran_fee_amount.len);
   memcpy(tlf01_ptr->cvc_data, db_tlf01_stip.cvc_data.arr, db_tlf01_stip.cvc_data.len);

   memcpy(tlf01_ptr->verify_mag_stripe, db_tlf01_stip.verify_mag_stripe.arr, db_tlf01_stip.verify_mag_stripe.len);
   memcpy(tlf01_ptr->saf, db_tlf01_stip.saf.arr, db_tlf01_stip.saf.len);
   memcpy(tlf01_ptr->security_response_code, db_tlf01_stip.security_response_code.arr, db_tlf01_stip.security_response_code.len);
   memcpy(tlf01_ptr->service_code, db_tlf01_stip.service_code.arr, db_tlf01_stip.service_code.len);
   memcpy(tlf01_ptr->source_pin_format, db_tlf01_stip.source_pin_format.arr, db_tlf01_stip.source_pin_format.len);
   memcpy(tlf01_ptr->dest_pin_format, db_tlf01_stip.dest_pin_format.arr, db_tlf01_stip.dest_pin_format.len);
   memcpy(tlf01_ptr->voice_auth, db_tlf01_stip.voice_auth.arr, db_tlf01_stip.voice_auth.len);

   memcpy(tlf01_ptr->actual_amount, db_tlf01_stip.actual_amount.arr, db_tlf01_stip.actual_amount.len);
   memcpy(tlf01_ptr->reversal_amount, db_tlf01_stip.reversal_amount.arr, db_tlf01_stip.reversal_amount.len);
  
   memcpy(tlf01_ptr->voice_auth_text, db_tlf01_stip.voice_auth_text.arr, db_tlf01_stip.voice_auth_text.len);
   memcpy(tlf01_ptr->operator_id, db_tlf01_stip.operator_id.arr, db_tlf01_stip.operator_id.len);
   memcpy(tlf01_ptr->workstation, db_tlf01_stip.workstation.arr, db_tlf01_stip.workstation.len);
   memcpy(tlf01_ptr->orig_auth_number, db_tlf01_stip.orig_auth_number.arr, db_tlf01_stip.orig_auth_number.len);
   memcpy(tlf01_ptr->ticket_nbr, db_tlf01_stip.ticket_nbr.arr, db_tlf01_stip.ticket_nbr.len);
   memcpy(tlf01_ptr->system_date, db_tlf01_stip.system_date.arr, db_tlf01_stip.system_date.len);
   memcpy(tlf01_ptr->def_gross_amt, db_tlf01_stip.def_gross_amt.arr, db_tlf01_stip.def_gross_amt.len);
   memcpy(tlf01_ptr->monthly_amort_amt, db_tlf01_stip.monthly_amort_amt.arr, db_tlf01_stip.monthly_amort_amt.len);
}
/*************************************************************************************/
/*************************************************************************************/
void db_to_fguard( pFGUARD fguard_ptr )
{
   memset( fguard_ptr, 0x00, sizeof(FGUARD) );
   memcpy( fguard_ptr->transaction_id,        db_fguard.transaction_id.arr,        db_fguard.transaction_id.len        );
   memcpy( fguard_ptr->timestamp,             db_fguard.timestamp.arr,             db_fguard.timestamp.len             );
   memcpy( fguard_ptr->message_type,          db_fguard.message_type.arr,          db_fguard.message_type.len          );
   memcpy( fguard_ptr->card_num,              db_fguard.card_num.arr,              db_fguard.card_num.len              );
   memcpy( fguard_ptr->processing_code,       db_fguard.processing_code.arr,       db_fguard.processing_code.len       );
   memcpy( fguard_ptr->amount_peso,           db_fguard.amount_peso.arr,           db_fguard.amount_peso.len           );
   memcpy( fguard_ptr->amount_usd,            db_fguard.amount_usd.arr,            db_fguard.amount_usd.len            );
   memcpy( fguard_ptr->gmt,                   db_fguard.gmt.arr,                   db_fguard.gmt.len                   );
   memcpy( fguard_ptr->sys_trace_audit_num,   db_fguard.sys_trace_audit_num.arr,   db_fguard.sys_trace_audit_num.len   );
   memcpy( fguard_ptr->mcc,                   db_fguard.mcc.arr,                   db_fguard.mcc.len                   );
   memcpy( fguard_ptr->country_code,          db_fguard.country_code.arr,          db_fguard.country_code.len          );
   memcpy( fguard_ptr->pos_entry_mode,        db_fguard.pos_entry_mode.arr,        db_fguard.pos_entry_mode.len        );
   memcpy( fguard_ptr->pos_condition_code,    db_fguard.pos_condition_code.arr,    db_fguard.pos_condition_code.len    );
   memcpy( fguard_ptr->acquiring_id,          db_fguard.acquiring_id.arr,          db_fguard.acquiring_id.len          );
   memcpy( fguard_ptr->auth_number,           db_fguard.auth_number.arr,           db_fguard.auth_number.len           );
   memcpy( fguard_ptr->response_code,         db_fguard.response_code.arr,         db_fguard.response_code.len         );
   memcpy( fguard_ptr->terminal_id,           db_fguard.terminal_id.arr,           db_fguard.terminal_id.len           );
   memcpy( fguard_ptr->merchant_id,           db_fguard.merchant_id.arr,           db_fguard.merchant_id.len           );
   memcpy( fguard_ptr->card_acceptor_name,    db_fguard.card_acceptor_name.arr,    db_fguard.card_acceptor_name.len    );
   memcpy( fguard_ptr->card_acceptor_city,    db_fguard.card_acceptor_city.arr,    db_fguard.card_acceptor_city.len    );
   memcpy( fguard_ptr->card_acceptor_country, db_fguard.card_acceptor_country.arr, db_fguard.card_acceptor_country.len );
   memcpy( fguard_ptr->currency_code_txn,     db_fguard.currency_code_txn.arr,     db_fguard.currency_code_txn.len     );
   memcpy( fguard_ptr->currency_code_billing, db_fguard.currency_code_billing.arr, db_fguard.currency_code_billing.len );
   memcpy( fguard_ptr->pos_info,              db_fguard.pos_info.arr,              db_fguard.pos_info.len              );
   memcpy( fguard_ptr->system_date,           db_fguard.system_date.arr,           db_fguard.system_date.len           );
   memcpy( fguard_ptr->result_code,           db_fguard.result_code.arr,           db_fguard.result_code.len           );
   memcpy( fguard_ptr->application,           db_fguard.application.arr,           db_fguard.application.len           );
   memcpy( fguard_ptr->rule_domain,           db_fguard.rule_domain.arr,           db_fguard.rule_domain.len           );
   memcpy( fguard_ptr->caller_id,             db_fguard.caller_id.arr,             db_fguard.caller_id.len             );
   memcpy( fguard_ptr->caller_msg_id,         db_fguard.caller_msg_id.arr,         db_fguard.caller_msg_id.len         );
   memcpy( fguard_ptr->result_text,           db_fguard.result_text.arr,           db_fguard.result_text.len           );
   memcpy( fguard_ptr->product,               db_fguard.product.arr,               db_fguard.product.len               );
   fguard_ptr->status = db_fguard.status.arr[0];
   return;
}
/*************************************************************************************/

void db_to_mra01( pMRA01 ptr_MRA01 )
{

   memset( ptr_MRA01, 0x00, sizeof(MRA01) );
   memcpy( ptr_MRA01->transaction_id,          	db_mra01.transaction_id.arr,         	db_mra01.transaction_id.len         );
   memcpy( ptr_MRA01->system_date,             	db_mra01.system_date.arr,            	db_mra01.system_date.len            );
   memcpy( ptr_MRA01->transaction_send_time,	db_mra01.transaction_send_time.arr,	db_mra01.transaction_send_time.len	 );
   memcpy( ptr_MRA01->mracon_sender_name,		db_mra01.mracon_sender_name.arr,	 	db_mra01.mracon_sender_name.len	 );
   memcpy( ptr_MRA01->transaction_number,		db_mra01.transaction_number.arr,	 	db_mra01.transaction_number.len	 );
   memcpy( ptr_MRA01->future_1,				 	db_mra01.future_1.arr,				 	db_mra01.future_1.len				 );
   memcpy( ptr_MRA01->future_2,				 	db_mra01.future_2.arr,				 	db_mra01.future_2.len				 );
   memcpy( ptr_MRA01->future_3,				 	db_mra01.future_3.arr,				 	db_mra01.future_3.len				 );
   memcpy( ptr_MRA01->future_4,				 	db_mra01.future_4.arr,				 	db_mra01.future_4.len				 );
   memcpy( ptr_MRA01->future_5,				 	db_mra01.future_5.arr,				 	db_mra01.future_5.len				 );
   memcpy( ptr_MRA01->future_use_1,			 	db_mra01.future_use_1.arr,			 	db_mra01.future_use_1.len			 );
   memcpy( ptr_MRA01->future_use_2,			 	db_mra01.future_use_2.arr,			 	db_mra01.future_use_2.len			 );
   memcpy( ptr_MRA01->future_use_3,			 	db_mra01.future_use_3.arr,			 	db_mra01.future_use_3.len			 );
   memcpy( ptr_MRA01->future_use_4,			 	db_mra01.future_use_4.arr,			 	db_mra01.future_use_4.len			 );
   memcpy( ptr_MRA01->future_use_5,			 	db_mra01.future_use_5.arr,			 	db_mra01.future_use_5.len			 );
   memcpy( ptr_MRA01->date_yyyymmdd,			db_mra01.date_yyyymmdd.arr,			db_mra01.date_yyyymmdd.len			 );
}
/*************************************************************************************/
/*************************************************************************************/
void db_to_ftlf01( pFTLF01 ptr_ftlf01 )
{
	memset( ptr_ftlf01, 0x00, sizeof(FTLF01) );
	memcpy(ptr_ftlf01->tran_id, db_ftlf01.tran_id.arr, db_ftlf01.tran_id.len);
	memcpy(ptr_ftlf01->sys_date, db_ftlf01.sys_date.arr, db_ftlf01.sys_date.len);
	memcpy(ptr_ftlf01->card_brand, db_ftlf01.card_brand.arr, db_ftlf01.card_brand.len);
	memcpy(ptr_ftlf01->handler_queue, db_ftlf01.handler_queue.arr, db_ftlf01.handler_queue.len);
	memcpy(ptr_ftlf01->tran_req_sent_time, db_ftlf01.tran_req_sent_time.arr, db_ftlf01.tran_req_sent_time.len);
	memcpy(ptr_ftlf01->tran_resp_recv_time, db_ftlf01.tran_resp_recv_time.arr, db_ftlf01.tran_resp_recv_time.len);
	memcpy(ptr_ftlf01->tran_req_sent_mode, db_ftlf01.tran_req_sent_mode.arr, db_ftlf01.tran_req_sent_mode.len);
	memcpy(ptr_ftlf01->tran_resp_recv_mode, db_ftlf01.tran_resp_recv_mode.arr, db_ftlf01.tran_resp_recv_mode.len);
	memcpy(ptr_ftlf01->response_text, db_ftlf01.response_text.arr, db_ftlf01.response_text.len);
	memcpy(ptr_ftlf01->decision_code_1_value, db_ftlf01.decision_code_1_value.arr, db_ftlf01.decision_code_1_value.len);
	memcpy(ptr_ftlf01->decision_code_2_value, db_ftlf01.decision_code_2_value.arr, db_ftlf01.decision_code_2_value.len);
	memcpy(ptr_ftlf01->decision_code_3_value, db_ftlf01.decision_code_3_value.arr, db_ftlf01.decision_code_3_value.len);
	memcpy(ptr_ftlf01->decision_code_4_value, db_ftlf01.decision_code_4_value.arr, db_ftlf01.decision_code_4_value.len);
	memcpy(ptr_ftlf01->decision_code_5_value, db_ftlf01.decision_code_5_value.arr, db_ftlf01.decision_code_5_value.len);
	memcpy(ptr_ftlf01->decision_code_6_value, db_ftlf01.decision_code_6_value.arr, db_ftlf01.decision_code_6_value.len);
	memcpy(ptr_ftlf01->decision_code_7_value, db_ftlf01.decision_code_7_value.arr, db_ftlf01.decision_code_7_value.len);
	memcpy(ptr_ftlf01->decision_code_8_value, db_ftlf01.decision_code_8_value.arr, db_ftlf01.decision_code_8_value.len);
	memcpy(ptr_ftlf01->decision_code_9_value, db_ftlf01.decision_code_9_value.arr, db_ftlf01.decision_code_9_value.len);
	memcpy(ptr_ftlf01->decision_code_10_value, db_ftlf01.decision_code_10_value.arr, db_ftlf01.decision_code_10_value.len);
	memcpy(ptr_ftlf01->future_field1, db_ftlf01.future_field1.arr, db_ftlf01.future_field1.len);
	memcpy(ptr_ftlf01->future_field2, db_ftlf01.future_field2.arr, db_ftlf01.future_field2.len);
	memcpy(ptr_ftlf01->future_field3, db_ftlf01.future_field3.arr, db_ftlf01.future_field3.len);
	memcpy(ptr_ftlf01->future_field4, db_ftlf01.future_field4.arr, db_ftlf01.future_field4.len);
	memcpy(ptr_ftlf01->future_field5, db_ftlf01.future_field5.arr, db_ftlf01.future_field5.len);

}  

void db_to_ptsn01 ( pPTSN01 ptsn01_ptr )
{
   memset(ptsn01_ptr, 0, sizeof(PTSN01));
   memcpy(ptsn01_ptr->transaction_id, db_ptsn01.transaction_id.arr, db_ptsn01.transaction_id.len);
   memcpy(ptsn01_ptr->system_date, db_ptsn01.system_date.arr, db_ptsn01.system_date.len);
   memcpy(ptsn01_ptr->length_serial_no, db_ptsn01.length_serial_no.arr, db_ptsn01.length_serial_no.len);
   memcpy(ptsn01_ptr->total_length, db_ptsn01.total_length.arr, db_ptsn01.total_length.len);
   memcpy(ptsn01_ptr->table_id, db_ptsn01.table_id.arr, db_ptsn01.table_id.len);
   memcpy(ptsn01_ptr->serial_number, db_ptsn01.serial_number.arr, db_ptsn01.serial_number.len);
   memcpy(ptsn01_ptr->future_field_1 , db_ptsn01.future_field_1.arr, db_ptsn01.future_field_1.len);
   memcpy(ptsn01_ptr->future_field_2 , db_ptsn01.future_field_2.arr, db_ptsn01.future_field_2.len);

 }
 


void tlf01_to_db( pTLF01 tlf01_ptr )
{
  memcpy (&pte_tlf01, tlf01_ptr, sizeof(pte_tlf01));
}

/*************************************************************************************/
/* ThoughtFocus Girija Y */
/*************************************************************************************/
void tlf01_stip_to_db( pTLF01 tlf01_ptr )
{
  memcpy (&pte_tlf01_stip, tlf01_ptr, sizeof(pte_tlf01_stip));
}
/*************************************************************************************/
/*************************************************************************************/
void mra01_to_db( pMRA01 ptr_MRA01 )
{
  memcpy (&pte_mra01, ptr_MRA01, sizeof(pte_mra01));
}

 void ptsn01_to_db( pPTSN01 ptsn01_ptr )
{
  memcpy (&pte_ptsn01, ptsn01_ptr, sizeof(pte_ptsn01));
}
/*************************************************************************************/
void ftlf01_to_db( pFTLF01 ptr_ftlf01 )
{
  memcpy (&pte_ftlf01, ptr_ftlf01, sizeof(pte_ftlf01));
}

/*************************************************************************************/

/*************************************************************************************/
BYTE db_select_tlf01 (  pCHAR          Primary_key, 
                        pTLF01         tlf01_ptr, 
                        pCHAR          ErrorMsg )
{
   memset( &db_tlf01, 0, sizeof( db_tlf01 ) );
   strncpy( pte_tlf01.transaction_id, Primary_key, sizeof(pte_tlf01.transaction_id) );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }

   EXEC SQL SELECT *
   INTO :db_tlf01
   FROM tlf01
   WHERE transaction_id = :pte_tlf01.transaction_id;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Repds, ST1:%d,ST2:%d,Data_Type : TLF01 ,Fun_Name : db_select_tlf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_tlf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   db_to_tlf01 (tlf01_ptr);

   return PTEMSG_OK;
}

/*************************************************************************************/

/*************************************************************************************/
BYTE db_select_tlf01_stip (  pCHAR          Primary_key, 
                        pTLF01         tlf01_ptr, 
                        pCHAR          ErrorMsg )
{
   memset( &db_tlf01, 0, sizeof( db_tlf01 ) );
   strncpy( pte_tlf01.transaction_id, Primary_key, sizeof(pte_tlf01.transaction_id) );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }

   EXEC SQL SELECT *
   INTO :db_tlf01
   FROM tlf01_stip
   WHERE transaction_id = :pte_tlf01.transaction_id;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Repds, ST1:%d,ST2:%d,Data_Type : TLF01 ,Fun_Name : db_select_tlf01_stip , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_tlf01_stip,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   db_to_tlf01 (tlf01_ptr);

   return PTEMSG_OK;
}

/*************************************************************************************/

/*************************************************************************************/
BYTE db_select_fguard(  pCHAR     Primary_key, 
                        pFGUARD   fguard_ptr, 
                        pCHAR     ErrorMsg )
{
   memset( &db_fguard, 0x00, sizeof(db_fguard) );
   memcpy( pte_fguard.transaction_id, Primary_key, sizeof(pte_fguard.transaction_id) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }

   EXEC SQL SELECT *
   INTO :db_fguard
   FROM FGUARD
   WHERE transaction_id = :pte_fguard.transaction_id;
     
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Repds, ST1:%d,ST2:%d,Data_Type : FGUARD ,Fun_Name : db_select_fguard , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }   
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		sprintf(er_buf,"In  db_select_fguard,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_fguard( fguard_ptr );

   return PTEMSG_OK;
}

/******************************************************************************/
/******************************************************************************
 *
 *  NAME:         db_select_emvraw
 *
 *  DESCRIPTION:  This function makes the call to the database to select a
 *                record from EMV_RAW.
 *
 *  INPUTS:       emvraw_ptr - EMV_RAW structure
 *
 *  OUTPUTS:      ErrorMsg - Error message if database call failed.
 *
 *  RTRN VALUE:   A PTE code is returned:
 *                       PTEMSG_OK  if no errors else a code to identify
 *                       the reason for the failure.
 *
 ******************************************************************************/

BYTE db_select_emvraw (  pCHAR          Primary_key, 
                        pEMV_RAW         emvraw_ptr, 
                        pCHAR          ErrorMsg )
{
   memset( &db_emv_raw, 0, sizeof( db_emv_raw ) );
   strncpy( pte_tlf01.transaction_id, Primary_key, sizeof(pte_tlf01.transaction_id) );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT 
      *
   INTO
      :db_emv_raw
   FROM EMV_RAW
   WHERE transaction_id = :pte_tlf01.transaction_id;

   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Repds, ST1:%d,ST2:%d,Data_Type : EMV_RAW ,Fun_Name : db_select_emvraw , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   } 
	if ( SQLCODE != 0 )
	{
		/*return( dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) );*/
		//dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		memset(er_buf,0x00,sizeof(er_buf));
		dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		sprintf(er_buf,"In  db_select_emvraw,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		memset(emvraw_ptr, 0, sizeof(EMV_RAW));
	}
	else
	{
		memcpy( emvraw_ptr->transaction_id, db_emv_raw.tran_id,  sizeof(db_emv_raw.tran_id)  );   
		memcpy( emvraw_ptr->DATA_LENGTH, db_emv_raw.len, sizeof(db_emv_raw.len) );
		memcpy( emvraw_ptr->RAW_DATA, &db_emv_raw.emvblock.pin_data, sizeof(emvraw_ptr->RAW_DATA) );
		memcpy( emvraw_ptr->system_date, db_emv_raw.sys_date, sizeof(db_emv_raw.sys_date) );
	}
   

   return PTEMSG_OK;   
}


/******************************************************************************
 *
 *  NAME:         db_select_fgraw
 *
 *  DESCRIPTION:  This function makes the call to the database to select a
 *                record from FG_RAW.
 *
 *  INPUTS:       fgraw_ptr - FG_RAW structure
 *
 *  OUTPUTS:      ErrorMsg - Error message if database call failed.
 *
 *  RTRN VALUE:   A PTE code is returned:
 *                       PTEMSG_OK  if no errors else a code to identify
 *                       the reason for the failure.
 *
 ******************************************************************************/
BYTE db_select_fgraw( pCHAR     Primary_key, 
                      pFG_RAW   fgraw_ptr, 
                      pCHAR     ErrorMsg )
{
   memset( &db_fg_raw, 0x00, sizeof(db_fg_raw) );
   memcpy( pte_tlf01.transaction_id, Primary_key, sizeof(pte_tlf01.transaction_id) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }

   EXEC SQL SELECT *
   INTO :db_fg_raw
   FROM FG_RAW
   WHERE transaction_id = :pte_tlf01.transaction_id;

    if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Repds, ST1:%d,ST2:%d,Data_Type : FG_RAW ,Fun_Name : db_select_fgraw , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   } 
   if ( SQLCODE != 0 )
   {
      /* Do not error out on this error. */
      	memset(er_buf,0x00,sizeof(er_buf));
		dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_fgraw,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
      	memset( fgraw_ptr, 0x00, sizeof(FG_RAW) );
   }
   else
   {
      memcpy( fgraw_ptr->transaction_id, db_fg_raw.transaction_id, sizeof(db_fg_raw.transaction_id));
      memcpy( fgraw_ptr->system_date,    db_fg_raw.system_date,    sizeof(db_fg_raw.system_date)   );
      memcpy( fgraw_ptr->length,         db_fg_raw.length,         sizeof(db_fg_raw.length)        );
      memcpy( fgraw_ptr->raw_data,       db_fg_raw.raw_data,       sizeof(db_fg_raw.raw_data)      );
   }

   return PTEMSG_OK;   
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_tlf01_gui_list_dynamic (pTLF01_LIMITS    Tlf01_ptr, 
                        pTLF01_GUI_LIST Tlf01_Gui_List, 
                        pCHAR          ErrorMsg )
{
    EXEC SQL BEGIN DECLARE SECTION;
    char transaction_id [21];
	char card_num_min [21];
	char card_num_max [21];
	char date_yyyymmdd_start[9];
	char date_yyyymmdd_end[9];
	char time_hhmmss_start[7];
	char time_hhmmss_end[7];
	char merchant_id_min[16];
	char merchant_id_max[16];
	char terminal_id_min[9];
	char terminal_id_max[9];

    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Tlf01_Gui_List, 0, sizeof(TLF01_GUI_LIST) );
   strcpy( Tlf01_Gui_List->num_returned,"0");
   strncpy( transaction_id,		     Tlf01_ptr->transaction_id,		sizeof(transaction_id) );
   strncpy( card_num_min,			 Tlf01_ptr->card_num_min,		sizeof(card_num_min) );
   strncpy( card_num_max,			 Tlf01_ptr->card_num_max,		sizeof(card_num_max) );
   strncpy( date_yyyymmdd_start,	 Tlf01_ptr->date_yyyymmdd_start,	sizeof(date_yyyymmdd_start) );
   strncpy( date_yyyymmdd_end,		 Tlf01_ptr->date_yyyymmdd_end,		sizeof(date_yyyymmdd_end) );
   strncpy( time_hhmmss_start,		 Tlf01_ptr->time_hhmmss_start,		sizeof(time_hhmmss_start) );
   strncpy( time_hhmmss_end,		 Tlf01_ptr->time_hhmmss_end,		sizeof(time_hhmmss_end) );
   strncpy( merchant_id_min,		 Tlf01_ptr->merchant_id_min,	sizeof(merchant_id_min) );
   strncpy( merchant_id_max,		 Tlf01_ptr->merchant_id_max,	sizeof(merchant_id_max) );
   strncpy( terminal_id_min,		 Tlf01_ptr->terminal_id_min,	sizeof(terminal_id_min) );
   strncpy( terminal_id_max,		 Tlf01_ptr->terminal_id_max,	sizeof(terminal_id_max) );


   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }

   EXEC SQL DECLARE tlf01_cursor11 CURSOR FOR
         SELECT * from tlf01
         WHERE  transaction_id >= :transaction_id AND
				nvl(card_num,0) >= :card_num_min AND nvl(card_num,0) <= :card_num_max AND
				nvl(date_yyyymmdd,0) >= :date_yyyymmdd_start AND nvl(date_yyyymmdd,0) <= :date_yyyymmdd_end AND
				nvl(time_hhmmss,0) >= :time_hhmmss_start AND nvl(time_hhmmss,0) <= :time_hhmmss_end AND
				nvl(RTrim (merchant_id ),0) >= :merchant_id_min AND nvl(RTrim (merchant_id ),0) <= :merchant_id_max AND
				nvl(terminal_id,0) >= :terminal_id_min AND nvl(terminal_id,0) <= :terminal_id_max 

				ORDER BY transaction_id;
    if ( db_error_statics_flag == true )
   	{
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Repds, ST1:%d,ST2:%d,Data_Type : TLF01_CURSOR ,Fun_Name : db_get_tlf01_gui_list_dynamic , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 	 }
   	} 
   
   EXEC SQL WHENEVER SQLERROR goto sql_error;
      EXEC SQL OPEN tlf01_cursor11;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE1 ; temp++ )
   {
      memset(&db_tlf01, 0x00, sizeof(db_tlf01));
      if ( db_error_statics_flag == true )
   	  {
      	start_time = ptetime_get_time();
  	  }
      EXEC SQL FETCH tlf01_cursor11
      INTO :db_tlf01;

      if ( db_error_statics_flag == true )
   	  {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Repds, ST1:%d,ST2:%d,Data_Type : TLF01_FETCH ,Fun_Name : db_get_tlf01_gui_list_dynamic , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 	 }
   	  } 
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE tlf01_cursor11;
         memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In db_get_tlf01_gui_list_dynamic ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;
      }
	  db_to_tlf01(&Tlf01_Gui_List->tlf01_structure[temp]);
      itoa(temp + 1, Tlf01_Gui_List->num_returned, 10);
   }

   EXEC SQL CLOSE tlf01_cursor11;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   memset(er_buf,0x00,sizeof(er_buf));
   DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
   sprintf(er_buf,"In  db_get_tlf01_gui_list_dynamic,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
   strcat(er_buf,ErrorMsg);
   Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
   return DB_rcode;
}

/****************************************************************************/
/****************************************************************************/

BYTE db_get_tlf01_gui_list_dynamic_new (pTLF01_LIMITS    Tlf01_ptr, 
                                        pTLF01_GUI_LIST  Tlf01_Gui_List, 
                                        pCHAR            ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
      char transaction_id    [21] = {0};
      char card_num          [21] ={0};
      char date_yyyymmdd_start[9] ={0};
      char date_yyyymmdd_end  [9] ={0};
      char time_hhmmss_start  [7] ={0};
      char time_hhmmss_end    [7] ={0};
      char merchant_id       [16]={0};
      char terminal_id        [9]={0};
      char auth_number		  [7]={0};
      char temp_redemption_amount  [13]={0};
      char epoch_start_time   [15]={0};
      char epoch_finish_time  [15]={0};

      varchar db_transaction_id     [21];
      varchar db_terminal_id         [9];
      varchar db_merchant_id        [16];
      varchar db_card_num           [20];
      varchar db_total_amount       [13];
      varchar db_response_code       [3];
      varchar db_auth_number		 [7];
      varchar db_retrieval_ref_num  [13];
      varchar db_time_hhmmss         [7];
      varchar db_date_yyyymmdd       [9];
      varchar db_acquirer_id        [21];
      varchar db_issuer_id          [21];
      varchar db_sys_trace_audit_num [7];
      varchar db_system_date         [9];
      varchar db_redemption_amount	 [12];

      varchar sqltextvar[1000];

      int  len;
      int  temp;

      unsigned char gui_wildcard    = '*';
      unsigned char oracle_wildcard = '%';

   EXEC SQL END DECLARE SECTION;

   memset(  Tlf01_Gui_List, 0, sizeof(TLF01_GUI_LIST) );
   strcpy(  Tlf01_Gui_List->num_returned,"0");
   strncpy( transaction_id,      Tlf01_ptr->transaction_id,     sizeof(transaction_id)      );
   strncpy( card_num,            Tlf01_ptr->card_num_min,       sizeof(card_num)            );
   strncpy( date_yyyymmdd_start, Tlf01_ptr->date_yyyymmdd_start,sizeof(date_yyyymmdd_start) );
   strncpy( date_yyyymmdd_end,   Tlf01_ptr->date_yyyymmdd_end,  sizeof(date_yyyymmdd_end)   );
   strncpy( time_hhmmss_start,   Tlf01_ptr->time_hhmmss_start,  sizeof(time_hhmmss_start)   );
   strncpy( time_hhmmss_end,     Tlf01_ptr->time_hhmmss_end,    sizeof(time_hhmmss_end)     );
   strncpy( merchant_id,         Tlf01_ptr->merchant_id_min,    sizeof(merchant_id)         );
   strncpy( terminal_id,         Tlf01_ptr->terminal_id_min,    sizeof(terminal_id)         );
   strncpy( auth_number,         Tlf01_ptr->auth_number_min,    sizeof(auth_number)         );
   strncpy( temp_redemption_amount,   Tlf01_ptr->redemption_amount,  sizeof(temp_redemption_amount)   );

   /* -------------------------------------------------------------- */
   /* Dynamically build select based on presence or absence of data. */
   /* -------------------------------------------------------------- */

   temp = 0;

   /* Determine which index hint to use based on which data is present. */
   /* ----------------------------------------------------------------- */
   if ( card_num[0] != 0x00 )
   {
      /* Use index on card_num. */
      strcpy( sqltextvar.arr,
             "(SELECT /*+ index(TLF01 IDX_TLF01_CARD_NUM) */ ");
   }
   else if ( merchant_id[0] != 0x00 )
   {
      /* Use index on merchant_id. */
      strcpy( sqltextvar.arr,
             "(SELECT /*+ index(TLF01 IDX_TLF01_MERCH_ID) */ ");
   }
   else if ( date_yyyymmdd_start[0] != 0x00 )
   {
      /* Use index on system_date, transaction_id. */
      strcpy( sqltextvar.arr,
             "(SELECT /*+ index(TLF01 IDX_TLF01_AUTHLOG) */ ");
   }
   else
   {
      /* No index - let the Oracle Optimizer figure it out. */
      strcpy( sqltextvar.arr, "(SELECT ");
   }

   /* Complete the SELECT clause, with FROM, and start the WHERE clause */
   strcat( sqltextvar.arr,
          "transaction_id, terminal_id, merchant_id, card_num, "
          "total_amount, date_yyyymmdd, time_hhmmss, response_code, auth_number,"
          "acquirer_id, issuer_id, retrieval_ref_num, "
          "sys_trace_audit_num, system_date,redemption_amount FROM TLF01 WHERE " );


   /* ----------- */
   /* CARD NUMBER */
   /* ----------- */

   len = strlen( card_num );
   if ( len > 0 )
   {
      if ( card_num[len-1] == gui_wildcard )
      {
         /* Operator used a wild card on card number.  Need to use a 'like'. */
         card_num[len-1] = oracle_wildcard;
         sprintf( sqltextvar.arr,
                 "%s card_num like '%s'",
                  sqltextvar.arr, card_num );
      }
      else
      {
         sprintf( sqltextvar.arr,
                 "%s card_num = '%s'",
                  sqltextvar.arr, card_num );
      }
      temp = 1;
   }
   
   /* ----------------- */
   /* 	 AUTH NUMBER 	*/
   /* ----------------- */
   
   len = 0;
   len = strlen( auth_number );
   if(len > 0)
   {
    if ( temp == 1 )
      {
         sprintf( sqltextvar.arr,
                 "%s and auth_number = '%s'",
                  sqltextvar.arr, auth_number );
      }
      else
      {
         temp = 1;
         sprintf( sqltextvar.arr,
                 "%s auth_number = '%s'",
                  sqltextvar.arr, auth_number );
      }
   }

   
   /* ----------------- */
   /* 	HOST NAME   	*/
   /* ----------------- */
   
   len = 0;
   len = strlen( temp_redemption_amount );
   temp_redemption_amount[len] = '\0';
   if(len > 0)
   {

    if ( temp == 1 )
      {
         sprintf( sqltextvar.arr,
                 "%s and redemption_amount = '%s'",
                  sqltextvar.arr, temp_redemption_amount );
      }
      else
      {
         temp = 1;
         sprintf( sqltextvar.arr,
                 "%s redemption_amount = '%s'",
                  sqltextvar.arr, temp_redemption_amount );
      }
   }


   /* ---------- */
   /* DATE RANGE */
   /* ---------- */

   if ( date_yyyymmdd_start[0] != '\0' )
   {
      if ( 0 == strcmp(date_yyyymmdd_start, date_yyyymmdd_end) )
      {
         /* Start date and End date are the same. */
         /* ------------------------------------- */
         if ( temp == 1 )
         {
            sprintf( sqltextvar.arr,
                    "%s and system_date = '%s'",
                     sqltextvar.arr, date_yyyymmdd_start );
         }
         else
         {
            temp = 1;
            sprintf( sqltextvar.arr,
                    "%s system_date = '%s'",
                     sqltextvar.arr, date_yyyymmdd_start );
         }
      }
      else
      {
         /* Start date and End date are different. */
         /* -------------------------------------- */
         if ( temp == 1 )
         {
            sprintf( sqltextvar.arr,
                    "%s and system_date >= '%s' and system_date <= '%s'",
                     sqltextvar.arr, date_yyyymmdd_start, date_yyyymmdd_end );
         }
         else
         {
            temp = 1;
            sprintf( sqltextvar.arr,
                    "%s system_date >= '%s' and system_date <= '%s'",
                     sqltextvar.arr, date_yyyymmdd_start, date_yyyymmdd_end );
         }
      }
   }


   /* -------------- */
   /* TRANSACTION ID */
   /* -------------- */

   if(transaction_id[0] != '\0')
   {
      if ( temp == 1 )
      {
         sprintf( sqltextvar.arr,
                 "%s and transaction_id >= '%s'",
                  sqltextvar.arr, transaction_id );
      }
      else
      {
         temp = 1;
         sprintf( sqltextvar.arr,
                 "%s transaction_id >= '%s'",
                  sqltextvar.arr, transaction_id );
      }
   }


   /* ----------- */
   /* MERCHANT ID */
   /* ----------- */

   len = strlen( merchant_id );
   if ( len > 0 )
   {
      if ( temp == 1 )
      {
         if ( merchant_id[len-1] == gui_wildcard )
         {
            /* Operator used wild card on merchant.  Need to use 'like' cmd. */
            merchant_id[len-1] = oracle_wildcard;
            sprintf( sqltextvar.arr,
                    "%s and merchant_id like '%s'",
                     sqltextvar.arr, merchant_id );
         }
         else
         {
            sprintf( sqltextvar.arr,
                    "%s and merchant_id = '%s'",
                     sqltextvar.arr, merchant_id );
         }
      }
      else
      {
         temp = 1;
         if ( merchant_id[len-1] == gui_wildcard )
         {
            /* Operator used wild card on merchant.  Need to use 'like' cmd. */
            merchant_id[len-1] = oracle_wildcard;
            sprintf( sqltextvar.arr,
                    "%s merchant_id like '%s'",
                     sqltextvar.arr, merchant_id );
         }
         else
         {
            sprintf( sqltextvar.arr,
                    "%s merchant_id = '%s'",
                     sqltextvar.arr, merchant_id );
         }
      }
   }


   /* ----------- */
   /* TERMINAL ID */
   /* ----------- */

   len = strlen( terminal_id );
   if ( len > 0 )
   {
      if ( temp == 1 )
      {
         if ( terminal_id[len-1] == gui_wildcard )
         {
            /* Operator used wild card on terminal.  Need to use 'like' cmd. */
            terminal_id[len-1] = oracle_wildcard;
            sprintf( sqltextvar.arr,
                    "%s and terminal_id like '%s'",
                     sqltextvar.arr, terminal_id );
         }
         else
         {
            sprintf( sqltextvar.arr,
                    "%s and terminal_id = '%s'",
                     sqltextvar.arr, terminal_id );
         }
      }
      else
      {
         temp = 1;
         if ( terminal_id[len-1] == gui_wildcard )
         {
            /* Operator used wild card on terminal.  Need to use 'like' cmd. */
            terminal_id[len-1] = oracle_wildcard;
            sprintf( sqltextvar.arr,
                    "%s terminal_id like '%s'",
                     sqltextvar.arr, terminal_id );
         }
         else
         {
            sprintf( sqltextvar.arr,
                    "%s terminal_id = '%s'",
                     sqltextvar.arr, terminal_id );
         }
      }
   }


   /* ---------- */
   /* TIME RANGE */
   /* ---------- */

   if(time_hhmmss_start[0] != '\0' && date_yyyymmdd_start[0] != '\0')
   {
	  get_epoch_time_from_normal_date(date_yyyymmdd_start, time_hhmmss_start, &epoch_start_time);
	  get_epoch_time_from_normal_date(date_yyyymmdd_end,   time_hhmmss_end,   &epoch_finish_time);
	  
	  if ( temp == 1 )
	  {
		 sprintf( sqltextvar.arr,
				 "%s and tran_start_time >= '%s' and tran_finish_time <= '%s'",
				  sqltextvar.arr, epoch_start_time, epoch_finish_time );
	  }
	  else
	  {
		 temp = 1;
		 sprintf( sqltextvar.arr,
				 "%s tran_start_time >= '%s' and tran_finish_time <= '%s'",
				  sqltextvar.arr, epoch_start_time, epoch_finish_time );
	  }
   }
   /*if(time_hhmmss_start[0] != '\0')
   {
      if ( temp == 1 )
      {
         sprintf( sqltextvar.arr,
                 "%s and time_hhmmss >= '%s' and time_hhmmss <= '%s'",
                  sqltextvar.arr, time_hhmmss_start, time_hhmmss_end );
      }
      else
      {
         temp = 1;
         sprintf( sqltextvar.arr,
                 "%s time_hhmmss >= '%s' and time_hhmmss <= '%s'",
                  sqltextvar.arr, time_hhmmss_start, time_hhmmss_end );
      }
   }*/


   /* -------- */
   /* ORDER BY */
   /* -------- */

   sprintf( sqltextvar.arr,
           "%s) ORDER BY transaction_id",
            sqltextvar.arr );

   sqltextvar.len = strlen(sqltextvar.arr);


   EXEC SQL PREPARE S FROM :sqltextvar;

   EXEC SQL DECLARE tlf01_cursor_lookup CURSOR FOR S;


   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN tlf01_cursor_lookup;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE1 ; temp++ )
   {
   	  if ( db_error_statics_flag == true )
   	  {
     	 start_time = ptetime_get_time();
      }
   
      EXEC SQL FETCH tlf01_cursor_lookup
      INTO :db_transaction_id, db_terminal_id, db_merchant_id, db_card_num,
            db_total_amount, db_date_yyyymmdd, db_time_hhmmss, db_response_code,
            db_auth_number,db_acquirer_id, db_issuer_id, db_retrieval_ref_num,
            db_sys_trace_audit_num, db_system_date;
      
      if ( db_error_statics_flag == true )
   	  {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Repds, ST1:%d,ST2:%d,Data_Type : TLF01 ,Fun_Name : db_get_tlf01_gui_list_dynamic_new , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 	 }
   	  } 
   	  
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE tlf01_cursor_lookup;

         memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In db_get_tlf01_gui_list_dynamic_new ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;
      }
      memcpy( Tlf01_Gui_List->tlf01_structure[temp].primary_key.transaction_id,
              db_transaction_id.arr, db_transaction_id.len );

      memcpy( Tlf01_Gui_List->tlf01_structure[temp].terminal_id,
              db_terminal_id.arr, db_terminal_id.len );

      memcpy( Tlf01_Gui_List->tlf01_structure[temp].merchant_id,
              db_merchant_id.arr, db_merchant_id.len );

      memcpy( Tlf01_Gui_List->tlf01_structure[temp].card_num,
              db_card_num.arr, db_card_num.len );

      memcpy( Tlf01_Gui_List->tlf01_structure[temp].total_amount,
              db_total_amount.arr, db_total_amount.len );

      memcpy( Tlf01_Gui_List->tlf01_structure[temp].response_code,
              db_response_code.arr, db_response_code.len );
              
     memcpy( Tlf01_Gui_List->tlf01_structure[temp].auth_number,
             db_auth_number.arr, db_auth_number.len );

      memcpy( Tlf01_Gui_List->tlf01_structure[temp].retrieval_ref_num,
              db_retrieval_ref_num.arr, db_retrieval_ref_num.len );

      memcpy( Tlf01_Gui_List->tlf01_structure[temp].time_hhmmss,
              db_time_hhmmss.arr, db_time_hhmmss.len );

      memcpy( Tlf01_Gui_List->tlf01_structure[temp].date_yyyymmdd,
              db_date_yyyymmdd.arr, db_date_yyyymmdd.len );

      memcpy( Tlf01_Gui_List->tlf01_structure[temp].acquirer_id,
              db_acquirer_id.arr, db_acquirer_id.len );

      memcpy( Tlf01_Gui_List->tlf01_structure[temp].issuer_id,
              db_issuer_id.arr, db_issuer_id.len );

      memcpy( Tlf01_Gui_List->tlf01_structure[temp].sys_trace_audit_num,
              db_sys_trace_audit_num.arr, db_sys_trace_audit_num.len );

      memcpy( Tlf01_Gui_List->tlf01_structure[temp].system_date,
              db_system_date.arr, db_system_date.len );

      itoa(temp + 1, Tlf01_Gui_List->num_returned, 10);
   }

   EXEC SQL CLOSE tlf01_cursor_lookup;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   memset(er_buf,0x00,sizeof(er_buf));
   DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
   sprintf(er_buf,"In db_get_tlf01_gui_list_dynamic_new ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
   strcat(er_buf,ErrorMsg);
   Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
   return DB_rcode;

}

/****************************************************************************/
/****************************************************************************/

BYTE db_get_fguard_gui_list_dynamic (pTLF01_LIMITS     Tlf01_ptr,
                                     pFGUARD_GUI_LIST  Fguard_Gui_List,
                                     BYTE              subtype2,
                                     pCHAR             ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
      char transaction_id    [21];
      char card_num          [21];
      char date_yyyymmdd_start[9];
      char date_yyyymmdd_end  [9];
      char time_hhmmss_start  [7];
      char time_hhmmss_end    [7];
      char merchant_id       [16];
      char terminal_id        [9];

      varchar db_transaction_id     [21];
      varchar db_terminal_id         [9];
      varchar db_merchant_id        [16];
      varchar db_card_num           [20];
      varchar db_amount_peso        [13];
      varchar db_timestamp          [21];
      varchar db_response_code       [3];
      varchar db_acquiring_id       [21];
      varchar db_sys_trace_audit_num [7];
      varchar db_system_date         [9];
      varchar db_result_code         [7];

      varchar sqltextvar[1000];

      int  len;
      int  temp;

      unsigned char gui_wildcard    = '*';
      unsigned char oracle_wildcard = '%';

   EXEC SQL END DECLARE SECTION;

   memset(  Fguard_Gui_List, 0x00, sizeof(FGUARD_GUI_LIST) );
   strcpy(  Fguard_Gui_List->num_returned,"0");
   strncpy( transaction_id,      Tlf01_ptr->transaction_id,     sizeof(transaction_id)      );
   strncpy( card_num,            Tlf01_ptr->card_num_min,       sizeof(card_num)            );
   strncpy( date_yyyymmdd_start, Tlf01_ptr->date_yyyymmdd_start,sizeof(date_yyyymmdd_start) );
   strncpy( date_yyyymmdd_end,   Tlf01_ptr->date_yyyymmdd_end,  sizeof(date_yyyymmdd_end)   );
   strncpy( time_hhmmss_start,   Tlf01_ptr->time_hhmmss_start,  sizeof(time_hhmmss_start)   );
   strncpy( time_hhmmss_end,     Tlf01_ptr->time_hhmmss_end,    sizeof(time_hhmmss_end)     );
   strncpy( merchant_id,         Tlf01_ptr->merchant_id_min,    sizeof(merchant_id)         );
   strncpy( terminal_id,         Tlf01_ptr->terminal_id_min,    sizeof(terminal_id)         );

   /* -------------------------------------------------------------- */
   /* Dynamically build select based on presence or absence of data. */
   /* -------------------------------------------------------------- */

   temp = 0;
   strcpy( sqltextvar.arr,
           "(SELECT transaction_id, terminal_id, merchant_id, card_num, "
                   "amount_peso, timestamp, response_code, acquiring_id, "
                   "sys_trace_audit_num, system_date, result_code "
            "FROM FGUARD WHERE " );


   /* ----------- */
   /* CARD NUMBER */
   /* ----------- */

   len = strlen( card_num );
   if ( len > 0 )
   {
      if ( card_num[len-1] == gui_wildcard )
      {
         /* Operator used a wild card on card number.  Need to use a 'like'. */
         card_num[len-1] = oracle_wildcard;
         sprintf( sqltextvar.arr,
                 "%s card_num like '%s'",
                  sqltextvar.arr, card_num );
      }
      else
      {
         sprintf( sqltextvar.arr,
                 "%s card_num = '%s'",
                  sqltextvar.arr, card_num );
      }
      temp = 1;
   }

   /* ---------- */
   /* DATE RANGE */
   /* ---------- */

   if ( date_yyyymmdd_start[0] != '\0' )
   {
      if ( 0 == strcmp(date_yyyymmdd_start, date_yyyymmdd_end) )
      {
         /* Start date and End date are the same. */
         /* ------------------------------------- */
         if ( temp == 1 )
         {
            sprintf( sqltextvar.arr,
                    "%s and system_date = '%s'",
                     sqltextvar.arr, date_yyyymmdd_start );
         }
         else
         {
            temp = 1;
            sprintf( sqltextvar.arr,
                    "%s system_date = '%s'",
                     sqltextvar.arr, date_yyyymmdd_start );
         }
      }
      else
      {
         /* Start date and End date are different. */
         /* -------------------------------------- */
         if ( temp == 1 )
         {
            sprintf( sqltextvar.arr,
                    "%s and system_date >= '%s' and system_date <= '%s'",
                     sqltextvar.arr, date_yyyymmdd_start, date_yyyymmdd_end );
         }
         else
         {
            temp = 1;
            sprintf( sqltextvar.arr,
                    "%s system_date >= '%s' and system_date <= '%s'",
                     sqltextvar.arr, date_yyyymmdd_start, date_yyyymmdd_end );
         }
      }
   }


   /* -------------- */
   /* TRANSACTION ID */
   /* -------------- */

   if(transaction_id[0] != '\0')
   {
      if ( temp == 1 )
      {
         sprintf( sqltextvar.arr,
                 "%s and transaction_id >= '%s'",
                  sqltextvar.arr, transaction_id );
      }
      else
      {
         temp = 1;
         sprintf( sqltextvar.arr,
                 "%s transaction_id >= '%s'",
                  sqltextvar.arr, transaction_id );
      }
   }


   /* ----------- */
   /* MERCHANT ID */
   /* ----------- */

   len = strlen( merchant_id );
   if ( len > 0 )
   {
      if ( temp == 1 )
      {
         if ( merchant_id[len-1] == gui_wildcard )
         {
            /* Operator used wild card on merchant.  Need to use 'like' cmd. */
            merchant_id[len-1] = oracle_wildcard;
            sprintf( sqltextvar.arr,
                    "%s and merchant_id like '%s'",
                     sqltextvar.arr, merchant_id );
         }
         else
         {
            sprintf( sqltextvar.arr,
                    "%s and merchant_id = '%s'",
                     sqltextvar.arr, merchant_id );
         }
      }
      else
      {
         temp = 1;
         if ( merchant_id[len-1] == gui_wildcard )
         {
            /* Operator used wild card on merchant.  Need to use 'like' cmd. */
            merchant_id[len-1] = oracle_wildcard;
            sprintf( sqltextvar.arr,
                    "%s merchant_id like '%s'",
                     sqltextvar.arr, merchant_id );
         }
         else
         {
            sprintf( sqltextvar.arr,
                    "%s merchant_id = '%s'",
                     sqltextvar.arr, merchant_id );
         }
      }
   }


   /* ----------- */
   /* TERMINAL ID */
   /* ----------- */

   len = strlen( terminal_id );
   if ( len > 0 )
   {
      if ( temp == 1 )
      {
         if ( terminal_id[len-1] == gui_wildcard )
         {
            /* Operator used wild card on terminal.  Need to use 'like' cmd. */
            terminal_id[len-1] = oracle_wildcard;
            sprintf( sqltextvar.arr,
                    "%s and terminal_id like '%s'",
                     sqltextvar.arr, terminal_id );
         }
         else
         {
            sprintf( sqltextvar.arr,
                    "%s and terminal_id = '%s'",
                     sqltextvar.arr, terminal_id );
         }
      }
      else
      {
         temp = 1;
         if ( terminal_id[len-1] == gui_wildcard )
         {
            /* Operator used wild card on terminal.  Need to use 'like' cmd. */
            terminal_id[len-1] = oracle_wildcard;
            sprintf( sqltextvar.arr,
                    "%s terminal_id like '%s'",
                     sqltextvar.arr, terminal_id );
         }
         else
         {
            sprintf( sqltextvar.arr,
                    "%s terminal_id = '%s'",
                     sqltextvar.arr, terminal_id );
         }
      }
   }


   /* ----------------------------------------------- */
   /* SUBTYPE 2 (Get all failed, all successful, all) */
   /* ----------------------------------------------- */

   if ( subtype2 != ST2_NONE )
   {
      if ( subtype2 == ST2_GET_ALL_FG_FAILED )
      {
         sprintf( sqltextvar.arr,
                 "%s and result_code = 'FALSE'",
                  sqltextvar.arr );
      }
      else if ( subtype2 == ST2_GET_ALL_FG_SUCCESS )
      {
         sprintf( sqltextvar.arr,
                 "%s and result_code = 'TRUE'",
                  sqltextvar.arr );
      }
   }


   /* -------- */
   /* ORDER BY */
   /* -------- */

   sprintf( sqltextvar.arr,
           "%s) ORDER BY transaction_id",
            sqltextvar.arr );

   sqltextvar.len = strlen(sqltextvar.arr);


   EXEC SQL PREPARE S FROM :sqltextvar;

   EXEC SQL DECLARE fguard_cursor_lookup CURSOR FOR S;


   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN fguard_cursor_lookup;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE1 ; temp++ )
   {
   		if ( db_error_statics_flag == true )
   		{
      		start_time = ptetime_get_time();
   		}
      EXEC SQL FETCH fguard_cursor_lookup
      INTO :db_transaction_id, db_terminal_id,  db_merchant_id,
            db_card_num,       db_amount_peso,  db_timestamp,
            db_response_code,  db_acquiring_id, db_sys_trace_audit_num,
            db_system_date,    db_result_code;

       if ( db_error_statics_flag == true )
   	  {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Repds, ST1:%d,ST2:%d,Data_Type : FGAURD ,Fun_Name : db_get_fguard_gui_list_dynamic , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 	 }
   	  } 
     
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE fguard_cursor_lookup;

         memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In  db_get_fguard_gui_list_dynamic,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;
      }
      memcpy( Fguard_Gui_List->FGUARD_record[temp].transaction_id,
              db_transaction_id.arr, db_transaction_id.len );

      memcpy( Fguard_Gui_List->FGUARD_record[temp].terminal_id,
              db_terminal_id.arr, db_terminal_id.len );

      memcpy( Fguard_Gui_List->FGUARD_record[temp].merchant_id,
              db_merchant_id.arr, db_merchant_id.len );

      memcpy( Fguard_Gui_List->FGUARD_record[temp].card_num,
              db_card_num.arr, db_card_num.len );

      memcpy( Fguard_Gui_List->FGUARD_record[temp].amount_peso,
              db_amount_peso.arr, db_amount_peso.len );

      memcpy( Fguard_Gui_List->FGUARD_record[temp].response_code,
              db_response_code.arr, db_response_code.len );

      memcpy( Fguard_Gui_List->FGUARD_record[temp].timestamp,
              db_timestamp.arr, db_timestamp.len );

      memcpy( Fguard_Gui_List->FGUARD_record[temp].acquiring_id,
              db_acquiring_id.arr, db_acquiring_id.len );

      memcpy( Fguard_Gui_List->FGUARD_record[temp].sys_trace_audit_num,
              db_sys_trace_audit_num.arr, db_sys_trace_audit_num.len );

      memcpy( Fguard_Gui_List->FGUARD_record[temp].system_date,
              db_system_date.arr, db_system_date.len );

      memcpy( Fguard_Gui_List->FGUARD_record[temp].result_code,
              db_result_code.arr, db_result_code.len );

      itoa(temp + 1, Fguard_Gui_List->num_returned, 10);
   }

   EXEC SQL CLOSE fguard_cursor_lookup;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In  db_get_fguard_gui_list_dynamic,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;

}

/****************************************************************************/
/****************************************************************************/

BYTE db_get_mcf01_gui_list (pMCF01    Mcf01_ptr, 
                        pMCF01_REPORT_LIST Mcf01_Gui_List, 
                        pCHAR          ErrorMsg )
{
    EXEC SQL BEGIN DECLARE SECTION;
    char name [100] = "";
    char merchant_id [20] = "";
    char organization_id [5] = "";
    char previous_name[100]  = "";
	char previous_merchant_id [20] ="";

    int temp = 0;
    EXEC SQL END DECLARE SECTION;

   memset( Mcf01_Gui_List, 0, sizeof(MCF01_REPORT_LIST) );
   strcpy( Mcf01_Gui_List->num_returned,"0");
   strncpy( previous_merchant_id,		     Mcf01_ptr->primary_key.merchant_id,		sizeof(merchant_id) );
   strncpy( organization_id,		 Mcf01_ptr->primary_key.organization_id,		sizeof(organization_id) );
   strncpy( previous_name,			 Mcf01_ptr->name02,		sizeof(previous_name) );

   /* Address 1 is used to preserve the original search criteria.
    * Need to do this because Alpha Search requires a 'LIKE' command.
    */
	strncpy(merchant_id,previous_merchant_id,sizeof(merchant_id));
   strncpy( name, Mcf01_ptr->address01, sizeof(name) );
   strcat ( name, "%" );

   EXEC SQL DECLARE mcf01_cursor CURSOR FOR
         SELECT organization_id, merchant_id, name01, name02, address01, address02, city from mcf01
         WHERE  merchant_id >= :previous_merchant_id
		   AND name02 LIKE :name
           AND  name02 >=   :previous_name
		   AND rownum between 1 and 21
         ORDER BY name02 ,merchant_id;

   
   EXEC SQL WHENEVER SQLERROR goto sql_error;
      EXEC SQL OPEN mcf01_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE; temp++ )
   {
   	  if ( db_error_statics_flag == true )
  	  {
    	start_time = ptetime_get_time();
  	  }
      memset(&db_mcf01_report, 0x00, sizeof(db_mcf01_report));
      EXEC SQL FETCH mcf01_cursor
      INTO :db_mcf01_report;
      
      if ( db_error_statics_flag == true )
   	  {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Repds, ST1:%d,ST2:%d,Data_Type : MCF01 ,Fun_Name : db_get_mcf01_gui_list , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 	 }
   	  } 
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE mcf01_cursor;

         memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In db_get_mcf01_gui_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;
      }

	   memcpy(Mcf01_Gui_List->merchant_info[temp].merchant_id,		db_mcf01_report.merchant_id.arr,	db_mcf01_report.merchant_id.len);
	   memcpy(Mcf01_Gui_List->merchant_info[temp].organization_id,	db_mcf01_report.organization_id.arr,	db_mcf01_report.organization_id.len);
	   memcpy(Mcf01_Gui_List->merchant_info[temp].name01,			db_mcf01_report.name01.arr,			db_mcf01_report.name01.len);
	   memcpy(Mcf01_Gui_List->merchant_info[temp].name02,			db_mcf01_report.name02.arr,			db_mcf01_report.name02.len);
	   memcpy(Mcf01_Gui_List->merchant_info[temp].address01,		db_mcf01_report.address01.arr,		db_mcf01_report.address01.len);
	   memcpy(Mcf01_Gui_List->merchant_info[temp].address02,		db_mcf01_report.address02.arr,		db_mcf01_report.address02.len);
	   memcpy(Mcf01_Gui_List->merchant_info[temp].city,			db_mcf01_report.city.arr,			db_mcf01_report.city.len);

       /* Prepare for next group */
       memcpy(Mcf01_Gui_List->merchant_info[temp].merchant_id,		db_mcf01_report.merchant_id.arr,	db_mcf01_report.merchant_id.len);
	   memcpy(Mcf01_Gui_List->merchant_info[temp].name02,			db_mcf01_report.name02.arr,			db_mcf01_report.name02.len);

      itoa(temp + 1, Mcf01_Gui_List->num_returned, 10);
   }

   EXEC SQL CLOSE mcf01_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   memset(er_buf,0x00,sizeof(er_buf));
   DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
	 sprintf(er_buf,"In db_get_mcf01_gui_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	 strcat(er_buf,ErrorMsg);
	 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	 return DB_rcode;

}

/****************************************************************************/
/***************************************************************************/
/* ThoughtFocus Girija Y */
/***************************************************************************/
BYTE db_get_tlf01_stip_gui_list_for_standin (pTLF01_LIMITS    Tlf01_ptr, 
                                        pTLF01_GUI_LIST  Tlf01_Gui_List, 
                                        pCHAR            ErrorMsg )
{
    EXEC SQL BEGIN DECLARE SECTION;
      char transaction_id    [21];
      char card_num          [21];
      char date_yyyymmdd_start[9];
      char date_yyyymmdd_end  [9];
      char time_hhmmss_start  [7];
      char time_hhmmss_end    [7];
      char merchant_id       [16];
      char terminal_id        [9];
      char auth_number		  [7];
      char epoch_start_time   [15]={0};
      char epoch_finish_time  [15]={0};
      
      varchar db_transaction_id     [21];
      varchar db_terminal_id         [9];
      varchar db_merchant_id        [16];
      varchar db_card_num           [20];
      varchar db_total_amount       [13];
      varchar db_response_code       [3];
      varchar db_retrieval_ref_num  [13];
      varchar db_time_hhmmss         [7];
      varchar db_date_yyyymmdd       [9];
      varchar db_acquirer_id        [21];
      varchar db_issuer_id          [21];
      varchar db_sys_trace_audit_num [7];
      varchar db_system_date         [9];

      varchar sqltextvar[1000];

      int  len;
      int  temp;

      unsigned char gui_wildcard    = '*';
      unsigned char oracle_wildcard = '%';

   EXEC SQL END DECLARE SECTION;

   memset(  Tlf01_Gui_List, 0, sizeof(TLF01_GUI_LIST) );
   strcpy(  Tlf01_Gui_List->num_returned,"0");
   strncpy( transaction_id,      Tlf01_ptr->transaction_id,     sizeof(transaction_id)      );
   strncpy( card_num,            Tlf01_ptr->card_num_min,       sizeof(card_num)            );
   strncpy( date_yyyymmdd_start, Tlf01_ptr->date_yyyymmdd_start,sizeof(date_yyyymmdd_start) );
   strncpy( date_yyyymmdd_end,   Tlf01_ptr->date_yyyymmdd_end,  sizeof(date_yyyymmdd_end)   );
   strncpy( time_hhmmss_start,   Tlf01_ptr->time_hhmmss_start,  sizeof(time_hhmmss_start)   );
   strncpy( time_hhmmss_end,     Tlf01_ptr->time_hhmmss_end,    sizeof(time_hhmmss_end)     );
   strncpy( merchant_id,         Tlf01_ptr->merchant_id_min,    sizeof(merchant_id)         );
   strncpy( terminal_id,         Tlf01_ptr->terminal_id_min,    sizeof(terminal_id)         );
   strncpy( auth_number,         Tlf01_ptr->auth_number_min,    sizeof(auth_number)         );
   
   /* -------------------------------------------------------------- */
   /* Dynamically build select based on presence or absence of data. */
   /* -------------------------------------------------------------- */

   temp = 0;

   strcpy( sqltextvar.arr, "SELECT * FROM TLF01_STIP WHERE ");


   /* ----------- */
   /* CARD NUMBER */
   /* ----------- */

   len = strlen( card_num );
   if ( len > 0 )
   {
      if ( card_num[len-1] == gui_wildcard )
      {
         /* Operator used a wild card on card number.  Need to use a 'like'. */
         card_num[len-1] = oracle_wildcard;
         sprintf( sqltextvar.arr,
                 "%s card_num like '%s'",
                  sqltextvar.arr, card_num );
      }
      else
      {
         sprintf( sqltextvar.arr,
                 "%s card_num = '%s'",
                  sqltextvar.arr, card_num );
      }
      temp = 1;
   }

   /* ---------- */
   /* DATE RANGE */
   /* ---------- */

   if ( date_yyyymmdd_start[0] != '\0' )
   {
      if ( 0 == strcmp(date_yyyymmdd_start, date_yyyymmdd_end) )
      {
         /* Start date and End date are the same. */
         /* ------------------------------------- */
         if ( temp == 1 )
         {
            sprintf( sqltextvar.arr,
                    "%s and system_date = '%s'",
                     sqltextvar.arr, date_yyyymmdd_start );
         }
         else
         {
            temp = 1;
            sprintf( sqltextvar.arr,
                    "%s system_date = '%s'",
                     sqltextvar.arr, date_yyyymmdd_start );
         }
      }
      else
      {
         /* Start date and End date are different. */
         /* -------------------------------------- */
         if ( temp == 1 )
         {
            sprintf( sqltextvar.arr,
                    "%s and system_date >= '%s' and system_date <= '%s'",
                     sqltextvar.arr, date_yyyymmdd_start, date_yyyymmdd_end );
         }
         else
         {
            temp = 1;
            sprintf( sqltextvar.arr,
                    "%s system_date >= '%s' and system_date <= '%s'",
                     sqltextvar.arr, date_yyyymmdd_start, date_yyyymmdd_end );
         }
      }
   }

	/* ----------------- */
   /* 	 AUTH NUMBER 	*/
   /* ----------------- */
   
   len = 0;
   len = strlen( auth_number );
   if(len > 0)
   {
    if ( temp == 1 )
      {
         sprintf( sqltextvar.arr,
                 "%s and auth_number = '%s'",
                  sqltextvar.arr, auth_number );
      }
      else
      {
         temp = 1;
         sprintf( sqltextvar.arr,
                 "%s auth_number = '%s'",
                  sqltextvar.arr, auth_number );
      }
   }
   /* -------------- */
   /* TRANSACTION ID */
   /* -------------- */

   if(transaction_id[0] != '\0')
   {
      if ( temp == 1 )
      {
         sprintf( sqltextvar.arr,
                 "%s and transaction_id >= '%s'",
                  sqltextvar.arr, transaction_id );
      }
      else
      {
         temp = 1;
         sprintf( sqltextvar.arr,
                 "%s transaction_id >= '%s'",
                  sqltextvar.arr, transaction_id );
      }
   }


   /* ----------- */
   /* MERCHANT ID */
   /* ----------- */

   len = strlen( merchant_id );
   if ( len > 0 )
   {
      if ( temp == 1 )
      {
         if ( merchant_id[len-1] == gui_wildcard )
         {
            /* Operator used wild card on merchant.  Need to use 'like' cmd. */
            merchant_id[len-1] = oracle_wildcard;
            sprintf( sqltextvar.arr,
                    "%s and merchant_id like '%s'",
                     sqltextvar.arr, merchant_id );
         }
         else
         {
            sprintf( sqltextvar.arr,
                    "%s and merchant_id = '%s'",
                     sqltextvar.arr, merchant_id );
         }
      }
      else
      {
         temp = 1;
         if ( merchant_id[len-1] == gui_wildcard )
         {
            /* Operator used wild card on merchant.  Need to use 'like' cmd. */
            merchant_id[len-1] = oracle_wildcard;
            sprintf( sqltextvar.arr,
                    "%s merchant_id like '%s'",
                     sqltextvar.arr, merchant_id );
         }
         else
         {
            sprintf( sqltextvar.arr,
                    "%s merchant_id = '%s'",
                     sqltextvar.arr, merchant_id );
         }
      }
   }


   /* ----------- */
   /* TERMINAL ID */
   /* ----------- */

   len = strlen( terminal_id );
   if ( len > 0 )
   {
      if ( temp == 1 )
      {
         if ( terminal_id[len-1] == gui_wildcard )
         {
            /* Operator used wild card on terminal.  Need to use 'like' cmd. */
            terminal_id[len-1] = oracle_wildcard;
            sprintf( sqltextvar.arr,
                    "%s and terminal_id like '%s'",
                     sqltextvar.arr, terminal_id );
         }
         else
         {
            sprintf( sqltextvar.arr,
                    "%s and terminal_id = '%s'",
                     sqltextvar.arr, terminal_id );
         }
      }
      else
      {
         temp = 1;
         if ( terminal_id[len-1] == gui_wildcard )
         {
            /* Operator used wild card on terminal.  Need to use 'like' cmd. */
            terminal_id[len-1] = oracle_wildcard;
            sprintf( sqltextvar.arr,
                    "%s terminal_id like '%s'",
                     sqltextvar.arr, terminal_id );
         }
         else
         {
            sprintf( sqltextvar.arr,
                    "%s terminal_id = '%s'",
                     sqltextvar.arr, terminal_id );
         }
      }
   }


   /* ---------- */
   /* TIME RANGE */
   /* ---------- */

   if(time_hhmmss_start[0] != '\0' && date_yyyymmdd_start[0] != '\0')
   {
	  get_epoch_time_from_normal_date(date_yyyymmdd_start, time_hhmmss_start, &epoch_start_time);
	  get_epoch_time_from_normal_date(date_yyyymmdd_end,   time_hhmmss_end,   &epoch_finish_time);
	  
	  if ( temp == 1 )
	  {
		 sprintf( sqltextvar.arr,
				 "%s and tran_start_time >= '%s' and tran_finish_time <= '%s'",
				  sqltextvar.arr, epoch_start_time, epoch_finish_time );
	  }
	  else
	  {
		 temp = 1;
		 sprintf( sqltextvar.arr,
				 "%s tran_start_time >= '%s' and tran_finish_time <= '%s'",
				  sqltextvar.arr, epoch_start_time, epoch_finish_time );
	  }
   }
   /*if(time_hhmmss_start[0] != '\0')
   {
      if ( temp == 1 )
      {
         sprintf( sqltextvar.arr,
                 "%s and time_hhmmss >= '%s' and time_hhmmss <= '%s'",
                  sqltextvar.arr, time_hhmmss_start, time_hhmmss_end );
      }
      else
      {
         temp = 1;
         sprintf( sqltextvar.arr,
                 "%s time_hhmmss >= '%s' and time_hhmmss <= '%s'",
                  sqltextvar.arr, time_hhmmss_start, time_hhmmss_end );
      }
   }*/


   /* -------- */
   /* ORDER BY */
   /* -------- */

   sprintf( sqltextvar.arr,
           "%s ORDER BY transaction_id",
            sqltextvar.arr );

   sqltextvar.len = strlen(sqltextvar.arr);


   EXEC SQL PREPARE S FROM :sqltextvar;

   EXEC SQL DECLARE tlf01_cursor_lookup1 CURSOR FOR S;


   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN tlf01_cursor_lookup1;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE1 ; temp++ )
   {
   	  if ( db_error_statics_flag == true )
   	  {
     	 start_time = ptetime_get_time();
      }
   
      EXEC SQL FETCH tlf01_cursor_lookup1
      INTO :db_tlf01;
      
      if ( db_error_statics_flag == true )
   	  {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Repds, ST1:%d,ST2:%d,Data_Type : TLF01 ,Fun_Name : db_get_tlf01_gui_list_dynamic_new , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 	 }
   	  } 
   	  
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE tlf01_cursor_lookup1;

         memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In db_get_tlf01_gui_list_dynamic_new ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;
      }

	  db_to_tlf01(&Tlf01_Gui_List->tlf01_structure[temp]);
      itoa(temp + 1, Tlf01_Gui_List->num_returned, 10);
   }

   EXEC SQL CLOSE tlf01_cursor_lookup1;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   memset(er_buf,0x00,sizeof(er_buf));
   DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
   sprintf(er_buf,"In db_get_tlf01_gui_list_dynamic_new ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
   strcat(er_buf,ErrorMsg);
   Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
   return DB_rcode;

}

/*************************************************************************************/
/****************************************************************************/

BYTE db_get_ccf01_gui_list (pCCF01    Ccf01_ptr, 
                        pCCF01_REPORT_LIST Ccf01_Gui_List, 
                        pCHAR          ErrorMsg )
{
    EXEC SQL BEGIN DECLARE SECTION;
    char name [100] = "";
    char card_nbr [40] = "";
    char card_type [5] = "";
    char previous_name[100] = "";
	char previous_card_nbr [40]= "";

    int temp = 0;
	EXEC SQL END DECLARE SECTION;

   memset( Ccf01_Gui_List, 0, sizeof(CCF01_REPORT_LIST) );
   strcpy( Ccf01_Gui_List->num_returned,"0");
  
   strncpy( previous_card_nbr,	   Ccf01_ptr->primary_key.card_nbr,  sizeof(previous_card_nbr) );
   strncpy( card_type,	   Ccf01_ptr->primary_key.card_type, sizeof(card_type)     );
   strncpy( previous_name, Ccf01_ptr->name_dba,              sizeof(previous_name) );

   /* Address 1 is used to preserve the original search criteria.
    * Need to do this because Alpha Search requires a 'LIKE' command.
    */
	strncpy( card_nbr, previous_card_nbr, sizeof(card_nbr) );
   strncpy( name, Ccf01_ptr->address1, sizeof(name) );
   strcat ( name, "%" );


       EXEC SQL DECLARE ccf01_cursor CURSOR FOR
        SELECT card_nbr, card_type,  name_dba, address1, address2, city from ccf01
         WHERE  card_nbr >=  :previous_card_nbr 
		   AND   name_dba LIKE :name
           AND   name_dba >=   :previous_name
		   AND rownum between 1 and 21		   		   
		   ORDER BY  name_dba ,card_nbr ;

		EXEC SQL WHENEVER SQLERROR goto sql_error;
		EXEC SQL OPEN ccf01_cursor;

		EXEC SQL WHENEVER SQLERROR goto sql_error2;
		EXEC SQL WHENEVER NOTFOUND DO break;
  
   
	for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
	{
	   if ( db_error_statics_flag == true )
 	  {
     	 start_time = ptetime_get_time();
 	  }
	   memset(&db_ccf01_report, 0x00, sizeof(db_ccf01_report));
	   EXEC SQL FETCH ccf01_cursor
      INTO :db_ccf01_report;

      if ( db_error_statics_flag == true )
   	  {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Repds, ST1:%d,ST2:%d,Data_Type : CCF01 ,Fun_Name : db_get_ccf01_gui_list , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 	 }
   	  }
   	  
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE ccf01_cursor;

         memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In db_get_ccf01_gui_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;
      }

	   memcpy(Ccf01_Gui_List->ccf_info[temp].card_type,		db_ccf01_report.card_type.arr,	db_ccf01_report.card_type.len);
	   memcpy(Ccf01_Gui_List->ccf_info[temp].card_nbr,			db_ccf01_report.card_nbr.arr,	db_ccf01_report.card_nbr.len);
	   memcpy(Ccf01_Gui_List->ccf_info[temp].name_dba,			db_ccf01_report.name_dba.arr,			db_ccf01_report.name_dba.len);
	   memcpy(Ccf01_Gui_List->ccf_info[temp].address1,		db_ccf01_report.address1.arr,		db_ccf01_report.address1.len);
	   memcpy(Ccf01_Gui_List->ccf_info[temp].address2,		db_ccf01_report.address2.arr,		db_ccf01_report.address2.len);
	   memcpy(Ccf01_Gui_List->ccf_info[temp].city,			db_ccf01_report.city.arr,			db_ccf01_report.city.len);

      /* Prepare for next group */
	  memcpy(Ccf01_Gui_List->ccf_info[temp].card_nbr,db_ccf01_report.card_nbr.arr,db_ccf01_report.card_nbr.len);	     
	     
	  memcpy(Ccf01_Gui_List->ccf_info[temp].name_dba,db_ccf01_report.name_dba.arr,db_ccf01_report.name_dba.len);

      itoa(temp + 1, Ccf01_Gui_List->num_returned, 10);
   }

   

  EXEC SQL CLOSE ccf01_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	 sprintf(er_buf,"In db_get_ccf01_gui_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	 strcat(er_buf,ErrorMsg);
	 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	 return DB_rcode;
}


/****************************************************************************/
BYTE db_select_mra01 (  pCHAR          Primary_key, 
                        pMRA01         ptr_MRA01, 
                        pCHAR          ErrorMsg )
{
   memset( &db_mra01, 0, sizeof( db_mra01 ) );
   strncpy( pte_mra01.transaction_id, Primary_key, sizeof(pte_mra01.transaction_id) );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }

   EXEC SQL SELECT *
   INTO :db_mra01
   FROM mra01
   WHERE transaction_id = :pte_mra01.transaction_id;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Repds, ST1:%d,ST2:%d,Data_Type : MRA01 ,Fun_Name : db_select_mra01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
   		memset(ptr_MRA01,0x00,sizeof(MRA01));
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_mra01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   db_to_mra01 (ptr_MRA01);

   return PTEMSG_OK;
}


BYTE db_select_ptsn01(  pCHAR     Primary_key, 
                        pPTSN01   ptsn01_ptr, 
                        pCHAR     ErrorMsg )
{
   memset( &db_ptsn01, 0x00, sizeof(db_ptsn01) );
   memcpy( pte_ptsn01.transaction_id, Primary_key, sizeof(pte_ptsn01.transaction_id) );


   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }

   EXEC SQL SELECT *
   INTO :db_ptsn01
   FROM ptsn01
   WHERE transaction_id = :pte_ptsn01.transaction_id;
     
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Repds, ST1:%d,ST2:%d,Data_Type : FGUARD ,Fun_Name : db_select_fguard , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }   
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA && SQLCODE != TABLE_DOESNT_EXIST )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		sprintf(er_buf,"In  db_select_fguard,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_ptsn01( ptsn01_ptr );

   return PTEMSG_OK;
}

BYTE db_select_ftlf01(  pCHAR          Primary_key, 
                        pFTLF01        ptr_ftlf01, 
                        pCHAR          ErrorMsg )
{
   memset( &db_ftlf01, 0, sizeof( db_ftlf01 ) );
   strncpy( pte_ftlf01.tran_id, Primary_key, sizeof(pte_ftlf01.tran_id) );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }

   EXEC SQL SELECT *
   INTO :db_ftlf01
   FROM ftlf01
   WHERE tran_id = :pte_ftlf01.tran_id;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Repds, ST1:%d,ST2:%d,Data_Type : FTLF01 ,Fun_Name : db_select_ftlf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_FTLF01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
  db_to_ftlf01 (ptr_ftlf01);

   return PTEMSG_OK;
}
/*************************************************************************************/


/****************************************************************************/

BYTE db_get_paf01_gui_list (pPAF01    Paf01_ptr, 
                        pPAF01_REPORT_LIST Paf01_Gui_List, 
                        pCHAR          ErrorMsg )
{
    EXEC SQL BEGIN DECLARE SECTION;
    char name [40] = "";
    char primary_acct_nbr [40] = "";
    char previous_name[40] = "";
	char previous_primary_acct_nbr [40] ="";

    int temp = 0;
    EXEC SQL END DECLARE SECTION;

   memset( Paf01_Gui_List, 0, sizeof(PAF01_REPORT_LIST) );
   strcpy( Paf01_Gui_List->num_returned,"0");
   strncpy( previous_primary_acct_nbr,    Paf01_ptr->primary_key.primary_acct_nbr,sizeof(primary_acct_nbr) );
   strncpy( previous_name,       Paf01_ptr->name_dba,		sizeof(name) );

   /* Address 1 is used to preserve the original search criteria.
    * Need to do this because Alpha Search requires a 'LIKE' command.
    */
   strncpy(primary_acct_nbr,previous_primary_acct_nbr,sizeof(primary_acct_nbr) );
   strncpy( name, Paf01_ptr->address1, sizeof(name) );
   strcat ( name, "%" );

   EXEC SQL DECLARE paf01_cursor CURSOR FOR
         SELECT primary_acct_nbr,  name_dba, address1, address2, city from paf01
         WHERE  primary_acct_nbr >= : previous_primary_acct_nbr 
		   AND name_dba LIKE :name
           AND  name_dba >=   :previous_name
		   AND rownum between 1 and 21
			ORDER BY name_dba , primary_acct_nbr;

   
   EXEC SQL WHENEVER SQLERROR goto sql_error;
      EXEC SQL OPEN paf01_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
  		if ( db_error_statics_flag == true )
  	 	{
      		start_time = ptetime_get_time();
  		}
      memset(&db_paf01_report, 0x00, sizeof(db_paf01_report));
      EXEC SQL FETCH paf01_cursor
      INTO :db_paf01_report;
		
	   if ( db_error_statics_flag == true )
   	   {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	 	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Repds, ST1:%d,ST2:%d,Data_Type : PAF01 ,Fun_Name : db_get_paf01_gui_list , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 	 }
   	  }
   	  	
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE paf01_cursor;

         memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In db_get_paf01_gui_list ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;
      }

	   memcpy(Paf01_Gui_List->paf_info[temp].primary_acct_nbr,		db_paf01_report.primary_acct_nbr.arr,	db_paf01_report.primary_acct_nbr.len);
	   memcpy(Paf01_Gui_List->paf_info[temp].name_dba,			db_paf01_report.name_dba.arr,			db_paf01_report.name_dba.len);
	   memcpy(Paf01_Gui_List->paf_info[temp].address1,		db_paf01_report.address1.arr,		db_paf01_report.address1.len);
	   memcpy(Paf01_Gui_List->paf_info[temp].address2,		db_paf01_report.address2.arr,		db_paf01_report.address2.len);
	   memcpy(Paf01_Gui_List->paf_info[temp].city,			db_paf01_report.city.arr,			db_paf01_report.city.len);
 
       /* Prepare for next group */
       memcpy(Paf01_Gui_List->paf_info[temp].primary_acct_nbr,db_paf01_report.primary_acct_nbr.arr,	db_paf01_report.primary_acct_nbr.len);
	   memcpy(Paf01_Gui_List->paf_info[temp].name_dba,			db_paf01_report.name_dba.arr,			db_paf01_report.name_dba.len);
      itoa(temp + 1, Paf01_Gui_List->num_returned, 10);
   }

   EXEC SQL CLOSE paf01_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In db_get_paf01_gui_list ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
}

