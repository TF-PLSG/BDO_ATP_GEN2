/******************************************************************************
  
   Module:           fconds_database.pc
  
   Title:            FAI RT Server DB Routines
  
   Description:
   
   Application:      BDO FAI RT

   Authour:          Last modified by Phani

 
******************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#ifdef WIN32
#include <sqlproto.h>
#endif

#include <math.h>
#include <time.h>
#include <sys/timeb.h>

#include "basictyp.h"
#include "pte.h"
#include "pteipc.h"
#include "ptemsg.h"
#include "ptetimer.h"
#include "ntutils.h"
#include "app_info.h"
#include "dc_dbstruct.h"
#include "equitdb.h"
#include "dc_database.h"
#include "dbcommon.h"
#include "txutils.h"
#include "ptetime.h"
#include "memmnger.h"
#include "nc_dbstruct.h"
/* Function prototypes */
extern long Txutils_Calculate_Julian_Date(BYTE * );
extern void Txutils_Calculate_Gregorian_Date(LONG , pCHAR );
extern void genutil_format_date(pCHAR temp);

INT validate_date_yyyymmdd( pBYTE date_str);

/* Oracle error codes */
#define NULL_COLUMN_DATA -1405
#define NO_DATA_FOUND    1403

/*Merchant offset address in respective structure*/
#define DCF01_MERCHANT_ID_OFFSET      96
#define BCH01_MERCHANT_ID_OFFSET      16
#define BCH01_MP_MERCHANT_ID_OFFSET   16
#define BCH10_MERCHANT_ID_OFFSET      29
#define BCH11_MERCHANT_ID_OFFSET	  29
#define BCH20_MERCHANT_ID_OFFSET      29

/* For DB statics added by raghu */
extern BYTE DB_MsgSubtype2 ;
extern BYTE DB_MsgSubtype1 ;
char DB_Tmr_Lgng_Buf[512];
double start_time;
double end_time  ;
double duration  ; 
extern INT db_error_statics_flag;
extern double db_error_statics_value;
char er_buf[512];
BYTE DB_rcode;
extern CHAR  DB_Logging_Filename[256];
extern CHAR  DB_module_file_name[256];
extern CHAR  DB_file_path[256];
/* End   */



#ifdef _DEBUG
   #define PRINT( X ) printf( X )
#else
   #define PRINT( X )
#endif

extern CHAR AppName[];
SQL01 Sql01;
INT    rtnval;

/* Dynamic sql IA */
typedef char dynsql[100]; 
EXEC SQL TYPE dynsql IS STRING(80) REFERENCE;

EXEC SQL INCLUDE sqlca;

typedef struct
{
   WORD len;
   BYTE pin_data[100];
}RAWPINDATA;

EXEC SQL BEGIN DECLARE SECTION;

   /* error code variable */
   long    SQLCODE;
   long    SQL_CODE;

/**/
EXEC SQL TYPE RAWPINDATA is VARRAW(5000);
/* */
/*long = number, int = date*/


struct
{
	char transaction_id                      [21];
	char system_date                         [9];
	char transaction_send_time				 [18];
	char mracon_sender_name				     [7];
	char transaction_number				     [21];
	char future_1						 	 [51];
	char future_2						 	 [51];
	char future_3						 	 [51];
	char future_4						 	 [51];
	char future_5						 	 [51];
	char future_use_1						 [101];
	char future_use_2						 [101];
	char future_use_3						 [101];
	char future_use_4						 [101];
	char future_use_5						 [101];
	char date_yyyymmdd                         [9];
}pte_mra01;

struct
{
	varchar transaction_id                       [20];
	varchar system_date                          [8];
	varchar transaction_send_time				 [17];
	varchar mracon_sender_name				     [6];
	varchar transaction_number				     [20];
	varchar future_1						 	 [50];
	varchar future_2						 	 [50];
	varchar future_3						 	 [50];
	varchar future_4						 	 [50];
	varchar future_5						 	 [50];
	varchar future_use_1						 [100];
	varchar future_use_2						 [100];
	varchar future_use_3						 [100];
	varchar future_use_4						 [100];
	varchar future_use_5						 [100];
	varchar date_yyyymmdd                        [8];
}db_mra01;

struct
{
	char network_id    				[11];
	char fraud_control_enable_flag             	[2];
	char fraud_rule_enable_flag        	[2];
	char fai_threshold_time       	[11];
}pte_fclf01;

struct
{
	varchar network_id    				[10];
	varchar fraud_control_enable_flag             	[1];
	varchar fraud_rule_enable_flag        	[1];
	varchar fai_threshold_time       	[10];
}db_fclf01;

struct
{
	char fraud_rule			 [20];
	char card_brand          [11];
	char acq_country_code    [4];
	char billing_amt         [13];
	char pos_mode_1          [5];
	char pos_mode_2          [5];
	char pos_mode_3          [5];
	char mcc_1               [5];
	char mcc_2               [5];
	char mcc_3               [5];
}pte_frule01;

struct
{
	varchar fraud_rule			[19];
	varchar card_brand          [10];
	varchar acq_country_code    [3];
	varchar billing_amt         [12];
	varchar pos_mode_1          [4];
	varchar pos_mode_2          [4];
	varchar pos_mode_3          [4];
	varchar mcc_1               [4];
	varchar mcc_2               [4];
	varchar mcc_3               [4];
}db_frule01;

struct
{
	char tran_id      				[21];
	char sys_date                	[9];
	char card_brand              	[11];
	char handler_queue           	[11];
	char tran_req_sent_time      	[11];
	char tran_resp_recv_time     	[11];
	char tran_req_sent_mode    		[3];
	char tran_resp_recv_mode      	[3];
	char response_text           	[101];
	char decision_code_1_value   	[33];
	char decision_code_2_value   	[33];
	char decision_code_3_value   	[33];
	char decision_code_4_value   	[33];
	char decision_code_5_value   	[33];
	char decision_code_6_value   	[33];
	char decision_code_7_value   	[33];
	char decision_code_8_value   	[33];
	char decision_code_9_value  	[33];
	char decision_code_10_value  	[33];
	char future_field1				[13];
	char future_field2				[25];
	char future_field3				[37];
	char future_field4				[49];
	char future_field5				[61];
}pte_ftlf01;

struct
{
	varchar tran_id      				[20];
	varchar sys_date                	[8];
	varchar card_brand              	[10];
	varchar handler_queue           	[10];
	varchar tran_req_sent_time      	[10];
	varchar tran_resp_recv_time     	[10];
	varchar tran_req_sent_mode    		[2];
	varchar tran_resp_recv_mode      	[2];
	varchar response_text           	[100];
	varchar decision_code_1_value   	[32];
	varchar decision_code_2_value   	[32];
	varchar decision_code_3_value   	[32];
	varchar decision_code_4_value   	[32];
	varchar decision_code_5_value   	[32];
	varchar decision_code_6_value   	[32];
	varchar decision_code_7_value   	[32];
	varchar decision_code_8_value   	[32];
	varchar decision_code_9_value  		[32];
	varchar decision_code_10_value  	[32];
	varchar future_field1				[12];
	varchar future_field2				[24];
	varchar future_field3				[36];
	varchar future_field4				[48];
	varchar future_field5				[60];
}db_ftlf01;

EXEC SQL END DECLARE SECTION;

/*************************************************************************************/
/*************************************************************************************/
void fclf01_to_db(pFCLF01 fclf01_ptr)
{
	memcpy (&pte_fclf01, fclf01_ptr, sizeof(pte_fclf01));
}
/*************************************************************************************/
/*************************************************************************************/

void frule01_to_db(pFRULE01 frule01_ptr)
{
	memcpy (&pte_frule01, frule01_ptr, sizeof(pte_frule01));
}

/*************************************************************************************/
/*************************************************************************************/

void ftlf01_to_db(pFTLF01 ftlf01_ptr)
{
	memcpy (&pte_ftlf01, ftlf01_ptr, sizeof(pte_ftlf01));
}

/*************************************************************************************/
/*************************************************************************************/


void mra01_to_db(pMRA01 mra01_ptr  )
{
	memcpy(&pte_mra01, mra01_ptr, sizeof(pte_mra01));
}
void db_to_fclf01(pFCLF01 fclf01_ptr)
{
	memset(fclf01_ptr, 0, sizeof(FCLF01));
	memcpy(fclf01_ptr->network_id, 			db_fclf01.network_id.arr, 			db_fclf01.network_id.len);
	memcpy(fclf01_ptr->fraud_control_enable_flag, 		db_fclf01.fraud_control_enable_flag.arr, 		db_fclf01.fraud_control_enable_flag.len);
	memcpy(fclf01_ptr->fraud_rule_enable_flag, 	db_fclf01.fraud_rule_enable_flag.arr, 	db_fclf01.fraud_rule_enable_flag.len);
	memcpy(fclf01_ptr->fai_threshold_time, 	db_fclf01.fai_threshold_time.arr, 	db_fclf01.fai_threshold_time.len);
}
/*************************************************************************************/
/*************************************************************************************/
void db_to_frule01(pFRULE01 frule01_ptr)
{
	memset(frule01_ptr, 0, sizeof(FRULE01));
	memcpy(frule01_ptr->fraud_rule		 , db_frule01.fraud_rule.arr, 		db_frule01.fraud_rule.len);
	memcpy(frule01_ptr->card_brand       , db_frule01.card_brand.arr, 		db_frule01.card_brand.len);
	memcpy(frule01_ptr->acq_country_code , db_frule01.acq_country_code.arr, db_frule01.acq_country_code .len);
	memcpy(frule01_ptr->billing_amt      , db_frule01.billing_amt.arr, 		db_frule01.billing_amt.len);
	memcpy(frule01_ptr->pos_mode_1       , db_frule01.pos_mode_1.arr, 		db_frule01.pos_mode_1.len);
	memcpy(frule01_ptr->pos_mode_2       , db_frule01.pos_mode_2.arr, 		db_frule01.pos_mode_2.len);
	memcpy(frule01_ptr->pos_mode_3       , db_frule01.pos_mode_3.arr, 		db_frule01.pos_mode_3.len);
	memcpy(frule01_ptr->mcc_1            , db_frule01.mcc_1.arr, 			db_frule01.mcc_1.len);
	memcpy(frule01_ptr->mcc_2            , db_frule01.mcc_2.arr, 			db_frule01.mcc_2.len);
	memcpy(frule01_ptr->mcc_3            , db_frule01.mcc_3.arr, 			db_frule01.mcc_3.len);
}

/*************************************************************************************/
/*************************************************************************************/
void db_to_ftlf01(pFTLF01 ftlf01_ptr)
{
	memset(ftlf01_ptr, 0, sizeof(FTLF01));
	memcpy(ftlf01_ptr->tran_id		 	, db_ftlf01.tran_id.arr, 		db_ftlf01.tran_id.len);
	memcpy(ftlf01_ptr->sys_date			, db_ftlf01.sys_date.arr, 		db_ftlf01.sys_date.len);
	memcpy(ftlf01_ptr->card_brand       , db_ftlf01.card_brand.arr, 	db_ftlf01.card_brand.len);
	memcpy(ftlf01_ptr->handler_queue 	, db_ftlf01.handler_queue.arr, db_ftlf01.handler_queue .len);
	memcpy(ftlf01_ptr->tran_req_sent_time      	, db_ftlf01.tran_req_sent_time.arr, 		db_ftlf01.tran_req_sent_time.len);
	memcpy(ftlf01_ptr->tran_resp_recv_time      , db_ftlf01.tran_resp_recv_time.arr, 		db_ftlf01.tran_resp_recv_time.len);
	memcpy(ftlf01_ptr->tran_req_sent_mode       , db_ftlf01.tran_req_sent_mode.arr, 		db_ftlf01.tran_req_sent_mode.len);
	memcpy(ftlf01_ptr->tran_resp_recv_mode      , db_ftlf01.tran_resp_recv_mode.arr, 		db_ftlf01.tran_resp_recv_mode.len);
	memcpy(ftlf01_ptr->response_text            , db_ftlf01.response_text.arr, 			db_ftlf01.response_text.len);
	memcpy(ftlf01_ptr->decision_code_1_value            , db_ftlf01.decision_code_1_value.arr, 			db_ftlf01.decision_code_1_value.len);
	memcpy(ftlf01_ptr->decision_code_2_value            , db_ftlf01.decision_code_2_value.arr, 			db_ftlf01.decision_code_2_value.len);
	memcpy(ftlf01_ptr->decision_code_3_value            , db_ftlf01.decision_code_3_value.arr, 			db_ftlf01.decision_code_3_value.len);
	memcpy(ftlf01_ptr->decision_code_4_value            , db_ftlf01.decision_code_4_value.arr, 			db_ftlf01.decision_code_4_value.len);
	memcpy(ftlf01_ptr->decision_code_5_value            , db_ftlf01.decision_code_5_value.arr, 			db_ftlf01.decision_code_5_value.len);
	memcpy(ftlf01_ptr->decision_code_6_value            , db_ftlf01.decision_code_6_value.arr, 			db_ftlf01.decision_code_6_value.len);
	memcpy(ftlf01_ptr->decision_code_7_value            , db_ftlf01.decision_code_7_value.arr, 			db_ftlf01.decision_code_7_value.len);
	memcpy(ftlf01_ptr->decision_code_8_value            , db_ftlf01.decision_code_8_value.arr, 			db_ftlf01.decision_code_8_value.len);
	memcpy(ftlf01_ptr->decision_code_9_value            , db_ftlf01.decision_code_9_value.arr, 			db_ftlf01.decision_code_9_value.len);
	memcpy(ftlf01_ptr->decision_code_10_value           , db_ftlf01.decision_code_10_value.arr, 		db_ftlf01.decision_code_10_value.len);
	memcpy(ftlf01_ptr->future_field1            				, db_ftlf01.future_field1.arr, 			db_ftlf01.future_field1.len);
	memcpy(ftlf01_ptr->future_field2            				, db_ftlf01.future_field2.arr, 			db_ftlf01.future_field2.len);
	memcpy(ftlf01_ptr->future_field3            				, db_ftlf01.future_field3.arr, 			db_ftlf01.future_field3.len);
	memcpy(ftlf01_ptr->future_field4            				, db_ftlf01.future_field4.arr, 			db_ftlf01.future_field4.len);
	memcpy(ftlf01_ptr->future_field5            				, db_ftlf01.future_field5.arr, 			db_ftlf01.future_field5.len);
	
}


/******************************************************************************/
BYTE db_select_fclf01( pCHAR Primary_key, pFCLF01 fclf01_ptr, pCHAR ErrorMsg )
{

	memset( &db_fclf01, 0, sizeof( db_fclf01 ) );

	strncpy(pte_fclf01.network_id, Primary_key , sizeof(pte_fclf01.network_id));
	
	if ( db_error_statics_flag == true )
    {
    	start_time = ptetime_get_time();
    }

   EXEC SQL SELECT *
   INTO :db_fclf01
   FROM FCLF01
   WHERE network_id = :pte_fclf01.network_id ;

 	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Fconds, ST1:%d,ST2:%d ,Data_Type : FCLF01 ,Fun_Name : db_select_fclf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }

   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_fclf01 ,ST1 : %d, ST2 : %d  ",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_fclf01 (fclf01_ptr);

   return PTEMSG_OK;
}

/******************************************************************************/
BYTE db_select_frule01( pCHAR Primary_key, pFRULE01 frule01_ptr, pCHAR ErrorMsg )
{

	memset( &db_frule01, 0, sizeof( db_frule01 ) );

	strncpy(pte_frule01.fraud_rule, Primary_key , sizeof(pte_frule01.fraud_rule));
	
	if ( db_error_statics_flag == true )
    {
    	start_time = ptetime_get_time();
    }

   EXEC SQL SELECT *
   INTO :db_frule01
   FROM FRULE01
   WHERE fraud_rule = :pte_frule01.fraud_rule ;

 	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Fconds, ST1:%d,ST2:%d ,Data_Type : FRULE01 ,Fun_Name : db_select_frule01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }

   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_frule01 ,ST1 : %d, ST2 : %d  ",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_frule01 (frule01_ptr);

   return PTEMSG_OK;
}
/******************************************************************************/
BYTE db_select_mra01(pMRA01 mra01_ptr,pCHAR ErrorMsg )
{
	CHAR transaction_number[21] = {0};
	CHAR system_date[9]         = {0};
	CHAR time_date[25]          = {0};
	CHAR time_date_yyyymmdd[9]  = {0};
    memset( &db_mra01, 0x00, sizeof( db_mra01 ) );
    int len_system_date = 0;
    len_system_date = strlen(mra01_ptr->system_date);
    

    
   if ( db_error_statics_flag == true )
   {
   	 start_time = ptetime_get_time();
   }
   
   if(len_system_date == 0)
   {
   		    	/* Get system timestamp "YYYY-MM-DD-hh.mm.ss.jjj" */
		ptetime_get_timestamp( time_date );
		
		strncpy(time_date_yyyymmdd,time_date,4);
		strncat(time_date_yyyymmdd,time_date+5,2);
		strncat(time_date_yyyymmdd,time_date+8,2);
		time_date_yyyymmdd[9] = '\0';
		strncpy(pte_mra01.system_date,time_date_yyyymmdd,(sizeof( pte_mra01.system_date)-1));		
   }
   else
   {
   		strncpy(pte_mra01.system_date,mra01_ptr->system_date,(sizeof( pte_mra01.system_date)-1));
   }
      
   EXEC SQL SELECT system_date,transaction_number
   INTO :system_date,transaction_number
   FROM (SELECT * FROM MRA01 WHERE system_date =:pte_mra01.system_date
   							AND transaction_number > 0 ORDER BY transaction_number desc )
   WHERE rownum = 1;
   
   strncpy(mra01_ptr->transaction_number,transaction_number,strlen(transaction_number));
   strncpy(mra01_ptr->system_date,system_date,strlen(system_date));
 
   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BON01 ,Fun_Name : db_select_mra01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_select_mra01 ,ST1 :%d,ST2 : %d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_fclf01( pFCLF01 fclf01_ptr, pCHAR ErrorMsg)
{
   fclf01_to_db( fclf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM fclf01
   WHERE network_id = :pte_fclf01.network_id ;
   
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: fconds, ST1:%d,ST2:%d ,Data_Type : FCLF01 ,Fun_Name : db_delete_fclf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ))
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_fclf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_frule01( pFRULE01 frule01_ptr, pCHAR ErrorMsg)
{
   frule01_to_db( frule01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM frule01
   WHERE fraud_rule = :pte_frule01.fraud_rule ;
   
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();

      duration = end_time - start_time;

      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: fconds, ST1:%d,ST2:%d ,Data_Type : FRULE01 ,Fun_Name : db_delete_frule01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ))
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_delete_frule01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}


/**************/
INT isnum(pCHAR string)
{
   INT i;
   INT length;

   length = (INT)strlen(string);
   for (i = 0; i < length; i++)
   {
      if (!isdigit(string[i]))
        return(false);
   }
   return(true);
}
INT validate_date_yyyymmdd( pBYTE date_str)
{
   INT  ret_val = false;
   INT  imonth, iday, iyear;
   CHAR temp_month[3]="";
   CHAR temp_day[3]  ="";
   CHAR temp_year[5] ="";

   /* Validate date is numeric. */
   if ( (true == isnum(date_str)) && (8 == strlen(date_str)) )
   {
      /* Validate month */
      memcpy( temp_month, date_str+4, 2 );
      imonth = atoi(temp_month);
      if ( (1 <= imonth) && (imonth <= 12) )
      {
         /* Month is valid; check the day. */
         memcpy( temp_day, date_str+6, 2 );
         iday = atoi(temp_day);
         if ( (1 <= iday) && (iday <= 31) )
         {
            if ( iday == 31 )
            {
               if ( (imonth == 1) || (imonth == 3) || (imonth == 5) ||
                    (imonth == 7) || (imonth == 8) || (imonth == 10)||
                    (imonth == 12) )
               {
                  ret_val = true;
               }
            }
            else if ( (iday == 30) && (imonth != 2) )
            {
               ret_val = true;
            }
            else if ( (iday == 29) && (imonth == 2) )
            {
               /* This must be a leap year to be valid. */
               memcpy( temp_year, date_str, 4 );
               iyear = atoi(temp_year);
               if ( (iyear%4) == 0 )
                  ret_val = true;
               //else
               //   sprintf( err_buf, "Too many days for February (%s)",date_str);
            }
            else
               ret_val = true;

            /* Validate the year. */
            memcpy( temp_year, date_str, 4 );
            iyear = atoi(temp_year);
            if ( (iyear < 2000) || (iyear > 2200) )
            {
               ret_val = false;
              // sprintf( err_buf, "ERROR: Invalid date (%s). Bad Year",date_str);
            }
         }
         else
         {
            //sprintf( err_buf, "ERROR: Invalid date (%s). Bad Day.", date_str );
         }
      }
      else
      {
         //sprintf( err_buf, "ERROR: Invalid date (%s). Bad Month.", date_str );
      }
   }
   else
   {
     // sprintf( err_buf, "ERROR: Invalid date (%s).", date_str );
   }
   if ( true != ret_val )
      //strcat(  err_buf, " Must be in format YYYYMMDD." );

   return( ret_val );
}
/**************/
	void format_date(pCHAR temp)
	{
	   struct timeb   time_structure;   // Time for ftime
	   time_t long_time_since_1970;     // Number of seconds since 01/01/1970 A.D. 12:00 A.M.
	   struct tm *current_time;         // Current time structure
	   CHAR   temp1[4] = "0";
	
	   ftime(&time_structure);
	   long_time_since_1970 = time_structure.time;
	   current_time = localtime(&long_time_since_1970);
	   current_time->tm_mon++;
	   if (current_time->tm_year >= 70)
	      current_time->tm_year += 1900;
	   else
	      current_time->tm_year += 2000;
	   itoa(current_time->tm_year, temp, 10);
	   itoa(current_time->tm_mon, temp1 + 1, 10);
	   if (strlen(temp1) == 2)
	      memcpy(temp + 4, temp1, 2);
	   else
	      memcpy(temp + 4, temp1 + 1, 2);
	   memset(temp1, 0, sizeof(temp1));
	   temp1[0] = '0';
	   itoa(current_time->tm_mday, temp1 + 1, 10);
	   if (strlen(temp1) == 2)
	      memcpy(temp + 6, temp1, 2);
	   else
	      memcpy(temp + 6, temp1 + 1, 2);
	   memset(temp1, 0, sizeof(temp1));
	   temp1[0] = '0';
	   itoa(current_time->tm_hour, temp1 + 1, 10);
	   if (strlen(temp1) == 2)
	      memcpy(temp + 8, temp1, 2);
	   else
	      memcpy(temp + 8, temp1 + 1, 2);
	   memset(temp1, 0, sizeof(temp1));
	   temp1[0] = '0';
	   itoa(current_time->tm_min, temp1 + 1, 10);
	   if (strlen(temp1) == 2)
	      memcpy(temp + 10, temp1, 2);
	   else
	      memcpy(temp + 10, temp1 + 1, 2);
	   memset(temp1, 0, sizeof(temp1));
	   temp1[0] = '0';
	   itoa(current_time->tm_sec, temp1 + 1, 10);
	   if (strlen(temp1) == 2)
	      memcpy(temp + 12, temp1, 2);
	   else
	      memcpy(temp + 12, temp1 + 1, 2);
	   return;
	} 


/***************************************************************************/
BYTE db_insert_mra01( pMRA01 ptr_MRA01, pCHAR ErrorMsg)
{
   int txn_cnt = 0,len_system_date =0;
   char yyyymmdd[25] = {0};
   
   txn_cnt = atoi(ptr_MRA01->transaction_number);
   txn_cnt = txn_cnt + 1;
   sprintf(ptr_MRA01->transaction_number,"%09ld",txn_cnt);
   
   len_system_date = strlen(ptr_MRA01->system_date);
   if ( len_system_date != 8 || (validate_date_yyyymmdd(ptr_MRA01->system_date) == false) )
   {
      PRINT("Entered datecheck loop\n");
      memset( yyyymmdd, 0x00, sizeof(yyyymmdd) );
      format_date(yyyymmdd);
      strncpy(ptr_MRA01->system_date, yyyymmdd, sizeof(ptr_MRA01->system_date)-1);
      strncpy(ptr_MRA01->date_yyyymmdd, yyyymmdd, sizeof(ptr_MRA01->date_yyyymmdd)-1);
   }
   else
   {
   	  strncpy(ptr_MRA01->date_yyyymmdd,ptr_MRA01->system_date,len_system_date);
   }
   
   mra01_to_db( ptr_MRA01 );
   
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL INSERT INTO mra01
      ( transaction_id,system_date,transaction_send_time,mracon_sender_name,transaction_number,
      future_1,future_2,future_3,future_4,future_5,future_use_1,future_use_2,future_use_3,
      future_use_4,future_use_5,date_yyyymmdd
      )
   VALUES(:pte_mra01.transaction_id,:pte_mra01.system_date,:pte_mra01.transaction_send_time,
   		:pte_mra01.mracon_sender_name,:pte_mra01.transaction_number,:pte_mra01.future_1,
   		:pte_mra01.future_2,:pte_mra01.future_3,:pte_mra01.future_4,:pte_mra01.future_5,
   		:pte_mra01.future_use_1,:pte_mra01.future_use_2,:pte_mra01.future_use_3,
   		:pte_mra01.future_use_4,:pte_mra01.future_use_5,:pte_mra01.date_yyyymmdd
      );
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: fconds, ST1 :%d,ST2 : %d,Data_Type : MRA01 ,Fun_Name : db_insert_mra01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_insert_mra01 ,ST1 :%d,ST2 : %d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_fclf01( pFCLF01 fclf01_ptr, pCHAR ErrorMsg )
{
   fclf01_to_db( fclf01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_fclf01
      FROM   FCLF01
      WHERE  network_id = :pte_fclf01.network_id AND
             rownum     = 1
      For Update NOWAIT;
	
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Fconds, ST1:%d,ST2:%d ,Data_Type : FCLF01 ,Fun_Name : db_update_fclf01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_fclf01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Update Query */
   EXEC SQL UPDATE fclf01 
   SET 	network_id    		= :pte_fclf01.network_id,	
		fraud_control_enable_flag        = :pte_fclf01.fraud_control_enable_flag,   
		fraud_rule_enable_flag   = :pte_fclf01.fraud_rule_enable_flag,  
		fai_threshold_time  = :pte_fclf01.fai_threshold_time
   WHERE network_id = :pte_fclf01.network_id;
   
   	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Fconds, ST1:%d,ST2:%d ,Data_Type : FCLF01 ,Fun_Name : db_update_fclf01_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_fclf01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   return PTEMSG_OK;
}
/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_frule01( pFRULE01 frule01_ptr, pCHAR ErrorMsg )
{
   frule01_to_db( frule01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_frule01
      FROM   FRULE01
      WHERE  fraud_rule = :pte_frule01.fraud_rule AND
             rownum     = 1
      For Update NOWAIT;
	
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Fconds, ST1:%d,ST2:%d ,Data_Type : FRULE01 ,Fun_Name : db_update_frule01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_frule01 ,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;    
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Update Query */
   EXEC SQL UPDATE frule01 
   SET 	fraud_rule			=	:pte_frule01.fraud_rule,
		card_brand       	=	:pte_frule01.card_brand,
		acq_country_code 	=	:pte_frule01.acq_country_code,
		billing_amt      	=	:pte_frule01.billing_amt,
		pos_mode_1       	=	:pte_frule01.pos_mode_1,
		pos_mode_2       	=	:pte_frule01.pos_mode_2,
		pos_mode_3       	=	:pte_frule01.pos_mode_3,
		mcc_1            	=	:pte_frule01.mcc_1,
		mcc_2            	=	:pte_frule01.mcc_2,
		mcc_3            	=	:pte_frule01.mcc_3
   
   WHERE fraud_rule = :pte_frule01.fraud_rule;
   
   	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Fconds, ST1:%d,ST2:%d ,Data_Type : FCLF01 ,Fun_Name : db_update_frule01_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_frule01 ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_fclf01( pFCLF01 fclf01_ptr, pCHAR ErrorMsg )
{
	fclf01_to_db( fclf01_ptr );

	if ( db_error_statics_flag == true )
   	{
		start_time = ptetime_get_time();
   	}
   	
   	  EXEC SQL INSERT INTO fclf01
      (	network_id,    				
		fraud_control_enable_flag,             	
		fraud_rule_enable_flag,        	
		fai_threshold_time	      
      )               
   VALUES(  :pte_fclf01.network_id,    			
			:pte_fclf01.fraud_control_enable_flag,             
			:pte_fclf01.fraud_rule_enable_flag,        
			:pte_fclf01.fai_threshold_time);
			
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Fconds, ST1:%d,ST2:%d ,Data_Type : FCLF01 ,Fun_Name : db_insert_fclf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_fclf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}
/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_frule01( pFRULE01 frule01_ptr, pCHAR ErrorMsg )
{
	frule01_to_db( frule01_ptr );

	if ( db_error_statics_flag == true )
   	{
		start_time = ptetime_get_time();
   	}
   	
   	  EXEC SQL INSERT INTO frule01
      (	 fraud_rule, 		
		 card_brand,        
		 acq_country_code,  
		 billing_amt,       
		 pos_mode_1,        
		 pos_mode_2,        
		 pos_mode_3,        
		 mcc_1,             
		 mcc_2,             
		 mcc_3    
      )               
   	 VALUES(  :pte_frule01.fraud_rule,			
			:pte_frule01.card_brand,        
			:pte_frule01.acq_country_code,  
			:pte_frule01.billing_amt,       
			:pte_frule01.pos_mode_1,        
			:pte_frule01.pos_mode_2,        
			:pte_frule01.pos_mode_3,        
			:pte_frule01.mcc_1,             
			:pte_frule01.mcc_2,             
			:pte_frule01.mcc_3
			);
			
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Fconds, ST1:%d,ST2:%d ,Data_Type : FCLF01 ,Fun_Name : db_insert_frule01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_frule01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}
/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_ftlf01( pFTLF01 ftlf01_ptr, pCHAR ErrorMsg )
{
	ftlf01_to_db( ftlf01_ptr );

	if ( db_error_statics_flag == true )
   	{
		start_time = ptetime_get_time();
   	}
   	
   	  EXEC SQL INSERT INTO ftlf01
      (	 tran_id, 		
		 sys_date,        
		 card_brand,  
		 handler_queue,       
		 tran_req_sent_time,        
		 tran_resp_recv_time,        
		 tran_req_sent_mode,        
		 tran_resp_recv_mode,             
		 response_text,             
		 decision_code_1_value,
		 decision_code_2_value,
		 decision_code_3_value,
		 decision_code_4_value,
		 decision_code_5_value,
		 decision_code_6_value,
		 decision_code_7_value,
		 decision_code_8_value,
		 decision_code_9_value,
		 decision_code_10_value,
		 future_field1,
		 future_field2,
		 future_field3,
		 future_field4,
		 future_field5    
      )               
   	 VALUES(  :pte_ftlf01.tran_id,			
			:pte_ftlf01.sys_date,        
			:pte_ftlf01.card_brand,  
			:pte_ftlf01.handler_queue,       
			:pte_ftlf01.tran_req_sent_time,        
			:pte_ftlf01.tran_resp_recv_time,        
			:pte_ftlf01.tran_req_sent_mode,        
			:pte_ftlf01.tran_resp_recv_mode,             
			:pte_ftlf01.response_text,             
			:pte_ftlf01.decision_code_1_value,
			:pte_ftlf01.decision_code_2_value,
			:pte_ftlf01.decision_code_3_value,
			:pte_ftlf01.decision_code_4_value,
			:pte_ftlf01.decision_code_5_value,
			:pte_ftlf01.decision_code_6_value,
			:pte_ftlf01.decision_code_7_value,
			:pte_ftlf01.decision_code_8_value,
			:pte_ftlf01.decision_code_9_value,
			:pte_ftlf01.decision_code_10_value,
			:pte_ftlf01.future_field1,
			:pte_ftlf01.future_field2,
			:pte_ftlf01.future_field3,
			:pte_ftlf01.future_field4,
			:pte_ftlf01.future_field5
			);
			
	if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Fconds, ST1:%d,ST2:%d ,Data_Type : FTLF01 ,Fun_Name : db_insert_ftlf01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_ftlf01 ,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}
/*************************************************************************************/

/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_fclf01_gui_list( pFCLF01          fclf01_ptr,
                            pFCLF01_GUI_LIST Fclf01_List,
                            pCHAR             ErrorMsg )
{    
	EXEC SQL BEGIN DECLARE SECTION;
    char network_id[11];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Fclf01_List, 0, sizeof(FCLF01_GUI_LIST) );
   strcpy( Fclf01_List->num_returned,"0");
   strncpy( network_id, fclf01_ptr->network_id, sizeof(network_id) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DECLARE fclf01_cursor CURSOR FOR
      SELECT * from fclf01
      WHERE  (network_id >= :network_id)  OR
                  (network_id > :network_id)
	  ORDER BY network_id;
	  
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Fconds, ST1:%d,ST2:%d ,Data_Type : FCLF01 ,Fun_Name : db_get_fclf01_gui_list , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN fclf01_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
      memset(&db_fclf01, 0x00, sizeof(db_fclf01));
      
      if ( db_error_statics_flag == true )
   	  {
      	start_time = ptetime_get_time();
   	  }
      EXEC SQL FETCH fclf01_cursor
      INTO :db_fclf01;
      
      if ( db_error_statics_flag == true )
      {
      	end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Fconds, ST1:%d,ST2:%d ,Data_Type : FCLF01_CURSOR ,Fun_Name : db_get_fclf01_gui_list , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   	  }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA  )
      {
	         SQL_CODE = SQLCODE;
	         EXEC SQL CLOSE fclf01_cursor;
	         
			memset(er_buf,0x00,sizeof(er_buf));
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In db_get_fclf01_gui_list ,ST1:%d,ST2: %d_1",DB_MsgSubtype1,DB_MsgSubtype2);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
       }
      db_to_fclf01(&Fclf01_List->fclf01_list[temp]);
      sprintf( Fclf01_List->num_returned, "%d", (temp+1) );
   }

   EXEC SQL CLOSE fclf01_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_fclf01_gui_list,ST1:%d,ST2: %d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;

}
/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_frule01_gui_list( pFRULE01        frule01_ptr,
                            pFRULE01_GUI_LIST Frule01_List,
                            pCHAR             ErrorMsg )
{
	EXEC SQL BEGIN DECLARE SECTION;
    char fraud_rule[20];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Frule01_List, 0, sizeof(FRULE01_GUI_LIST) );
   strcpy( Frule01_List->num_returned,"0");
   strncpy( fraud_rule, frule01_ptr->fraud_rule, sizeof(fraud_rule) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DECLARE frule01_cursor CURSOR FOR
      SELECT * from frule01
      WHERE  (fraud_rule >= :fraud_rule)  OR
                  (fraud_rule > :fraud_rule);
	  
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Fconds, ST1:%d,ST2:%d ,Data_Type : FRULE01 ,Fun_Name : db_get_frule01_gui_list , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN frule01_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
      memset(&db_frule01, 0x00, sizeof(db_frule01));
      
      if ( db_error_statics_flag == true )
   	  {
      	start_time = ptetime_get_time();
   	  }
      EXEC SQL FETCH frule01_cursor
      INTO :db_frule01;
      
      if ( db_error_statics_flag == true )
      {
      	end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Fconds, ST1:%d,ST2:%d ,Data_Type : FRULE01_CURSOR ,Fun_Name : db_get_frule01_gui_list , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   	  }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA  )
      {
	         SQL_CODE = SQLCODE;
	         EXEC SQL CLOSE frule01_cursor;
	         
			memset(er_buf,0x00,sizeof(er_buf));
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In db_get_frule01_gui_list ,ST1:%d,ST2: %d_1",DB_MsgSubtype1,DB_MsgSubtype2);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
       }
      db_to_frule01(&Frule01_List->frule01_list[temp]);
      sprintf( Frule01_List->num_returned, "%d", (temp+1) );
   }

   EXEC SQL CLOSE frule01_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_frule01_gui_list,ST1:%d,ST2: %d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;

}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_frule01_gui_list_by_card_brand( pFRULE01        frule01_ptr,
                            pFRULE01_GUI_LIST Frule01_List,
                            pCHAR             ErrorMsg )
{
	EXEC SQL BEGIN DECLARE SECTION;
    char card_brand[11];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Frule01_List, 0, sizeof(FRULE01_GUI_LIST) );
   strcpy( Frule01_List->num_returned,"0");
   strncpy( card_brand, frule01_ptr->card_brand, sizeof(card_brand) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DECLARE frule01_cardbrand_cursor CURSOR FOR
      SELECT * from frule01
      WHERE  (card_brand = :card_brand) ;
	  
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Fconds, ST1:%d,ST2:%d ,Data_Type : FRULE01 ,Fun_Name : db_get_frule01_gui_list , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN frule01_cardbrand_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE1 ; temp++ )
   {
      memset(&db_frule01, 0x00, sizeof(db_frule01));
      
      if ( db_error_statics_flag == true )
   	  {
      	start_time = ptetime_get_time();
   	  }
      EXEC SQL FETCH frule01_cardbrand_cursor
      INTO :db_frule01;
      
      if ( db_error_statics_flag == true )
      {
      	end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Fconds, ST1:%d,ST2:%d ,Data_Type : FRULE01_CURSOR ,Fun_Name : db_get_frule01_gui_list , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   	  }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA  )
      {
	         SQL_CODE = SQLCODE;
	         EXEC SQL CLOSE frule01_cardbrand_cursor;
	         
			memset(er_buf,0x00,sizeof(er_buf));
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In db_get_frule01_gui_list ,ST1:%d,ST2: %d_1",DB_MsgSubtype1,DB_MsgSubtype2);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
       }
      db_to_frule01(&Frule01_List->frule01_list[temp]);
      sprintf( Frule01_List->num_returned, "%d", (temp+1) );
   }

   EXEC SQL CLOSE frule01_cardbrand_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_frule01_gui_list,ST1:%d,ST2: %d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;

}
