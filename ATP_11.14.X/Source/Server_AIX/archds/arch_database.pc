/******************************************************************************

   Module:           arch_database.pc

   Title:            Transaction Server Dataserver DB Routines

   Description:

   Application:      Equitable

   Revision History: 1.0

   $Log:   N:\POS\PVCS6.6\EPICPORTZ\PTE\Equitable\archds\arch_database.pc  $  

 

******************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#ifdef WIN32
#include <sqlproto.h>
#endif
#include <math.h>
#include <time.h>
#include <sys/timeb.h>

#include "basictyp.h"
#include "pte.h"
#include "pteipc.h"
#include "ptemsg.h"
#include "ptetimer.h"
#include "app_info.h"
#include "equitdb.h"
#include "dbcommon.h"
#include "util_dbstruct.h"
#include "dc_dbstruct.h"
#include "txutils.h"
#include "ptetime.h"
#include "arch_database.h"
#include "dc_database.h"
#include "ntutils.h"
#include "memmnger.h"

/* Oracle error codes */
#define NULL_COLUMN_DATA -1405
#define NO_DATA_FOUND    1403


#ifdef _DEBUG
   #define PRINT( X ) printf( X )
#else
   #define PRINT( X )
#endif

extern CHAR AppName[];
SQL01  Sql01;
INT    rtnval;

EXEC SQL BEGIN DECLARE SECTION;

   /* error code variable */
   long    SQLCODE;
   long    SQL_CODE;

/* For DB statics added by raghu */
extern BYTE DB_MsgSubtype2 ;
extern BYTE DB_MsgSubtype1 ;
char DB_Tmr_Lgng_Buf[512];
double start_time;
double end_time  ;
double duration  ; 
extern INT db_error_statics_flag;
extern double db_error_statics_value;
char er_buf[512];
BYTE DB_rcode;
extern CHAR  DB_Logging_Filename[256];
extern CHAR  DB_module_file_name[256];
extern CHAR  DB_file_path[256];
/* End   */


/* A structure copied from update_ds/update_db.pc */

struct
{
    char transaction_id                     [21]; 

    char entry_type                         ;
    char tpdu_id                            [16];
    char issuer_id                          [21];
    char acquirer_id                        [21];
    char tx_key                             ;
    char terminal_id                        [9];
    char terminal_type                      [3];
    char response_text                      [41];
    char card_num_len                       [3];
    char card_num                           [20];
    char exp_date                           [5];
    char total_amount                       [13];
    char add_amounts                        [25];
    char invoice_number                     [9];
    char orig_amount                        [13];
    char auth_number                        [7];
    char processing_code                    [7];
    char sys_trace_audit_num                [7];
    char orig_sys_trace_num                 [7];
    char pos_entry_mode                     [5];
    char nii                                [5];
    char pos_condition_code                 [3];
    char track1                             [77];
    char track2                             [38];
    char retrieval_ref_num                  [13];
    char orig_retrieval_ref_num             [13];
    char merchant_id                        [16];
    char orig_message                       [5];
    char settlement_total                   [17];
    char message_type                       [5];
    char card_holder_name                   [31];
    char general_status                     ;
    char originator_queue                   [17];
    char originator_info                    [33];
    char batch_number                       [7];
    char response_code                      [3];
    char date_yyyymmdd                      [9];
    char time_hhmmss                        [7];
    char num_sales                          [4];
    char sales_amount                       [13];
    char num_refunds                        [4];
    char refund_amount                      [13];
    char num_dbsales                        [4];
    char dbsales_amount                     [13];
    char num_dbrefunds                      [4];
    char dbrefund_amount                    [13];
    char pin_block                          [19];
    char tax_amount                         [13];
    char tip_amount                         [13];
    char tran_start_time                    [17];
    char host_start_time                    [17];
    char host_finish_time                   [17];
    char tran_finish_time                   [17];
    char settle_file_prefix                 [7];
    char resp_source_len                    [3];
    char visa_char_indicator                ;
    char visa_tran_id                       [16];
    char visa_validation_code               [5];
    char mcard_banknet_len                  [4];
    char mcard_banknet                      [51];
    char agent_id_len                       [4];
    char agent_id                           [12];
    char cvc                                ;
    char settlement_date                    [5];

    char category_code                      [5];
    char conversion_rate                    [10];
    char product_code                       [9];
    char odometer                           [8];
    char organization_id                    [5];
    char dynamic_keychange                  ;

   char source_key                         [49];
   char txn_cnt                            [4];
   char dcf01_retired_cwk                  [49];
   char dest_key                           [49];
   char ncf01_retired_cwk                  [49];
   char handler_queue                      [8];
   char authorizing_host_queue             [8];
   char max_net_consec_tmouts              [4];
   char max_active_txns                    [4];
   char forwarding_institution_id          [12];
   char remote_nsp_type                    [2];
   char kek                                [17]; 
   char acquiring_id                       [12];
   char outstanding_balance                [13]; 
   char credit_limit                       [13];
   char nfi_name                           [11];
   char nfi_seq_nbr                        [7];
   char nfi_start_date                     [9];
   char nfi_end_date                       [9];
   char resp_source                        [26];

   char origin                             [3];
   char auth_1                             [3];
   char auth_2                             [3];
   char update_mask                        [2];
   char type_of_data                       [3];
   char down_payment                       [13];
   char period                             [3];
   char interest_rate                      [5];
   char total_interest                     [13];
   char redemption_amount                  [13];
   char vehicle_number                     [9];

   char profile                                    [3];
   char nbr_of_prod_codes                          [3];
   
   char product1_code                              [7];
   char product1_quantity                          [3];
   char product1_amount                            [13];
   char product2_code                              [7];
   char product2_quantity                          [3];
   char product2_amount                            [13];
   char product3_code                              [7];
   char product3_quantity                          [3];
   char product3_amount                            [13];
   char product4_code                              [7];
   char product4_quantity                          [3];
   char product4_amount                            [13];
   char product5_code                              [7];
   char product5_quantity                          [3];
   char product5_amount                            [13];
   char product6_code                              [7];
   char product6_quantity                          [3];
   char product6_amount                            [13];
   char product7_code                              [7];
   char product7_quantity                          [3];
   char product7_amount                            [13];
   char product8_code                              [7];
   char product8_quantity                          [3];
   char product8_amount                            [13];
   char product9_code                              [7];
   char product9_quantity                          [3];
   char product9_amount                            [13];
   char product10_code                              [7];
   char product10_quantity                          [3];
   char product10_amount                            [13];
   char product11_code                              [7];
   char product11_quantity                          [3];
   char product11_amount                            [13];
   char product12_code                              [7];
   char product12_quantity                          [3];
   char product12_amount                            [13];
   char product13_code                              [7];
   char product13_quantity                          [3];
   char product13_amount                            [13];
   char product14_code                              [7];
   char product14_quantity                          [3];
   char product14_amount                            [13];
   char product15_code                              [7];
   char product15_quantity                          [3];
   char product15_amount                            [13];
   char product16_code                              [7];
   char product16_quantity                          [3];
   char product16_amount                            [13];
   char product17_code                              [7];
   char product17_quantity                          [3];
   char product17_amount                            [13];
   char product18_code                              [7];
   char product18_quantity                          [3];
   char product18_amount                            [13];
   char product19_code                              [7];
   char product19_quantity                          [3];
   char product19_amount                            [13];
   char product20_code                              [7];
   char product20_quantity                          [3];
   char product20_amount                            [13];
   char visa_merchant_id                            [16];
   char cash_bonus                                  [2];  /* added 01-29-99 by IG */
   char deferred_factor                             [8];  /* added 01-29-99 by IG */
   char deferred_term_length                        [4];  /* added 01-29-99 by IG */
   char currency_code                               [4];  /* added 01-29-99 by IG */
   char transmission_timestamp                      [11]; /* added 01-29-99 by IG */
   char tran_fee_amount                             [9];  /* added 01-29-99 by IG */
   char cvc_data                                    [4];  /* added 01-29-99 by IG */

   char verify_mag_stripe                           [2];  /* added 02-09-99 by IG */
   char saf                                         [2];  /* added 02-09-99 by IG */
   char security_response_code                      [3];  /* added 02-09-99 by IG */
   char service_code                                [4];  /* added 02-09-99 by IG */
   char source_pin_format                           [3];  /* added 02-09-99 by IG */
   char dest_pin_format                             [3];  /* added 02-09-99 by IG */
   char voice_auth                                  [2];  /* added 02-09-99 by IG */
   char actual_amount                               [13]; /* AP IG, Equitable 02-10-99 */
   char reversal_amount                             [13]; /* AP IG, Equitable 02-10-99 */
   char voice_auth_text                             [241]; /* IG 02-22-99 */ 
   char operator_id                                 [21];  /* IA 03-09-99 */
   char workstation                                 [21];  /* IA 03-16-99 */
   char orig_auth_number                            [7];   /* IA 04-08-99 */
   char ticket_nbr									[16];
   char system_date									[9];
   char def_gross_amt                               [13];
   char monthly_amort_amt                           [13];
   char purge										  [9];

}pte_archive_tlf01;

struct
{
    varchar transaction_id                     [21]; 

    varchar entry_type                         [1];
    varchar tpdu_id                            [16];
    varchar issuer_id                          [21];
    varchar acquirer_id                        [21];
    varchar tx_key                             [1];
    varchar terminal_id                        [9];
    varchar terminal_type                      [3];
    varchar response_text                      [41];
    varchar card_num_len                       [3];
    varchar card_num                           [20];
    varchar exp_date                           [5];
    varchar total_amount                       [13];
    varchar add_amounts                        [25];
    varchar invoice_number                     [9];
    varchar orig_amount                        [13];
    varchar auth_number                        [7];
    varchar processing_code                    [7];
    varchar sys_trace_audit_num                [7];
    varchar orig_sys_trace_num                 [7];
    varchar pos_entry_mode                     [5];
    varchar nii                                [5];
    varchar pos_condition_code                 [3];
    varchar track1                             [77];
    varchar track2                             [38];
    varchar retrieval_ref_num                  [13];
    varchar orig_retrieval_ref_num             [13];
    varchar merchant_id                        [16];
    varchar orig_message                       [5];
    varchar settlement_total                   [17];
    varchar message_type                       [5];
    varchar card_holder_name                   [31];
    varchar general_status                     [1];
    varchar originator_queue                   [17];
    varchar originator_info                    [33];
    varchar batch_number                       [7];
    varchar response_code                      [3];
    varchar date_yyyymmdd                      [10];
    varchar time_hhmmss                        [7];
    varchar num_sales                          [4];
    varchar sales_amount                       [13];
    varchar num_refunds                        [4];
    varchar refund_amount                      [13];
    varchar num_dbsales                        [4];
    varchar dbsales_amount                     [13];
    varchar num_dbrefunds                      [4];
    varchar dbrefund_amount                    [13];
    varchar pin_block                          [19];
    varchar tax_amount                         [13];
    varchar tip_amount                         [13];
    varchar tran_start_time                    [17];
    varchar host_start_time                    [17];
    varchar host_finish_time                   [17];
    varchar tran_finish_time                   [17];
    varchar settle_file_prefix                 [7];
    varchar resp_source_len                    [3];
    varchar visa_char_indicator                [1];
    varchar visa_tran_id                       [16];
    varchar visa_validation_code               [5];
    varchar mcard_banknet_len                  [4];
    varchar mcard_banknet                      [51];
    varchar agent_id_len                       [4];
    varchar agent_id                           [12];
    varchar cvc                                [1];
    varchar settlement_date                    [5];

    varchar category_code                      [5];
    varchar conversion_rate                    [10];
    varchar product_code                       [9];
    varchar odometer                           [8];
    varchar organization_id                    [5];
    varchar dynamic_keychange                  [1];

   varchar source_key                         [49];
   varchar txn_cnt                            [4];
   varchar dcf01_retired_cwk                  [49];
   varchar dest_key                           [49];
   varchar ncf01_retired_cwk                  [49];
   varchar handler_queue                      [8];
   varchar authorizing_host_queue             [8];
   varchar max_net_consec_tmouts              [4];
   varchar max_active_txns                    [4];
   varchar forwarding_institution_id          [12];
   varchar remote_nsp_type                    [2];
   varchar kek                                [17];
   varchar acquiring_id                       [12];
   varchar outstanding_balance                [13];
   varchar credit_limit                       [13];
   varchar nfi_name                           [11];
   varchar nfi_seq_nbr                        [7];
   varchar nfi_start_date                     [9];
   varchar nfi_end_date                       [9];
   varchar resp_source                        [26];
   varchar origin                             [3];
   varchar auth_1                             [3];
   varchar auth_2                             [3];
   varchar update_mask                        [2];
   varchar type_of_data                       [3];
   varchar down_payment                       [13];
   varchar period                             [3];
   varchar interest_rate                      [5];
   varchar total_interest                     [13];
   varchar redemption_amount                  [13];
   varchar vehicle_number                     [9];

   varchar profile                                    [3];
   varchar nbr_of_prod_codes                          [3];
   
   varchar product1_code                              [7];
   varchar product1_quantity                          [3];
   varchar product1_amount                            [13];
   varchar product2_code                              [7];
   varchar product2_quantity                          [3];
   varchar product2_amount                            [13];
   varchar product3_code                              [7];
   varchar product3_quantity                          [3];
   varchar product3_amount                            [13];
   varchar product4_code                              [7];
   varchar product4_quantity                          [3];
   varchar product4_amount                            [13];
   varchar product5_code                              [7];
   varchar product5_quantity                          [3];
   varchar product5_amount                            [13];
   varchar product6_code                              [7];
   varchar product6_quantity                          [3];
   varchar product6_amount                            [13];
   varchar product7_code                              [7];
   varchar product7_quantity                          [3];
   varchar product7_amount                            [13];
   varchar product8_code                              [7];
   varchar product8_quantity                          [3];
   varchar product8_amount                            [13];
   varchar product9_code                              [7];
   varchar product9_quantity                          [3];
   varchar product9_amount                            [13];
   varchar product10_code                              [7];
   varchar product10_quantity                          [3];
   varchar product10_amount                            [13];
   varchar product11_code                              [7];
   varchar product11_quantity                          [3];
   varchar product11_amount                            [13];
   varchar product12_code                              [7];
   varchar product12_quantity                          [3];
   varchar product12_amount                            [13];
   varchar product13_code                              [7];
   varchar product13_quantity                          [3];
   varchar product13_amount                            [13];
   varchar product14_code                              [7];
   varchar product14_quantity                          [3];
   varchar product14_amount                            [13];
   varchar product15_code                              [7];
   varchar product15_quantity                          [3];
   varchar product15_amount                            [13];
   varchar product16_code                              [7];
   varchar product16_quantity                          [3];
   varchar product16_amount                            [13];
   varchar product17_code                              [7];
   varchar product17_quantity                          [3];
   varchar product17_amount                            [13];
   varchar product18_code                              [7];
   varchar product18_quantity                          [3];
   varchar product18_amount                            [13];
   varchar product19_code                              [7];
   varchar product19_quantity                          [3];
   varchar product19_amount                            [13];
   varchar product20_code                              [7];
   varchar product20_quantity                          [3];
   varchar product20_amount                            [13];
   varchar visa_merchant_id                            [16];
   varchar cash_bonus                                  [2];  /* added 01-29-99 by IG */
   varchar deferred_factor                             [8];  /* added 01-29-99 by IG */
   varchar deferred_term_length                        [4];  /* added 01-29-99 by IG */
   varchar currency_code                               [4];  /* added 01-29-99 by IG */
   varchar transmission_timestamp                      [11]; /* added 01-29-99 by IG */
   varchar tran_fee_amount                             [9];  /* added 01-29-99 by IG */
   varchar cvc_data                                    [4];  /* added 01-29-99 by IG */
   varchar verify_mag_stripe                           [2];  /* added 02-09-99 by IG */
   varchar saf                                         [2];  /* added 02-09-99 by IG */
   varchar security_response_code                      [3];  /* added 02-09-99 by IG */
   varchar service_code                                [4];  /* added 02-09-99 by IG */
   varchar source_pin_format                           [3];  /* added 02-09-99 by IG */
   varchar dest_pin_format                             [3];  /* added 02-09-99 by IG */
   varchar voice_auth                                  [2];  /* added 02-09-99 by IG */
   varchar actual_amount                               [13]; /* AP IG, Equitable 02-10-99 */
   varchar reversal_amount                             [13]; /* AP IG, Equitable 02-10-99 */
   varchar voice_auth_text                             [241]; /* IG 02-22-99 */
   varchar operator_id                                 [21];  /* IA 03-09-99 */
   varchar workstation                                 [21];  /* IA 03-16-99 */
   varchar orig_auth_number                            [7];   /* IA 04-08-99 */
   varchar ticket_nbr							       [16];
   varchar system_date							       [9];
   varchar def_gross_amt                               [13];
   varchar monthly_amort_amt                           [13];
   varchar purge_date					  [9];

}db_tlf01;

/* A structure copied from update_ds/update_db.pc */
typedef struct
{
   unsigned short len;
   unsigned char  pin_data[300];

}RAWEMVDATA;

EXEC SQL TYPE RAWEMVDATA is VARRAW(5000);

struct
{
      char       tran_id[21];   
      char       len[4];
      char       sys_date[9];
      RAWEMVDATA emvblock;
}
db_emv_raw;


struct
{
   char  device_id                                 [9];
   char  batch_nbr                                 [7];
 
   char  merchant_id                               [16];
   char  total_credit_cnt                          [5];
   char  total_credit_amt                          [13];
   char  total_credit_refund_cnt                   [5];
   char  total_credit_refund_amt                   [13];
   char  total_debit_cnt                           [5];
   char  total_debit_amt                           [13];
   char  total_debit_refund_cnt                    [5];
   char  total_debit_refund_amt                    [13];
   char  total_void_credit_cnt                     [5];
   char  total_void_credit_amt                     [13];
   char  total_void_credit_refund_cnt              [5];
   char  total_void_credit_refund_amt              [13];
   char  open_date                                 [10];
   char  open_time                                 [7];
   char  release_date                              [10];
   char  release_time                              [7];
   char  batch_status                              [2];      /*R-released;C-closed;A-active*/
   char  visa_merchant_id                          [16];
   char  purge_date								   [9];

}pte_archive_bch01;

struct
{
   varchar  device_id                                 [9];
   varchar  batch_nbr                                 [7];

   varchar  merchant_id                               [16];
   varchar  total_credit_cnt                          [5];
   varchar  total_credit_amt                          [13];
   varchar  total_credit_refund_cnt                   [5];
   varchar  total_credit_refund_amt                   [13];
   varchar  total_debit_cnt                           [5];
   varchar  total_debit_amt                           [13];
   varchar  total_debit_refund_cnt                    [5];
   varchar  total_debit_refund_amt                    [13];
   varchar  total_void_credit_cnt                     [5];
   varchar  total_void_credit_amt                     [13];
   varchar  total_void_credit_refund_cnt              [5];
   varchar  total_void_credit_refund_amt              [13];
   varchar  open_date                                 [10];
   varchar  open_time                                 [7];
   varchar  release_date                              [10];
   varchar  release_time                              [7];
   varchar  batch_status                              [2];      /*R-released;C-closed;A-active*/
   varchar  visa_merchant_id                          [16];
   varchar  purge_date								   [9];
}db_bch01;

struct
{
   char  device_id                                 [9];
   char  batch_nbr                                 [7];
   char  retrieval_ref_num                         [13];

   char  merchant_id                               [16];
   char  processing_code                           [7];
   char  tran_amount                               [13];
   char  response_code                             [3];
   char  auth_number                               [7];
   char  tran_date                                 [9];
   char  tran_time                                 [7];
   char  transaction_id                            [21];
   char  message_type                              [5];
   char  card_nbr                                  [20];
   char  invoice_nbr                               [9];
   char  settle_file_prefix                        [7];
   char  product_code                              [9];
   char  odometer                                  [8];
   char  sys_trace_audit_num                       [7];
   char  tx_key                                    ;
   char  bin_type                                  ;
   char type_of_data                               [3];
   char down_payment                               [13];
   char period                                     [3];
   char interest_rate                              [5];
   char total_interest                             [13];
   char redemption_amount                          [13];
   char vehicle_number                             [9];
   char pos_entry_mode                             [5];
   char profile                                    [3];
   char nbr_of_prod_codes                          [3];
   
   char product1_code                              [7];
   char product1_quantity                          [3];
   char product1_amount                            [13];
   char product2_code                              [7];
   char product2_quantity                          [3];
   char product2_amount                            [13];
   char product3_code                              [7];
   char product3_quantity                          [3];
   char product3_amount                            [13];
   char product4_code                              [7];
   char product4_quantity                          [3];
   char product4_amount                            [13];
   char product5_code                              [7];
   char product5_quantity                          [3];
   char product5_amount                            [13];
   char product6_code                              [7];
   char product6_quantity                          [3];
   char product6_amount                            [13];
   char product7_code                              [7];
   char product7_quantity                          [3];
   char product7_amount                            [13];
   char product8_code                              [7];
   char product8_quantity                          [3];
   char product8_amount                            [13];
   char product9_code                              [7];
   char product9_quantity                          [3];
   char product9_amount                            [13];
   char product10_code                              [7];
   char product10_quantity                          [3];
   char product10_amount                            [13];
   char product11_code                              [7];
   char product11_quantity                          [3];
   char product11_amount                            [13];
   char product12_code                              [7];
   char product12_quantity                          [3];
   char product12_amount                            [13];
   char product13_code                              [7];
   char product13_quantity                          [3];
   char product13_amount                            [13];
   char product14_code                              [7];
   char product14_quantity                          [3];
   char product14_amount                            [13];
   char product15_code                              [7];
   char product15_quantity                          [3];
   char product15_amount                            [13];
   char product16_code                              [7];
   char product16_quantity                          [3];
   char product16_amount                            [13];
   char product17_code                              [7];
   char product17_quantity                          [3];
   char product17_amount                            [13];
   char product18_code                              [7];
   char product18_quantity                          [3];
   char product18_amount                            [13];
   char product19_code                              [7];
   char product19_quantity                          [3];
   char product19_amount                            [13];
   char product20_code                              [7];
   char product20_quantity                          [3];
   char product20_amount                            [13];
   char aportionment_flag                           [2];
   char exp_date                                    [5];
   char open_date                                   [10];
   char open_time                                   [7];
   char cash_bonus                                  [2];
   char transmission_timestamp                      [11];
   char mcard_banknet                               [51];
   char ticket_nbr                                  [16];
   char def_gross_amt                               [13];
   char term                                        [4];
   char purge_date									[9];
}pte_archive_bch10;

struct
{
   varchar  device_id                                 [9];
   varchar  batch_nbr                                 [7];
   varchar  retrieval_ref_num                         [13];

   varchar  merchant_id                               [16];
   varchar  processing_code                           [7];
   varchar  tran_amount                               [13];
   varchar  response_code                             [3];
   varchar  auth_number                               [7];
   varchar  tran_date                                 [9];
   varchar  tran_time                                 [7];
   varchar  transaction_id                            [21];
   varchar  message_type                              [5];
   varchar  card_nbr                                  [20];
   varchar  invoice_nbr                               [9];
   varchar  settle_file_prefix                        [7];
   varchar  product_code                              [9];
   varchar  odometer                                  [8];
   varchar  sys_trace_audit_num                       [7];
   varchar  tx_key                                    [1];
   varchar  bin_type                                  [1];
   varchar type_of_data                               [3];
   varchar down_payment                               [13];
   varchar period                                     [3];
   varchar interest_rate                              [5];
   varchar total_interest                             [13];
   varchar redemption_amount                          [13];
   varchar vehicle_number                             [9];
   varchar pos_entry_mode                             [5];
   varchar profile                                    [3];
   varchar nbr_of_prod_codes                          [3];
   
   varchar product1_code                              [7];
   varchar product1_quantity                          [3];
   varchar product1_amount                            [13];
   varchar product2_code                              [7];
   varchar product2_quantity                          [3];
   varchar product2_amount                            [13];
   varchar product3_code                              [7];
   varchar product3_quantity                          [3];
   varchar product3_amount                            [13];
   varchar product4_code                              [7];
   varchar product4_quantity                          [3];
   varchar product4_amount                            [13];
   varchar product5_code                              [7];
   varchar product5_quantity                          [3];
   varchar product5_amount                            [13];
   varchar product6_code                              [7];
   varchar product6_quantity                          [3];
   varchar product6_amount                            [13];
   varchar product7_code                              [7];
   varchar product7_quantity                          [3];
   varchar product7_amount                            [13];
   varchar product8_code                              [7];
   varchar product8_quantity                          [3];
   varchar product8_amount                            [13];
   varchar product9_code                              [7];
   varchar product9_quantity                          [3];
   varchar product9_amount                            [13];
   varchar product10_code                              [7];
   varchar product10_quantity                          [3];
   varchar product10_amount                            [13];
   varchar product11_code                              [7];
   varchar product11_quantity                          [3];
   varchar product11_amount                            [13];
   varchar product12_code                              [7];
   varchar product12_quantity                          [3];
   varchar product12_amount                            [13];
   varchar product13_code                              [7];
   varchar product13_quantity                          [3];
   varchar product13_amount                            [13];
   varchar product14_code                              [7];
   varchar product14_quantity                          [3];
   varchar product14_amount                            [13];
   varchar product15_code                              [7];
   varchar product15_quantity                          [3];
   varchar product15_amount                            [13];
   varchar product16_code                              [7];
   varchar product16_quantity                          [3];
   varchar product16_amount                            [13];
   varchar product17_code                              [7];
   varchar product17_quantity                          [3];
   varchar product17_amount                            [13];
   varchar product18_code                              [7];
   varchar product18_quantity                          [3];
   varchar product18_amount                            [13];
   varchar product19_code                              [7];
   varchar product19_quantity                          [3];
   varchar product19_amount                            [13];
   varchar product20_code                              [7];
   varchar product20_quantity                          [3];
   varchar product20_amount                            [13];

   varchar aportionment_flag                           [2];
   varchar exp_date                                    [5];
   varchar open_date                                   [10];
   varchar open_time                                   [7];
   varchar cash_bonus                                  [2];
   varchar transmission_timestamp                      [11];
   varchar mcard_banknet                               [51];
   varchar ticket_nbr                                  [16];
   varchar def_gross_amt                               [13];
   varchar term                                        [4];
   varchar purge_date									[9];

}db_bch10;


struct
{
   char  device_id                                 [9];
   char  batch_nbr                                 [7];
   char  retrieval_ref_num                         [13];

   char  merchant_id                               [16];
   char  processing_code                           [7];
   char  tran_amount                               [13];
   char  response_code                             [3];
   char  auth_number                               [7];
   char  tran_date                                 [9];
   char  tran_time                                 [7];
   char  transaction_id                            [21];
   char  message_type                              [5];
   char  card_nbr                                  [20];
   char  invoice_nbr                               [9];
   char  settle_file_prefix                        [7];
   char  product_code                              [9];
   char  odometer                                  [8];
   char  sys_trace_audit_num                       [7];
   char  tx_key                                    ;
   char  bin_type                                  ;
   char type_of_data                               [3];
   char down_payment                               [13];
   char period                                     [3];
   char interest_rate                              [5];
   char total_interest                             [13];
   char redemption_amount                          [13];
   char vehicle_number                             [9];
   char pos_entry_mode                             [5];
   char profile                                    [3];
   char nbr_of_prod_codes                          [3];
   
   char product1_code                              [7];
   char product1_quantity                          [3];
   char product1_amount                            [13];
   char product2_code                              [7];
   char product2_quantity                          [3];
   char product2_amount                            [13];
   char product3_code                              [7];
   char product3_quantity                          [3];
   char product3_amount                            [13];
   char product4_code                              [7];
   char product4_quantity                          [3];
   char product4_amount                            [13];
   char product5_code                              [7];
   char product5_quantity                          [3];
   char product5_amount                            [13];
   char product6_code                              [7];
   char product6_quantity                          [3];
   char product6_amount                            [13];
   char product7_code                              [7];
   char product7_quantity                          [3];
   char product7_amount                            [13];
   char product8_code                              [7];
   char product8_quantity                          [3];
   char product8_amount                            [13];
   char product9_code                              [7];
   char product9_quantity                          [3];
   char product9_amount                            [13];
   char product10_code                              [7];
   char product10_quantity                          [3];
   char product10_amount                            [13];
   char product11_code                              [7];
   char product11_quantity                          [3];
   char product11_amount                            [13];
   char product12_code                              [7];
   char product12_quantity                          [3];
   char product12_amount                            [13];
   char product13_code                              [7];
   char product13_quantity                          [3];
   char product13_amount                            [13];
   char product14_code                              [7];
   char product14_quantity                          [3];
   char product14_amount                            [13];
   char product15_code                              [7];
   char product15_quantity                          [3];
   char product15_amount                            [13];
   char product16_code                              [7];
   char product16_quantity                          [3];
   char product16_amount                            [13];
   char product17_code                              [7];
   char product17_quantity                          [3];
   char product17_amount                            [13];
   char product18_code                              [7];
   char product18_quantity                          [3];
   char product18_amount                            [13];
   char product19_code                              [7];
   char product19_quantity                          [3];
   char product19_amount                            [13];
   char product20_code                              [7];
   char product20_quantity                          [3];
   char product20_amount                            [13];
   char aportionment_flag                           [2];
   char exp_date                                    [5];
   char open_date                                   [10];
   char open_time                                   [7];
   char cash_bonus                                  [2];
   char transmission_timestamp                      [11];
   char mcard_banknet                               [51];
   char ticket_nbr                                  [16];
   char def_gross_amt                               [13];
   char term                                        [4];
   char purge_date				    [9];
}pte_archive_bch11;

struct
{
   varchar  device_id                                 [9];
   varchar  batch_nbr                                 [7];
   varchar  retrieval_ref_num                         [13];

   varchar  merchant_id                               [16];
   varchar  processing_code                           [7];
   varchar  tran_amount                               [13];
   varchar  response_code                             [3];
   varchar  auth_number                               [7];
   varchar  tran_date                                 [9];
   varchar  tran_time                                 [7];
   varchar  transaction_id                            [21];
   varchar  message_type                              [5];
   varchar  card_nbr                                  [20];
   varchar  invoice_nbr                               [9];
   varchar  settle_file_prefix                        [7];
   varchar  product_code                              [9];
   varchar  odometer                                  [8];
   varchar  sys_trace_audit_num                       [7];
   varchar  tx_key                                    [1];
   varchar  bin_type                                  [1];
   varchar type_of_data                               [3];
   varchar down_payment                               [13];
   varchar period                                     [3];
   varchar interest_rate                              [5];
   varchar total_interest                             [13];
   varchar redemption_amount                          [13];
   varchar vehicle_number                             [9];
   varchar pos_entry_mode                             [5];
   varchar profile                                    [3];
   varchar nbr_of_prod_codes                          [3];
   
   varchar product1_code                              [7];
   varchar product1_quantity                          [3];
   varchar product1_amount                            [13];
   varchar product2_code                              [7];
   varchar product2_quantity                          [3];
   varchar product2_amount                            [13];
   varchar product3_code                              [7];
   varchar product3_quantity                          [3];
   varchar product3_amount                            [13];
   varchar product4_code                              [7];
   varchar product4_quantity                          [3];
   varchar product4_amount                            [13];
   varchar product5_code                              [7];
   varchar product5_quantity                          [3];
   varchar product5_amount                            [13];
   varchar product6_code                              [7];
   varchar product6_quantity                          [3];
   varchar product6_amount                            [13];
   varchar product7_code                              [7];
   varchar product7_quantity                          [3];
   varchar product7_amount                            [13];
   varchar product8_code                              [7];
   varchar product8_quantity                          [3];
   varchar product8_amount                            [13];
   varchar product9_code                              [7];
   varchar product9_quantity                          [3];
   varchar product9_amount                            [13];
   varchar product10_code                              [7];
   varchar product10_quantity                          [3];
   varchar product10_amount                            [13];
   varchar product11_code                              [7];
   varchar product11_quantity                          [3];
   varchar product11_amount                            [13];
   varchar product12_code                              [7];
   varchar product12_quantity                          [3];
   varchar product12_amount                            [13];
   varchar product13_code                              [7];
   varchar product13_quantity                          [3];
   varchar product13_amount                            [13];
   varchar product14_code                              [7];
   varchar product14_quantity                          [3];
   varchar product14_amount                            [13];
   varchar product15_code                              [7];
   varchar product15_quantity                          [3];
   varchar product15_amount                            [13];
   varchar product16_code                              [7];
   varchar product16_quantity                          [3];
   varchar product16_amount                            [13];
   varchar product17_code                              [7];
   varchar product17_quantity                          [3];
   varchar product17_amount                            [13];
   varchar product18_code                              [7];
   varchar product18_quantity                          [3];
   varchar product18_amount                            [13];
   varchar product19_code                              [7];
   varchar product19_quantity                          [3];
   varchar product19_amount                            [13];
   varchar product20_code                              [7];
   varchar product20_quantity                          [3];
   varchar product20_amount                            [13];

   varchar aportionment_flag                           [2];
   varchar exp_date                                    [5];
   varchar open_date                                   [10];
   varchar open_time                                   [7];
   varchar cash_bonus                                  [2];
   varchar transmission_timestamp                      [11];
   varchar mcard_banknet                               [51];
   varchar ticket_nbr								   [16];
   varchar def_gross_amt                               [13];
   varchar term                                        [4];
   varchar purge_date									[9];
}db_bch11;


struct
{
   
   char  device_id                                 [9];
   char  batch_nbr                                 [7];
   char  retrieval_ref_num                         [13];

   char  merchant_id                               [16];
   char  processing_code                           [7];
   char  tran_amount                               [13];
   char  response_code                             [3];
   char  auth_number                               [7];
   char  tran_date                                 [9];
   char  tran_time                                 [7];
   char  transaction_id                            [21];
   char  message_type                              [5];
   char  card_nbr                                  [20];
   char  invoice_nbr                               [9];
   char  settle_file_prefix                        [7];
   char  product_code                              [9];
   char  odometer                                  [8];
   char  sys_trace_audit_num                       [7];
   char  tx_key                                    ;
   char  bin_type                                  ;
   char type_of_data                               [3];
   char down_payment                               [13];
   char period                                     [3];
   char interest_rate                              [5];
   char total_interest                             [13];
   char redemption_amount                          [13];
   char vehicle_number                             [9];
   char pos_entry_mode                             [5];
   char profile                                    [3];
   char nbr_of_prod_codes                          [3];
   
   char product1_code                              [7];
   char product1_quantity                          [3];
   char product1_amount                            [13];
   char product2_code                              [7];
   char product2_quantity                          [3];
   char product2_amount                            [13];
   char product3_code                              [7];
   char product3_quantity                          [3];
   char product3_amount                            [13];
   char product4_code                              [7];
   char product4_quantity                          [3];
   char product4_amount                            [13];
   char product5_code                              [7];
   char product5_quantity                          [3];
   char product5_amount                            [13];
   char product6_code                              [7];
   char product6_quantity                          [3];
   char product6_amount                            [13];
   char product7_code                              [7];
   char product7_quantity                          [3];
   char product7_amount                            [13];
   char product8_code                              [7];
   char product8_quantity                          [3];
   char product8_amount                            [13];
   char product9_code                              [7];
   char product9_quantity                          [3];
   char product9_amount                            [13];
   char product10_code                              [7];
   char product10_quantity                          [3];
   char product10_amount                            [13];
   char product11_code                              [7];
   char product11_quantity                          [3];
   char product11_amount                            [13];
   char product12_code                              [7];
   char product12_quantity                          [3];
   char product12_amount                            [13];
   char product13_code                              [7];
   char product13_quantity                          [3];
   char product13_amount                            [13];
   char product14_code                              [7];
   char product14_quantity                          [3];
   char product14_amount                            [13];
   char product15_code                              [7];
   char product15_quantity                          [3];
   char product15_amount                            [13];
   char product16_code                              [7];
   char product16_quantity                          [3];
   char product16_amount                            [13];
   char product17_code                              [7];
   char product17_quantity                          [3];
   char product17_amount                            [13];
   char product18_code                              [7];
   char product18_quantity                          [3];
   char product18_amount                            [13];
   char product19_code                              [7];
   char product19_quantity                          [3];
   char product19_amount                            [13];
   char product20_code                              [7];
   char product20_quantity                          [3];
   char product20_amount                            [13];
   char aportionment_flag                           [2];
   char exp_date                                    [5];
   char open_date                                   [10];
   char open_time                                   [7];
   char cash_bonus                                  [2];
   char transmission_timestamp                      [11];
   char mcard_banknet                               [51];
   char  processed                                 [2];
   char ticket_nbr									[16];
   char def_gross_amt                               [13];
   char term                                        [4];
   char purge_date									[9];
}pte_archive_bch20;

struct
{
   
   varchar  device_id                                 [9];
   varchar  batch_nbr                                 [7];
   varchar  retrieval_ref_num                         [13];

   varchar  merchant_id                               [16];
   varchar  processing_code                           [7];
   varchar  tran_amount                               [13];
   varchar  response_code                             [3];
   varchar  auth_number                               [7];
   varchar  tran_date                                 [9];
   varchar  tran_time                                 [7];
   varchar  transaction_id                            [21];
   varchar  message_type                              [5];
   varchar  card_nbr                                  [20];
   varchar  invoice_nbr                               [9];
   varchar  settle_file_prefix                        [7];
   varchar  product_code                              [9];
   varchar  odometer                                  [8];
   varchar  sys_trace_audit_num                       [7];
   varchar  tx_key                                    [1];
   varchar  bin_type                                  [1];
   varchar type_of_data                               [3];
   varchar down_payment                               [13];
   varchar period                                     [3];
   varchar interest_rate                              [5];
   varchar total_interest                             [13];
   varchar redemption_amount                          [13];
   varchar vehicle_number                             [9];
   varchar pos_entry_mode                             [5];
   varchar profile                                    [3];
   varchar nbr_of_prod_codes                          [3];
   
   varchar product1_code                              [7];
   varchar product1_quantity                          [3];
   varchar product1_amount                            [13];
   varchar product2_code                              [7];
   varchar product2_quantity                          [3];
   varchar product2_amount                            [13];
   varchar product3_code                              [7];
   varchar product3_quantity                          [3];
   varchar product3_amount                            [13];
   varchar product4_code                              [7];
   varchar product4_quantity                          [3];
   varchar product4_amount                            [13];
   varchar product5_code                              [7];
   varchar product5_quantity                          [3];
   varchar product5_amount                            [13];
   varchar product6_code                              [7];
   varchar product6_quantity                          [3];
   varchar product6_amount                            [13];
   varchar product7_code                              [7];
   varchar product7_quantity                          [3];
   varchar product7_amount                            [13];
   varchar product8_code                              [7];
   varchar product8_quantity                          [3];
   varchar product8_amount                            [13];
   varchar product9_code                              [7];
   varchar product9_quantity                          [3];
   varchar product9_amount                            [13];
   varchar product10_code                              [7];
   varchar product10_quantity                          [3];
   varchar product10_amount                            [13];
   varchar product11_code                              [7];
   varchar product11_quantity                          [3];
   varchar product11_amount                            [13];
   varchar product12_code                              [7];
   varchar product12_quantity                          [3];
   varchar product12_amount                            [13];
   varchar product13_code                              [7];
   varchar product13_quantity                          [3];
   varchar product13_amount                            [13];
   varchar product14_code                              [7];
   varchar product14_quantity                          [3];
   varchar product14_amount                            [13];
   varchar product15_code                              [7];
   varchar product15_quantity                          [3];
   varchar product15_amount                            [13];
   varchar product16_code                              [7];
   varchar product16_quantity                          [3];
   varchar product16_amount                            [13];
   varchar product17_code                              [7];
   varchar product17_quantity                          [3];
   varchar product17_amount                            [13];
   varchar product18_code                              [7];
   varchar product18_quantity                          [3];
   varchar product18_amount                            [13];
   varchar product19_code                              [7];
   varchar product19_quantity                          [3];
   varchar product19_amount                            [13];
   varchar product20_code                              [7];
   varchar product20_quantity                          [3];
   varchar product20_amount                            [13];

   varchar aportionment_flag                           [2];
   varchar exp_date                                    [5];
   varchar open_date                                   [10];
   varchar open_time                                   [7];
   varchar cash_bonus                                  [2];
   varchar transmission_timestamp                      [11];
   varchar mcard_banknet                               [51];
   varchar  processed                                 [2];
   varchar ticket_nbr									[16];
   varchar def_gross_amt                               [13];
   varchar term                                        [4];
   varchar purge_date									[9];
}db_bch20;



EXEC SQL END DECLARE SECTION;

/*************************************************************************************
 NAME:           dbcommon_connect()
 DESCRIPTION:    This function will connect with database
 INPUTS:          pCHAR username --> Archive user name
                        pCHAR password --> Archieve password
                        pCHAR alias    --> alias
                        pCHAR database --> database
                        pCHAR ErrorMsg --> error buffer
 OUTPUTS:        None                                
 RETURNS:        PTEMSG_OK on success.                       
                               
  AUTHOR:		Abhishek Verma.          
  MODIFIED BY:     

/*************************************************************************************/


BYTE dbcommon_connect_Archds ( pCHAR username, 
                        pCHAR password,
                        pCHAR alias,    
                        pCHAR database,
                        pCHAR ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
      /* login values */
      char  db_username[21];
      char  db_password[21];
      char  db_alias[21];
      char  db_database[21];
   EXEC SQL END DECLARE SECTION;


   /* Connect to ORACLE. */
   strcpy( db_username, username);
   strcpy( db_password, password);
   strcpy( db_alias,    alias   );
   strcpy( db_database, database);
   /* Read from TF.ini*/

#ifdef WIN32
   if (stricmp("core", username) == 0)
#else
   if (strcasecmp("core", username) == 0)
#endif
   {
    GetCoreServiceName(db_alias );
    GetCorePassword   (db_password);
    GetCoreUserId     (db_username);
   }
   else
   {
    GetArchiveServiceName(db_alias );
    GetArchivePassword   (db_password);
    GetArchiveUserId     (db_username);
   }


   
   /* EXEC SQL CONNECT :db_username IDENTIFIED BY :db_password  AT :db_alias using :db_database; */
   EXEC SQL CONNECT :db_username  IDENTIFIED BY :db_password  USING :db_alias;
   
   if (SQLCODE != 0)
      return (dbcommon_oracle_to_pte_rcode (SQLCODE, ErrorMsg));

   return (PTEMSG_OK);
}


/*************************************************************************************/
/*************************************************************************************/
void db_to_tlf01 ( pARCHIVE_TLF01 tlf01_ptr )
{
   
   memset(tlf01_ptr, 0, sizeof(ARCHIVE_TLF01));
   memcpy(tlf01_ptr->primary_key.transaction_id, db_tlf01.transaction_id.arr, db_tlf01.transaction_id.len);
   tlf01_ptr->entry_type = db_tlf01.entry_type.arr[0];
   memcpy(tlf01_ptr->tpdu_id, db_tlf01.tpdu_id.arr, db_tlf01.tpdu_id.len);
   memcpy(tlf01_ptr->issuer_id, db_tlf01.issuer_id.arr, db_tlf01.issuer_id.len);
   memcpy(tlf01_ptr->acquirer_id, db_tlf01.acquirer_id.arr, db_tlf01.acquirer_id.len);
   tlf01_ptr->tx_key = db_tlf01.tx_key.arr[0];
   memcpy(tlf01_ptr->terminal_id, db_tlf01.terminal_id.arr, db_tlf01.terminal_id.len);
   memcpy(tlf01_ptr->terminal_type, db_tlf01.terminal_type.arr, db_tlf01.terminal_type.len);
   memcpy(tlf01_ptr->response_text, db_tlf01.response_text.arr, db_tlf01.response_text.len);
   memcpy(tlf01_ptr->card_num_len, db_tlf01.card_num_len.arr, db_tlf01.card_num_len.len);
   memcpy(tlf01_ptr->card_num, db_tlf01.card_num.arr, db_tlf01.card_num.len);
   memcpy(tlf01_ptr->exp_date, db_tlf01.exp_date.arr, db_tlf01.exp_date.len);
   memcpy(tlf01_ptr->total_amount, db_tlf01.total_amount.arr, db_tlf01.total_amount.len);
   memcpy(tlf01_ptr->add_amounts, db_tlf01.add_amounts.arr, db_tlf01.add_amounts.len);
   memcpy(tlf01_ptr->invoice_number, db_tlf01.invoice_number.arr, db_tlf01.invoice_number.len);
   memcpy(tlf01_ptr->orig_amount, db_tlf01.orig_amount.arr, db_tlf01.orig_amount.len);
   memcpy(tlf01_ptr->auth_number, db_tlf01.auth_number.arr, db_tlf01.auth_number.len);
   memcpy(tlf01_ptr->processing_code, db_tlf01.processing_code.arr, db_tlf01.processing_code.len);
   memcpy(tlf01_ptr->sys_trace_audit_num, db_tlf01.sys_trace_audit_num.arr, db_tlf01.sys_trace_audit_num.len);
   memcpy(tlf01_ptr->orig_sys_trace_num, db_tlf01.orig_sys_trace_num.arr, db_tlf01.orig_sys_trace_num.len);
   memcpy(tlf01_ptr->pos_entry_mode, db_tlf01.pos_entry_mode.arr, db_tlf01.pos_entry_mode.len);
   memcpy(tlf01_ptr->nii, db_tlf01.nii.arr, db_tlf01.nii.len);
   memcpy(tlf01_ptr->pos_condition_code, db_tlf01.pos_condition_code.arr, db_tlf01.pos_condition_code.len);
   memcpy(tlf01_ptr->track1, db_tlf01.track1.arr, db_tlf01.track1.len);
   memcpy(tlf01_ptr->track2, db_tlf01.track2.arr, db_tlf01.track2.len);
   memcpy(tlf01_ptr->retrieval_ref_num, db_tlf01.retrieval_ref_num.arr, db_tlf01.retrieval_ref_num.len);
   memcpy(tlf01_ptr->orig_retrieval_ref_num, db_tlf01.orig_retrieval_ref_num.arr, db_tlf01.orig_retrieval_ref_num.len);
   memcpy(tlf01_ptr->merchant_id, db_tlf01.merchant_id.arr, db_tlf01.merchant_id.len);
   memcpy(tlf01_ptr->orig_message, db_tlf01.orig_message.arr, db_tlf01.orig_message.len);
   memcpy(tlf01_ptr->settlement_total, db_tlf01.settlement_total.arr, db_tlf01.settlement_total.len);
   memcpy(tlf01_ptr->message_type, db_tlf01.message_type.arr, db_tlf01.message_type.len);
   memcpy(tlf01_ptr->card_holder_name, db_tlf01.card_holder_name.arr, db_tlf01.card_holder_name.len);
   tlf01_ptr->general_status = db_tlf01.general_status.arr[0];
   memcpy(tlf01_ptr->originator_queue, db_tlf01.originator_queue.arr, db_tlf01.originator_queue.len);
   memcpy(tlf01_ptr->originator_info, db_tlf01.originator_info.arr, db_tlf01.originator_info.len);
   memcpy(tlf01_ptr->batch_number, db_tlf01.batch_number.arr, db_tlf01.batch_number.len);
   memcpy(tlf01_ptr->response_code, db_tlf01.response_code.arr, db_tlf01.response_code.len);
   memcpy(tlf01_ptr->date_yyyymmdd, db_tlf01.date_yyyymmdd.arr, db_tlf01.date_yyyymmdd.len);
   memcpy(tlf01_ptr->time_hhmmss, db_tlf01.time_hhmmss.arr, db_tlf01.time_hhmmss.len);
   memcpy(tlf01_ptr->num_sales, db_tlf01.num_sales.arr, db_tlf01.num_sales.len);
   memcpy(tlf01_ptr->sales_amount, db_tlf01.sales_amount.arr, db_tlf01.sales_amount.len);
   memcpy(tlf01_ptr->num_refunds, db_tlf01.num_refunds.arr, db_tlf01.num_refunds.len);
   memcpy(tlf01_ptr->refund_amount, db_tlf01.refund_amount.arr, db_tlf01.refund_amount.len);
   memcpy(tlf01_ptr->num_dbsales, db_tlf01.num_dbsales.arr, db_tlf01.num_dbsales.len);
   memcpy(tlf01_ptr->dbsales_amount, db_tlf01.dbsales_amount.arr, db_tlf01.dbsales_amount.len);
   memcpy(tlf01_ptr->num_dbrefunds, db_tlf01.num_dbrefunds.arr, db_tlf01.num_dbrefunds.len);
   memcpy(tlf01_ptr->dbrefund_amount, db_tlf01.dbrefund_amount.arr, db_tlf01.dbrefund_amount.len);
   memcpy(tlf01_ptr->pin_block, db_tlf01.pin_block.arr, db_tlf01.pin_block.len);
   memcpy(tlf01_ptr->tax_amount, db_tlf01.tax_amount.arr, db_tlf01.tax_amount.len);
   memcpy(tlf01_ptr->tip_amount, db_tlf01.tip_amount.arr, db_tlf01.tip_amount.len);
   memcpy(tlf01_ptr->tran_start_time, db_tlf01.tran_start_time.arr, db_tlf01.tran_start_time.len);
   memcpy(tlf01_ptr->host_start_time, db_tlf01.host_start_time.arr, db_tlf01.host_start_time.len);
   memcpy(tlf01_ptr->host_finish_time, db_tlf01.host_finish_time.arr, db_tlf01.host_finish_time.len);
   memcpy(tlf01_ptr->tran_finish_time, db_tlf01.tran_finish_time.arr, db_tlf01.tran_finish_time.len);
   memcpy(tlf01_ptr->settle_file_prefix, db_tlf01.settle_file_prefix.arr, db_tlf01.settle_file_prefix.len);
   memcpy(tlf01_ptr->resp_source_len, db_tlf01.resp_source_len.arr, db_tlf01.resp_source_len.len);
   tlf01_ptr->visa_char_indicator = db_tlf01.visa_char_indicator.arr[0];
   memcpy(tlf01_ptr->visa_tran_id, db_tlf01.visa_tran_id.arr, db_tlf01.visa_tran_id.len);
   memcpy(tlf01_ptr->visa_validation_code, db_tlf01.visa_validation_code.arr, db_tlf01.visa_validation_code.len);
   memcpy(tlf01_ptr->mcard_banknet_len, db_tlf01.mcard_banknet_len.arr, db_tlf01.mcard_banknet_len.len);
   memcpy(tlf01_ptr->mcard_banknet, db_tlf01.mcard_banknet.arr, db_tlf01.mcard_banknet.len);
   memcpy(tlf01_ptr->agent_id_len, db_tlf01.agent_id_len.arr, db_tlf01.agent_id_len.len);
   memcpy(tlf01_ptr->agent_id, db_tlf01.agent_id.arr, db_tlf01.agent_id.len);
   tlf01_ptr->cvc = db_tlf01.cvc.arr[0];
   memcpy(tlf01_ptr->settlement_date, db_tlf01.settlement_date.arr, db_tlf01.settlement_date.len);
   memcpy(tlf01_ptr->category_code, db_tlf01.category_code.arr, db_tlf01.category_code.len);
   memcpy(tlf01_ptr->conversion_rate, db_tlf01.conversion_rate.arr, db_tlf01.conversion_rate.len);
   memcpy(tlf01_ptr->product_code, db_tlf01.product_code.arr, db_tlf01.product_code.len);
   memcpy(tlf01_ptr->odometer, db_tlf01.odometer.arr, db_tlf01.odometer.len);
   memcpy(tlf01_ptr->organization_id, db_tlf01.organization_id.arr, db_tlf01.organization_id.len);
   tlf01_ptr->dynamic_keychange = db_tlf01.dynamic_keychange.arr[0];

   memcpy(tlf01_ptr->txn_cnt, db_tlf01.txn_cnt.arr, db_tlf01.txn_cnt.len);
   memcpy(tlf01_ptr->source_key, db_tlf01.source_key.arr, db_tlf01.source_key.len);
   memcpy(tlf01_ptr->dcf01_retired_cwk, db_tlf01.dcf01_retired_cwk.arr, db_tlf01.dcf01_retired_cwk.len);
   memcpy(tlf01_ptr->dest_key, db_tlf01.dest_key.arr, db_tlf01.dest_key.len);
   memcpy(tlf01_ptr->ncf01_retired_cwk, db_tlf01.ncf01_retired_cwk.arr, db_tlf01.ncf01_retired_cwk.len);
   memcpy(tlf01_ptr->handler_queue, db_tlf01.handler_queue.arr, db_tlf01.handler_queue.len);
   memcpy(tlf01_ptr->authorizing_host_queue, db_tlf01.authorizing_host_queue.arr, db_tlf01.authorizing_host_queue.len);
   memcpy(tlf01_ptr->max_net_consec_tmouts, db_tlf01.max_net_consec_tmouts.arr, db_tlf01.max_net_consec_tmouts.len);
   memcpy(tlf01_ptr->max_active_txns, db_tlf01.max_active_txns.arr, db_tlf01.max_active_txns.len);
   memcpy(tlf01_ptr->remote_nsp_type, db_tlf01.remote_nsp_type.arr, db_tlf01.remote_nsp_type.len);
   memcpy(tlf01_ptr->kek, db_tlf01.kek.arr, db_tlf01.kek.len);
   
   memcpy(tlf01_ptr->credit_limit, db_tlf01.credit_limit.arr, db_tlf01.credit_limit.len);
   memcpy(tlf01_ptr->forwarding_institution_id, db_tlf01.forwarding_institution_id.arr, db_tlf01.forwarding_institution_id.len);
   memcpy(tlf01_ptr->acquiring_id, db_tlf01.acquiring_id.arr, db_tlf01.acquiring_id.len);
   memcpy(tlf01_ptr->outstanding_balance, db_tlf01.outstanding_balance.arr, db_tlf01.outstanding_balance.len);
   memcpy(tlf01_ptr->nfi_name, db_tlf01.nfi_name.arr, db_tlf01.nfi_name.len);
   memcpy(tlf01_ptr->nfi_seq_nbr, db_tlf01.nfi_seq_nbr.arr, db_tlf01.nfi_seq_nbr.len);
   memcpy(tlf01_ptr->nfi_start_date, db_tlf01.nfi_start_date.arr, db_tlf01.nfi_start_date.len);
   memcpy(tlf01_ptr->nfi_end_date, db_tlf01.nfi_end_date.arr, db_tlf01.nfi_end_date.len);
   memcpy(tlf01_ptr->resp_source, db_tlf01.resp_source.arr, db_tlf01.resp_source.len);
   memcpy(tlf01_ptr->dispensation.origin, db_tlf01.origin.arr, db_tlf01.origin.len);
   memcpy(tlf01_ptr->dispensation.auth_1, db_tlf01.auth_1.arr, db_tlf01.auth_1.len);
   memcpy(tlf01_ptr->dispensation.auth_2, db_tlf01.auth_2.arr, db_tlf01.auth_2.len);
   memcpy(tlf01_ptr->update_mask, db_tlf01.update_mask.arr, db_tlf01.update_mask.len);

   memcpy(tlf01_ptr->type_of_data, db_tlf01.type_of_data.arr, db_tlf01.type_of_data.len);
   memcpy(tlf01_ptr->down_payment, db_tlf01.down_payment.arr, db_tlf01.down_payment.len);
   memcpy(tlf01_ptr->period, db_tlf01.period.arr, db_tlf01.period.len);
   memcpy(tlf01_ptr->interest_rate, db_tlf01.interest_rate.arr, db_tlf01.interest_rate.len);
   memcpy(tlf01_ptr->total_interest, db_tlf01.total_interest.arr, db_tlf01.total_interest.len);
   memcpy(tlf01_ptr->redemption_amount, db_tlf01.redemption_amount.arr, db_tlf01.redemption_amount.len);
   memcpy(tlf01_ptr->vehicle_number, db_tlf01.vehicle_number.arr, db_tlf01.vehicle_number.len);
  
   memcpy(tlf01_ptr->profile, db_tlf01.profile.arr, db_tlf01.profile.len);
   memcpy(tlf01_ptr->nbr_of_prod_codes, db_tlf01.nbr_of_prod_codes.arr, db_tlf01.nbr_of_prod_codes.len);
  
   memcpy(tlf01_ptr->product_codes[0].code, db_tlf01.product1_code.arr, db_tlf01.product1_code.len);
   memcpy(tlf01_ptr->product_codes[0].quantity, db_tlf01.product1_quantity.arr, db_tlf01.product1_quantity.len);
   memcpy(tlf01_ptr->product_codes[0].amount, db_tlf01.product1_amount.arr, db_tlf01.product1_amount.len);   
   memcpy(tlf01_ptr->product_codes[1].code, db_tlf01.product2_code.arr, db_tlf01.product2_code.len);
   memcpy(tlf01_ptr->product_codes[1].quantity, db_tlf01.product2_quantity.arr, db_tlf01.product2_quantity.len);
   memcpy(tlf01_ptr->product_codes[1].amount, db_tlf01.product2_amount.arr, db_tlf01.product2_amount.len);
   memcpy(tlf01_ptr->product_codes[2].code, db_tlf01.product3_code.arr, db_tlf01.product3_code.len);
   memcpy(tlf01_ptr->product_codes[2].quantity, db_tlf01.product3_quantity.arr, db_tlf01.product3_quantity.len);
   memcpy(tlf01_ptr->product_codes[2].amount, db_tlf01.product3_amount.arr, db_tlf01.product3_amount.len);
   memcpy(tlf01_ptr->product_codes[3].code, db_tlf01.product4_code.arr, db_tlf01.product4_code.len);
   memcpy(tlf01_ptr->product_codes[3].quantity, db_tlf01.product4_quantity.arr, db_tlf01.product4_quantity.len);
   memcpy(tlf01_ptr->product_codes[3].amount, db_tlf01.product4_amount.arr, db_tlf01.product4_amount.len);
   memcpy(tlf01_ptr->product_codes[4].code, db_tlf01.product5_code.arr, db_tlf01.product5_code.len);
   memcpy(tlf01_ptr->product_codes[4].quantity, db_tlf01.product5_quantity.arr, db_tlf01.product5_quantity.len);
   memcpy(tlf01_ptr->product_codes[4].amount, db_tlf01.product5_amount.arr, db_tlf01.product5_amount.len);
   memcpy(tlf01_ptr->product_codes[5].code, db_tlf01.product6_code.arr, db_tlf01.product6_code.len);
   memcpy(tlf01_ptr->product_codes[5].quantity, db_tlf01.product6_quantity.arr, db_tlf01.product6_quantity.len);
   memcpy(tlf01_ptr->product_codes[5].amount, db_tlf01.product6_amount.arr, db_tlf01.product6_amount.len);
   memcpy(tlf01_ptr->product_codes[6].code, db_tlf01.product7_code.arr, db_tlf01.product7_code.len);
   memcpy(tlf01_ptr->product_codes[6].quantity, db_tlf01.product7_quantity.arr, db_tlf01.product7_quantity.len);
   memcpy(tlf01_ptr->product_codes[6].amount, db_tlf01.product7_amount.arr, db_tlf01.product7_amount.len);
   memcpy(tlf01_ptr->product_codes[7].code, db_tlf01.product8_code.arr, db_tlf01.product8_code.len);
   memcpy(tlf01_ptr->product_codes[7].quantity, db_tlf01.product8_quantity.arr, db_tlf01.product8_quantity.len);
   memcpy(tlf01_ptr->product_codes[7].amount, db_tlf01.product8_amount.arr, db_tlf01.product8_amount.len);
   memcpy(tlf01_ptr->product_codes[8].code, db_tlf01.product9_code.arr, db_tlf01.product9_code.len);
   memcpy(tlf01_ptr->product_codes[8].quantity, db_tlf01.product9_quantity.arr, db_tlf01.product9_quantity.len);
   memcpy(tlf01_ptr->product_codes[8].amount, db_tlf01.product9_amount.arr, db_tlf01.product9_amount.len);
   memcpy(tlf01_ptr->product_codes[9].code, db_tlf01.product10_code.arr, db_tlf01.product10_code.len);
   memcpy(tlf01_ptr->product_codes[9].quantity, db_tlf01.product10_quantity.arr, db_tlf01.product10_quantity.len);
   memcpy(tlf01_ptr->product_codes[9].amount, db_tlf01.product10_amount.arr, db_tlf01.product10_amount.len);
   memcpy(tlf01_ptr->product_codes[10].code, db_tlf01.product11_code.arr, db_tlf01.product11_code.len);
   memcpy(tlf01_ptr->product_codes[10].quantity, db_tlf01.product11_quantity.arr, db_tlf01.product11_quantity.len);
   memcpy(tlf01_ptr->product_codes[10].amount, db_tlf01.product11_amount.arr, db_tlf01.product11_amount.len);
   memcpy(tlf01_ptr->product_codes[11].code, db_tlf01.product12_code.arr, db_tlf01.product12_code.len);
   memcpy(tlf01_ptr->product_codes[11].quantity, db_tlf01.product12_quantity.arr, db_tlf01.product12_quantity.len);
   memcpy(tlf01_ptr->product_codes[11].amount, db_tlf01.product12_amount.arr, db_tlf01.product12_amount.len);
   memcpy(tlf01_ptr->product_codes[12].code, db_tlf01.product13_code.arr, db_tlf01.product13_code.len);
   memcpy(tlf01_ptr->product_codes[12].quantity, db_tlf01.product13_quantity.arr, db_tlf01.product13_quantity.len);
   memcpy(tlf01_ptr->product_codes[12].amount, db_tlf01.product13_amount.arr, db_tlf01.product13_amount.len);
   memcpy(tlf01_ptr->product_codes[13].code, db_tlf01.product14_code.arr, db_tlf01.product14_code.len);
   memcpy(tlf01_ptr->product_codes[13].quantity, db_tlf01.product14_quantity.arr, db_tlf01.product14_quantity.len);
   memcpy(tlf01_ptr->product_codes[13].amount, db_tlf01.product14_amount.arr, db_tlf01.product14_amount.len);
   memcpy(tlf01_ptr->product_codes[14].code, db_tlf01.product15_code.arr, db_tlf01.product15_code.len);
   memcpy(tlf01_ptr->product_codes[14].quantity, db_tlf01.product15_quantity.arr, db_tlf01.product15_quantity.len);
   memcpy(tlf01_ptr->product_codes[14].amount, db_tlf01.product15_amount.arr, db_tlf01.product15_amount.len);
   memcpy(tlf01_ptr->product_codes[15].code, db_tlf01.product16_code.arr, db_tlf01.product16_code.len);
   memcpy(tlf01_ptr->product_codes[15].quantity, db_tlf01.product16_quantity.arr, db_tlf01.product16_quantity.len);
   memcpy(tlf01_ptr->product_codes[15].amount, db_tlf01.product16_amount.arr, db_tlf01.product16_amount.len);
   memcpy(tlf01_ptr->product_codes[16].code, db_tlf01.product17_code.arr, db_tlf01.product17_code.len);
   memcpy(tlf01_ptr->product_codes[16].quantity, db_tlf01.product17_quantity.arr, db_tlf01.product17_quantity.len);
   memcpy(tlf01_ptr->product_codes[16].amount, db_tlf01.product17_amount.arr, db_tlf01.product17_amount.len);
   memcpy(tlf01_ptr->product_codes[17].code, db_tlf01.product18_code.arr, db_tlf01.product18_code.len);
   memcpy(tlf01_ptr->product_codes[17].quantity, db_tlf01.product18_quantity.arr, db_tlf01.product18_quantity.len);
   memcpy(tlf01_ptr->product_codes[17].amount, db_tlf01.product18_amount.arr, db_tlf01.product18_amount.len);
   memcpy(tlf01_ptr->product_codes[18].code, db_tlf01.product19_code.arr, db_tlf01.product19_code.len);
   memcpy(tlf01_ptr->product_codes[18].quantity, db_tlf01.product19_quantity.arr, db_tlf01.product19_quantity.len);
   memcpy(tlf01_ptr->product_codes[18].amount, db_tlf01.product19_amount.arr, db_tlf01.product19_amount.len);
   memcpy(tlf01_ptr->product_codes[19].code, db_tlf01.product20_code.arr, db_tlf01.product20_code.len);
   memcpy(tlf01_ptr->product_codes[19].quantity, db_tlf01.product20_quantity.arr, db_tlf01.product20_quantity.len);
   memcpy(tlf01_ptr->product_codes[19].amount, db_tlf01.product20_amount.arr, db_tlf01.product20_amount.len);
   memcpy(tlf01_ptr->visa_merchant_id, db_tlf01.visa_merchant_id.arr, db_tlf01.visa_merchant_id.len);
   
   memcpy(tlf01_ptr->cash_bonus, db_tlf01.cash_bonus.arr, db_tlf01.cash_bonus.len);
   memcpy(tlf01_ptr->deferred_factor, db_tlf01.deferred_factor.arr, db_tlf01.deferred_factor.len);
   memcpy(tlf01_ptr->deferred_term_length, db_tlf01.deferred_term_length.arr, db_tlf01.deferred_term_length.len);
   memcpy(tlf01_ptr->currency_code, db_tlf01.currency_code.arr, db_tlf01.currency_code.len);
   memcpy(tlf01_ptr->transmission_timestamp, db_tlf01.transmission_timestamp.arr, db_tlf01.transmission_timestamp.len);
   memcpy(tlf01_ptr->tran_fee_amount, db_tlf01.tran_fee_amount.arr, db_tlf01.tran_fee_amount.len);
   memcpy(tlf01_ptr->cvc_data, db_tlf01.cvc_data.arr, db_tlf01.cvc_data.len);

   memcpy(tlf01_ptr->verify_mag_stripe, db_tlf01.verify_mag_stripe.arr, db_tlf01.verify_mag_stripe.len);
   memcpy(tlf01_ptr->saf, db_tlf01.saf.arr, db_tlf01.saf.len);
   memcpy(tlf01_ptr->security_response_code, db_tlf01.security_response_code.arr, db_tlf01.security_response_code.len);
   memcpy(tlf01_ptr->service_code, db_tlf01.service_code.arr, db_tlf01.service_code.len);
   memcpy(tlf01_ptr->source_pin_format, db_tlf01.source_pin_format.arr, db_tlf01.source_pin_format.len);
   memcpy(tlf01_ptr->dest_pin_format, db_tlf01.dest_pin_format.arr, db_tlf01.dest_pin_format.len);
   memcpy(tlf01_ptr->voice_auth, db_tlf01.voice_auth.arr, db_tlf01.voice_auth.len);

   memcpy(tlf01_ptr->actual_amount, db_tlf01.actual_amount.arr, db_tlf01.actual_amount.len);
   memcpy(tlf01_ptr->reversal_amount, db_tlf01.reversal_amount.arr, db_tlf01.reversal_amount.len);
  
   memcpy(tlf01_ptr->voice_auth_text, db_tlf01.voice_auth_text.arr, db_tlf01.voice_auth_text.len);
   memcpy(tlf01_ptr->operator_id, db_tlf01.operator_id.arr, db_tlf01.operator_id.len);
   memcpy(tlf01_ptr->workstation, db_tlf01.workstation.arr, db_tlf01.workstation.len);
   memcpy(tlf01_ptr->orig_auth_number, db_tlf01.orig_auth_number.arr, db_tlf01.orig_auth_number.len);
   memcpy(tlf01_ptr->ticket_nbr, db_tlf01.ticket_nbr.arr, db_tlf01.ticket_nbr.len);
   memcpy(tlf01_ptr->system_date, db_tlf01.system_date.arr, db_tlf01.system_date.len);
   memcpy(tlf01_ptr->def_gross_amt, db_tlf01.def_gross_amt.arr, db_tlf01.def_gross_amt.len);
   memcpy(tlf01_ptr->monthly_amort_amt, db_tlf01.monthly_amort_amt.arr, db_tlf01.monthly_amort_amt.len);
   memcpy(tlf01_ptr->purge_date, db_tlf01.purge_date.arr, db_tlf01.purge_date.len);
}

/*************************************************************************************/
/*************************************************************************************/
void tlf01_to_db( pARCHIVE_TLF01 tlf01_ptr )
{
  memcpy (&pte_archive_tlf01, tlf01_ptr, sizeof(pte_archive_tlf01));
}

/*************************************************************************************/
/*************************************************************************************/
void db_to_bch01 ( pARCHIVE_BCH01 bch01_ptr)
{
   memset(bch01_ptr, 0, sizeof(ARCHIVE_BCH01));
   memcpy(bch01_ptr->primary_key.device_id, db_bch01.device_id.arr, db_bch01.device_id.len);
   memcpy(bch01_ptr->primary_key.batch_nbr, db_bch01.batch_nbr.arr, db_bch01.batch_nbr.len);

   memcpy(bch01_ptr->merchant_id, db_bch01.merchant_id.arr, db_bch01.merchant_id.len);
   memcpy(bch01_ptr->batch_status, db_bch01.batch_status.arr, db_bch01.batch_status.len);
   memcpy(bch01_ptr->total_credit_cnt, db_bch01.total_credit_cnt.arr, db_bch01.total_credit_cnt.len);
   memcpy(bch01_ptr->total_credit_amt, db_bch01.total_credit_amt.arr, db_bch01.total_credit_amt.len);
   memcpy(bch01_ptr->total_credit_refund_cnt, db_bch01.total_credit_refund_cnt.arr, db_bch01.total_credit_refund_cnt.len);
   memcpy(bch01_ptr->total_credit_refund_amt, db_bch01.total_credit_refund_amt.arr, db_bch01.total_credit_refund_amt.len);
   memcpy(bch01_ptr->total_debit_cnt, db_bch01.total_debit_cnt.arr, db_bch01.total_debit_cnt.len);
   memcpy(bch01_ptr->total_debit_amt, db_bch01.total_debit_amt.arr, db_bch01.total_debit_amt.len);
   memcpy(bch01_ptr->total_debit_refund_cnt, db_bch01.total_debit_refund_cnt.arr, db_bch01.total_debit_refund_cnt.len);
   memcpy(bch01_ptr->total_debit_refund_amt, db_bch01.total_debit_refund_amt.arr, db_bch01.total_debit_refund_amt.len);
   memcpy(bch01_ptr->total_void_credit_cnt, db_bch01.total_void_credit_cnt.arr, db_bch01.total_void_credit_cnt.len);
   memcpy(bch01_ptr->total_void_credit_amt, db_bch01.total_void_credit_amt.arr, db_bch01.total_void_credit_amt.len);
   memcpy(bch01_ptr->total_void_credit_refund_cnt, db_bch01.total_void_credit_refund_cnt.arr, db_bch01.total_void_credit_refund_cnt.len);
   memcpy(bch01_ptr->total_void_credit_refund_amt, db_bch01.total_void_credit_refund_amt.arr, db_bch01.total_void_credit_refund_amt.len);
   memcpy(bch01_ptr->open_date, db_bch01.open_date.arr, db_bch01.open_date.len);
   memcpy(bch01_ptr->open_time, db_bch01.open_time.arr, db_bch01.open_time.len);
   memcpy(bch01_ptr->release_date, db_bch01.release_date.arr, db_bch01.release_date.len);
   memcpy(bch01_ptr->release_time, db_bch01.release_time.arr, db_bch01.release_time.len);
   memcpy(bch01_ptr->visa_merchant_id, db_bch01.visa_merchant_id.arr, db_bch01.visa_merchant_id.len);
   memcpy(bch01_ptr->purge_date, db_bch01.purge_date.arr, db_bch01.purge_date.len);

}

/*************************************************************************************/
/*************************************************************************************/
void db_to_bch10 ( pARCHIVE_BCH10 bch10_ptr)
{
   memset(bch10_ptr, 0, sizeof(ARCHIVE_BCH10));
   memcpy(bch10_ptr->primary_key.device_id, db_bch10.device_id.arr, db_bch10.device_id.len);
   memcpy(bch10_ptr->primary_key.batch_nbr, db_bch10.batch_nbr.arr, db_bch10.batch_nbr.len);
   memcpy(bch10_ptr->primary_key.retrieval_ref_num, db_bch10.retrieval_ref_num.arr, db_bch10.retrieval_ref_num.len);
   memcpy(bch10_ptr->merchant_id, db_bch10.merchant_id.arr, db_bch10.merchant_id.len);
   memcpy(bch10_ptr->processing_code, db_bch10.processing_code.arr, db_bch10.processing_code.len);
   memcpy(bch10_ptr->tran_amount, db_bch10.tran_amount.arr, db_bch10.tran_amount.len);
   memcpy(bch10_ptr->response_code, db_bch10.response_code.arr, db_bch10.response_code.len);
   memcpy(bch10_ptr->auth_number, db_bch10.auth_number.arr, db_bch10.auth_number.len);
   memcpy(bch10_ptr->tran_date, db_bch10.tran_date.arr, db_bch10.tran_date.len);
   memcpy(bch10_ptr->tran_time, db_bch10.tran_time.arr, db_bch10.tran_time.len);
   memcpy(bch10_ptr->transaction_id, db_bch10.transaction_id.arr, db_bch10.transaction_id.len);
   memcpy(bch10_ptr->message_type, db_bch10.message_type.arr, db_bch10.message_type.len);
   memcpy(bch10_ptr->card_nbr, db_bch10.card_nbr.arr, db_bch10.card_nbr.len);
   memcpy(bch10_ptr->invoice_nbr, db_bch10.invoice_nbr.arr, db_bch10.invoice_nbr.len);
   memcpy(bch10_ptr->settle_file_prefix, db_bch10.settle_file_prefix.arr, db_bch10.settle_file_prefix.len);
   memcpy(bch10_ptr->product_code, db_bch10.product_code.arr, db_bch10.product_code.len);
   memcpy(bch10_ptr->odometer, db_bch10.odometer.arr, db_bch10.odometer.len);
   memcpy(bch10_ptr->sys_trace_audit_num, db_bch10.sys_trace_audit_num.arr, db_bch10.sys_trace_audit_num.len);
   bch10_ptr->tx_key = db_bch10.tx_key.arr[0];
   bch10_ptr->bin_type = db_bch10.bin_type.arr[0];

   memcpy(bch10_ptr->type_of_data, db_bch10.type_of_data.arr, db_bch10.type_of_data.len);
   memcpy(bch10_ptr->down_payment, db_bch10.down_payment.arr, db_bch10.down_payment.len);
   memcpy(bch10_ptr->period, db_bch10.period.arr, db_bch10.period.len);
   memcpy(bch10_ptr->interest_rate, db_bch10.interest_rate.arr, db_bch10.interest_rate.len);
   memcpy(bch10_ptr->total_interest, db_bch10.total_interest.arr, db_bch10.total_interest.len);
   memcpy(bch10_ptr->redemption_amount, db_bch10.redemption_amount.arr, db_bch10.redemption_amount.len);
   memcpy(bch10_ptr->vehicle_number, db_bch10.vehicle_number.arr, db_bch10.vehicle_number.len);
   memcpy(bch10_ptr->pos_entry_mode, db_bch10.pos_entry_mode.arr, db_bch10.pos_entry_mode.len);
   memcpy(bch10_ptr->profile, db_bch10.profile.arr, db_bch10.profile.len);
   memcpy(bch10_ptr->nbr_of_prod_codes, db_bch10.nbr_of_prod_codes.arr, db_bch10.nbr_of_prod_codes.len);
  
   memcpy(bch10_ptr->product_codes[0].code, db_bch10.product1_code.arr, db_bch10.product1_code.len);
   memcpy(bch10_ptr->product_codes[0].quantity, db_bch10.product1_quantity.arr, db_bch10.product1_quantity.len);
   memcpy(bch10_ptr->product_codes[0].amount, db_bch10.product1_amount.arr, db_bch10.product1_amount.len);   
   memcpy(bch10_ptr->product_codes[1].code, db_bch10.product2_code.arr, db_bch10.product2_code.len);
   memcpy(bch10_ptr->product_codes[1].quantity, db_bch10.product2_quantity.arr, db_bch10.product2_quantity.len);
   memcpy(bch10_ptr->product_codes[1].amount, db_bch10.product2_amount.arr, db_bch10.product2_amount.len);
   memcpy(bch10_ptr->product_codes[2].code, db_bch10.product3_code.arr, db_bch10.product3_code.len);
   memcpy(bch10_ptr->product_codes[2].quantity, db_bch10.product3_quantity.arr, db_bch10.product3_quantity.len);
   memcpy(bch10_ptr->product_codes[2].amount, db_bch10.product3_amount.arr, db_bch10.product3_amount.len);
   memcpy(bch10_ptr->product_codes[3].code, db_bch10.product4_code.arr, db_bch10.product4_code.len);
   memcpy(bch10_ptr->product_codes[3].quantity, db_bch10.product4_quantity.arr, db_bch10.product4_quantity.len);
   memcpy(bch10_ptr->product_codes[3].amount, db_bch10.product4_amount.arr, db_bch10.product4_amount.len);
   memcpy(bch10_ptr->product_codes[4].code, db_bch10.product5_code.arr, db_bch10.product5_code.len);
   memcpy(bch10_ptr->product_codes[4].quantity, db_bch10.product5_quantity.arr, db_bch10.product5_quantity.len);
   memcpy(bch10_ptr->product_codes[4].amount, db_bch10.product5_amount.arr, db_bch10.product5_amount.len);
   memcpy(bch10_ptr->product_codes[5].code, db_bch10.product6_code.arr, db_bch10.product6_code.len);
   memcpy(bch10_ptr->product_codes[5].quantity, db_bch10.product6_quantity.arr, db_bch10.product6_quantity.len);
   memcpy(bch10_ptr->product_codes[5].amount, db_bch10.product6_amount.arr, db_bch10.product6_amount.len);
   memcpy(bch10_ptr->product_codes[6].code, db_bch10.product7_code.arr, db_bch10.product7_code.len);
   memcpy(bch10_ptr->product_codes[6].quantity, db_bch10.product7_quantity.arr, db_bch10.product7_quantity.len);
   memcpy(bch10_ptr->product_codes[6].amount, db_bch10.product7_amount.arr, db_bch10.product7_amount.len);
   memcpy(bch10_ptr->product_codes[7].code, db_bch10.product8_code.arr, db_bch10.product8_code.len);
   memcpy(bch10_ptr->product_codes[7].quantity, db_bch10.product8_quantity.arr, db_bch10.product8_quantity.len);
   memcpy(bch10_ptr->product_codes[7].amount, db_bch10.product8_amount.arr, db_bch10.product8_amount.len);
   memcpy(bch10_ptr->product_codes[8].code, db_bch10.product9_code.arr, db_bch10.product9_code.len);
   memcpy(bch10_ptr->product_codes[8].quantity, db_bch10.product9_quantity.arr, db_bch10.product9_quantity.len);
   memcpy(bch10_ptr->product_codes[8].amount, db_bch10.product9_amount.arr, db_bch10.product9_amount.len);
   memcpy(bch10_ptr->product_codes[9].code, db_bch10.product10_code.arr, db_bch10.product10_code.len);
   memcpy(bch10_ptr->product_codes[9].quantity, db_bch10.product10_quantity.arr, db_bch10.product10_quantity.len);
   memcpy(bch10_ptr->product_codes[9].amount, db_bch10.product10_amount.arr, db_bch10.product10_amount.len);
   memcpy(bch10_ptr->product_codes[10].code, db_bch10.product11_code.arr, db_bch10.product11_code.len);
   memcpy(bch10_ptr->product_codes[10].quantity, db_bch10.product11_quantity.arr, db_bch10.product11_quantity.len);
   memcpy(bch10_ptr->product_codes[10].amount, db_bch10.product11_amount.arr, db_bch10.product11_amount.len);
   memcpy(bch10_ptr->product_codes[11].code, db_bch10.product12_code.arr, db_bch10.product12_code.len);
   memcpy(bch10_ptr->product_codes[11].quantity, db_bch10.product12_quantity.arr, db_bch10.product12_quantity.len);
   memcpy(bch10_ptr->product_codes[11].amount, db_bch10.product12_amount.arr, db_bch10.product12_amount.len);
   memcpy(bch10_ptr->product_codes[12].code, db_bch10.product13_code.arr, db_bch10.product13_code.len);
   memcpy(bch10_ptr->product_codes[12].quantity, db_bch10.product13_quantity.arr, db_bch10.product13_quantity.len);
   memcpy(bch10_ptr->product_codes[12].amount, db_bch10.product13_amount.arr, db_bch10.product13_amount.len);
   memcpy(bch10_ptr->product_codes[13].code, db_bch10.product14_code.arr, db_bch10.product14_code.len);
   memcpy(bch10_ptr->product_codes[13].quantity, db_bch10.product14_quantity.arr, db_bch10.product14_quantity.len);
   memcpy(bch10_ptr->product_codes[13].amount, db_bch10.product14_amount.arr, db_bch10.product14_amount.len);
   memcpy(bch10_ptr->product_codes[14].code, db_bch10.product15_code.arr, db_bch10.product15_code.len);
   memcpy(bch10_ptr->product_codes[14].quantity, db_bch10.product15_quantity.arr, db_bch10.product15_quantity.len);
   memcpy(bch10_ptr->product_codes[14].amount, db_bch10.product15_amount.arr, db_bch10.product15_amount.len);
   memcpy(bch10_ptr->product_codes[15].code, db_bch10.product16_code.arr, db_bch10.product16_code.len);
   memcpy(bch10_ptr->product_codes[15].quantity, db_bch10.product16_quantity.arr, db_bch10.product16_quantity.len);
   memcpy(bch10_ptr->product_codes[15].amount, db_bch10.product16_amount.arr, db_bch10.product16_amount.len);
   memcpy(bch10_ptr->product_codes[16].code, db_bch10.product17_code.arr, db_bch10.product17_code.len);
   memcpy(bch10_ptr->product_codes[16].quantity, db_bch10.product17_quantity.arr, db_bch10.product17_quantity.len);
   memcpy(bch10_ptr->product_codes[16].amount, db_bch10.product17_amount.arr, db_bch10.product17_amount.len);
   memcpy(bch10_ptr->product_codes[17].code, db_bch10.product18_code.arr, db_bch10.product18_code.len);
   memcpy(bch10_ptr->product_codes[17].quantity, db_bch10.product18_quantity.arr, db_bch10.product18_quantity.len);
   memcpy(bch10_ptr->product_codes[17].amount, db_bch10.product18_amount.arr, db_bch10.product18_amount.len);
   memcpy(bch10_ptr->product_codes[18].code, db_bch10.product19_code.arr, db_bch10.product19_code.len);
   memcpy(bch10_ptr->product_codes[18].quantity, db_bch10.product19_quantity.arr, db_bch10.product19_quantity.len);
   memcpy(bch10_ptr->product_codes[18].amount, db_bch10.product19_amount.arr, db_bch10.product19_amount.len);
   memcpy(bch10_ptr->product_codes[19].code, db_bch10.product20_code.arr, db_bch10.product20_code.len);
   memcpy(bch10_ptr->product_codes[19].quantity, db_bch10.product20_quantity.arr, db_bch10.product20_quantity.len);
   memcpy(bch10_ptr->product_codes[19].amount, db_bch10.product20_amount.arr, db_bch10.product20_amount.len);

   memcpy(bch10_ptr->aportionment_flag, db_bch10.aportionment_flag.arr, db_bch10.aportionment_flag.len);
   memcpy(bch10_ptr->exp_date, db_bch10.exp_date.arr, db_bch10.exp_date.len);
   memcpy(bch10_ptr->open_date, db_bch10.open_date.arr, db_bch10.open_date.len);
   memcpy(bch10_ptr->open_time, db_bch10.open_time.arr, db_bch10.open_time.len);
   memcpy(bch10_ptr->cash_bonus, db_bch10.cash_bonus.arr, db_bch10.cash_bonus.len);

/* The following 2 lines have been added by SDG */
	memcpy(bch10_ptr->transmission_timestamp, db_bch10.transmission_timestamp.arr, db_bch10.transmission_timestamp.len);
	memcpy(bch10_ptr->mcard_banknet, db_bch10.mcard_banknet.arr, db_bch10.mcard_banknet.len);
	memcpy(bch10_ptr->ticket_nbr, db_bch10.ticket_nbr.arr, db_bch10.ticket_nbr.len);
	memcpy(bch10_ptr->def_gross_amt, db_bch10.def_gross_amt.arr, db_bch10.def_gross_amt.len);
	memcpy(bch10_ptr->term, db_bch10.term.arr, db_bch10.term.len);
	memcpy(bch10_ptr->purge_date, db_bch10.purge_date.arr, db_bch10.purge_date.len);

}

void db_to_bch20 ( pARCHIVE_BCH20 bch20_ptr)
{
   memset(bch20_ptr, 0, sizeof(ARCHIVE_BCH20));
   memcpy(bch20_ptr->primary_key.device_id, db_bch20.device_id.arr, db_bch20.device_id.len);
   memcpy(bch20_ptr->primary_key.batch_nbr, db_bch20.batch_nbr.arr, db_bch20.batch_nbr.len);
   memcpy(bch20_ptr->primary_key.retrieval_ref_num, db_bch20.retrieval_ref_num.arr, db_bch20.retrieval_ref_num.len);
   memcpy(bch20_ptr->merchant_id, db_bch20.merchant_id.arr, db_bch20.merchant_id.len);
   memcpy(bch20_ptr->processing_code, db_bch20.processing_code.arr, db_bch20.processing_code.len);
   memcpy(bch20_ptr->tran_amount, db_bch20.tran_amount.arr, db_bch20.tran_amount.len);
   memcpy(bch20_ptr->response_code, db_bch20.response_code.arr, db_bch20.response_code.len);
   memcpy(bch20_ptr->auth_number, db_bch20.auth_number.arr, db_bch20.auth_number.len);
   memcpy(bch20_ptr->tran_date, db_bch20.tran_date.arr, db_bch20.tran_date.len);
   memcpy(bch20_ptr->tran_time, db_bch20.tran_time.arr, db_bch20.tran_time.len);
   memcpy(bch20_ptr->transaction_id, db_bch20.transaction_id.arr, db_bch20.transaction_id.len);
   memcpy(bch20_ptr->message_type, db_bch20.message_type.arr, db_bch20.message_type.len);
   memcpy(bch20_ptr->card_nbr, db_bch20.card_nbr.arr, db_bch20.card_nbr.len);
   memcpy(bch20_ptr->invoice_nbr, db_bch20.invoice_nbr.arr, db_bch20.invoice_nbr.len);
   memcpy(bch20_ptr->settle_file_prefix, db_bch20.settle_file_prefix.arr, db_bch20.settle_file_prefix.len);
   memcpy(bch20_ptr->product_code, db_bch20.product_code.arr, db_bch20.product_code.len);
   memcpy(bch20_ptr->odometer, db_bch20.odometer.arr, db_bch20.odometer.len);
   memcpy(bch20_ptr->sys_trace_audit_num, db_bch20.sys_trace_audit_num.arr, db_bch20.sys_trace_audit_num.len);
   bch20_ptr->tx_key = db_bch20.tx_key.arr[0];
   bch20_ptr->bin_type = db_bch20.bin_type.arr[0];

   memcpy(bch20_ptr->type_of_data, db_bch20.type_of_data.arr, db_bch20.type_of_data.len);
   memcpy(bch20_ptr->down_payment, db_bch20.down_payment.arr, db_bch20.down_payment.len);
   memcpy(bch20_ptr->period, db_bch20.period.arr, db_bch20.period.len);
   memcpy(bch20_ptr->interest_rate, db_bch20.interest_rate.arr, db_bch20.interest_rate.len);
   memcpy(bch20_ptr->total_interest, db_bch20.total_interest.arr, db_bch20.total_interest.len);
   memcpy(bch20_ptr->redemption_amount, db_bch20.redemption_amount.arr, db_bch20.redemption_amount.len);
   memcpy(bch20_ptr->vehicle_number, db_bch20.vehicle_number.arr, db_bch20.vehicle_number.len);
   memcpy(bch20_ptr->pos_entry_mode, db_bch20.pos_entry_mode.arr, db_bch20.pos_entry_mode.len);
   memcpy(bch20_ptr->profile, db_bch20.profile.arr, db_bch20.profile.len);
   
   memcpy(bch20_ptr->aportionment_flag, db_bch20.aportionment_flag.arr, db_bch20.aportionment_flag.len);
   memcpy(bch20_ptr->exp_date, db_bch20.exp_date.arr, db_bch20.exp_date.len);
   memcpy(bch20_ptr->open_date, db_bch20.open_date.arr, db_bch20.open_date.len);
   memcpy(bch20_ptr->open_time, db_bch20.open_time.arr, db_bch20.open_time.len);
   memcpy(bch20_ptr->cash_bonus, db_bch20.cash_bonus.arr, db_bch20.cash_bonus.len);
   memcpy(bch20_ptr->processed, db_bch20.processed.arr, db_bch20.processed.len);

   /* The following 2 lines have been added by SDG */
	memcpy(bch20_ptr->transmission_timestamp, db_bch20.transmission_timestamp.arr, db_bch20.transmission_timestamp.len);
	memcpy(bch20_ptr->mcard_banknet, db_bch20.mcard_banknet.arr, db_bch20.mcard_banknet.len);
	memcpy(bch20_ptr->ticket_nbr, db_bch20.ticket_nbr.arr, db_bch20.ticket_nbr.len);
	memcpy(bch20_ptr->def_gross_amt, db_bch20.def_gross_amt.arr, db_bch20.def_gross_amt.len);
	memcpy(bch20_ptr->term, db_bch20.term.arr, db_bch20.term.len);
    memcpy(bch20_ptr->product_codes[1].code, db_bch20.product2_code.arr, db_bch20.product2_code.len);
	memcpy(bch20_ptr->purge_date, db_bch20.purge_date.arr, db_bch20.purge_date.len);
}

/*************************************************************************************/
/*************************************************************************************/
void db_to_bch11 ( pARCHIVE_BCH11 bch11_ptr)
{
   memset(bch11_ptr, 0, sizeof(ARCHIVE_BCH11));
   memcpy(bch11_ptr->primary_key.device_id, db_bch11.device_id.arr, db_bch11.device_id.len);
   memcpy(bch11_ptr->primary_key.batch_nbr, db_bch11.batch_nbr.arr, db_bch11.batch_nbr.len);
   memcpy(bch11_ptr->primary_key.retrieval_ref_num, db_bch11.retrieval_ref_num.arr, db_bch11.retrieval_ref_num.len);
   memcpy(bch11_ptr->merchant_id, db_bch11.merchant_id.arr, db_bch11.merchant_id.len);
   memcpy(bch11_ptr->processing_code, db_bch11.processing_code.arr, db_bch11.processing_code.len);
   memcpy(bch11_ptr->tran_amount, db_bch11.tran_amount.arr, db_bch11.tran_amount.len);
   memcpy(bch11_ptr->response_code, db_bch11.response_code.arr, db_bch11.response_code.len);
   memcpy(bch11_ptr->auth_number, db_bch11.auth_number.arr, db_bch11.auth_number.len);
   memcpy(bch11_ptr->tran_date, db_bch11.tran_date.arr, db_bch11.tran_date.len);
   memcpy(bch11_ptr->tran_time, db_bch11.tran_time.arr, db_bch11.tran_time.len);
   memcpy(bch11_ptr->transaction_id, db_bch11.transaction_id.arr, db_bch11.transaction_id.len);
   memcpy(bch11_ptr->message_type, db_bch11.message_type.arr, db_bch11.message_type.len);
   memcpy(bch11_ptr->card_nbr, db_bch11.card_nbr.arr, db_bch11.card_nbr.len);
   memcpy(bch11_ptr->invoice_nbr, db_bch11.invoice_nbr.arr, db_bch11.invoice_nbr.len);
   memcpy(bch11_ptr->settle_file_prefix, db_bch11.settle_file_prefix.arr, db_bch11.settle_file_prefix.len);
   memcpy(bch11_ptr->product_code, db_bch11.product_code.arr, db_bch11.product_code.len);
   memcpy(bch11_ptr->odometer, db_bch11.odometer.arr, db_bch11.odometer.len);
   memcpy(bch11_ptr->sys_trace_audit_num, db_bch11.sys_trace_audit_num.arr, db_bch11.sys_trace_audit_num.len);
   bch11_ptr->tx_key = db_bch11.tx_key.arr[0];
   bch11_ptr->bin_type = db_bch11.bin_type.arr[0];

   memcpy(bch11_ptr->type_of_data, db_bch11.type_of_data.arr, db_bch11.type_of_data.len);
   memcpy(bch11_ptr->down_payment, db_bch11.down_payment.arr, db_bch11.down_payment.len);
   memcpy(bch11_ptr->period, db_bch11.period.arr, db_bch11.period.len);
   memcpy(bch11_ptr->interest_rate, db_bch11.interest_rate.arr, db_bch11.interest_rate.len);
   memcpy(bch11_ptr->total_interest, db_bch11.total_interest.arr, db_bch11.total_interest.len);
   memcpy(bch11_ptr->redemption_amount, db_bch11.redemption_amount.arr, db_bch11.redemption_amount.len);
   memcpy(bch11_ptr->vehicle_number, db_bch11.vehicle_number.arr, db_bch11.vehicle_number.len);
   memcpy(bch11_ptr->pos_entry_mode, db_bch11.pos_entry_mode.arr, db_bch11.pos_entry_mode.len);
   memcpy(bch11_ptr->profile, db_bch11.profile.arr, db_bch11.profile.len);
   memcpy(bch11_ptr->nbr_of_prod_codes, db_bch11.nbr_of_prod_codes.arr, db_bch11.nbr_of_prod_codes.len);
  
   memcpy(bch11_ptr->product_codes[0].code, db_bch11.product1_code.arr, db_bch11.product1_code.len);
   memcpy(bch11_ptr->product_codes[0].quantity, db_bch11.product1_quantity.arr, db_bch11.product1_quantity.len);
   memcpy(bch11_ptr->product_codes[0].amount, db_bch11.product1_amount.arr, db_bch11.product1_amount.len);   
   memcpy(bch11_ptr->product_codes[1].code, db_bch11.product2_code.arr, db_bch11.product2_code.len);
   memcpy(bch11_ptr->product_codes[1].quantity, db_bch11.product2_quantity.arr, db_bch11.product2_quantity.len);
   memcpy(bch11_ptr->product_codes[1].amount, db_bch11.product2_amount.arr, db_bch11.product2_amount.len);
   memcpy(bch11_ptr->product_codes[2].code, db_bch11.product3_code.arr, db_bch11.product3_code.len);
   memcpy(bch11_ptr->product_codes[2].quantity, db_bch11.product3_quantity.arr, db_bch11.product3_quantity.len);
   memcpy(bch11_ptr->product_codes[2].amount, db_bch11.product3_amount.arr, db_bch11.product3_amount.len);
   memcpy(bch11_ptr->product_codes[3].code, db_bch11.product4_code.arr, db_bch11.product4_code.len);
   memcpy(bch11_ptr->product_codes[3].quantity, db_bch11.product4_quantity.arr, db_bch11.product4_quantity.len);
   memcpy(bch11_ptr->product_codes[3].amount, db_bch11.product4_amount.arr, db_bch11.product4_amount.len);
   memcpy(bch11_ptr->product_codes[4].code, db_bch11.product5_code.arr, db_bch11.product5_code.len);
   memcpy(bch11_ptr->product_codes[4].quantity, db_bch11.product5_quantity.arr, db_bch11.product5_quantity.len);
   memcpy(bch11_ptr->product_codes[4].amount, db_bch11.product5_amount.arr, db_bch11.product5_amount.len);
   memcpy(bch11_ptr->product_codes[5].code, db_bch11.product6_code.arr, db_bch11.product6_code.len);
   memcpy(bch11_ptr->product_codes[5].quantity, db_bch11.product6_quantity.arr, db_bch11.product6_quantity.len);
   memcpy(bch11_ptr->product_codes[5].amount, db_bch11.product6_amount.arr, db_bch11.product6_amount.len);
   memcpy(bch11_ptr->product_codes[6].code, db_bch11.product7_code.arr, db_bch11.product7_code.len);
   memcpy(bch11_ptr->product_codes[6].quantity, db_bch11.product7_quantity.arr, db_bch11.product7_quantity.len);
   memcpy(bch11_ptr->product_codes[6].amount, db_bch11.product7_amount.arr, db_bch11.product7_amount.len);
   memcpy(bch11_ptr->product_codes[7].code, db_bch11.product8_code.arr, db_bch11.product8_code.len);
   memcpy(bch11_ptr->product_codes[7].quantity, db_bch11.product8_quantity.arr, db_bch11.product8_quantity.len);
   memcpy(bch11_ptr->product_codes[7].amount, db_bch11.product8_amount.arr, db_bch11.product8_amount.len);
   memcpy(bch11_ptr->product_codes[8].code, db_bch11.product9_code.arr, db_bch11.product9_code.len);
   memcpy(bch11_ptr->product_codes[8].quantity, db_bch11.product9_quantity.arr, db_bch11.product9_quantity.len);
   memcpy(bch11_ptr->product_codes[8].amount, db_bch11.product9_amount.arr, db_bch11.product9_amount.len);
   memcpy(bch11_ptr->product_codes[9].code, db_bch11.product10_code.arr, db_bch11.product10_code.len);
   memcpy(bch11_ptr->product_codes[9].quantity, db_bch11.product10_quantity.arr, db_bch11.product10_quantity.len);
   memcpy(bch11_ptr->product_codes[9].amount, db_bch11.product10_amount.arr, db_bch11.product10_amount.len);
   memcpy(bch11_ptr->product_codes[10].code, db_bch11.product11_code.arr, db_bch11.product11_code.len);
   memcpy(bch11_ptr->product_codes[10].quantity, db_bch11.product11_quantity.arr, db_bch11.product11_quantity.len);
   memcpy(bch11_ptr->product_codes[10].amount, db_bch11.product11_amount.arr, db_bch11.product11_amount.len);
   memcpy(bch11_ptr->product_codes[11].code, db_bch11.product12_code.arr, db_bch11.product12_code.len);
   memcpy(bch11_ptr->product_codes[11].quantity, db_bch11.product12_quantity.arr, db_bch11.product12_quantity.len);
   memcpy(bch11_ptr->product_codes[11].amount, db_bch11.product12_amount.arr, db_bch11.product12_amount.len);
   memcpy(bch11_ptr->product_codes[12].code, db_bch11.product13_code.arr, db_bch11.product13_code.len);
   memcpy(bch11_ptr->product_codes[12].quantity, db_bch11.product13_quantity.arr, db_bch11.product13_quantity.len);
   memcpy(bch11_ptr->product_codes[12].amount, db_bch11.product13_amount.arr, db_bch11.product13_amount.len);
   memcpy(bch11_ptr->product_codes[13].code, db_bch11.product14_code.arr, db_bch11.product14_code.len);
   memcpy(bch11_ptr->product_codes[13].quantity, db_bch11.product14_quantity.arr, db_bch11.product14_quantity.len);
   memcpy(bch11_ptr->product_codes[13].amount, db_bch11.product14_amount.arr, db_bch11.product14_amount.len);
   memcpy(bch11_ptr->product_codes[14].code, db_bch11.product15_code.arr, db_bch11.product15_code.len);
   memcpy(bch11_ptr->product_codes[14].quantity, db_bch11.product15_quantity.arr, db_bch11.product15_quantity.len);
   memcpy(bch11_ptr->product_codes[14].amount, db_bch11.product15_amount.arr, db_bch11.product15_amount.len);
   memcpy(bch11_ptr->product_codes[15].code, db_bch11.product16_code.arr, db_bch11.product16_code.len);
   memcpy(bch11_ptr->product_codes[15].quantity, db_bch11.product16_quantity.arr, db_bch11.product16_quantity.len);
   memcpy(bch11_ptr->product_codes[15].amount, db_bch11.product16_amount.arr, db_bch11.product16_amount.len);
   memcpy(bch11_ptr->product_codes[16].code, db_bch11.product17_code.arr, db_bch11.product17_code.len);
   memcpy(bch11_ptr->product_codes[16].quantity, db_bch11.product17_quantity.arr, db_bch11.product17_quantity.len);
   memcpy(bch11_ptr->product_codes[16].amount, db_bch11.product17_amount.arr, db_bch11.product17_amount.len);
   memcpy(bch11_ptr->product_codes[17].code, db_bch11.product18_code.arr, db_bch11.product18_code.len);
   memcpy(bch11_ptr->product_codes[17].quantity, db_bch11.product18_quantity.arr, db_bch11.product18_quantity.len);
   memcpy(bch11_ptr->product_codes[17].amount, db_bch11.product18_amount.arr, db_bch11.product18_amount.len);
   memcpy(bch11_ptr->product_codes[18].code, db_bch11.product19_code.arr, db_bch11.product19_code.len);
   memcpy(bch11_ptr->product_codes[18].quantity, db_bch11.product19_quantity.arr, db_bch11.product19_quantity.len);
   memcpy(bch11_ptr->product_codes[18].amount, db_bch11.product19_amount.arr, db_bch11.product19_amount.len);
   memcpy(bch11_ptr->product_codes[19].code, db_bch11.product20_code.arr, db_bch11.product20_code.len);
   memcpy(bch11_ptr->product_codes[19].quantity, db_bch11.product20_quantity.arr, db_bch11.product20_quantity.len);
   memcpy(bch11_ptr->product_codes[19].amount, db_bch11.product20_amount.arr, db_bch11.product20_amount.len);

   memcpy(bch11_ptr->aportionment_flag, db_bch11.aportionment_flag.arr, db_bch11.aportionment_flag.len);
   memcpy(bch11_ptr->exp_date, db_bch11.exp_date.arr, db_bch11.exp_date.len);
   memcpy(bch11_ptr->open_date, db_bch11.open_date.arr, db_bch11.open_date.len);
   memcpy(bch11_ptr->open_time, db_bch11.open_time.arr, db_bch11.open_time.len);
   memcpy(bch11_ptr->cash_bonus, db_bch11.cash_bonus.arr, db_bch11.cash_bonus.len);

   /* The following 2 lines have been added by SDG */
	memcpy(bch11_ptr->transmission_timestamp, db_bch11.transmission_timestamp.arr, db_bch11.transmission_timestamp.len);
	memcpy(bch11_ptr->mcard_banknet, db_bch11.mcard_banknet.arr, db_bch11.mcard_banknet.len);
	memcpy(bch11_ptr->ticket_nbr, db_bch11.ticket_nbr.arr, db_bch11.ticket_nbr.len);
	memcpy(bch11_ptr->def_gross_amt, db_bch11.def_gross_amt.arr, db_bch11.def_gross_amt.len);
	memcpy(bch11_ptr->term, db_bch11.term.arr, db_bch11.term.len);
	memcpy(bch11_ptr->purge_date, db_bch11.purge_date.arr, db_bch11.purge_date.len);
  

}
/*************************************************************************************/
/*************************************************************************************/
void bch01_to_db( pARCHIVE_BCH01 bch01_ptr )
{
  memcpy (&pte_archive_bch01, bch01_ptr, sizeof(pte_archive_bch01));
}

/*************************************************************************************/
/*************************************************************************************/
void bch10_to_db( pARCHIVE_BCH10 bch10_ptr )
{
  memcpy (&pte_archive_bch10, bch10_ptr, sizeof(pte_archive_bch10));
}
/*************************************************************************************/
/*************************************************************************************/
void bch11_to_db( pARCHIVE_BCH11 bch11_ptr )
{
  memcpy (&pte_archive_bch11, bch11_ptr, sizeof(pte_archive_bch11));
}

void bch20_to_db( pARCHIVE_BCH20 bch20_ptr )
{
   memcpy (&pte_archive_bch20, bch20_ptr, sizeof(pte_archive_bch20));

   /* Unix implements unsigned chars greater than 127 by wrapping around zero.
    * That causes the tx_key in the database to not be accurate.  So for tx_keys
    * above 127, subtract 100.  This puts the request tx_key, not the response
    * tx_key, into the database.
    */
   if ( bch20_ptr->tx_key > 127 )
      pte_archive_bch20.tx_key -= 100;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_select_tlf01 (  pCHAR          Primary_key, 
                        pARCHIVE_TLF01         tlf01_ptr, 
                        pCHAR          ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
   pARCHIVE_TLF01  tlf01_local;
   BYTE local_system_date[9]="";
   EXEC SQL END DECLARE SECTION;	
   memset( &db_tlf01, 0, sizeof( db_tlf01 ) );
 
   tlf01_local=(pARCHIVE_TLF01*)Primary_key;
   strncpy( pte_archive_tlf01.transaction_id, Primary_key, sizeof(pte_archive_tlf01.transaction_id) );
   strncpy( local_system_date,  tlf01_local->system_date,8);
   
    if( true == isnum(local_system_date,8))
    {
       if ( db_error_statics_flag == true )
	   {
	      start_time = ptetime_get_time();
	   }
		EXEC SQL SELECT *
		INTO :db_tlf01
		FROM tlf01_archive
		WHERE transaction_id = :pte_archive_tlf01.transaction_id AND
			  system_date    = :local_system_date;
		if ( db_error_statics_flag == true )
		{
			end_time = ptetime_get_time();
			duration = end_time - start_time;
			if(duration >= db_error_statics_value)
			{
				memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Archds, ST1:%d,ST2:%d,Data_Type : TLF01 ,Fun_Name : db_select_tlf01_S1 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
			}
		}	  
	}
	else
	{
	   if ( db_error_statics_flag == true )
	   {
	      start_time = ptetime_get_time();
	   }
		EXEC SQL SELECT *
		INTO :db_tlf01
		FROM tlf01_archive
		WHERE transaction_id = :pte_archive_tlf01.transaction_id ;
		
		if ( db_error_statics_flag == true )
		{
			end_time = ptetime_get_time();
			duration = end_time - start_time;
			if(duration >= db_error_statics_value)
			{
				memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Archds, ST1:%d,ST2:%d,Data_Type : TLF01 ,Fun_Name : db_select_tlf01_S2 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
			}
		}
    }
      
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_select_tlf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_tlf01 (tlf01_ptr);

   return PTEMSG_OK;
}

BYTE db_select_emvraw (  pCHAR          Primary_key, 
                        pEMV_RAW         emvraw_ptr, 
                        pCHAR          ErrorMsg )
{
   memset( &db_emv_raw, 0, sizeof( db_emv_raw ) );
   strncpy( pte_archive_tlf01.transaction_id, Primary_key, sizeof(pte_archive_tlf01.transaction_id) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL SELECT 
      *
   INTO
      :db_emv_raw
   FROM EMV_RAW
   WHERE transaction_id = :pte_archive_tlf01.transaction_id;

	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Archds, ST1:%d,ST2:%d,Data_Type : EMV_RAW ,Fun_Name : db_select_emvraw , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}
	if ( SQLCODE != 0 )
	{
		/*return( dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) );*/
		 memset(er_buf,0x00,sizeof(er_buf));
	     dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	     sprintf(er_buf,"In  db_select_emvraw,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
	     strcat(er_buf,ErrorMsg);
	     Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 memset(emvraw_ptr, 0, sizeof(EMV_RAW));
	}
	else
	{
		memcpy( emvraw_ptr->transaction_id, db_emv_raw.tran_id,  sizeof(db_emv_raw.tran_id)  );   
		memcpy( emvraw_ptr->DATA_LENGTH, db_emv_raw.len, sizeof(db_emv_raw.len) );
		memcpy( emvraw_ptr->RAW_DATA, &db_emv_raw.emvblock.pin_data, sizeof(emvraw_ptr->RAW_DATA) );
		memcpy( emvraw_ptr->system_date, db_emv_raw.sys_date, sizeof(db_emv_raw.sys_date) );
	}
   

   return PTEMSG_OK;   
}

/****************************************************************************/
/****************************************************************************/

BYTE db_get_tlf01_gui_list_dynamic_new (pARCHIVE_TLF01_LIMITS    Tlf01_ptr, 
                                        pARCHIVE_TLF01_GUI_LIST  Tlf01_Gui_List, 
                                        pCHAR            ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
      char transaction_id    [21];
      char card_num          [21];
      char date_yyyymmdd_start[9];
      char date_yyyymmdd_end  [9];
      char time_hhmmss_start  [7];
      char time_hhmmss_end    [7];
      char merchant_id       [16];
      char terminal_id        [9];
	  char auth_number		[7],temp_date[15]={0};
      varchar db_transaction_id     [21];
      varchar db_terminal_id         [9];
      varchar db_merchant_id        [16];
      varchar db_card_num           [20];
      varchar db_total_amount       [13];
      varchar db_response_code       [3];
      varchar db_retrieval_ref_num  [13];
      varchar db_time_hhmmss         [7];
      varchar db_date_yyyymmdd       [9];
      varchar db_acquirer_id        [21];
      varchar db_issuer_id          [21];
      varchar db_sys_trace_audit_num [7];
      varchar db_system_date         [9];
      varchar db_auth_number		[7];
      varchar sqltextvar[1000];

      int  len;
      int  temp;

      unsigned char gui_wildcard    = '*';
      unsigned char oracle_wildcard = '%';

   EXEC SQL END DECLARE SECTION;

   memset(  Tlf01_Gui_List, 0, sizeof(ARCHIVE_TLF01_GUI_LIST) );
   strcpy(  Tlf01_Gui_List->num_returned,"0");
   strncpy( transaction_id,      Tlf01_ptr->transaction_id,     sizeof(transaction_id)      );
   strncpy( card_num,            Tlf01_ptr->card_num_min,       sizeof(card_num)            );
   strncpy( date_yyyymmdd_start, Tlf01_ptr->date_yyyymmdd_start,sizeof(date_yyyymmdd_start) );
   strncpy( date_yyyymmdd_end,   Tlf01_ptr->date_yyyymmdd_end,  sizeof(date_yyyymmdd_end)   );
   strncpy( time_hhmmss_start,   Tlf01_ptr->time_hhmmss_start,  sizeof(time_hhmmss_start)   );
   strncpy( time_hhmmss_end,     Tlf01_ptr->time_hhmmss_end,    sizeof(time_hhmmss_end)     );
   strncpy( merchant_id,         Tlf01_ptr->merchant_id_min,    sizeof(merchant_id)         );
   strncpy( terminal_id,         Tlf01_ptr->terminal_id_min,    sizeof(terminal_id)         );
   strncpy( auth_number,         Tlf01_ptr->auth_number_min,       sizeof(auth_number)         );

   /* -------------------------------------------------------------- */
   /* Dynamically build select based on presence or absence of data. */
   /* -------------------------------------------------------------- */

   temp = 0;

   /* Determine which index hint to use based on which data is present. */
   /* ----------------------------------------------------------------- */
   if ( card_num[0] != 0x00 )
   {
      /* Use index on card_num. */
      strcpy( sqltextvar.arr,
             "(SELECT /*+ index(TLF01 IDX_TLF01_CARD_NUM) */ ");
   }
   else if ( merchant_id[0] != 0x00 )
   {
      /* Use index on merchant_id. */
      strcpy( sqltextvar.arr,
             "(SELECT /*+ index(TLF01 IDX_TLF01_MERCH_ID) */ ");
   }
   else if ( date_yyyymmdd_start[0] != 0x00 )
   {
      /* Use index on system_date, transaction_id. */
      strcpy( sqltextvar.arr,
             "(SELECT /*+ index(TLF01 IDX_TLF01_AUTHLOG) */ ");
   }
   else
   {
      /* No index - let the Oracle Optimizer figure it out. */
      strcpy( sqltextvar.arr, "(SELECT ");
   }

   /* Complete the SELECT clause, with FROM, and start the WHERE clause */
   strcat( sqltextvar.arr,
          "* FROM TLF01_ARCHIVE WHERE " );


   /* ----------- */
   /* CARD NUMBER */
   /* ----------- */

   len = strlen( card_num );
   if ( len > 0 )
   {
      if ( card_num[len-1] == gui_wildcard )
      {
         /* Operator used a wild card on card number.  Need to use a 'like'. */
         card_num[len-1] = oracle_wildcard;
         sprintf( sqltextvar.arr,
                 "%s card_num like '%s'",
                  sqltextvar.arr, card_num );
      }
      else
      {
         sprintf( sqltextvar.arr,
                 "%s card_num = '%s'",
                  sqltextvar.arr, card_num );
      }
      temp = 1;
   }

   /* ---------- */
   /* DATE RANGE */
   /* ---------- */

   if ( date_yyyymmdd_start[0] != '\0' )
   {
      if ( 0 == strcmp(date_yyyymmdd_start, date_yyyymmdd_end) )
      {
         /* Start date and End date are the same. */
         /* ------------------------------------- */
         if ( temp == 1 )
         {
            sprintf( sqltextvar.arr,
                    "%s and system_date = '%s'",
                     sqltextvar.arr, date_yyyymmdd_start );
         }
         else
         {
            temp = 1;
            sprintf( sqltextvar.arr,
                    "%s system_date = '%s'",
                     sqltextvar.arr, date_yyyymmdd_start );
         }
      }
      else
      {
         /* Start date and End date are different. */
         /* -------------------------------------- */
         if ( temp == 1 )
         {
            sprintf( sqltextvar.arr,
                    "%s and system_date >= '%s' and system_date <= '%s'",
                     sqltextvar.arr, date_yyyymmdd_start, date_yyyymmdd_end );
         }
         else
         {
            temp = 1;
            sprintf( sqltextvar.arr,
                    "%s system_date >= '%s' and system_date <= '%s'",
                     sqltextvar.arr, date_yyyymmdd_start, date_yyyymmdd_end );
         }
      }
   }

   /* ---------- */
   /* AUTH NUMBER */
   /* ---------- */
      len = strlen( auth_number);
   if ( len > 0 )
   {
   
      if ( auth_number[len-1] == gui_wildcard )
      {
         /* Operator used a wild card on card number.  Need to use a 'like'. */
  	if ( temp == 1 )
         {
         	auth_number[len-1] = oracle_wildcard;
         	sprintf( sqltextvar.arr,
                 "%s and auth_number like '%s'",
                  sqltextvar.arr, auth_number );
                  }
                  else
                  {
                    auth_number[len-1] = oracle_wildcard;
       	  sprintf( sqltextvar.arr,
                 "%s auth_number like '%s'",
                  sqltextvar.arr, auth_number );
                  }
      }
      else
      {
          	if ( temp == 1 )
		{ sprintf( sqltextvar.arr,
                 "%s and auth_number = '%s'",
                  sqltextvar.arr, auth_number );
                  }else
                  {
                  sprintf( sqltextvar.arr,
                 "%s  auth_number = '%s'",
                  sqltextvar.arr, auth_number );
                  }
      }
      temp = 1;
   }


   /* -------------- */
   /* TRANSACTION ID */
   /* -------------- */

   if(transaction_id[0] != '\0')
   {
      if ( temp == 1 )
      {
         sprintf( sqltextvar.arr,
                 "%s and transaction_id >= '%s'",
                  sqltextvar.arr, transaction_id );
      }
      else
      {
         temp = 1;
         sprintf( sqltextvar.arr,
                 "%s transaction_id >= '%s'",
                  sqltextvar.arr, transaction_id );
      }
   }


   /* ----------- */
   /* MERCHANT ID */
   /* ----------- */

   len = strlen( merchant_id );
   if ( len > 0 )
   {
      if ( temp == 1 )
      {
         if ( merchant_id[len-1] == gui_wildcard )
         {
            /* Operator used wild card on merchant.  Need to use 'like' cmd. */
            merchant_id[len-1] = oracle_wildcard;
            sprintf( sqltextvar.arr,
                    "%s and merchant_id like '%s'",
                     sqltextvar.arr, merchant_id );
         }
         else
         {
            sprintf( sqltextvar.arr,
                    "%s and merchant_id = '%s'",
                     sqltextvar.arr, merchant_id );
         }
      }
      else
      {
         temp = 1;
         if ( merchant_id[len-1] == gui_wildcard )
         {
            /* Operator used wild card on merchant.  Need to use 'like' cmd. */
            merchant_id[len-1] = oracle_wildcard;
            sprintf( sqltextvar.arr,
                    "%s merchant_id like '%s'",
                     sqltextvar.arr, merchant_id );
         }
         else
         {
            sprintf( sqltextvar.arr,
                    "%s merchant_id = '%s'",
                     sqltextvar.arr, merchant_id );
         }
      }
   }


   /* ----------- */
   /* TERMINAL ID */
   /* ----------- */

   len = strlen( terminal_id );
   if ( len > 0 )
   {
      if ( temp == 1 )
      {
         if ( terminal_id[len-1] == gui_wildcard )
         {
            /* Operator used wild card on terminal.  Need to use 'like' cmd. */
            terminal_id[len-1] = oracle_wildcard;
            sprintf( sqltextvar.arr,
                    "%s and terminal_id like '%s'",
                     sqltextvar.arr, terminal_id );
         }
         else
         {
            sprintf( sqltextvar.arr,
                    "%s and terminal_id = '%s'",
                     sqltextvar.arr, terminal_id );
         }
      }
      else
      {
         temp = 1;
         if ( terminal_id[len-1] == gui_wildcard )
         {
            /* Operator used wild card on terminal.  Need to use 'like' cmd. */
            terminal_id[len-1] = oracle_wildcard;
            sprintf( sqltextvar.arr,
                    "%s terminal_id like '%s'",
                     sqltextvar.arr, terminal_id );
         }
         else
         {
            sprintf( sqltextvar.arr,
                    "%s terminal_id = '%s'",
                     sqltextvar.arr, terminal_id );
         }
      }
   }


   /* ---------- */
   /* TIME RANGE */
   /* ---------- */

   if(time_hhmmss_start[0] != '\0')
   {
      if ( temp == 1 )
      {
         sprintf( sqltextvar.arr,
                 "%s and time_hhmmss >= '%s' and time_hhmmss <= '%s'",
                  sqltextvar.arr, time_hhmmss_start, time_hhmmss_end );
      }
      else
      {
         temp = 1;
         sprintf( sqltextvar.arr,
                 "%s time_hhmmss >= '%s' and time_hhmmss <= '%s'",
                  sqltextvar.arr, time_hhmmss_start, time_hhmmss_end );
      }
   }
   

   /* -------- */
   /* ORDER BY */
   /* -------- */

   sprintf( sqltextvar.arr,
           "%s) ORDER BY transaction_id",
            sqltextvar.arr );

   sqltextvar.len = strlen(sqltextvar.arr);

 EXEC SQL ALTER session SET nls_date_format = 'YYYYMMDD';

 printf("TLF01 query: %s \n",sqltextvar.arr);

  EXEC SQL  SELECT sysdate INTO :temp_date FROM dual;

  printf ("sysdate : %s \n ",temp_date);

   EXEC SQL PREPARE S FROM :sqltextvar;

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DECLARE tlf01_cursor_lookup CURSOR FOR S;

	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Archds, ST1:%d,ST2:%d,Data_Type : TLF01 ,Fun_Name : db_get_tlf01_gui_list_dynamic_new_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}

   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN tlf01_cursor_lookup;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < ARCH_GUI_MAX_LIST_SIZE ; temp++ )
   {
      if ( db_error_statics_flag == true )
	  {
	      start_time = ptetime_get_time();
	  }
      EXEC SQL FETCH tlf01_cursor_lookup
      INTO :db_tlf01;

	  if ( db_error_statics_flag == true )
	  {
		  end_time = ptetime_get_time();
		  duration = end_time - start_time;
		  if(duration >= db_error_statics_value)
		  {
			  memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			  sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Archds, ST1:%d,ST2:%d,Data_Type : TLF01 ,Fun_Name : db_get_tlf01_gui_list_dynamic_new_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			  Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		  }
	  }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE tlf01_cursor_lookup;

		 printf("sql_error2-> SQLCODE :%d\n",SQLCODE);
         memset(er_buf,0x00,sizeof(er_buf));
	     DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	     sprintf(er_buf,"In  db_get_tlf01_gui_list_dynamic_new,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
	     strcat(er_buf,ErrorMsg);
	     Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	     return DB_rcode;
      }
      db_to_tlf01(&Tlf01_Gui_List->tlf01_structure[temp]);
	
      itoa(temp + 1, Tlf01_Gui_List->num_returned, 10);
   }

   EXEC SQL CLOSE tlf01_cursor_lookup;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   printf("sql_error-> SQLCODE :%d\n",SQLCODE);
   memset(er_buf,0x00,sizeof(er_buf));
   DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
   sprintf(er_buf,"In  db_get_tlf01_gui_list_dynamic_new,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
   strcat(er_buf,ErrorMsg);
   Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
   return DB_rcode;

}

/****************************************************************************/
/****************************************************************************/

BYTE db_get_bch01_gui_list( pARCHIVE_BCH01 bch01_ptr,
                                pARCHIVE_BCH01_GUI_LIST Bch01_List,
                                pCHAR ErrorMsg )
{
   INT  retval;

    EXEC SQL BEGIN DECLARE SECTION;
    char device_id[9];
    char batch_nbr[7];
    char batch_status[2];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Bch01_List, 0, sizeof(ARCHIVE_BCH01_GUI_LIST) );
   strcpy(Bch01_List->num_returned,"0");
   strncpy( device_id, bch01_ptr->primary_key.device_id, sizeof(device_id) );
   strncpy( batch_nbr, bch01_ptr->primary_key.batch_nbr, sizeof(batch_nbr) );
   strncpy( batch_status, "A", sizeof(batch_status) );

	if(strlen(batch_nbr) == 0)
	{
		strcpy(batch_nbr, " ");
	}

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DECLARE bch01_cursor3 CURSOR FOR
      SELECT * from bch01_archive
      WHERE  batch_nbr >= :batch_nbr AND device_id = :device_id
      ORDER BY batch_nbr;
    
   	if ( db_error_statics_flag == true )
	{
		 end_time = ptetime_get_time();
		 duration = end_time - start_time;
		 if(duration >= db_error_statics_value)
		 {
			 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Archds, ST1:%d,ST2:%d,Data_Type : BCH01_ARCHIVE ,Fun_Name : db_get_bch01_gui_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		 }
	 } 
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN bch01_cursor3;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < ARCH_GUI_MAX_LIST_SIZE ; temp++ )
   {
      memset(&db_bch01, 0x00, sizeof(db_bch01));
       if ( db_error_statics_flag == true )
	   {
	      start_time = ptetime_get_time();
	   }
      EXEC SQL FETCH bch01_cursor3
      INTO :db_bch01;

   	if ( db_error_statics_flag == true )
	{
		 end_time = ptetime_get_time();
		 duration = end_time - start_time;
		 if(duration >= db_error_statics_value)
		 {
			 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Archds, ST1:%d,ST2:%d,Data_Type : BCH01_ARCHIVE ,Fun_Name : db_get_bch01_gui_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		 }
	 }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE bch01_cursor3;
		 printf("sql_error2-> SQLCODE :%d\n",SQLCODE);
         memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In  db_get_bch01_gui_list,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;
      }
      db_to_bch01(&Bch01_List->batch_record[temp]);
      itoa(temp + 1, Bch01_List->num_returned, 10);
   }

   EXEC SQL CLOSE bch01_cursor3;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   printf("sql_error-> SQLCODE :%d\n",SQLCODE);
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_bch01_gui_list,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;

}

/**************************************************************************************************/
/**************************************************************************************************/
BYTE db_get_bch10_gui_list( pARCHIVE_BCH10 bch10_ptr,
                                pARCHIVE_BCH10_GUI_LIST Bch10_List,
                                pCHAR ErrorMsg )
{
   INT  retval = 0;
	return retval;
 
}

/**************************************************************************************************/
BYTE db_get_bch11_gui_list( pARCHIVE_BCH11 bch11_ptr,
                                pARCHIVE_BCH11_GUI_LIST Bch11_List,
                                pCHAR ErrorMsg )
{
   INT  retval;

    EXEC SQL BEGIN DECLARE SECTION;
    char device_id[9];
    char batch_nbr[7]={0};
    char retrieval_ref_num[13];
    char open_date[10];
	char merchant_id       [16];
	char transaction_id    [21]={0};
    char open_time[7]={0},temp_date[15]={0};
	int  len;
	int  temp;

	unsigned char gui_wildcard    = '*';
	unsigned char oracle_wildcard = '%';
	varchar sqltextvar[1000];
    EXEC SQL END DECLARE SECTION;

   memset( Bch11_List, 0, sizeof(ARCHIVE_BCH11_GUI_LIST) );
   strcpy(Bch11_List->num_returned,"0");
   strncpy( device_id, bch11_ptr->primary_key.device_id, sizeof(device_id) );
   strncpy( batch_nbr, bch11_ptr->primary_key.batch_nbr, sizeof(batch_nbr) );
   strncpy( retrieval_ref_num, bch11_ptr->primary_key.retrieval_ref_num, sizeof(retrieval_ref_num) );
   strncpy( transaction_id, bch11_ptr->transaction_id, sizeof(transaction_id) );
   strncpy( merchant_id, bch11_ptr->merchant_id, sizeof(merchant_id) );
   strncpy( open_date, bch11_ptr->open_date, sizeof(open_date) );
   strncpy( open_time, bch11_ptr->open_time, sizeof(open_time) );
   
   /* Complete the SELECT clause, with FROM, and start the WHERE clause */
   strcpy( sqltextvar.arr,
          "(SELECT * FROM BCH11_ARCHIVE WHERE " );
	/* ----------- */
	/* BATCH NUMBER */
	/* ----------- */

	len = strlen( batch_nbr );
	if ( len > 0 )
	{
		if ( batch_nbr[len-1] == gui_wildcard )
		{
			/* Operator used a wild card on card number.  Need to use a 'like'. */
			batch_nbr[len-1] = oracle_wildcard;
			sprintf( sqltextvar.arr,
				 "%s batch_nbr like '%s'",
				  sqltextvar.arr, batch_nbr );
		}
		else
		{
			sprintf( sqltextvar.arr,
				 "%s batch_nbr = '%s'",
				  sqltextvar.arr, batch_nbr );
		}
		temp = 1;
	}

	/* -------------- */
	/* TRANSACTION ID */
	/* -------------- */

	if(transaction_id[0] != '\0' && transaction_id[1] != '\0')
	{
	  if ( temp == 1 )
	  {
		 sprintf( sqltextvar.arr,
				 "%s and transaction_id >= '%s'",
				  sqltextvar.arr, transaction_id );
	  }
	  else
	  {
		 temp = 1;
		 sprintf( sqltextvar.arr,
				 "%s transaction_id >= '%s'",
				  sqltextvar.arr, transaction_id );
	  }
	}

	/* ----------- */
	/* TERMINAL ID */
	/* ----------- */

	len = strlen( device_id );
	if ( len > 0 )
	{
	  if ( temp == 1 )
	  {
		 if ( device_id[len-1] == gui_wildcard )
		 {
			/* Operator used wild card on terminal.  Need to use 'like' cmd. */
			device_id[len-1] = oracle_wildcard;
			sprintf( sqltextvar.arr,
					"%s and device_id like '%s'",
					 sqltextvar.arr, device_id );
		 }
		 else
		 {
			sprintf( sqltextvar.arr,
					"%s and device_id = '%s'",
					 sqltextvar.arr, device_id );
		 }
	  }
	  else
	  {
		 temp = 1;
		 if ( device_id[len-1] == gui_wildcard )
		 {
			/* Operator used wild card on terminal.  Need to use 'like' cmd. */
			device_id[len-1] = oracle_wildcard;
			sprintf( sqltextvar.arr,
					"%s device_id like '%s'",
					 sqltextvar.arr, device_id );
		 }
		 else
		 {
			sprintf( sqltextvar.arr,
					"%s device_id = '%s'",
					 sqltextvar.arr, device_id );
		 }
	  }
	}

	/* ----------- */
	/* MERCHANT ID */
	/* ----------- */

	len = strlen( merchant_id );
	if ( len > 0 )
	{
	  if ( temp == 1 )
	  {
		 if ( merchant_id[len-1] == gui_wildcard )
		 {
			/* Operator used wild card on merchant.  Need to use 'like' cmd. */
			merchant_id[len-1] = oracle_wildcard;
			sprintf( sqltextvar.arr,
					"%s and merchant_id like '%s'",
					 sqltextvar.arr, merchant_id );
		 }
		 else
		 {
			sprintf( sqltextvar.arr,
					"%s and merchant_id = '%s'",
					 sqltextvar.arr, merchant_id );
		 }
	  }
	  else
	  {
		 temp = 1;
		 if ( merchant_id[len-1] == gui_wildcard )
		 {
			/* Operator used wild card on merchant.  Need to use 'like' cmd. */
			merchant_id[len-1] = oracle_wildcard;
			sprintf( sqltextvar.arr,
					"%s merchant_id like '%s'",
					 sqltextvar.arr, merchant_id );
		 }
		 else
		 {
			sprintf( sqltextvar.arr,
					"%s merchant_id = '%s'",
					 sqltextvar.arr, merchant_id );
		 }
	  }
	}


	/* ----------- */
	/* RETRIEVAL_REF_NUM */
	/* ----------- */

	len = strlen( retrieval_ref_num );
	if ( len > 0 )
	{
	  if ( temp == 1 )
	  {
		 if ( retrieval_ref_num[len-1] == gui_wildcard )
		 {
			/* Operator used wild card on terminal.  Need to use 'like' cmd. */
			retrieval_ref_num[len-1] = oracle_wildcard;
			sprintf( sqltextvar.arr,
					"%s and retrieval_ref_num like '%s'",
					 sqltextvar.arr, retrieval_ref_num );
		 }
		 else
		 {
			sprintf( sqltextvar.arr,
					"%s and retrieval_ref_num = '%s'",
					 sqltextvar.arr, retrieval_ref_num );
		 }
	  }
	  else
	  {
		 temp = 1;
		 if ( retrieval_ref_num[len-1] == gui_wildcard )
		 {
			/* Operator used wild card on terminal.  Need to use 'like' cmd. */
			retrieval_ref_num[len-1] = oracle_wildcard;
			sprintf( sqltextvar.arr,
					"%s retrieval_ref_num like '%s'",
					 sqltextvar.arr, retrieval_ref_num );
		 }
		 else
		 {
			sprintf( sqltextvar.arr,
					"%s retrieval_ref_num = '%s'",
					 sqltextvar.arr, retrieval_ref_num );
		 }
	  }
	}

	/* ----------- */
	/* OPEN DATE */
	/* ----------- */

	if(open_date[0] != '\0')
	{
	  if ( temp == 1 )
	  {
		 sprintf( sqltextvar.arr,
				 "%s and open_date >= '%s'",
				  sqltextvar.arr, open_date );
	  }
	  else
	  {
		 temp = 1;
		 sprintf( sqltextvar.arr,
				 "%s open_date >= '%s'",
				  sqltextvar.arr, open_date );
	  }
	}


   /* -------- */
   /* ORDER BY */
   /* -------- */

   sprintf( sqltextvar.arr,
           "%s) ORDER BY transaction_id",
            sqltextvar.arr );

   sqltextvar.len = strlen(sqltextvar.arr);
	
   EXEC SQL ALTER session SET nls_date_format = 'YYYYMMDD';

   printf("BCH11 query: %s \n",sqltextvar.arr);

  EXEC SQL  SELECT sysdate INTO :temp_date FROM dual;

  printf ("sysdate : %s \n ",temp_date);

   EXEC SQL PREPARE S FROM :sqltextvar;

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DECLARE bch11_cursor3 CURSOR FOR S;

   	if ( db_error_statics_flag == true )
	{
		 end_time = ptetime_get_time();
		 duration = end_time - start_time;
		 if(duration >= db_error_statics_value)
		 {
			 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Archds, ST1:%d,ST2:%d,Data_Type : BCH11_ARCHIVE ,Fun_Name : db_get_bch11_gui_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		 }
	 }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN bch11_cursor3;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;

   for ( temp = 0; temp < ARCH_GUI_MAX_LIST_SIZE ; temp++ )
   {
      memset(&db_bch11, 0x00, sizeof(db_bch11));
       if ( db_error_statics_flag == true )
	   {
	      start_time = ptetime_get_time();
	   }
      EXEC SQL FETCH bch11_cursor3
      INTO :db_bch11;
      if ( db_error_statics_flag == true )
	  {
		 end_time = ptetime_get_time();
		 duration = end_time - start_time;
		 if(duration >= db_error_statics_value)
		 {
			 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Archds, ST1:%d,ST2:%d,Data_Type : BCH11_ARCHIVE ,Fun_Name : db_get_bch11_gui_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		 }
	  }

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE bch11_cursor3;
		 printf("sql_error2-> SQLCODE :%d\n",SQLCODE);
         memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In  db_get_bch11_gui_list,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;
      }
      db_to_bch11(&Bch11_List->batch_list[temp]);
      itoa(temp + 1, Bch11_List->num_returned, 10);
   }

   EXEC SQL CLOSE bch11_cursor3;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   printf("sql_error-> SQLCODE :%d\n",SQLCODE);
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_bch11_gui_list,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;

}

/**************************************************************************************************/
/**************************************************************************************************/
BYTE db_get_bch20_gui_list( pARCHIVE_BCH20 bch20_ptr,
                                pARCHIVE_BCH20_GUI_LIST Bch20_List,
                                pCHAR ErrorMsg )
{
   INT  retval;

    EXEC SQL BEGIN DECLARE SECTION;
     char device_id[9];
    char batch_nbr[7];
    char retrieval_ref_num[13];
    char open_date[10];
	char merchant_id       [16];
	char transaction_id    [21]={0};
    char open_time[7],temp_date[15]="";
	int  len;
	int  temp;

	unsigned char gui_wildcard    = '*';
	unsigned char oracle_wildcard = '%';
	varchar sqltextvar[1000];
    EXEC SQL END DECLARE SECTION;

   memset( Bch20_List, 0, sizeof(ARCHIVE_BCH20_GUI_LIST) );
   strcpy(Bch20_List->num_returned,"0");
   strncpy( device_id, bch20_ptr->primary_key.device_id, sizeof(device_id) );
   strncpy( batch_nbr, bch20_ptr->primary_key.batch_nbr, sizeof(batch_nbr) );
   strncpy( retrieval_ref_num, bch20_ptr->primary_key.retrieval_ref_num, sizeof(retrieval_ref_num) );
   strncpy( open_date, bch20_ptr->open_date, sizeof(open_date) );
   strncpy( transaction_id, bch20_ptr->transaction_id, sizeof(transaction_id) );
   strncpy( merchant_id, bch20_ptr->merchant_id, sizeof(merchant_id) );
   strncpy( open_time, bch20_ptr->open_time, sizeof(open_time) );

/* Complete the SELECT clause, with FROM, and start the WHERE clause */
   strcpy( sqltextvar.arr,
          "(SELECT * FROM BCH20_ARCHIVE WHERE " );
	/* ----------- */
	/* BATCH NUMBER */
	/* ----------- */

	len = strlen( batch_nbr );
	if ( len > 0 )
	{
		if ( batch_nbr[len-1] == gui_wildcard )
		{
			/* Operator used a wild card on card number.  Need to use a 'like'. */
			batch_nbr[len-1] = oracle_wildcard;
			sprintf( sqltextvar.arr,
				 "%s batch_nbr like '%s'",
				  sqltextvar.arr, batch_nbr );
		}
		else
		{
			sprintf( sqltextvar.arr,
				 "%s batch_nbr = '%s'",
				  sqltextvar.arr, batch_nbr );
		}
		temp = 1;
	}

	/* -------------- */
	/* TRANSACTION ID */
	/* -------------- */

	if(transaction_id[0] != '\0' && transaction_id[1] != '\0')
	{
	  if ( temp == 1 )
	  {
		 sprintf( sqltextvar.arr,
				 "%s and transaction_id >= '%s'",
				  sqltextvar.arr, transaction_id );
	  }
	  else
	  {
		 temp = 1;
		 sprintf( sqltextvar.arr,
				 "%s transaction_id >= '%s'",
				  sqltextvar.arr, transaction_id );
	  }
	}

	/* ----------- */
	/* TERMINAL ID */
	/* ----------- */

	len = strlen( device_id );
	if ( len > 0 )
	{
	  if ( temp == 1 )
	  {
		 if ( device_id[len-1] == gui_wildcard )
		 {
			/* Operator used wild card on terminal.  Need to use 'like' cmd. */
			device_id[len-1] = oracle_wildcard;
			sprintf( sqltextvar.arr,
					"%s and device_id like '%s'",
					 sqltextvar.arr, device_id );
		 }
		 else
		 {
			sprintf( sqltextvar.arr,
					"%s and device_id = '%s'",
					 sqltextvar.arr, device_id );
		 }
	  }
	  else
	  {
		 temp = 1;
		 if ( device_id[len-1] == gui_wildcard )
		 {
			/* Operator used wild card on terminal.  Need to use 'like' cmd. */
			device_id[len-1] = oracle_wildcard;
			sprintf( sqltextvar.arr,
					"%s device_id like '%s'",
					 sqltextvar.arr, device_id );
		 }
		 else
		 {
			sprintf( sqltextvar.arr,
					"%s device_id = '%s'",
					 sqltextvar.arr, device_id );
		 }
	  }
	}

	/* ----------- */
	/* MERCHANT ID */
	/* ----------- */

	len = strlen( merchant_id );
	if ( len > 0 )
	{
	  if ( temp == 1 )
	  {
		 if ( merchant_id[len-1] == gui_wildcard )
		 {
			/* Operator used wild card on merchant.  Need to use 'like' cmd. */
			merchant_id[len-1] = oracle_wildcard;
			sprintf( sqltextvar.arr,
					"%s and merchant_id like '%s'",
					 sqltextvar.arr, merchant_id );
		 }
		 else
		 {
			sprintf( sqltextvar.arr,
					"%s and merchant_id = '%s'",
					 sqltextvar.arr, merchant_id );
		 }
	  }
	  else
	  {
		 temp = 1;
		 if ( merchant_id[len-1] == gui_wildcard )
		 {
			/* Operator used wild card on merchant.  Need to use 'like' cmd. */
			merchant_id[len-1] = oracle_wildcard;
			sprintf( sqltextvar.arr,
					"%s merchant_id like '%s'",
					 sqltextvar.arr, merchant_id );
		 }
		 else
		 {
			sprintf( sqltextvar.arr,
					"%s merchant_id = '%s'",
					 sqltextvar.arr, merchant_id );
		 }
	  }
	}


	/* ----------- */
	/* RETRIEVAL_REF_NUM */
	/* ----------- */

	len = strlen( retrieval_ref_num );
	if ( len > 0 )
	{
	  if ( temp == 1 )
	  {
		 if ( retrieval_ref_num[len-1] == gui_wildcard )
		 {
			/* Operator used wild card on terminal.  Need to use 'like' cmd. */
			retrieval_ref_num[len-1] = oracle_wildcard;
			sprintf( sqltextvar.arr,
					"%s and retrieval_ref_num like '%s'",
					 sqltextvar.arr, retrieval_ref_num );
		 }
		 else
		 {
			sprintf( sqltextvar.arr,
					"%s and retrieval_ref_num = '%s'",
					 sqltextvar.arr, retrieval_ref_num );
		 }
	  }
	  else
	  {
		 temp = 1;
		 if ( retrieval_ref_num[len-1] == gui_wildcard )
		 {
			/* Operator used wild card on terminal.  Need to use 'like' cmd. */
			retrieval_ref_num[len-1] = oracle_wildcard;
			sprintf( sqltextvar.arr,
					"%s retrieval_ref_num like '%s'",
					 sqltextvar.arr, retrieval_ref_num );
		 }
		 else
		 {
			sprintf( sqltextvar.arr,
					"%s retrieval_ref_num = '%s'",
					 sqltextvar.arr, retrieval_ref_num );
		 }
	  }
	}

	/* ----------- */
	/* OPEN DATE */
	/* ----------- */

	if(open_date[0] != '\0')
	{
	  if ( temp == 1 )
	  {
		 sprintf( sqltextvar.arr,
				 "%s and open_date >= '%s'",
				  sqltextvar.arr, open_date );
	  }
	  else
	  {
		 temp = 1;
		 sprintf( sqltextvar.arr,
				 "%s open_date >= '%s'",
				  sqltextvar.arr, open_date );
	  }
	}


   /* -------- */
   /* ORDER BY */
   /* -------- */

   sprintf( sqltextvar.arr,
           "%s) ORDER BY transaction_id",
            sqltextvar.arr );

   sqltextvar.len = strlen(sqltextvar.arr);
   
    EXEC SQL ALTER session SET nls_date_format = 'YYYYMMDD';

   printf("BCH20 query: %s \n",sqltextvar.arr);

  EXEC SQL  SELECT sysdate INTO :temp_date FROM dual;
  printf ("sysdate : %s \n ",temp_date);

  EXEC SQL PREPARE S FROM :sqltextvar;

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DECLARE bch20_cursor3 CURSOR FOR S;

  if ( db_error_statics_flag == true )
  {
	 end_time = ptetime_get_time();
	 duration = end_time - start_time;
	 if(duration >= db_error_statics_value)
	 {
		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Archds, ST1:%d,ST2:%d,Data_Type : BCH20 ,Fun_Name : db_get_bch20_gui_list_CURSOR , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	 }
  }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN bch20_cursor3;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < ARCH_GUI_MAX_LIST_SIZE ; temp++ )
   {
      memset(&db_bch20, 0x00, sizeof(db_bch20));
      
       if ( db_error_statics_flag == true )
	   {
	      start_time = ptetime_get_time();
	   }
      EXEC SQL FETCH bch20_cursor3
      INTO :db_bch20;
	  if ( db_error_statics_flag == true )
	  {
		 end_time = ptetime_get_time();
		 duration = end_time - start_time;
		 if(duration >= db_error_statics_value)
		 {
			 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Archds, ST1:%d,ST2:%d,Data_Type : BCH20 ,Fun_Name : db_get_bch20_gui_list_FETCH , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		 }
	  }
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE bch20_cursor3;
		 printf("sql_error2-> SQLCODE :%d\n",SQLCODE);
         memset(er_buf,0x00,sizeof(er_buf));
		 DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		 sprintf(er_buf,"In  db_get_bch20_gui_list,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		 strcat(er_buf,ErrorMsg);
		 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		 return DB_rcode;
      }
      db_to_bch20(&Bch20_List->batch_list[temp]);
      itoa(temp + 1, Bch20_List->num_returned, 10);
   }

   EXEC SQL CLOSE bch20_cursor3;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   printf("sql_error-> SQLCODE :%d\n",SQLCODE);
	memset(er_buf,0x00,sizeof(er_buf));
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
	sprintf(er_buf,"In  db_get_bch20_gui_list,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;

}



