/******************************************************************************
  
   Module:           update_db.pc
  
   Title:            Update Dataserver DB Routines
  
   Description:
   
   Application:      Equitable Bank

   ----------------
   REVISION HISTORY
   ----------------

 ******************************************************************************/
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#ifdef WIN32
   #include <sqlproto.h>
#endif

#include <math.h>
#include <time.h>
#include <sys/timeb.h>
#include <ctype.h>
#include <unistd.h>

#include "basictyp.h"
#include "pte.h"
#include "pteipc.h"
#include "ptemsg.h"
#include "ptetimer.h"
#include "app_info.h"
#include "equitdb.h"
#include "dc_dbstruct.h"
#include "nc_dbstruct.h"
#include "dbcommon.h"
#include "txutils.h"
#include "ptetime.h"
#include "update_db.h"
#include "timings.h"
#include "ntutils.h"
#include "memmnger.h"

/* Function prototypes */
extern void format_date(pCHAR temp);
void genutil_bin_to_ascii (BYTE bstring[], INT blen, pCHAR astr, INT astr_len);

INT validate_date_yyyymmdd( pBYTE date_str);

/* Oracle error codes */
#define NULL_COLUMN_DATA -1405
#define NO_DATA_FOUND     1403
#define UNIQUE_CONSTRAINT    5
#define TABLE_DOESNT_EXIST -942
#define UNIQUE_CONSTRAINT_ERROR -1

/*Merchant offset address in respective structure*/
#define DCF01_MERCHANT_ID_OFFSET      96
#define BCH01_MERCHANT_ID_OFFSET      16
#define BCH01_MP_MERCHANT_ID_OFFSET   16
#define BCH10_MERCHANT_ID_OFFSET      29
#define BCH11_MERCHANT_ID_OFFSET	  29
#define BCH20_MERCHANT_ID_OFFSET      29


extern  INT CashBonusWinner;

/* For DB statics added by raghu */
extern BYTE DB_MsgSubtype2 ;
extern BYTE DB_MsgSubtype1 ;
char DB_Tmr_Lgng_Buf[512];
double start_time;
double end_time  ;
double duration  ; 
extern INT db_error_statics_flag;
extern double db_error_statics_value;
char er_buf[512];
BYTE DB_rcode;
extern CHAR DB_Logging_Filename[256];
extern CHAR  DB_module_file_name[256];
extern CHAR  DB_file_path[256];
/* End   */




#ifdef _DEBUG
   #define PRINT( X ) printf( X )
#else
   #define PRINT( X )
#endif

extern CHAR app_name[];
SQL01  Sql01;
INT    rtnval;

EXEC SQL INCLUDE sqlca;

typedef struct
{
   WORD len;
   BYTE pin_data[100];
}RAWPINDATA;

typedef struct
{
   WORD len;
   BYTE pin_data[300];

}RAWEMVDATA;

/* PAD Raw Data */
typedef struct
{
   WORD len;
   BYTE padrawdata[300];

}PADRAWDATA;

/* Database Timing Measurements */
extern TIMINGS_LIST  TimingStats;
extern INT           DB_Timing_Flag; /* True = Do DB Timing Stats, False = don't do */


EXEC SQL BEGIN DECLARE SECTION;

   /* error code variable */
   long    SQLCODE;
   long    SQL_CODE;


EXEC SQL TYPE RAWPINDATA is VARRAW(5000);
EXEC SQL TYPE RAWEMVDATA is VARRAW(5000);
EXEC SQL TYPE PADRAWDATA is VARRAW(5000);


/*********/
/* BON01 */
/*********/
struct
{
    char  minimum_amount                            [13];
    char  program_start_date                        [8]; 
    char  program_end_date                          [8];
    char  transaction_threshold                     [8];
    char  transaction_counter                       [8];
    char  maximum_reward                            [13];
    char  response_message                          [41];

}pte_bon01;


struct
{
    varchar  minimum_amount                            [13];
    varchar  program_start_date                        [8]; 
    varchar  program_end_date                          [8];
    varchar  transaction_threshold                     [8];
    varchar  transaction_counter                       [8];
    varchar  maximum_reward                            [13];
    varchar  response_message                          [41];

}db_bon01;

struct
{
    char  transaction_id                            [21];
    char  system_date                        [9]; 
    char  length_serial_no                          [3];
    char  total_length                     [3];
    char  table_id                       [4];
    char  serial_number                            [51];
    char  future_field_1                          [51];
    char  future_field_2                          [51];


}pte_ptsn01;


struct
{
    varchar  transaction_id                            [21];
    varchar  system_date                        [9]; 
    varchar  length_serial_no                          [3];
    varchar  total_length                     [3];
    varchar  table_id                       [4];
    varchar  serial_number                            [51];
    varchar  future_field_1                          [51];
    varchar  future_field_2                          [51];


}db_ptsn01;


struct
{
      char  organization_id                           [5];
      char  merchant_id                               [16];

      char  status                                    [2];
      char  name01                                    [31];
      char  name02                                    [31];
      char  address01                                 [31];
      char  address02                                 [31];
      char  city                                      [21];
      char  country                                   [21];
      char  state                                     [3];
      char  zip_code                                  [11];
      char  intl_code                                 [4];
      char  currency_code                             [4];
      char  contact                                   [31];
      char  phone01                                   [18];
      char  phone02                                   [18];
      char  invoice_batch                             [4];
      char  invoice_subcode                           [3];
      char  process_control_id                        [7];
      char  date_added                                [9];

      char  region_nbr                                [4];  
      char  division_nbr                              [4];  
      char  password                                  [8];  
      char  rps_merchant                              [2];  
      char  house_card_merchant                       [2];  
      char  procurement_merchant                      [2];  
      char  deferred_merchant                         [2];  
      char  cash_bonus_eligible                       [2];  
      char  vip_code                                  [5];  
      char  pos_code                                  [2];  
      char  vs_tcc_code                               [2];  
      char  mc_fcc_code                               [2];  
      char  jcb_sub_code                              [3];  
      char  mall_code                                 [4];  
      char  hc_code                                   [4];  
      char  solicit_code                              [4]; 
       
      char  block_start_date                          [9];
      char  block_end_date                            [9];
      char  credit_purch_max                          [13];
      char  credit_auth_max                           [13];
      char  credit_return_max                         [13];
      char  credit_cash_adv_max                       [13];
      char  credit_man_entry_max                      [13];
      char  credit_cash_back_max                      [13];
      char  debit_purch_max                           [13];
      char  debit_auth_max                            [13];
      char  debit_return_max                          [13];
      char  debit_cash_adv_max                        [13];
      char  debit_man_entry_max                       [13];
      char  debit_cash_back_max                       [13];
      char  aver_purch_amount                         [13];
      char  max_num_returns                           [5];
      char  amount_returns                            [13];
      char  number_man_entries                        [5];
      char  amount_deposits                           [13];
      char  pan_same                                  [3];
      char  totals_ind                                [2];
      char  statistics_ind                            [2];

      char  network_priority_routing_1                [10];
      char  network_priority_routing_2                [10];
      char  network_priority_routing_3                [10];
      char  network_priority_routing_4                [10];
      char  network_priority_routing_5                [10];
      char  network_priority_routing_6                [10];
      char  network_priority_routing_7                [10];
      char  network_priority_routing_8                [10];
      char  network_priority_routing_9                [10];
      char  network_priority_routing_10               [10];
      char  negative_group_id                         [11];
      char  voice_category_code                       [5];
      char  class_code                                [4];
      char  deferred_start_date                       [9];
      char  deferred_end_date                         [9];
      char  group_outlet_code                         [6];
      char  group_type                                [5];
      char  reload_merchant                           [2];
   
   }pte_mcf01;

   struct
   {
      varchar  organization_id                           [5];
      varchar  merchant_id                               [16];

      varchar  status                                    [2];
      varchar  name01                                    [31];
      varchar  name02                                    [31];
      varchar  address01                                 [31];
      varchar  address02                                 [31];
      varchar  city                                      [21];
      varchar  country                                   [21];
      varchar  state                                     [3];
      varchar  zip_code                                  [11];
      varchar  intl_code                                 [4];
      varchar  currency_code                             [4];
      varchar  contact                                   [31];
      varchar  phone01                                   [18];
      varchar  phone02                                   [18];
      varchar  invoice_batch                             [4];
      varchar  invoice_subcode                           [3];
      varchar  process_control_id                        [7];
      varchar  date_added                                [9];

      varchar  region_nbr                                [4];  
      varchar  division_nbr                              [4];  
      varchar  password                                  [8];  
      varchar  rps_merchant                              [2];  
      varchar  house_card_merchant                       [2];  
      varchar  procurement_merchant                      [2];  
      varchar  deferred_merchant                         [2];  
      varchar  cash_bonus_eligible                       [2];  
      varchar  vip_code                                  [5];  
      varchar  pos_code                                  [2];  
      varchar  vs_tcc_code                               [2];  
      varchar  mc_fcc_code                               [2];  
      varchar  jcb_sub_code                              [3];  
      varchar  mall_code                                 [4];  
      varchar  hc_code                                   [4];  
      varchar  solicit_code                              [4]; 

      varchar  block_start_date                          [9];
      varchar  block_end_date                            [9];
      varchar  credit_purch_max                          [13];
      varchar  credit_auth_max                           [13];
      varchar  credit_return_max                         [13];
      varchar  credit_cash_adv_max                       [13];
      varchar  credit_man_entry_max                      [13];
      varchar  credit_cash_back_max                      [13];
      varchar  debit_purch_max                           [13];
      varchar  debit_auth_max                            [13];
      varchar  debit_return_max                          [13];
      varchar  debit_cash_adv_max                        [13];
      varchar  debit_man_entry_max                       [13];
      varchar  debit_cash_back_max                       [13];
      varchar  aver_purch_amount                         [13];
      varchar  max_num_returns                           [5];
      varchar  amount_returns                            [13];
      varchar  number_man_entries                        [5];
      varchar  amount_deposits                           [13];
      varchar  pan_same                                  [3];
      varchar  totals_ind                                [2];
      varchar  statistics_ind                            [2];

      varchar  network_priority_routing_1                [10];
      varchar  network_priority_routing_2                [10];
      varchar  network_priority_routing_3                [10];
      varchar  network_priority_routing_4                [10];
      varchar  network_priority_routing_5                [10];
      varchar  network_priority_routing_6                [10];
      varchar  network_priority_routing_7                [10];
      varchar  network_priority_routing_8                [10];
      varchar  network_priority_routing_9                [10];
      varchar  network_priority_routing_10               [10];
      varchar  negative_group_id                         [11];
      varchar  voice_category_code                       [5];
      varchar  class_code                                [4];
      varchar  deferred_start_date                       [9];
      varchar  deferred_end_date                         [9];
      varchar  group_outlet_code                         [6];
      varchar  group_type                                [5];
      varchar  reload_merchant                           [2];

   }db_mcf01;

struct
{
   BYTE  transaction_id            [21];
   BYTE  tag                       [6];
   BYTE  len                       [4];
   BYTE  emv_data                  [129];
   BYTE  system_date               [9];

} pte_emv01;

struct
{
   BYTE  transaction_id            [21];
   BYTE  tag                       [6];
   BYTE  len                       [4];
   BYTE  emv_data                  [129];
   BYTE  system_date               [9];

} db_emv01;


/*********/
/* OMC01 */
/*********/

struct
{
	char	merchant_id				[16];
	char	card_nbr				[20];
	char	max_repeat				[11];
	char	repeated				[11];
	char	expiry_date				[9];
	char    peso_amt_limit				[13];
	char	usd_amt_limit				[13];
	char	bypass					[9]; 
	char	future_use1				[33];
	char	future_use2				[33];
	char	future_use3				[33];
	char	future_use4				[33];
}pte_omc01;

struct
{
	varchar	merchant_id				[16];
	varchar	card_nbr				[20];
	varchar	max_repeat				[11];
	varchar	repeated				[11];
	varchar	expiry_date				[9];
	varchar peso_amt_limit				[13];
	varchar	usd_amt_limit				[13];
	varchar	bypass					[9]; 
	varchar	future_use1				[33];
	varchar	future_use2				[33];
	varchar	future_use3				[33];
	varchar	future_use4				[33];
}db_omc01;

/*********/
/* RPS01 */
/*********/

struct
{
	char	merchant_id				[16];
	char	card_num				[20];
	char	date_yyyymmdd			[11];
	char 	visa_tran_id			[33];
	char	system_date				[11];
	char	total_amount			[13];
	char 	currency_code			[4];
	char 	transaction_id			[21];
	char	future_use1				[33];
	
}pte_rps01;

struct
{
	varchar	merchant_id				[16];
	varchar	card_num				[20];
	varchar	date_yyyymmdd			[11];
	varchar	visa_tran_id			[33];
	varchar	system_date				[11];
	varchar	total_amount			[13];
	varchar	currency_code			[4];
	varchar transaction_id			[21];
	varchar	future_use1				[33];
}db_rps01;


/*********/
/* BON02 */
/*********/
struct
{
   char cash_id              [21];
   char tag_id               [2];
   char cash_desc            [121];
   char program_start_date   [9];
   char program_end_date     [9];
   char tran_threshold       [10];
   char tran_ctr             [10];
   char time_period          [5];
   char max_period_winners   [7];
   char period_win_ctr       [7];
   char max_program_winners  [7];
   char program_win_ctr      [7];

   char amount1_low          [13];
   char amount1_high         [13];
   char response1            [121];
   char win_type_radio1      [2];
   char reward_amount1       [13];

   char amount2_low          [13];
   char amount2_high         [13];
   char response2            [121];
   char win_type_radio2      [2];
   char reward_amount2       [13];

   char amount3_low          [13];
   char amount3_high         [13];
   char response3            [121];
   char win_type_radio3      [2];
   char reward_amount3       [13];

   char amount4_low          [13];
   char amount4_high         [13];
   char response4            [121];
   char win_type_radio4      [2];
   char reward_amount4       [13];

   char amount5_low          [13];
   char amount5_high         [13];
   char response5            [121];
   char win_type_radio5      [2];
   char reward_amount5       [13];

   char multi_winner_text    [121];
   char multi_winners_allowed[2];

}pte_bon02;

/* EMV Raw Data for Reversals/Voids */

struct
{
      char       tran_id[21];   
      char       sys_date[9];
      char       len[4];
      RAWEMVDATA emvblock;
}
db_emv_raw;

struct
{
      char       tran_id[21];   
      char       sys_date[9];
      char       len[4];
      PADRAWDATA padrawblock;
}
db_pad_raw;


struct
{
   varchar cash_id              [21];
   varchar tag_id               [2];
   varchar cash_desc            [121];
   varchar program_start_date   [9];
   varchar program_end_date     [9];
   varchar tran_threshold       [10];
   varchar tran_ctr             [10];
   varchar time_period          [5];
   varchar max_period_winners   [7];
   varchar period_win_ctr       [7];
   varchar max_program_winners  [7];
   varchar program_win_ctr      [7];

   varchar amount1_low          [13];
   varchar amount1_high         [13];
   varchar response1            [121];
   varchar win_type_radio1      [2];
   varchar reward_amount1       [13];

   varchar amount2_low          [13];
   varchar amount2_high         [13];
   varchar response2            [121];
   varchar win_type_radio2      [2];
   varchar reward_amount2       [13];

   varchar amount3_low          [13];
   varchar amount3_high         [13];
   varchar response3            [121];
   varchar win_type_radio3      [2];
   varchar reward_amount3       [13];

   varchar amount4_low          [13];
   varchar amount4_high         [13];
   varchar response4            [121];
   varchar win_type_radio4      [2];
   varchar reward_amount4       [13];

   varchar amount5_low          [13];
   varchar amount5_high         [13];
   varchar response5            [121];
   varchar win_type_radio5      [2];
   varchar reward_amount5       [13];

   varchar multi_winner_text    [121];
   varchar multi_winners_allowed[2];

}db_bon02;


/*********/
/* BON03 */
/*********/
struct
{
   char transaction_id       [21];
   char cash_id              [21];
   char tag_id               [2];
   char program_start_date   [9];
   char program_end_date     [9];
   char card_nbr             [20];
   char merchant_id          [16];
   char terminal_id          [9];
   char auth_number          [7];
   char tran_date            [9];
   char tran_time            [7];
   char reward_amount        [13];
   char tran_amount          [13];
   char resp_text            [121];
   char system_date          [9];
   char invoice_number       [9];
   char retrieval_ref_num    [13];
   char card_holder_name     [31];

}pte_bon03;

struct
{
   varchar transaction_id       [21];
   varchar cash_id              [21];
   varchar tag_id               [2];
   varchar program_start_date   [9];
   varchar program_end_date     [9];
   varchar card_nbr             [20];
   varchar merchant_id          [16];
   varchar terminal_id          [9];
   varchar auth_number          [7];
   varchar tran_date            [9];
   varchar tran_time            [7];
   varchar reward_amount        [13];
   varchar tran_amount          [13];
   varchar resp_text            [121];
   varchar system_date          [9];
   varchar invoice_number       [9];
   varchar retrieval_ref_num    [13];
   varchar card_holder_name     [31];

}db_bon03;



struct
{
    char transaction_id                     [21]; 
    char entry_type                         ;
    char tpdu_id                            [16];
    char issuer_id                          [21];
    char acquirer_id                        [21];
    char tx_key                             ;
    char terminal_id                        [9];
    char terminal_type                      [3];
    char response_text                      [41];
    char card_num_len                       [3];
    char card_num                           [20];
    char exp_date                           [5];
    char total_amount                       [13];
    char add_amounts                        [25];
    char invoice_number                     [9];
    char orig_amount                        [13];
    char auth_number                        [7];
    char processing_code                    [7];
    char sys_trace_audit_num                [7];
    char orig_sys_trace_num                 [7];
    char pos_entry_mode                     [5];
    char nii                                [5];
    char pos_condition_code                 [3];
    char track1                             [77];
    char track2                             [38];
    char retrieval_ref_num                  [13];
    char orig_retrieval_ref_num             [13];
    char merchant_id                        [16];
    char orig_message                       [5];
    char settlement_total                   [17];
    char message_type                       [5];
    char card_holder_name                   [31];
    char general_status                     ;
    char originator_queue                   [17];
    char originator_info                    [33];
    char batch_number                       [7];
    char response_code                      [3];
    char date_yyyymmdd                      [9];
    char time_hhmmss                        [7];
    char num_sales                          [4];
    char sales_amount                       [13];
    char num_refunds                        [4];
    char refund_amount                      [13];
    char num_dbsales                        [4];
    char dbsales_amount                     [13];
    char num_dbrefunds                      [4];
    char dbrefund_amount                    [13];
    char pin_block                          [19];
    char tax_amount                         [13];
    char tip_amount                         [13];
    char tran_start_time                    [17];
    char host_start_time                    [17];
    char host_finish_time                   [17];
    char tran_finish_time                   [17];
    char settle_file_prefix                 [7];
    char resp_source_len                    [3];
    char visa_char_indicator                ;
    char visa_tran_id                       [16];
    char visa_validation_code               [5];
    char mcard_banknet_len                  [4];
    char mcard_banknet                      [51];
    char agent_id_len                       [4];
    char agent_id                           [12];
    char cvc                                ;
    char settlement_date                    [5];
    char category_code                      [5];
    char conversion_rate                    [10];
    char product_code                       [9];
    char odometer                           [8];
    char organization_id                    [5];
    char dynamic_keychange                  ;
   char source_key                          [49];
   char txn_cnt                            [4];
   char dcf01_retired_cwk                  [49];
   char dest_key                           [49];
   char ncf01_retired_cwk                  [49];
   char handler_queue        		       [8];
   char authorizing_host_queue		   	   [8];
   char max_net_consec_tmouts              [4];
   char max_active_txns                    [4];
   char forwarding_institution_id          [12];
   char remote_nsp_type                    [2];
   char kek                                [17]; 
   char acquiring_id                       [12];
   char outstanding_balance                [13]; 
   char credit_limit                       [13];
   char nfi_name                           [11];
   char nfi_seq_nbr                        [7];
   char nfi_start_date                     [9];
   char nfi_end_date                       [9];
   char resp_source                        [26];
   char origin                             [3];
   char auth_1                             [3];
   char auth_2                             [3];
   char update_mask                        [2];
   char type_of_data                       [3];
   char down_payment                       [13];
   char period                             [3];
   char interest_rate                      [5];
   char total_interest                     [13];
   char redemption_amount                  [13];
   char vehicle_number                     [9];
   char profile                                    [3];
   char nbr_of_prod_codes                          [3];
   char product1_code                              [7];
   char product1_quantity                          [3];
   char product1_amount                            [13];
   char product2_code                              [7];
   char product2_quantity                          [3];
   char product2_amount                            [13];
   char product3_code                              [7];
   char product3_quantity                          [3];
   char product3_amount                            [13];
   char product4_code                              [7];
   char product4_quantity                          [3];
   char product4_amount                            [13];
   char product5_code                              [7];
   char product5_quantity                          [3];
   char product5_amount                            [13];
   char product6_code                              [7];
   char product6_quantity                          [3];
   char product6_amount                            [13];
   char product7_code                              [7];
   char product7_quantity                          [3];
   char product7_amount                            [13];
   char product8_code                              [7];
   char product8_quantity                          [3];
   char product8_amount                            [13];
   char product9_code                              [7];
   char product9_quantity                          [3];
   char product9_amount                            [13];
   char product10_code                              [7];
   char product10_quantity                          [3];
   char product10_amount                            [13];
   char product11_code                              [7];
   char product11_quantity                          [3];
   char product11_amount                            [13];
   char product12_code                              [7];
   char product12_quantity                          [3];
   char product12_amount                            [13];
   char product13_code                              [7];
   char product13_quantity                          [3];
   char product13_amount                            [13];
   char product14_code                              [7];
   char product14_quantity                          [3];
   char product14_amount                            [13];
   char product15_code                              [7];
   char product15_quantity                          [3];
   char product15_amount                            [13];
   char product16_code                              [7];
   char product16_quantity                          [3];
   char product16_amount                            [13];
   char product17_code                              [7];
   char product17_quantity                          [3];
   char product17_amount                            [13];
   char product18_code                              [7];
   char product18_quantity                          [3];
   char product18_amount                            [13];
   char product19_code                              [7];
   char product19_quantity                          [3];
   char product19_amount                            [13];
   char product20_code                              [7];
   char product20_quantity                          [3];
   char product20_amount                            [13];
   char visa_merchant_id                            [16];
   char cash_bonus                                  [2];  /* added 01-29-99 by IG */
   char deferred_factor                             [8];  /* added 01-29-99 by IG */
   char deferred_term_length                        [4];  /* added 01-29-99 by IG */
   char currency_code                               [4];  /* added 01-29-99 by IG */
   char transmission_timestamp                      [11]; /* added 01-29-99 by IG */
   char tran_fee_amount                             [9];  /* added 01-29-99 by IG */
   char cvc_data                                    [4];  /* added 01-29-99 by IG */
   char verify_mag_stripe                           [2];  /* added 02-09-99 by IG */
   char saf                                         [2];  /* added 02-09-99 by IG */
   char security_response_code                      [3];  /* added 02-09-99 by IG */
   char service_code                                [4];  /* added 02-09-99 by IG */
   char source_pin_format                           [3];  /* added 02-09-99 by IG */
   char dest_pin_format                             [3];  /* added 02-09-99 by IG */
   char voice_auth                                  [2];  /* added 02-09-99 by IG */
   char actual_amount                               [13]; /* AP IG, Equitable 02-10-99 */
   char reversal_amount                             [13]; /* AP IG, Equitable 02-10-99 */
   char voice_auth_text                             [241]; /* IG 02-22-99 */ 
   char operator_id                                 [21];  /* IA 03-09-99 */
   char workstation                                 [21];  /* IA 03-16-99 */
   char orig_auth_number                            [7];   /* IA 04-08-99 */
   char ticket_nbr                                  [16];
   char system_date                                 [9];
   char def_gross_amt                               [13];
   char monthly_amort_amt                           [13];

}pte_tlf01;

struct
{
    varchar transaction_id                     [21]; 
    varchar entry_type                         [1];
    varchar tpdu_id                            [16];
    varchar issuer_id                          [21];
    varchar acquirer_id                        [21];
    varchar tx_key                             [1];
    varchar terminal_id                        [9];
    varchar terminal_type                      [3];
    varchar response_text                      [41];
    varchar card_num_len                       [3];
    varchar card_num                           [20];
    varchar exp_date                           [5];
    varchar total_amount                       [13];
    varchar add_amounts                        [25];
    varchar invoice_number                     [9];
    varchar orig_amount                        [13];
    varchar auth_number                        [7];
    varchar processing_code                    [7];
    varchar sys_trace_audit_num                [7];
    varchar orig_sys_trace_num                 [7];
    varchar pos_entry_mode                     [5];
    varchar nii                                [5];
    varchar pos_condition_code                 [3];
    varchar track1                             [77];
    varchar track2                             [38];
    varchar retrieval_ref_num                  [13];
    varchar orig_retrieval_ref_num             [13];
    varchar merchant_id                        [16];
    varchar orig_message                       [5];
    varchar settlement_total                   [17];
    varchar message_type                       [5];
    varchar card_holder_name                   [31];
    varchar general_status                     [1];
    varchar originator_queue                   [17];
    varchar originator_info                    [33];
    varchar batch_number                       [7];
    varchar response_code                      [3];
    varchar date_yyyymmdd                      [9];
    varchar time_hhmmss                        [7];
    varchar num_sales                          [4];
    varchar sales_amount                       [13];
    varchar num_refunds                        [4];
    varchar refund_amount                      [13];
    varchar num_dbsales                        [4];
    varchar dbsales_amount                     [13];
    varchar num_dbrefunds                      [4];
    varchar dbrefund_amount                    [13];
    varchar pin_block                          [19];
    varchar tax_amount                         [13];
    varchar tip_amount                         [13];
    varchar tran_start_time                    [17];
    varchar host_start_time                    [17];
    varchar host_finish_time                   [17];
    varchar tran_finish_time                   [17];
    varchar settle_file_prefix                 [7];
    varchar resp_source_len                    [3];
    varchar visa_char_indicator                [1];
    varchar visa_tran_id                       [16];
    varchar visa_validation_code               [5];
    varchar mcard_banknet_len                  [4];
    varchar mcard_banknet                      [51];
    varchar agent_id_len                       [4];
    varchar agent_id                           [12];
    varchar cvc                                [1];
    varchar settlement_date                    [5];
    varchar category_code                      [5];
    varchar conversion_rate                    [10];
    varchar product_code                       [9];
    varchar odometer                           [8];
    varchar organization_id                    [5];
    varchar dynamic_keychange                  [1];
   varchar source_key                         [49];
   varchar txn_cnt                            [4];
   varchar dcf01_retired_cwk                  [49];
   varchar dest_key                           [49];
   varchar ncf01_retired_cwk                  [49];
   varchar handler_queue        		      [8];
   varchar authorizing_host_queue		   	  [8];
   varchar max_net_consec_tmouts              [4];
   varchar max_active_txns                    [4];
   varchar forwarding_institution_id          [12];
   varchar remote_nsp_type                    [2];
   varchar kek                                [17];
   varchar acquiring_id                       [12];
   varchar outstanding_balance                [13];
   varchar credit_limit                       [13];
   varchar nfi_name                           [11];
   varchar nfi_seq_nbr                        [7];
   varchar nfi_start_date                     [9];
   varchar nfi_end_date                       [9];
   varchar resp_source                        [26];
   varchar origin                             [3];
   varchar auth_1                             [3];
   varchar auth_2                             [3];
   varchar update_mask                        [2];
   varchar type_of_data                       [3];
   varchar down_payment                       [13];
   varchar period                             [3];
   varchar interest_rate                      [5];
   varchar total_interest                     [13];
   varchar redemption_amount                  [13];
   varchar vehicle_number                     [9];
   varchar profile                                    [3];
   varchar nbr_of_prod_codes                          [3];
   varchar product1_code                              [7];
   varchar product1_quantity                          [3];
   varchar product1_amount                            [13];
   varchar product2_code                              [7];
   varchar product2_quantity                          [3];
   varchar product2_amount                            [13];
   varchar product3_code                              [7];
   varchar product3_quantity                          [3];
   varchar product3_amount                            [13];
   varchar product4_code                              [7];
   varchar product4_quantity                          [3];
   varchar product4_amount                            [13];
   varchar product5_code                              [7];
   varchar product5_quantity                          [3];
   varchar product5_amount                            [13];
   varchar product6_code                              [7];
   varchar product6_quantity                          [3];
   varchar product6_amount                            [13];
   varchar product7_code                              [7];
   varchar product7_quantity                          [3];
   varchar product7_amount                            [13];
   varchar product8_code                              [7];
   varchar product8_quantity                          [3];
   varchar product8_amount                            [13];
   varchar product9_code                              [7];
   varchar product9_quantity                          [3];
   varchar product9_amount                            [13];
   varchar product10_code                              [7];
   varchar product10_quantity                          [3];
   varchar product10_amount                            [13];
   varchar product11_code                              [7];
   varchar product11_quantity                          [3];
   varchar product11_amount                            [13];
   varchar product12_code                              [7];
   varchar product12_quantity                          [3];
   varchar product12_amount                            [13];
   varchar product13_code                              [7];
   varchar product13_quantity                          [3];
   varchar product13_amount                            [13];
   varchar product14_code                              [7];
   varchar product14_quantity                          [3];
   varchar product14_amount                            [13];
   varchar product15_code                              [7];
   varchar product15_quantity                          [3];
   varchar product15_amount                            [13];
   varchar product16_code                              [7];
   varchar product16_quantity                          [3];
   varchar product16_amount                            [13];
   varchar product17_code                              [7];
   varchar product17_quantity                          [3];
   varchar product17_amount                            [13];
   varchar product18_code                              [7];
   varchar product18_quantity                          [3];
   varchar product18_amount                            [13];
   varchar product19_code                              [7];
   varchar product19_quantity                          [3];
   varchar product19_amount                            [13];
   varchar product20_code                              [7];
   varchar product20_quantity                          [3];
   varchar product20_amount                            [13];
   varchar visa_merchant_id                            [16];
   varchar cash_bonus                                  [2];  /* added 01-29-99 by IG */
   varchar deferred_factor                             [8];  /* added 01-29-99 by IG */
   varchar deferred_term_length                        [4];  /* added 01-29-99 by IG */
   varchar currency_code                               [4];  /* added 01-29-99 by IG */
   varchar transmission_timestamp                      [11]; /* added 01-29-99 by IG */
   varchar tran_fee_amount                             [9];  /* added 01-29-99 by IG */
   varchar cvc_data                                    [4];  /* added 01-29-99 by IG */
   varchar verify_mag_stripe                           [2];  /* added 02-09-99 by IG */
   varchar saf                                         [2];  /* added 02-09-99 by IG */
   varchar security_response_code                      [3];  /* added 02-09-99 by IG */
   varchar service_code                                [4];  /* added 02-09-99 by IG */
   varchar source_pin_format                           [3];  /* added 02-09-99 by IG */
   varchar dest_pin_format                             [3];  /* added 02-09-99 by IG */
   varchar voice_auth                                  [2];  /* added 02-09-99 by IG */
   varchar actual_amount                               [13]; /* AP IG, Equitable 02-10-99 */
   varchar reversal_amount                             [13]; /* AP IG, Equitable 02-10-99 */
   varchar voice_auth_text                             [241]; /* IG 02-22-99 */
   varchar operator_id                                 [21];  /* IA 03-09-99 */
   varchar workstation                                 [21];  /* IA 03-16-99 */
   varchar orig_auth_number                            [7];   /* IA 04-08-99 */
   varchar ticket_nbr                                  [16];
   varchar system_date                                 [9];
   varchar def_gross_amt                               [13];
   varchar monthly_amort_amt                           [13];

}db_tlf01;


struct
{
   char  transaction_id         [21];
   char  timestamp              [20];
   char  message_type            [5];
   char  card_num               [20];
   char  processing_code         [7];
   char  amount_peso            [13];
   char  amount_usd             [13];
   char  gmt                    [11];
   char  sys_trace_audit_num     [7];
   char  mcc                     [5];
   char  country_code            [5];
   char  pos_entry_mode          [5];
   char  pos_condition_code      [3];
   char  acquiring_id           [21];
   char  auth_number             [7];
   char  response_code           [3];
   char  terminal_id             [9];
   char  merchant_id            [16];
   char  card_acceptor_name     [26];
   char  card_acceptor_city     [14];
   char  card_acceptor_country   [4];
   char  currency_code_txn       [4];
   char  currency_code_billing   [4];
   char  pos_info               [31];
   char  status                     ;
   char  system_date             [9];
   char  result_code             [6];
   char  application            [21];
   char  rule_domain            [81];
   char  caller_id               [6];
   char  caller_msg_id         [256];
   char  result_text           [256];
   char  product                [31];

} pte_fguard;

struct
{
   varchar  transaction_id         [21];
   varchar  timestamp              [20];
   varchar  message_type            [5];
   varchar  card_num               [20];
   varchar  processing_code         [7];
   varchar  amount_peso            [13];
   varchar  amount_usd             [13];
   varchar  gmt                    [11];
   varchar  sys_trace_audit_num     [7];
   varchar  mcc                     [5];
   varchar  country_code            [5];
   varchar  pos_entry_mode          [5];
   varchar  pos_condition_code      [3];
   varchar  acquiring_id           [21];
   varchar  auth_number             [7];
   varchar  response_code           [3];
   varchar  terminal_id             [9];
   varchar  merchant_id            [16];
   varchar  card_acceptor_name     [26];
   varchar  card_acceptor_city     [14];
   varchar  card_acceptor_country   [4];
   varchar  currency_code_txn       [4];
   varchar  currency_code_billing   [4];
   varchar  pos_info               [31];
   varchar  status                  [1];
   varchar  system_date             [9];
   varchar  result_code             [6];
   varchar  application            [21];
   varchar  rule_domain            [81];
   varchar  caller_id               [6];
   varchar  caller_msg_id         [256];
   varchar  result_text           [256];
   varchar  product                [31];

} db_fguard;

struct
{
   char  transaction_id    [21];
   char  system_date        [9];
   char  length             [5];
   char  raw_data        [1500];

} pte_fgraw;

struct
{
   varchar  transaction_id   [21];
   varchar  system_date       [9];
   varchar  length            [5];
   varchar  raw_data       [1500];

} db_fgraw;


struct
{
   char  device_id                                 [9];
   char  batch_nbr                                 [7];
   char  merchant_id                               [16];
   char  total_credit_cnt                          [5];
   char  total_credit_amt                          [13];
   char  total_credit_refund_cnt                   [5];
   char  total_credit_refund_amt                   [13];
   char  total_debit_cnt                           [5];
   char  total_debit_amt                           [13];
   char  total_debit_refund_cnt                    [5];
   char  total_debit_refund_amt                    [13];
   char  total_void_credit_cnt                     [5];
   char  total_void_credit_amt                     [13];
   char  total_void_credit_refund_cnt              [5];
   char  total_void_credit_refund_amt              [13];
   char  open_date                                 [9];
   char  open_time                                 [7];
   char  release_date                              [9];
   char  release_time                              [7];
   char  batch_status                              [2];      /*R-released;C-closed;A-active*/
   char  visa_merchant_id                          [16];

}pte_bch01;

struct
{
   varchar  device_id                                 [9];
   varchar  batch_nbr                                 [7];
   varchar  merchant_id                               [16];
   varchar  total_credit_cnt                          [5];
   varchar  total_credit_amt                          [13];
   varchar  total_credit_refund_cnt                   [5];
   varchar  total_credit_refund_amt                   [13];
   varchar  total_debit_cnt                           [5];
   varchar  total_debit_amt                           [13];
   varchar  total_debit_refund_cnt                    [5];
   varchar  total_debit_refund_amt                    [13];
   varchar  total_void_credit_cnt                     [5];
   varchar  total_void_credit_amt                     [13];
   varchar  total_void_credit_refund_cnt              [5];
   varchar  total_void_credit_refund_amt              [13];
   varchar  open_date                                 [9];
   varchar  open_time                                 [7];
   varchar  release_date                              [9];
   varchar  release_time                              [7];
   varchar  batch_status                              [2];      /*R-released;C-closed;A-active*/
   varchar  visa_merchant_id                          [16];

}db_bch01;

struct
{
   char  device_id                                 [9];
   char  batch_nbr                                 [7];
   char  merchant_id                               [16];
   char  total_credit_cnt                          [5];
   char  total_credit_amt                          [13];
   char  total_credit_refund_cnt                   [5];
   char  total_credit_refund_amt                   [13];
   char  total_debit_cnt                           [5];
   char  total_debit_amt                           [13];
   char  total_debit_refund_cnt                    [5];
   char  total_debit_refund_amt                    [13];
   char  total_void_credit_cnt                     [5];
   char  total_void_credit_amt                     [13];
   char  total_void_credit_refund_cnt              [5];
   char  total_void_credit_refund_amt              [13];
   char  open_date                                 [9];
   char  open_time                                 [7];
   char  release_date                              [9];
   char  release_time                              [7];
   char  batch_status                              [2];      /*R-released;C-closed;A-active*/
   char  visa_merchant_id                          [16];

}pte_bch01_mp;

struct
{
   varchar  device_id                                 [9];
   varchar  batch_nbr                                 [7];
   varchar  merchant_id                               [16];
   varchar  total_credit_cnt                          [5];
   varchar  total_credit_amt                          [13];
   varchar  total_credit_refund_cnt                   [5];
   varchar  total_credit_refund_amt                   [13];
   varchar  total_debit_cnt                           [5];
   varchar  total_debit_amt                           [13];
   varchar  total_debit_refund_cnt                    [5];
   varchar  total_debit_refund_amt                    [13];
   varchar  total_void_credit_cnt                     [5];
   varchar  total_void_credit_amt                     [13];
   varchar  total_void_credit_refund_cnt              [5];
   varchar  total_void_credit_refund_amt              [13];
   varchar  open_date                                 [9];
   varchar  open_time                                 [7];
   varchar  release_date                              [9];
   varchar  release_time                              [7];
   varchar  batch_status                              [2];      /*R-released;C-closed;A-active*/
   varchar  visa_merchant_id                          [16];

}db_bch01_mp;


struct 
{
	char merch_id				[16];
	char system_date			[9];
	char total_amount			[13];
	char total_transcn_cnt		[13];
	char total_aprvd_amount		[13];
	char total_reversed_amount	[13];
	char total_aprvd_transcn_count		[13];
	char total_reversed_transcn_count	[13];
	char field_1				[13];
	char field_2				[13];
	char field_3				[13];
	char field_4				[13];
	char field_5				[13];
	char field_6				[13];
	char field_7				[13];
	char field_8				[13];
	char field_9				[13];
	char field_10				[13];
}pte_mcf03p;

struct
{
	varchar merch_id				[15];
	varchar system_date			[8];
	varchar total_amount			[12];
	varchar total_transcn_cnt		[12];
	varchar total_aprvd_amount		[12];
	varchar total_reversed_amount	[12];
	varchar total_aprvd_transcn_count		[12];
	varchar total_reversed_transcn_count	[12];
	varchar field_1				[12];
	varchar field_2				[12];
	varchar field_3				[12];
	varchar field_4				[12];
	varchar field_5				[12];
	varchar field_6				[12];
	varchar field_7				[12];
	varchar field_8				[12];
	varchar field_9				[12];
	varchar field_10			[12];

}db_mcf03p;

struct
{
   char  device_id                                 [9];
   char  batch_nbr                                 [7];
   char  retrieval_ref_num                         [13];
   char  merchant_id                               [16];
   char  processing_code                           [7];
   char  tran_amount                               [13];
   char  response_code                             [3];
   char  auth_number                               [7];
   char  tran_date                                 [9];
   char  tran_time                                 [7];
   char  transaction_id                            [21];
   char  message_type                              [5];
   char  card_nbr                                  [20];
   char  invoice_nbr                               [9];
   char  settle_file_prefix                        [7];
   char  product_code                              [9];
   char  odometer                                  [8];
   char  sys_trace_audit_num                       [7];
   char  tx_key                                    ;
   char  bin_type                                  ;
   char type_of_data                               [3];
   char down_payment                               [13];
   char period                                     [3];
   char interest_rate                              [5];
   char total_interest                             [13];
   char redemption_amount                          [13];
   char vehicle_number                             [9];
   char pos_entry_mode                             [5];
   char profile                                    [3];
   char nbr_of_prod_codes                          [3];
   char product1_code                              [7];
   char product1_quantity                          [3];
   char product1_amount                            [13];
   char product2_code                              [7];
   char product2_quantity                          [3];
   char product2_amount                            [13];
   char product3_code                              [7];
   char product3_quantity                          [3];
   char product3_amount                            [13];
   char product4_code                              [7];
   char product4_quantity                          [3];
   char product4_amount                            [13];
   char product5_code                              [7];
   char product5_quantity                          [3];
   char product5_amount                            [13];
   char product6_code                              [7];
   char product6_quantity                          [3];
   char product6_amount                            [13];
   char product7_code                              [7];
   char product7_quantity                          [3];
   char product7_amount                            [13];
   char product8_code                              [7];
   char product8_quantity                          [3];
   char product8_amount                            [13];
   char product9_code                              [7];
   char product9_quantity                          [3];
   char product9_amount                            [13];
   char product10_code                              [7];
   char product10_quantity                          [3];
   char product10_amount                            [13];
   char product11_code                              [7];
   char product11_quantity                          [3];
   char product11_amount                            [13];
   char product12_code                              [7];
   char product12_quantity                          [3];
   char product12_amount                            [13];
   char product13_code                              [7];
   char product13_quantity                          [3];
   char product13_amount                            [13];
   char product14_code                              [7];
   char product14_quantity                          [3];
   char product14_amount                            [13];
   char product15_code                              [7];
   char product15_quantity                          [3];
   char product15_amount                            [13];
   char product16_code                              [7];
   char product16_quantity                          [3];
   char product16_amount                            [13];
   char product17_code                              [7];
   char product17_quantity                          [3];
   char product17_amount                            [13];
   char product18_code                              [7];
   char product18_quantity                          [3];
   char product18_amount                            [13];
   char product19_code                              [7];
   char product19_quantity                          [3];
   char product19_amount                            [13];
   char product20_code                              [7];
   char product20_quantity                          [3];
   char product20_amount                            [13];
   char aportionment_flag                           [2];
   char exp_date                                    [5];
   char open_date                                   [9];
   char open_time                                   [7];
   char cash_bonus                                  [2];
   char transmission_timestamp                      [11];
   char mcard_banknet                               [51];
   char ticket_nbr                                  [16];
   char def_gross_amt                               [13];
   char term                                        [4];

}pte_bch10;

struct
{
   varchar  device_id                                 [9];
   varchar  batch_nbr                                 [7];
   varchar  retrieval_ref_num                         [13];
   varchar  merchant_id                               [16];
   varchar  processing_code                           [7];
   varchar  tran_amount                               [13];
   varchar  response_code                             [3];
   varchar  auth_number                               [7];
   varchar  tran_date                                 [9];
   varchar  tran_time                                 [7];
   varchar  transaction_id                            [21];
   varchar  message_type                              [5];
   varchar  card_nbr                                  [20];
   varchar  invoice_nbr                               [9];
   varchar  settle_file_prefix                        [7];
   varchar  product_code                              [9];
   varchar  odometer                                  [8];
   varchar  sys_trace_audit_num                       [7];
   varchar  tx_key                                    [1];
   varchar  bin_type                                  [1];
   varchar type_of_data                               [3];
   varchar down_payment                               [13];
   varchar period                                     [3];
   varchar interest_rate                              [5];
   varchar total_interest                             [13];
   varchar redemption_amount                          [13];
   varchar vehicle_number                             [9];
   varchar pos_entry_mode                             [5];
   varchar profile                                    [3];
   varchar nbr_of_prod_codes                          [3];
   varchar product1_code                              [7];
   varchar product1_quantity                          [3];
   varchar product1_amount                            [13];
   varchar product2_code                              [7];
   varchar product2_quantity                          [3];
   varchar product2_amount                            [13];
   varchar product3_code                              [7];
   varchar product3_quantity                          [3];
   varchar product3_amount                            [13];
   varchar product4_code                              [7];
   varchar product4_quantity                          [3];
   varchar product4_amount                            [13];
   varchar product5_code                              [7];
   varchar product5_quantity                          [3];
   varchar product5_amount                            [13];
   varchar product6_code                              [7];
   varchar product6_quantity                          [3];
   varchar product6_amount                            [13];
   varchar product7_code                              [7];
   varchar product7_quantity                          [3];
   varchar product7_amount                            [13];
   varchar product8_code                              [7];
   varchar product8_quantity                          [3];
   varchar product8_amount                            [13];
   varchar product9_code                              [7];
   varchar product9_quantity                          [3];
   varchar product9_amount                            [13];
   varchar product10_code                              [7];
   varchar product10_quantity                          [3];
   varchar product10_amount                            [13];
   varchar product11_code                              [7];
   varchar product11_quantity                          [3];
   varchar product11_amount                            [13];
   varchar product12_code                              [7];
   varchar product12_quantity                          [3];
   varchar product12_amount                            [13];
   varchar product13_code                              [7];
   varchar product13_quantity                          [3];
   varchar product13_amount                            [13];
   varchar product14_code                              [7];
   varchar product14_quantity                          [3];
   varchar product14_amount                            [13];
   varchar product15_code                              [7];
   varchar product15_quantity                          [3];
   varchar product15_amount                            [13];
   varchar product16_code                              [7];
   varchar product16_quantity                          [3];
   varchar product16_amount                            [13];
   varchar product17_code                              [7];
   varchar product17_quantity                          [3];
   varchar product17_amount                            [13];
   varchar product18_code                              [7];
   varchar product18_quantity                          [3];
   varchar product18_amount                            [13];
   varchar product19_code                              [7];
   varchar product19_quantity                          [3];
   varchar product19_amount                            [13];
   varchar product20_code                              [7];
   varchar product20_quantity                          [3];
   varchar product20_amount                            [13];
   varchar aportionment_flag                           [2];
   varchar exp_date                                    [5];
   varchar open_date                                   [9];
   varchar open_time                                   [7];
   varchar cash_bonus                                  [2];
   varchar transmission_timestamp                      [11];
   varchar mcard_banknet                               [51];
   varchar ticket_nbr                                  [16];
   varchar def_gross_amt                               [13];
   varchar term                                        [4];

}db_bch10;

/* 0100 transaction records, similar to bch10 */
struct
{
   char  device_id                                 [9];
   char  batch_nbr                                 [7];
   char  retrieval_ref_num                         [13];
   char  merchant_id                               [16];
   char  processing_code                           [7];
   char  tran_amount                               [13];
   char  response_code                             [3];
   char  auth_number                               [7];
   char  tran_date                                 [9];
   char  tran_time                                 [7];
   char  transaction_id                            [21];
   char  message_type                              [5];
   char  card_nbr                                  [20];
   char  invoice_nbr                               [9];
   char  settle_file_prefix                        [7];
   char  product_code                              [9];
   char  odometer                                  [8];
   char  sys_trace_audit_num                       [7];
   char  tx_key                                    ;
   char  bin_type                                  ;
   char type_of_data                               [3];
   char down_payment                               [13];
   char period                                     [3];
   char interest_rate                              [5];
   char total_interest                             [13];
   char redemption_amount                          [13];
   char vehicle_number                             [9];
   char pos_entry_mode                             [5];
   char profile                                    [3];
   char nbr_of_prod_codes                          [3];
   char product1_code                              [7];
   char product1_quantity                          [3];
   char product1_amount                            [13];
   char product2_code                              [7];
   char product2_quantity                          [3];
   char product2_amount                            [13];
   char product3_code                              [7];
   char product3_quantity                          [3];
   char product3_amount                            [13];
   char product4_code                              [7];
   char product4_quantity                          [3];
   char product4_amount                            [13];
   char product5_code                              [7];
   char product5_quantity                          [3];
   char product5_amount                            [13];
   char product6_code                              [7];
   char product6_quantity                          [3];
   char product6_amount                            [13];
   char product7_code                              [7];
   char product7_quantity                          [3];
   char product7_amount                            [13];
   char product8_code                              [7];
   char product8_quantity                          [3];
   char product8_amount                            [13];
   char product9_code                              [7];
   char product9_quantity                          [3];
   char product9_amount                            [13];
   char product10_code                              [7];
   char product10_quantity                          [3];
   char product10_amount                            [13];
   char product11_code                              [7];
   char product11_quantity                          [3];
   char product11_amount                            [13];
   char product12_code                              [7];
   char product12_quantity                          [3];
   char product12_amount                            [13];
   char product13_code                              [7];
   char product13_quantity                          [3];
   char product13_amount                            [13];
   char product14_code                              [7];
   char product14_quantity                          [3];
   char product14_amount                            [13];
   char product15_code                              [7];
   char product15_quantity                          [3];
   char product15_amount                            [13];
   char product16_code                              [7];
   char product16_quantity                          [3];
   char product16_amount                            [13];
   char product17_code                              [7];
   char product17_quantity                          [3];
   char product17_amount                            [13];
   char product18_code                              [7];
   char product18_quantity                          [3];
   char product18_amount                            [13];
   char product19_code                              [7];
   char product19_quantity                          [3];
   char product19_amount                            [13];
   char product20_code                              [7];
   char product20_quantity                          [3];
   char product20_amount                            [13];
   char aportionment_flag                           [2];
   char exp_date                                    [5];
   char open_date                                   [9];
   char open_time                                   [7];
   char cash_bonus                                  [2];
   char transmission_timestamp                      [11];
   char mcard_banknet                               [51];
   char  processed                                 [2];
   char ticket_nbr									[16];
   char def_gross_amt                               [13];
   char term                                        [4];

}pte_bch20;

struct
{
   varchar  device_id                                 [9];
   varchar  batch_nbr                                 [7];
   varchar  retrieval_ref_num                         [13];
   varchar  merchant_id                               [16];
   varchar  processing_code                           [7];
   varchar  tran_amount                               [13];
   varchar  response_code                             [3];
   varchar  auth_number                               [7];
   varchar  tran_date                                 [9];
   varchar  tran_time                                 [7];
   varchar  transaction_id                            [21];
   varchar  message_type                              [5];
   varchar  card_nbr                                  [20];
   varchar  invoice_nbr                               [9];
   varchar  settle_file_prefix                        [7];
   varchar  product_code                              [9];
   varchar  odometer                                  [8];
   varchar  sys_trace_audit_num                       [7];
   varchar  tx_key                                    [1];
   varchar  bin_type                                  [1];
   varchar type_of_data                               [3];
   varchar down_payment                               [13];
   varchar period                                     [3];
   varchar interest_rate                              [5];
   varchar total_interest                             [13];
   varchar redemption_amount                          [13];
   varchar vehicle_number                             [9];
   varchar pos_entry_mode                             [5];
   varchar profile                                    [3];
   varchar nbr_of_prod_codes                          [3];
   varchar product1_code                              [7];
   varchar product1_quantity                          [3];
   varchar product1_amount                            [13];
   varchar product2_code                              [7];
   varchar product2_quantity                          [3];
   varchar product2_amount                            [13];
   varchar product3_code                              [7];
   varchar product3_quantity                          [3];
   varchar product3_amount                            [13];
   varchar product4_code                              [7];
   varchar product4_quantity                          [3];
   varchar product4_amount                            [13];
   varchar product5_code                              [7];
   varchar product5_quantity                          [3];
   varchar product5_amount                            [13];
   varchar product6_code                              [7];
   varchar product6_quantity                          [3];
   varchar product6_amount                            [13];
   varchar product7_code                              [7];
   varchar product7_quantity                          [3];
   varchar product7_amount                            [13];
   varchar product8_code                              [7];
   varchar product8_quantity                          [3];
   varchar product8_amount                            [13];
   varchar product9_code                              [7];
   varchar product9_quantity                          [3];
   varchar product9_amount                            [13];
   varchar product10_code                              [7];
   varchar product10_quantity                          [3];
   varchar product10_amount                            [13];
   varchar product11_code                              [7];
   varchar product11_quantity                          [3];
   varchar product11_amount                            [13];
   varchar product12_code                              [7];
   varchar product12_quantity                          [3];
   varchar product12_amount                            [13];
   varchar product13_code                              [7];
   varchar product13_quantity                          [3];
   varchar product13_amount                            [13];
   varchar product14_code                              [7];
   varchar product14_quantity                          [3];
   varchar product14_amount                            [13];
   varchar product15_code                              [7];
   varchar product15_quantity                          [3];
   varchar product15_amount                            [13];
   varchar product16_code                              [7];
   varchar product16_quantity                          [3];
   varchar product16_amount                            [13];
   varchar product17_code                              [7];
   varchar product17_quantity                          [3];
   varchar product17_amount                            [13];
   varchar product18_code                              [7];
   varchar product18_quantity                          [3];
   varchar product18_amount                            [13];
   varchar product19_code                              [7];
   varchar product19_quantity                          [3];
   varchar product19_amount                            [13];
   varchar product20_code                              [7];
   varchar product20_quantity                          [3];
   varchar product20_amount                            [13];
   varchar aportionment_flag                           [2];
   varchar exp_date                                    [5];
   varchar open_date                                   [9];
   varchar open_time                                   [7];
   varchar cash_bonus                                  [2];
   varchar transmission_timestamp                      [11];
   varchar mcard_banknet                               [51];
   varchar  processed                                  [2];
   varchar ticket_nbr                                  [16];
   varchar def_gross_amt                               [13];
   varchar term                                        [4];

}db_bch20;

struct
{
  char  account_type                              [3];
  char  account_nbr                               [20];
  char  status                                    [3];
  char  date_added                                [9];
  char  maint_date                                [9];
  char  changed_by                                [21];
  char  credit_limit                              [13];
  char  available                                 [13];
  char  outstanding                               [13];
  char  ledger_balance                            [13];
  char  cash_limit                                [13]; 
  char  cash_available                            [13]; 
  char  cash_outstanding                          [13]; 

}pte_acf01;

struct
{
  varchar  account_type                              [3];
  varchar  account_nbr                               [20];
  varchar  status                                    [3];
  varchar  date_added                                [9];
  varchar  maint_date                                [9];
  varchar  changed_by                                [21];
  varchar  credit_limit                              [13];
  varchar  available                                 [13];
  varchar  outstanding                               [13];
  varchar  ledger_balance                            [13];
  varchar  cash_limit                                [13]; 
  varchar  cash_available                            [13]; 
  varchar  cash_outstanding                          [13]; 

}db_acf01;

struct
{
      char  card_type                                 [2];
      char  card_nbr                                  [20];
      char  primary_acct_nbr                          [20];
      char  daily_amt_usage                           [13];
      char  julian_date                               [8];
      char  peso_julian_date                          [8];
      char  dollar_julian_date                        [8];
      char  peso_usage1_nbr_usage                          [4];
      char  peso_usage1_amt_usage                          [13];
      char  peso_usage2_nbr_usage                          [4];
      char  peso_usage2_amt_usage                          [13];
      char  peso_usage3_nbr_usage                          [4];
      char  peso_usage3_amt_usage                          [13];
      char  peso_usage4_nbr_usage                          [4];
      char  peso_usage4_amt_usage                          [13];
      char  peso_usage5_nbr_usage                          [4];
      char  peso_usage5_amt_usage                          [13];
      char  peso_usage6_nbr_usage                          [4];
      char  peso_usage6_amt_usage                          [13];
      char  peso_usage7_nbr_usage                          [4];
      char  peso_usage7_amt_usage                          [13];
      char  peso_usage8_nbr_usage                          [4];
      char  peso_usage8_amt_usage                          [13];
      char  peso_usage9_nbr_usage                          [4];
      char  peso_usage9_amt_usage                          [13];
      char  peso_usage10_nbr_usage                         [4];
      char  peso_usage10_amt_usage                         [13];
      char  peso_usage11_nbr_usage                         [4];
      char  peso_usage11_amt_usage                         [13];
      char  peso_usage12_nbr_usage                         [4];
      char  peso_usage12_amt_usage                         [13];
      char  peso_usage13_nbr_usage                         [4];
      char  peso_usage13_amt_usage                         [13];
      char  peso_usage14_nbr_usage                         [4];
      char  peso_usage14_amt_usage                         [13];
      char  dollar_usage1_nbr_usage                          [4];
      char  dollar_usage1_amt_usage                          [13];
      char  dollar_usage2_nbr_usage                          [4];
      char  dollar_usage2_amt_usage                          [13];
      char  dollar_usage3_nbr_usage                          [4];
      char  dollar_usage3_amt_usage                          [13];
      char  dollar_usage4_nbr_usage                          [4];
      char  dollar_usage4_amt_usage                          [13];
      char  dollar_usage5_nbr_usage                          [4];
      char  dollar_usage5_amt_usage                          [13];
      char  dollar_usage6_nbr_usage                          [4];
      char  dollar_usage6_amt_usage                          [13];
      char  dollar_usage7_nbr_usage                          [4];
      char  dollar_usage7_amt_usage                          [13];
      char  dollar_usage8_nbr_usage                          [4];
      char  dollar_usage8_amt_usage                          [13];
      char  dollar_usage9_nbr_usage                          [4];
      char  dollar_usage9_amt_usage                          [13];
      char  dollar_usage10_nbr_usage                         [4];
      char  dollar_usage10_amt_usage                         [13];
      char  dollar_usage11_nbr_usage                         [4];
      char  dollar_usage11_amt_usage                         [13];
      char  dollar_usage12_nbr_usage                         [4];
      char  dollar_usage12_amt_usage                         [13];
      char  dollar_usage13_nbr_usage                         [4];
      char  dollar_usage13_amt_usage                         [13];
      char  dollar_usage14_nbr_usage                         [4];
      char  dollar_usage14_amt_usage                         [13];
      char  failed_pin_attempts                       [2];
      char  date_added                                [9];
      char  last_maint                                [9];
      char  status                                    [3];
      char  mcc1_code                                 [5];
      char  mcc1_usage                                [4];
      char  mcc2_code                                 [5];
      char  mcc2_usage                                [4];
      char  mcc3_code                                 [5];
      char  mcc3_usage                                [4];
      char  mcc4_code                                 [5];
      char  mcc4_usage                                [4];
      char  mcc5_code                                 [5];
      char  mcc5_usage                                [4];
      char  mcc6_code                                 [5];
      char  mcc6_usage                                [4];
      char  mcc7_code                                 [5];
      char  mcc7_usage                                [4];
      char  mcc8_code                                 [5];
      char  mcc8_usage                                [4];
      char  mcc9_code                                 [5];
      char  mcc9_usage                                [4];
      char  mcc10_code                                [5];
      char  mcc10_usage                               [4];
      char  mcc11_code                                [5];
      char  mcc11_usage                               [4];
      char  mcc12_code                                [5];
      char  mcc12_usage                               [4];
      char  mcc13_code                                [5];
      char  mcc13_usage                               [4];
      char  mcc14_code                                [5];
      char  mcc14_usage                               [4];
      char  mcc15_code                                [5];
      char  mcc15_usage                               [4];
      char  mcc16_code                                [5];
      char  mcc16_usage                               [4];
      char  mcc17_code                                [5];
      char  mcc17_usage                               [4];
      char  mcc18_code                                [5];
      char  mcc18_usage                               [4];
      char  mcc19_code                                [5];
      char  mcc19_usage                               [4];
      char  mcc20_code                                [5];
      char  mcc20_usage                               [4];
      char  repeat1_merchant_id                       [16];
      char  repeat1_nbr_uses                          [4];
      char  repeat2_merchant_id                       [16];
      char  repeat2_nbr_uses                          [4];
      char  repeat3_merchant_id                       [16];
      char  repeat3_nbr_uses                          [4];
      char  repeat4_merchant_id                       [16];
      char  repeat4_nbr_uses                          [4];
      char  repeat5_merchant_id                       [16];
      char  repeat5_nbr_uses                          [4];
      char  repeat6_merchant_id                       [16];
      char  repeat6_nbr_uses                          [4];
      char  repeat7_merchant_id                       [16];
      char  repeat7_nbr_uses                          [4];
      char  repeat8_merchant_id                       [16];
      char  repeat8_nbr_uses                          [4];
      char  repeat9_merchant_id                       [16];
      char  repeat9_nbr_uses                          [4];
      char  repeat10_merchant_id                      [16];
      char  repeat10_nbr_uses                         [4];
      char  repeat11_merchant_id                      [16];
      char  repeat11_nbr_uses                         [4];
      char  repeat12_merchant_id                      [16];
      char  repeat12_nbr_uses                         [4];
      char  repeat13_merchant_id                      [16];
      char  repeat13_nbr_uses                         [4];
      char  repeat14_merchant_id                      [16];
      char  repeat14_nbr_uses                         [4];
      char  repeat15_merchant_id                      [16];
      char  repeat15_nbr_uses                         [4];
      char  repeat16_merchant_id                      [16];
      char  repeat16_nbr_uses                         [4];
      char  repeat17_merchant_id                      [16];
      char  repeat17_nbr_uses                         [4];
      char  repeat18_merchant_id                      [16];
      char  repeat18_nbr_uses                         [4];
      char  repeat19_merchant_id                      [16];
      char  repeat19_nbr_uses                         [4];
      char  repeat20_merchant_id                      [16];
      char  repeat20_nbr_uses                         [4];

   }pte_ccf03p;

   struct
   {
      varchar  card_type                                 [2];
      varchar  card_nbr                                  [20];
      varchar  primary_acct_nbr                          [20];
      varchar  daily_amt_usage                           [13];
      varchar  julian_date                               [8];
      varchar  peso_julian_date                          [8];
      varchar  dollar_julian_date                        [8];
      varchar  peso_usage1_nbr_usage                          [4];
      varchar  peso_usage1_amt_usage                          [13];
      varchar  peso_usage2_nbr_usage                          [4];
      varchar  peso_usage2_amt_usage                          [13];
      varchar  peso_usage3_nbr_usage                          [4];
      varchar  peso_usage3_amt_usage                          [13];
      varchar  peso_usage4_nbr_usage                          [4];
      varchar  peso_usage4_amt_usage                          [13];
      varchar  peso_usage5_nbr_usage                          [4];
      varchar  peso_usage5_amt_usage                          [13];
      varchar  peso_usage6_nbr_usage                          [4];
      varchar  peso_usage6_amt_usage                          [13];
      varchar  peso_usage7_nbr_usage                          [4];
      varchar  peso_usage7_amt_usage                          [13];
      varchar  peso_usage8_nbr_usage                          [4];
      varchar  peso_usage8_amt_usage                          [13];
      varchar  peso_usage9_nbr_usage                          [4];
      varchar  peso_usage9_amt_usage                          [13];
      varchar  peso_usage10_nbr_usage                         [4];
      varchar  peso_usage10_amt_usage                         [13];
      varchar  peso_usage11_nbr_usage                         [4];
      varchar  peso_usage11_amt_usage                         [13];
      varchar  peso_usage12_nbr_usage                         [4];
      varchar  peso_usage12_amt_usage                         [13];
      varchar  peso_usage13_nbr_usage                         [4];
      varchar  peso_usage13_amt_usage                         [13];
      varchar  peso_usage14_nbr_usage                         [4];
      varchar  peso_usage14_amt_usage                         [13];
      varchar  dollar_usage1_nbr_usage                          [4];
      varchar  dollar_usage1_amt_usage                          [13];
      varchar  dollar_usage2_nbr_usage                          [4];
      varchar  dollar_usage2_amt_usage                          [13];
      varchar  dollar_usage3_nbr_usage                          [4];
      varchar  dollar_usage3_amt_usage                          [13];
      varchar  dollar_usage4_nbr_usage                          [4];
      varchar  dollar_usage4_amt_usage                          [13];
      varchar  dollar_usage5_nbr_usage                          [4];
      varchar  dollar_usage5_amt_usage                          [13];
      varchar  dollar_usage6_nbr_usage                          [4];
      varchar  dollar_usage6_amt_usage                          [13];
      varchar  dollar_usage7_nbr_usage                          [4];
      varchar  dollar_usage7_amt_usage                          [13];
      varchar  dollar_usage8_nbr_usage                          [4];
      varchar  dollar_usage8_amt_usage                          [13];
      varchar  dollar_usage9_nbr_usage                          [4];
      varchar  dollar_usage9_amt_usage                          [13];
      varchar  dollar_usage10_nbr_usage                         [4];
      varchar  dollar_usage10_amt_usage                         [13];
      varchar  dollar_usage11_nbr_usage                         [4];
      varchar  dollar_usage11_amt_usage                         [13];
      varchar  dollar_usage12_nbr_usage                         [4];
      varchar  dollar_usage12_amt_usage                         [13];
      varchar  dollar_usage13_nbr_usage                         [4];
      varchar  dollar_usage13_amt_usage                         [13];
      varchar  dollar_usage14_nbr_usage                         [4];
      varchar  dollar_usage14_amt_usage                         [13];
      varchar  failed_pin_attempts                       [2];
      varchar  date_added                                [9];
      varchar  last_maint                                [9];
      varchar  status                                    [3];
      varchar  mcc1_code                                 [5];
      varchar  mcc1_usage                                [4];
      varchar  mcc2_code                                 [5];
      varchar  mcc2_usage                                [4];
      varchar  mcc3_code                                 [5];
      varchar  mcc3_usage                                [4];
      varchar  mcc4_code                                 [5];
      varchar  mcc4_usage                                [4];
      varchar  mcc5_code                                 [5];
      varchar  mcc5_usage                                [4];
      varchar  mcc6_code                                 [5];
      varchar  mcc6_usage                                [4];
      varchar  mcc7_code                                 [5];
      varchar  mcc7_usage                                [4];
      varchar  mcc8_code                                 [5];
      varchar  mcc8_usage                                [4];
      varchar  mcc9_code                                 [5];
      varchar  mcc9_usage                                [4];
      varchar  mcc10_code                                [5];
      varchar  mcc10_usage                               [4];
      varchar  mcc11_code                                [5];
      varchar  mcc11_usage                               [4];
      varchar  mcc12_code                                [5];
      varchar  mcc12_usage                               [4];
      varchar  mcc13_code                                [5];
      varchar  mcc13_usage                               [4];
      varchar  mcc14_code                                [5];
      varchar  mcc14_usage                               [4];
      varchar  mcc15_code                                [5];
      varchar  mcc15_usage                               [4];
      varchar  mcc16_code                                [5];
      varchar  mcc16_usage                               [4];
      varchar  mcc17_code                                [5];
      varchar  mcc17_usage                               [4];
      varchar  mcc18_code                                [5];
      varchar  mcc18_usage                               [4];
      varchar  mcc19_code                                [5];
      varchar  mcc19_usage                               [4];
      varchar  mcc20_code                                [5];
      varchar  mcc20_usage                               [4];
      varchar  repeat1_merchant_id                       [16];
      varchar  repeat1_nbr_uses                          [4];
      varchar  repeat2_merchant_id                       [16];
      varchar  repeat2_nbr_uses                          [4];
      varchar  repeat3_merchant_id                       [16];
      varchar  repeat3_nbr_uses                          [4];
      varchar  repeat4_merchant_id                       [16];
      varchar  repeat4_nbr_uses                          [4];
      varchar  repeat5_merchant_id                       [16];
      varchar  repeat5_nbr_uses                          [4];
      varchar  repeat6_merchant_id                       [16];
      varchar  repeat6_nbr_uses                          [4];
      varchar  repeat7_merchant_id                       [16];
      varchar  repeat7_nbr_uses                          [4];
      varchar  repeat8_merchant_id                       [16];
      varchar  repeat8_nbr_uses                          [4];
      varchar  repeat9_merchant_id                       [16];
      varchar  repeat9_nbr_uses                          [4];
      varchar  repeat10_merchant_id                      [16];
      varchar  repeat10_nbr_uses                         [4];
      varchar  repeat11_merchant_id                      [16];
      varchar  repeat11_nbr_uses                         [4];
      varchar  repeat12_merchant_id                      [16];
      varchar  repeat12_nbr_uses                         [4];
      varchar  repeat13_merchant_id                      [16];
      varchar  repeat13_nbr_uses                         [4];
      varchar  repeat14_merchant_id                      [16];
      varchar  repeat14_nbr_uses                         [4];
      varchar  repeat15_merchant_id                      [16];
      varchar  repeat15_nbr_uses                         [4];
      varchar  repeat16_merchant_id                      [16];
      varchar  repeat16_nbr_uses                         [4];
      varchar  repeat17_merchant_id                      [16];
      varchar  repeat17_nbr_uses                         [4];
      varchar  repeat18_merchant_id                      [16];
      varchar  repeat18_nbr_uses                         [4];
      varchar  repeat19_merchant_id                      [16];
      varchar  repeat19_nbr_uses                         [4];
      varchar  repeat20_merchant_id                      [16];
      varchar  repeat20_nbr_uses                         [4];

   }db_ccf03p;

   struct
   {
      char  card_type                                 [2];
      char  card_nbr                                  [20];
      char  primary_acct_nbr                          [20];
      char  daily_amt_usage                           [13];
      char  julian_date                               [8];
      char  peso_julian_date                          [8];
      char  dollar_julian_date                        [8];
      char  peso_usage1_nbr_usage                          [4];
      char  peso_usage1_amt_usage                          [13];
      char  peso_usage2_nbr_usage                          [4];
      char  peso_usage2_amt_usage                          [13];
      char  peso_usage3_nbr_usage                          [4];
      char  peso_usage3_amt_usage                          [13];
      char  peso_usage4_nbr_usage                          [4];
      char  peso_usage4_amt_usage                          [13];
      char  peso_usage5_nbr_usage                          [4];
      char  peso_usage5_amt_usage                          [13];
      char  peso_usage6_nbr_usage                          [4];
      char  peso_usage6_amt_usage                          [13];
      char  peso_usage7_nbr_usage                          [4];
      char  peso_usage7_amt_usage                          [13];
      char  peso_usage8_nbr_usage                          [4];
      char  peso_usage8_amt_usage                          [13];
      char  peso_usage9_nbr_usage                          [4];
      char  peso_usage9_amt_usage                          [13];
      char  peso_usage10_nbr_usage                         [4];
      char  peso_usage10_amt_usage                         [13];
      char  peso_usage11_nbr_usage                         [4];
      char  peso_usage11_amt_usage                         [13];
      char  peso_usage12_nbr_usage                         [4];
      char  peso_usage12_amt_usage                         [13];
      char  peso_usage13_nbr_usage                         [4];
      char  peso_usage13_amt_usage                         [13];
      char  peso_usage14_nbr_usage                         [4];
      char  peso_usage14_amt_usage                         [13];
      char  dollar_usage1_nbr_usage                          [4];
      char  dollar_usage1_amt_usage                          [13];
      char  dollar_usage2_nbr_usage                          [4];
      char  dollar_usage2_amt_usage                          [13];
      char  dollar_usage3_nbr_usage                          [4];
      char  dollar_usage3_amt_usage                          [13];
      char  dollar_usage4_nbr_usage                          [4];
      char  dollar_usage4_amt_usage                          [13];
      char  dollar_usage5_nbr_usage                          [4];
      char  dollar_usage5_amt_usage                          [13];
      char  dollar_usage6_nbr_usage                          [4];
      char  dollar_usage6_amt_usage                          [13];
      char  dollar_usage7_nbr_usage                          [4];
      char  dollar_usage7_amt_usage                          [13];
      char  dollar_usage8_nbr_usage                          [4];
      char  dollar_usage8_amt_usage                          [13];
      char  dollar_usage9_nbr_usage                          [4];
      char  dollar_usage9_amt_usage                          [13];
      char  dollar_usage10_nbr_usage                         [4];
      char  dollar_usage10_amt_usage                         [13];
      char  dollar_usage11_nbr_usage                         [4];
      char  dollar_usage11_amt_usage                         [13];
      char  dollar_usage12_nbr_usage                         [4];
      char  dollar_usage12_amt_usage                         [13];
      char  dollar_usage13_nbr_usage                         [4];
      char  dollar_usage13_amt_usage                         [13];
      char  dollar_usage14_nbr_usage                         [4];
      char  dollar_usage14_amt_usage                         [13];
      char  failed_pin_attempts                       [2];
      char  date_added                                [9];
      char  last_maint                                [9];
      char  status                                    [3];
      char  mcc1_code                                 [5];
      char  mcc1_usage                                [4];
      char  mcc2_code                                 [5];
      char  mcc2_usage                                [4];
      char  mcc3_code                                 [5];
      char  mcc3_usage                                [4];
      char  mcc4_code                                 [5];
      char  mcc4_usage                                [4];
      char  mcc5_code                                 [5];
      char  mcc5_usage                                [4];
      char  mcc6_code                                 [5];
      char  mcc6_usage                                [4];
      char  mcc7_code                                 [5];
      char  mcc7_usage                                [4];
      char  mcc8_code                                 [5];
      char  mcc8_usage                                [4];
      char  mcc9_code                                 [5];
      char  mcc9_usage                                [4];
      char  mcc10_code                                [5];
      char  mcc10_usage                               [4];
      char  mcc11_code                                [5];
      char  mcc11_usage                               [4];
      char  mcc12_code                                [5];
      char  mcc12_usage                               [4];
      char  mcc13_code                                [5];
      char  mcc13_usage                               [4];
      char  mcc14_code                                [5];
      char  mcc14_usage                               [4];
      char  mcc15_code                                [5];
      char  mcc15_usage                               [4];
      char  mcc16_code                                [5];
      char  mcc16_usage                               [4];
      char  mcc17_code                                [5];
      char  mcc17_usage                               [4];
      char  mcc18_code                                [5];
      char  mcc18_usage                               [4];
      char  mcc19_code                                [5];
      char  mcc19_usage                               [4];
      char  mcc20_code                                [5];
      char  mcc20_usage                               [4];
      char  repeat1_merchant_id                       [16];
      char  repeat1_nbr_uses                          [4];
      char  repeat2_merchant_id                       [16];
      char  repeat2_nbr_uses                          [4];
      char  repeat3_merchant_id                       [16];
      char  repeat3_nbr_uses                          [4];
      char  repeat4_merchant_id                       [16];
      char  repeat4_nbr_uses                          [4];
      char  repeat5_merchant_id                       [16];
      char  repeat5_nbr_uses                          [4];
      char  repeat6_merchant_id                       [16];
      char  repeat6_nbr_uses                          [4];
      char  repeat7_merchant_id                       [16];
      char  repeat7_nbr_uses                          [4];
      char  repeat8_merchant_id                       [16];
      char  repeat8_nbr_uses                          [4];
      char  repeat9_merchant_id                       [16];
      char  repeat9_nbr_uses                          [4];
      char  repeat10_merchant_id                      [16];
      char  repeat10_nbr_uses                         [4];
      char  repeat11_merchant_id                      [16];
      char  repeat11_nbr_uses                         [4];
      char  repeat12_merchant_id                      [16];
      char  repeat12_nbr_uses                         [4];
      char  repeat13_merchant_id                      [16];
      char  repeat13_nbr_uses                         [4];
      char  repeat14_merchant_id                      [16];
      char  repeat14_nbr_uses                         [4];
      char  repeat15_merchant_id                      [16];
      char  repeat15_nbr_uses                         [4];
      char  repeat16_merchant_id                      [16];
      char  repeat16_nbr_uses                         [4];
      char  repeat17_merchant_id                      [16];
      char  repeat17_nbr_uses                         [4];
      char  repeat18_merchant_id                      [16];
      char  repeat18_nbr_uses                         [4];
      char  repeat19_merchant_id                      [16];
      char  repeat19_nbr_uses                         [4];
      char  repeat20_merchant_id                      [16];
      char  repeat20_nbr_uses                         [4];

   }pte_offus_velocity;

   struct
   {
      varchar  card_type                                 [2];
      varchar  card_nbr                                  [20];
      varchar  primary_acct_nbr                          [20];
      varchar  daily_amt_usage                           [13];
      varchar  julian_date                               [8];
      varchar  peso_julian_date                          [8];
      varchar  dollar_julian_date                        [8];
      varchar  peso_usage1_nbr_usage                          [4];
      varchar  peso_usage1_amt_usage                          [13];
      varchar  peso_usage2_nbr_usage                          [4];
      varchar  peso_usage2_amt_usage                          [13];
      varchar  peso_usage3_nbr_usage                          [4];
      varchar  peso_usage3_amt_usage                          [13];
      varchar  peso_usage4_nbr_usage                          [4];
      varchar  peso_usage4_amt_usage                          [13];
      varchar  peso_usage5_nbr_usage                          [4];
      varchar  peso_usage5_amt_usage                          [13];
      varchar  peso_usage6_nbr_usage                          [4];
      varchar  peso_usage6_amt_usage                          [13];
      varchar  peso_usage7_nbr_usage                          [4];
      varchar  peso_usage7_amt_usage                          [13];
      varchar  peso_usage8_nbr_usage                          [4];
      varchar  peso_usage8_amt_usage                          [13];
      varchar  peso_usage9_nbr_usage                          [4];
      varchar  peso_usage9_amt_usage                          [13];
      varchar  peso_usage10_nbr_usage                         [4];
      varchar  peso_usage10_amt_usage                         [13];
      varchar  peso_usage11_nbr_usage                         [4];
      varchar  peso_usage11_amt_usage                         [13];
      varchar  peso_usage12_nbr_usage                         [4];
      varchar  peso_usage12_amt_usage                         [13];
      varchar  peso_usage13_nbr_usage                         [4];
      varchar  peso_usage13_amt_usage                         [13];
      varchar  peso_usage14_nbr_usage                         [4];
      varchar  peso_usage14_amt_usage                         [13];
      varchar  dollar_usage1_nbr_usage                          [4];
      varchar  dollar_usage1_amt_usage                          [13];
      varchar  dollar_usage2_nbr_usage                          [4];
      varchar  dollar_usage2_amt_usage                          [13];
      varchar  dollar_usage3_nbr_usage                          [4];
      varchar  dollar_usage3_amt_usage                          [13];
      varchar  dollar_usage4_nbr_usage                          [4];
      varchar  dollar_usage4_amt_usage                          [13];
      varchar  dollar_usage5_nbr_usage                          [4];
      varchar  dollar_usage5_amt_usage                          [13];
      varchar  dollar_usage6_nbr_usage                          [4];
      varchar  dollar_usage6_amt_usage                          [13];
      varchar  dollar_usage7_nbr_usage                          [4];
      varchar  dollar_usage7_amt_usage                          [13];
      varchar  dollar_usage8_nbr_usage                          [4];
      varchar  dollar_usage8_amt_usage                          [13];
      varchar  dollar_usage9_nbr_usage                          [4];
      varchar  dollar_usage9_amt_usage                          [13];
      varchar  dollar_usage10_nbr_usage                         [4];
      varchar  dollar_usage10_amt_usage                         [13];
      varchar  dollar_usage11_nbr_usage                         [4];
      varchar  dollar_usage11_amt_usage                         [13];
      varchar  dollar_usage12_nbr_usage                         [4];
      varchar  dollar_usage12_amt_usage                         [13];
      varchar  dollar_usage13_nbr_usage                         [4];
      varchar  dollar_usage13_amt_usage                         [13];
      varchar  dollar_usage14_nbr_usage                         [4];
      varchar  dollar_usage14_amt_usage                         [13];
      varchar  failed_pin_attempts                       [2];
      varchar  date_added                                [9];
      varchar  last_maint                                [9];
      varchar  status                                    [3];
      varchar  mcc1_code                                 [5];
      varchar  mcc1_usage                                [4];
      varchar  mcc2_code                                 [5];
      varchar  mcc2_usage                                [4];
      varchar  mcc3_code                                 [5];
      varchar  mcc3_usage                                [4];
      varchar  mcc4_code                                 [5];
      varchar  mcc4_usage                                [4];
      varchar  mcc5_code                                 [5];
      varchar  mcc5_usage                                [4];
      varchar  mcc6_code                                 [5];
      varchar  mcc6_usage                                [4];
      varchar  mcc7_code                                 [5];
      varchar  mcc7_usage                                [4];
      varchar  mcc8_code                                 [5];
      varchar  mcc8_usage                                [4];
      varchar  mcc9_code                                 [5];
      varchar  mcc9_usage                                [4];
      varchar  mcc10_code                                [5];
      varchar  mcc10_usage                               [4];
      varchar  mcc11_code                                [5];
      varchar  mcc11_usage                               [4];
      varchar  mcc12_code                                [5];
      varchar  mcc12_usage                               [4];
      varchar  mcc13_code                                [5];
      varchar  mcc13_usage                               [4];
      varchar  mcc14_code                                [5];
      varchar  mcc14_usage                               [4];
      varchar  mcc15_code                                [5];
      varchar  mcc15_usage                               [4];
      varchar  mcc16_code                                [5];
      varchar  mcc16_usage                               [4];
      varchar  mcc17_code                                [5];
      varchar  mcc17_usage                               [4];
      varchar  mcc18_code                                [5];
      varchar  mcc18_usage                               [4];
      varchar  mcc19_code                                [5];
      varchar  mcc19_usage                               [4];
      varchar  mcc20_code                                [5];
      varchar  mcc20_usage                               [4];
      varchar  repeat1_merchant_id                       [16];
      varchar  repeat1_nbr_uses                          [4];
      varchar  repeat2_merchant_id                       [16];
      varchar  repeat2_nbr_uses                          [4];
      varchar  repeat3_merchant_id                       [16];
      varchar  repeat3_nbr_uses                          [4];
      varchar  repeat4_merchant_id                       [16];
      varchar  repeat4_nbr_uses                          [4];
      varchar  repeat5_merchant_id                       [16];
      varchar  repeat5_nbr_uses                          [4];
      varchar  repeat6_merchant_id                       [16];
      varchar  repeat6_nbr_uses                          [4];
      varchar  repeat7_merchant_id                       [16];
      varchar  repeat7_nbr_uses                          [4];
      varchar  repeat8_merchant_id                       [16];
      varchar  repeat8_nbr_uses                          [4];
      varchar  repeat9_merchant_id                       [16];
      varchar  repeat9_nbr_uses                          [4];
      varchar  repeat10_merchant_id                      [16];
      varchar  repeat10_nbr_uses                         [4];
      varchar  repeat11_merchant_id                      [16];
      varchar  repeat11_nbr_uses                         [4];
      varchar  repeat12_merchant_id                      [16];
      varchar  repeat12_nbr_uses                         [4];
      varchar  repeat13_merchant_id                      [16];
      varchar  repeat13_nbr_uses                         [4];
      varchar  repeat14_merchant_id                      [16];
      varchar  repeat14_nbr_uses                         [4];
      varchar  repeat15_merchant_id                      [16];
      varchar  repeat15_nbr_uses                         [4];
      varchar  repeat16_merchant_id                      [16];
      varchar  repeat16_nbr_uses                         [4];
      varchar  repeat17_merchant_id                      [16];
      varchar  repeat17_nbr_uses                         [4];
      varchar  repeat18_merchant_id                      [16];
      varchar  repeat18_nbr_uses                         [4];
      varchar  repeat19_merchant_id                      [16];
      varchar  repeat19_nbr_uses                         [4];
      varchar  repeat20_merchant_id                      [16];
      varchar  repeat20_nbr_uses                         [4];

   }db_offus_velocity;

   struct
   {
      char  card_type                                 [2];
      char  card_nbr                                  [20];

      char  primary_acct_nbr                          [20];
      char  caf_profile_id                            [5];
      char  status                                    [3];
      char  pin_offset                                [9];
      char  date_added                                [9];
      char  maint_date                                [9];
      char  changed_by                                [21];
      char  card_class                                [2];
      char  expire_date                               [5];
      char  effect_date                               [9];
      char  percent_deposit                           [3];
      char  percent_avail_allowed                     [3];
      char  credit_line                               [13];
      char  outstanding_auths                         [13];
      char  allowed                                   [17];
      char  currency_code                             [4];
      char  country_code                              [4];
      char  peso_saving_acct                          [13]; 
      char  peso_current_acct                         [13]; 
      char  dollar_saving_acct                        [13]; 
      char  dollar_current_acct                       [13]; 
      char  product_codes                             [21]; 
      char  cash_bonus_eligible                       [2];  
      char  visa_purchase_card                        [2];
      char  related_acct_type_1                       [3];
      char  related_acct_nbr_1                        [20];
      char  related_acct_type_2                       [3];
      char  related_acct_nbr_2                        [20];
      char  related_acct_type_3                       [3];
      char  related_acct_nbr_3                        [20];
      char  related_acct_type_4                       [3];
      char  related_acct_nbr_4                        [20];
      char  related_acct_type_5                       [3];
      char  related_acct_nbr_5                        [20];
      char  related_acct_type_6                       [3];
      char  related_acct_nbr_6                        [20];
      char  related_acct_type_7                       [3];
      char  related_acct_nbr_7                        [20];
      char  related_acct_type_8                       [3];
      char  related_acct_nbr_8                        [20];
      char  related_acct_type_9                       [3];
      char  related_acct_nbr_9                        [20];
      char  related_acct_type_10                      [3];
      char  related_acct_nbr_10                       [20];

      char  pin_verification_override                 [2];
      char  pin                                       [101];
      char  pvki                                      [3] ;     /* Modified by SDG on Feb 17 */
      char  add_on_rate                               [6];
      char  add_on_term                               [4];
      char  peso_tran_limit                           [13];
      char  dollar_tran_limit                         [13];
   }pte_ccf02p;

   struct
   {
      varchar  card_type                                 [2];
      varchar  card_nbr                                  [20];

      varchar  primary_acct_nbr                          [20];
      varchar  caf_profile_id                            [5];
      varchar  status                                    [3];
      varchar  pin_offset                                [9];
      varchar  date_added                                [9];
      varchar  maint_date                                [9];
      varchar  changed_by                                [21];
      varchar  card_class                                [2];
      varchar  expire_date                               [5];
      varchar  effect_date                               [9];
      varchar  percent_deposit                           [3];
      varchar  percent_avail_allowed                     [3];
      varchar  credit_line                               [13];
      varchar  outstanding_auths                         [13];
      varchar  allowed                                   [17];
      varchar  currency_code                             [4];
      varchar  country_code                              [4];
      varchar  peso_saving_acct                          [13]; 
      varchar  peso_current_acct                         [13]; 
      varchar  dollar_saving_acct                        [13]; 
      varchar  dollar_current_acct                       [13]; 
      varchar  product_codes                             [21]; 
      varchar  cash_bonus_eligible                       [2];  
      varchar  visa_purchase_card                        [2];
      varchar  related_acct_type_1                       [3];
      varchar  related_acct_nbr_1                        [20];
      varchar  related_acct_type_2                       [3];
      varchar  related_acct_nbr_2                        [20];
      varchar  related_acct_type_3                       [3];
      varchar  related_acct_nbr_3                        [20];
      varchar  related_acct_type_4                       [3];
      varchar  related_acct_nbr_4                        [20];
      varchar  related_acct_type_5                       [3];
      varchar  related_acct_nbr_5                        [20];
      varchar  related_acct_type_6                       [3];
      varchar  related_acct_nbr_6                        [20];
      varchar  related_acct_type_7                       [3];
      varchar  related_acct_nbr_7                        [20];
      varchar  related_acct_type_8                       [3];
      varchar  related_acct_nbr_8                        [20];
      varchar  related_acct_type_9                       [3];
      varchar  related_acct_nbr_9                        [20];
      varchar  related_acct_type_10                      [3];
      varchar  related_acct_nbr_10                       [20];

      varchar  pin_verification_override                 [2];
      varchar  pin										 [100];
      varchar pvki                                       [3];
      varchar  add_on_rate                               [6];
      varchar  add_on_term                               [4];
      varchar  peso_tran_limit                           [13];
      varchar  dollar_tran_limit                         [13];

   }db_ccf02p;

struct
{
   char  network_id              [11];
   char  network_type             [2];
   char  batch_number             [7];

   char  open_date                [9];
   char  open_time                [7];
   char  release_date             [9];
   char  release_time             [7];
   char  credit_cnt              [11];
   char  credit_amt              [17];
   char  credit_rev_cnt          [11];
   char  credit_rev_amt          [17];
   char  debit_cnt               [11];
   char  debit_amt               [17];
   char  debit_rev_cnt           [11];
   char  debit_rev_amt           [17];
   char  total_amt               [17];
   char  total_amt_type           [2];

} pte_ncf21;

struct
{
   varchar  network_id           [11];
   varchar  network_type          [2];
   varchar  batch_number          [7];

   varchar  open_date             [9];
   varchar  open_time             [7];
   varchar  release_date          [9];
   varchar  release_time          [7];
   varchar  credit_cnt           [11];
   varchar  credit_amt           [17];
   varchar  credit_rev_cnt       [11];
   varchar  credit_rev_amt       [17];
   varchar  debit_cnt            [11];
   varchar  debit_amt            [17];
   varchar  debit_rev_cnt        [11];
   varchar  debit_rev_amt        [17];
   varchar  total_amt            [17];
   varchar  total_amt_type        [2];

} db_ncf21;





struct
{
   char  network_id              [11];
   char  network_type             [2];
   char  batch_number             [7];
   char  retrieval_ref_num       [13];

   char  open_date                [9];
   char  open_time                [7];
   char  merchant_id             [16];
   char  transaction_id          [21];
   char  device_id                [9];
   char  card_nbr                [20];
   char  message_type             [5];
   char  processing_code          [7];
   char  tran_amount             [13];
   char  auth_number              [7];
   char  response_code            [3];
   char  tran_date                [9];
   char  tran_time                [7];
   char  sys_trace_audit_nbr      [7];
   char  tx_key                      ;
   char  invoice_nbr              [9];
   char  network_data            [13];
   char  currency_code            [4];
   char  acquiring_inst_id_code  [12];
   char  settlement_date          [5];
   char  transmission_timestamp  [11];
   char  tran_fee_amount         [10];

} pte_ncf30;

struct
{
   varchar  network_id             [11];
   varchar  network_type            [2];
   varchar  batch_number            [7];
   varchar  retrieval_ref_num      [13];

   varchar  open_date               [9];
   varchar  open_time               [7];
   varchar  merchant_id            [16];
   varchar  transaction_id         [21];
   varchar  device_id               [9];
   varchar  card_nbr               [20];
   varchar  message_type            [5];
   varchar  processing_code         [7];
   varchar  tran_amount            [13];
   varchar  auth_number             [7];
   varchar  response_code           [3];
   varchar  tran_date               [9];
   varchar  tran_time               [7];
   varchar  sys_trace_audit_nbr     [7];
   varchar  tx_key                  [1];
   varchar  invoice_nbr             [9];
   varchar  network_data           [13];
   varchar  currency_code           [4];
   varchar  acquiring_inst_id_code [12];
   varchar  settlement_date         [5];
   varchar  transmission_timestamp [11];
   varchar  tran_fee_amount        [10];

} db_ncf30;

   struct 
   {
      varchar creditlimit[13] ;
      varchar available[13] ;
      varchar outstanding[13] ;

   } db_acf01_deferred ;

/* Created new table to hold stand-in procesed transactions - Girija Y */
struct
{
    char transaction_id                     [21]; 

    char entry_type                         ;
    char tpdu_id                            [16];
    char issuer_id                          [21];
    char acquirer_id                        [21];
    char tx_key                             ;
    char terminal_id                        [9];
    char terminal_type                      [3];
    char response_text                      [41];
    char card_num_len                       [3];
    char card_num                           [20];
    char exp_date                           [5];
    char total_amount                       [13];
    char add_amounts                        [25];
    char invoice_number                     [9];
    char orig_amount                        [13];
    char auth_number                        [7];
    char processing_code                    [7];
    char sys_trace_audit_num                [7];
    char orig_sys_trace_num                 [7];
    char pos_entry_mode                     [5];
    char nii                                [5];
    char pos_condition_code                 [3];
    char track1                             [77];
    char track2                             [38];
    char retrieval_ref_num                  [13];
    char orig_retrieval_ref_num             [13];
    char merchant_id                        [16];
    char orig_message                       [5];
    char settlement_total                   [17];
    char message_type                       [5];
    char card_holder_name                   [31];
    char general_status                     ;
    char originator_queue                   [17];
    char originator_info                    [33];
    char batch_number                       [7];
    char response_code                      [3];
    char date_yyyymmdd                      [9];
    char time_hhmmss                        [7];
    char num_sales                          [4];
    char sales_amount                       [13];
    char num_refunds                        [4];
    char refund_amount                      [13];
    char num_dbsales                        [4];
    char dbsales_amount                     [13];
    char num_dbrefunds                      [4];
    char dbrefund_amount                    [13];
    char pin_block                          [19];
    char tax_amount                         [13];
    char tip_amount                         [13];
    char tran_start_time                    [17];
    char host_start_time                    [17];
    char host_finish_time                   [17];
    char tran_finish_time                   [17];
    char settle_file_prefix                 [7];
    char resp_source_len                    [3];
    char visa_char_indicator                ;
    char visa_tran_id                       [16];
    char visa_validation_code               [5];
    char mcard_banknet_len                  [4];
    char mcard_banknet                      [51];
    char agent_id_len                       [4];
    char agent_id                           [12];
    char cvc                                ;
    char settlement_date                    [5];

    char category_code                      [5];
    char conversion_rate                    [10];
    char product_code                       [9];
    char odometer                           [8];
    char organization_id                    [5];
    char dynamic_keychange                  ;

   char source_key                          [49];
   char txn_cnt                            [4];
   char dcf01_retired_cwk                  [49];
   char dest_key                           [49];
   char ncf01_retired_cwk                  [49];
   char handler_queue        		       [8];
   char authorizing_host_queue		   	   [8];
   char max_net_consec_tmouts              [4];
   char max_active_txns                    [4];
   char forwarding_institution_id          [12];
   char remote_nsp_type                    [2];
   char kek                                [17]; 
   char acquiring_id                       [12];
   char outstanding_balance                [13]; 
   char credit_limit                       [13];
   char nfi_name                           [11];
   char nfi_seq_nbr                        [7];
   char nfi_start_date                     [9];
   char nfi_end_date                       [9];
   char resp_source                        [26];

   char origin                             [3];
   char auth_1                             [3];
   char auth_2                             [3];
   char update_mask                        [2];
   char type_of_data                       [3];
   char down_payment                       [13];
   char period                             [3];
   char interest_rate                      [5];
   char total_interest                     [13];
   char redemption_amount                  [13];
   char vehicle_number                     [9];

   char profile                                    [3];
   char nbr_of_prod_codes                          [3];
   
   char product1_code                              [7];
   char product1_quantity                          [3];
   char product1_amount                            [13];
   char product2_code                              [7];
   char product2_quantity                          [3];
   char product2_amount                            [13];
   char product3_code                              [7];
   char product3_quantity                          [3];
   char product3_amount                            [13];
   char product4_code                              [7];
   char product4_quantity                          [3];
   char product4_amount                            [13];
   char product5_code                              [7];
   char product5_quantity                          [3];
   char product5_amount                            [13];
   char product6_code                              [7];
   char product6_quantity                          [3];
   char product6_amount                            [13];
   char product7_code                              [7];
   char product7_quantity                          [3];
   char product7_amount                            [13];
   char product8_code                              [7];
   char product8_quantity                          [3];
   char product8_amount                            [13];
   char product9_code                              [7];
   char product9_quantity                          [3];
   char product9_amount                            [13];
   char product10_code                              [7];
   char product10_quantity                          [3];
   char product10_amount                            [13];
   char product11_code                              [7];
   char product11_quantity                          [3];
   char product11_amount                            [13];
   char product12_code                              [7];
   char product12_quantity                          [3];
   char product12_amount                            [13];
   char product13_code                              [7];
   char product13_quantity                          [3];
   char product13_amount                            [13];
   char product14_code                              [7];
   char product14_quantity                          [3];
   char product14_amount                            [13];
   char product15_code                              [7];
   char product15_quantity                          [3];
   char product15_amount                            [13];
   char product16_code                              [7];
   char product16_quantity                          [3];
   char product16_amount                            [13];
   char product17_code                              [7];
   char product17_quantity                          [3];
   char product17_amount                            [13];
   char product18_code                              [7];
   char product18_quantity                          [3];
   char product18_amount                            [13];
   char product19_code                              [7];
   char product19_quantity                          [3];
   char product19_amount                            [13];
   char product20_code                              [7];
   char product20_quantity                          [3];
   char product20_amount                            [13];
   char visa_merchant_id                            [16];
   char cash_bonus                                  [2];  
   char deferred_factor                             [8]; 
   char deferred_term_length                        [4]; 
   char currency_code                               [4];  
   char transmission_timestamp                      [11]; 
   char tran_fee_amount                             [9];  
   char cvc_data                                    [4];  

   char verify_mag_stripe                           [2];  
   char saf                                         [2];  
   char security_response_code                      [3];  
   char service_code                                [4];  
   char source_pin_format                           [3];  
   char dest_pin_format                             [3];  
   char voice_auth                                  [2]; 
   char actual_amount                               [13]; 
   char reversal_amount                             [13]; 
   char voice_auth_text                             [241]; 
   char operator_id                                 [21];  
   char workstation                                 [21];  
   char orig_auth_number                            [7];  
   char ticket_nbr									[16];
   char system_date                                 [9];
   char def_gross_amt                               [13];
   char monthly_amort_amt                           [13];
}pte_tlf01_stip;


struct
{
    varchar transaction_id                     [21]; 

    varchar entry_type                         [1];
    varchar tpdu_id                            [16];
    varchar issuer_id                          [21];
    varchar acquirer_id                        [21];
    varchar tx_key                             [1];
    varchar terminal_id                        [9];
    varchar terminal_type                      [3];
    varchar response_text                      [41];
    varchar card_num_len                       [3];
    varchar card_num                           [20];
    varchar exp_date                           [5];
    varchar total_amount                       [13];
    varchar add_amounts                        [25];
    varchar invoice_number                     [9];
    varchar orig_amount                        [13];
    varchar auth_number                        [7];
    varchar processing_code                    [7];
    varchar sys_trace_audit_num                [7];
    varchar orig_sys_trace_num                 [7];
    varchar pos_entry_mode                     [5];
    varchar nii                                [5];
    varchar pos_condition_code                 [3];
    varchar track1                             [77];
    varchar track2                             [38];
    varchar retrieval_ref_num                  [13];
    varchar orig_retrieval_ref_num             [13];
    varchar merchant_id                        [16];
    varchar orig_message                       [5];
    varchar settlement_total                   [17];
    varchar message_type                       [5];
    varchar card_holder_name                   [31];
    varchar general_status                     [1];
    varchar originator_queue                   [17];
    varchar originator_info                    [33];
    varchar batch_number                       [7];
    varchar response_code                      [3];
    varchar date_yyyymmdd                      [9];
    varchar time_hhmmss                        [7];
    varchar num_sales                          [4];
    varchar sales_amount                       [13];
    varchar num_refunds                        [4];
    varchar refund_amount                      [13];
    varchar num_dbsales                        [4];
    varchar dbsales_amount                     [13];
    varchar num_dbrefunds                      [4];
    varchar dbrefund_amount                    [13];
    varchar pin_block                          [19];
    varchar tax_amount                         [13];
    varchar tip_amount                         [13];
    varchar tran_start_time                    [17];
    varchar host_start_time                    [17];
    varchar host_finish_time                   [17];
    varchar tran_finish_time                   [17];
    varchar settle_file_prefix                 [7];
    varchar resp_source_len                    [3];
    varchar visa_char_indicator                [1];
    varchar visa_tran_id                       [16];
    varchar visa_validation_code               [5];
    varchar mcard_banknet_len                  [4];
    varchar mcard_banknet                      [51];
    varchar agent_id_len                       [4];
    varchar agent_id                           [12];
    varchar cvc                                [1];
    varchar settlement_date                    [5];

    varchar category_code                      [5];
    varchar conversion_rate                    [10];
    varchar product_code                       [9];
    varchar odometer                           [8];
    varchar organization_id                    [5];
    varchar dynamic_keychange                  [1];

   varchar source_key                         [49];
   varchar txn_cnt                            [4];
   varchar dcf01_retired_cwk                  [49];
   varchar dest_key                           [49];
   varchar ncf01_retired_cwk                  [49];
   varchar handler_queue        		      [8];
   varchar authorizing_host_queue		   	  [8];
   varchar max_net_consec_tmouts              [4];
   varchar max_active_txns                    [4];
   varchar forwarding_institution_id          [12];
   varchar remote_nsp_type                    [2];
   varchar kek                                [17];
   varchar acquiring_id                       [12];
   varchar outstanding_balance                [13];
   varchar credit_limit                       [13];
   varchar nfi_name                           [11];
   varchar nfi_seq_nbr                        [7];
   varchar nfi_start_date                     [9];
   varchar nfi_end_date                       [9];
   varchar resp_source                        [26];
   varchar origin                             [3];
   varchar auth_1                             [3];
   varchar auth_2                             [3];
   varchar update_mask                        [2];
   varchar type_of_data                       [3];
   varchar down_payment                       [13];
   varchar period                             [3];
   varchar interest_rate                      [5];
   varchar total_interest                     [13];
   varchar redemption_amount                  [13];
   varchar vehicle_number                     [9];

   varchar profile                                    [3];
   varchar nbr_of_prod_codes                          [3];
   
   varchar product1_code                              [7];
   varchar product1_quantity                          [3];
   varchar product1_amount                            [13];
   varchar product2_code                              [7];
   varchar product2_quantity                          [3];
   varchar product2_amount                            [13];
   varchar product3_code                              [7];
   varchar product3_quantity                          [3];
   varchar product3_amount                            [13];
   varchar product4_code                              [7];
   varchar product4_quantity                          [3];
   varchar product4_amount                            [13];
   varchar product5_code                              [7];
   varchar product5_quantity                          [3];
   varchar product5_amount                            [13];
   varchar product6_code                              [7];
   varchar product6_quantity                          [3];
   varchar product6_amount                            [13];
   varchar product7_code                              [7];
   varchar product7_quantity                          [3];
   varchar product7_amount                            [13];
   varchar product8_code                              [7];
   varchar product8_quantity                          [3];
   varchar product8_amount                            [13];
   varchar product9_code                              [7];
   varchar product9_quantity                          [3];
   varchar product9_amount                            [13];
   varchar product10_code                              [7];
   varchar product10_quantity                          [3];
   varchar product10_amount                            [13];
   varchar product11_code                              [7];
   varchar product11_quantity                          [3];
   varchar product11_amount                            [13];
   varchar product12_code                              [7];
   varchar product12_quantity                          [3];
   varchar product12_amount                            [13];
   varchar product13_code                              [7];
   varchar product13_quantity                          [3];
   varchar product13_amount                            [13];
   varchar product14_code                              [7];
   varchar product14_quantity                          [3];
   varchar product14_amount                            [13];
   varchar product15_code                              [7];
   varchar product15_quantity                          [3];
   varchar product15_amount                            [13];
   varchar product16_code                              [7];
   varchar product16_quantity                          [3];
   varchar product16_amount                            [13];
   varchar product17_code                              [7];
   varchar product17_quantity                          [3];
   varchar product17_amount                            [13];
   varchar product18_code                              [7];
   varchar product18_quantity                          [3];
   varchar product18_amount                            [13];
   varchar product19_code                              [7];
   varchar product19_quantity                          [3];
   varchar product19_amount                            [13];
   varchar product20_code                              [7];
   varchar product20_quantity                          [3];
   varchar product20_amount                            [13];
   varchar visa_merchant_id                            [16];
   varchar cash_bonus                                  [2];  
   varchar deferred_factor                             [8];  
   varchar deferred_term_length                        [4];  
   varchar currency_code                               [4];  
   varchar transmission_timestamp                      [11]; 
   varchar tran_fee_amount                             [9];  
   varchar cvc_data                                    [4];  
   varchar verify_mag_stripe                           [2];  
   varchar saf                                         [2];  
   varchar security_response_code                      [3];  
   varchar service_code                                [4];  
   varchar source_pin_format                           [3];  
   varchar dest_pin_format                             [3];  
   varchar voice_auth                                  [2];  
   varchar actual_amount                               [13]; 
   varchar reversal_amount                             [13]; 
   varchar voice_auth_text                             [241]; 
   varchar operator_id                                 [21];  
   varchar workstation                                 [21];  
   varchar orig_auth_number                            [7];   
   varchar ticket_nbr									[16];
   varchar system_date                                 [9];
   varchar def_gross_amt                               [13];
   varchar monthly_amort_amt                           [13];
}db_tlf01_stip;

#ifdef VISA7
struct
{
	varchar merchant_id[16];
	varchar card_nbr[20];
	varchar category_cd[5];
	varchar c1_block[2];
	varchar c2_block[2];
	varchar c3_block[2];
	varchar c4_block[2];
	varchar c1_count[3];
	varchar c1_block_start_date[9];
	varchar c1_block_end_date[9];
	varchar c2_count[3];
	varchar c2_block_start_date[9];
	varchar c2_block_end_date[9];
	varchar c3_count[3];
	varchar c3_block_start_date[9];
	varchar c3_block_end_date[9];
	varchar c4_count[3];
	varchar c4_block_start_date[9];
	varchar c4_block_end_date[9];
	varchar block_reset_date[9];
	varchar last_declined_rc[3];
	varchar first_reattempt_date[9];
	varchar reattempts_date[200];

}db_merchant_integrity_param;

struct
{
	char merchant_id[16];
	char card_nbr[20];
	char category_cd[5];
	char c1_block[2];
	char c2_block[2];
	char c3_block[2];
	char c4_block[2];
	char c1_count[3];
	char c1_block_start_date[9];
	char c1_block_end_date[9];
	char c2_count[3];
	char c2_block_start_date[9];
	char c2_block_end_date[9];
	char c3_count[3];
	char c3_block_start_date[9];
	char c3_block_end_date[9];
	char c4_count[3];
	char c4_block_start_date[9];
	char c4_block_end_date[9];
	char block_reset_date[9];
	char last_declined_rc[3];
	char first_reattempt_date[9];
	char reattempts_date[200];
}pte_merchant_integrity_param;
#endif
EXEC SQL END DECLARE SECTION;



/*****************************************************************************

NAME:			Convert_Amt_To_Auth_Tx_String_Format

DESCRIPTION:	Converts from a double value to a string value

				

INPUTS:         nAmount:   the value to be converted in double

OUTPUTS:        strAmount: the pointer to the string that contains the converted amount

RETURNS:        false  if error

                true   if no error

AUTHOR:         Sanjoy Dasgupta

MODIFIED BY:	

*****************************************************************************/
int Convert_Amt_To_Auth_Tx_String_Format 
                              (double nAmount, char* strAmount)
{
	char strTemp[50] = {0} ;
	int  nStringLength = 0 ;
	int  nIndex = 0 ;

	gcvt (nAmount*100, 15, strTemp) ; /* choice of 15 is arbitrary*/

	nStringLength = strlen (strTemp) ;

	/* Discard all characters after the decimal point, if present */
	for (nIndex = 0; nIndex < nStringLength ; nIndex++)
	{
		if ('.' == strTemp[nIndex])
		{
			strTemp[nIndex] = 0 ;
			break ;
		}
	}

	strcpy (strAmount, strTemp) ;
	return 1 ;

} /* Convert_Amt_To_Auth_Tx_String_Format */

/*************************************************************************************/
/*************************************************************************************/
void LeftFill_String_With_Character (unsigned int destination_array_size,
                                     char* strAmount,
                                     unsigned char fill_character) 
{
   unsigned char strTemp[50] = {0} ;
   int len = 0 ;
   memset (strTemp, fill_character, sizeof strTemp) ;
   
   len = strlen (strAmount) ;
   strTemp [destination_array_size - len] = 0 ;
   strcat (strTemp, strAmount) ;
   strcpy (strAmount, strTemp) ;
}

/*************************************************************************************/
/*************************************************************************************/
#ifdef VISA7
void merchant_integrity_param_to_db( pMERCHANT_INTEGRITY_PARAM ptr_merchant_integrity_param )
{
	memset( &pte_merchant_integrity_param, 0x00, sizeof(pte_merchant_integrity_param) );
    memcpy( &pte_merchant_integrity_param, ptr_merchant_integrity_param, sizeof(pte_merchant_integrity_param) );
    return;
}
#endif
/*************************************************************************************/
/*************************************************************************************/
#ifdef VISA7
void db_to_merchant_integrity_param( pMERCHANT_INTEGRITY_PARAM ptr_merchant_integrity_param ) 
{
    memset( ptr_merchant_integrity_param, 0x00, sizeof(ptr_merchant_integrity_param) );
    memcpy( ptr_merchant_integrity_param->merchant_id,
    db_merchant_integrity_param.merchant_id.arr,db_merchant_integrity_param.merchant_id.len);
   
    memcpy( ptr_merchant_integrity_param->card_nbr,
    db_merchant_integrity_param.card_nbr.arr,db_merchant_integrity_param.card_nbr.len);
   
    memcpy( ptr_merchant_integrity_param->category_cd,
    db_merchant_integrity_param.category_cd.arr,db_merchant_integrity_param.category_cd.len);
   
    memcpy( ptr_merchant_integrity_param->c1_block,
    db_merchant_integrity_param.c1_block.arr,db_merchant_integrity_param.c1_block.len);
   
    memcpy( ptr_merchant_integrity_param->c2_block,
    db_merchant_integrity_param.c2_block.arr,db_merchant_integrity_param.c2_block.len);
   
    memcpy( ptr_merchant_integrity_param->c3_block,
    db_merchant_integrity_param.c3_block.arr,db_merchant_integrity_param.c3_block.len);
   
    memcpy( ptr_merchant_integrity_param->c4_block,
    db_merchant_integrity_param.c4_block.arr,db_merchant_integrity_param.c4_block.len);
   
    memcpy( ptr_merchant_integrity_param->c1_count,
    db_merchant_integrity_param.c1_count.arr,db_merchant_integrity_param.c1_count.len);
   
    memcpy( ptr_merchant_integrity_param->c1_block_start_date,
    db_merchant_integrity_param.c1_block_start_date.arr,db_merchant_integrity_param.c1_block_start_date.len);
   
    memcpy( ptr_merchant_integrity_param->c1_block_end_date,
    db_merchant_integrity_param.c1_block_end_date.arr,db_merchant_integrity_param.c1_block_end_date.len);
   
    memcpy( ptr_merchant_integrity_param->c2_count,
    db_merchant_integrity_param.c2_count.arr,db_merchant_integrity_param.c2_count.len);
   
    memcpy( ptr_merchant_integrity_param->c2_block_start_date,
    db_merchant_integrity_param.c2_block_start_date.arr,db_merchant_integrity_param.c2_block_start_date.len);
   
    memcpy( ptr_merchant_integrity_param->c2_block_end_date,
    db_merchant_integrity_param.c2_block_end_date.arr,db_merchant_integrity_param.c2_block_end_date.len);

    memcpy( ptr_merchant_integrity_param->c3_count,
    db_merchant_integrity_param.c3_count.arr,db_merchant_integrity_param.c3_count.len);
   
    memcpy( ptr_merchant_integrity_param->c3_block_start_date,
    db_merchant_integrity_param.c3_block_start_date.arr,db_merchant_integrity_param.c3_block_start_date.len);
   
    memcpy( ptr_merchant_integrity_param->c3_block_end_date,
    db_merchant_integrity_param.c3_block_end_date.arr,db_merchant_integrity_param.c3_block_end_date.len);
   
    memcpy( ptr_merchant_integrity_param->c4_count,
    db_merchant_integrity_param.c4_count.arr,db_merchant_integrity_param.c4_count.len);
   
    memcpy( ptr_merchant_integrity_param->c4_block_start_date,
    db_merchant_integrity_param.c4_block_start_date.arr,db_merchant_integrity_param.c4_block_start_date.len);
   
    memcpy( ptr_merchant_integrity_param->c4_block_end_date,
    db_merchant_integrity_param.c4_block_end_date.arr,db_merchant_integrity_param.c4_block_end_date.len);
   
    memcpy( ptr_merchant_integrity_param->block_reset_date,
    db_merchant_integrity_param.block_reset_date.arr,db_merchant_integrity_param.block_reset_date.len);
  
    memcpy( ptr_merchant_integrity_param->last_declined_rc,
    db_merchant_integrity_param.last_declined_rc.arr,db_merchant_integrity_param.last_declined_rc.len); 
   
    memcpy( ptr_merchant_integrity_param->reattempts_date,
    db_merchant_integrity_param.reattempts_date.arr,db_merchant_integrity_param.reattempts_date.len);  
    
     memcpy( ptr_merchant_integrity_param->first_reattempt_date,
    db_merchant_integrity_param.first_reattempt_date.arr,db_merchant_integrity_param.first_reattempt_date.len);
    
}
#endif

/*************************************************************************************/
/*************************************************************************************/
void tlf01_to_db( pTLF01 tlf01_ptr )
{
   memcpy( &pte_tlf01, tlf01_ptr, sizeof(pte_tlf01));
   memset( &pte_tlf01.track1,    0x00, sizeof(pte_tlf01.track1)   );
   memset( &pte_tlf01.track2,    0x00, sizeof(pte_tlf01.track2)   );
   memset( &pte_tlf01.cvc_data,  0x00, sizeof(pte_tlf01.cvc_data) );
   memset( &pte_tlf01.pin_block, 0x00, sizeof(pte_tlf01.pin_block));

   /* Unix implements unsigned chars greater than 127 by wrapping around zero.
    * That causes the tx_key in the database to not be accurate.  So for tx_keys
    * above 127, subtract 100.  This puts the request tx_key, not the response
    * tx_key, into the database.
    */
   if ( tlf01_ptr->tx_key > 127 )
      pte_tlf01.tx_key -= 100;
}


/*************************************************************************************/
/* ThoughtFocus Girija Y */
/*************************************************************************************/
void tlf01_stip_to_db( pTLF01 tlf01_ptr )
{
   memcpy( &pte_tlf01_stip, tlf01_ptr, sizeof(pte_tlf01_stip));
   memset( &pte_tlf01_stip.track1,    0x00, sizeof(pte_tlf01_stip.track1)   );
   memset( &pte_tlf01_stip.track2,    0x00, sizeof(pte_tlf01_stip.track2)   );
   memset( &pte_tlf01_stip.cvc_data,  0x00, sizeof(pte_tlf01_stip.cvc_data) );
   memset( &pte_tlf01_stip.pin_block, 0x00, sizeof(pte_tlf01_stip.pin_block));

   /* Unix implements unsigned chars greater than 127 by wrapping around zero.
    * That causes the tx_key in the database to not be accurate.  So for tx_keys
    * above 127, subtract 100.  This puts the request tx_key, not the response
    * tx_key, into the database.
    */
   if ( tlf01_ptr->tx_key > 127 )
      pte_tlf01_stip.tx_key -= 100;
}


/*************************************************************************************/
/*************************************************************************************/
void fguard_to_db( pFGUARD fguard_ptr )
{
   memcpy( &pte_fguard, fguard_ptr, sizeof(pte_fguard) );
   return;
}


/*************************************************************************************/
/*************************************************************************************/
void fgraw_to_db( pFG_RAW fgraw_ptr )
{
   memcpy( &pte_fgraw, fgraw_ptr, sizeof(pte_fgraw) );
   return;
}

/*************************************************************************************/
/*************************************************************************************/
void db_to_fguard( pFGUARD fguard_ptr )
{
   memset( fguard_ptr, 0x00, sizeof(FGUARD) );
   memcpy( fguard_ptr->transaction_id,        db_fguard.transaction_id.arr,        db_fguard.transaction_id.len        );
   memcpy( fguard_ptr->timestamp,             db_fguard.timestamp.arr,             db_fguard.timestamp.len             );
   memcpy( fguard_ptr->message_type,          db_fguard.message_type.arr,          db_fguard.message_type.len          );
   memcpy( fguard_ptr->card_num,              db_fguard.card_num.arr,              db_fguard.card_num.len              );
   memcpy( fguard_ptr->processing_code,       db_fguard.processing_code.arr,       db_fguard.processing_code.len       );
   memcpy( fguard_ptr->amount_peso,           db_fguard.amount_peso.arr,           db_fguard.amount_peso.len           );
   memcpy( fguard_ptr->amount_usd,            db_fguard.amount_usd.arr,            db_fguard.amount_usd.len            );
   memcpy( fguard_ptr->gmt,                   db_fguard.gmt.arr,                   db_fguard.gmt.len                   );
   memcpy( fguard_ptr->sys_trace_audit_num,   db_fguard.sys_trace_audit_num.arr,   db_fguard.sys_trace_audit_num.len   );
   memcpy( fguard_ptr->mcc,                   db_fguard.mcc.arr,                   db_fguard.mcc.len                   );
   memcpy( fguard_ptr->country_code,          db_fguard.country_code.arr,          db_fguard.country_code.len          );
   memcpy( fguard_ptr->pos_entry_mode,        db_fguard.pos_entry_mode.arr,        db_fguard.pos_entry_mode.len        );
   memcpy( fguard_ptr->pos_condition_code,    db_fguard.pos_condition_code.arr,    db_fguard.pos_condition_code.len    );
   memcpy( fguard_ptr->acquiring_id,          db_fguard.acquiring_id.arr,          db_fguard.acquiring_id.len          );
   memcpy( fguard_ptr->auth_number,           db_fguard.auth_number.arr,           db_fguard.auth_number.len           );
   memcpy( fguard_ptr->response_code,         db_fguard.response_code.arr,         db_fguard.response_code.len         );
   memcpy( fguard_ptr->terminal_id,           db_fguard.terminal_id.arr,           db_fguard.terminal_id.len           );
   memcpy( fguard_ptr->merchant_id,           db_fguard.merchant_id.arr,           db_fguard.merchant_id.len           );
   memcpy( fguard_ptr->card_acceptor_name,    db_fguard.card_acceptor_name.arr,    db_fguard.card_acceptor_name.len    );
   memcpy( fguard_ptr->card_acceptor_city,    db_fguard.card_acceptor_city.arr,    db_fguard.card_acceptor_city.len    );
   memcpy( fguard_ptr->card_acceptor_country, db_fguard.card_acceptor_country.arr, db_fguard.card_acceptor_country.len );
   memcpy( fguard_ptr->currency_code_txn,     db_fguard.currency_code_txn.arr,     db_fguard.currency_code_txn.len     );
   memcpy( fguard_ptr->currency_code_billing, db_fguard.currency_code_billing.arr, db_fguard.currency_code_billing.len );
   memcpy( fguard_ptr->pos_info,              db_fguard.pos_info.arr,              db_fguard.pos_info.len              );
   memcpy( fguard_ptr->system_date,           db_fguard.system_date.arr,           db_fguard.system_date.len           );
   memcpy( fguard_ptr->result_code,           db_fguard.result_code.arr,           db_fguard.result_code.len           );
   memcpy( fguard_ptr->application,           db_fguard.application.arr,           db_fguard.application.len           );
   memcpy( fguard_ptr->rule_domain,           db_fguard.rule_domain.arr,           db_fguard.rule_domain.len           );
   memcpy( fguard_ptr->caller_id,             db_fguard.caller_id.arr,             db_fguard.caller_id.len             );
   memcpy( fguard_ptr->caller_msg_id,         db_fguard.caller_msg_id.arr,         db_fguard.caller_msg_id.len         );
   memcpy( fguard_ptr->result_text,           db_fguard.result_text.arr,           db_fguard.result_text.len           );
   memcpy( fguard_ptr->product,               db_fguard.product.arr,               db_fguard.product.len               );
   fguard_ptr->status = db_fguard.status.arr[0];
   return;
}


void bon01_to_db( pBON01 bon01_ptr )
{
  memcpy (&pte_bon01, bon01_ptr, sizeof(pte_bon01));
}

void ptsn01_to_db( pPTSN01 ptsn01_ptr )
{
   memcpy( &pte_ptsn01, ptsn01_ptr, sizeof(pte_ptsn01) );
   return;
}


/******************************************************************************/
/******************************************************************************/
void db_to_bon01 ( pBON01 bon01_ptr )
{
   memset(bon01_ptr, 0, sizeof(BON01));
   memcpy(bon01_ptr->minimum_amount, db_bon01.minimum_amount.arr, db_bon01.minimum_amount.len);
   memcpy(bon01_ptr->program_start_date, db_bon01.program_start_date.arr, db_bon01.program_start_date.len);
   memcpy(bon01_ptr->program_end_date, db_bon01.program_end_date.arr, db_bon01.program_end_date.len);
   memcpy(bon01_ptr->transaction_threshold, db_bon01.transaction_threshold.arr, db_bon01.transaction_threshold.len);
   memcpy(bon01_ptr->transaction_counter, db_bon01.transaction_counter.arr, db_bon01.transaction_counter.len);
   memcpy(bon01_ptr->maximum_reward, db_bon01.maximum_reward.arr, db_bon01.maximum_reward.len);
   memcpy(bon01_ptr->response_message , db_bon01.response_message.arr, db_bon01.response_message.len);
 }



/******************************************************************************/
/******************************************************************************/

void bon03_to_db( pBON03 bon03_ptr )
{
   memcpy( &pte_bon03, bon03_ptr, sizeof(pte_bon03) );
   return;
}

/******************************************************************************/
/******************************************************************************/

void bon02_to_db( pBON02 bon02_ptr )
{
   memcpy( &pte_bon02, bon02_ptr, sizeof(pte_bon02) );
   return;
}


/******************************************************************************/
/******************************************************************************/
void db_to_bon02( pBON02 bon02_ptr )
{
   memset(bon02_ptr, 0x00, sizeof(BON02) );

   memcpy(bon02_ptr->cash_id, db_bon02.cash_id.arr, db_bon02.cash_id.len);
   memcpy(bon02_ptr->tag_id, db_bon02.tag_id.arr, db_bon02.tag_id.len);
   memcpy(bon02_ptr->cash_desc, db_bon02.cash_desc.arr, db_bon02.cash_desc.len);
   memcpy(bon02_ptr->program_start_date, db_bon02.program_start_date.arr, db_bon02.program_start_date.len);
   memcpy(bon02_ptr->program_end_date, db_bon02.program_end_date.arr, db_bon02.program_end_date.len);
   memcpy(bon02_ptr->tran_threshold, db_bon02.tran_threshold.arr, db_bon02.tran_threshold.len);
   memcpy(bon02_ptr->tran_ctr, db_bon02.tran_ctr.arr, db_bon02.tran_ctr.len);
   memcpy(bon02_ptr->time_period, db_bon02.time_period.arr, db_bon02.time_period.len);
   memcpy(bon02_ptr->max_period_winners, db_bon02.max_period_winners.arr, db_bon02.max_period_winners.len);
   memcpy(bon02_ptr->period_win_ctr, db_bon02.period_win_ctr.arr, db_bon02.period_win_ctr.len);
   memcpy(bon02_ptr->max_program_winners, db_bon02.max_program_winners.arr, db_bon02.max_program_winners.len);
   memcpy(bon02_ptr->program_win_ctr, db_bon02.program_win_ctr.arr, db_bon02.program_win_ctr.len);
   memcpy(bon02_ptr->multi_winner_text, db_bon02.multi_winner_text.arr, db_bon02.multi_winner_text.len);
   memcpy(bon02_ptr->multi_winners_allowed, db_bon02.multi_winners_allowed.arr, db_bon02.multi_winners_allowed.len);

   memcpy(bon02_ptr->amount_range[0].low_amount,    db_bon02.amount1_low.arr,     db_bon02.amount1_low.len     );
   memcpy(bon02_ptr->amount_range[0].high_amount,   db_bon02.amount1_high.arr,    db_bon02.amount1_high.len    );
   memcpy(bon02_ptr->amount_range[0].resp_text,     db_bon02.response1.arr,       db_bon02.response1.len       );
   memcpy(bon02_ptr->amount_range[0].win_type,      db_bon02.win_type_radio1.arr, db_bon02.win_type_radio1.len );
   memcpy(bon02_ptr->amount_range[0].reward_amount, db_bon02.reward_amount1.arr,  db_bon02.reward_amount1.len  );

   memcpy(bon02_ptr->amount_range[1].low_amount,    db_bon02.amount2_low.arr,     db_bon02.amount2_low.len     );
   memcpy(bon02_ptr->amount_range[1].high_amount,   db_bon02.amount2_high.arr,    db_bon02.amount2_high.len    );
   memcpy(bon02_ptr->amount_range[1].resp_text,     db_bon02.response2.arr,       db_bon02.response2.len       );
   memcpy(bon02_ptr->amount_range[1].win_type,      db_bon02.win_type_radio2.arr, db_bon02.win_type_radio2.len );
   memcpy(bon02_ptr->amount_range[1].reward_amount, db_bon02.reward_amount2.arr,  db_bon02.reward_amount2.len  );

   memcpy(bon02_ptr->amount_range[2].low_amount,    db_bon02.amount3_low.arr,     db_bon02.amount3_low.len     );
   memcpy(bon02_ptr->amount_range[2].high_amount,   db_bon02.amount3_high.arr,    db_bon02.amount3_high.len    );
   memcpy(bon02_ptr->amount_range[2].resp_text,     db_bon02.response3.arr,       db_bon02.response3.len       );
   memcpy(bon02_ptr->amount_range[2].win_type,      db_bon02.win_type_radio3.arr, db_bon02.win_type_radio3.len );
   memcpy(bon02_ptr->amount_range[2].reward_amount, db_bon02.reward_amount3.arr,  db_bon02.reward_amount3.len  );

   memcpy(bon02_ptr->amount_range[3].low_amount,    db_bon02.amount4_low.arr,     db_bon02.amount4_low.len     );
   memcpy(bon02_ptr->amount_range[3].high_amount,   db_bon02.amount4_high.arr,    db_bon02.amount4_high.len    );
   memcpy(bon02_ptr->amount_range[3].resp_text,     db_bon02.response4.arr,       db_bon02.response4.len       );
   memcpy(bon02_ptr->amount_range[3].win_type,      db_bon02.win_type_radio4.arr, db_bon02.win_type_radio4.len );
   memcpy(bon02_ptr->amount_range[3].reward_amount, db_bon02.reward_amount4.arr,  db_bon02.reward_amount4.len  );

   memcpy(bon02_ptr->amount_range[4].low_amount,    db_bon02.amount5_low.arr,     db_bon02.amount5_low.len     );
   memcpy(bon02_ptr->amount_range[4].high_amount,   db_bon02.amount5_high.arr,    db_bon02.amount5_high.len    );
   memcpy(bon02_ptr->amount_range[4].resp_text,     db_bon02.response5.arr,       db_bon02.response5.len       );
   memcpy(bon02_ptr->amount_range[4].win_type,      db_bon02.win_type_radio5.arr, db_bon02.win_type_radio5.len );
   memcpy(bon02_ptr->amount_range[4].reward_amount, db_bon02.reward_amount5.arr,  db_bon02.reward_amount5.len  );

   return;
 }
/******************************************************************************
 *
 *  NAME:         RPS01_to_db
 *
 *  DESCRIPTION:  This function copies an RPS01 record into pte_ncf30 for
 *                updates, inserts, and deletes.
 *
 *  INPUTS:      rps01_ptr - RPS01 structure
 *
 *  OUTPUTS:      pte_rps01 - Global used to pass info to the database
 *
 *  RTRN VALUE:   None
 *
 *  AUTHOR:       Phani
 *
 *  MODIFICATIONS:
 ******************************************************************************/
void rps01_to_db( pRPS01 rps01_ptr )
{

  memcpy (&pte_rps01, rps01_ptr, sizeof(pte_rps01));
 }


/******************************************************************************
 *
 *  NAME:         ncf21_to_db
 *
 *  DESCRIPTION:  This function copies an NCF21 record into pte_ncf21 for
 *                updates, inserts, and deletes.
 *
 *  INPUTS:       ncf21_ptr - NCF21 structure
 *
 *  OUTPUTS:      pte_ncf21 - Global used to pass info to the database
 *
 *  RTRN VALUE:   None
 *
 *  AUTHOR:       Unknown
 *
 *  MODIFICATIONS: total_amt fld is checked for the sign, it if got one change it no sign.
 ******************************************************************************/
void ncf21_to_db( pNCF21 ncf21_ptr )
{
  char tot_amt[18];
  int i;
  memcpy (&pte_ncf21, ncf21_ptr, sizeof(pte_ncf21));
  if(( pte_ncf21.total_amt[0] == '-') || ( pte_ncf21.total_amt[0] == '+'))
  {
      strcpy(tot_amt,pte_ncf21.total_amt);
      /*strncpy(pte_ncf21.total_amt,(tot_amt+1),16); CRUDE FIX*/
      pte_ncf21.total_amt[0]='0';
      for(i=1;i<16;i++)
        pte_ncf21.total_amt[i]=tot_amt[i];

  }
}


/******************************************************************************
 *
 *  NAME:         ncf30_to_db
 *
 *  DESCRIPTION:  This function copies an NCF30 record into pte_ncf30 for
 *                updates, inserts, and deletes.
 *
 *  INPUTS:       ncf30_ptr - NCF30 structure
 *
 *  OUTPUTS:      pte_ncf30 - Global used to pass info to the database
 *
 *  RTRN VALUE:   None
 *
 *  AUTHOR:       Unknown
 *
 *  MODIFICATIONS:
 ******************************************************************************/
void ncf30_to_db( pNCF30 ncf30_ptr )
{
  memcpy (&pte_ncf30, ncf30_ptr, sizeof(pte_ncf30));
}

/*************************************************************************************/
/*************************************************************************************/
void bch01_to_db( pBCH01 bch01_ptr )
{
  memcpy (&pte_bch01, bch01_ptr, sizeof(pte_bch01));
}

/*************************************************************************************/

/*************************************************************************************/
void bch01_mp_to_db( pBCH01_MP bch01_mp_ptr )
{
  memcpy (&pte_bch01_mp, bch01_mp_ptr, sizeof(pte_bch01_mp));
}

/*************************************************************************************/

void mcf03p_to_db( pMCF03P mcf03p_ptr )
{
  memcpy (&pte_mcf03p, mcf03p_ptr, sizeof(pte_mcf03p));
}

/*************************************************************************************/


/*************************************************************************************/
void bch10_to_db( pBCH10 bch10_ptr )
{
   memcpy (&pte_bch10, bch10_ptr, sizeof(pte_bch10));

   /* Unix implements unsigned chars greater than 127 by wrapping around zero.
    * That causes the tx_key in the database to not be accurate.  So for tx_keys
    * above 127, subtract 100.  This puts the request tx_key, not the response
    * tx_key, into the database.
    */
   if ( bch10_ptr->tx_key > 127 )
      pte_bch10.tx_key -= 100;
}

/*************************************************************************************/
/*************************************************************************************/

void bch20_to_db( pBCH20 bch20_ptr )
{
   memcpy (&pte_bch20, bch20_ptr, sizeof(pte_bch20));

   /* Unix implements unsigned chars greater than 127 by wrapping around zero.
    * That causes the tx_key in the database to not be accurate.  So for tx_keys
    * above 127, subtract 100.  This puts the request tx_key, not the response
    * tx_key, into the database.
    */
   if ( bch20_ptr->tx_key > 127 )
      pte_bch20.tx_key -= 100;
}

/*************************************************************************************/
/*************************************************************************************/
void ccf02p_to_db( pCCF02P ccf02p_ptr )
{
  memcpy (&pte_ccf02p, ccf02p_ptr, sizeof(pte_ccf02p));
}

/*************************************************************************************/
/*************************************************************************************/
void ccf03p_to_db( pCCF03 ccf03p_ptr )
{
  memcpy (&pte_ccf03p, ccf03p_ptr, sizeof(pte_ccf03p));
}

/*************************************************************************************/
/*************************************************************************************/
void offus_velocity_to_db( pOffus_velocity offus_velocity_ptr )
{
  memcpy (&pte_offus_velocity, offus_velocity_ptr, sizeof(pte_offus_velocity));
}


/*************************************************************************************/
/*************************************************************************************/
void acf01_to_db( pACF01 acf01_ptr )
{
  memcpy (&pte_acf01, acf01_ptr, sizeof(pte_acf01));
}

/******************************************************************************
 *
 *  NAME:         db_to_ncf21
 *
 *  DESCRIPTION:  This function copies an NCF21 record from db_ncf21 into
 *                ncf21_ptr.
 *
 *  INPUTS:       None
 *
 *  OUTPUTS:      ncf21_ptr - NCF21 structure
 *
 *  RTRN VALUE:   None
 *
 *  AUTHOR:       Unknown
 *
 *  MODIFICATIONS:
 ******************************************************************************/
void db_to_ncf21 ( pNCF21 ncf21_ptr )
{
   memset( ncf21_ptr, 0, sizeof(NCF21) );
   memcpy( ncf21_ptr->primary_key.network_id,   db_ncf21.network_id.arr,   db_ncf21.network_id.len);
   memcpy( ncf21_ptr->primary_key.network_type, db_ncf21.network_type.arr, db_ncf21.network_type.len);
   memcpy( ncf21_ptr->primary_key.batch_number, db_ncf21.batch_number.arr, db_ncf21.batch_number.len);
   
   memcpy(ncf21_ptr->open_date, db_ncf21.open_date.arr, db_ncf21.open_date.len);
   memcpy(ncf21_ptr->open_time, db_ncf21.open_time.arr, db_ncf21.open_time.len);
   memcpy(ncf21_ptr->release_date, db_ncf21.release_date.arr, db_ncf21.release_date.len);
   memcpy(ncf21_ptr->release_time, db_ncf21.release_time.arr, db_ncf21.release_time.len);
   memcpy(ncf21_ptr->credit_cnt, db_ncf21.credit_cnt.arr, db_ncf21.credit_cnt.len);
   memcpy(ncf21_ptr->credit_amt, db_ncf21.credit_amt.arr, db_ncf21.credit_amt.len);
   memcpy(ncf21_ptr->credit_rev_cnt, db_ncf21.credit_rev_cnt.arr, db_ncf21.credit_rev_cnt.len);
   memcpy(ncf21_ptr->credit_rev_amt, db_ncf21.credit_rev_amt.arr, db_ncf21.credit_rev_amt.len);
   memcpy(ncf21_ptr->debit_cnt, db_ncf21.debit_cnt.arr, db_ncf21.debit_cnt.len);
   memcpy(ncf21_ptr->debit_amt, db_ncf21.debit_amt.arr, db_ncf21.debit_amt.len);
   memcpy(ncf21_ptr->debit_rev_cnt, db_ncf21.debit_rev_cnt.arr, db_ncf21.debit_rev_cnt.len);
   memcpy(ncf21_ptr->debit_rev_amt, db_ncf21.debit_rev_amt.arr, db_ncf21.debit_rev_amt.len);
   memcpy(ncf21_ptr->total_amt, db_ncf21.total_amt.arr, db_ncf21.total_amt.len);
   memcpy(ncf21_ptr->total_amt_type, db_ncf21.total_amt_type.arr, db_ncf21.total_amt_type.len);

}

/******************************************************************************
 *
 *  NAME:         db_to_ncf30
 *
 *  DESCRIPTION:  This function copies an NCF30 record from db_ncf30 into
 *                ncf30_ptr.
 *
 *  INPUTS:       None
 *
 *  OUTPUTS:      ncf30_ptr - NCF30 structure
 *
 *  RTRN VALUE:   None
 *
 *  AUTHOR:       Unknown
 *
 *  MODIFICATIONS:
 ******************************************************************************/
void db_to_ncf30 ( pNCF30 ncf30_ptr )
{
   memset( ncf30_ptr, 0, sizeof(NCF30) );
   memcpy( ncf30_ptr->primary_key.network_id,   db_ncf30.network_id.arr,   db_ncf30.network_id.len);
   memcpy( ncf30_ptr->primary_key.network_type, db_ncf30.network_type.arr, db_ncf30.network_type.len);
   memcpy( ncf30_ptr->primary_key.batch_number, db_ncf30.batch_number.arr, db_ncf30.batch_number.len);
   memcpy( ncf30_ptr->primary_key.retrieval_ref_num, db_ncf30.retrieval_ref_num.arr, db_ncf30.retrieval_ref_num.len);
   
   memcpy(ncf30_ptr->open_date, db_ncf30.open_date.arr, db_ncf30.open_date.len);
   memcpy(ncf30_ptr->open_time, db_ncf30.open_time.arr, db_ncf30.open_time.len);
   memcpy(ncf30_ptr->merchant_id, db_ncf30.merchant_id.arr, db_ncf30.merchant_id.len);
   memcpy(ncf30_ptr->transaction_id, db_ncf30.transaction_id.arr, db_ncf30.transaction_id.len);
   memcpy(ncf30_ptr->device_id, db_ncf30.device_id.arr, db_ncf30.device_id.len);
   memcpy(ncf30_ptr->card_nbr, db_ncf30.card_nbr.arr, db_ncf30.card_nbr.len);
   memcpy(ncf30_ptr->message_type, db_ncf30.message_type.arr, db_ncf30.message_type.len);
   memcpy(ncf30_ptr->processing_code, db_ncf30.processing_code.arr, db_ncf30.processing_code.len);

   memcpy(ncf30_ptr->tran_amount,  db_ncf30.tran_amount.arr,  db_ncf30.tran_amount.len);
   memcpy(ncf30_ptr->auth_number,  db_ncf30.auth_number.arr,  db_ncf30.auth_number.len);
   memcpy(ncf30_ptr->response_code,  db_ncf30.response_code.arr,  db_ncf30.response_code.len);
   memcpy(ncf30_ptr->tran_date,  db_ncf30.tran_date.arr,  db_ncf30.tran_date.len);
   memcpy(ncf30_ptr->tran_time,  db_ncf30.tran_time.arr,  db_ncf30.tran_time.len);
   memcpy(ncf30_ptr->sys_trace_audit_nbr,  db_ncf30.sys_trace_audit_nbr.arr,  db_ncf30.sys_trace_audit_nbr.len);
   ncf30_ptr->tx_key = db_ncf30.tx_key.arr[0];
   memcpy(ncf30_ptr->invoice_nbr,  db_ncf30.invoice_nbr.arr,  db_ncf30.invoice_nbr.len);
   memcpy(ncf30_ptr->network_data, db_ncf30.network_data.arr, db_ncf30.network_data.len);
   memcpy(ncf30_ptr->currency_code, db_ncf30.currency_code.arr, db_ncf30.currency_code.len);
   memcpy(ncf30_ptr->acquiring_inst_id_code, db_ncf30.acquiring_inst_id_code.arr, db_ncf30.acquiring_inst_id_code.len);
   memcpy(ncf30_ptr->settlement_date, db_ncf30.settlement_date.arr, db_ncf30.settlement_date.len);
   memcpy(ncf30_ptr->transmission_timestamp, db_ncf30.transmission_timestamp.arr, db_ncf30.transmission_timestamp.len);
   memcpy(ncf30_ptr->tran_fee_amount, db_ncf30.tran_fee_amount.arr, db_ncf30.tran_fee_amount.len);
}
/**********************************************************************************************************************************/
#if ( defined VISA7 ||  defined MC12_OCT2023)
BYTE db_select_merchant_integrity_param (  pCHAR          Primary_key, 
                        				  pMERCHANT_INTEGRITY_PARAM   merchant_integrity_param_ptr, 
                        				   pCHAR          ErrorMsg )
{
	memset( &db_merchant_integrity_param, 0, sizeof( db_merchant_integrity_param ) );
	memset( &pte_merchant_integrity_param, 0, sizeof( pte_merchant_integrity_param ) );
   	strncpy( pte_merchant_integrity_param.merchant_id, Primary_key, sizeof(pte_merchant_integrity_param.merchant_id) );
	strncpy( pte_merchant_integrity_param.card_nbr, Primary_key+sizeof(pte_merchant_integrity_param.merchant_id), sizeof(pte_merchant_integrity_param.card_nbr) );
	strncpy( pte_merchant_integrity_param.category_cd, Primary_key+sizeof(pte_merchant_integrity_param.merchant_id)+sizeof(pte_merchant_integrity_param.card_nbr), 
	sizeof(pte_merchant_integrity_param.category_cd) );

    if ( db_error_statics_flag == true )
    {
      start_time = ptetime_get_time();
    }

    EXEC SQL SELECT *
    INTO :db_merchant_integrity_param
    FROM merchant_integrity_param
    WHERE merchant_id = :pte_merchant_integrity_param.merchant_id   AND 
          card_nbr    = :pte_merchant_integrity_param.card_nbr 		AND 
          category_cd = :pte_merchant_integrity_param.category_cd;
      
    if ( db_error_statics_flag == true )
    {
        end_time = ptetime_get_time();
        duration = end_time - start_time;
        if(duration >= (double)db_error_statics_value)
	    {
        	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
        	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : merchant_integrity_param ,Fun_Name : db_select_merchant_integrity_param , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
        	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	    }
    }
    
    if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_select_merchant_integrity_param ,ST1 :%d,ST2 : %d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

    db_to_merchant_integrity_param (merchant_integrity_param_ptr);

    return PTEMSG_OK;
}
#endif

#ifdef MC13_OCT2023
BYTE db_select_merchant_integrity_param_mac (  pTLF01          			   tlf01_data, 
                        				       pMERCHANT_INTEGRITY_PARAM   merchant_integrity_param_ptr, 
                        				       pCHAR          			   ErrorMsg )
{	
	memset( &db_merchant_integrity_param, 0, sizeof( db_merchant_integrity_param ) );
	memset( &pte_merchant_integrity_param, 0, sizeof( pte_merchant_integrity_param ) );
   	strncpy( pte_merchant_integrity_param.merchant_id, tlf01_data->merchant_id, sizeof(pte_merchant_integrity_param.merchant_id) );
	strncpy( pte_merchant_integrity_param.card_nbr,    tlf01_data->card_num,    sizeof(pte_merchant_integrity_param.card_nbr)    );
	strncpy( pte_merchant_integrity_param.category_cd, MAC_CATEGORY_CODE,       sizeof(pte_merchant_integrity_param.category_cd) );
	strncpy( pte_merchant_integrity_param.reattempts_date, tlf01_data->total_amount, strlen(tlf01_data->total_amount) );
	
    if ( db_error_statics_flag == true )
    {
    	start_time = ptetime_get_time();
    }

    EXEC SQL SELECT *
    INTO :db_merchant_integrity_param
    FROM merchant_integrity_param
    WHERE merchant_id      = :pte_merchant_integrity_param.merchant_id     AND
          card_nbr         = :pte_merchant_integrity_param.card_nbr 	   AND
          category_cd      = :pte_merchant_integrity_param.category_cd     AND
		  reattempts_date  = :pte_merchant_integrity_param.reattempts_date;
      
    if ( db_error_statics_flag == true )
    {
        end_time = ptetime_get_time();
        duration = end_time - start_time;
        if(duration >= (double)db_error_statics_value)
	    {
        	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
        	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,"
        			"Data_Type : merchant_integrity_param ,"
        			"Fun_Name : db_select_merchant_integrity_param_mac , Duration = %f",
					DB_MsgSubtype1,DB_MsgSubtype2,duration);
        	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	    }
    }
    
    if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_select_merchant_integrity_param_mac ,ST1 :%d,ST2 : %d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

    db_to_merchant_integrity_param (merchant_integrity_param_ptr);

    return PTEMSG_OK;
}
#endif
/******************************************************************************
 *
 *  NAME:         db_select_ncf21
 *
 *  DESCRIPTION:  This function makes the call to the database to select a
 *                record from NCF21 based on a key value.  The record is
 *                selected into db_ncf21, then copied into ncf21_ptr for
 *                the calling function.
 *
 *  INPUTS:       key - Network Id, Network Type and Batch Number
 *
 *  OUTPUTS:      ncf21_ptr - NCF21 structure containing the selected record
 *                ErrorMsg  - Error message if database call failed.
 *
 *  RTRN VALUE:   A PTE code is returned:
 *                       PTEMSG_OK  if no errors else a code to identify
 *                       the reason for the failure.
 *
 *  AUTHOR:       Unknown
 *
 *  MODIFICATIONS:
 *      DI - 02/17/99 - Corrected bug getting batch number key.
 *      DI - 01/28/00 - Removed the 'FOR UPDATE' condition.
 ******************************************************************************/
BYTE db_select_ncf21 (  pCHAR         key, 
                        pNCF21        ncf21_ptr,
                        pCHAR         ErrorMsg )
{
   memset( &db_ncf21, 0, sizeof( db_ncf21 ) );

   strncpy( pte_ncf21.network_id, key, sizeof(pte_ncf30.network_id) );
   strncpy( pte_ncf21.network_type, key + sizeof(pte_ncf30.network_id),
            sizeof(pte_ncf30.network_type) );
   strncpy( pte_ncf21.batch_number, key + sizeof(pte_ncf30.network_id)
                                        + sizeof(pte_ncf30.network_type),
            sizeof(pte_ncf30.batch_number) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT network_id, network_type, batch_number,
               open_date, open_time, release_date, release_time,
               credit_cnt, credit_amt, credit_rev_cnt, credit_rev_amt,
               debit_cnt, debit_amt, debit_rev_cnt, debit_rev_amt,
               total_amt, total_amt_type
   INTO :db_ncf21
   FROM ncf21
   WHERE network_type = :pte_ncf21.network_type   AND 
         network_id   = :pte_ncf21.network_id     AND
         batch_number = :pte_ncf21.batch_number
		 FOR update;
      
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : NCF21 ,Fun_Name : db_select_ncf21 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_select_ncf21 ,ST1 :%d,ST2 : %d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_ncf21 (ncf21_ptr);

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
void db_to_tlf01 ( pTLF01 tlf01_ptr )
{
   memset(tlf01_ptr, 0, sizeof(TLF01));
   memcpy(tlf01_ptr->primary_key.transaction_id, db_tlf01.transaction_id.arr, db_tlf01.transaction_id.len);
   tlf01_ptr->entry_type = db_tlf01.entry_type.arr[0];
   memcpy(tlf01_ptr->tpdu_id, db_tlf01.tpdu_id.arr, db_tlf01.tpdu_id.len);
   memcpy(tlf01_ptr->issuer_id, db_tlf01.issuer_id.arr, db_tlf01.issuer_id.len);
   memcpy(tlf01_ptr->acquirer_id, db_tlf01.acquirer_id.arr, db_tlf01.acquirer_id.len);
   tlf01_ptr->tx_key = db_tlf01.tx_key.arr[0];
   memcpy(tlf01_ptr->terminal_id, db_tlf01.terminal_id.arr, db_tlf01.terminal_id.len);
   memcpy(tlf01_ptr->terminal_type, db_tlf01.terminal_type.arr, db_tlf01.terminal_type.len);
   memcpy(tlf01_ptr->response_text, db_tlf01.response_text.arr, db_tlf01.response_text.len);
   memcpy(tlf01_ptr->card_num_len, db_tlf01.card_num_len.arr, db_tlf01.card_num_len.len);
   memcpy(tlf01_ptr->card_num, db_tlf01.card_num.arr, db_tlf01.card_num.len);
   memcpy(tlf01_ptr->exp_date, db_tlf01.exp_date.arr, db_tlf01.exp_date.len);
   memcpy(tlf01_ptr->total_amount, db_tlf01.total_amount.arr, db_tlf01.total_amount.len);
   memcpy(tlf01_ptr->add_amounts, db_tlf01.add_amounts.arr, db_tlf01.add_amounts.len);
   memcpy(tlf01_ptr->invoice_number, db_tlf01.invoice_number.arr, db_tlf01.invoice_number.len);
   memcpy(tlf01_ptr->orig_amount, db_tlf01.orig_amount.arr, db_tlf01.orig_amount.len);
   memcpy(tlf01_ptr->auth_number, db_tlf01.auth_number.arr, db_tlf01.auth_number.len);
   memcpy(tlf01_ptr->processing_code, db_tlf01.processing_code.arr, db_tlf01.processing_code.len);
   memcpy(tlf01_ptr->sys_trace_audit_num, db_tlf01.sys_trace_audit_num.arr, db_tlf01.sys_trace_audit_num.len);
   memcpy(tlf01_ptr->orig_sys_trace_num, db_tlf01.orig_sys_trace_num.arr, db_tlf01.orig_sys_trace_num.len);
   memcpy(tlf01_ptr->pos_entry_mode, db_tlf01.pos_entry_mode.arr, db_tlf01.pos_entry_mode.len);
   memcpy(tlf01_ptr->nii, db_tlf01.nii.arr, db_tlf01.nii.len);
   memcpy(tlf01_ptr->pos_condition_code, db_tlf01.pos_condition_code.arr, db_tlf01.pos_condition_code.len);
   memcpy(tlf01_ptr->track1, db_tlf01.track1.arr, db_tlf01.track1.len);
   memcpy(tlf01_ptr->track2, db_tlf01.track2.arr, db_tlf01.track2.len);
   memcpy(tlf01_ptr->retrieval_ref_num, db_tlf01.retrieval_ref_num.arr, db_tlf01.retrieval_ref_num.len);
   memcpy(tlf01_ptr->orig_retrieval_ref_num, db_tlf01.orig_retrieval_ref_num.arr, db_tlf01.orig_retrieval_ref_num.len);
   memcpy(tlf01_ptr->merchant_id, db_tlf01.merchant_id.arr, db_tlf01.merchant_id.len);
   memcpy(tlf01_ptr->orig_message, db_tlf01.orig_message.arr, db_tlf01.orig_message.len);
   memcpy(tlf01_ptr->settlement_total, db_tlf01.settlement_total.arr, db_tlf01.settlement_total.len);
   memcpy(tlf01_ptr->message_type, db_tlf01.message_type.arr, db_tlf01.message_type.len);
   memcpy(tlf01_ptr->card_holder_name, db_tlf01.card_holder_name.arr, db_tlf01.card_holder_name.len);
   tlf01_ptr->general_status = db_tlf01.general_status.arr[0];
   memcpy(tlf01_ptr->originator_queue, db_tlf01.originator_queue.arr, db_tlf01.originator_queue.len);
   memcpy(tlf01_ptr->originator_info, db_tlf01.originator_info.arr, db_tlf01.originator_info.len);
   memcpy(tlf01_ptr->batch_number, db_tlf01.batch_number.arr, db_tlf01.batch_number.len);
   memcpy(tlf01_ptr->response_code, db_tlf01.response_code.arr, db_tlf01.response_code.len);
   memcpy(tlf01_ptr->date_yyyymmdd, db_tlf01.date_yyyymmdd.arr, db_tlf01.date_yyyymmdd.len);
   memcpy(tlf01_ptr->time_hhmmss, db_tlf01.time_hhmmss.arr, db_tlf01.time_hhmmss.len);
   memcpy(tlf01_ptr->num_sales, db_tlf01.num_sales.arr, db_tlf01.num_sales.len);
   memcpy(tlf01_ptr->sales_amount, db_tlf01.sales_amount.arr, db_tlf01.sales_amount.len);
   memcpy(tlf01_ptr->num_refunds, db_tlf01.num_refunds.arr, db_tlf01.num_refunds.len);
   memcpy(tlf01_ptr->refund_amount, db_tlf01.refund_amount.arr, db_tlf01.refund_amount.len);
   memcpy(tlf01_ptr->num_dbsales, db_tlf01.num_dbsales.arr, db_tlf01.num_dbsales.len);
   memcpy(tlf01_ptr->dbsales_amount, db_tlf01.dbsales_amount.arr, db_tlf01.dbsales_amount.len);
   memcpy(tlf01_ptr->num_dbrefunds, db_tlf01.num_dbrefunds.arr, db_tlf01.num_dbrefunds.len);
   memcpy(tlf01_ptr->dbrefund_amount, db_tlf01.dbrefund_amount.arr, db_tlf01.dbrefund_amount.len);
   memcpy(tlf01_ptr->pin_block, db_tlf01.pin_block.arr, db_tlf01.pin_block.len);
   memcpy(tlf01_ptr->tax_amount, db_tlf01.tax_amount.arr, db_tlf01.tax_amount.len);
   memcpy(tlf01_ptr->tip_amount, db_tlf01.tip_amount.arr, db_tlf01.tip_amount.len);
   memcpy(tlf01_ptr->tran_start_time, db_tlf01.tran_start_time.arr, db_tlf01.tran_start_time.len);
   memcpy(tlf01_ptr->host_start_time, db_tlf01.host_start_time.arr, db_tlf01.host_start_time.len);
   memcpy(tlf01_ptr->host_finish_time, db_tlf01.host_finish_time.arr, db_tlf01.host_finish_time.len);
   memcpy(tlf01_ptr->tran_finish_time, db_tlf01.tran_finish_time.arr, db_tlf01.tran_finish_time.len);
   memcpy(tlf01_ptr->settle_file_prefix, db_tlf01.settle_file_prefix.arr, db_tlf01.settle_file_prefix.len);
   memcpy(tlf01_ptr->resp_source_len, db_tlf01.resp_source_len.arr, db_tlf01.resp_source_len.len);
   tlf01_ptr->visa_char_indicator = db_tlf01.visa_char_indicator.arr[0];
   memcpy(tlf01_ptr->visa_tran_id, db_tlf01.visa_tran_id.arr, db_tlf01.visa_tran_id.len);
   memcpy(tlf01_ptr->visa_validation_code, db_tlf01.visa_validation_code.arr, db_tlf01.visa_validation_code.len);
   memcpy(tlf01_ptr->mcard_banknet_len, db_tlf01.mcard_banknet_len.arr, db_tlf01.mcard_banknet_len.len);
   memcpy(tlf01_ptr->mcard_banknet, db_tlf01.mcard_banknet.arr, db_tlf01.mcard_banknet.len);
   memcpy(tlf01_ptr->agent_id_len, db_tlf01.agent_id_len.arr, db_tlf01.agent_id_len.len);
   memcpy(tlf01_ptr->agent_id, db_tlf01.agent_id.arr, db_tlf01.agent_id.len);
   tlf01_ptr->cvc = db_tlf01.cvc.arr[0];
   memcpy(tlf01_ptr->settlement_date, db_tlf01.settlement_date.arr, db_tlf01.settlement_date.len);
   memcpy(tlf01_ptr->category_code, db_tlf01.category_code.arr, db_tlf01.category_code.len);
   memcpy(tlf01_ptr->conversion_rate, db_tlf01.conversion_rate.arr, db_tlf01.conversion_rate.len);
   memcpy(tlf01_ptr->product_code, db_tlf01.product_code.arr, db_tlf01.product_code.len);
   memcpy(tlf01_ptr->odometer, db_tlf01.odometer.arr, db_tlf01.odometer.len);
   memcpy(tlf01_ptr->organization_id, db_tlf01.organization_id.arr, db_tlf01.organization_id.len);
   tlf01_ptr->dynamic_keychange = db_tlf01.dynamic_keychange.arr[0];
   memcpy(tlf01_ptr->txn_cnt, db_tlf01.txn_cnt.arr, db_tlf01.txn_cnt.len);
   memcpy(tlf01_ptr->source_key, db_tlf01.source_key.arr, db_tlf01.source_key.len);
   memcpy(tlf01_ptr->dcf01_retired_cwk, db_tlf01.dcf01_retired_cwk.arr, db_tlf01.dcf01_retired_cwk.len);
   memcpy(tlf01_ptr->dest_key, db_tlf01.dest_key.arr, db_tlf01.dest_key.len);
   memcpy(tlf01_ptr->ncf01_retired_cwk, db_tlf01.ncf01_retired_cwk.arr, db_tlf01.ncf01_retired_cwk.len);
   memcpy(tlf01_ptr->handler_queue, db_tlf01.handler_queue.arr, db_tlf01.handler_queue.len);
   memcpy(tlf01_ptr->authorizing_host_queue, db_tlf01.authorizing_host_queue.arr, db_tlf01.authorizing_host_queue.len);
   memcpy(tlf01_ptr->max_net_consec_tmouts, db_tlf01.max_net_consec_tmouts.arr, db_tlf01.max_net_consec_tmouts.len);
   memcpy(tlf01_ptr->max_active_txns, db_tlf01.max_active_txns.arr, db_tlf01.max_active_txns.len);
   memcpy(tlf01_ptr->remote_nsp_type, db_tlf01.remote_nsp_type.arr, db_tlf01.remote_nsp_type.len);
   memcpy(tlf01_ptr->kek, db_tlf01.kek.arr, db_tlf01.kek.len);
   memcpy(tlf01_ptr->credit_limit, db_tlf01.credit_limit.arr, db_tlf01.credit_limit.len);
   memcpy(tlf01_ptr->forwarding_institution_id, db_tlf01.forwarding_institution_id.arr, db_tlf01.forwarding_institution_id.len);
   memcpy(tlf01_ptr->acquiring_id, db_tlf01.acquiring_id.arr, db_tlf01.acquiring_id.len);
   memcpy(tlf01_ptr->outstanding_balance, db_tlf01.outstanding_balance.arr, db_tlf01.outstanding_balance.len);
   memcpy(tlf01_ptr->nfi_name, db_tlf01.nfi_name.arr, db_tlf01.nfi_name.len);
   memcpy(tlf01_ptr->nfi_seq_nbr, db_tlf01.nfi_seq_nbr.arr, db_tlf01.nfi_seq_nbr.len);
   memcpy(tlf01_ptr->nfi_start_date, db_tlf01.nfi_start_date.arr, db_tlf01.nfi_start_date.len);
   memcpy(tlf01_ptr->nfi_end_date, db_tlf01.nfi_end_date.arr, db_tlf01.nfi_end_date.len);
   memcpy(tlf01_ptr->resp_source, db_tlf01.resp_source.arr, db_tlf01.resp_source.len);
   memcpy(tlf01_ptr->dispensation.origin, db_tlf01.origin.arr, db_tlf01.origin.len);
   memcpy(tlf01_ptr->dispensation.auth_1, db_tlf01.auth_1.arr, db_tlf01.auth_1.len);
   memcpy(tlf01_ptr->dispensation.auth_2, db_tlf01.auth_2.arr, db_tlf01.auth_2.len);
   memcpy(tlf01_ptr->update_mask, db_tlf01.update_mask.arr, db_tlf01.update_mask.len);
   memcpy(tlf01_ptr->type_of_data, db_tlf01.type_of_data.arr, db_tlf01.type_of_data.len);
   memcpy(tlf01_ptr->down_payment, db_tlf01.down_payment.arr, db_tlf01.down_payment.len);
   memcpy(tlf01_ptr->period, db_tlf01.period.arr, db_tlf01.period.len);
   memcpy(tlf01_ptr->interest_rate, db_tlf01.interest_rate.arr, db_tlf01.interest_rate.len);
   memcpy(tlf01_ptr->total_interest, db_tlf01.total_interest.arr, db_tlf01.total_interest.len);
   memcpy(tlf01_ptr->redemption_amount, db_tlf01.redemption_amount.arr, db_tlf01.redemption_amount.len);
   memcpy(tlf01_ptr->vehicle_number, db_tlf01.vehicle_number.arr, db_tlf01.vehicle_number.len);
   memcpy(tlf01_ptr->profile, db_tlf01.profile.arr, db_tlf01.profile.len);
   memcpy(tlf01_ptr->nbr_of_prod_codes, db_tlf01.nbr_of_prod_codes.arr, db_tlf01.nbr_of_prod_codes.len);
   memcpy(tlf01_ptr->product_codes[0].code, db_tlf01.product1_code.arr, db_tlf01.product1_code.len);
   memcpy(tlf01_ptr->product_codes[0].quantity, db_tlf01.product1_quantity.arr, db_tlf01.product1_quantity.len);
   memcpy(tlf01_ptr->product_codes[0].amount, db_tlf01.product1_amount.arr, db_tlf01.product1_amount.len);   
   memcpy(tlf01_ptr->product_codes[1].code, db_tlf01.product2_code.arr, db_tlf01.product2_code.len);
   memcpy(tlf01_ptr->product_codes[1].quantity, db_tlf01.product2_quantity.arr, db_tlf01.product2_quantity.len);
   memcpy(tlf01_ptr->product_codes[1].amount, db_tlf01.product2_amount.arr, db_tlf01.product2_amount.len);
   memcpy(tlf01_ptr->product_codes[2].code, db_tlf01.product3_code.arr, db_tlf01.product3_code.len);
   memcpy(tlf01_ptr->product_codes[2].quantity, db_tlf01.product3_quantity.arr, db_tlf01.product3_quantity.len);
   memcpy(tlf01_ptr->product_codes[2].amount, db_tlf01.product3_amount.arr, db_tlf01.product3_amount.len);
   memcpy(tlf01_ptr->product_codes[3].code, db_tlf01.product4_code.arr, db_tlf01.product4_code.len);
   memcpy(tlf01_ptr->product_codes[3].quantity, db_tlf01.product4_quantity.arr, db_tlf01.product4_quantity.len);
   memcpy(tlf01_ptr->product_codes[3].amount, db_tlf01.product4_amount.arr, db_tlf01.product4_amount.len);
   memcpy(tlf01_ptr->product_codes[4].code, db_tlf01.product5_code.arr, db_tlf01.product5_code.len);
   memcpy(tlf01_ptr->product_codes[4].quantity, db_tlf01.product5_quantity.arr, db_tlf01.product5_quantity.len);
   memcpy(tlf01_ptr->product_codes[4].amount, db_tlf01.product5_amount.arr, db_tlf01.product5_amount.len);
   memcpy(tlf01_ptr->product_codes[5].code, db_tlf01.product6_code.arr, db_tlf01.product6_code.len);
   memcpy(tlf01_ptr->product_codes[5].quantity, db_tlf01.product6_quantity.arr, db_tlf01.product6_quantity.len);
   memcpy(tlf01_ptr->product_codes[5].amount, db_tlf01.product6_amount.arr, db_tlf01.product6_amount.len);
   memcpy(tlf01_ptr->product_codes[6].code, db_tlf01.product7_code.arr, db_tlf01.product7_code.len);
   memcpy(tlf01_ptr->product_codes[6].quantity, db_tlf01.product7_quantity.arr, db_tlf01.product7_quantity.len);
   memcpy(tlf01_ptr->product_codes[6].amount, db_tlf01.product7_amount.arr, db_tlf01.product7_amount.len);
   memcpy(tlf01_ptr->product_codes[7].code, db_tlf01.product8_code.arr, db_tlf01.product8_code.len);
   memcpy(tlf01_ptr->product_codes[7].quantity, db_tlf01.product8_quantity.arr, db_tlf01.product8_quantity.len);
   memcpy(tlf01_ptr->product_codes[7].amount, db_tlf01.product8_amount.arr, db_tlf01.product8_amount.len);
   memcpy(tlf01_ptr->product_codes[8].code, db_tlf01.product9_code.arr, db_tlf01.product9_code.len);
   memcpy(tlf01_ptr->product_codes[8].quantity, db_tlf01.product9_quantity.arr, db_tlf01.product9_quantity.len);
   memcpy(tlf01_ptr->product_codes[8].amount, db_tlf01.product9_amount.arr, db_tlf01.product9_amount.len);
   memcpy(tlf01_ptr->product_codes[9].code, db_tlf01.product10_code.arr, db_tlf01.product10_code.len);
   memcpy(tlf01_ptr->product_codes[9].quantity, db_tlf01.product10_quantity.arr, db_tlf01.product10_quantity.len);
   memcpy(tlf01_ptr->product_codes[9].amount, db_tlf01.product10_amount.arr, db_tlf01.product10_amount.len);
   memcpy(tlf01_ptr->product_codes[10].code, db_tlf01.product11_code.arr, db_tlf01.product11_code.len);
   memcpy(tlf01_ptr->product_codes[10].quantity, db_tlf01.product11_quantity.arr, db_tlf01.product11_quantity.len);
   memcpy(tlf01_ptr->product_codes[10].amount, db_tlf01.product11_amount.arr, db_tlf01.product11_amount.len);
   memcpy(tlf01_ptr->product_codes[11].code, db_tlf01.product12_code.arr, db_tlf01.product12_code.len);
   memcpy(tlf01_ptr->product_codes[11].quantity, db_tlf01.product12_quantity.arr, db_tlf01.product12_quantity.len);
   memcpy(tlf01_ptr->product_codes[11].amount, db_tlf01.product12_amount.arr, db_tlf01.product12_amount.len);
   memcpy(tlf01_ptr->product_codes[12].code, db_tlf01.product13_code.arr, db_tlf01.product13_code.len);
   memcpy(tlf01_ptr->product_codes[12].quantity, db_tlf01.product13_quantity.arr, db_tlf01.product13_quantity.len);
   memcpy(tlf01_ptr->product_codes[12].amount, db_tlf01.product13_amount.arr, db_tlf01.product13_amount.len);
   memcpy(tlf01_ptr->product_codes[13].code, db_tlf01.product14_code.arr, db_tlf01.product14_code.len);
   memcpy(tlf01_ptr->product_codes[13].quantity, db_tlf01.product14_quantity.arr, db_tlf01.product14_quantity.len);
   memcpy(tlf01_ptr->product_codes[13].amount, db_tlf01.product14_amount.arr, db_tlf01.product14_amount.len);
   memcpy(tlf01_ptr->product_codes[14].code, db_tlf01.product15_code.arr, db_tlf01.product15_code.len);
   memcpy(tlf01_ptr->product_codes[14].quantity, db_tlf01.product15_quantity.arr, db_tlf01.product15_quantity.len);
   memcpy(tlf01_ptr->product_codes[14].amount, db_tlf01.product15_amount.arr, db_tlf01.product15_amount.len);
   memcpy(tlf01_ptr->product_codes[15].code, db_tlf01.product16_code.arr, db_tlf01.product16_code.len);
   memcpy(tlf01_ptr->product_codes[15].quantity, db_tlf01.product16_quantity.arr, db_tlf01.product16_quantity.len);
   memcpy(tlf01_ptr->product_codes[15].amount, db_tlf01.product16_amount.arr, db_tlf01.product16_amount.len);
   memcpy(tlf01_ptr->product_codes[16].code, db_tlf01.product17_code.arr, db_tlf01.product17_code.len);
   memcpy(tlf01_ptr->product_codes[16].quantity, db_tlf01.product17_quantity.arr, db_tlf01.product17_quantity.len);
   memcpy(tlf01_ptr->product_codes[16].amount, db_tlf01.product17_amount.arr, db_tlf01.product17_amount.len);
   memcpy(tlf01_ptr->product_codes[17].code, db_tlf01.product18_code.arr, db_tlf01.product18_code.len);
   memcpy(tlf01_ptr->product_codes[17].quantity, db_tlf01.product18_quantity.arr, db_tlf01.product18_quantity.len);
   memcpy(tlf01_ptr->product_codes[17].amount, db_tlf01.product18_amount.arr, db_tlf01.product18_amount.len);
   memcpy(tlf01_ptr->product_codes[18].code, db_tlf01.product19_code.arr, db_tlf01.product19_code.len);
   memcpy(tlf01_ptr->product_codes[18].quantity, db_tlf01.product19_quantity.arr, db_tlf01.product19_quantity.len);
   memcpy(tlf01_ptr->product_codes[18].amount, db_tlf01.product19_amount.arr, db_tlf01.product19_amount.len);
   memcpy(tlf01_ptr->product_codes[19].code, db_tlf01.product20_code.arr, db_tlf01.product20_code.len);
   memcpy(tlf01_ptr->product_codes[19].quantity, db_tlf01.product20_quantity.arr, db_tlf01.product20_quantity.len);
   memcpy(tlf01_ptr->product_codes[19].amount, db_tlf01.product20_amount.arr, db_tlf01.product20_amount.len);
   memcpy(tlf01_ptr->visa_merchant_id, db_tlf01.visa_merchant_id.arr, db_tlf01.visa_merchant_id.len);
   memcpy(tlf01_ptr->cash_bonus, db_tlf01.cash_bonus.arr, db_tlf01.cash_bonus.len);
   memcpy(tlf01_ptr->deferred_factor, db_tlf01.deferred_factor.arr, db_tlf01.deferred_factor.len);
   memcpy(tlf01_ptr->deferred_term_length, db_tlf01.deferred_term_length.arr, db_tlf01.deferred_term_length.len);
   memcpy(tlf01_ptr->currency_code, db_tlf01.currency_code.arr, db_tlf01.currency_code.len);
   memcpy(tlf01_ptr->transmission_timestamp, db_tlf01.transmission_timestamp.arr, db_tlf01.transmission_timestamp.len);
   memcpy(tlf01_ptr->tran_fee_amount, db_tlf01.tran_fee_amount.arr, db_tlf01.tran_fee_amount.len);
   memcpy(tlf01_ptr->cvc_data, db_tlf01.cvc_data.arr, db_tlf01.cvc_data.len);
   memcpy(tlf01_ptr->verify_mag_stripe, db_tlf01.verify_mag_stripe.arr, db_tlf01.verify_mag_stripe.len);
   memcpy(tlf01_ptr->saf, db_tlf01.saf.arr, db_tlf01.saf.len);
   memcpy(tlf01_ptr->security_response_code, db_tlf01.security_response_code.arr, db_tlf01.security_response_code.len);
   memcpy(tlf01_ptr->service_code, db_tlf01.service_code.arr, db_tlf01.service_code.len);
   memcpy(tlf01_ptr->source_pin_format, db_tlf01.source_pin_format.arr, db_tlf01.source_pin_format.len);
   memcpy(tlf01_ptr->dest_pin_format, db_tlf01.dest_pin_format.arr, db_tlf01.dest_pin_format.len);
   memcpy(tlf01_ptr->voice_auth, db_tlf01.voice_auth.arr, db_tlf01.voice_auth.len);
   memcpy(tlf01_ptr->actual_amount, db_tlf01.actual_amount.arr, db_tlf01.actual_amount.len);
   memcpy(tlf01_ptr->reversal_amount, db_tlf01.reversal_amount.arr, db_tlf01.reversal_amount.len);
   memcpy(tlf01_ptr->voice_auth_text, db_tlf01.voice_auth_text.arr, db_tlf01.voice_auth_text.len);
   memcpy(tlf01_ptr->operator_id, db_tlf01.operator_id.arr, db_tlf01.operator_id.len);
   memcpy(tlf01_ptr->workstation, db_tlf01.workstation.arr, db_tlf01.workstation.len);
   memcpy(tlf01_ptr->orig_auth_number, db_tlf01.orig_auth_number.arr, db_tlf01.orig_auth_number.len);
   memcpy(tlf01_ptr->ticket_nbr, db_tlf01.ticket_nbr.arr, db_tlf01.ticket_nbr.len);
   memcpy(tlf01_ptr->system_date, db_tlf01.system_date.arr, db_tlf01.system_date.len);
   memcpy(tlf01_ptr->def_gross_amt, db_tlf01.def_gross_amt.arr, db_tlf01.def_gross_amt.len);
   memcpy(tlf01_ptr->monthly_amort_amt, db_tlf01.monthly_amort_amt.arr, db_tlf01.monthly_amort_amt.len);
}

/*************************************************************************************/
/*************************************************************************************/
void db_to_bch01 ( pBCH01 bch01_ptr)
{
   memset(bch01_ptr, 0, sizeof(BCH01));
   memcpy(bch01_ptr->primary_key.device_id, db_bch01.device_id.arr, db_bch01.device_id.len);
   memcpy(bch01_ptr->primary_key.batch_nbr, db_bch01.batch_nbr.arr, db_bch01.batch_nbr.len);
   memcpy(bch01_ptr->merchant_id, db_bch01.merchant_id.arr, db_bch01.merchant_id.len);
   memcpy(bch01_ptr->batch_status, db_bch01.batch_status.arr, db_bch01.batch_status.len);
   memcpy(bch01_ptr->total_credit_cnt, db_bch01.total_credit_cnt.arr, db_bch01.total_credit_cnt.len);
   memcpy(bch01_ptr->total_credit_amt, db_bch01.total_credit_amt.arr, db_bch01.total_credit_amt.len);
   memcpy(bch01_ptr->total_credit_refund_cnt, db_bch01.total_credit_refund_cnt.arr, db_bch01.total_credit_refund_cnt.len);
   memcpy(bch01_ptr->total_credit_refund_amt, db_bch01.total_credit_refund_amt.arr, db_bch01.total_credit_refund_amt.len);
   memcpy(bch01_ptr->total_debit_cnt, db_bch01.total_debit_cnt.arr, db_bch01.total_debit_cnt.len);
   memcpy(bch01_ptr->total_debit_amt, db_bch01.total_debit_amt.arr, db_bch01.total_debit_amt.len);
   memcpy(bch01_ptr->total_debit_refund_cnt, db_bch01.total_debit_refund_cnt.arr, db_bch01.total_debit_refund_cnt.len);
   memcpy(bch01_ptr->total_debit_refund_amt, db_bch01.total_debit_refund_amt.arr, db_bch01.total_debit_refund_amt.len);
   memcpy(bch01_ptr->total_void_credit_cnt, db_bch01.total_void_credit_cnt.arr, db_bch01.total_void_credit_cnt.len);
   memcpy(bch01_ptr->total_void_credit_amt, db_bch01.total_void_credit_amt.arr, db_bch01.total_void_credit_amt.len);
   memcpy(bch01_ptr->total_void_credit_refund_cnt, db_bch01.total_void_credit_refund_cnt.arr, db_bch01.total_void_credit_refund_cnt.len);
   memcpy(bch01_ptr->total_void_credit_refund_amt, db_bch01.total_void_credit_refund_amt.arr, db_bch01.total_void_credit_refund_amt.len);
   memcpy(bch01_ptr->open_date, db_bch01.open_date.arr, db_bch01.open_date.len);
   memcpy(bch01_ptr->open_time, db_bch01.open_time.arr, db_bch01.open_time.len);
   memcpy(bch01_ptr->release_date, db_bch01.release_date.arr, db_bch01.release_date.len);
   memcpy(bch01_ptr->release_time, db_bch01.release_time.arr, db_bch01.release_time.len);
   memcpy(bch01_ptr->visa_merchant_id, db_bch01.visa_merchant_id.arr, db_bch01.visa_merchant_id.len);
}

/*************************************************************************************/

void db_to_mcf03p ( pMCF03P mcf03p_ptr)
{
	 memset(mcf03p_ptr, 0, sizeof(MCF03P));
	 memcpy(mcf03p_ptr->merch_id, db_mcf03p.merch_id.arr, db_mcf03p.merch_id.len);
	 memcpy(mcf03p_ptr->system_date, db_mcf03p.system_date.arr, db_mcf03p.system_date.len);
	 memcpy(mcf03p_ptr->total_amount, db_mcf03p.total_amount.arr, db_mcf03p.total_amount.len);
	 memcpy(mcf03p_ptr->total_transcn_cnt, db_mcf03p.total_transcn_cnt.arr, db_mcf03p.total_transcn_cnt.len);
	 memcpy(mcf03p_ptr->total_aprvd_amount, db_mcf03p.total_aprvd_amount.arr, db_mcf03p.total_aprvd_amount.len);
	 memcpy(mcf03p_ptr->total_reversed_amount, db_mcf03p.total_reversed_amount.arr, db_mcf03p.total_reversed_amount.len);
	 memcpy(mcf03p_ptr->total_aprvd_transcn_count, db_mcf03p.total_aprvd_transcn_count.arr, db_mcf03p.total_aprvd_transcn_count.len);
	 memcpy(mcf03p_ptr->total_reversed_transcn_count, db_mcf03p.total_reversed_transcn_count.arr, db_mcf03p.total_reversed_transcn_count.len);
	 memcpy(mcf03p_ptr->field_1, db_mcf03p.field_1.arr, db_mcf03p.field_1.len);
	 memcpy(mcf03p_ptr->field_2, db_mcf03p.field_2.arr, db_mcf03p.field_2.len);
	 memcpy(mcf03p_ptr->field_3, db_mcf03p.field_3.arr, db_mcf03p.field_3.len);
	 memcpy(mcf03p_ptr->field_4, db_mcf03p.field_4.arr, db_mcf03p.field_4.len);
	 memcpy(mcf03p_ptr->field_5, db_mcf03p.field_5.arr, db_mcf03p.field_5.len);
	 memcpy(mcf03p_ptr->field_6, db_mcf03p.field_6.arr, db_mcf03p.field_6.len);
	 memcpy(mcf03p_ptr->field_7, db_mcf03p.field_7.arr, db_mcf03p.field_7.len);
	 memcpy(mcf03p_ptr->field_8, db_mcf03p.field_8.arr, db_mcf03p.field_8.len);
	 memcpy(mcf03p_ptr->field_9, db_mcf03p.field_9.arr, db_mcf03p.field_9.len);
	 memcpy(mcf03p_ptr->field_10, db_mcf03p.field_10.arr, db_mcf03p.field_10.len);
	 
}

/*************************************************************************************/
void db_to_bch01_mp ( pBCH01_MP bch01_mp_ptr)
{
   memset(bch01_mp_ptr, 0, sizeof(BCH01_MP));
   memcpy(bch01_mp_ptr->primary_key.device_id, db_bch01_mp.device_id.arr, db_bch01_mp.device_id.len);
   memcpy(bch01_mp_ptr->primary_key.batch_nbr, db_bch01_mp.batch_nbr.arr, db_bch01_mp.batch_nbr.len);
   memcpy(bch01_mp_ptr->merchant_id, db_bch01_mp.merchant_id.arr, db_bch01_mp.merchant_id.len);
   memcpy(bch01_mp_ptr->batch_status, db_bch01_mp.batch_status.arr, db_bch01_mp.batch_status.len);
   memcpy(bch01_mp_ptr->total_credit_cnt, db_bch01_mp.total_credit_cnt.arr, db_bch01_mp.total_credit_cnt.len);
   memcpy(bch01_mp_ptr->total_credit_amt, db_bch01_mp.total_credit_amt.arr, db_bch01_mp.total_credit_amt.len);
   memcpy(bch01_mp_ptr->total_credit_refund_cnt, db_bch01_mp.total_credit_refund_cnt.arr, db_bch01_mp.total_credit_refund_cnt.len);
   memcpy(bch01_mp_ptr->total_credit_refund_amt, db_bch01_mp.total_credit_refund_amt.arr, db_bch01_mp.total_credit_refund_amt.len);
   memcpy(bch01_mp_ptr->total_debit_cnt, db_bch01_mp.total_debit_cnt.arr, db_bch01_mp.total_debit_cnt.len);
   memcpy(bch01_mp_ptr->total_debit_amt, db_bch01_mp.total_debit_amt.arr, db_bch01_mp.total_debit_amt.len);
   memcpy(bch01_mp_ptr->total_debit_refund_cnt, db_bch01_mp.total_debit_refund_cnt.arr, db_bch01_mp.total_debit_refund_cnt.len);
   memcpy(bch01_mp_ptr->total_debit_refund_amt, db_bch01_mp.total_debit_refund_amt.arr, db_bch01_mp.total_debit_refund_amt.len);
   memcpy(bch01_mp_ptr->total_void_credit_cnt, db_bch01_mp.total_void_credit_cnt.arr, db_bch01_mp.total_void_credit_cnt.len);
   memcpy(bch01_mp_ptr->total_void_credit_amt, db_bch01_mp.total_void_credit_amt.arr, db_bch01_mp.total_void_credit_amt.len);
   memcpy(bch01_mp_ptr->total_void_credit_refund_cnt, db_bch01_mp.total_void_credit_refund_cnt.arr, db_bch01_mp.total_void_credit_refund_cnt.len);
   memcpy(bch01_mp_ptr->total_void_credit_refund_amt, db_bch01_mp.total_void_credit_refund_amt.arr, db_bch01_mp.total_void_credit_refund_amt.len);
   memcpy(bch01_mp_ptr->open_date, db_bch01_mp.open_date.arr, db_bch01_mp.open_date.len);
   memcpy(bch01_mp_ptr->open_time, db_bch01_mp.open_time.arr, db_bch01_mp.open_time.len);
   memcpy(bch01_mp_ptr->release_date, db_bch01_mp.release_date.arr, db_bch01_mp.release_date.len);
   memcpy(bch01_mp_ptr->release_time, db_bch01_mp.release_time.arr, db_bch01_mp.release_time.len);
   memcpy(bch01_mp_ptr->visa_merchant_id, db_bch01_mp.visa_merchant_id.arr, db_bch01_mp.visa_merchant_id.len);
}

/*************************************************************************************/


/*************************************************************************************/
void db_to_bch10 ( pBCH10 bch10_ptr)
{
   memset(bch10_ptr, 0, sizeof(BCH10));
   memcpy(bch10_ptr->primary_key.device_id, db_bch10.device_id.arr, db_bch10.device_id.len);
   memcpy(bch10_ptr->primary_key.batch_nbr, db_bch10.batch_nbr.arr, db_bch10.batch_nbr.len);
   memcpy(bch10_ptr->primary_key.retrieval_ref_num, db_bch10.retrieval_ref_num.arr, db_bch10.retrieval_ref_num.len);
   memcpy(bch10_ptr->open_date, db_bch10.open_date.arr, db_bch10.open_date.len);
   memcpy(bch10_ptr->open_time, db_bch10.open_time.arr, db_bch10.open_time.len);
   memcpy(bch10_ptr->merchant_id, db_bch10.merchant_id.arr, db_bch10.merchant_id.len);
   memcpy(bch10_ptr->processing_code, db_bch10.processing_code.arr, db_bch10.processing_code.len);
   memcpy(bch10_ptr->tran_amount, db_bch10.tran_amount.arr, db_bch10.tran_amount.len);
   memcpy(bch10_ptr->response_code, db_bch10.response_code.arr, db_bch10.response_code.len);
   memcpy(bch10_ptr->auth_number, db_bch10.auth_number.arr, db_bch10.auth_number.len);
   memcpy(bch10_ptr->tran_date, db_bch10.tran_date.arr, db_bch10.tran_date.len);
   memcpy(bch10_ptr->tran_time, db_bch10.tran_time.arr, db_bch10.tran_time.len);
   memcpy(bch10_ptr->transaction_id, db_bch10.transaction_id.arr, db_bch10.transaction_id.len);
   memcpy(bch10_ptr->message_type, db_bch10.message_type.arr, db_bch10.message_type.len);
   memcpy(bch10_ptr->card_nbr, db_bch10.card_nbr.arr, db_bch10.card_nbr.len);
   memcpy(bch10_ptr->invoice_nbr, db_bch10.invoice_nbr.arr, db_bch10.invoice_nbr.len);
   memcpy(bch10_ptr->settle_file_prefix, db_bch10.settle_file_prefix.arr, db_bch10.settle_file_prefix.len);
   memcpy(bch10_ptr->product_code, db_bch10.product_code.arr, db_bch10.product_code.len);
   memcpy(bch10_ptr->odometer, db_bch10.odometer.arr, db_bch10.odometer.len);
   memcpy(bch10_ptr->sys_trace_audit_num, db_bch10.sys_trace_audit_num.arr, db_bch10.sys_trace_audit_num.len);
   bch10_ptr->tx_key = db_bch10.tx_key.arr[0];
   bch10_ptr->bin_type = db_bch10.bin_type.arr[0];
   memcpy(bch10_ptr->type_of_data, db_bch10.type_of_data.arr, db_bch10.type_of_data.len);
   memcpy(bch10_ptr->down_payment, db_bch10.down_payment.arr, db_bch10.down_payment.len);
   memcpy(bch10_ptr->period, db_bch10.period.arr, db_bch10.period.len);
   memcpy(bch10_ptr->interest_rate, db_bch10.interest_rate.arr, db_bch10.interest_rate.len);
   memcpy(bch10_ptr->total_interest, db_bch10.total_interest.arr, db_bch10.total_interest.len);
   memcpy(bch10_ptr->redemption_amount, db_bch10.redemption_amount.arr, db_bch10.redemption_amount.len);
   memcpy(bch10_ptr->vehicle_number, db_bch10.vehicle_number.arr, db_bch10.vehicle_number.len);
   memcpy(bch10_ptr->pos_entry_mode, db_bch10.pos_entry_mode.arr, db_bch10.pos_entry_mode.len);
   memcpy(bch10_ptr->profile, db_bch10.profile.arr, db_bch10.profile.len);
   memcpy(bch10_ptr->aportionment_flag, db_bch10.aportionment_flag.arr, db_bch10.aportionment_flag.len);
   memcpy(bch10_ptr->exp_date, db_bch10.exp_date.arr, db_bch10.exp_date.len);
   memcpy(bch10_ptr->cash_bonus, db_bch10.cash_bonus.arr, db_bch10.cash_bonus.len);
   memcpy(bch10_ptr->transmission_timestamp, db_bch10.transmission_timestamp.arr, db_bch10.transmission_timestamp.len);
   memcpy(bch10_ptr->mcard_banknet, db_bch10.mcard_banknet.arr, db_bch10.mcard_banknet.len);
   memcpy(bch10_ptr->ticket_nbr, db_bch10.ticket_nbr.arr, db_bch10.ticket_nbr.len);
   memcpy(bch10_ptr->def_gross_amt, db_bch10.def_gross_amt.arr, db_bch10.def_gross_amt.len);
   memcpy(bch10_ptr->term, db_bch10.term.arr, db_bch10.term.len);
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_select_bch01 (  pCHAR          Primary_key, 
                        pBCH01         bch01_ptr, 
                        pCHAR          ErrorMsg )
{
   memset( &db_bch01, 0, sizeof( db_bch01 ) );
   strncpy( pte_bch01.device_id, Primary_key, sizeof(pte_bch01.device_id) );
   strncpy( pte_bch01.batch_nbr, Primary_key + sizeof(pte_bch01.device_id), sizeof(pte_bch01.batch_nbr) );
   strncpy( pte_bch01.merchant_id, Primary_key + BCH01_MERCHANT_ID_OFFSET, sizeof(pte_bch01.merchant_id) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }

   EXEC SQL SELECT *
   INTO :db_bch01
   FROM bch01
   WHERE device_id = :pte_bch01.device_id AND merchant_id = :pte_bch01.merchant_id AND batch_nbr = :pte_bch01.batch_nbr;
      
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH01 ,Fun_Name : db_select_bch01 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_select_bch01 ,ST1 :%d,ST2 : %d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch01 (bch01_ptr);

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/



BYTE db_select_mcf03p ( pCHAR          Primary_key, 
                        pMCF03P        mcf03p_ptr, 
                        pCHAR          ErrorMsg )
{
   CHAR temp_key[16] = {0};
   
   strncpy(temp_key, Primary_key, 15);
   memset( &db_mcf03p, 0, sizeof( db_mcf03p ) );
   strncpy( pte_mcf03p.merch_id, temp_key, sizeof(pte_mcf03p.merch_id) );
   strncpy( pte_mcf03p.system_date, Primary_key + sizeof(pte_mcf03p.merch_id) -1, sizeof(pte_mcf03p.system_date) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }

   EXEC SQL SELECT *
   INTO :db_mcf03p
   FROM MCF03P
   WHERE merch_id = :pte_mcf03p.merch_id AND system_date = :pte_mcf03p.system_date ;
      
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : MCF03P ,Fun_Name : db_select_mcf03p , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_select_mcf03p ,ST1 :%d,ST2 : %d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_mcf03p (mcf03p_ptr);

   return PTEMSG_OK;
   
}
/*************************************************************************************/
void mcf01_to_db( pMCF01 mcf01_ptr )
{
  memcpy (&pte_mcf01, mcf01_ptr, sizeof(pte_mcf01));
}

BYTE db_update_mcf01( pMCF01 mcf01_ptr, pCHAR ErrorMsg )
{
   INT  retval;
   CHAR status[4]={0};
   char ErrorMsg1[100] = {0};
	
    mcf01_to_db( mcf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_mcf01
      FROM   mcf01
      WHERE  merchant_id     = :pte_mcf01.merchant_id      AND  
      		 organization_id = :pte_mcf01.organization_id  AND
      		 rownum    		 = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : MCF01 ,Fun_Name : db_update_mcf01_S , Duration = %f","updatds",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
 		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_mcf01,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

	strncpy(status,db_mcf01.division_nbr.arr,db_mcf01.division_nbr.len);
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
    
    if(status[0] != 'C')
    {
    	memset(pte_mcf01.division_nbr,0x00,sizeof(pte_mcf01.division_nbr));
    	strncpy(pte_mcf01.division_nbr,"C",1);
      	 EXEC SQL UPDATE mcf01 
   		SET  division_nbr = :pte_mcf01.division_nbr                    
   		WHERE merchant_id = :pte_mcf01.merchant_id AND organization_id = :pte_mcf01.organization_id;
    }

  
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : MCF01 ,Fun_Name : db_update_mcf01_U , Duration = %f","updatds",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   } 
     
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_mcf01,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
  	
   return PTEMSG_OK;
}

/*************************************************************************************/
#ifdef VISA7
BYTE db_update_merchant_integrity_param( pMERCHANT_INTEGRITY_PARAM merchant_integrity_param_ptr, pCHAR ErrorMsg, int rc_category )
{
    merchant_integrity_param_to_db( merchant_integrity_param_ptr );

    if ( db_error_statics_flag == true )
    {
        start_time = ptetime_get_time();
    }
   
    if(rc_category == RC_CAT_1)
    {
        EXEC SQL UPDATE MERCHANT_INTEGRITY_PARAM 
   		SET  c1_block      		 = :pte_merchant_integrity_param.c1_block, 
       		 c1_block_start_date = :pte_merchant_integrity_param.c1_block_start_date,
       		 c1_block_end_date   = :pte_merchant_integrity_param.c1_block_end_date,
       		 last_declined_rc    = :pte_merchant_integrity_param.last_declined_rc
	    WHERE  merchant_id = :pte_merchant_integrity_param.merchant_id       AND  
      	   	   card_nbr    = :pte_merchant_integrity_param.card_nbr   		 AND  
			   category_cd = :pte_merchant_integrity_param.category_cd;
    }
    else if(rc_category == RC_CAT_2)
    {
    	EXEC SQL UPDATE MERCHANT_INTEGRITY_PARAM 
   		SET  c2_block      		 = :pte_merchant_integrity_param.c2_block,                              
       		 c2_count     		 = :pte_merchant_integrity_param.c2_count,
			 c3_count      		 = :pte_merchant_integrity_param.c3_count,
			 c4_count      		 = :pte_merchant_integrity_param.c4_count,
       		 c2_block_start_date = :pte_merchant_integrity_param.c2_block_start_date,
       		 c2_block_end_date   = :pte_merchant_integrity_param.c2_block_end_date,
       		 last_declined_rc    = :pte_merchant_integrity_param.last_declined_rc,
       		 reattempts_date	 = :pte_merchant_integrity_param.reattempts_date,
       		 first_reattempt_date =:pte_merchant_integrity_param.first_reattempt_date
        WHERE  merchant_id = :pte_merchant_integrity_param.merchant_id       AND  
      	   	   card_nbr    = :pte_merchant_integrity_param.card_nbr   		 AND  
			   category_cd =:pte_merchant_integrity_param.category_cd;
    }
    else if(rc_category == RC_CAT_3)
    {
	    EXEC SQL UPDATE MERCHANT_INTEGRITY_PARAM 
   		SET  c3_block     		 = :pte_merchant_integrity_param.c3_block,
			 c2_count     		 = :pte_merchant_integrity_param.c2_count,
       		 c3_count      		 = :pte_merchant_integrity_param.c3_count,
			 c4_count      		 = :pte_merchant_integrity_param.c4_count,
       		 c3_block_start_date = :pte_merchant_integrity_param.c3_block_start_date,
       		 c3_block_end_date   = :pte_merchant_integrity_param.c3_block_end_date,
       		 last_declined_rc    = :pte_merchant_integrity_param.last_declined_rc,
       		 reattempts_date	 = :pte_merchant_integrity_param.reattempts_date,
       		 first_reattempt_date =:pte_merchant_integrity_param.first_reattempt_date
        WHERE  merchant_id = :pte_merchant_integrity_param.merchant_id       AND  
      	   	   card_nbr    = :pte_merchant_integrity_param.card_nbr   		 AND  
			   category_cd =:pte_merchant_integrity_param.category_cd;
    }
    else if(rc_category == RC_CAT_4)
    {
	    EXEC SQL UPDATE MERCHANT_INTEGRITY_PARAM 
   		SET  c4_block      		 = :pte_merchant_integrity_param.c4_block,  
		 	 c2_count     		 = :pte_merchant_integrity_param.c2_count,
			 c3_count      		 = :pte_merchant_integrity_param.c3_count,
       		 c4_count      		 = :pte_merchant_integrity_param.c4_count,
       		 c4_block_start_date = :pte_merchant_integrity_param.c4_block_start_date,
       		 c4_block_end_date   = :pte_merchant_integrity_param.c4_block_end_date,
       		 last_declined_rc    = :pte_merchant_integrity_param.last_declined_rc,
       		 reattempts_date		= :pte_merchant_integrity_param.reattempts_date,
       		 first_reattempt_date =:pte_merchant_integrity_param.first_reattempt_date
        WHERE  merchant_id = :pte_merchant_integrity_param.merchant_id       AND  
			   card_nbr    = :pte_merchant_integrity_param.card_nbr   		 AND  
			   category_cd =:pte_merchant_integrity_param.category_cd;
    }
			
    if ( db_error_statics_flag == true )
    {
        end_time = ptetime_get_time();
        duration = end_time - start_time;
        if(duration >= (double)db_error_statics_value)
	    {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : merchant_integrity_param ,"
			"Fun_Name : db_update_merchant_integrity_param , Duration = %f, MID: %s, Card number: %s",DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_merchant_integrity_param.merchant_id,pte_merchant_integrity_param.card_nbr);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	    }
    }    
    if ( SQLCODE != 0 )
    {
		memset(er_buf,0x00,sizeof(er_buf));
	 	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_merchant_integrity_param ,ST1 :%d,ST2 : %d_2 , MID: %s, Card number: %s",DB_MsgSubtype1,DB_MsgSubtype2,pte_merchant_integrity_param.merchant_id,pte_merchant_integrity_param.card_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
	
    return PTEMSG_OK;
}
#endif

#if(defined MC12_OCT2023 || defined MC13_OCT2023)
BYTE db_update_mip_for_mc(pMERCHANT_INTEGRITY_PARAM merchant_integrity_param_ptr, pCHAR ErrorMsg)
{
	merchant_integrity_param_to_db( merchant_integrity_param_ptr );

    if ( db_error_statics_flag == true )
    {
        start_time = ptetime_get_time();
    }
   
    	EXEC SQL UPDATE MERCHANT_INTEGRITY_PARAM 
   		SET  c1_block      		 = :pte_merchant_integrity_param.c1_block,                              
       		 c1_count     		 = :pte_merchant_integrity_param.c1_count,
       		 c1_block_start_date = :pte_merchant_integrity_param.c1_block_start_date,
       		 c1_block_end_date   = :pte_merchant_integrity_param.c1_block_end_date,
			 c2_block      		 = :pte_merchant_integrity_param.c2_block,
			 c2_count      		 = :pte_merchant_integrity_param.c2_count,
       		 c2_block_start_date = :pte_merchant_integrity_param.c2_block_start_date,
       		 c2_block_end_date   = :pte_merchant_integrity_param.c2_block_end_date,
       		 last_declined_rc    = :pte_merchant_integrity_param.last_declined_rc,
       		 reattempts_date	 = :pte_merchant_integrity_param.reattempts_date,
       		 first_reattempt_date =:pte_merchant_integrity_param.first_reattempt_date,
			 block_reset_date     =:pte_merchant_integrity_param.block_reset_date
        WHERE  merchant_id = :pte_merchant_integrity_param.merchant_id       AND  
      	   	   card_nbr    = :pte_merchant_integrity_param.card_nbr   		 AND  
			   category_cd =:pte_merchant_integrity_param.category_cd;
			   
	if ( db_error_statics_flag == true )
    {
        end_time = ptetime_get_time();
        duration = end_time - start_time;
        if(duration >= (double)db_error_statics_value)
	    {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : merchant_integrity_param ,"
			"Fun_Name : db_update_merchant_integrity_param , Duration = %f, MID: %s, Card number: %s",DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_merchant_integrity_param.merchant_id,pte_merchant_integrity_param.card_nbr);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	    }
    }    
    if ( SQLCODE != 0 )
    {
		memset(er_buf,0x00,sizeof(er_buf));
	 	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_merchant_integrity_param ,ST1 :%d,ST2 : %d_2 , MID: %s, Card number: %s",DB_MsgSubtype1,DB_MsgSubtype2,pte_merchant_integrity_param.merchant_id,pte_merchant_integrity_param.card_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
	
    return PTEMSG_OK;
}
#endif

/*************************************************************************************/
BYTE db_update_mcf03p( pMCF03P mcf03p_ptr, pCHAR ErrorMsg )
{
   mcf03p_to_db( mcf03p_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_mcf03p
      FROM   MCF03P
      WHERE  merch_id = :pte_mcf03p.merch_id       AND  
      		 system_date = :pte_mcf03p.system_date   AND  
      		 rownum    = 1
      For Update NOWAIT;
      
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : MCF03P ,"
		"Fun_Name : db_update_mcf03p_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
   		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_mcf03p ,ST1 :%d,ST2 : %d_1, merch id: %s",DB_MsgSubtype1,DB_MsgSubtype2,pte_mcf03p.merch_id);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;

   }
   
   if ( db_error_statics_flag == true )
   {
        start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE mcf03p 
   SET merch_id                	  		  = :pte_mcf03p.merch_id,                              
       system_date               	      = :pte_mcf03p.system_date,
       total_amount						  = :pte_mcf03p.total_amount,
       total_transcn_cnt				  = :pte_mcf03p.total_transcn_cnt,
       total_aprvd_amount				  = :pte_mcf03p.total_aprvd_amount,
       total_reversed_amount				  = :pte_mcf03p.total_reversed_amount,
       total_aprvd_transcn_count				  = :pte_mcf03p.total_aprvd_transcn_count,
       total_reversed_transcn_count				  = :pte_mcf03p.total_reversed_transcn_count,
       field_1				  = :pte_mcf03p.field_1,
       field_2				  = :pte_mcf03p.field_2,
       field_3				  = :pte_mcf03p.field_3,
       field_4				  = :pte_mcf03p.field_4,
       field_5				  = :pte_mcf03p.field_5,
       field_6				  = :pte_mcf03p.field_6,
       field_7				  = :pte_mcf03p.field_7,
       field_8				  = :pte_mcf03p.field_8,
       field_9				  = :pte_mcf03p.field_9,
       field_10				  = :pte_mcf03p.field_10
       
    WHERE merch_id   = :pte_mcf03p.merch_id  AND 
   		 system_date = :pte_mcf03p.system_date; 
      
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : MCF03P ,"
			"Fun_Name : db_update_mcf03p_U , Duration = %f, MID: %s",DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_mcf03p.merch_id);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }    
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
	 	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_mcf03p ,ST1 :%d,ST2 : %d_2 , MID: %s ",DB_MsgSubtype1,DB_MsgSubtype2,pte_mcf03p.merch_id);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
 }
 
 
 
 
/*************************************************************************************/

BYTE db_update_bch01( pBCH01 bch01_ptr, pCHAR ErrorMsg )
{
   bch01_to_db( bch01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch01
      FROM   BCH01
      WHERE  device_id = :pte_bch01.device_id       AND  
      		 merchant_id = :pte_bch01.merchant_id   AND  
      		 batch_nbr = :pte_bch01.batch_nbr       AND  
      		 open_time = :pte_bch01.open_time       AND  
      		 open_date = :pte_bch01.open_date       AND
      		 rownum    = 1
      For Update NOWAIT;

   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH01 ,"
		"Fun_Name : db_update_bch01_S , Duration = %f, device id: %s, MID: %s ,batch number: %s",DB_MsgSubtype1,DB_MsgSubtype2,duration,
		pte_bch01.device_id,pte_bch01.merchant_id,pte_bch01.batch_nbr);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
   		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_bch01 ,ST1 :%d,ST2 : %d_1, device id: %s, MID: %s ,batch number: %s",DB_MsgSubtype1,DB_MsgSubtype2,
		pte_bch01.device_id,pte_bch01.merchant_id,pte_bch01.batch_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;

   }

   if ( db_error_statics_flag == true )
   {
        start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE bch01 
   SET device_id                	  = :pte_bch01.device_id,                              
       batch_nbr                 	  = :pte_bch01.batch_nbr,                 
       merchant_id              	  = :pte_bch01.merchant_id,
       total_credit_cnt         	  = :pte_bch01.total_credit_cnt,           
       total_credit_amt         	  = :pte_bch01.total_credit_amt,           
       total_credit_refund_cnt   	  = :pte_bch01.total_credit_refund_cnt,           
       total_credit_refund_amt   	  = :pte_bch01.total_credit_refund_amt,           
       total_debit_cnt           	  = :pte_bch01.total_debit_cnt,           
       total_debit_amt          	  = :pte_bch01.total_debit_amt,           
       total_debit_refund_cnt   	  = :pte_bch01.total_debit_refund_cnt,           
       total_debit_refund_amt    	  = :pte_bch01.total_debit_refund_amt, 
       total_void_credit_cnt          = :pte_bch01.total_void_credit_cnt,           
       total_void_credit_amt          = :pte_bch01.total_void_credit_amt,           
       total_void_credit_refund_cnt   = :pte_bch01.total_void_credit_refund_cnt,           
       total_void_credit_refund_amt   = :pte_bch01.total_void_credit_refund_amt,      
                 
       open_date                 	  = :pte_bch01.open_date,
       open_time                 	  = :pte_bch01.open_time,
       release_date              	  = :pte_bch01.release_date,
       release_time              	  = :pte_bch01.release_time,
       batch_status             	  = :pte_bch01.batch_status,
       visa_merchant_id          	  = :pte_bch01.visa_merchant_id

   WHERE device_id   = :pte_bch01.device_id   AND 
   		 merchant_id = :pte_bch01.merchant_id AND 
   		 batch_nbr   = :pte_bch01.batch_nbr   AND 
   		 open_time   = :pte_bch01.open_time   AND 
   		 open_date   = :pte_bch01.open_date;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH01 ,"
			"Fun_Name : db_update_bch01_U , Duration = %f, device id: %s, MID: %s ,batch number: %s",DB_MsgSubtype1,DB_MsgSubtype2,duration,
			pte_bch01.device_id,pte_bch01.merchant_id,pte_bch01.batch_nbr);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }    
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
	 	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_bch01 ,ST1 :%d,ST2 : %d_2 , device id: %s, MID: %s ,batch number: %s",DB_MsgSubtype1,DB_MsgSubtype2,
		pte_bch01.device_id,pte_bch01.merchant_id,pte_bch01.batch_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/

/*************************************************************************************/
BYTE db_select_bch01_mp (  pCHAR          Primary_key, 
                        pBCH01_MP         bch01_mp_ptr, 
                        pCHAR          ErrorMsg )
{
   memset( &db_bch01_mp, 0, sizeof( db_bch01_mp ) );
   strncpy( pte_bch01_mp.device_id, Primary_key, sizeof(pte_bch01_mp.device_id) );
   strncpy( pte_bch01_mp.batch_nbr, Primary_key + sizeof(pte_bch01_mp.device_id), sizeof(pte_bch01_mp.batch_nbr) );
   strncpy( pte_bch01_mp.merchant_id, Primary_key + BCH01_MP_MERCHANT_ID_OFFSET, sizeof(pte_bch01_mp.merchant_id) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   	
   EXEC SQL SELECT *
   INTO :db_bch01_mp
   FROM bch01_mp
   WHERE device_id   = :pte_bch01_mp.device_id   AND 
   		 merchant_id = :pte_bch01_mp.merchant_id AND 
   		 batch_nbr   = :pte_bch01_mp.batch_nbr;
    
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH01 ,"
			"Fun_Name : db_select_bch01_mp , Duration = %f, device id: %s, MID: %s ,batch number: %s",DB_MsgSubtype1,DB_MsgSubtype2,duration,
			pte_bch01_mp.device_id,pte_bch01_mp.merchant_id,pte_bch01_mp.batch_nbr);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }   
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_select_bch01_mp ,ST1 :%d,ST2 : %d, device id: %s, MID: %s ,batch number: %s",DB_MsgSubtype1,DB_MsgSubtype2,
		pte_bch01_mp.device_id,pte_bch01_mp.merchant_id,pte_bch01_mp.batch_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch01_mp (bch01_mp_ptr);

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/

BYTE db_update_bch01_mp( pBCH01_MP bch01_mp_ptr, pCHAR ErrorMsg )
{
   bch01_mp_to_db( bch01_mp_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch01_mp
      FROM   BCH01_MP
      WHERE  device_id   = :pte_bch01_mp.device_id   AND  
      		 merchant_id = :pte_bch01_mp.merchant_id AND  
      		 batch_nbr   = :pte_bch01_mp.batch_nbr   AND  
      		 open_time   = :pte_bch01_mp.open_time   AND  
      		 open_date   = :pte_bch01_mp.open_date   AND
      		 rownum      = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH01 ,"
			"Fun_Name : db_update_bch01_mp_S , Duration = %f, device id: %s, MID: %s ,batch number: %s",DB_MsgSubtype1,DB_MsgSubtype2,duration,
			pte_bch01_mp.device_id,pte_bch01_mp.merchant_id,pte_bch01_mp.batch_nbr);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_bch01_mp ,ST1 :%d,ST2 : %d_1, device id: %s, MID: %s ,batch number: %s",DB_MsgSubtype1,DB_MsgSubtype2,
		pte_bch01_mp.device_id,pte_bch01_mp.merchant_id,pte_bch01_mp.batch_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;

   }
  
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }

   EXEC SQL UPDATE bch01_mp 
   SET device_id                 	  = :pte_bch01_mp.device_id,                              
       batch_nbr                 	  = :pte_bch01_mp.batch_nbr,                 
       merchant_id               	  = :pte_bch01_mp.merchant_id,
       total_credit_cnt          	  = :pte_bch01_mp.total_credit_cnt,           
       total_credit_amt          	  = :pte_bch01_mp.total_credit_amt,           
       total_credit_refund_cnt   	  = :pte_bch01_mp.total_credit_refund_cnt,           
       total_credit_refund_amt   	  = :pte_bch01_mp.total_credit_refund_amt,           
       total_debit_cnt           	  = :pte_bch01_mp.total_debit_cnt,           
       total_debit_amt           	  = :pte_bch01_mp.total_debit_amt,           
       total_debit_refund_cnt    	  = :pte_bch01_mp.total_debit_refund_cnt,           
       total_debit_refund_amt    	  = :pte_bch01_mp.total_debit_refund_amt, 
       total_void_credit_cnt          = :pte_bch01_mp.total_void_credit_cnt,           
       total_void_credit_amt          = :pte_bch01_mp.total_void_credit_amt,           
       total_void_credit_refund_cnt   = :pte_bch01_mp.total_void_credit_refund_cnt,           
       total_void_credit_refund_amt   = :pte_bch01_mp.total_void_credit_refund_amt,      
                 
       open_date                 	  = :pte_bch01_mp.open_date,
       open_time                	  = :pte_bch01_mp.open_time,
       release_date             	  = :pte_bch01_mp.release_date,
       release_time             	  = :pte_bch01_mp.release_time,
       batch_status              	  = :pte_bch01_mp.batch_status,
       visa_merchant_id          	  = :pte_bch01_mp.visa_merchant_id

   WHERE device_id   = :pte_bch01_mp.device_id   AND 
         merchant_id = :pte_bch01_mp.merchant_id AND 
         batch_nbr   = :pte_bch01_mp.batch_nbr   AND 
         open_time   = :pte_bch01_mp.open_time   AND 
         open_date   = :pte_bch01_mp.open_date;
    
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH01 ,"
			"Fun_Name : db_update_bch01_mp_U , Duration = %f, device id: %s, MID: %s ,batch number: %s",DB_MsgSubtype1,DB_MsgSubtype2,duration,
			pte_bch01_mp.device_id,pte_bch01_mp.merchant_id,pte_bch01_mp.batch_nbr);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }   
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_bch01_mp ,ST1 :%d,ST2 : %d_2, device id: %s, MID: %s ,batch number: %s",DB_MsgSubtype1,DB_MsgSubtype2,
		pte_bch01_mp.device_id,pte_bch01_mp.merchant_id,pte_bch01_mp.batch_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/


/*************************************************************************************/
BYTE db_update_bch10( pBCH10 bch10_ptr, pCHAR ErrorMsg )
{
   /* update open date and time is not necessary */
   BYTE  temp_tx_key;
   bch10_to_db( bch10_ptr );
      
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch10
      FROM   BCH10
      WHERE  device_id 		   = :pte_bch10.device_id     		AND  
      		 merchant_id 	   = :pte_bch10.merchant_id   		AND  
      		 batch_nbr 		   = :pte_bch10.batch_nbr     		AND  
      		 retrieval_ref_num = :pte_bch10.retrieval_ref_num	AND
      		 rownum            = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH10 ,"
			"Fun_Name : db_update_bch10_S , Duration = %f, device id: %s, MID: %s ,batch number: %s,stan: %s",DB_MsgSubtype1,DB_MsgSubtype2,duration,
			pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr,pte_bch10.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_bch10 ,ST1 :%d,ST2 : %d_1, device id: %s, MID: %s ,batch number: %s,stan: %s",DB_MsgSubtype1,DB_MsgSubtype2,
		pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr,pte_bch10.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;

   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   if(db_bch10.tx_key.arr[0] == AUTH_VOID_SALE ||
      db_bch10.tx_key.arr[0] == AUTH_VOID_SALE_RESPONSE)
   {
      temp_tx_key = AUTH_VOID_SALE;
   }
   else
   {
   		temp_tx_key = bch10_ptr->tx_key;
   }

   
   if(AUTH_VOID_SALE 			== temp_tx_key ||
	  AUTH_VOID_SALE_RESPONSE 	== temp_tx_key ||
	  AUTH_REVERSAL 			== temp_tx_key ||
	  AUTH_REVERSAL_RESPONSE 	== temp_tx_key)
   {
	    EXEC SQL UPDATE bch10 
	    SET 
	    device_id				= :pte_bch10.device_id,
		batch_nbr				= :pte_bch10.batch_nbr, 
		retrieval_ref_num		= :pte_bch10.retrieval_ref_num,
	
		merchant_id				= :pte_bch10.merchant_id,
		tran_date				= :pte_bch10.tran_date,
		tran_time				= :pte_bch10.tran_time,   
		tran_amount				= :pte_bch10.tran_amount, 
	
		processing_code			= :pte_bch10.processing_code,
		auth_number				= :pte_bch10.auth_number,   
		message_type			= :pte_bch10.message_type,
		card_nbr				= :pte_bch10.card_nbr,    
	  
		invoice_nbr				= :pte_bch10.invoice_nbr,   
		settle_file_prefix		= :pte_bch10.settle_file_prefix,    
		product_code			= :pte_bch10.product_code,           
	
		sys_trace_audit_num		= :pte_bch10.sys_trace_audit_num,
		tx_key					= :pte_bch10.tx_key, 
		bin_type				= :pte_bch10.bin_type,
	
		pos_entry_mode			= :pte_bch10.pos_entry_mode,
		profile					= :pte_bch10.profile,
	
		exp_date				= :pte_bch10.exp_date,
		product2_code			= :pte_bch10.product2_code,
		product7_amount         = :pte_bch10.product7_amount,      /*girija GB*/
		product11_quantity      = :pte_bch10.product11_quantity,
		product11_code      	= :pte_bch10.product11_code,
		product14_quantity      = :pte_bch10.product14_quantity
		    
	
		WHERE device_id         = :pte_bch10.device_id  AND 
			  merchant_id       = :pte_bch10.merchant_id AND 
			  batch_nbr         = :pte_bch10.batch_nbr AND
	          retrieval_ref_num = :pte_bch10.retrieval_ref_num;
   }
   else
   {
   EXEC SQL UPDATE bch10 
   SET 
    device_id				= :pte_bch10.device_id,
	batch_nbr				= :pte_bch10.batch_nbr, 
	retrieval_ref_num		= :pte_bch10.retrieval_ref_num,

	merchant_id				= :pte_bch10.merchant_id,  
	transaction_id			= :pte_bch10.transaction_id,
	tran_date				= :pte_bch10.tran_date,
	tran_time				= :pte_bch10.tran_time,   
	tran_amount				= :pte_bch10.tran_amount, 

	processing_code			= :pte_bch10.processing_code,
	auth_number				= :pte_bch10.auth_number,   
	message_type			= :pte_bch10.message_type,
	card_nbr				= :pte_bch10.card_nbr,    
  
	invoice_nbr				= :pte_bch10.invoice_nbr,   
	settle_file_prefix		= :pte_bch10.settle_file_prefix,    
	product_code			= :pte_bch10.product_code,           

	sys_trace_audit_num		= :pte_bch10.sys_trace_audit_num,
	tx_key					= :pte_bch10.tx_key, 
	bin_type				= :pte_bch10.bin_type,

	pos_entry_mode			= :pte_bch10.pos_entry_mode,
	profile					= :pte_bch10.profile,

	exp_date				= :pte_bch10.exp_date,
	product2_code			= :pte_bch10.product2_code,
	product7_amount         = :pte_bch10.product7_amount,      /*girija GB*/
	product11_quantity      = :pte_bch10.product11_quantity,
	product11_code      	= :pte_bch10.product11_code,
	product14_quantity      = :pte_bch10.product14_quantity
	    

	WHERE device_id         = :pte_bch10.device_id  AND 
		  merchant_id       = :pte_bch10.merchant_id AND 
		  batch_nbr         = :pte_bch10.batch_nbr AND
          retrieval_ref_num = :pte_bch10.retrieval_ref_num;
    
   }

    
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH10 ,"
		"Fun_Name : db_update_bch10_U , Duration = %f, device id: %s, MID: %s ,batch number: %s,stan: %s",DB_MsgSubtype1,DB_MsgSubtype2,duration,
		pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr,pte_bch10.sys_trace_audit_num);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }   
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_bch10 ,ST1 :%d,ST2 : %d_2, device id: %s, MID: %s ,batch number: %s,stan: %s",DB_MsgSubtype1,DB_MsgSubtype2,
		pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr,pte_bch10.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}


/*************************************************************************************/
BYTE db_update_bch10_for_CUP_VOID_REV( pBCH10 bch10_ptr, pCHAR ErrorMsg )
{
   /* update open date and time is not necessary */
   BYTE  temp_tx_key;
   bch10_to_db( bch10_ptr );
      
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch10
      FROM   BCH10
      WHERE  device_id 		   = :pte_bch10.device_id     		AND  
      		 merchant_id 	   = :pte_bch10.merchant_id   		AND  
      		 batch_nbr 		   = :pte_bch10.batch_nbr     		AND  
      		 retrieval_ref_num = :pte_bch10.retrieval_ref_num	AND
      		 rownum            = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH10 ,"
			"Fun_Name : db_update_bch10_for_CUP_VOID_REV_S , Duration = %f, device id: %s, MID: %s ,batch number: %s,stan: %s",DB_MsgSubtype1,DB_MsgSubtype2,duration,
			pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr,pte_bch10.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_bch10_for_CUP_VOID_REV ,ST1 :%d,ST2 : %d_1, device id: %s, MID: %s ,batch number: %s,stan: %s",DB_MsgSubtype1,DB_MsgSubtype2,
		pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr,pte_bch10.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;

   }

   temp_tx_key = db_bch10.tx_key.arr[0];
   
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   if(AUTH_VOID_SALE 			== temp_tx_key ||
	  AUTH_VOID_SALE_RESPONSE 	== temp_tx_key ||
	  AUTH_REVERSAL 			== temp_tx_key ||
	  AUTH_REVERSAL_RESPONSE 	== temp_tx_key)
   {
	 
	   	EXEC SQL UPDATE bch10 
	   	SET 
	    device_id				= :pte_bch10.device_id,
		batch_nbr				= :pte_bch10.batch_nbr, 
		retrieval_ref_num		= :pte_bch10.retrieval_ref_num,
	
		merchant_id				= :pte_bch10.merchant_id,
		tran_date				= :pte_bch10.tran_date,
		tran_time				= :pte_bch10.tran_time,   
		tran_amount				= :pte_bch10.tran_amount, 
	
		processing_code			= :pte_bch10.processing_code,
		auth_number				= :pte_bch10.auth_number,   
		message_type			= :pte_bch10.message_type,
		card_nbr				= :pte_bch10.card_nbr,    
	  
		invoice_nbr				= :pte_bch10.invoice_nbr,   
		settle_file_prefix		= :pte_bch10.settle_file_prefix,    
		product_code			= :pte_bch10.product_code,           
	
		sys_trace_audit_num		= :pte_bch10.sys_trace_audit_num,
		tx_key					= :pte_bch10.tx_key, 
		bin_type				= :pte_bch10.bin_type,
	
		pos_entry_mode			= :pte_bch10.pos_entry_mode,
		profile					= :pte_bch10.profile,
	
		exp_date				= :pte_bch10.exp_date,
		product2_code			= :pte_bch10.product2_code,
		product7_amount         = :pte_bch10.product7_amount      /*girija GB*/
	    
   
		WHERE device_id         = :pte_bch10.device_id  AND 
			  merchant_id       = :pte_bch10.merchant_id AND 
			  batch_nbr         = :pte_bch10.batch_nbr AND
	          retrieval_ref_num = :pte_bch10.retrieval_ref_num;
	}
	else
	{
   EXEC SQL UPDATE bch10 
   SET 
    device_id				= :pte_bch10.device_id,
	batch_nbr				= :pte_bch10.batch_nbr, 
	retrieval_ref_num		= :pte_bch10.retrieval_ref_num,

	merchant_id				= :pte_bch10.merchant_id,  
	transaction_id			= :pte_bch10.transaction_id,
	tran_date				= :pte_bch10.tran_date,
	tran_time				= :pte_bch10.tran_time,   
	tran_amount				= :pte_bch10.tran_amount, 

	processing_code			= :pte_bch10.processing_code,
	auth_number				= :pte_bch10.auth_number,   
	message_type			= :pte_bch10.message_type,
	card_nbr				= :pte_bch10.card_nbr,    
  
	invoice_nbr				= :pte_bch10.invoice_nbr,   
	settle_file_prefix		= :pte_bch10.settle_file_prefix,    
	product_code			= :pte_bch10.product_code,           

	sys_trace_audit_num		= :pte_bch10.sys_trace_audit_num,
	tx_key					= :pte_bch10.tx_key, 
	bin_type				= :pte_bch10.bin_type,

	pos_entry_mode			= :pte_bch10.pos_entry_mode,
	profile					= :pte_bch10.profile,

	exp_date				= :pte_bch10.exp_date,
	product2_code			= :pte_bch10.product2_code,
	product7_amount         = :pte_bch10.product7_amount      /*girija GB*/
    

	WHERE device_id         = :pte_bch10.device_id  AND 
		  merchant_id       = :pte_bch10.merchant_id AND 
		  batch_nbr         = :pte_bch10.batch_nbr AND
          retrieval_ref_num = :pte_bch10.retrieval_ref_num;
	}
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH10 ,"
		"Fun_Name : db_update_bch10_for_CUP_VOID_REV_U , Duration = %f, device id: %s, MID: %s ,batch number: %s,stan: %s",DB_MsgSubtype1,DB_MsgSubtype2,duration,
		pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr,pte_bch10.sys_trace_audit_num);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }   
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_bch10_for_CUP_VOID_REV ,ST1 :%d,ST2 : %d_2, device id: %s, MID: %s ,batch number: %s,stan: %s",DB_MsgSubtype1,DB_MsgSubtype2,
		pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr,pte_bch10.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}
/*************************************/
BYTE db_update_emv_raw_by_bch20_auth_number( pBCH20 bch20_ptr,pCHAR tid, pCHAR ErrorMsg)
{

EXEC SQL BEGIN DECLARE SECTION;
      char bch10_tid[21]="";
       char bch20_tid[21]="";
       char serviceCode[6]= {0};
       char posEntryCode[5]=""; 
	   char mcard_banknet[51]="";
   EXEC SQL END DECLARE SECTION;
   bch20_to_db( bch20_ptr );

   memcpy(bch10_tid,tid,sizeof(bch10_tid));
      
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT TRANSACTION_ID, PRODUCT7_AMOUNT, POS_ENTRY_MODE, MCARD_BANKNET
      INTO  :bch20_tid , :serviceCode , :posEntryCode , :mcard_banknet
      FROM   BCH20
      WHERE  merchant_id         = :pte_bch20.merchant_id  AND  
      		 batch_nbr           = :pte_bch20.batch_nbr    AND  
      		 card_nbr 		     = :pte_bch20.card_nbr     AND 
      		 auth_number		 = :pte_bch20.auth_number  AND
      		 rownum              = 1
      For Update NOWAIT;

   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH20 ,"
			"Fun_Name : db_update_emv_raw_by_bch20_auth_number_S , Duration = %f,RRN: %s,STAN: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_bch20.retrieval_ref_num,pte_bch20.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA && SQLCODE != NO_DATA_FOUND)
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_emv_raw_by_bch20_auth_number ,ST1 :%d,ST2 : %d_1,RRN: %s,STAN: %s",DB_MsgSubtype1,DB_MsgSubtype2,
		pte_bch20.retrieval_ref_num,pte_bch20.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;

   }
	
	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
  /* Make sure we can access the record before attempting to update it.  */
   EXEC SQL
      SELECT  *
      INTO  :db_emv_raw
      FROM   emv_raw
      WHERE TRANSACTION_ID = :bch20_tid AND
      		rownum = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : emv_raw ,Fun_Name : db_update_emv_raw_by_bch20_auth_number_S , Duration = %f,RRN: %s,STAN: %s",DB_MsgSubtype1,DB_MsgSubtype2,duration,
		pte_bch20.retrieval_ref_num,pte_bch20.sys_trace_audit_num);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
 		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_delete_active_bch10 ,ST1 :%d,ST2 : %d_2,RRN: %s,STAN: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch20.retrieval_ref_num,pte_bch20.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;

   }
	
     if ( db_error_statics_flag == true )
     {
      	start_time = ptetime_get_time();
     }
     EXEC SQL UPDATE emv_raw
     SET TRANSACTION_ID  = :bch10_tid 
     WHERE TRANSACTION_ID  = :bch20_tid;
    
    if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH20 ,Fun_Name : db_update_emv_raw_by_bch20_auth_number_emv_U , Duration = %f,RRN: %s,STAN: %s",DB_MsgSubtype1,DB_MsgSubtype2,duration,
			pte_bch20.retrieval_ref_num,pte_bch20.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   
    if ( db_error_statics_flag == true )
    {
      start_time = ptetime_get_time();
    }
	EXEC SQL UPDATE bch20
	SET TRANSACTION_ID	= :bch10_tid 
	WHERE TRANSACTION_ID  = :bch20_tid;
	 
	if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH20 ,Fun_Name : db_update_emv_raw_by_bch20_auth_number_U , Duration = %f,RRN: %s,STAN: %s",DB_MsgSubtype1,DB_MsgSubtype2,duration,
			pte_bch20.retrieval_ref_num,pte_bch20.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
	if(strlen(serviceCode) != 0)
	{
		strcpy(bch20_ptr->product_codes[6].amount,serviceCode);
	}
	if(strlen(posEntryCode) != 0)
	{
		strcpy(bch20_ptr->pos_entry_mode,posEntryCode);
	}
	if(strlen(mcard_banknet) != 0)
	{
		strcpy(bch20_ptr->mcard_banknet,mcard_banknet);
	}

   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_emv_raw_by_bch20_auth_number ,ST1 :%d,ST2 : %d_3,RRN: %s,STAN: %s",DB_MsgSubtype1,DB_MsgSubtype2,
		pte_bch20.retrieval_ref_num,pte_bch20.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************/
/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_bch20_by_stan( pBCH20 bch20_ptr, pCHAR ErrorMsg)
{
   bch20_to_db( bch20_ptr );
   
   if ( db_error_statics_flag == true )
    {
      start_time = ptetime_get_time();
    }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch20
      FROM   BCH20
      WHERE  device_id           = :pte_bch20.device_id 		  AND  
      		 merchant_id         = :pte_bch20.merchant_id   	  AND  
      		 batch_nbr           = :pte_bch20.batch_nbr     	  AND  
      		 sys_trace_audit_num = :pte_bch20.sys_trace_audit_num AND
      		 rownum              = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH20 ,Fun_Name : db_update_bch20_by_stan_S , Duration = %f , device id: %s, MID: %s ,batch number: %s,stan: %s",DB_MsgSubtype1,DB_MsgSubtype2,duration,
		pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr,pte_bch20.sys_trace_audit_num);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		sprintf(er_buf,"In db_update_bch20_by_stan ,ST1 :%d,ST2 : %d_1 , device id: %s, MID: %s ,batch number: %s,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr,pte_bch20.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;

   }

   if ( db_error_statics_flag == true )
    {
      start_time = ptetime_get_time();
    }
    
   EXEC SQL UPDATE bch20
   SET processed = 'Y'
   WHERE device_id 			 = :pte_bch20.device_id 	  AND 
   		 batch_nbr 			 = :pte_bch20.batch_nbr       AND 
   		 merchant_id 		 = :pte_bch20.merchant_id     AND
   		 sys_trace_audit_num = :pte_bch20.sys_trace_audit_num;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH20 ,Fun_Name : db_update_bch20_by_stan_U , Duration = %f , device id: %s, MID: %s ,batch number: %s,stan: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr,pte_bch20.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_bch20_by_stan ,ST1 :%d,ST2 : %d_2 , device id: %s, MID: %s ,batch number: %s,stan: %s",DB_MsgSubtype1,DB_MsgSubtype2,
		pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr,pte_bch20.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/
BYTE db_update_bch20_preauth_flag_by_card_num( pBCH20 bch20_ptr, pCHAR ErrorMsg)
{
	bch20_to_db( bch20_ptr );
	/*Put select for this */
	 EXEC SQL
      SELECT *
      INTO  :db_bch20
      FROM   BCH20
      WHERE batch_nbr 	= :pte_bch20.batch_nbr   AND
      		merchant_id = :pte_bch20.merchant_id AND 
      		card_nbr 	= :pte_bch20.card_nbr    AND
      		rownum 		= 1
            FOR Update NOWAIT;
 
  	if ( db_error_statics_flag == true )
   	{
      	start_time = ptetime_get_time();
   	}
  	
  	/* Make sure we can access the record before attempting to delete it.  */
   	EXEC SQL 
   		SELECT  *
      	INTO  :db_bch20
      	FROM   bch20
      	WHERE    batch_nbr 	 = :pte_bch20.batch_nbr 	AND 
      			 merchant_id = :pte_bch20.merchant_id 	AND 
      			 card_nbr 	 = :pte_bch20.card_nbr 		AND
      			 rownum 	 = 1
      	For Update NOWAIT;
   
   	if ( db_error_statics_flag == true )
   	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH20 ,Fun_Name : db_update_bch20_preauth_flag_by_card_num_S , Duration = %f , device id: %s, MID: %s ,batch number: %s,stan: %s",DB_MsgSubtype1,DB_MsgSubtype2,duration,
			pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr,pte_bch20.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
    }
    
   	if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   	{
      /* Record is inaccessible. Return with error. */
 		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_bch20_preauth_flag_by_card_num ,ST1 :%d,ST2 : %d_1 , device id: %s, MID: %s ,batch number: %s,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr,pte_bch20.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;

   	}
   
   	if ( db_error_statics_flag == true )
   	{
   	   start_time = ptetime_get_time();
   	}
   
   EXEC SQL UPDATE bch20
   SET product5_code = 'procsd'
   WHERE    batch_nbr   = :pte_bch20.batch_nbr   AND 
   			merchant_id = :pte_bch20.merchant_id AND 
   			card_nbr    = :pte_bch20.card_nbr;

   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH20 ,Fun_Name : db_update_bch20_preauth_flag_by_card_num_U , Duration = %f , device id: %s, MID: %s ,batch number: %s,stan: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr,pte_bch20.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_bch20_preauth_flag_by_card_num ,ST1 :%d,ST2 : %d_2, device id: %s, MID: %s ,batch number: %s,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr,pte_bch20.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

#ifdef BDOR_62_PREAUTH_VOID
/*************************************************************************************/
BYTE db_update_void_preauth_bch20( pBCH20 bch20_ptr, pCHAR ErrorMsg)
{
	char preauth_type[8] = {0};
	char prim_preauth[8] = {0};
	char incr_preauth[8] = {0};
	
	strcpy(prim_preauth, INITIAL_PREAUTH_TRA);
	strcpy(incr_preauth, INCREMENTAL_PREAUTH_TRA);
	
	bch20_to_db( bch20_ptr );

  	if ( db_error_statics_flag == true )
   	{
      	start_time = ptetime_get_time();
   	}
  	
  	/* Make sure we can access the record before attempting to delete it.  */
   	EXEC SQL 
   		SELECT  *
      	INTO  :db_bch20
      	FROM   bch20
      	WHERE    batch_nbr 	 		= :pte_bch20.batch_nbr 			AND 
				 merchant_id 		= :pte_bch20.merchant_id 		AND 
      			 retrieval_ref_num 	= :pte_bch20.retrieval_ref_num 	AND 
      			 card_nbr 	 		= :pte_bch20.card_nbr 			AND
				 product5_code 		is null							AND
				 (product8_code		= :prim_preauth 				OR
				  product8_code		= :incr_preauth)				AND
      			 rownum 	 = 1
      	For Update NOWAIT;
   
   	if ( db_error_statics_flag == true )
   	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH20 ,Fun_Name : db_update_void_preauth_bch20_S , Duration = %f , device id: %s, MID: %s ,batch number: %s,stan: %s",DB_MsgSubtype1,DB_MsgSubtype2,duration,
			pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr,pte_bch20.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
    }
    
   	if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   	{
      /* Record is inaccessible. Return with error. */
 		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_void_preauth_bch20 ,ST1 :%d,ST2 : %d_1 , device id: %s, MID: %s ,batch number: %s,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr,pte_bch20.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;

   	}
   
    memcpy( preauth_type, db_bch20.product8_code.arr, db_bch20.product8_code.len);
    
   	if ( db_error_statics_flag == true )
   	{
   	   start_time = ptetime_get_time();
   	}
   
   	if(strncmp(preauth_type, INITIAL_PREAUTH_TRA, PREAUTH_TRA_LEN) == 0)
   	{
   	   /* Original Preauth, void all the preauths */
	   EXEC SQL UPDATE bch20
	   SET product5_code   = 'voided',
		   product2_code   = 'voided',
		   tx_key          = :pte_bch20.tx_key,
		   processing_code = :pte_bch20.processing_code,
		   sys_trace_audit_num = :pte_bch20.sys_trace_audit_num
	   WHERE	batch_nbr 	 		= :pte_bch20.batch_nbr 		AND 
				merchant_id 		= :pte_bch20.merchant_id 	AND  
				card_nbr 	 		= :pte_bch20.card_nbr		AND
				product5_code 		is null						AND
				(product8_code		= :prim_preauth OR
				 product8_code		= :incr_preauth);
   	}
   	else
   	{
   	   /* Incremental Preauth, void only the incremental preauth */
   	   EXEC SQL UPDATE bch20
   	   SET product5_code   = 'voided',
   	   	   product2_code   = 'voided',
		   tx_key          = :pte_bch20.tx_key,
		   processing_code = :pte_bch20.processing_code,
		   sys_trace_audit_num = :pte_bch20.sys_trace_audit_num
   	   WHERE	batch_nbr 	 		= :pte_bch20.batch_nbr 			AND 
   			 	merchant_id 		= :pte_bch20.merchant_id 		AND 
   				retrieval_ref_num 	= :pte_bch20.retrieval_ref_num 	AND 
   				card_nbr 	 		= :pte_bch20.card_nbr 			AND
				product5_code 		is null							AND
				product8_code	 	= :incr_preauth;
   	}
   	
    if ( db_error_statics_flag == true )
    {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH20 ,Fun_Name : db_update_void_preauth_bch20_U , Duration = %f , device id: %s, MID: %s ,batch number: %s,stan: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr,pte_bch20.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
    }
    if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_void_preauth_bch20_3 ,ST1 :%d,ST2 : %d_2, device id: %s, MID: %s ,batch number: %s,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr,pte_bch20.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

    return PTEMSG_OK;
}

/*************************************************************************************/
BYTE db_update_reversal_void_preauth_bch20( pBCH20 bch20_ptr, pCHAR ErrorMsg)
{
	char preauth_type[8] = {0};
	char prim_preauth[8] = {0};
	char incr_preauth[8] = {0};
	
	strcpy(prim_preauth, INITIAL_PREAUTH_TRA);
	strcpy(incr_preauth, INCREMENTAL_PREAUTH_TRA);
	
	bch20_to_db( bch20_ptr );

  	if ( db_error_statics_flag == true )
   	{
      	start_time = ptetime_get_time();
   	}
  	
  	/* Make sure we can access the record before attempting to delete it.  */
   	EXEC SQL 
   		SELECT  *
      	INTO  :db_bch20
      	FROM   bch20
      	WHERE    batch_nbr 	 		= :pte_bch20.batch_nbr 			AND 
				 merchant_id 		= :pte_bch20.merchant_id 		AND 
      			 retrieval_ref_num 	= :pte_bch20.retrieval_ref_num 	AND 
      			 card_nbr 	 		= :pte_bch20.card_nbr 			AND
				 device_id 	 		= :pte_bch20.device_id			AND
				 product5_code 		= 'voided'						AND
				 (product8_code		= :prim_preauth 				OR
				  product8_code		= :incr_preauth)				AND
      			 rownum 	 = 1
      	For Update NOWAIT;
   
   	if ( db_error_statics_flag == true )
   	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH20 ,Fun_Name : db_update_reversal_void_preauth_bch20_1 , Duration = %f , device id: %s, MID: %s ,batch number: %s,stan: %s",DB_MsgSubtype1,DB_MsgSubtype2,duration,
			pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr,pte_bch20.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
    }
    
   	if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   	{
      /* Record is inaccessible. Return with error. */
 		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_reversal_void_preauth_bch20_2 ,ST1 :%d,ST2 : %d_1 , device id: %s, MID: %s ,batch number: %s,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr,pte_bch20.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;

   	}
   
    memcpy( preauth_type, db_bch20.product8_code.arr, db_bch20.product8_code.len);
    
   	if ( db_error_statics_flag == true )
   	{
   	   start_time = ptetime_get_time();
   	}
   
   	if(strncmp(preauth_type, INITIAL_PREAUTH_TRA, PREAUTH_TRA_LEN) == 0)
   	{
   		/* Original preauth, revers all the voided preauths */
	    EXEC SQL UPDATE bch20
	    SET product5_code   = :pte_bch20.product5_code,
		    product2_code   = :pte_bch20.product2_code,
		    tx_key          = :pte_bch20.tx_key,
		    processing_code = :pte_bch20.processing_code
	    WHERE	batch_nbr 	 		= :pte_bch20.batch_nbr 		AND 
				merchant_id 		= :pte_bch20.merchant_id 	AND  
				card_nbr 	 		= :pte_bch20.card_nbr		AND
				device_id 	 		= :pte_bch20.device_id		AND
				product5_code 		= 'voided'					AND
				(product8_code		= :prim_preauth OR
				 product8_code		= :incr_preauth);
   	}
   	else
   	{
   		/* Incremental preauth, revers only voided incremental preauth */
   	    EXEC SQL UPDATE bch20
   	    SET product5_code   = :pte_bch20.product5_code,
   	   	    product2_code   = :pte_bch20.product2_code,
		    tx_key          = :pte_bch20.tx_key,
		    processing_code = :pte_bch20.processing_code
   	    WHERE	batch_nbr 	 		= :pte_bch20.batch_nbr 			AND 
   			 	merchant_id 		= :pte_bch20.merchant_id 		AND 
   				retrieval_ref_num 	= :pte_bch20.retrieval_ref_num 	AND 
   				card_nbr 	 		= :pte_bch20.card_nbr 			AND
				device_id 	 		= :pte_bch20.device_id			AND
				product5_code 		= 'voided'						AND
				product8_code	 	= :incr_preauth;
   	}
   	
    if ( db_error_statics_flag == true )
    {
    	end_time = ptetime_get_time();
    	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
    	{
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH20 ,Fun_Name : db_update_reversal_void_preauth_bch20_3 , Duration = %f , device id: %s, MID: %s ,batch number: %s,stan: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr,pte_bch20.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
    	}
    }
    if (SQLCODE != 0)
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_reversal_void_preauth_bch20_4 ,ST1 :%d,ST2 : %d_2, device id: %s, MID: %s ,batch number: %s,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr,pte_bch20.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

    return PTEMSG_OK;
}

BYTE db_update_bch20_original_preauth_txn( pBCH20 bch20_ptr, pCHAR ErrorMsg)
{
	char preauth_type[8] = {0};
	char preauth_flag[3] = {0};
	char preauth_new_flag[3] = {0};
	
	strcpy(preauth_type, INITIAL_PREAUTH_TRA);
	strcpy(preauth_flag, INITIAL_PREAUTH_TRA_WITHOUT_INCREMENTAL);
	strcpy(preauth_new_flag, INITIAL_PREAUTH_TRA_WITH_INCREMENTAL);
	
	bch20_to_db( bch20_ptr );

  	if ( db_error_statics_flag == true )
   	{
      	start_time = ptetime_get_time();
   	}
  	
  	/* Make sure we can access the record before attempting to delete it.  */
  	
   	EXEC SQL SELECT * INTO :db_bch20 FROM
   			(SELECT  *
      	FROM   bch20
      	WHERE    batch_nbr 	 		= :pte_bch20.batch_nbr 		AND 
				 merchant_id 		= :pte_bch20.merchant_id 	AND 
      			 card_nbr 	 		= :pte_bch20.card_nbr 		AND
				 product8_code	    = :preauth_type				AND
				       product5_quantity  = :preauth_flag				
				       ORDER BY open_date ASC) where rownum 	= 1;  
      			

   
   	if ( db_error_statics_flag == true )
   	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH20 ,Fun_Name : db_update_bch20_original_preauth_txn_S , Duration = %f , device id: %s, MID: %s ,batch number: %s,stan: %s",DB_MsgSubtype1,DB_MsgSubtype2,duration,
			pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr,pte_bch20.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
    }
    
   	if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   	{
      /* Record is inaccessible. Return with error. */
 		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_bch20_original_preauth_txn ,ST1 :%d,ST2 : %d_1 , device id: %s, MID: %s ,batch number: %s,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr,pte_bch20.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;

   	}
    
   	if ( db_error_statics_flag == true )
   	{
   	   start_time = ptetime_get_time();
   	}
   
   	/* Update original txn preauth flag from WI to PI */
	EXEC SQL UPDATE bch20
	SET 	product5_quantity   = :preauth_new_flag
  	WHERE	batch_nbr 	 		= :pte_bch20.batch_nbr 		AND 
			merchant_id 		= :pte_bch20.merchant_id 	AND 
  			card_nbr 	 		= :pte_bch20.card_nbr 		AND
			device_id 	 		= :db_bch20.device_id		AND
			product8_code    	= :preauth_type				AND
			product5_quantity  	= :preauth_flag;			
   	
    if ( db_error_statics_flag == true )
    {
    	end_time = ptetime_get_time();
    	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
    	{
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH20 ,Fun_Name : db_update_bch20_original_preauth_txn_U , Duration = %f , device id: %s, MID: %s ,batch number: %s,stan: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr,pte_bch20.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
    	}
    }
    if (SQLCODE != 0)
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_bch20_original_preauth_txn ,ST1 :%d,ST2 : %d_2, device id: %s, MID: %s ,batch number: %s,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr,pte_bch20.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

    return PTEMSG_OK;
}
#endif

BYTE db_update_bch10_CUP_Preauth_Posdata_Prodcode( pBCH10 bch10_ptr, pCHAR ErrorMsg)
{
	bch10_to_db( bch10_ptr );
	/*Put select for this */
	 EXEC SQL
      SELECT *
      INTO  :db_bch10
      FROM   BCH10
      WHERE batch_nbr 	= :pte_bch10.batch_nbr   AND
      		merchant_id = :pte_bch10.merchant_id AND 
      		device_id 	= :pte_bch10.device_id    AND
      		rownum 		= 1
            FOR Update NOWAIT;
 
  	if ( db_error_statics_flag == true )
   	{
      	start_time = ptetime_get_time();
   	}
  	
  	/* Make sure we can access the record before attempting to delete it.  */
   	EXEC SQL 
   		SELECT  *
      	INTO  :db_bch10
      	FROM   bch10
      	WHERE    batch_nbr 	 = :pte_bch10.batch_nbr 	AND 
      			 merchant_id = :pte_bch10.merchant_id 	AND 
      			 device_id 	 = :pte_bch10.device_id 		AND
      			 rownum 	 = 1
      	For Update NOWAIT;
   
   	if ( db_error_statics_flag == true )
   	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH20 ,Fun_Name : db_update_bch20_preauth_flag_by_card_num_S , Duration = %f , device id: %s, MID: %s ,batch number: %s,stan: %s",DB_MsgSubtype1,DB_MsgSubtype2,duration,
			pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr,pte_bch10.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
    }
    
   	if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   	{
      /* Record is inaccessible. Return with error. */
 		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_bch20_preauth_flag_by_card_num ,ST1 :%d,ST2 : %d_1 , device id: %s, MID: %s ,batch number: %s,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr,pte_bch10.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;

   	}
   
   	if ( db_error_statics_flag == true )
   	{
   	   start_time = ptetime_get_time();
   	}
   
   EXEC SQL UPDATE bch10
   SET product5_code = 'procsd',
   	product17_amount = :pte_bch10.product17_amount
   WHERE    batch_nbr   = :pte_bch10.batch_nbr   AND 
   			merchant_id = :pte_bch10.merchant_id AND 
   			card_nbr    = :pte_bch10.device_id;

   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH20 ,Fun_Name : db_update_bch20_preauth_flag_by_card_num_U , Duration = %f , device id: %s, MID: %s ,batch number: %s,stan: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr,pte_bch10.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_bch20_preauth_flag_by_card_num ,ST1 :%d,ST2 : %d_2, device id: %s, MID: %s ,batch number: %s,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr,pte_bch10.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/
#ifdef VISA7
BYTE db_update_merchant_integrity_param_for_cat1( pCHAR Primary_key, pCHAR ErrorMsg )
{
	BYTE cat1_enable_flag[2]="Y";
   	strncpy( pte_merchant_integrity_param.merchant_id, Primary_key, sizeof(pte_merchant_integrity_param.merchant_id) );
	strncpy( pte_merchant_integrity_param.card_nbr, Primary_key+sizeof(pte_merchant_integrity_param.merchant_id), sizeof(pte_merchant_integrity_param.card_nbr) );
	strncpy( pte_merchant_integrity_param.category_cd, Primary_key+sizeof(pte_merchant_integrity_param.merchant_id)+sizeof(pte_merchant_integrity_param.card_nbr), 
	sizeof(pte_merchant_integrity_param.category_cd) );

    if ( db_error_statics_flag == true )
    {
        start_time = ptetime_get_time();
    }
    
	EXEC SQL UPDATE merchant_integrity_param
	SET	   c1_block    		   = null,
		   c1_count            = null,
		   c1_block_start_date = null,
		   c1_block_end_date   = null,
		   last_declined_rc    = null
    WHERE  c1_block    = :cat1_enable_flag      				   AND  
      	   card_nbr    = :pte_merchant_integrity_param.card_nbr    AND  
		   category_cd = :pte_merchant_integrity_param.category_cd AND
		   (c2_block is not NULL OR
		    c3_block is not NULL OR
		    c4_block is not NULL);
			
    if ( db_error_statics_flag == true )
    {
    	end_time = ptetime_get_time();
        duration = end_time - start_time;
        if(duration >= (double)db_error_statics_value)
	    {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : merchant_integrity_param ,"
			"Fun_Name : db_update_merchant_integrity_param_for_cat1 , Duration = %f, MID: %s, card_number:%s",DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_merchant_integrity_param.merchant_id,pte_merchant_integrity_param.card_nbr);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	    }
    }  
    
    if ( SQLCODE != 0 )
    {
    	memset(er_buf,0x00,sizeof(er_buf));
	 	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_merchant_integrity_param_for_cat1 ,ST1 :%d,ST2 : %d_2 , MID: %s,card_number:%s ",DB_MsgSubtype1,DB_MsgSubtype2,pte_merchant_integrity_param.merchant_id,pte_merchant_integrity_param.card_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
	
    return PTEMSG_OK;
}

BYTE db_delete_merchant_integrity_param_for_cat1( pCHAR Primary_key, pCHAR ErrorMsg )
{
	BYTE cat1_enable_flag[2]="Y";
   	strncpy( pte_merchant_integrity_param.merchant_id, Primary_key, sizeof(pte_merchant_integrity_param.merchant_id) );
	strncpy( pte_merchant_integrity_param.card_nbr, Primary_key+sizeof(pte_merchant_integrity_param.merchant_id), sizeof(pte_merchant_integrity_param.card_nbr) );
	strncpy( pte_merchant_integrity_param.category_cd, Primary_key+sizeof(pte_merchant_integrity_param.merchant_id)+sizeof(pte_merchant_integrity_param.card_nbr), 
	sizeof(pte_merchant_integrity_param.category_cd) );

    if ( db_error_statics_flag == true )
    {
        start_time = ptetime_get_time();
    }
    
	EXEC SQL DELETE
  	FROM merchant_integrity_param
    WHERE  c1_block    = :cat1_enable_flag      				   AND  
      	   card_nbr    = :pte_merchant_integrity_param.card_nbr    AND  
		   category_cd = :pte_merchant_integrity_param.category_cd AND
			c2_block   is NULL AND
			c3_block   is NULL AND
			c4_block   is NULL;
			
    if ( db_error_statics_flag == true )
    {
    	end_time = ptetime_get_time();
        duration = end_time - start_time;
        if(duration >= (double)db_error_statics_value)
	    {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : merchant_integrity_param ,"
			"Fun_Name : db_delete_merchant_integrity_param_for_cat1 , Duration = %f, MID: %s, card_number:%s",DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_merchant_integrity_param.merchant_id,pte_merchant_integrity_param.card_nbr);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	    }
    }   
    
    if ( SQLCODE != 0 )
    {
    	memset(er_buf,0x00,sizeof(er_buf));
	 	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_delete_merchant_integrity_param_for_cat1 ,ST1 :%d,ST2 : %d_2 , MID: %s,card_number:%s ",DB_MsgSubtype1,DB_MsgSubtype2,pte_merchant_integrity_param.merchant_id,pte_merchant_integrity_param.card_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
	
    return PTEMSG_OK;
}

BYTE db_delete_merchant_integrity_param_for_cat_2_3_4( pCHAR Primary_key, pCHAR ErrorMsg )
{
   	strncpy( pte_merchant_integrity_param.merchant_id, Primary_key, sizeof(pte_merchant_integrity_param.merchant_id) );
	strncpy( pte_merchant_integrity_param.card_nbr, Primary_key+sizeof(pte_merchant_integrity_param.merchant_id), sizeof(pte_merchant_integrity_param.card_nbr) );
	strncpy( pte_merchant_integrity_param.category_cd, Primary_key+sizeof(pte_merchant_integrity_param.merchant_id)+sizeof(pte_merchant_integrity_param.card_nbr), 
	sizeof(pte_merchant_integrity_param.category_cd) );

    if ( db_error_statics_flag == true )
    {
        start_time = ptetime_get_time();
    }
    
	EXEC SQL DELETE
  	FROM merchant_integrity_param
    WHERE merchant_id = :pte_merchant_integrity_param.merchant_id AND  
      	  card_nbr    = :pte_merchant_integrity_param.card_nbr    AND  
		  category_cd = :pte_merchant_integrity_param.category_cd ;
			
    if ( db_error_statics_flag == true )
    {
        end_time = ptetime_get_time();
        duration = end_time - start_time;
        if(duration >= (double)db_error_statics_value)
	    {
    	    memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		    sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : merchant_integrity_param ,"
		    "Fun_Name : db_delete_merchant_integrity_param_for_cat_2_3_4 , Duration = %f, MID: %s, card_number:%s",DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_merchant_integrity_param.merchant_id,pte_merchant_integrity_param.card_nbr);
		    Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	    }
    }
    
    if ( SQLCODE != 0 )
    {
		memset(er_buf,0x00,sizeof(er_buf));
	 	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_delete_merchant_integrity_param_for_cat_2_3_4 ,ST1 :%d,ST2 : %d_2 , MID: %s,card_number:%s ",DB_MsgSubtype1,DB_MsgSubtype2,pte_merchant_integrity_param.merchant_id,pte_merchant_integrity_param.card_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

    return PTEMSG_OK;
}
 

 #endif
 
 #ifdef MC12_OCT2023
BYTE db_delete_merchant_integrity_param_for_mc(pCHAR Primary_key, pCHAR ErrorMsg )
{
   	strncpy( pte_merchant_integrity_param.merchant_id, Primary_key, sizeof(pte_merchant_integrity_param.merchant_id) );
	strncpy( pte_merchant_integrity_param.card_nbr, Primary_key+sizeof(pte_merchant_integrity_param.merchant_id), sizeof(pte_merchant_integrity_param.card_nbr) );
	strncpy( pte_merchant_integrity_param.category_cd, Primary_key+sizeof(pte_merchant_integrity_param.merchant_id)+sizeof(pte_merchant_integrity_param.card_nbr), 
	sizeof(pte_merchant_integrity_param.category_cd) );

    if ( db_error_statics_flag == true )
    {
        start_time = ptetime_get_time();
    }
    
	EXEC SQL DELETE
  	FROM merchant_integrity_param
    WHERE  merchant_id = :pte_merchant_integrity_param.merchant_id AND  
      	   card_nbr    = :pte_merchant_integrity_param.card_nbr    AND  
		   category_cd = :pte_merchant_integrity_param.category_cd ;

			
    if ( db_error_statics_flag == true )
    {
    	end_time = ptetime_get_time();
        duration = end_time - start_time;
        if(duration >= (double)db_error_statics_value)
	    {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : merchant_integrity_param ,"
			"Fun_Name : db_delete_merchant_integrity_param_for_cat1 , Duration = %f, MID: %s, card_number:%s",DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_merchant_integrity_param.merchant_id,pte_merchant_integrity_param.card_nbr);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	    }
    }   
    
    if ( SQLCODE != 0 )
    {
    	memset(er_buf,0x00,sizeof(er_buf));
	 	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_delete_merchant_integrity_param_for_cat1 ,ST1 :%d,ST2 : %d_2 , MID: %s,card_number:%s ",DB_MsgSubtype1,DB_MsgSubtype2,pte_merchant_integrity_param.merchant_id,pte_merchant_integrity_param.card_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
	
    return PTEMSG_OK;
}
 #endif
/******************************************************************************
 *
 *  NAME:         db_delete_ncf30
 *
 *  DESCRIPTION:  This function makes the call to the database to delete a
 *                record in NCF30 based on a key values in ncf30_ptr.
 *                The record is copied into pte_ncf30, then the record is
 *                deleted.
 *
 *  INPUTS:       ncf30_ptr - NCF30 structure
 *
 *  OUTPUTS:      ErrorMsg - Error message if database call failed.
 *
 *  RTRN VALUE:   A PTE code is returned:
 *                       PTEMSG_OK  if no errors else a code to identify
 *                       the reason for the failure.
 *
 *  AUTHOR:       Unknown
 *
 *  MODIFICATIONS:
 ******************************************************************************/
BYTE db_delete_ncf30( pNCF30 ncf30_ptr, pCHAR ErrorMsg)
{
   ncf30_to_db( ncf30_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL
      SELECT  *
      INTO  :db_ncf30
      FROM   NCF30
      WHERE  network_id        = :pte_ncf30.network_id         AND  
      		 network_type      = :pte_ncf30.network_type       AND  
      		 batch_number      = :pte_ncf30.batch_number       AND  
      		 retrieval_ref_num = :pte_ncf30.retrieval_ref_num  AND  
      		 card_nbr          = :pte_ncf30.card_nbr           AND
      		 rownum            = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : NCF30 ,Fun_Name : db_delete_ncf30_S , Duration = %f, network_id:%s ,network_type:%s,batch_number:%s,retrieval_ref_num:%s,card_nbr:%s ",DB_MsgSubtype1,DB_MsgSubtype2,duration,
			 pte_ncf30.network_id,pte_ncf30.network_type,pte_ncf30.batch_number,pte_ncf30.retrieval_ref_num,pte_ncf30.card_nbr);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
     	memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_delete_ncf30 ,ST1 :%d,ST2 : %d_1,network_id:%s ,network_type:%s,batch_number:%s,retrieval_ref_num:%s,card_nbr:%s ",DB_MsgSubtype1,DB_MsgSubtype2,
		 pte_ncf30.network_id,pte_ncf30.network_type,pte_ncf30.batch_number,pte_ncf30.retrieval_ref_num,pte_ncf30.card_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return PTEMSG_OK;

   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }

   EXEC SQL DELETE
   FROM  ncf30
            WHERE network_id        = :pte_ncf30.network_id   and 
                  network_type      = :pte_ncf30.network_type and
                  batch_number      = :pte_ncf30.batch_number and
                  retrieval_ref_num = :pte_ncf30.retrieval_ref_num and
                  card_nbr          = :pte_ncf30.card_nbr;

   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : NCF30 ,Fun_Name : db_delete_ncf30_D , Duration = %f,network_id:%s ,network_type:%s,batch_number:%s,retrieval_ref_num:%s",DB_MsgSubtype1,DB_MsgSubtype2,duration,
			pte_ncf30.network_id,pte_ncf30.network_type,pte_ncf30.batch_number,pte_ncf30.retrieval_ref_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND) )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_delete_ncf30 ,ST1 :%d,ST2 : %d_2,network_id:%s ,network_type:%s,batch_number:%s,retrieval_ref_num:%s",DB_MsgSubtype1,DB_MsgSubtype2,
		pte_ncf30.network_id,pte_ncf30.network_type,pte_ncf30.batch_number,pte_ncf30.retrieval_ref_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return PTEMSG_OK;
	}

   return PTEMSG_OK;
}


 
/*************************************************************************************/

/******************************************************************************
 *
 *  NAME:         db_delete_ncf30_DCI
 *
 *  DESCRIPTION:  This function makes the call to the database to delete a
 *                record in NCF30 based on a key values in ncf30_ptr.
 *                The record is copied into pte_ncf30, then the record is
 *                deleted.
 *
 *  INPUTS:       ncf30_ptr - NCF30 structure
 *
 *  OUTPUTS:      ErrorMsg - Error message if database call failed.
 *
 *  RTRN VALUE:   A PTE code is returned:
 *                       PTEMSG_OK  if no errors else a code to identify
 *                       the reason for the failure.
 *
 *  AUTHOR:       Unknown
 *
 *  MODIFICATIONS:
 ******************************************************************************/
BYTE db_delete_ncf30_DCI( pNCF30 ncf30_ptr, pCHAR ErrorMsg)
{
   ncf30_to_db( ncf30_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL
      SELECT  *
      INTO  :db_ncf30
      FROM   NCF30
      WHERE  network_id        = :pte_ncf30.network_id         AND  
      		 network_type      = :pte_ncf30.network_type       AND  
      		 batch_number      = :pte_ncf30.batch_number       AND  
      		 card_nbr          = :pte_ncf30.card_nbr           AND
      		 rownum            = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : NCF30 ,Fun_Name : db_delete_ncf30_DCI_S , Duration = %f,network_id:%s ,network_type:%s,batch_number:%s",DB_MsgSubtype1,DB_MsgSubtype2,duration,
		 pte_ncf30.network_id,pte_ncf30.network_type,pte_ncf30.batch_number);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
     	memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_delete_ncf30_DCI ,ST1 :%d,ST2 : %d_1,network_id:%s ,network_type:%s,batch_number:%s",DB_MsgSubtype1,DB_MsgSubtype2,
		pte_ncf30.network_id,pte_ncf30.network_type,pte_ncf30.batch_number);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return PTEMSG_OK;

   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }

   EXEC SQL DELETE
   FROM  ncf30
            WHERE network_id        = :pte_ncf30.network_id   and 
                  network_type      = :pte_ncf30.network_type and
                  batch_number      = :pte_ncf30.batch_number and
                  card_nbr          = :pte_ncf30.card_nbr;

   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : NCF30 ,Fun_Name : db_delete_ncf30_D , Duration = %f,network_id:%s ,network_type:%s,batch_number:%s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_ncf30.network_id,pte_ncf30.network_type,pte_ncf30.batch_number);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND) )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_delete_ncf30_DCI ,ST1 :%d,ST2 : %d_2,network_id:%s ,network_type:%s,batch_number:%s,",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_ncf30.network_id,pte_ncf30.network_type,pte_ncf30.batch_number);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return PTEMSG_OK;
	}

   return PTEMSG_OK;
}
/*************************************************************************************/


BYTE db_delete_active_bch10( pBCH10 bch10_ptr, pCHAR ErrorMsg)
{
   bch10_to_db( bch10_ptr );
   
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }

   EXEC SQL
      SELECT  *
      INTO  :db_bch10
      FROM   bch10
      WHERE device_id   = :pte_bch10.device_id   AND
       		merchant_id = :pte_bch10.merchant_id AND
        	batch_nbr   = :pte_bch10.batch_nbr   AND
      		rownum      = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH10 ,Fun_Name : db_delete_active_bch10_S , Duration = %f, device id: %s, MID: %s ,batch number: %s,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr,pte_bch10.sys_trace_audit_num);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
  		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_delete_active_bch10 ,ST1 :%d,ST2 : %d_1, device id: %s, MID: %s ,batch number: %s,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr,pte_bch10.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   
   EXEC SQL DELETE FROM bch10
   WHERE device_id   = :pte_bch10.device_id   AND 
   		 merchant_id = :pte_bch10.merchant_id AND 
   		 batch_nbr   = :pte_bch10.batch_nbr;
         
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH10 ,Fun_Name : db_delete_active_bch10_D , Duration = %f, device id: %s, MID: %s ,batch number: %s,stan: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr,pte_bch10.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_delete_active_bch10 ,ST1 :%d,ST2 : %d_2, device id: %s, MID: %s ,batch number: %s,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr,pte_bch10.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_bch20_by_auth_nbr( pTLF01 tlf01_ptr, pCHAR ErrorMsg)
{
   tlf01_to_db( tlf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch20
      FROM   BCH20
      WHERE  auth_number = :pte_tlf01.orig_auth_number  AND  
      		 batch_nbr   = 'ACTIVE'                     AND  
      		 tran_amount = :pte_tlf01.reversal_amount   AND  
      		 card_nbr    = :pte_tlf01.card_num          AND
      		 rownum      = 1
      For Update NOWAIT;

   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH20 ,"
			"Fun_Name : db_delete_bch20_by_auth_nbr_S , Duration = %f,auth_number: %s"
			,DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_tlf01.orig_auth_number);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
     	memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_delete_bch20_by_auth_nbr ,ST1 :%d,ST2 : %d_1, auth_number: %s"
		,DB_MsgSubtype1,DB_MsgSubtype2,pte_tlf01.orig_auth_number);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM bch20
   WHERE 
			auth_number = :pte_tlf01.orig_auth_number AND 
			batch_nbr   = 'ACTIVE' 					  AND
			tran_amount = :pte_tlf01.reversal_amount  AND
			card_nbr    = :pte_tlf01.card_num         AND
			rownum      =        1;
         
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,
				"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH20 ,Fun_Name : db_delete_bch20_by_auth_nbr_D,"
				" Duration = %f, auth_number: %s",DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_tlf01.orig_auth_number);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_delete_bch20_by_auth_nbr ,ST1 :%d,ST2 : %d_2, auth_number: %s",DB_MsgSubtype1,DB_MsgSubtype2,
		pte_tlf01.orig_auth_number);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_bch10( pBCH10 bch10_ptr, pCHAR ErrorMsg)
{
   bch10_to_db( bch10_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   /* Make sure we can access the record before attempting to delete it.  */
   EXEC SQL
      SELECT  *
      INTO  :db_bch10
      FROM   BCH10
      WHERE device_id   = :pte_bch10.device_id   AND
      		merchant_id = :pte_bch10.merchant_id AND
      		batch_nbr   = :pte_bch10.batch_nbr   AND
      		open_date   = :pte_bch10.open_date   AND
      		open_time   = :pte_bch10.open_time   AND
      		rownum      = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH10 ,Fun_Name : db_delete_bch10_S , Duration = %f, device id: %s, MID: %s ,batch number: %s,",
		DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
    	memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_delete_bch10 ,ST1 :%d,ST2 : %d_1, device id: %s, MID: %s ,batch number: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM bch10
   WHERE device_id   = :pte_bch10.device_id   AND
    	 merchant_id = :pte_bch10.merchant_id AND
     	 batch_nbr   = :pte_bch10.batch_nbr   AND
      	 open_date   = :pte_bch10.open_date   AND
         open_time   = :pte_bch10.open_time;

   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH10 ,Fun_Name : db_delete_bch10_D , Duration = %f, device id: %s, MID: %s ,batch number: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_delete_bch10 ,ST1 :%d,ST2 : %d_2, device id: %s, MID: %s ,batch number: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_bch10_by_stan( pBCH10 bch10_ptr, pCHAR ErrorMsg)
{
   bch10_to_db( bch10_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch10
      FROM   BCH10
      WHERE  device_id           = :pte_bch10.device_id           AND  
      		 batch_nbr           = :pte_bch10.batch_nbr           AND  
      		 merchant_id         = :pte_bch10.merchant_id         AND  
      		 sys_trace_audit_num = :pte_bch10.sys_trace_audit_num AND
      		 rownum              = 1
      For Update NOWAIT;

   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH10 ,Fun_Name : db_delete_bch10_by_stan_S , Duration = %f, device id: %s, MID: %s ,batch number: %s,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr,pte_bch10.sys_trace_audit_num);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }   
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_delete_bch10_by_stan ,ST1 :%d,ST2 : %d_1, device id: %s, MID: %s ,batch number: %s,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr,pte_bch10.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;

   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM bch10
   WHERE device_id           = :pte_bch10.device_id    AND 
   		 batch_nbr           = :pte_bch10.batch_nbr    AND 
   		 merchant_id         = :pte_bch10.merchant_id  AND 
   		 sys_trace_audit_num = :pte_bch10.sys_trace_audit_num;

   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH10 ,Fun_Name : db_delete_bch10_by_stan_D , Duration = %f, device id: %s, MID: %s ,batch number: %s,stan: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr,pte_bch10.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   } 
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_delete_bch10_by_stan ,ST1 :%d,ST2 : %d_2, device id: %s, MID: %s ,batch number: %s,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr,pte_bch10.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/
BYTE db_delete_bch10_for_CUP( pBCH10 bch10_ptr, pCHAR ErrorMsg)
{
   bch10_to_db( bch10_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
    }
     /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch10
      FROM   BCH10
      WHERE  device_id           = :pte_bch10.device_id     AND  
      		 batch_nbr           = :pte_bch10.batch_nbr     AND  
      		 merchant_id         = :pte_bch10.merchant_id   AND  
      		 card_nbr 			 = :pte_bch10.card_nbr      AND  
      		 tran_amount		 = :pte_bch10.tran_amount   AND  
      		 invoice_nbr         = :pte_bch10.invoice_nbr   AND
      		 rownum              = 1
      For Update NOWAIT;

   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH10 ,Fun_Name : db_delete_bch10_for_CUP_S , Duration = %f, device id: %s, MID: %s ,batch number: %s,invoice_nbr: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr,pte_bch10.invoice_nbr);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_delete_bch10_for_CUP ,ST1 :%d,ST2 : %d, device id: %s, MID: %s ,batch number: %s,invoice_nbr: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr,pte_bch10.invoice_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }

   EXEC SQL DELETE FROM bch10
   WHERE device_id       = :pte_bch10.device_id        AND  
   		 batch_nbr       = :pte_bch10.batch_nbr        AND  
   		 merchant_id     = :pte_bch10.merchant_id      AND  
   		 card_nbr 		 = :pte_bch10.card_nbr         AND  
   		 tran_amount	 = :pte_bch10.tran_amount      AND  
   		 invoice_nbr     = :pte_bch10.invoice_nbr      AND
         rownum              = 1;
      
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH10 ,Fun_Name : db_delete_bch10_for_CUP_D , Duration = %f, device id: %s, MID: %s ,batch number: %s,invoice_nbr: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr,pte_bch10.invoice_nbr);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }     
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_delete_bch10_for_CUP ,ST1 :%d,ST2 : %d, device id: %s, MID: %s ,batch number: %s,invoice_nbr: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.batch_nbr,pte_bch10.invoice_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}
/*************************************************************************************/
/*************************************************************************************/

BYTE db_delete_bch20_by_stan( pBCH20 bch20_ptr, pCHAR ErrorMsg)
{
   bch20_to_db( bch20_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch20
      FROM   BCH20
      WHERE  device_id           = :pte_bch20.device_id           AND  
      		 batch_nbr           = :pte_bch20.batch_nbr           AND  
      		 merchant_id         = :pte_bch20.merchant_id         AND  
      		 sys_trace_audit_num = :pte_bch20.sys_trace_audit_num AND
      		 rownum              = 1
      For Update NOWAIT;

   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH20 ,Fun_Name : db_delete_bch20_by_stan_S , Duration = %f, device id: %s, MID: %s ,batch number: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_delete_bch10_for_CUP ,ST1 :%d,ST2 : %d_1, device id: %s, MID: %s ,batch number: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM bch20
   WHERE device_id			 = :pte_bch20.device_id     AND 
   		 batch_nbr			 = :pte_bch20.batch_nbr     AND 
   		 merchant_id 		 = :pte_bch20.merchant_id 	AND 
   		 sys_trace_audit_num = :pte_bch20.sys_trace_audit_num;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH20 ,Fun_Name : db_delete_bch20_by_stan_D , Duration = %f, device id: %s, MID: %s ,batch number: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_delete_bch10_for_CUP ,ST1 :%d,ST2 : %d_2, device id: %s, MID: %s ,batch number: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}

/*******************************************************************************/
BYTE db_delete_bch20_for_CUP( pBCH20 bch20_ptr, pCHAR ErrorMsg)
{

    bch20_to_db( bch20_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch20
      FROM   BCH20
      WHERE  device_id           = :pte_bch20.device_id     AND  
      		 batch_nbr           = :pte_bch20.batch_nbr     AND 
      		 merchant_id         = :pte_bch20.merchant_id   AND  
      		 card_nbr 			 = :pte_bch20.card_nbr      AND  
      		 tran_amount		 = :pte_bch20.tran_amount   AND  
      		 invoice_nbr         = :pte_bch20.invoice_nbr   AND
      		 rownum              = 1
        For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH20 ,Fun_Name : db_delete_bch20_for_CUP_S , Duration = %f, device id: %s, MID: %s ,batch number: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_delete_bch20_for_CUP ,ST1 :%d,ST2 : %d_1, device id: %s, MID: %s ,batch number: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }

   EXEC SQL DELETE FROM bch20
   	    WHERE device_id           = :pte_bch20.device_id    AND   
   	    	  batch_nbr           = :pte_bch20.batch_nbr    AND   
   	    	  merchant_id         = :pte_bch20.merchant_id  AND   
   	    	  card_nbr 			  = :pte_bch20.card_nbr     AND
   	    	  tran_amount		  = :pte_bch20.tran_amount  AND  
   	    	  invoice_nbr         = :pte_bch20.invoice_nbr;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH20 ,Fun_Name : db_delete_bch20_for_CUP_D , Duration = %f, device id: %s, MID: %s ,batch number: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_delete_bch20_for_CUP ,ST1 :%d,ST2 : %d_2, device id: %s, MID: %s ,batch number: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.batch_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/**************************************************************************/


/**/
INT isnum(pCHAR string)
{
   INT i;
   INT length;

   length = (INT)strlen(string);
   for (i = 0; i < length; i++)
   {
      if (!isdigit(string[i]))
        return(false);
   }
   return(true);
}
INT validate_date_yyyymmdd( pBYTE date_str)
{
   INT  ret_val = false;
   INT  imonth, iday, iyear;
   CHAR temp_month[3]="";
   CHAR temp_day[3]  ="";
   CHAR temp_year[5] ="";

   /* Validate date is numeric. */
   if ( (true == isnum(date_str)) && (8 == strlen(date_str)) )
   {
      /* Validate month */
      memcpy( temp_month, date_str+4, 2 );
      imonth = atoi(temp_month);
      if ( (1 <= imonth) && (imonth <= 12) )
      {
         /* Month is valid; check the day. */
         memcpy( temp_day, date_str+6, 2 );
         iday = atoi(temp_day);
         if ( (1 <= iday) && (iday <= 31) )
         {
            if ( iday == 31 )
            {
               if ( (imonth == 1) || (imonth == 3) || (imonth == 5) ||
                    (imonth == 7) || (imonth == 8) || (imonth == 10)||
                    (imonth == 12) )
               {
                  ret_val = true;
               }
            }
            else if ( (iday == 30) && (imonth != 2) )
            {
               ret_val = true;
            }
            else if ( (iday == 29) && (imonth == 2) )
            {
               /* This must be a leap year to be valid. */
               memcpy( temp_year, date_str, 4 );
               iyear = atoi(temp_year);
               if ( (iyear%4) == 0 )
                  ret_val = true;
               //else
               //   sprintf( err_buf, "Too many days for February (%s)",date_str);
            }
            else
               ret_val = true;

            /* Validate the year. */
            memcpy( temp_year, date_str, 4 );
            iyear = atoi(temp_year);
            if ( (iyear < 2000) || (iyear > 2200) )
            {
               ret_val = false;
              // sprintf( err_buf, "ERROR: Invalid date (%s). Bad Year",date_str);
            }
         }
         else
         {
            //sprintf( err_buf, "ERROR: Invalid date (%s). Bad Day.", date_str );
         }
      }
      else
      {
         //sprintf( err_buf, "ERROR: Invalid date (%s). Bad Month.", date_str );
      }
   }
   else
   {
     // sprintf( err_buf, "ERROR: Invalid date (%s).", date_str );
   }
   if ( true != ret_val )
      //strcat(  err_buf, " Must be in format YYYYMMDD." );

   return( ret_val );
}

/*************************************************************************************/
/*************************************************************************************/
#if ( defined VISA7 || defined MC12_OCT2023 || defined MC13_OCT2023)
BYTE db_insert_merchant_integrity_param( pMERCHANT_INTEGRITY_PARAM merchant_integrity_param_ptr, pCHAR ErrorMsg, INT rc_category)
{
    merchant_integrity_param_to_db( merchant_integrity_param_ptr );
   
    if ( db_error_statics_flag == true )
    {
        start_time = ptetime_get_time();
    }

	EXEC SQL INSERT INTO merchant_integrity_param
	(  
	merchant_id,
	card_nbr,
	category_cd,
	c1_block,
	c2_block,
	c3_block,
	c4_block,
	c1_count,
	c1_block_start_date,
	c1_block_end_date,
	c2_count,
	c2_block_start_date,
	c2_block_end_date,
	c3_count,
	c3_block_start_date,
	c3_block_end_date,
	c4_count,
	c4_block_start_date,
	c4_block_end_date,
	block_reset_date,
	last_declined_rc,
	reattempts_date,
    first_reattempt_date	
	)
	
	VALUES
	
	(
	:pte_merchant_integrity_param.merchant_id,
	:pte_merchant_integrity_param.card_nbr,
	:pte_merchant_integrity_param.category_cd,
	:pte_merchant_integrity_param.c1_block,
	:pte_merchant_integrity_param.c2_block,
	:pte_merchant_integrity_param.c3_block,
	:pte_merchant_integrity_param.c4_block,
	:pte_merchant_integrity_param.c1_count,
	:pte_merchant_integrity_param.c1_block_start_date,
	:pte_merchant_integrity_param.c1_block_end_date,
	:pte_merchant_integrity_param.c2_count,
	:pte_merchant_integrity_param.c2_block_start_date,
	:pte_merchant_integrity_param.c2_block_end_date,
	:pte_merchant_integrity_param.c3_count,
	:pte_merchant_integrity_param.c3_block_start_date,
	:pte_merchant_integrity_param.c3_block_end_date,
	:pte_merchant_integrity_param.c4_count,
	:pte_merchant_integrity_param.c4_block_start_date,
	:pte_merchant_integrity_param.c4_block_end_date,
	:pte_merchant_integrity_param.block_reset_date,
	:pte_merchant_integrity_param.last_declined_rc,
	:pte_merchant_integrity_param.reattempts_date,
	:pte_merchant_integrity_param.first_reattempt_date
	);
   
    
    /* pass the category code and insert with default merchnat*/
    if ( db_error_statics_flag == true )
    {
        end_time = ptetime_get_time();
        duration = end_time - start_time;
        if(duration >= (double)db_error_statics_value)
	    {
        	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : merchant_integrity_param ,Fun_Name : db_insert_merchant_integrity_param , Duration = %f,MID: %s,card: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_merchant_integrity_param.merchant_id,pte_merchant_integrity_param.card_nbr);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	    }
    }
    if ( SQLCODE != 0 )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_insert_merchant_integrity_param ,ST1 :%d,ST2 : %d,MID: %s,Card number: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_merchant_integrity_param.merchant_id,pte_merchant_integrity_param.card_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
    
    return PTEMSG_OK;
}
#endif
/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_tlf01( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
   char date[9] = {0};
   char yyyymmdd[25] = {0};
   char hostname[256] = {0}; 
   INT  hostname_len = 0;
   INT  move_len = 0;
   EXEC SQL END DECLARE SECTION;
   
   tlf01_to_db( tlf01_ptr );
   if (strlen(pte_tlf01.date_yyyymmdd) < 8 || (validate_date_yyyymmdd(pte_tlf01.date_yyyymmdd) == false) )
   {
      PRINT("Entered datecheck loop\n");
      memset( date,   0x00, sizeof(date)   );
      memset( yyyymmdd, 0x00, sizeof(yyyymmdd) );
      format_date(yyyymmdd);
      strncpy(pte_tlf01.date_yyyymmdd, yyyymmdd, sizeof(pte_tlf01.date_yyyymmdd)-1);
   }
   gethostname(hostname, sizeof(hostname));
   hostname_len = strlen(hostname);
   if (hostname_len > 12)
   {
   		move_len= hostname_len - 12;
   		memcpy(pte_tlf01.redemption_amount,hostname + move_len,12);
   }
   else
   { 
   		memcpy(pte_tlf01.redemption_amount,hostname,hostname_len);
   }
   
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }

   EXEC SQL INSERT INTO tlf01
     (   transaction_id,
         entry_type,
         tpdu_id,
         issuer_id,
         acquirer_id,
         tx_key,
         terminal_id,
         terminal_type,
         response_text,
         card_num_len,
         card_num,
         exp_date,
         total_amount,
         add_amounts,
         invoice_number,
         orig_amount,
         auth_number,
         processing_code,
         sys_trace_audit_num,
         orig_sys_trace_num,
         pos_entry_mode,
         nii,
         pos_condition_code,
         track1,
         track2,
         retrieval_ref_num,
         orig_retrieval_ref_num,
         merchant_id,
         orig_message,
         settlement_total,
         message_type,
         card_holder_name,
         general_status,
         originator_queue,
         originator_info,
         batch_number,
         response_code,
         date_yyyymmdd,
         time_hhmmss,
         num_sales,
         sales_amount,
         num_refunds,
         refund_amount,
         num_dbsales,
         dbsales_amount,
         num_dbrefunds,
         dbrefund_amount,
         pin_block,
         tax_amount,
         tip_amount,
         tran_start_time,
         host_start_time,
         host_finish_time,
         tran_finish_time,
         settle_file_prefix,
         resp_source_len,
         visa_char_indicator,
         visa_tran_id,
         visa_validation_code,
         mcard_banknet_len,
         mcard_banknet,
         agent_id_len,
         agent_id,
         cvc,
         settlement_date,
         category_code,
         conversion_rate,
         product_code,
         odometer,
         organization_id,
         dynamic_keychange,
	      txn_cnt,
         source_key,                         
         dcf01_retired_cwk,                  
         dest_key,                          
         ncf01_retired_cwk,                                                 
	      handler_queue,        		          
	      authorizing_host_queue,		   	    
         max_net_consec_tmouts,              
         max_active_txns,                    
         remote_nsp_type,
         kek,  
         credit_limit,
         forwarding_institution_id,          
         acquiring_id,                                             
         outstanding_balance,
         nfi_name,                           
         nfi_seq_nbr,                     
         nfi_start_date,            
         nfi_end_date,          
         resp_source,
         origin,
         auth_1,
         auth_2,                      
         update_mask,
         type_of_data,   
         down_payment,         
         period,                 
         interest_rate,               
         total_interest,               
         redemption_amount,             
         vehicle_number,
         profile,nbr_of_prod_codes , product1_code ,product1_quantity,
        product1_amount, product2_code, product2_quantity, product2_amount, product3_code, product3_quantity,
        product3_amount, product4_code, product4_quantity, product4_amount, product5_code, product5_quantity,
        product5_amount, product6_code, product6_quantity, product6_amount, product7_code, product7_quantity,
        product7_amount, product8_code, product8_quantity, product8_amount, product9_code, product9_quantity,
        product9_amount, product10_code, product10_quantity, product10_amount, product11_code, product11_quantity,
        product11_amount, product12_code, product12_quantity, product12_amount, product13_code, product13_quantity,
        product13_amount, product14_code, product14_quantity, product14_amount, product15_code, product15_quantity,          
        product15_amount, product16_code, product16_quantity, product16_amount, product17_code, product17_quantity,
        product17_amount, product18_code, product18_quantity, product18_amount, product19_code, product19_quantity,
        product19_amount, product20_code, product20_quantity, product20_amount,visa_merchant_id, 
		cash_bonus, deferred_factor, deferred_term_length, currency_code,transmission_timestamp, tran_fee_amount, cvc_data,
		verify_mag_stripe, saf, security_response_code, service_code, source_pin_format, dest_pin_format, voice_auth,
		actual_amount, reversal_amount, voice_auth_text, operator_id, workstation, orig_auth_number,
        ticket_nbr, system_date, def_gross_amt, monthly_amort_amt
     )               
   VALUES(  :pte_tlf01.transaction_id,
         :pte_tlf01.entry_type,
         :pte_tlf01.tpdu_id,
         :pte_tlf01.issuer_id,
         :pte_tlf01.acquirer_id,
         :pte_tlf01.tx_key,
         :pte_tlf01.terminal_id,
         :pte_tlf01.terminal_type,
         :pte_tlf01.response_text,
         :pte_tlf01.card_num_len,
         :pte_tlf01.card_num,
         :pte_tlf01.exp_date,
         :pte_tlf01.total_amount,
         :pte_tlf01.add_amounts,
         :pte_tlf01.invoice_number,
         :pte_tlf01.orig_amount,
         :pte_tlf01.auth_number,
         :pte_tlf01.processing_code,
         :pte_tlf01.sys_trace_audit_num,
         :pte_tlf01.orig_sys_trace_num,
         :pte_tlf01.pos_entry_mode,
         :pte_tlf01.nii,
         :pte_tlf01.pos_condition_code,
         :pte_tlf01.track1,
         :pte_tlf01.track2,
         :pte_tlf01.retrieval_ref_num,
         :pte_tlf01.orig_retrieval_ref_num,
         :pte_tlf01.merchant_id,
         :pte_tlf01.orig_message,
         :pte_tlf01.settlement_total,
         :pte_tlf01.message_type,
         :pte_tlf01.card_holder_name,
         :pte_tlf01.general_status,
         :pte_tlf01.originator_queue,
         :pte_tlf01.originator_info,
         :pte_tlf01.batch_number,
         :pte_tlf01.response_code,
         :pte_tlf01.date_yyyymmdd,
         :pte_tlf01.time_hhmmss,
         :pte_tlf01.num_sales,
         :pte_tlf01.sales_amount,
         :pte_tlf01.num_refunds,
         :pte_tlf01.refund_amount,
         :pte_tlf01.num_dbsales,
         :pte_tlf01.dbsales_amount,
         :pte_tlf01.num_dbrefunds,
         :pte_tlf01.dbrefund_amount,
         :pte_tlf01.pin_block,
         :pte_tlf01.tax_amount,
         :pte_tlf01.tip_amount,
         :pte_tlf01.tran_start_time,
         :pte_tlf01.host_start_time,
         :pte_tlf01.host_finish_time,
         :pte_tlf01.tran_finish_time,
         :pte_tlf01.settle_file_prefix,
         :pte_tlf01.resp_source_len,
         :pte_tlf01.visa_char_indicator,
         :pte_tlf01.visa_tran_id,
         :pte_tlf01.visa_validation_code,
         :pte_tlf01.mcard_banknet_len,
         :pte_tlf01.mcard_banknet,
         :pte_tlf01.agent_id_len,
         :pte_tlf01.agent_id,
         :pte_tlf01.cvc,
         :pte_tlf01.settlement_date,
         :pte_tlf01.category_code,
         :pte_tlf01.conversion_rate,
         :pte_tlf01.product_code,
         :pte_tlf01.odometer,
         :pte_tlf01.organization_id,
         :pte_tlf01.dynamic_keychange,
         :pte_tlf01.txn_cnt,               
	      :pte_tlf01.source_key,                         
         :pte_tlf01.dcf01_retired_cwk,                  
         :pte_tlf01.dest_key,                          
         :pte_tlf01.ncf01_retired_cwk,                                                 
	      :pte_tlf01.handler_queue,        		          
	      :pte_tlf01.authorizing_host_queue,		   	    
         :pte_tlf01.max_net_consec_tmouts,              
         :pte_tlf01.max_active_txns,                    
         :pte_tlf01.remote_nsp_type,
         :pte_tlf01.kek,
         :pte_tlf01.credit_limit,
         :pte_tlf01.forwarding_institution_id,          
         :pte_tlf01.acquiring_id,                                             
         :pte_tlf01.outstanding_balance,
         :pte_tlf01.nfi_name,                           
         :pte_tlf01.nfi_seq_nbr,                     
         :pte_tlf01.nfi_start_date,            
         :pte_tlf01.nfi_end_date,           
         :pte_tlf01.resp_source,
         :pte_tlf01.origin,
         :pte_tlf01.auth_1,
         :pte_tlf01.auth_2,                      
         :pte_tlf01.update_mask,
         :pte_tlf01.type_of_data,   
         :pte_tlf01.down_payment,         
         :pte_tlf01.period,                 
         :pte_tlf01.interest_rate,               
         :pte_tlf01.total_interest,                                  
         :pte_tlf01.redemption_amount,             
         :pte_tlf01.vehicle_number,
         :pte_tlf01.profile, :pte_tlf01.nbr_of_prod_codes,          
         :pte_tlf01.product1_code, :pte_tlf01.product1_quantity, :pte_tlf01.product1_amount, :pte_tlf01.product2_code,             
         :pte_tlf01.product2_quantity, :pte_tlf01.product2_amount, :pte_tlf01.product3_code, :pte_tlf01.product3_quantity,            
         :pte_tlf01.product3_amount, :pte_tlf01.product4_code, :pte_tlf01.product4_quantity, :pte_tlf01.product4_amount,                  
         :pte_tlf01.product5_code, :pte_tlf01.product5_quantity, :pte_tlf01.product5_amount, :pte_tlf01.product6_code,             
         :pte_tlf01.product6_quantity, :pte_tlf01.product6_amount, :pte_tlf01.product7_code, :pte_tlf01.product7_quantity,          
         :pte_tlf01.product7_amount, :pte_tlf01.product8_code, :pte_tlf01.product8_quantity, :pte_tlf01.product8_amount,
         :pte_tlf01.product9_code, :pte_tlf01.product9_quantity, :pte_tlf01.product9_amount, :pte_tlf01.product10_code,
         :pte_tlf01.product10_quantity, :pte_tlf01.product10_amount, :pte_tlf01.product11_code, :pte_tlf01.product11_quantity, 
         :pte_tlf01.product11_amount, :pte_tlf01.product12_code, :pte_tlf01.product12_quantity, :pte_tlf01.product12_amount,
         :pte_tlf01.product13_code, :pte_tlf01. product13_quantity, :pte_tlf01.product13_amount,:pte_tlf01.product14_code, 
         :pte_tlf01.product14_quantity, :pte_tlf01.product14_amount, :pte_tlf01.product15_code, :pte_tlf01.product15_quantity,
         :pte_tlf01.product15_amount, :pte_tlf01.product16_code, :pte_tlf01.product16_quantity, :pte_tlf01.product16_amount,    
         :pte_tlf01.product17_code, :pte_tlf01.product17_quantity, :pte_tlf01.product17_amount, :pte_tlf01.product18_code,
         :pte_tlf01.product18_quantity, :pte_tlf01.product18_amount, :pte_tlf01.product19_code, :pte_tlf01.product19_quantity,
         :pte_tlf01.product19_amount, :pte_tlf01.product20_code, :pte_tlf01.product20_quantity, :pte_tlf01.product20_amount,
         :pte_tlf01.visa_merchant_id,
		 :pte_tlf01.cash_bonus,
		 :pte_tlf01.deferred_factor,
		 :pte_tlf01.deferred_term_length,
		 :pte_tlf01.currency_code,
		 :pte_tlf01.transmission_timestamp,
		 :pte_tlf01.tran_fee_amount,
		 :pte_tlf01.cvc_data,
		 :pte_tlf01.verify_mag_stripe,
		 :pte_tlf01.saf,
		 :pte_tlf01.security_response_code,
		 :pte_tlf01.service_code,
		 :pte_tlf01.source_pin_format,
		 :pte_tlf01.dest_pin_format,
		 :pte_tlf01.voice_auth,
         :pte_tlf01.actual_amount,
		 :pte_tlf01.reversal_amount, 
		 :pte_tlf01.voice_auth_text,
		 :pte_tlf01.operator_id,
		 :pte_tlf01.workstation,
		 :pte_tlf01.orig_auth_number,
		 :pte_tlf01.ticket_nbr,
         :pte_tlf01.system_date,
       :pte_tlf01.def_gross_amt,
       :pte_tlf01.monthly_amort_amt
      );


   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration > db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d ,Data_Type : TLF01 ,Fun_Name : db_insert_tlf01,Duration = %f, device id: %s, MID: %s ,stan: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration, pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }

 
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_insert_tlf01 ,ST1 :%d,ST2 : %d TID: %s,MID: %s,STAN: %s,RRN: %sS",
		DB_MsgSubtype1,DB_MsgSubtype2,tlf01_ptr->terminal_id,tlf01_ptr->merchant_id,tlf01_ptr->sys_trace_audit_num,tlf01_ptr->retrieval_ref_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

   return PTEMSG_OK;
}
/*************************************************************************************/
/* ThoughtFocus Girija Y */
/*************************************************************************************/
BYTE db_insert_tlf01_stip( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
   char date[9] = {0};
   char yyyymmdd[25] = {0};
   char hostname[256] = {0}; 
   INT  hostname_len = 0;
   INT  move_len = 0;
   EXEC SQL END DECLARE SECTION;
   
   tlf01_stip_to_db( tlf01_ptr );
   if (strlen(pte_tlf01_stip.date_yyyymmdd) < 8 || (validate_date_yyyymmdd(pte_tlf01_stip.date_yyyymmdd) == false) )
   {
      PRINT("Entered datecheck loop\n");
      memset( date,   0x00, sizeof(date)   );
      memset( yyyymmdd, 0x00, sizeof(yyyymmdd) );
      format_date(yyyymmdd);
      strncpy(pte_tlf01_stip.date_yyyymmdd, yyyymmdd, sizeof(pte_tlf01_stip.date_yyyymmdd)-1);
   }
   
   if((0 == strncmp(pte_tlf01_stip.handler_queue, "dcp", 3)) &&
      (0 == strncmp(pte_tlf01_stip.message_type, "0220", 4)))
   {
   		strncpy(pte_tlf01_stip.product2_code, "procsd", 6);
   }
   
   gethostname(hostname, sizeof(hostname));
   hostname_len = strlen(hostname);
   if (hostname_len > 12)
   {
   		move_len= hostname_len - 12;
   		memcpy(pte_tlf01_stip.redemption_amount,hostname + move_len,12);
   }
   else
   { 
   		memcpy(pte_tlf01_stip.redemption_amount,hostname,hostname_len);
   }
   
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL INSERT INTO tlf01_stip
     (   transaction_id,
         entry_type,
         tpdu_id,
         issuer_id,
         acquirer_id,
         tx_key,
         terminal_id,
         terminal_type,
         response_text,
         card_num_len,
         card_num,
         exp_date,
         total_amount,
         add_amounts,
         invoice_number,
         orig_amount,
         auth_number,
         processing_code,
         sys_trace_audit_num,
         orig_sys_trace_num,
         pos_entry_mode,
         nii,
         pos_condition_code,
         track1,
         track2,
         retrieval_ref_num,
         orig_retrieval_ref_num,
         merchant_id,
         orig_message,
         settlement_total,
         message_type,
         card_holder_name,
         general_status,
         originator_queue,
         originator_info,
         batch_number,
         response_code,
         date_yyyymmdd,
         time_hhmmss,
         num_sales,
         sales_amount,
         num_refunds,
         refund_amount,
         num_dbsales,
         dbsales_amount,
         num_dbrefunds,
         dbrefund_amount,
         pin_block,
         tax_amount,
         tip_amount,
         tran_start_time,
         host_start_time,
         host_finish_time,
         tran_finish_time,
         settle_file_prefix,
         resp_source_len,
         visa_char_indicator,
         visa_tran_id,
         visa_validation_code,
         mcard_banknet_len,
         mcard_banknet,
         agent_id_len,
         agent_id,
         cvc,
         settlement_date,
         category_code,
         conversion_rate,
         product_code,
         odometer,
         organization_id,
         dynamic_keychange,
	      txn_cnt,
         source_key,                         
         dcf01_retired_cwk,                  
         dest_key,                          
         ncf01_retired_cwk,                                                 
	      handler_queue,        		          
	      authorizing_host_queue,		   	    
         max_net_consec_tmouts,              
         max_active_txns,                    
         remote_nsp_type,
         kek,  
         credit_limit,
         forwarding_institution_id,          
         acquiring_id,                                             
         outstanding_balance,
         nfi_name,                           
         nfi_seq_nbr,                     
         nfi_start_date,            
         nfi_end_date,          
         resp_source,
         origin,
         auth_1,
         auth_2,                      
         update_mask,
         type_of_data,   
         down_payment,         
         period,                 
         interest_rate,               
         total_interest,               
         redemption_amount,             
         vehicle_number,
         profile,nbr_of_prod_codes , product1_code ,product1_quantity,
        product1_amount, product2_code, product2_quantity, product2_amount, product3_code, product3_quantity,
        product3_amount, product4_code, product4_quantity, product4_amount, product5_code, product5_quantity,
        product5_amount, product6_code, product6_quantity, product6_amount, product7_code, product7_quantity,
        product7_amount, product8_code, product8_quantity, product8_amount, product9_code, product9_quantity,
        product9_amount, product10_code, product10_quantity, product10_amount, product11_code, product11_quantity,
        product11_amount, product12_code, product12_quantity, product12_amount, product13_code, product13_quantity,
        product13_amount, product14_code, product14_quantity, product14_amount, product15_code, product15_quantity,          
        product15_amount, product16_code, product16_quantity, product16_amount, product17_code, product17_quantity,
        product17_amount, product18_code, product18_quantity, product18_amount, product19_code, product19_quantity,
        product19_amount, product20_code, product20_quantity, product20_amount,visa_merchant_id, 
		cash_bonus, deferred_factor, deferred_term_length, currency_code,transmission_timestamp, tran_fee_amount, cvc_data,
		verify_mag_stripe, saf, security_response_code, service_code, source_pin_format, dest_pin_format, voice_auth,
		actual_amount, reversal_amount, voice_auth_text, operator_id, workstation, orig_auth_number,
        ticket_nbr, system_date, def_gross_amt, monthly_amort_amt
     )               
   VALUES(  :pte_tlf01_stip.transaction_id,
         :pte_tlf01_stip.entry_type,
         :pte_tlf01_stip.tpdu_id,
         :pte_tlf01_stip.issuer_id,
         :pte_tlf01_stip.acquirer_id,
         :pte_tlf01_stip.tx_key,
         :pte_tlf01_stip.terminal_id,
         :pte_tlf01_stip.terminal_type,
         :pte_tlf01_stip.response_text,
         :pte_tlf01_stip.card_num_len,
         :pte_tlf01_stip.card_num,
         :pte_tlf01_stip.exp_date,
         :pte_tlf01_stip.total_amount,
         :pte_tlf01_stip.add_amounts,
         :pte_tlf01_stip.invoice_number,
         :pte_tlf01_stip.orig_amount,
         :pte_tlf01_stip.auth_number,
         :pte_tlf01_stip.processing_code,
         :pte_tlf01_stip.sys_trace_audit_num,
         :pte_tlf01_stip.orig_sys_trace_num,
         :pte_tlf01_stip.pos_entry_mode,
         :pte_tlf01_stip.nii,
         :pte_tlf01_stip.pos_condition_code,
         :pte_tlf01_stip.track1,
         :pte_tlf01_stip.track2,
         :pte_tlf01_stip.retrieval_ref_num,
         :pte_tlf01_stip.orig_retrieval_ref_num,
         :pte_tlf01_stip.merchant_id,
         :pte_tlf01_stip.orig_message,
         :pte_tlf01_stip.settlement_total,
         :pte_tlf01_stip.message_type,
         :pte_tlf01_stip.card_holder_name,
         :pte_tlf01_stip.general_status,
         :pte_tlf01_stip.originator_queue,
         :pte_tlf01_stip.originator_info,
         :pte_tlf01_stip.batch_number,
         :pte_tlf01_stip.response_code,
         :pte_tlf01_stip.date_yyyymmdd,
         :pte_tlf01_stip.time_hhmmss,
         :pte_tlf01_stip.num_sales,
         :pte_tlf01_stip.sales_amount,
         :pte_tlf01_stip.num_refunds,
         :pte_tlf01_stip.refund_amount,
         :pte_tlf01_stip.num_dbsales,
         :pte_tlf01_stip.dbsales_amount,
         :pte_tlf01_stip.num_dbrefunds,
         :pte_tlf01_stip.dbrefund_amount,
         :pte_tlf01_stip.pin_block,
         :pte_tlf01_stip.tax_amount,
         :pte_tlf01_stip.tip_amount,
         :pte_tlf01_stip.tran_start_time,
         :pte_tlf01_stip.host_start_time,
         :pte_tlf01_stip.host_finish_time,
         :pte_tlf01_stip.tran_finish_time,
         :pte_tlf01_stip.settle_file_prefix,
         :pte_tlf01_stip.resp_source_len,
         :pte_tlf01_stip.visa_char_indicator,
         :pte_tlf01_stip.visa_tran_id,
         :pte_tlf01_stip.visa_validation_code,
         :pte_tlf01_stip.mcard_banknet_len,
         :pte_tlf01_stip.mcard_banknet,
         :pte_tlf01_stip.agent_id_len,
         :pte_tlf01_stip.agent_id,
         :pte_tlf01_stip.cvc,
         :pte_tlf01_stip.settlement_date,
         :pte_tlf01_stip.category_code,
         :pte_tlf01_stip.conversion_rate,
         :pte_tlf01_stip.product_code,
         :pte_tlf01_stip.odometer,
         :pte_tlf01_stip.organization_id,
         :pte_tlf01_stip.dynamic_keychange,
         :pte_tlf01_stip.txn_cnt,               
	      :pte_tlf01_stip.source_key,                         
         :pte_tlf01_stip.dcf01_retired_cwk,                  
         :pte_tlf01_stip.dest_key,                          
         :pte_tlf01_stip.ncf01_retired_cwk,                                                 
	      :pte_tlf01_stip.handler_queue,        		          
	      :pte_tlf01_stip.authorizing_host_queue,		   	    
         :pte_tlf01_stip.max_net_consec_tmouts,              
         :pte_tlf01_stip.max_active_txns,                    
         :pte_tlf01_stip.remote_nsp_type,
         :pte_tlf01_stip.kek,
         :pte_tlf01_stip.credit_limit,
         :pte_tlf01_stip.forwarding_institution_id,          
         :pte_tlf01_stip.acquiring_id,                                             
         :pte_tlf01_stip.outstanding_balance,
         :pte_tlf01_stip.nfi_name,                           
         :pte_tlf01_stip.nfi_seq_nbr,                     
         :pte_tlf01_stip.nfi_start_date,            
         :pte_tlf01_stip.nfi_end_date,           
         :pte_tlf01_stip.resp_source,
         :pte_tlf01_stip.origin,
         :pte_tlf01_stip.auth_1,
         :pte_tlf01_stip.auth_2,                      
         :pte_tlf01_stip.update_mask,
         :pte_tlf01_stip.type_of_data,   
         :pte_tlf01_stip.down_payment,         
         :pte_tlf01_stip.period,                 
         :pte_tlf01_stip.interest_rate,               
         :pte_tlf01_stip.total_interest,                                  
         :pte_tlf01_stip.redemption_amount,             
         :pte_tlf01_stip.vehicle_number,
         :pte_tlf01_stip.profile, :pte_tlf01_stip.nbr_of_prod_codes,          
         :pte_tlf01_stip.product1_code, :pte_tlf01_stip.product1_quantity, :pte_tlf01_stip.product1_amount, :pte_tlf01_stip.product2_code,             
         :pte_tlf01_stip.product2_quantity, :pte_tlf01_stip.product2_amount, :pte_tlf01_stip.product3_code, :pte_tlf01_stip.product3_quantity,            
         :pte_tlf01_stip.product3_amount, :pte_tlf01_stip.product4_code, :pte_tlf01_stip.product4_quantity, :pte_tlf01_stip.product4_amount,                  
         :pte_tlf01_stip.product5_code, :pte_tlf01_stip.product5_quantity, :pte_tlf01_stip.product5_amount, :pte_tlf01_stip.product6_code,             
         :pte_tlf01_stip.product6_quantity, :pte_tlf01_stip.product6_amount, :pte_tlf01_stip.product7_code, :pte_tlf01_stip.product7_quantity,          
         :pte_tlf01_stip.product7_amount, :pte_tlf01_stip.product8_code, :pte_tlf01_stip.product8_quantity, :pte_tlf01_stip.product8_amount,
         :pte_tlf01_stip.product9_code, :pte_tlf01_stip.product9_quantity, :pte_tlf01_stip.product9_amount, :pte_tlf01_stip.product10_code,
         :pte_tlf01_stip.product10_quantity, :pte_tlf01_stip.product10_amount, :pte_tlf01_stip.product11_code, :pte_tlf01_stip.product11_quantity, 
         :pte_tlf01_stip.product11_amount, :pte_tlf01_stip.product12_code, :pte_tlf01_stip.product12_quantity, :pte_tlf01_stip.product12_amount,
         :pte_tlf01_stip.product13_code, :pte_tlf01_stip. product13_quantity, :pte_tlf01_stip.product13_amount,:pte_tlf01_stip.product14_code, 
         :pte_tlf01_stip.product14_quantity, :pte_tlf01_stip.product14_amount, :pte_tlf01_stip.product15_code, :pte_tlf01_stip.product15_quantity,
         :pte_tlf01_stip.product15_amount, :pte_tlf01_stip.product16_code, :pte_tlf01_stip.product16_quantity, :pte_tlf01_stip.product16_amount,    
         :pte_tlf01_stip.product17_code, :pte_tlf01_stip.product17_quantity, :pte_tlf01_stip.product17_amount, :pte_tlf01_stip.product18_code,
         :pte_tlf01_stip.product18_quantity, :pte_tlf01_stip.product18_amount, :pte_tlf01_stip.product19_code, :pte_tlf01_stip.product19_quantity,
         :pte_tlf01_stip.product19_amount, :pte_tlf01_stip.product20_code, :pte_tlf01_stip.product20_quantity, :pte_tlf01_stip.product20_amount,
         :pte_tlf01_stip.visa_merchant_id,
		 :pte_tlf01_stip.cash_bonus,
		 :pte_tlf01_stip.deferred_factor,
		 :pte_tlf01_stip.deferred_term_length,
		 :pte_tlf01_stip.currency_code,
		 :pte_tlf01_stip.transmission_timestamp,
		 :pte_tlf01_stip.tran_fee_amount,
		 :pte_tlf01_stip.cvc_data,
		 :pte_tlf01_stip.verify_mag_stripe,
		 :pte_tlf01_stip.saf,
		 :pte_tlf01_stip.security_response_code,
		 :pte_tlf01_stip.service_code,
		 :pte_tlf01_stip.source_pin_format,
		 :pte_tlf01_stip.dest_pin_format,
		 :pte_tlf01_stip.voice_auth,
         :pte_tlf01_stip.actual_amount,
		 :pte_tlf01_stip.reversal_amount, 
		 :pte_tlf01_stip.voice_auth_text,
		 :pte_tlf01_stip.operator_id,
		 :pte_tlf01_stip.workstation,
		 :pte_tlf01_stip.orig_auth_number,
		 :pte_tlf01_stip.ticket_nbr,
         :pte_tlf01_stip.system_date,
       :pte_tlf01_stip.def_gross_amt,
       :pte_tlf01_stip.monthly_amort_amt
      );


   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : TLF01 ,Fun_Name : db_insert_tlf01_stip, Duration = %f, device id: %s, MID: %s ,stan: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_tlf01_stip.terminal_id,pte_tlf01_stip.merchant_id,pte_tlf01_stip.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }

   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : TLF01 ,Fun_Name : db_insert_tlf01_stip,Duration = %f, device id: %s, MID: %s ,stan: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_tlf01_stip.terminal_id,pte_tlf01_stip.merchant_id,pte_tlf01_stip.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_insert_tlf01_stip ,ST1 :%d,ST2 : %d TID: %s,MID: %s,STAN: %s,RRN: %s",DB_MsgSubtype1,DB_MsgSubtype2,tlf01_ptr->terminal_id,tlf01_ptr->merchant_id,tlf01_ptr->sys_trace_audit_num,tlf01_ptr->retrieval_ref_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/

BYTE db_insert_bch10( pBCH10 bch10_ptr, pCHAR ErrorMsg)
{

 EXEC SQL BEGIN DECLARE SECTION;
	BYTE temp_msg[100] ={0};
    char date[9]= {0};
	char yyyymmdd[25]={0};
  EXEC SQL END DECLARE SECTION;
  
   bch10_to_db( bch10_ptr );
   
   if (strlen(bch10_ptr->tran_date) < 8 || (validate_date_yyyymmdd(bch10_ptr->tran_date) == false) )
   {
     	format_date(yyyymmdd);
      	strncpy(bch10_ptr->tran_date, yyyymmdd, sizeof(bch10_ptr->tran_date)-1);
      	updateds_log_message(2,2,"Tran_date was NULL in BCH10","db_insert_bch10");
   }
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
 EXEC SQL INSERT INTO bch10
(  
	device_id,
	batch_nbr, 
	retrieval_ref_num,
	open_date,
	open_time,
	merchant_id,  
	transaction_id,
	tran_date,
	tran_time,   
	tran_amount, 
	processing_code,
	auth_number,   
	message_type,
	card_nbr,    
	invoice_nbr,   
	settle_file_prefix,    
	product_code,           
	sys_trace_audit_num,
	tx_key, 
	bin_type,
	pos_entry_mode,
	profile,
	response_code,
    exp_date,
	cash_bonus,
	transmission_timestamp,
	mcard_banknet,
	ticket_nbr,
	odometer,
    def_gross_amt,
    term,
    down_payment,
    interest_rate,
    product2_code, 
    product5_code,
    product6_code, 
    product20_code,
    product7_amount,
    product15_amount,
    product10_quantity,
    product10_code,
    product17_code,
    product17_amount, 
    product14_code,
    product14_amount,
    product13_amount,
    product7_code,
    product12_code,
    product18_code,
    product18_amount,
    product14_quantity,
    product8_amount, 
    product8_quantity,
    product1_code,
	product11_amount,
	product2_amount,
	product8_code,
	product6_quantity
	
)

VALUES

(
	:pte_bch10.device_id,
	:pte_bch10.batch_nbr, 
	:pte_bch10.retrieval_ref_num,
	:pte_bch10.open_date,
	:pte_bch10.open_time,
	:pte_bch10.merchant_id,  
	:pte_bch10.transaction_id,
	:pte_bch10.tran_date,
	:pte_bch10.tran_time,   
	:pte_bch10.tran_amount, 
	:pte_bch10.processing_code,
	:pte_bch10.auth_number,   
	:pte_bch10.message_type,
	:pte_bch10.card_nbr,    
	:pte_bch10.invoice_nbr,   
	:pte_bch10.settle_file_prefix,    
	:pte_bch10.product_code,           
	:pte_bch10.sys_trace_audit_num,
	:pte_bch10.tx_key, 
	:pte_bch10.bin_type,
	:pte_bch10.pos_entry_mode,
	:pte_bch10.profile,
	:pte_bch10.response_code,
	:pte_bch10.exp_date,
	:pte_bch10.cash_bonus,
	:pte_bch10.transmission_timestamp,
	:pte_bch10.mcard_banknet,
	:pte_bch10.ticket_nbr,
    :pte_bch10.odometer,
    :pte_bch10.def_gross_amt,
    :pte_bch10.term,
    :pte_bch10.down_payment,
    :pte_bch10.interest_rate,
    :pte_bch10.product2_code,
    :pte_bch10.product5_code,
    :pte_bch10.product6_code,
    :pte_bch10.product20_code,
    :pte_bch10.product7_amount,
    :pte_bch10.product15_amount,
    :pte_bch10.product10_quantity,
    :pte_bch10.product10_code,
    :pte_bch10.product17_code,
    :pte_bch10.product17_amount,
    :pte_bch10.product14_code,
    :pte_bch10.product14_amount,
    :pte_bch10.product13_amount,
    :pte_bch10.product7_code,
    :pte_bch10.product12_code,
    :pte_bch10.product18_code,
    :pte_bch10.product18_amount,
    :pte_bch10.product14_quantity,
    :pte_bch10.product8_amount,
    :pte_bch10.product8_quantity,
    :pte_bch10.product1_code,
	:pte_bch10.product11_amount,
	:pte_bch10.product2_amount,
	:pte_bch10.product8_code,
	:pte_bch10.product6_quantity
);
//MC02_APR2024 - product11_amount
 
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH10 ,Fun_Name : db_insert_bch10 , Duration = %f,TID: %s,MID: %s,STAN: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_insert_bch10 ,ST1 :%d,ST2 : %d,TID: %s,MID: %s,STAN: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}






/*************************************************************************************/

/*************************************************************************************/

BYTE db_insert_bch10_MP( pBCH10 bch10_ptr, pCHAR ErrorMsg)
{
   bch10_to_db( bch10_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
 EXEC SQL INSERT INTO bch10
(  
	device_id,
	batch_nbr, 
	retrieval_ref_num,
	open_date,
	open_time,
	merchant_id,  
	transaction_id,
	tran_date,
	tran_time,   
	tran_amount, 
	processing_code,
	auth_number,   
	message_type,
	card_nbr,    
	invoice_nbr,   
	settle_file_prefix,    
	product_code,           
	sys_trace_audit_num,
	tx_key, 
	bin_type,
	pos_entry_mode,
	profile,
	response_code,
   exp_date,
	cash_bonus,
	transmission_timestamp,
	mcard_banknet,
	ticket_nbr,
	odometer,
   def_gross_amt,
   term,
   product2_code, /* Added for STIP value*/
   product20_code,
   product7_amount,
   product15_amount,
   product16_amount,
   product17_code,
   product17_amount,  
   product18_code,
   product18_amount,
   product19_code,
   product19_amount                                         
)

VALUES

(
	:pte_bch10.device_id,
	:pte_bch10.batch_nbr, 
	:pte_bch10.retrieval_ref_num,
	:pte_bch10.open_date,
	:pte_bch10.open_time,
	:pte_bch10.merchant_id,  
	:pte_bch10.transaction_id,
	:pte_bch10.tran_date,
	:pte_bch10.tran_time,   
	:pte_bch10.tran_amount, 
	:pte_bch10.processing_code,
	:pte_bch10.auth_number,   
	:pte_bch10.message_type,
	:pte_bch10.card_nbr,    
	:pte_bch10.invoice_nbr,   
	:pte_bch10.settle_file_prefix,    
	:pte_bch10.product_code,           
	:pte_bch10.sys_trace_audit_num,
	:pte_bch10.tx_key, 
	:pte_bch10.bin_type,
	:pte_bch10.pos_entry_mode,
	:pte_bch10.profile,
	:pte_bch10.response_code,
	:pte_bch10.exp_date,
	:pte_bch10.cash_bonus,
	:pte_bch10.transmission_timestamp,
	:pte_bch10.mcard_banknet,
	:pte_bch10.ticket_nbr,
   :pte_bch10.odometer,
   :pte_bch10.def_gross_amt,
   :pte_bch10.term,
   :pte_bch10.product2_code,
   :pte_bch10.product20_code,
   :pte_bch10.product7_amount,
   :pte_bch10.product15_amount,
   :pte_bch10.product16_amount,
   :pte_bch10.product17_code,
   :pte_bch10.product17_amount,  
   :pte_bch10.product18_code,
   :pte_bch10.product18_amount,
   :pte_bch10.product19_code,
   :pte_bch10.product19_amount 
);
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH10 ,Fun_Name : db_insert_bch10_MP , Duration = %f,TID: %s,MID: %s,STAN: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_insert_bch10_MP ,ST1 :%d,ST2 : %d,TID: %s,MID: %s,STAN: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch10.device_id,pte_bch10.merchant_id,pte_bch10.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_bch20( pBCH20 bch20_ptr, pCHAR ErrorMsg)
{
 	EXEC SQL BEGIN DECLARE SECTION;
      char date[9] = {0};
      char yyyymmdd[25] = {0};
   EXEC SQL END DECLARE SECTION;
   
   bch20_to_db( bch20_ptr );
   if (strlen(pte_bch20.tran_date) < 8 || 
   		(validate_date_yyyymmdd(pte_bch20.tran_date) == false) )
   {
      memset( date,   0x00, sizeof(date)   );
      memset( yyyymmdd, 0x00, sizeof(yyyymmdd) );
      format_date(yyyymmdd);
      strncpy(pte_bch20.tran_date, yyyymmdd, sizeof(pte_bch20.tran_date)-1);
   }
   
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
 EXEC SQL INSERT INTO bch20
 (  
	device_id,
	batch_nbr, 
	retrieval_ref_num,
	open_date,
	open_time,
	merchant_id,  
	transaction_id,
	tran_date,
	tran_time,   
	tran_amount, 
	processing_code,
	auth_number,   
	message_type,
	card_nbr,    
	invoice_nbr,   
	settle_file_prefix,    
	product_code,           
	sys_trace_audit_num,
	tx_key, 
	bin_type,
	pos_entry_mode,
	profile,
	processed,
	response_code,  
	transmission_timestamp, 
	mcard_banknet,
	exp_date,
	ticket_nbr,
    odometer,
    def_gross_amt,
    term,  
    product2_code, /* Added for STIP value*/
    product6_code, /* Added for STIP value*/
	product15_amount,
	product7_amount,
	product20_code, /*Added to store settlement date*/
	product17_amount, /*Added to store POS data for Preauth*/
	product14_code,
    product14_amount,
    product13_amount,
    product7_code, 
    product12_code,
	product1_code,
	product11_amount,
	product5_amount,
	product5_quantity,
	product8_code,
	product3_code,
	product2_amount,
	product9_code,
	product6_quantity,
	product2_quantity,
	down_payment,
	interest_rate
	
	
 )
VALUES
 (
	:pte_bch20.device_id,
	:pte_bch20.batch_nbr, 
	:pte_bch20.retrieval_ref_num,
	:pte_bch20.open_date,
	:pte_bch20.open_time,
	:pte_bch20.merchant_id,  
	:pte_bch20.transaction_id,
	:pte_bch20.tran_date,
	:pte_bch20.tran_time,   
	:pte_bch20.tran_amount, 
	:pte_bch20.processing_code,
	:pte_bch20.auth_number,   
	:pte_bch20.message_type,
	:pte_bch20.card_nbr,    
	:pte_bch20.invoice_nbr,   
	:pte_bch20.settle_file_prefix,    
	:pte_bch20.product_code,           
	:pte_bch20.sys_trace_audit_num,
	:pte_bch20.tx_key, 
	:pte_bch20.bin_type,
	:pte_bch20.pos_entry_mode,
	:pte_bch20.profile,
	:pte_bch20.processed,
	:pte_bch20.response_code,
	:pte_bch20.transmission_timestamp,
	:pte_bch20.mcard_banknet,
	:pte_bch20.exp_date,
	:pte_bch20.ticket_nbr,
    :pte_bch20.odometer,
    :pte_bch20.def_gross_amt,
    :pte_bch20.term,
    :pte_bch20.product2_code,
    :pte_bch20.product6_code,
    :pte_bch20.product15_amount,
    :pte_bch20.product7_amount,
    :pte_bch20.product20_code,
    :pte_bch20.product17_amount,
    :pte_bch20.product14_code,
    :pte_bch20.product14_amount,
    :pte_bch20.product13_amount,
    :pte_bch20.product7_code,
    :pte_bch20.product12_code,
    :pte_bch20.product1_code,
	:pte_bch20.product11_amount,
	:pte_bch20.product5_amount,
	:pte_bch20.product5_quantity,
	:pte_bch20.product8_code,
	:pte_bch20.product3_code,
	:pte_bch20.product2_amount,
	:pte_bch20.product9_code,
	:pte_bch20.product6_quantity,
	:pte_bch20.product2_quantity,
	:pte_bch20.down_payment,
	:pte_bch20.interest_rate
 );
//MC02_APR2024 - product11_amount
 
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH20 ,Fun_Name : db_insert_bch20 , Duration = %f,TID: %s,MID: %s,STAN: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_insert_bch20 ,ST1 :%d,ST2 : %d,TID: %s,MID: %s,STAN: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch20.device_id,pte_bch20.merchant_id,pte_bch20.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   return PTEMSG_OK;
}

/*************************************************************************************/
/*db_insert_RPS01*/
/******************************************************************************
 *
 *  NAME:         db_insert_RPS01
 *
 *  DESCRIPTION:  This function makes the call to the database to insert a
 *                record into RPS01.
 *
 *  INPUTS:       rps01_ptr - RPS01 structure
 *
 *  OUTPUTS:      ErrorMsg - Error message if database call failed.
 *
 *  RTRN VALUE:   A PTE code is returned:
 *                       PTEMSG_OK  if no errors else a code to identify
 *                       the reason for the failure.
 *
 *  AUTHOR:       Phani
 *
 *  MODIFICATIONS:
 ******************************************************************************/
BYTE db_insert_RPS01( pRPS01 rps01_ptr, pCHAR ErrorMsg )
{
   rps01_to_db( rps01_ptr );

	
   EXEC SQL INSERT INTO RPS01
     (  
     merchant_id,
     card_num,
     date_yyyymmdd,
     visa_tran_id,
     system_date,
     total_amount,
     currency_code,
     transaction_id,
     future_use1
     )               
   VALUES( 
     :pte_rps01.merchant_id,  
     :pte_rps01.card_num,  
     :pte_rps01.date_yyyymmdd, 
      :pte_rps01.visa_tran_id, 
     :pte_rps01.system_date,   
     :pte_rps01.total_amount,           
     :pte_rps01.currency_code,
     :pte_rps01.transaction_id,   
     :pte_rps01.future_use1           
     
      );

   if ( SQLCODE != 0 )
   {
   		memset(er_buf,0x00,sizeof(er_buf));
   		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
   		sprintf(er_buf,"In db_insert_RPS01 ,ST1 :%d,ST2 : %d,MID: %s,TRANSACTION ID: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_rps01.merchant_id,pte_rps01.transaction_id);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
      

   return PTEMSG_OK;
}
/******************************************************************************
 *
 *  NAME:         db_insert_ncf21
 *
 *  DESCRIPTION:  This function makes the call to the database to insert a
 *                record into NCF21.
 *
 *  INPUTS:       ncf21_ptr - NCF21 structure
 *
 *  OUTPUTS:      ErrorMsg - Error message if database call failed.
 *
 *  RTRN VALUE:   A PTE code is returned:
 *                       PTEMSG_OK  if no errors else a code to identify
 *                       the reason for the failure.
 *
 *  AUTHOR:       Unknown
 *
 *  MODIFICATIONS:
 ******************************************************************************/
BYTE db_insert_ncf21( pNCF21 ncf21_ptr, pCHAR ErrorMsg )
{
   ncf21_to_db( ncf21_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL INSERT INTO ncf21
     (  network_id,    
        network_type,
        batch_number,	         

     open_date,          
     open_time, 
     release_date,           
     release_time,  
     credit_cnt,        
     credit_amt,
     credit_rev_cnt,        
     credit_rev_amt,   
     debit_cnt,  
     debit_amt,  
     debit_rev_cnt,   
     debit_rev_amt,   
     total_amt,           
     total_amt_type  
     )               
   VALUES(  :pte_ncf21.network_id,    
     :pte_ncf21.network_type, 
     :pte_ncf21.batch_number,

     :pte_ncf21.open_date,          
     :pte_ncf21.open_time, 
     :pte_ncf21.release_date,           
     :pte_ncf21.release_time,  
     :pte_ncf21.credit_cnt,        
     :pte_ncf21.credit_amt,
     :pte_ncf21.credit_rev_cnt,        
     :pte_ncf21.credit_rev_amt,   
     :pte_ncf21.debit_cnt,  
     :pte_ncf21.debit_amt,  
     :pte_ncf21.debit_rev_cnt,   
     :pte_ncf21.debit_rev_amt,   
     :pte_ncf21.total_amt,           
     :pte_ncf21.total_amt_type  
      );
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : NCF21 ,Fun_Name : db_insert_ncf21 , Duration = %f, NETWROK ID: %s, BATCH NUMBER: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_ncf21.network_id,pte_ncf21.batch_number);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_insert_ncf21 ,ST1 :%d,ST2 : %d, NETWROK ID: %s, BATCH NUMBER: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_ncf21.network_id,pte_ncf21.batch_number);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/******************************************************************************
 *
 *  NAME:         db_insert_ncf30
 *
 *  DESCRIPTION:  This function makes the call to the database to insert a
 *                record into NCF30.
 *
 *  INPUTS:       ncf30_ptr - NCF30 structure
 *
 *  OUTPUTS:      ErrorMsg - Error message if database call failed.
 *
 *  RTRN VALUE:   A PTE code is returned:
 *                       PTEMSG_OK  if no errors else a code to identify
 *                       the reason for the failure.
 *
 *  AUTHOR:       Unknown
 *
 *  MODIFICATIONS:
 ******************************************************************************/
BYTE db_insert_ncf30( pNCF30 ncf30_ptr, pCHAR ErrorMsg )
{
   ncf30_to_db( ncf30_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL INSERT INTO ncf30
     (  network_id,    
        network_type,
        batch_number,
        retrieval_ref_num,

     open_date,          
     open_time, 
     merchant_id,           
     transaction_id,  
     device_id,        
     card_nbr,
     message_type,        
     processing_code,   
     tran_amount,  
     auth_number,  
     response_code,   
     tran_date,   
     tran_time,           
     sys_trace_audit_nbr,  
     tx_key,            
     invoice_nbr,   
     network_data,   
     currency_code,   
     acquiring_inst_id_code, 
     settlement_date, 
     transmission_timestamp,
     tran_fee_amount  
     )               
   VALUES(  :pte_ncf30.network_id,    
     :pte_ncf30.network_type,
     :pte_ncf30.batch_number,
     :pte_ncf30.retrieval_ref_num,

     :pte_ncf30.open_date,          
     :pte_ncf30.open_time, 
     :pte_ncf30.merchant_id,           
     :pte_ncf30.transaction_id,  
     :pte_ncf30.device_id,        
     :pte_ncf30.card_nbr,
     :pte_ncf30.message_type,        
     :pte_ncf30.processing_code,   
     :pte_ncf30.tran_amount,  
     :pte_ncf30.auth_number,  
     :pte_ncf30.response_code,   
     :pte_ncf30.tran_date,   
     :pte_ncf30.tran_time,           
     :pte_ncf30.sys_trace_audit_nbr,  
     :pte_ncf30.tx_key,            
     :pte_ncf30.invoice_nbr,   
     :pte_ncf30.network_data, 
     :pte_ncf30.currency_code, 
     :pte_ncf30.acquiring_inst_id_code, 
     :pte_ncf30.settlement_date, 
     :pte_ncf30.transmission_timestamp, 
     :pte_ncf30.tran_fee_amount 
      );
   
   if ( db_error_statics_flag == true )
   {
   	  end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : NCF30 ,Fun_Name : db_insert_ncf30 , Duration = %f,network_id:%s ,network_type:%s,batch_number:%s,retrieval_ref_num:%s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_ncf30.network_id,pte_ncf30.network_type,pte_ncf30.batch_number,pte_ncf30.retrieval_ref_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_insert_ncf30 ,ST1 :%d,ST2 : %d,network_id:%s ,network_type:%s,batch_number:%s,retrieval_ref_num:%s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_ncf30.network_id,pte_ncf30.network_type,pte_ncf30.batch_number,pte_ncf30.retrieval_ref_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}


/*************************************************************************************/

BYTE db_insert_bch01( pBCH01 bch01_ptr, pCHAR ErrorMsg)
{
   bch01_to_db( bch01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL INSERT INTO bch01
      ( device_id, batch_nbr, merchant_id,total_credit_cnt,total_credit_amt, total_credit_refund_cnt, total_credit_refund_amt,
        total_debit_cnt, total_debit_amt, total_debit_refund_cnt, total_debit_refund_amt,
        total_void_credit_cnt,total_void_credit_amt, total_void_credit_refund_cnt,
        total_void_credit_refund_amt, open_date, open_time,
        release_date, release_time, batch_status,visa_merchant_id
      )
   VALUES(:pte_bch01.device_id, :pte_bch01.batch_nbr,
        :pte_bch01.merchant_id, :pte_bch01.total_credit_cnt, :pte_bch01.total_credit_amt,    
        :pte_bch01.total_credit_refund_cnt, :pte_bch01.total_credit_refund_amt, :pte_bch01.total_debit_cnt,
        :pte_bch01.total_debit_amt, :pte_bch01.total_debit_refund_cnt, :pte_bch01.total_debit_refund_amt,
        :pte_bch01.total_void_credit_cnt, :pte_bch01.total_void_credit_amt, 
        :pte_bch01.total_void_credit_refund_cnt, :pte_bch01.total_void_credit_refund_amt,
        :pte_bch01.open_date, :pte_bch01.open_time, :pte_bch01.release_date,:pte_bch01.release_time,
        :pte_bch01.batch_status, :pte_bch01.visa_merchant_id
      );
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH01 ,Fun_Name : db_insert_bch01 , Duration = %f, device id: %s, MID: %s ,batch number: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_bch01.device_id,pte_bch01.merchant_id,pte_bch01.batch_nbr);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_insert_bch01 ,ST1 :%d,ST2 : %d, device id: %s, MID: %s ,batch number: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch01.device_id,pte_bch01.merchant_id,pte_bch01.batch_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}


BYTE db_insert_mcf03p( pMCF03P mcf03p_ptr, pCHAR ErrorMsg)
{
   mcf03p_to_db( mcf03p_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL INSERT INTO mcf03p
      ( merch_id, system_date, total_amount,total_transcn_cnt,total_aprvd_amount, total_reversed_amount, total_aprvd_transcn_count,
        total_reversed_transcn_count, field_1, field_2, field_3, field_4, field_5, field_6, field_7,
        field_8, field_9, field_10  
      )
   VALUES(:pte_mcf03p.merch_id, :pte_mcf03p.system_date,
        :pte_mcf03p.total_amount, :pte_mcf03p.total_transcn_cnt, :pte_mcf03p.total_aprvd_amount,    
        :pte_mcf03p.total_reversed_amount, :pte_mcf03p.total_aprvd_transcn_count, :pte_mcf03p.total_reversed_transcn_count,
        :pte_mcf03p.field_1, :pte_mcf03p.field_2, :pte_mcf03p.field_3,
        :pte_mcf03p.field_4, :pte_mcf03p.field_5, 
        :pte_mcf03p.field_6, :pte_mcf03p.field_7,
        :pte_mcf03p.field_8, :pte_mcf03p.field_9, :pte_mcf03p.field_10
      );
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : MCF03P ,Fun_Name : db_insert_mcf03p , Duration = %f ",
			DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_insert_mcf03p ,ST1 :%d,ST2 : %d",
		DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}
/******************************************************************************/
/*************************************************************************************/

BYTE db_insert_bch01_mp( pBCH01_MP bch01_mp_ptr, pCHAR ErrorMsg)
{
   bch01_mp_to_db( bch01_mp_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL INSERT INTO bch01_mp
      ( device_id, batch_nbr, merchant_id,total_credit_cnt,total_credit_amt, total_credit_refund_cnt, total_credit_refund_amt,
        total_debit_cnt, total_debit_amt, total_debit_refund_cnt, total_debit_refund_amt,
        total_void_credit_cnt,total_void_credit_amt, total_void_credit_refund_cnt,
        total_void_credit_refund_amt, open_date, open_time,
        release_date, release_time, batch_status,visa_merchant_id
      )
   VALUES(:pte_bch01_mp.device_id, :pte_bch01_mp.batch_nbr,
        :pte_bch01_mp.merchant_id, :pte_bch01_mp.total_credit_cnt, :pte_bch01_mp.total_credit_amt,    
        :pte_bch01_mp.total_credit_refund_cnt, :pte_bch01_mp.total_credit_refund_amt, :pte_bch01_mp.total_debit_cnt,
        :pte_bch01_mp.total_debit_amt, :pte_bch01_mp.total_debit_refund_cnt, :pte_bch01_mp.total_debit_refund_amt,
        :pte_bch01_mp.total_void_credit_cnt, :pte_bch01_mp.total_void_credit_amt, 
        :pte_bch01_mp.total_void_credit_refund_cnt, :pte_bch01_mp.total_void_credit_refund_amt,
        :pte_bch01_mp.open_date, :pte_bch01_mp.open_time, :pte_bch01_mp.release_date,:pte_bch01_mp.release_time,
        :pte_bch01_mp.batch_status, :pte_bch01.visa_merchant_id
      );
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH01 ,Fun_Name : db_insert_bch01_mp , Duration = %f, device id: %s, MID: %s ,batch number: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_bch01_mp.device_id,pte_bch01_mp.merchant_id,pte_bch01_mp.batch_nbr);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_insert_bch01_mp ,ST1 :%d,ST2 : %d, device id: %s, MID: %s ,batch number: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_bch01_mp.device_id,pte_bch01_mp.merchant_id,pte_bch01_mp.batch_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/******************************************************************************/
BYTE db_insert_fguard( pBYTE fraudguard_ptr, pCHAR ErrorMsg )
{
   BYTE    retval;
   CHAR    errbuf[92];
   FGUARD  fguard_ptr;
   FG_RAW  fgraw_ptr;


   memset( &fguard_ptr, 0x00, sizeof(FGUARD) );
   memcpy( &fguard_ptr, fraudguard_ptr, sizeof(FGUARD) );

   memset( &fgraw_ptr, 0x00, sizeof(FG_RAW) );
   memcpy( &fgraw_ptr, fraudguard_ptr+sizeof(FGUARD), sizeof(FG_RAW) );

   create_system_date( fguard_ptr.system_date );
   memcpy( fgraw_ptr.system_date, fguard_ptr.system_date, 8 );

   fguard_to_db( &fguard_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO FGUARD
     (   transaction_id,
         timestamp,
         message_type,
         card_num,
         processing_code,
         amount_peso,
         amount_usd,
         gmt,
         sys_trace_audit_num,
         mcc,
         country_code,
         pos_entry_mode,
         pos_condition_code,
         acquiring_id,
         auth_number,
         response_code,
         terminal_id,
         merchant_id,
         card_acceptor_name,
         card_acceptor_city,
         card_acceptor_country,
         currency_code_txn,
         currency_code_billing,
         pos_info,
         status,
         system_date,
         result_code,
         application,
         rule_domain,
         caller_id,
         caller_msg_id,
         result_text,
         product
     )
   VALUES(  :pte_fguard.transaction_id,
            :pte_fguard.timestamp,
            :pte_fguard.message_type,
            :pte_fguard.card_num,
            :pte_fguard.processing_code,
            :pte_fguard.amount_peso,
            :pte_fguard.amount_usd,
            :pte_fguard.gmt,
            :pte_fguard.sys_trace_audit_num,
            :pte_fguard.mcc,
            :pte_fguard.country_code,
            :pte_fguard.pos_entry_mode,
            :pte_fguard.pos_condition_code,
            :pte_fguard.acquiring_id,
            :pte_fguard.auth_number,
            :pte_fguard.response_code,
            :pte_fguard.terminal_id,
            :pte_fguard.merchant_id,
            :pte_fguard.card_acceptor_name,
            :pte_fguard.card_acceptor_city,
            :pte_fguard.card_acceptor_country,
            :pte_fguard.currency_code_txn,
            :pte_fguard.currency_code_billing,
            :pte_fguard.pos_info,
            :pte_fguard.status,
            :pte_fguard.system_date,
            :pte_fguard.result_code,
            :pte_fguard.application,
            :pte_fguard.rule_domain,
            :pte_fguard.caller_id,
            :pte_fguard.caller_msg_id,
            :pte_fguard.result_text,
            :pte_fguard.product
     );
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= (double)db_error_statics_value)
	  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : FGUARD ,Fun_Name : db_insert_fguard , Duration = %f TRANSACTION ID: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_fguard.transaction_id);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 )
   {
	      memset( errbuf, 0x00, sizeof(errbuf) );
		  memset(er_buf,0x00,sizeof(er_buf));
		  rtnval = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		  sprintf(er_buf,"In db_insert_fguard ,ST1 :%d,ST2 : %d_1,TRANSACTION ID: %s",
		  DB_MsgSubtype1,DB_MsgSubtype2,pte_fguard.transaction_id);
		  strcat(er_buf,ErrorMsg);
	      strcat( ErrorMsg, " FGUARD " );
	      Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
   }
   else
   {
      fgraw_to_db( &fgraw_ptr );
      if ( db_error_statics_flag == true )
   	  {
      	 start_time = ptetime_get_time();
      }
      EXEC SQL INSERT INTO FG_RAW
      (  transaction_id,
         system_date,
         length,
         raw_data
      )
      VALUES
      (  :pte_fgraw.transaction_id,
         :pte_fgraw.system_date,
         :pte_fgraw.length,
         :pte_fgraw.raw_data
      );
      
      if ( db_error_statics_flag == true )
      {
      		end_time = ptetime_get_time();
	     	duration = end_time - start_time;
		  	if(duration >= (double)db_error_statics_value)
		  	{
		  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : FGUARD ,Fun_Name : db_insert_fguard_RAW , Duration = %f,TRANSACTION ID: %s",
				DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_fguard.transaction_id);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		  	}
      }
      if ( SQLCODE != 0 )
      {
	         memset( errbuf, 0x00, sizeof(errbuf) );
	        memset(er_buf,0x00,sizeof(er_buf));
			retval = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In db_insert_fguard ,ST1 :%d,ST2 : %d_2,TRANSACTION ID: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,pte_fguard.transaction_id);
			strcat(er_buf,ErrorMsg);
			strcat( ErrorMsg, "FGRAW " );
	        strcat( ErrorMsg,  errbuf  );
	        Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
      }
      else
         retval = PTEMSG_OK;
   }

   return( retval );
}



/******************************************************************************/
/******************************************************************************
 *
 *  NAME:         db_update_ncf21
 *
 *  DESCRIPTION:  This function makes the call to the database to update a
 *                record in NCF21 based on a key values in ncf21_ptr.
 *                The record is copied into pte_ncf21, then the database is
 *                updated.
 *
 *  INPUTS:       ncf21_ptr - NCF21 structure
 *
 *  OUTPUTS:      ErrorMsg - Error message if database call failed.
 *
 *  RTRN VALUE:   A PTE code is returned:
 *                       PTEMSG_OK  if no errors else a code to identify
 *                       the reason for the failure.
 *
 *  AUTHOR:       Unknown
 *
 *  MODIFICATIONS:
 ******************************************************************************/
BYTE db_update_ncf21( pNCF21 ncf21_ptr, pCHAR ErrorMsg )
{
   ncf21_to_db( ncf21_ptr );

   if ( db_error_statics_flag == true )
   {
      	start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_ncf21
      FROM   NCF21
      WHERE  network_id   = :pte_ncf21.network_id       AND  
      		 network_type = :pte_ncf21.network_type     AND  
      		 batch_number = :pte_ncf21.batch_number     AND
      		 rownum       = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : NCF21 ,Fun_Name : db_update_ncf21_S , Duration = %f,network_id:%s ,network_type:%s,batch_number:%s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_ncf21.network_id,pte_ncf21.network_type,pte_ncf21.batch_number);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_ncf21 ,ST1 :%d,ST2 : %d_1,network_id:%s ,network_type:%s,batch_number:%s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_ncf21.network_id,pte_ncf21.network_type,pte_ncf21.batch_number);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
      	start_time = ptetime_get_time();
   }
   
   EXEC SQL UPDATE ncf21
   SET   network_id                          =   :pte_ncf21.network_id,    
         network_type                        =   :pte_ncf21.network_type, 
         batch_number                        =   :pte_ncf21.batch_number,

     open_date                               =   :pte_ncf21.open_date,          
     open_time                               =   :pte_ncf21.open_time, 
     release_date                            =   :pte_ncf21.release_date,           
     release_time                            =   :pte_ncf21.release_time,  
     credit_cnt                              =   :pte_ncf21.credit_cnt,        
     credit_amt                              =   :pte_ncf21.credit_amt,
     credit_rev_cnt                          =   :pte_ncf21.credit_rev_cnt,        
     credit_rev_amt                          =   :pte_ncf21.credit_rev_amt,   
     debit_cnt                               =   :pte_ncf21.debit_cnt,  
     debit_amt                               =   :pte_ncf21.debit_amt,  
     debit_rev_cnt                           =   :pte_ncf21.debit_rev_cnt,   
     debit_rev_amt                           =   :pte_ncf21.debit_rev_amt,   
     total_amt                               =   :pte_ncf21.total_amt,           
     total_amt_type                          =   :pte_ncf21.total_amt_type  

   WHERE  network_id     =   :pte_ncf21.network_id    AND   
          network_type   =   :pte_ncf21.network_type  AND
          batch_number   =   :pte_ncf21.batch_number ;         
   
   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
    	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : NCF21 ,Fun_Name : db_update_ncf21_U , Duration = %f,network_id:%s ,network_type:%s,batch_number:%s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_ncf21.network_id,pte_ncf21.network_type,pte_ncf21.batch_number);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_ncf21 ,ST1 :%d,ST2 : %d_2,network_id:%s ,network_type:%s,batch_number:%s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_ncf21.network_id,pte_ncf21.network_type,pte_ncf21.batch_number);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}
/*************************************************************************************/

BYTE db_update_ccf02p( pCCF02P ccf02p_ptr, pCHAR ErrorMsg )
{

	INT   cardlen = 0;
	INT   nIndex = 0;
	CHAR  tempcard[21] = {0};
	
   ccf02p_to_db( ccf02p_ptr );


	if (strlen(pte_ccf02p.card_nbr)> 0)
	{
		/* Masking card number first 5 and last 4 in clear form remaining all masked. */
		cardlen = strlen( pte_ccf02p.card_nbr);
		strncpy( tempcard,pte_ccf02p.card_nbr, cardlen);
		for ( nIndex = cardlen-5; nIndex >= cardlen-11; nIndex-- )
		{
			tempcard[nIndex] = '*';
		}
	}
	
   if ( db_error_statics_flag == true )
   {
      	start_time = ptetime_get_time();
   }
   

   
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_ccf02p
      FROM   ccf02p
      WHERE  card_type = :pte_ccf02p.card_type   AND  
      		 card_nbr  = :pte_ccf02p.card_nbr    AND
      		 rownum    = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
    	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : CCF02P ,Fun_Name : db_update_ccf02p_S , Duration = %f, CARD TYPE: %s, CARD NUM:%s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_ccf02p.card_type,tempcard);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */
  		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_ccf02p ,ST1 :%d,ST2 : %d_1, CARD TYPE: %s, CARD NUM:%s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_ccf02p.card_type,tempcard);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
      	start_time = ptetime_get_time();
   }
   
   EXEC SQL UPDATE ccf02p 
   SET card_type                    = :pte_ccf02p.card_type,                              
       card_nbr                     = :pte_ccf02p.card_nbr,
       primary_acct_nbr             = :pte_ccf02p.primary_acct_nbr,
       pin_offset                   = :pte_ccf02p.pin_offset,
       caf_profile_id               = :pte_ccf02p.caf_profile_id,
       status                       = :pte_ccf02p.status,           
       date_added                   = :pte_ccf02p.date_added,           
       maint_date                   = :pte_ccf02p.maint_date,
       changed_by                   = :pte_ccf02p.changed_by,           
       card_class                   = :pte_ccf02p.card_class,           
       expire_date                  = :pte_ccf02p.expire_date,           
       effect_date                  = :pte_ccf02p.effect_date,
       percent_deposit              = :pte_ccf02p.percent_deposit,           
       percent_avail_allowed        = :pte_ccf02p.percent_avail_allowed,           
       credit_line                  = :pte_ccf02p.credit_line,           
       outstanding_auths            = :pte_ccf02p.outstanding_auths,           
       allowed                      = :pte_ccf02p.allowed, 
       country_code                 = :pte_ccf02p.country_code,          
       currency_code                = :pte_ccf02p.currency_code,
       peso_saving_acct             = :pte_ccf02p.peso_saving_acct,    
       peso_current_acct            = :pte_ccf02p.peso_current_acct,  
       dollar_saving_acct           = :pte_ccf02p.dollar_saving_acct, 
       dollar_current_acct          = :pte_ccf02p.dollar_current_acct,
       product_codes                = :pte_ccf02p.product_codes,    
       cash_bonus_eligible          = :pte_ccf02p.cash_bonus_eligible,
       visa_purchase_card           = :pte_ccf02p.visa_purchase_card,    
       related_acct_type_1          = :pte_ccf02p.related_acct_type_1,           
       related_acct_nbr_1           = :pte_ccf02p.related_acct_nbr_1,           
       related_acct_type_2          = :pte_ccf02p.related_acct_type_2,           
       related_acct_nbr_2           = :pte_ccf02p.related_acct_nbr_2,           
       related_acct_type_3          = :pte_ccf02p.related_acct_type_3,           
       related_acct_nbr_3           = :pte_ccf02p.related_acct_nbr_3,           
       related_acct_type_4          = :pte_ccf02p.related_acct_type_4,           
       related_acct_nbr_4           = :pte_ccf02p.related_acct_nbr_4,           
       related_acct_type_5          = :pte_ccf02p.related_acct_type_5,           
       related_acct_nbr_5           = :pte_ccf02p.related_acct_nbr_5,           
       related_acct_type_6          = :pte_ccf02p.related_acct_type_6,           
       related_acct_nbr_6           = :pte_ccf02p.related_acct_nbr_6,           
       related_acct_type_7          = :pte_ccf02p.related_acct_type_7,           
       related_acct_nbr_7           = :pte_ccf02p.related_acct_nbr_7,           
       related_acct_type_8          = :pte_ccf02p.related_acct_type_8,           
       related_acct_nbr_8           = :pte_ccf02p.related_acct_nbr_8,           
       related_acct_type_9          = :pte_ccf02p.related_acct_type_9,           
       related_acct_nbr_9           = :pte_ccf02p.related_acct_nbr_9,           
       related_acct_type_10         = :pte_ccf02p.related_acct_type_10,           
       related_acct_nbr_10          = :pte_ccf02p.related_acct_nbr_10,           
       pin_verification_override    = :pte_ccf02p.pin_verification_override,           
       pin                          = :pte_ccf02p.pin,
       pvki                         = :pte_ccf02p.pvki,
       add_on_rate                  = :pte_ccf02p.add_on_rate,
       add_on_term                  = :pte_ccf02p.add_on_term
                  
   WHERE card_type = :pte_ccf02p.card_type AND card_nbr = :pte_ccf02p.card_nbr;
   
   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
    	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : CCF02P ,Fun_Name : db_update_ccf02p_U , Duration = %f, CARD TYPE: %s, CARD NUM: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_ccf02p.card_type,tempcard);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   } 
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_ccf02p ,ST1 :%d,ST2 : %d_2, CARD TYPE: %s CARD NUM=%s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_ccf02p.card_type,tempcard);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_ccf03p( pCCF03 ccf03p_ptr, pCHAR ErrorMsg )
{
	INT   cardlen = 0;
	INT   nIndex = 0;
	CHAR  tempcard[21] = {0};

   ccf03p_to_db( ccf03p_ptr );


   if (strlen(pte_ccf03p.card_nbr)> 0)
	{
		/* Masking card number first 5 and last 4 in clear form remaining all masked. */
		cardlen = strlen( pte_ccf03p.card_nbr);
		strncpy( tempcard,pte_ccf03p.card_nbr, cardlen);
		for ( nIndex = cardlen-5; nIndex >= cardlen-11; nIndex-- )
		{
			tempcard[nIndex] = '*';
		}
	}
	
   if ( db_error_statics_flag == true )
   {
      	start_time = ptetime_get_time();
   }
   

   
   EXEC SQL INSERT INTO ccf03p
     ( card_type,
       card_nbr,
        primary_acct_nbr,
        daily_amt_usage,
        julian_date,
        
        peso_julian_date,        
      dollar_julian_date,      
      peso_usage1_nbr_usage,   
      peso_usage1_amt_usage,   
      peso_usage2_nbr_usage,   
      peso_usage2_amt_usage,   
      peso_usage3_nbr_usage,   
      peso_usage3_amt_usage,   
      peso_usage4_nbr_usage,   
      peso_usage4_amt_usage,   
      peso_usage5_nbr_usage,   
      peso_usage5_amt_usage,   
      peso_usage6_nbr_usage,   
      peso_usage6_amt_usage,   
      peso_usage7_nbr_usage,   
      peso_usage7_amt_usage,   
      peso_usage8_nbr_usage,   
      peso_usage8_amt_usage,   
      peso_usage9_nbr_usage,   
      peso_usage9_amt_usage,   
      peso_usage10_nbr_usage,  
      peso_usage10_amt_usage,  
      peso_usage11_nbr_usage,  
      peso_usage11_amt_usage,  
      peso_usage12_nbr_usage,  
      peso_usage12_amt_usage,  
      peso_usage13_nbr_usage,  
      peso_usage13_amt_usage,  
      peso_usage14_nbr_usage,  
      peso_usage14_amt_usage,  

      dollar_usage1_nbr_usage, 
      dollar_usage1_amt_usage, 
      dollar_usage2_nbr_usage, 
      dollar_usage2_amt_usage, 
      dollar_usage3_nbr_usage, 
      dollar_usage3_amt_usage, 
      dollar_usage4_nbr_usage, 
      dollar_usage4_amt_usage, 
      dollar_usage5_nbr_usage, 
      dollar_usage5_amt_usage, 
      dollar_usage6_nbr_usage, 
      dollar_usage6_amt_usage, 
      dollar_usage7_nbr_usage, 
      dollar_usage7_amt_usage, 
      dollar_usage8_nbr_usage, 
      dollar_usage8_amt_usage, 
      dollar_usage9_nbr_usage, 
      dollar_usage9_amt_usage, 
      dollar_usage10_nbr_usage,
      dollar_usage10_amt_usage,
      dollar_usage11_nbr_usage,
      dollar_usage11_amt_usage,
      dollar_usage12_nbr_usage,
      dollar_usage12_amt_usage,
      dollar_usage13_nbr_usage,
      dollar_usage13_amt_usage,
        dollar_usage14_nbr_usage,
        dollar_usage14_amt_usage,
        failed_pin_attempts,
        date_added,
        last_maint,
        status,
        mcc1_code,
        mcc1_usage,
        mcc2_code,
        mcc2_usage,
        mcc3_code,
        mcc3_usage,
        mcc4_code,
        mcc4_usage,
        mcc5_code,
        mcc5_usage,
        mcc6_code,
        mcc6_usage,
        mcc7_code,
        mcc7_usage,
        mcc8_code,
        mcc8_usage,
        mcc9_code,
        mcc9_usage,
        mcc10_code,
        mcc10_usage,
        mcc11_code,
        mcc11_usage,
        mcc12_code,
        mcc12_usage,
        mcc13_code,
        mcc13_usage,
        mcc14_code,
        mcc14_usage,
        mcc15_code,
        mcc15_usage,
        mcc16_code,
        mcc16_usage,
        mcc17_code,
        mcc17_usage,
        mcc18_code,
        mcc18_usage,
        mcc19_code,
        mcc19_usage,
        mcc20_code,
        mcc20_usage,

        repeat1_merchant_id,
        repeat1_nbr_uses,
        repeat2_merchant_id,
        repeat2_nbr_uses,
        repeat3_merchant_id,
        repeat3_nbr_uses,
        repeat4_merchant_id,
        repeat4_nbr_uses,
        repeat5_merchant_id,
        repeat5_nbr_uses,
        repeat6_merchant_id,
        repeat6_nbr_uses,
        repeat7_merchant_id,
        repeat7_nbr_uses,
        repeat8_merchant_id,
        repeat8_nbr_uses,
        repeat9_merchant_id,
        repeat9_nbr_uses,
        repeat10_merchant_id,
        repeat10_nbr_uses,
        repeat11_merchant_id,
        repeat11_nbr_uses,
        repeat12_merchant_id,
        repeat12_nbr_uses,
        repeat13_merchant_id,
        repeat13_nbr_uses,
        repeat14_merchant_id,
        repeat14_nbr_uses,
        repeat15_merchant_id,
        repeat15_nbr_uses,
        repeat16_merchant_id,
        repeat16_nbr_uses,
        repeat17_merchant_id,
        repeat17_nbr_uses,
        repeat18_merchant_id,
        repeat18_nbr_uses,
        repeat19_merchant_id,
        repeat19_nbr_uses,
        repeat20_merchant_id,
        repeat20_nbr_uses
     )     
   VALUES(  :pte_ccf03p.card_type,
       :pte_ccf03p.card_nbr,
       :pte_ccf03p.primary_acct_nbr,
       :pte_ccf03p.daily_amt_usage,
       :pte_ccf03p.julian_date,
       :pte_ccf03p.peso_julian_date,         
       :pte_ccf03p.dollar_julian_date,       
       :pte_ccf03p.peso_usage1_nbr_usage,    
       :pte_ccf03p.peso_usage1_amt_usage,    
       :pte_ccf03p.peso_usage2_nbr_usage,    
       :pte_ccf03p.peso_usage2_amt_usage,    
       :pte_ccf03p.peso_usage3_nbr_usage,    
       :pte_ccf03p.peso_usage3_amt_usage,    
       :pte_ccf03p.peso_usage4_nbr_usage,    
       :pte_ccf03p.peso_usage4_amt_usage,    
       :pte_ccf03p.peso_usage5_nbr_usage,    
       :pte_ccf03p.peso_usage5_amt_usage,    
       :pte_ccf03p.peso_usage6_nbr_usage,    
       :pte_ccf03p.peso_usage6_amt_usage,    
       :pte_ccf03p.peso_usage7_nbr_usage,    
       :pte_ccf03p.peso_usage7_amt_usage,    
       :pte_ccf03p.peso_usage8_nbr_usage,    
       :pte_ccf03p.peso_usage8_amt_usage,    
       :pte_ccf03p.peso_usage9_nbr_usage,    
       :pte_ccf03p.peso_usage9_amt_usage,    
       :pte_ccf03p.peso_usage10_nbr_usage,   
       :pte_ccf03p.peso_usage10_amt_usage,   
       :pte_ccf03p.peso_usage11_nbr_usage,   
       :pte_ccf03p.peso_usage11_amt_usage,   
       :pte_ccf03p.peso_usage12_nbr_usage,   
       :pte_ccf03p.peso_usage12_amt_usage,   
       :pte_ccf03p.peso_usage13_nbr_usage,   
       :pte_ccf03p.peso_usage13_amt_usage,   
       :pte_ccf03p.peso_usage14_nbr_usage,   
       :pte_ccf03p.peso_usage14_amt_usage,   
       
       :pte_ccf03p.dollar_usage1_nbr_usage,  
       :pte_ccf03p.dollar_usage1_amt_usage,  
       :pte_ccf03p.dollar_usage2_nbr_usage,  
       :pte_ccf03p.dollar_usage2_amt_usage,  
       :pte_ccf03p.dollar_usage3_nbr_usage,  
       :pte_ccf03p.dollar_usage3_amt_usage,  
       :pte_ccf03p.dollar_usage4_nbr_usage,  
       :pte_ccf03p.dollar_usage4_amt_usage,  
       :pte_ccf03p.dollar_usage5_nbr_usage,  
       :pte_ccf03p.dollar_usage5_amt_usage,  
       :pte_ccf03p.dollar_usage6_nbr_usage,  
       :pte_ccf03p.dollar_usage6_amt_usage,  
       :pte_ccf03p.dollar_usage7_nbr_usage,  
       :pte_ccf03p.dollar_usage7_amt_usage,  
       :pte_ccf03p.dollar_usage8_nbr_usage,  
       :pte_ccf03p.dollar_usage8_amt_usage,  
       :pte_ccf03p.dollar_usage9_nbr_usage,  
       :pte_ccf03p.dollar_usage9_amt_usage,  
       :pte_ccf03p.dollar_usage10_nbr_usage, 
       :pte_ccf03p.dollar_usage10_amt_usage, 
       :pte_ccf03p.dollar_usage11_nbr_usage, 
       :pte_ccf03p.dollar_usage11_amt_usage, 
       :pte_ccf03p.dollar_usage12_nbr_usage, 
       :pte_ccf03p.dollar_usage12_amt_usage, 
       :pte_ccf03p.dollar_usage13_nbr_usage, 
       :pte_ccf03p.dollar_usage13_amt_usage, 
       :pte_ccf03p.dollar_usage14_nbr_usage, 
       :pte_ccf03p.dollar_usage14_amt_usage, 

       :pte_ccf03p.failed_pin_attempts,
       :pte_ccf03p.date_added,
       :pte_ccf03p.last_maint,
       :pte_ccf03p.status,
       :pte_ccf03p.mcc1_code,
       :pte_ccf03p.mcc1_usage,
       :pte_ccf03p.mcc2_code,
       :pte_ccf03p.mcc2_usage,
       :pte_ccf03p.mcc3_code,
       :pte_ccf03p.mcc3_usage,
       :pte_ccf03p.mcc4_code,
       :pte_ccf03p.mcc4_usage,
       :pte_ccf03p.mcc5_code,
       :pte_ccf03p.mcc5_usage,
       :pte_ccf03p.mcc6_code,
       :pte_ccf03p.mcc6_usage,
       :pte_ccf03p.mcc7_code,
       :pte_ccf03p.mcc7_usage,
       :pte_ccf03p.mcc8_code,
       :pte_ccf03p.mcc8_usage,
       :pte_ccf03p.mcc9_code,
       :pte_ccf03p.mcc9_usage,
       :pte_ccf03p.mcc10_code,
       :pte_ccf03p.mcc10_usage,
       :pte_ccf03p.mcc11_code,
       :pte_ccf03p.mcc11_usage,
       :pte_ccf03p.mcc12_code,
       :pte_ccf03p.mcc12_usage,
       :pte_ccf03p.mcc13_code,
       :pte_ccf03p.mcc13_usage,
       :pte_ccf03p.mcc14_code,
       :pte_ccf03p.mcc14_usage,
       :pte_ccf03p.mcc15_code,
       :pte_ccf03p.mcc15_usage,
       :pte_ccf03p.mcc16_code,
       :pte_ccf03p.mcc16_usage,
       :pte_ccf03p.mcc17_code,
       :pte_ccf03p.mcc17_usage,
       :pte_ccf03p.mcc18_code,
       :pte_ccf03p.mcc18_usage,
       :pte_ccf03p.mcc19_code,
       :pte_ccf03p.mcc19_usage,
       :pte_ccf03p.mcc20_code,
       :pte_ccf03p.mcc20_usage,

       :pte_ccf03p.repeat1_merchant_id,
       :pte_ccf03p.repeat1_nbr_uses,
       :pte_ccf03p.repeat2_merchant_id,
       :pte_ccf03p.repeat2_nbr_uses,
       :pte_ccf03p.repeat3_merchant_id,
       :pte_ccf03p.repeat3_nbr_uses,
       :pte_ccf03p.repeat4_merchant_id,
       :pte_ccf03p.repeat4_nbr_uses,
       :pte_ccf03p.repeat5_merchant_id,
       :pte_ccf03p.repeat5_nbr_uses,
       :pte_ccf03p.repeat6_merchant_id,
       :pte_ccf03p.repeat6_nbr_uses,
       :pte_ccf03p.repeat7_merchant_id,
       :pte_ccf03p.repeat7_nbr_uses,
       :pte_ccf03p.repeat8_merchant_id,
       :pte_ccf03p.repeat8_nbr_uses,
       :pte_ccf03p.repeat9_merchant_id,
       :pte_ccf03p.repeat9_nbr_uses,
       :pte_ccf03p.repeat10_merchant_id,
       :pte_ccf03p.repeat10_nbr_uses,
       :pte_ccf03p.repeat11_merchant_id,
       :pte_ccf03p.repeat11_nbr_uses,
       :pte_ccf03p.repeat12_merchant_id,
       :pte_ccf03p.repeat12_nbr_uses,
       :pte_ccf03p.repeat13_merchant_id,
       :pte_ccf03p.repeat13_nbr_uses,
       :pte_ccf03p.repeat14_merchant_id,
       :pte_ccf03p.repeat14_nbr_uses,
       :pte_ccf03p.repeat15_merchant_id,
       :pte_ccf03p.repeat15_nbr_uses,
       :pte_ccf03p.repeat16_merchant_id,
       :pte_ccf03p.repeat16_nbr_uses,
       :pte_ccf03p.repeat17_merchant_id,
       :pte_ccf03p.repeat17_nbr_uses,
       :pte_ccf03p.repeat18_merchant_id,
       :pte_ccf03p.repeat18_nbr_uses,
       :pte_ccf03p.repeat19_merchant_id,
       :pte_ccf03p.repeat19_nbr_uses,
       :pte_ccf03p.repeat20_merchant_id,
       :pte_ccf03p.repeat20_nbr_uses
      );

   if ( db_error_statics_flag == true )
   {
       	end_time = ptetime_get_time();
    	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
	  		
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : CCF03P ,Fun_Name : db_insert_ccf03p , Duration = %f, CARD TYPE: %s,CARD NUM= %s ",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_ccf03p.card_type,tempcard);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( SQLCODE != 0 )
   {  
	  	memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_insert_ccf03p ,ST1 :%d,ST2 : %d, CARD TYPE: %s, CARD NUM= %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_ccf03p.card_type,tempcard);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_offus_velocity( pOffus_velocity offus_velocity_ptr, pCHAR ErrorMsg )
{

   	INT   cardlen = 0;
	INT   nIndex = 0;
	CHAR  tempcard[21] = {0};
	
   offus_velocity_to_db( offus_velocity_ptr );
	
	if (strlen(pte_offus_velocity.card_nbr)> 0)
	{
		/* Masking card number first 5 and last 4 in clear form remaining all masked. */
		cardlen = strlen( pte_offus_velocity.card_nbr);
		strncpy( tempcard,pte_offus_velocity.card_nbr, cardlen);
		for ( nIndex = cardlen-5; nIndex >= cardlen-11; nIndex-- )
		{
			tempcard[nIndex] = '*';
		}
	}
	
	
   if ( db_error_statics_flag == true )
   {
    	 start_time = ptetime_get_time();
   }
   

   
   EXEC SQL INSERT INTO offus_velocity
     ( card_type,
       card_nbr,
        primary_acct_nbr,
        daily_amt_usage,
        julian_date,
        peso_julian_date,
      dollar_julian_date, 
      peso_usage1_nbr_usage, 
      peso_usage1_amt_usage, 
      peso_usage2_nbr_usage, 
      peso_usage2_amt_usage, 
      peso_usage3_nbr_usage,
      peso_usage3_amt_usage,   
      peso_usage4_nbr_usage,   
      peso_usage4_amt_usage,   
      peso_usage5_nbr_usage,   
      peso_usage5_amt_usage,   
      peso_usage6_nbr_usage,   
      peso_usage6_amt_usage,   
      peso_usage7_nbr_usage,   
      peso_usage7_amt_usage,   
      peso_usage8_nbr_usage,   
      peso_usage8_amt_usage,   
      peso_usage9_nbr_usage,   
      peso_usage9_amt_usage,   
      peso_usage10_nbr_usage,  
      peso_usage10_amt_usage,  
      peso_usage11_nbr_usage,  
      peso_usage11_amt_usage,  
      peso_usage12_nbr_usage,  
      peso_usage12_amt_usage,  
      peso_usage13_nbr_usage,  
      peso_usage13_amt_usage,  
      peso_usage14_nbr_usage,  
      peso_usage14_amt_usage,  

      dollar_usage1_nbr_usage, 
      dollar_usage1_amt_usage, 
      dollar_usage2_nbr_usage, 
      dollar_usage2_amt_usage, 
      dollar_usage3_nbr_usage, 
      dollar_usage3_amt_usage, 
      dollar_usage4_nbr_usage, 
      dollar_usage4_amt_usage, 
      dollar_usage5_nbr_usage, 
      dollar_usage5_amt_usage, 
      dollar_usage6_nbr_usage, 
      dollar_usage6_amt_usage, 
      dollar_usage7_nbr_usage, 
      dollar_usage7_amt_usage, 
      dollar_usage8_nbr_usage, 
      dollar_usage8_amt_usage, 
      dollar_usage9_nbr_usage, 
      dollar_usage9_amt_usage, 
      dollar_usage10_nbr_usage,
      dollar_usage10_amt_usage,
      dollar_usage11_nbr_usage,
      dollar_usage11_amt_usage,
      dollar_usage12_nbr_usage,
      dollar_usage12_amt_usage,
      dollar_usage13_nbr_usage,
      dollar_usage13_amt_usage,
        dollar_usage14_nbr_usage,
        dollar_usage14_amt_usage,
        failed_pin_attempts,
        date_added,
        last_maint,
        status,
        mcc1_code,
        mcc1_usage,
        mcc2_code,
        mcc2_usage,
        mcc3_code,
        mcc3_usage,
        mcc4_code,
        mcc4_usage,
        mcc5_code,
        mcc5_usage,
        mcc6_code,
        mcc6_usage,
        mcc7_code,
        mcc7_usage,
        mcc8_code,
        mcc8_usage,
        mcc9_code,
        mcc9_usage,
        mcc10_code,
        mcc10_usage,
        mcc11_code,
        mcc11_usage,
        mcc12_code,
        mcc12_usage,
        mcc13_code,
        mcc13_usage,
        mcc14_code,
        mcc14_usage,
        mcc15_code,
        mcc15_usage,
        mcc16_code,
        mcc16_usage,
        mcc17_code,
        mcc17_usage,
        mcc18_code,
        mcc18_usage,
        mcc19_code,
        mcc19_usage,
        mcc20_code,
        mcc20_usage,

        repeat1_merchant_id,
        repeat1_nbr_uses,
        repeat2_merchant_id,
        repeat2_nbr_uses,
        repeat3_merchant_id,
        repeat3_nbr_uses,
        repeat4_merchant_id,
        repeat4_nbr_uses,
        repeat5_merchant_id,
        repeat5_nbr_uses,
        repeat6_merchant_id,
        repeat6_nbr_uses,
        repeat7_merchant_id,
        repeat7_nbr_uses,
        repeat8_merchant_id,
        repeat8_nbr_uses,
        repeat9_merchant_id,
        repeat9_nbr_uses,
        repeat10_merchant_id,
        repeat10_nbr_uses,
        repeat11_merchant_id,
        repeat11_nbr_uses,
        repeat12_merchant_id,
        repeat12_nbr_uses,
        repeat13_merchant_id,
        repeat13_nbr_uses,
        repeat14_merchant_id,
        repeat14_nbr_uses,
        repeat15_merchant_id,
        repeat15_nbr_uses,
        repeat16_merchant_id,
        repeat16_nbr_uses,
        repeat17_merchant_id,
        repeat17_nbr_uses,
        repeat18_merchant_id,
        repeat18_nbr_uses,
        repeat19_merchant_id,
        repeat19_nbr_uses,
        repeat20_merchant_id,
        repeat20_nbr_uses
     )     
   VALUES(  :pte_offus_velocity.card_type,
       :pte_offus_velocity.card_nbr,
       :pte_offus_velocity.primary_acct_nbr,
       :pte_offus_velocity.daily_amt_usage,
       :pte_offus_velocity.julian_date,
       :pte_offus_velocity.peso_julian_date,         
       :pte_offus_velocity.dollar_julian_date,       
       :pte_offus_velocity.peso_usage1_nbr_usage,    
       :pte_offus_velocity.peso_usage1_amt_usage,    
       :pte_offus_velocity.peso_usage2_nbr_usage,    
       :pte_offus_velocity.peso_usage2_amt_usage,    
       :pte_offus_velocity.peso_usage3_nbr_usage,    
       :pte_offus_velocity.peso_usage3_amt_usage,    
       :pte_offus_velocity.peso_usage4_nbr_usage,    
       :pte_offus_velocity.peso_usage4_amt_usage,    
       :pte_offus_velocity.peso_usage5_nbr_usage,    
       :pte_offus_velocity.peso_usage5_amt_usage,    
       :pte_offus_velocity.peso_usage6_nbr_usage,    
       :pte_offus_velocity.peso_usage6_amt_usage,    
       :pte_offus_velocity.peso_usage7_nbr_usage,    
       :pte_offus_velocity.peso_usage7_amt_usage,    
       :pte_offus_velocity.peso_usage8_nbr_usage,    
       :pte_offus_velocity.peso_usage8_amt_usage,    
       :pte_offus_velocity.peso_usage9_nbr_usage,    
       :pte_offus_velocity.peso_usage9_amt_usage,    
       :pte_offus_velocity.peso_usage10_nbr_usage,   
       :pte_offus_velocity.peso_usage10_amt_usage,   
       :pte_offus_velocity.peso_usage11_nbr_usage,   
       :pte_offus_velocity.peso_usage11_amt_usage,   
       :pte_offus_velocity.peso_usage12_nbr_usage,   
       :pte_offus_velocity.peso_usage12_amt_usage,   
       :pte_offus_velocity.peso_usage13_nbr_usage,   
       :pte_offus_velocity.peso_usage13_amt_usage,   
       :pte_offus_velocity.peso_usage14_nbr_usage,   
       :pte_offus_velocity.peso_usage14_amt_usage,   
       
       :pte_offus_velocity.dollar_usage1_nbr_usage,  
       :pte_offus_velocity.dollar_usage1_amt_usage,  
       :pte_offus_velocity.dollar_usage2_nbr_usage,  
       :pte_offus_velocity.dollar_usage2_amt_usage,  
       :pte_offus_velocity.dollar_usage3_nbr_usage,  
       :pte_offus_velocity.dollar_usage3_amt_usage,  
       :pte_offus_velocity.dollar_usage4_nbr_usage,  
       :pte_offus_velocity.dollar_usage4_amt_usage,  
       :pte_offus_velocity.dollar_usage5_nbr_usage,  
       :pte_offus_velocity.dollar_usage5_amt_usage,  
       :pte_offus_velocity.dollar_usage6_nbr_usage,  
       :pte_offus_velocity.dollar_usage6_amt_usage,  
       :pte_offus_velocity.dollar_usage7_nbr_usage,  
       :pte_offus_velocity.dollar_usage7_amt_usage,  
       :pte_offus_velocity.dollar_usage8_nbr_usage,  
       :pte_offus_velocity.dollar_usage8_amt_usage,  
       :pte_offus_velocity.dollar_usage9_nbr_usage,  
       :pte_offus_velocity.dollar_usage9_amt_usage,  
       :pte_offus_velocity.dollar_usage10_nbr_usage, 
       :pte_offus_velocity.dollar_usage10_amt_usage, 
       :pte_offus_velocity.dollar_usage11_nbr_usage, 
       :pte_offus_velocity.dollar_usage11_amt_usage, 
       :pte_offus_velocity.dollar_usage12_nbr_usage, 
       :pte_offus_velocity.dollar_usage12_amt_usage, 
       :pte_offus_velocity.dollar_usage13_nbr_usage, 
       :pte_offus_velocity.dollar_usage13_amt_usage, 
       :pte_offus_velocity.dollar_usage14_nbr_usage, 
       :pte_offus_velocity.dollar_usage14_amt_usage, 

       :pte_offus_velocity.failed_pin_attempts,
       :pte_offus_velocity.date_added,
       :pte_offus_velocity.last_maint,
       :pte_offus_velocity.status,
       :pte_offus_velocity.mcc1_code,
       :pte_offus_velocity.mcc1_usage,
       :pte_offus_velocity.mcc2_code,
       :pte_offus_velocity.mcc2_usage,
       :pte_offus_velocity.mcc3_code,
       :pte_offus_velocity.mcc3_usage,
       :pte_offus_velocity.mcc4_code,
       :pte_offus_velocity.mcc4_usage,
       :pte_offus_velocity.mcc5_code,
       :pte_offus_velocity.mcc5_usage,
       :pte_offus_velocity.mcc6_code,
       :pte_offus_velocity.mcc6_usage,
       :pte_offus_velocity.mcc7_code,
       :pte_offus_velocity.mcc7_usage,
       :pte_offus_velocity.mcc8_code,
       :pte_offus_velocity.mcc8_usage,
       :pte_offus_velocity.mcc9_code,
       :pte_offus_velocity.mcc9_usage,
       :pte_offus_velocity.mcc10_code,
       :pte_offus_velocity.mcc10_usage,
       :pte_offus_velocity.mcc11_code,
       :pte_offus_velocity.mcc11_usage,
       :pte_offus_velocity.mcc12_code,
       :pte_offus_velocity.mcc12_usage,
       :pte_offus_velocity.mcc13_code,
       :pte_offus_velocity.mcc13_usage,
       :pte_offus_velocity.mcc14_code,
       :pte_offus_velocity.mcc14_usage,
       :pte_offus_velocity.mcc15_code,
       :pte_offus_velocity.mcc15_usage,
       :pte_offus_velocity.mcc16_code,
       :pte_offus_velocity.mcc16_usage,
       :pte_offus_velocity.mcc17_code,
       :pte_offus_velocity.mcc17_usage,
       :pte_offus_velocity.mcc18_code,
       :pte_offus_velocity.mcc18_usage,
       :pte_offus_velocity.mcc19_code,
       :pte_offus_velocity.mcc19_usage,
       :pte_offus_velocity.mcc20_code,
       :pte_offus_velocity.mcc20_usage,

       :pte_offus_velocity.repeat1_merchant_id,
       :pte_offus_velocity.repeat1_nbr_uses,
       :pte_offus_velocity.repeat2_merchant_id,
       :pte_offus_velocity.repeat2_nbr_uses,
       :pte_offus_velocity.repeat3_merchant_id,
       :pte_offus_velocity.repeat3_nbr_uses,
       :pte_offus_velocity.repeat4_merchant_id,
       :pte_offus_velocity.repeat4_nbr_uses,
       :pte_offus_velocity.repeat5_merchant_id,
       :pte_offus_velocity.repeat5_nbr_uses,
       :pte_offus_velocity.repeat6_merchant_id,
       :pte_offus_velocity.repeat6_nbr_uses,
       :pte_offus_velocity.repeat7_merchant_id,
       :pte_offus_velocity.repeat7_nbr_uses,
       :pte_offus_velocity.repeat8_merchant_id,
       :pte_offus_velocity.repeat8_nbr_uses,
       :pte_offus_velocity.repeat9_merchant_id,
       :pte_offus_velocity.repeat9_nbr_uses,
       :pte_offus_velocity.repeat10_merchant_id,
       :pte_offus_velocity.repeat10_nbr_uses,
       :pte_offus_velocity.repeat11_merchant_id,
       :pte_offus_velocity.repeat11_nbr_uses,
       :pte_offus_velocity.repeat12_merchant_id,
       :pte_offus_velocity.repeat12_nbr_uses,
       :pte_offus_velocity.repeat13_merchant_id,
       :pte_offus_velocity.repeat13_nbr_uses,
       :pte_offus_velocity.repeat14_merchant_id,
       :pte_offus_velocity.repeat14_nbr_uses,
       :pte_offus_velocity.repeat15_merchant_id,
       :pte_offus_velocity.repeat15_nbr_uses,
       :pte_offus_velocity.repeat16_merchant_id,
       :pte_offus_velocity.repeat16_nbr_uses,
       :pte_offus_velocity.repeat17_merchant_id,
       :pte_offus_velocity.repeat17_nbr_uses,
       :pte_offus_velocity.repeat18_merchant_id,
       :pte_offus_velocity.repeat18_nbr_uses,
       :pte_offus_velocity.repeat19_merchant_id,
       :pte_offus_velocity.repeat19_nbr_uses,
       :pte_offus_velocity.repeat20_merchant_id,
       :pte_offus_velocity.repeat20_nbr_uses
      );
   
   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
	   	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : OFFUS_VELOCITY ,Fun_Name : db_insert_offus_velocity , Duration = %f, CARD TYPE: %s,CARD NUM: %s ",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_offus_velocity.card_type,tempcard);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( SQLCODE != 0 )
   {      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_insert_offus_velocity ,ST1 :%d,ST2 : %d, CARD TYPE: %s, CARD NUM: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_offus_velocity.card_type,tempcard);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/

BYTE db_update_offus_velocity( pOffus_velocity offus_velocity_ptr, pCHAR ErrorMsg )
{

	INT   cardlen = 0;
	INT   nIndex = 0;
	CHAR  tempcard[21] = {0};
	
	offus_velocity_to_db( offus_velocity_ptr );
	
		
	if (strlen(pte_offus_velocity.card_nbr)> 0)
	{
		/* Masking card number first 5 and last 4 in clear form remaining all masked. */
		cardlen = strlen( pte_offus_velocity.card_nbr);
		strncpy( tempcard,pte_offus_velocity.card_nbr, cardlen);
		for ( nIndex = cardlen-5; nIndex >= cardlen-11; nIndex-- )
		{
			tempcard[nIndex] = '*';
		}
	}
	
	if ( db_error_statics_flag == true )
	{
	 	 start_time = ptetime_get_time();
	}

   
	/* Make sure we can access the record before attempting to update it. */
EXEC SQL
      SELECT *
      INTO  :db_offus_velocity
      FROM   offus_velocity
      WHERE  card_type = :pte_offus_velocity.card_type  AND  
      		 card_nbr  = :pte_offus_velocity.card_nbr   AND
      		 rownum    = 1
      	For Update NOWAIT;
      
   if ( db_error_statics_flag == true )
   {
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= (double)db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : OFFUS_VELOCITY ,Fun_Name : db_update_offus_velocity_S , Duration = %f,CARD_NUM:%s, CARD TYPE: %s, CARD NUM= %s"
			,DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_offus_velocity.card_nbr,pte_offus_velocity.card_type,pte_offus_velocity.card_nbr);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
   }
   
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
 		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_offus_velocity ,ST1 :%d,ST2 : %d_1,CARD_NUM:%s, CARD TYPE: %s,CARD NUM: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_offus_velocity.card_nbr,pte_offus_velocity.card_type,pte_offus_velocity.card_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
     	 start_time = ptetime_get_time();
   }
   
   EXEC SQL UPDATE offus_velocity    		
  		SET card_type                   = :pte_offus_velocity.card_type,
        	card_nbr                    = :pte_offus_velocity.card_nbr,
       		primary_acct_nbr            = :pte_offus_velocity.primary_acct_nbr,
        	daily_amt_usage             = :pte_offus_velocity.daily_amt_usage,
        	julian_date                 = :pte_offus_velocity.julian_date,
	        peso_julian_date            = :pte_offus_velocity.peso_julian_date,   
	        dollar_julian_date          = :pte_offus_velocity.dollar_julian_date,
	        peso_usage1_nbr_usage       = :pte_offus_velocity.peso_usage1_nbr_usage,  
	        peso_usage1_amt_usage       = :pte_offus_velocity.peso_usage1_amt_usage,    
	        peso_usage2_nbr_usage       = :pte_offus_velocity.peso_usage2_nbr_usage,    
	        peso_usage2_amt_usage       = :pte_offus_velocity.peso_usage2_amt_usage,    
	        peso_usage3_nbr_usage       = :pte_offus_velocity.peso_usage3_nbr_usage,    
	        peso_usage3_amt_usage       = :pte_offus_velocity.peso_usage3_amt_usage,    
	        peso_usage4_nbr_usage       = :pte_offus_velocity.peso_usage4_nbr_usage,    
	        peso_usage4_amt_usage       = :pte_offus_velocity.peso_usage4_amt_usage,    
	        peso_usage5_nbr_usage       = :pte_offus_velocity.peso_usage5_nbr_usage,    
	        peso_usage5_amt_usage       = :pte_offus_velocity.peso_usage5_amt_usage,    
	        peso_usage6_nbr_usage       = :pte_offus_velocity.peso_usage6_nbr_usage,    
	        peso_usage6_amt_usage       = :pte_offus_velocity.peso_usage6_amt_usage,    
	        peso_usage7_nbr_usage       = :pte_offus_velocity.peso_usage7_nbr_usage,    
	        peso_usage7_amt_usage       = :pte_offus_velocity.peso_usage7_amt_usage,    
	        peso_usage8_nbr_usage       = :pte_offus_velocity.peso_usage8_nbr_usage,    
	        peso_usage8_amt_usage       = :pte_offus_velocity.peso_usage8_amt_usage,    
	        peso_usage9_nbr_usage       = :pte_offus_velocity.peso_usage9_nbr_usage,
	        peso_usage9_amt_usage       = :pte_offus_velocity.peso_usage9_amt_usage,
	        peso_usage10_nbr_usage      = :pte_offus_velocity.peso_usage10_nbr_usage,
	        peso_usage10_amt_usage      = :pte_offus_velocity.peso_usage10_amt_usage,
	        peso_usage11_nbr_usage      = :pte_offus_velocity.peso_usage11_nbr_usage,
	        peso_usage11_amt_usage      = :pte_offus_velocity.peso_usage11_amt_usage,
	        peso_usage12_nbr_usage      = :pte_offus_velocity.peso_usage12_nbr_usage,
	        peso_usage12_amt_usage      = :pte_offus_velocity.peso_usage12_amt_usage, 
	        peso_usage13_nbr_usage      = :pte_offus_velocity.peso_usage13_nbr_usage, 
	        peso_usage13_amt_usage      = :pte_offus_velocity.peso_usage13_amt_usage,  
	        peso_usage14_nbr_usage      = :pte_offus_velocity.peso_usage14_nbr_usage, 
	        peso_usage14_amt_usage      = :pte_offus_velocity.peso_usage14_amt_usage,

	        dollar_usage1_nbr_usage     = :pte_offus_velocity.dollar_usage1_nbr_usage,  
	        dollar_usage1_amt_usage     = :pte_offus_velocity.dollar_usage1_amt_usage, 
	        dollar_usage2_nbr_usage     = :pte_offus_velocity.dollar_usage2_nbr_usage, 
	        dollar_usage2_amt_usage     = :pte_offus_velocity.dollar_usage2_amt_usage, 
	        dollar_usage3_nbr_usage     = :pte_offus_velocity.dollar_usage3_nbr_usage, 
	        dollar_usage3_amt_usage     = :pte_offus_velocity.dollar_usage3_amt_usage, 
	        dollar_usage4_nbr_usage     = :pte_offus_velocity.dollar_usage4_nbr_usage, 
	        dollar_usage4_amt_usage     = :pte_offus_velocity.dollar_usage4_amt_usage, 
	        dollar_usage5_nbr_usage     = :pte_offus_velocity.dollar_usage5_nbr_usage, 
	        dollar_usage5_amt_usage     = :pte_offus_velocity.dollar_usage5_amt_usage,  
	        dollar_usage6_nbr_usage     = :pte_offus_velocity.dollar_usage6_nbr_usage, 
	        dollar_usage6_amt_usage     = :pte_offus_velocity.dollar_usage6_amt_usage, 
	        dollar_usage7_nbr_usage     = :pte_offus_velocity.dollar_usage7_nbr_usage, 
	        dollar_usage7_amt_usage     = :pte_offus_velocity.dollar_usage7_amt_usage, 
	        dollar_usage8_nbr_usage     = :pte_offus_velocity.dollar_usage8_nbr_usage,  
	        dollar_usage8_amt_usage     = :pte_offus_velocity.dollar_usage8_amt_usage,
	        dollar_usage9_nbr_usage     = :pte_offus_velocity.dollar_usage9_nbr_usage,
	        dollar_usage9_amt_usage     = :pte_offus_velocity.dollar_usage9_amt_usage, 
	        dollar_usage10_nbr_usage    = :pte_offus_velocity.dollar_usage10_nbr_usage,
	        dollar_usage10_amt_usage    = :pte_offus_velocity.dollar_usage10_amt_usage, 
	        dollar_usage11_nbr_usage    = :pte_offus_velocity.dollar_usage11_nbr_usage, 
	        dollar_usage11_amt_usage    = :pte_offus_velocity.dollar_usage11_amt_usage, 
	        dollar_usage12_nbr_usage    = :pte_offus_velocity.dollar_usage12_nbr_usage,
	        dollar_usage12_amt_usage    = :pte_offus_velocity.dollar_usage12_amt_usage, 
	        dollar_usage13_nbr_usage    = :pte_offus_velocity.dollar_usage13_nbr_usage, 
	        dollar_usage13_amt_usage    = :pte_offus_velocity.dollar_usage13_amt_usage, 
	        dollar_usage14_nbr_usage    = :pte_offus_velocity.dollar_usage14_nbr_usage, 
	        dollar_usage14_amt_usage    = :pte_offus_velocity.dollar_usage14_amt_usage, 

	        failed_pin_attempts         = :pte_offus_velocity.failed_pin_attempts,
	        date_added                  = :pte_offus_velocity.date_added,
	        last_maint                  = :pte_offus_velocity.last_maint,
	        status                      = :pte_offus_velocity.status,
	        mcc1_code                   = :pte_offus_velocity.mcc1_code,
	        mcc1_usage                  = :pte_offus_velocity.mcc1_usage,
	        mcc2_code                   = :pte_offus_velocity.mcc2_code,
	        mcc2_usage                  = :pte_offus_velocity.mcc2_usage,
	        mcc3_code                   = :pte_offus_velocity.mcc3_code,
	        mcc3_usage                  = :pte_offus_velocity.mcc3_usage,
	        mcc4_code                   = :pte_offus_velocity.mcc4_code,
	        mcc4_usage                  = :pte_offus_velocity.mcc4_usage,
	        mcc5_code                   = :pte_offus_velocity.mcc5_code,
	        mcc5_usage                  = :pte_offus_velocity.mcc5_usage,
	        mcc6_code                   = :pte_offus_velocity.mcc6_code,
	        mcc6_usage                  = :pte_offus_velocity.mcc6_usage,
	        mcc7_code                   = :pte_offus_velocity.mcc7_code,
	        mcc7_usage                  = :pte_offus_velocity.mcc7_usage,
	        mcc8_code                   = :pte_offus_velocity.mcc8_code,
	        mcc8_usage                  = :pte_offus_velocity.mcc8_usage,
	        mcc9_code                   = :pte_offus_velocity.mcc9_code,
	        mcc9_usage                  = :pte_offus_velocity.mcc9_usage,
	        mcc10_code                  = :pte_offus_velocity.mcc10_code,
	        mcc10_usage                 = :pte_offus_velocity.mcc10_usage,
	        mcc11_code                  = :pte_offus_velocity.mcc11_code,
	        mcc11_usage                 = :pte_offus_velocity.mcc11_usage,
	        mcc12_code                  = :pte_offus_velocity.mcc12_code,
	        mcc12_usage                 = :pte_offus_velocity.mcc12_usage,
	        mcc13_code                  = :pte_offus_velocity.mcc13_code,
	        mcc13_usage                 = :pte_offus_velocity.mcc13_usage,
	        mcc14_code                  = :pte_offus_velocity.mcc14_code,
	        mcc14_usage                 = :pte_offus_velocity.mcc14_usage,
	        mcc15_code                  = :pte_offus_velocity.mcc15_code,
	        mcc15_usage                 = :pte_offus_velocity.mcc15_usage,
	        mcc16_code                  = :pte_offus_velocity.mcc16_code,
	        mcc16_usage                 = :pte_offus_velocity.mcc16_usage,
	        mcc17_code                  = :pte_offus_velocity.mcc17_code,
	        mcc17_usage                 = :pte_offus_velocity.mcc17_usage,
	        mcc18_code                  = :pte_offus_velocity.mcc18_code,
	        mcc18_usage                 = :pte_offus_velocity.mcc18_usage,
	        mcc19_code                  = :pte_offus_velocity.mcc19_code,
	        mcc19_usage                 = :pte_offus_velocity.mcc19_usage,
	        mcc20_code                  = :pte_offus_velocity.mcc20_code,
	        mcc20_usage                 = :pte_offus_velocity.mcc20_usage,
	
	        repeat1_merchant_id         = :pte_offus_velocity.repeat1_merchant_id,
	        repeat1_nbr_uses            = :pte_offus_velocity.repeat1_nbr_uses,
	        repeat2_merchant_id         = :pte_offus_velocity.repeat2_merchant_id,
	        repeat2_nbr_uses            = :pte_offus_velocity.repeat2_nbr_uses,
	        repeat3_merchant_id         = :pte_offus_velocity.repeat3_merchant_id,
	        repeat3_nbr_uses            = :pte_offus_velocity.repeat3_nbr_uses,
	        repeat4_merchant_id         = :pte_offus_velocity.repeat4_merchant_id,
	        repeat4_nbr_uses            = :pte_offus_velocity.repeat4_nbr_uses,
	        repeat5_merchant_id         = :pte_offus_velocity.repeat5_merchant_id,
	        repeat5_nbr_uses            = :pte_offus_velocity.repeat5_nbr_uses,
	        repeat6_merchant_id         = :pte_offus_velocity.repeat6_merchant_id,
	        repeat6_nbr_uses            = :pte_offus_velocity.repeat6_nbr_uses,
	        repeat7_merchant_id         = :pte_offus_velocity.repeat7_merchant_id,
	        repeat7_nbr_uses            = :pte_offus_velocity.repeat7_nbr_uses,
	        repeat8_merchant_id         = :pte_offus_velocity.repeat8_merchant_id,
	        repeat8_nbr_uses            = :pte_offus_velocity.repeat8_nbr_uses,
	        repeat9_merchant_id         = :pte_offus_velocity.repeat9_merchant_id,
	        repeat9_nbr_uses            = :pte_offus_velocity.repeat9_nbr_uses,
	        repeat10_merchant_id        = :pte_offus_velocity.repeat10_merchant_id,
	        repeat10_nbr_uses           = :pte_offus_velocity.repeat10_nbr_uses,
	        repeat11_merchant_id        = :pte_offus_velocity.repeat11_merchant_id,
	        repeat11_nbr_uses           = :pte_offus_velocity.repeat11_nbr_uses,
	        repeat12_merchant_id        = :pte_offus_velocity.repeat12_merchant_id,
	        repeat12_nbr_uses           = :pte_offus_velocity.repeat12_nbr_uses,
	        repeat13_merchant_id        = :pte_offus_velocity.repeat13_merchant_id,
	        repeat13_nbr_uses           = :pte_offus_velocity.repeat13_nbr_uses,
	        repeat14_merchant_id        = :pte_offus_velocity.repeat14_merchant_id,
	        repeat14_nbr_uses           = :pte_offus_velocity.repeat14_nbr_uses,
	        repeat15_merchant_id        = :pte_offus_velocity.repeat15_merchant_id,
	        repeat15_nbr_uses           = :pte_offus_velocity.repeat15_nbr_uses,
	        repeat16_merchant_id        = :pte_offus_velocity.repeat16_merchant_id,
	        repeat16_nbr_uses           = :pte_offus_velocity.repeat16_nbr_uses,
	        repeat17_merchant_id        = :pte_offus_velocity.repeat17_merchant_id,
	        repeat17_nbr_uses           = :pte_offus_velocity.repeat17_nbr_uses,
	        repeat18_merchant_id        = :pte_offus_velocity.repeat18_merchant_id,
	        repeat18_nbr_uses           = :pte_offus_velocity.repeat18_nbr_uses,
	        repeat19_merchant_id        = :pte_offus_velocity.repeat19_merchant_id,
	        repeat19_nbr_uses           = :pte_offus_velocity.repeat19_nbr_uses,
	        repeat20_merchant_id        = :pte_offus_velocity.repeat20_merchant_id,
	        repeat20_nbr_uses           = :pte_offus_velocity.repeat20_nbr_uses
                  
WHERE card_type = :pte_offus_velocity.card_type AND card_nbr = :pte_offus_velocity.card_nbr;
       
   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
		duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : OFFUS_VELOCITY ,Fun_Name : db_update_offus_velocity_U , Duration = %f,CARD_NUM:%s, CARD TYPE: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_offus_velocity.card_nbr,pte_offus_velocity.card_type);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }    
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_offus_velocity ,ST1 :%d,ST2 : %d_2,CARD_NUM:%s, CARD TYPE: %s,CARD NUM:%s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_offus_velocity.card_nbr,pte_offus_velocity.card_type,pte_offus_velocity.card_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_ccf03p( pCCF03 ccf03p_ptr, pCHAR ErrorMsg )
{
	INT   cardlen = 0;
	INT   nIndex = 0;
	CHAR  tempcard[21] = {0};
	
   ccf03p_to_db( ccf03p_ptr );
        
     if (strlen(pte_ccf03p.card_nbr)> 0)
	{
		/* Masking card number first 5 and last 4 in clear form remaining all masked. */
		cardlen = strlen( pte_ccf03p.card_nbr);
		strncpy( tempcard,pte_ccf03p.card_nbr, cardlen);
		for ( nIndex = cardlen-5; nIndex >= cardlen-11; nIndex-- )
		{
			tempcard[nIndex] = '*';
		}
	}

   if ( db_error_statics_flag == true )
   {
	   	 start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_ccf03p
      FROM   ccf03p
      WHERE  card_type = :pte_ccf03p.card_type  AND  
      		 card_nbr  = :pte_ccf03p.card_nbr   AND
      		 rownum    = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
    	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : CCF03P ,Fun_Name : db_update_ccf03p_S , Duration = %f, CARD TYPE: %s, CARD NUM:%s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_ccf03p.card_type,pte_ccf03p.card_nbr);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */      
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_ccf03p ,ST1 :%d,ST2 : %d_1, CARD TYPE: %s, CARD NUM:%s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_ccf03p.card_type,pte_ccf03p.card_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;

   }

   if ( db_error_statics_flag == true )
   {
      	start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE ccf03p 
   SET card_type                    = :pte_ccf03p.card_type,
        card_nbr                    = :pte_ccf03p.card_nbr,
        primary_acct_nbr            = :pte_ccf03p.primary_acct_nbr,
        daily_amt_usage             = :pte_ccf03p.daily_amt_usage,
        julian_date                 = :pte_ccf03p.julian_date,

        peso_julian_date            = :pte_ccf03p.peso_julian_date,               
        dollar_julian_date          = :pte_ccf03p.dollar_julian_date,           
        peso_usage1_nbr_usage       = :pte_ccf03p.peso_usage1_nbr_usage,    
        peso_usage1_amt_usage       = :pte_ccf03p.peso_usage1_amt_usage,    
        peso_usage2_nbr_usage       = :pte_ccf03p.peso_usage2_nbr_usage,    
        peso_usage2_amt_usage       = :pte_ccf03p.peso_usage2_amt_usage,    
        peso_usage3_nbr_usage       = :pte_ccf03p.peso_usage3_nbr_usage,    
        peso_usage3_amt_usage       = :pte_ccf03p.peso_usage3_amt_usage,    
        peso_usage4_nbr_usage       = :pte_ccf03p.peso_usage4_nbr_usage,    
        peso_usage4_amt_usage       = :pte_ccf03p.peso_usage4_amt_usage,    
        peso_usage5_nbr_usage       = :pte_ccf03p.peso_usage5_nbr_usage,    
        peso_usage5_amt_usage       = :pte_ccf03p.peso_usage5_amt_usage,    
        peso_usage6_nbr_usage       = :pte_ccf03p.peso_usage6_nbr_usage,    
        peso_usage6_amt_usage       = :pte_ccf03p.peso_usage6_amt_usage,    
        peso_usage7_nbr_usage       = :pte_ccf03p.peso_usage7_nbr_usage,    
        peso_usage7_amt_usage       = :pte_ccf03p.peso_usage7_amt_usage,    
        peso_usage8_nbr_usage       = :pte_ccf03p.peso_usage8_nbr_usage,    
        peso_usage8_amt_usage       = :pte_ccf03p.peso_usage8_amt_usage,    
        peso_usage9_nbr_usage       = :pte_ccf03p.peso_usage9_nbr_usage,    
        peso_usage9_amt_usage       = :pte_ccf03p.peso_usage9_amt_usage,    
        peso_usage10_nbr_usage      = :pte_ccf03p.peso_usage10_nbr_usage,   
        peso_usage10_amt_usage      = :pte_ccf03p.peso_usage10_amt_usage,   
        peso_usage11_nbr_usage      = :pte_ccf03p.peso_usage11_nbr_usage,   
        peso_usage11_amt_usage      = :pte_ccf03p.peso_usage11_amt_usage,   
        peso_usage12_nbr_usage      = :pte_ccf03p.peso_usage12_nbr_usage,   
        peso_usage12_amt_usage      = :pte_ccf03p.peso_usage12_amt_usage,   
        peso_usage13_nbr_usage      = :pte_ccf03p.peso_usage13_nbr_usage,   
        peso_usage13_amt_usage      = :pte_ccf03p.peso_usage13_amt_usage,   
        peso_usage14_nbr_usage      = :pte_ccf03p.peso_usage14_nbr_usage,   
        peso_usage14_amt_usage      = :pte_ccf03p.peso_usage14_amt_usage,   

        dollar_usage1_nbr_usage     = :pte_ccf03p.dollar_usage1_nbr_usage,  
        dollar_usage1_amt_usage     = :pte_ccf03p.dollar_usage1_amt_usage,  
        dollar_usage2_nbr_usage     = :pte_ccf03p.dollar_usage2_nbr_usage,  
        dollar_usage2_amt_usage     = :pte_ccf03p.dollar_usage2_amt_usage,  
        dollar_usage3_nbr_usage     = :pte_ccf03p.dollar_usage3_nbr_usage,  
        dollar_usage3_amt_usage     = :pte_ccf03p.dollar_usage3_amt_usage,  
        dollar_usage4_nbr_usage     = :pte_ccf03p.dollar_usage4_nbr_usage,  
        dollar_usage4_amt_usage     = :pte_ccf03p.dollar_usage4_amt_usage,  
        dollar_usage5_nbr_usage     = :pte_ccf03p.dollar_usage5_nbr_usage,  
        dollar_usage5_amt_usage     = :pte_ccf03p.dollar_usage5_amt_usage,  
        dollar_usage6_nbr_usage     = :pte_ccf03p.dollar_usage6_nbr_usage,  
        dollar_usage6_amt_usage     = :pte_ccf03p.dollar_usage6_amt_usage,  
        dollar_usage7_nbr_usage     = :pte_ccf03p.dollar_usage7_nbr_usage,  
        dollar_usage7_amt_usage     = :pte_ccf03p.dollar_usage7_amt_usage,  
        dollar_usage8_nbr_usage     = :pte_ccf03p.dollar_usage8_nbr_usage,  
        dollar_usage8_amt_usage     = :pte_ccf03p.dollar_usage8_amt_usage,  
        dollar_usage9_nbr_usage     = :pte_ccf03p.dollar_usage9_nbr_usage,  
        dollar_usage9_amt_usage     = :pte_ccf03p.dollar_usage9_amt_usage,  
        dollar_usage10_nbr_usage    = :pte_ccf03p.dollar_usage10_nbr_usage, 
        dollar_usage10_amt_usage    = :pte_ccf03p.dollar_usage10_amt_usage, 
        dollar_usage11_nbr_usage    = :pte_ccf03p.dollar_usage11_nbr_usage, 
        dollar_usage11_amt_usage    = :pte_ccf03p.dollar_usage11_amt_usage, 
        dollar_usage12_nbr_usage    = :pte_ccf03p.dollar_usage12_nbr_usage, 
        dollar_usage12_amt_usage    = :pte_ccf03p.dollar_usage12_amt_usage, 
        dollar_usage13_nbr_usage    = :pte_ccf03p.dollar_usage13_nbr_usage, 
        dollar_usage13_amt_usage    = :pte_ccf03p.dollar_usage13_amt_usage, 
        dollar_usage14_nbr_usage    = :pte_ccf03p.dollar_usage14_nbr_usage, 
        dollar_usage14_amt_usage    = :pte_ccf03p.dollar_usage14_amt_usage, 

        failed_pin_attempts         = :pte_ccf03p.failed_pin_attempts,
        date_added                  = :pte_ccf03p.date_added,
        last_maint                  = :pte_ccf03p.last_maint,
        status                      = :pte_ccf03p.status,
        mcc1_code                   = :pte_ccf03p.mcc1_code,
        mcc1_usage                  = :pte_ccf03p.mcc1_usage,
        mcc2_code                   = :pte_ccf03p.mcc2_code,
        mcc2_usage                  = :pte_ccf03p.mcc2_usage,
        mcc3_code                   = :pte_ccf03p.mcc3_code,
        mcc3_usage                  = :pte_ccf03p.mcc3_usage,
        mcc4_code                   = :pte_ccf03p.mcc4_code,
        mcc4_usage                  = :pte_ccf03p.mcc4_usage,
        mcc5_code                   = :pte_ccf03p.mcc5_code,
        mcc5_usage                  = :pte_ccf03p.mcc5_usage,
        mcc6_code                   = :pte_ccf03p.mcc6_code,
        mcc6_usage                  = :pte_ccf03p.mcc6_usage,
        mcc7_code                   = :pte_ccf03p.mcc7_code,
        mcc7_usage                  = :pte_ccf03p.mcc7_usage,
        mcc8_code                   = :pte_ccf03p.mcc8_code,
        mcc8_usage                  = :pte_ccf03p.mcc8_usage,
        mcc9_code                   = :pte_ccf03p.mcc9_code,
        mcc9_usage                  = :pte_ccf03p.mcc9_usage,
        mcc10_code                  = :pte_ccf03p.mcc10_code,
        mcc10_usage                 = :pte_ccf03p.mcc10_usage,
        mcc11_code                  = :pte_ccf03p.mcc11_code,
        mcc11_usage                 = :pte_ccf03p.mcc11_usage,
        mcc12_code                  = :pte_ccf03p.mcc12_code,
        mcc12_usage                 = :pte_ccf03p.mcc12_usage,
        mcc13_code                  = :pte_ccf03p.mcc13_code,
        mcc13_usage                 = :pte_ccf03p.mcc13_usage,
        mcc14_code                  = :pte_ccf03p.mcc14_code,
        mcc14_usage                 = :pte_ccf03p.mcc14_usage,
        mcc15_code                  = :pte_ccf03p.mcc15_code,
        mcc15_usage                 = :pte_ccf03p.mcc15_usage,
        mcc16_code                  = :pte_ccf03p.mcc16_code,
        mcc16_usage                 = :pte_ccf03p.mcc16_usage,
        mcc17_code                  = :pte_ccf03p.mcc17_code,
        mcc17_usage                 = :pte_ccf03p.mcc17_usage,
        mcc18_code                  = :pte_ccf03p.mcc18_code,
        mcc18_usage                 = :pte_ccf03p.mcc18_usage,
        mcc19_code                  = :pte_ccf03p.mcc19_code,
        mcc19_usage                 = :pte_ccf03p.mcc19_usage,
        mcc20_code                  = :pte_ccf03p.mcc20_code,
        mcc20_usage                 = :pte_ccf03p.mcc20_usage,

        repeat1_merchant_id         = :pte_ccf03p.repeat1_merchant_id,
        repeat1_nbr_uses            = :pte_ccf03p.repeat1_nbr_uses,
        repeat2_merchant_id         = :pte_ccf03p.repeat2_merchant_id,
        repeat2_nbr_uses            = :pte_ccf03p.repeat2_nbr_uses,
        repeat3_merchant_id         = :pte_ccf03p.repeat3_merchant_id,
        repeat3_nbr_uses            = :pte_ccf03p.repeat3_nbr_uses,
        repeat4_merchant_id         = :pte_ccf03p.repeat4_merchant_id,
        repeat4_nbr_uses            = :pte_ccf03p.repeat4_nbr_uses,
        repeat5_merchant_id         = :pte_ccf03p.repeat5_merchant_id,
        repeat5_nbr_uses            = :pte_ccf03p.repeat5_nbr_uses,
        repeat6_merchant_id         = :pte_ccf03p.repeat6_merchant_id,
        repeat6_nbr_uses            = :pte_ccf03p.repeat6_nbr_uses,
        repeat7_merchant_id         = :pte_ccf03p.repeat7_merchant_id,
        repeat7_nbr_uses            = :pte_ccf03p.repeat7_nbr_uses,
        repeat8_merchant_id         = :pte_ccf03p.repeat8_merchant_id,
        repeat8_nbr_uses            = :pte_ccf03p.repeat8_nbr_uses,
        repeat9_merchant_id         = :pte_ccf03p.repeat9_merchant_id,
        repeat9_nbr_uses            = :pte_ccf03p.repeat9_nbr_uses,
        repeat10_merchant_id        = :pte_ccf03p.repeat10_merchant_id,
        repeat10_nbr_uses           = :pte_ccf03p.repeat10_nbr_uses,
        repeat11_merchant_id        = :pte_ccf03p.repeat11_merchant_id,
        repeat11_nbr_uses           = :pte_ccf03p.repeat11_nbr_uses,
        repeat12_merchant_id        = :pte_ccf03p.repeat12_merchant_id,
        repeat12_nbr_uses           = :pte_ccf03p.repeat12_nbr_uses,
        repeat13_merchant_id        = :pte_ccf03p.repeat13_merchant_id,
        repeat13_nbr_uses           = :pte_ccf03p.repeat13_nbr_uses,
        repeat14_merchant_id        = :pte_ccf03p.repeat14_merchant_id,
        repeat14_nbr_uses           = :pte_ccf03p.repeat14_nbr_uses,
        repeat15_merchant_id        = :pte_ccf03p.repeat15_merchant_id,
        repeat15_nbr_uses           = :pte_ccf03p.repeat15_nbr_uses,
        repeat16_merchant_id        = :pte_ccf03p.repeat16_merchant_id,
        repeat16_nbr_uses           = :pte_ccf03p.repeat16_nbr_uses,
        repeat17_merchant_id        = :pte_ccf03p.repeat17_merchant_id,
        repeat17_nbr_uses           = :pte_ccf03p.repeat17_nbr_uses,
        repeat18_merchant_id        = :pte_ccf03p.repeat18_merchant_id,
        repeat18_nbr_uses           = :pte_ccf03p.repeat18_nbr_uses,
        repeat19_merchant_id        = :pte_ccf03p.repeat19_merchant_id,
        repeat19_nbr_uses           = :pte_ccf03p.repeat19_nbr_uses,
        repeat20_merchant_id        = :pte_ccf03p.repeat20_merchant_id,
        repeat20_nbr_uses           = :pte_ccf03p.repeat20_nbr_uses
                  
   WHERE card_type = :pte_ccf03p.card_type AND card_nbr = :pte_ccf03p.card_nbr;
   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
	   	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : CCF03P ,Fun_Name : db_update_ccf03p_U , Duration = %f, CARD TYPE: %s, CARD NUM:%s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_ccf03p.card_type,pte_ccf03p.card_nbr);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   } 
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_ccf03p ,ST1 :%d,ST2 : %d_2, CARD TYPE: %s, CARD NUM:%s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_ccf03p.card_type,pte_ccf03p.card_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_acf01( pACF01 acf01_ptr, pCHAR ErrorMsg )
{
   acf01_to_db( acf01_ptr );

   if ( db_error_statics_flag == true )
   {
   		 start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_acf01
      FROM   ACF01
      WHERE  account_type = :pte_acf01.account_type    AND  
      		 account_nbr  = :pte_acf01.account_nbr     AND
      		 rownum       = 1
      For Update NOWAIT;
      
   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
	   	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : ACF01 ,Fun_Name : db_update_acf01_S , Duration = %f, ACC NUM:%s"
			,DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_acf01.account_nbr);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   } 
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_acf01 ,ST1 :%d,ST2 : %d_1, ACC NUM:%s",DB_MsgSubtype1,DB_MsgSubtype2,pte_acf01.account_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   
   if ( db_error_statics_flag == true )
   {
      	 start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE acf01 
   SET  account_type                         = :pte_acf01.account_type,
        account_nbr                          = :pte_acf01.account_nbr,
        status                               = :pte_acf01.status,
        date_added                           = :pte_acf01.date_added,
        maint_date                           = :pte_acf01.maint_date,
        changed_by                           = :pte_acf01.changed_by,
        credit_limit                         = :pte_acf01.credit_limit,
        available                            = :pte_acf01.available,
        outstanding                          = :pte_acf01.outstanding,
        ledger_balance                       = :pte_acf01.ledger_balance,
        cash_limit                           = :pte_acf01.cash_limit,           
        cash_available                       = :pte_acf01.cash_available,       
        cash_outstanding                     = :pte_acf01.cash_outstanding     
                  
   WHERE account_type = :pte_acf01.account_type AND account_nbr = :pte_acf01.account_nbr;
   
   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
		duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : ACF01 ,Fun_Name : db_update_acf01_U , Duration = %f, ACC NUM:%s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_acf01.account_nbr);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }  
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_acf01,ST1 :%d,ST2 : %d,ACC NUM:%s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_acf01.account_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/******************************************************************************************/
/******************************************************************************************/
BYTE db_update_acf01_for_deferred_account (pAUTH_TX	auth_tx, 
										   pACF01 acf01_ptr, 
										   pCHAR ErrorMsg) 
{
	EXEC SQL BEGIN DECLARE SECTION ;
		double TransactionAmount ;
		double DeferredFactor ;
		double DeferredTerm ;
		char available[50] = {0} ;
		char outstanding[50] = {0} ;
	    char creditlimit[50] = {0} ;

        double nDecrementedAvailable ;
		double nIncrementedOutstanding ;
		char strAvailable[50] = {0} ;
		char strOutstanding[50] = {0};
		char strCreditlimit[50] = {0};

		char strMessage [256] = {0} ;
		char strTemp[256] = {0} ;

    EXEC SQL END DECLARE SECTION ;
	
	/* Initialise all the variables */

	TransactionAmount = 0.0 ;
	DeferredFactor = 0.0 ;
	DeferredTerm = 0.0 ;
	nDecrementedAvailable = 0.0 ;
	nIncrementedOutstanding = 0.0 ;
   

    memset (available, 0, sizeof available) ;
	memset (outstanding, 0, sizeof outstanding) ;
	memset (creditlimit, 0, sizeof creditlimit) ;
    
	memset (strAvailable, 0, sizeof strAvailable) ;
	memset (strOutstanding, 0, sizeof strOutstanding ) ;
	memset (strCreditlimit, 0, sizeof strCreditlimit ) ;

	memset (strMessage, 0, sizeof strMessage) ;
    
	/* copies contents of acf01_ptr to pte_acf01 */
	acf01_to_db (acf01_ptr) ;
	
	/* db_acf01_deferred is a structure comprising varchar s of available[13] and oustanding[13] */
	memset (&db_acf01_deferred, 0, sizeof db_acf01_deferred) ;

	/* Get the deferred factor from the transaction */
	DeferredFactor = (strtod (auth_tx->TLF01_details.deferred_factor, 0) / 1000000.0) ;

	/* Get the deferred term from the transaction */
	DeferredTerm = (strtod (auth_tx->TLF01_details.deferred_term_length, 0)) ;

   if ( db_error_statics_flag == true )
   {
  	 start_time = ptetime_get_time();
   }
	/* Get the available and outstanding values for the deferred account 
	   into the db_acf01_deferred structure 
	*/
	EXEC SQL SELECT credit_limit,available, outstanding
	INTO :db_acf01_deferred
	FROM acf01
	WHERE account_type = '07' 					AND 
		  account_nbr  = :pte_acf01.account_nbr AND
		  rownum       = 1
    FOR UPDATE NOWAIT;
    
    if ( db_error_statics_flag == true )
    {
      	end_time = ptetime_get_time();
	   	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : ACF01 ,Fun_Name : db_update_acf01_for_deferred_account_S , Duration = %f, ACC NUM:%s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_acf01.account_nbr);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
    }
	if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
	{
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_acf01_for_deferred_account,ST1 :%d,ST2 : %d_1, ACC NUM:%s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_acf01.account_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

	else
	{
		memcpy(outstanding, db_acf01_deferred.outstanding.arr, db_acf01_deferred.outstanding.len) ;
		memcpy(available, db_acf01_deferred.available.arr, db_acf01_deferred.available.len) ;
		memcpy(creditlimit, db_acf01_deferred.creditlimit.arr, db_acf01_deferred.creditlimit.len) ;

	
		sprintf (strMessage, "available: %s outstanding: %s\n", available, outstanding) ;
		printf (strMessage) ;

		if (auth_tx->TLF01_details.tx_key == AUTH_DEFERRED_PURCHASE_AUTHORIZATION_RESPONSE ||
		    auth_tx->TLF01_details.tx_key == AUTH_DEFERRED_PURCHASE_AUTHORIZATION_OVERRIDE_RESPONSE)
		{
			TransactionAmount = (strtod (auth_tx->TLF01_details.total_amount, 0) / 100.0) ;
			TransactionAmount = TransactionAmount * DeferredFactor * DeferredTerm ; 
			/* Round off to 2 places of decimal */
            sprintf ( strTemp, "%.2f", TransactionAmount ) ;
            TransactionAmount = strtod ( strTemp, 0 );
			/* TransactionAmount = TransactionAmount + (TransactionAmount * DeferredFactor) ;*/

			
			nIncrementedOutstanding = (strtod (outstanding, 0) / 100.0) + TransactionAmount ;
			nDecrementedAvailable   = (strtod (available, 0)   / 100.0) - TransactionAmount ;
		}
        else /* Transaction is a Reversal of a deferred purchase transaction */
        {
           if ( auth_tx->TLF01_details.tx_key == AUTH_VOID_SALE_RESPONSE )
              TransactionAmount = (strtod (auth_tx->TLF01_details.total_amount, 0) / 100.0) ;
           else
              TransactionAmount = (strtod (auth_tx->TLF01_details.reversal_amount, 0) / 100.0) ;

           TransactionAmount = TransactionAmount * DeferredFactor * DeferredTerm ;

           /* Round off to 2 places of decimal */
           sprintf ( strTemp, "%.2f", TransactionAmount ) ;
           TransactionAmount = strtod ( strTemp, 0 );

           nIncrementedOutstanding = (strtod (outstanding, 0) / 100.0) - TransactionAmount ;
           nDecrementedAvailable   = (strtod(creditlimit,0) / 100.0) - nIncrementedOutstanding;
        }

		/* Do not allow negative numbers */
		if (nIncrementedOutstanding <= 0.0) nIncrementedOutstanding = 0.0 ;
		if (nDecrementedAvailable   <= 0.0) nDecrementedAvailable = 0.0 ;

		/* Do not allow numbers to exceed 9999999999.99 */
		if (nIncrementedOutstanding > 9999999999.99) nIncrementedOutstanding = 9999999999.99 ;
   
		memset (strOutstanding, 0, sizeof strOutstanding) ;
		/* Multiply nIncrementedOutstanding by 100 and terminate  the string at the decimal point */
		Convert_Amt_To_Auth_Tx_String_Format(nIncrementedOutstanding, strOutstanding) ;

		/* Left pad with zeroes */
		LeftFill_String_With_Character (sizeof (db_acf01_deferred.outstanding.arr)-1, strOutstanding,'0') ;
		
		memset (strAvailable, 0, sizeof strAvailable) ;

		/* Multiply nDecrementedAvailable by 100 and terminate  the string at the decimal point */
		Convert_Amt_To_Auth_Tx_String_Format(nDecrementedAvailable, strAvailable) ;

		/* Left pad with zeroes */
		LeftFill_String_With_Character (sizeof (db_acf01_deferred.available.arr) -1, strAvailable,'0') ;

		sprintf (strMessage, "strAvailable: %s strOutstanding: %s\n", strAvailable, strOutstanding) ;
		printf (strMessage) ;

        if ( db_error_statics_flag == true )
   		{
     	 	start_time = ptetime_get_time();
   		}
		/* Update the deferred purchase account with the new values */
		EXEC SQL UPDATE acf01 
		SET  
			outstanding = :strOutstanding,
			available   = :strAvailable
		WHERE account_type = '07' AND account_nbr = :pte_acf01.account_nbr ;
        
        if ( db_error_statics_flag == true )
    	{
      		end_time = ptetime_get_time();
     		duration = end_time - start_time;
      		if(duration >= (double)db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : ACF01 ,Fun_Name : db_update_acf01_for_deferred_account_U , Duration = %f, ACC NUM:%s",
				DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_acf01.account_nbr);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
    	}
		if ( SQLCODE != 0 )
		{
			memset(er_buf,0x00,sizeof(er_buf));
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In  db_update_acf01_for_deferred_account,ST1 :%d,ST2 : %d_2, ACC NUM:%s",
			DB_MsgSubtype1,DB_MsgSubtype2,pte_acf01.account_nbr);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
		}
	}
	return PTEMSG_OK ;
   
} /* db_update_acf01_for_deferred_account */


/******************************************************************************/
/******************************************************************************/
BYTE db_select_bon01( pBON01 bon01_ptr, pCHAR ErrorMsg )
{
   memset( &db_bon01, 0, sizeof( db_bon01 ) );

   if ( db_error_statics_flag == true )
  {
   	 start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *
   INTO :db_bon01
   FROM bon01;
   
   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BON01 ,Fun_Name : db_select_bon01 , Duration = %f",
			DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
    }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_select_bon01 ,ST1 :%d,ST2 : %d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bon01 (bon01_ptr);

   return PTEMSG_OK;
}

/******************************************************************************/
/******************************************************************************/
BYTE db_update_bon01 (pBON01 bon01_ptr, pCHAR ErrorMsg )
{
   bon01_to_db( bon01_ptr );

   if ( db_error_statics_flag == true )
   {
     	 start_time = ptetime_get_time();
   }
   
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bon01
      FROM   BON01
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BON01 ,Fun_Name : db_update_bon01_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_bon01 ,ST1 :%d,ST2 : %d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
    	 start_time = ptetime_get_time();
   }
   
   EXEC SQL UPDATE bon01 
   SET minimum_amount            = :pte_bon01.minimum_amount,                  
       program_start_date        = :pte_bon01.program_start_date,        
       program_end_date          = :pte_bon01.program_end_date,          
       transaction_threshold     = :pte_bon01.transaction_threshold,     
       transaction_counter       = :pte_bon01.transaction_counter,       
       maximum_reward            = :pte_bon01.maximum_reward,            
       response_message          = :pte_bon01.response_message;
  
  if ( db_error_statics_flag == true )
  {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BON01 ,Fun_Name : db_update_bon01_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_bon01,ST1 :%d,ST2 : %d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}


/******************************************************************************
 * This function is used to update a TLF01 record during a reversal.
 * Some network controllers insert into TLF01 immediately after sending
 * a reversal response, but prior to forwarding to txcntl.  However,
 * this has the drawback of not containing all the necessary information.
 * The authorizing network controller needs to call this function after
 * it receives a response from the host in order to populate the fields
 * listed below that did not get populated during the insert.
 * NCVSMS is an example of this.
******************************************************************************/
BYTE db_update_tlf01( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
   tlf01_to_db( tlf01_ptr );

   if ( db_error_statics_flag == true )
   {
     	 start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_tlf01
      FROM   TLF01
      WHERE  transaction_id = :pte_tlf01.transaction_id AND
             rownum         = 1
      For Update NOWAIT;
   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : TLF01 ,Fun_Name : db_update_tlf01_S , Duration = %f,device id: %s, MID: %s ,stan: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_tlf01,ST1 :%d,ST2 : %d_1,device id: %s, MID: %s ,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
     	 start_time = ptetime_get_time();
   }
   
   EXEC SQL UPDATE tlf01
   SET   tpdu_id                   = :pte_tlf01.tpdu_id,
         acquirer_id               = :pte_tlf01.acquirer_id,
         card_holder_name          = :pte_tlf01.card_holder_name,
         host_start_time           = :pte_tlf01.host_start_time,
         host_finish_time          = :pte_tlf01.host_finish_time,
         visa_char_indicator       = :pte_tlf01.visa_char_indicator,
         visa_tran_id              = :pte_tlf01.visa_tran_id,
         visa_validation_code      = :pte_tlf01.visa_validation_code,
         mcard_banknet_len         = :pte_tlf01.mcard_banknet_len,
         mcard_banknet             = :pte_tlf01.mcard_banknet,
         ncf01_retired_cwk         = :pte_tlf01.ncf01_retired_cwk,
         authorizing_host_queue    = :pte_tlf01.authorizing_host_queue,
         auth_1                    = :pte_tlf01.auth_1,
         auth_2                    = :pte_tlf01.auth_2,
         response_code             = :pte_tlf01.response_code,
         response_text             = :pte_tlf01.response_text,
         nbr_of_prod_codes         = :pte_tlf01.nbr_of_prod_codes,          
         product1_code             = :pte_tlf01.product1_code,             
         product1_quantity         = :pte_tlf01.product1_quantity,            
         product1_amount           = :pte_tlf01.product1_amount,                  
         product2_code             = :pte_tlf01.product2_code,             
         product2_quantity         = :pte_tlf01.product2_quantity,             
         product2_amount           = :pte_tlf01.product2_amount, 
         product3_code             = :pte_tlf01.product3_code,             
         product3_quantity         = :pte_tlf01.product3_quantity,            
         product3_amount           = :pte_tlf01.product3_amount,    
         product4_code             = :pte_tlf01.product4_code,             
         product4_quantity         = :pte_tlf01.product4_quantity,            
         product4_amount           = :pte_tlf01.product4_amount,                  
         product5_code             = :pte_tlf01.product5_code,             
         product5_quantity         = :pte_tlf01.product5_quantity,             
         product5_amount           = :pte_tlf01.product5_amount,                        
         product6_code             = :pte_tlf01.product6_code,             
         product6_quantity         = :pte_tlf01.product6_quantity,             
         product6_amount           = :pte_tlf01.product6_amount,  
         product7_code             = :pte_tlf01.product7_code,             
         product7_quantity         = :pte_tlf01.product7_quantity,            
         product7_amount           = :pte_tlf01.product7_amount,                  
         product8_code             = :pte_tlf01.product8_code,             
         product8_quantity         = :pte_tlf01.product8_quantity,             
         product8_amount           = :pte_tlf01.product8_amount, 
         product9_code             = :pte_tlf01.product9_code,             
         product9_quantity         = :pte_tlf01.product9_quantity,            
         product9_amount           = :pte_tlf01.product9_amount,                  
         product10_code            = :pte_tlf01.product10_code,             
         product10_quantity        = :pte_tlf01.product10_quantity,             
         product10_amount          = :pte_tlf01.product10_amount,   
         product11_code            = :pte_tlf01.product11_code,             
         product11_quantity        = :pte_tlf01.product11_quantity,            
         product11_amount          = :pte_tlf01.product11_amount,                  
         product12_code            = :pte_tlf01.product12_code,             
         product12_quantity        = :pte_tlf01.product12_quantity,             
         product12_amount          = :pte_tlf01.product12_amount, 
         product13_code            = :pte_tlf01.product13_code,             
         product13_quantity        = :pte_tlf01.product13_quantity,            
         product13_amount          = :pte_tlf01.product13_amount,                  
         product14_code            = :pte_tlf01.product14_code,             
         product14_quantity        = :pte_tlf01.product14_quantity,             
         product14_amount          = :pte_tlf01.product14_amount, 
         product15_code            = :pte_tlf01.product15_code,             
         product15_quantity        = :pte_tlf01.product15_quantity,            
         product15_amount          = :pte_tlf01.product15_amount,                  
         product16_code            = :pte_tlf01.product16_code,             
         product16_quantity        = :pte_tlf01.product16_quantity,             
         product16_amount          = :pte_tlf01.product16_amount, 
         product17_code            = :pte_tlf01.product17_code,             
         product17_quantity        = :pte_tlf01.product17_quantity,            
         product17_amount          = :pte_tlf01.product17_amount,                  
         product18_code            = :pte_tlf01.product18_code,             
         product18_quantity        = :pte_tlf01.product18_quantity,             
         product18_amount          = :pte_tlf01.product18_amount, 
         product19_code            = :pte_tlf01.product19_code,             
         product19_quantity        = :pte_tlf01.product19_quantity,            
         product19_amount          = :pte_tlf01.product19_amount,                  
         product20_code            = :pte_tlf01.product20_code,             
         product20_quantity        = :pte_tlf01.product20_quantity,             
         product20_amount          = :pte_tlf01.product20_amount
   WHERE transaction_id = :pte_tlf01.transaction_id;
   
   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : TLF01 ,Fun_Name : db_update_tlf01_U , Duration = %f,device id: %s, MID: %s ,stan: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_tlf01 ,ST1 :%d,ST2 : %d_2,device id: %s, MID: %s ,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}
/* TF PHANI.. db_update_tlf01_stip_reversal*/
/******************************************************************************/
/* This function is used to update a TLF01_STIP record during a reversal.*/
 
/******************************************************************************/
BYTE db_update_tlf01_stip_reversal( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
	int found_stip_record = 0;
	
    tlf01_to_db( tlf01_ptr );

    /* When an original transaction is processed as STIP and its reversal is also processed in STIP, the same record gets updated in TLF01_STIP.
    As a result only the reversal transaction was getting posted to cadencie during sbatch. Now, for AMEX both the transactions will
    not be posted to cadencue via sbatch if the original transaction is reversed in STIP. */
    
	if ( db_error_statics_flag == true )
    {
		start_time = ptetime_get_time();
    }
  
	/* Make sure we can access the record with STAN before attempting to update it.  */
	EXEC SQL
    SELECT *
    INTO  :db_tlf01_stip
    FROM   tlf01_stip
    WHERE (sys_trace_audit_num = :pte_tlf01.sys_trace_audit_num OR 
    	   sys_trace_audit_num = :pte_tlf01.orig_sys_trace_num) AND //MC LOOPING
    	  card_num			  = :pte_tlf01.card_num 		    AND
      	  merchant_id		  = :pte_tlf01.merchant_id 		    AND
      	  product2_code  	  = 'stndin'  					    AND
      	  rownum = 1  
    For Update NOWAIT;
   
    if ( db_error_statics_flag == true )
    {
    	end_time = ptetime_get_time();
    	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
    	{
    		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
    		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, select query1, ST1 :%d,ST2 : %d,Data_Type : tlf01_stip ,Fun_Name : db_update_tlf01_stip_reversal_S , Duration = %f,device id: %s, MID: %s ,stan: %s",
    				DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
    		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
    	}
    }
   
    if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
    {
	    if ( db_error_statics_flag == true )
   		{
     		start_time = ptetime_get_time();
   		}
  		
	    /* Make sure we can access the record with auth number before attempting to update it.  */
  		EXEC SQL
		SELECT  *
      	INTO  :db_tlf01_stip
      	FROM  tlf01_stip
    	WHERE auth_number = :pte_tlf01.auth_number AND 
    		  card_num    = :pte_tlf01.card_num    AND
    		  merchant_id = :pte_tlf01.merchant_id AND
    		  rownum      = 1 
      	For Update NOWAIT;
   
   		if ( db_error_statics_flag == true )
   		{
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, select query2, ST1 :%d,ST2 : %d,Data_Type : tlf01_stip ,Fun_Name : db_update_tlf01_stip_reversal_S2 , Duration = %f,device id: %s, MID: %s ,stan: %s",
				DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
   		}
  		 
   		if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   		{			
			/* Record is inaccessible with select query 2 suing auth num. Return with error. */
			memset(er_buf,0x00,sizeof(er_buf));
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In  db_update_tlf01_stip_reversal, select query2, ST1 :%d,ST2 : %d_1,device id: %s, MID: %s ,stan: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
   		}
   		else
   		{
   			found_stip_record = 1;
   		}
    }
    else
	{
		found_stip_record = 1;
	}
    
    if(found_stip_record == 1)
    {
		//Select query 1 successfull, update stip table using STAN
		strcpy(pte_tlf01.product2_code, REVERSED);
		 
		if ( db_error_statics_flag == true )
		{
			start_time = ptetime_get_time();
		}
	   
		EXEC SQL UPDATE tlf01_stip
		SET  tpdu_id                   = :pte_tlf01.tpdu_id,
			 acquirer_id               = :pte_tlf01.acquirer_id,
			 card_holder_name          = :pte_tlf01.card_holder_name,
			 host_start_time           = :pte_tlf01.host_start_time,
			 host_finish_time          = :pte_tlf01.host_finish_time,
			 visa_char_indicator       = :pte_tlf01.visa_char_indicator,
			 visa_tran_id              = :pte_tlf01.visa_tran_id,
			 visa_validation_code      = :pte_tlf01.visa_validation_code,
			 mcard_banknet_len         = :pte_tlf01.mcard_banknet_len,
			 mcard_banknet             = :pte_tlf01.mcard_banknet,
			 ncf01_retired_cwk         = :pte_tlf01.ncf01_retired_cwk,
			 authorizing_host_queue    = :pte_tlf01.authorizing_host_queue,
			 auth_1                    = :pte_tlf01.auth_1,
			 auth_2                    = :pte_tlf01.auth_2,
			 response_code             = :pte_tlf01.response_code,
			 response_text             = :pte_tlf01.response_text,
			 nbr_of_prod_codes         = :pte_tlf01.nbr_of_prod_codes,          
			 product1_code             = :pte_tlf01.product1_code,             
			 product1_quantity         = :pte_tlf01.product1_quantity,            
			 product1_amount           = :pte_tlf01.product1_amount,                  
			 product2_code             = :pte_tlf01.product2_code,             
			 product2_quantity         = :pte_tlf01.product2_quantity,             
			 product2_amount           = :pte_tlf01.product2_amount,
			 message_type			   = :pte_tlf01.message_type,                    
			 product20_amount          = :pte_tlf01.product20_amount,
			 actual_amount         	   = :pte_tlf01.actual_amount,
			 sys_trace_audit_num       = :pte_tlf01.sys_trace_audit_num,
			 orig_sys_trace_num 	   = :pte_tlf01.orig_sys_trace_num, 
			 orig_retrieval_ref_num    = :pte_tlf01.retrieval_ref_num,
			 orig_message              = :pte_tlf01.orig_message
		WHERE (sys_trace_audit_num = :pte_tlf01.sys_trace_audit_num OR 
		       sys_trace_audit_num = :pte_tlf01.orig_sys_trace_num  OR
			   auth_number 		   = :pte_tlf01.auth_number) 			AND
			  card_num 	  = :pte_tlf01.card_num  						AND 
			  merchant_id = :pte_tlf01.merchant_id;
				  
		if ( db_error_statics_flag == true )
		{
			end_time = ptetime_get_time();
			duration = end_time - start_time;
			if(duration >= (double)db_error_statics_value)
			{
				memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, update query1, ST1 :%d,ST2 : %d,Data_Type : TLF01 ,Fun_Name : db_update_tlf01_stip_reversal_U , Duration = %f,device id: %s, MID: %s ,stan: %s",
				DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
			}
		}
		
		if ( SQLCODE != 0 )
		{
			memset(er_buf,0x00,sizeof(er_buf));
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In db_update_tlf01_stip_reversal, update query1, ST1 :%d,ST2 : %d_3,device id: %s, MID: %s ,stan: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
		}
    }
    
    return PTEMSG_OK;
}/*End of ..db_update_tlf01_stip_reversal */


/* TF Abhishek.. db_update_tlf01_stip_reversal_for_cup_Acq*/
/******************************************************************************/
/* This function is used to update a TLF01_STIP record during a reversal.*/
 
/******************************************************************************/
BYTE db_update_tlf01_stip_reversal_for_cup_Acq( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{

	char cupMid[16]={0};
	strncpy(cupMid, &pte_tlf01.merchant_id[7],8);
		
    tlf01_to_db( tlf01_ptr );

	if ( db_error_statics_flag == true )
    {
      start_time = ptetime_get_time();
    }
   /* Make sure we can access the record before attempting to update it.  */
   EXEC SQL
     SELECT *
      INTO  :db_tlf01_stip
      FROM   tlf01_stip
      WHERE invoice_number = :pte_tlf01.invoice_number AND
      		card_num= :pte_tlf01.card_num AND
      		(merchant_id = :pte_tlf01.merchant_id OR SUBSTR(merchant_id,8,8) = :cupMid )AND
      		product2_code  = 'stndin'  AND
      		rownum = 1  
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : tlf01_stip ,Fun_Name : db_update_tlf01_stip_reversal_for_cup_Acq_S , Duration = %f,device id: %s, MID: %s ,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
 		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_tlf01_stip_reversal_for_cup_Acq ,ST1 :%d,ST2 : %d_1,device id: %s, MID: %s ,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;

   }
   
   /* When an original transaction is processed as STIP and its reversal is also processed in STIP, the same record gets updated in TLF01_STIP.
    As a result only the reversal transaction was getting posted to cadencie during sbatch. Now, for AMEX both the transactions will
    not be posted to cadencue via sbatch if the original transaction is reversed in STIP. */

  	 strcpy(pte_tlf01.product2_code,REVERSED);
  	 

   if ( db_error_statics_flag == true )
   {
      	start_time = ptetime_get_time();
   }
   
   EXEC SQL UPDATE tlf01_stip
   SET   tpdu_id                   = :pte_tlf01.tpdu_id,
         acquirer_id               = :pte_tlf01.acquirer_id,
         card_holder_name          = :pte_tlf01.card_holder_name,
         host_start_time           = :pte_tlf01.host_start_time,
         host_finish_time          = :pte_tlf01.host_finish_time,
         visa_char_indicator       = :pte_tlf01.visa_char_indicator,
         visa_tran_id              = :pte_tlf01.visa_tran_id,
         visa_validation_code      = :pte_tlf01.visa_validation_code,
         mcard_banknet_len         = :pte_tlf01.mcard_banknet_len,
         mcard_banknet             = :pte_tlf01.mcard_banknet,
         ncf01_retired_cwk         = :pte_tlf01.ncf01_retired_cwk,
         authorizing_host_queue    = :pte_tlf01.authorizing_host_queue,
         auth_1                    = :pte_tlf01.auth_1,
         auth_2                    = :pte_tlf01.auth_2,
         response_code             = :pte_tlf01.response_code,
         response_text             = :pte_tlf01.response_text,
         nbr_of_prod_codes         = :pte_tlf01.nbr_of_prod_codes,          
         product1_code             = :pte_tlf01.product1_code,             
         product1_quantity         = :pte_tlf01.product1_quantity,            
         product1_amount           = :pte_tlf01.product1_amount,                  
         product2_code             = :pte_tlf01.product2_code,             
         product2_quantity         = :pte_tlf01.product2_quantity,             
         product2_amount           = :pte_tlf01.product2_amount,
		 message_type			   = :pte_tlf01.message_type,                    
         product20_amount          = :pte_tlf01.product20_amount,
         actual_amount         	   = :pte_tlf01.actual_amount,
         orig_sys_trace_num 	  =:pte_tlf01.sys_trace_audit_num,
		 orig_retrieval_ref_num   =:pte_tlf01.retrieval_ref_num,
		 orig_message              =:pte_tlf01.orig_message
  WHERE invoice_number = :pte_tlf01.invoice_number and
    	card_num= :pte_tlf01.card_num  and 
    	(merchant_id = :pte_tlf01.merchant_id OR SUBSTR(merchant_id,8,8) = :cupMid )  ;
	          
   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : TLF01 ,Fun_Name : db_update_tlf01_stip_reversal_for_cup_Acq_U , Duration = %f,device id: %s, MID: %s ,stan: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }	          
   if ( SQLCODE != 0 )
   {
   		if ( db_error_statics_flag == true )
   		{
     		 start_time = ptetime_get_time();
   		}
  		/* Make sure we can access the record before attempting to update it.  */
  		 EXEC SQL
      		SELECT  *
      		INTO  :db_tlf01_stip
      		FROM   tlf01_stip
    		WHERE auth_number = :pte_tlf01.auth_number AND 
    			 card_num     = :pte_tlf01.card_num    AND
    			 (merchant_id = :pte_tlf01.merchant_id OR SUBSTR(merchant_id,8,8) = :cupMid ) AND
    			 rownum       = 1 
      	For Update NOWAIT;
   
   		if ( db_error_statics_flag == true )
   		{
     		end_time = ptetime_get_time();
      		duration = end_time - start_time;
      		if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : tlf01_stip ,Fun_Name : db_update_tlf01_stip_reversal_for_cup_Acq_S2 , Duration = %f,device id: %s, MID: %s ,stan: %s",
				DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
   		}
  		 if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   		{
     		 /* Record is inaccessible. Return with error. */
			memset(er_buf,0x00,sizeof(er_buf));
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In  db_update_tlf01_stip_reversal_for_cup_Acq ,ST1 :%d,ST2 : %d_2,device id: %s, MID: %s ,stan: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;

   		}
    	if ( db_error_statics_flag == true )
    	{
     	 	start_time = ptetime_get_time();
    	}
    
   		EXEC SQL UPDATE tlf01_stip
  	 	SET   product1_code             = :pte_tlf01.product1_code,             
         product1_quantity         = :pte_tlf01.product1_quantity,            
         product1_amount           = :pte_tlf01.product1_amount,                  
         product2_code             = :pte_tlf01.product2_code
          WHERE auth_number = :pte_tlf01.auth_number and card_num= :pte_tlf01.card_num 
	          and (merchant_id = :pte_tlf01.merchant_id OR SUBSTR(merchant_id,8,8) = :cupMid ) ;
	          
	    if ( db_error_statics_flag == true )
   	    {
      		end_time = ptetime_get_time();
     		duration = end_time - start_time;
      		if(duration >= (double)db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : TLF01 ,Fun_Name : db_update_tlf01_stip_reversal_for_cup_Acq_U2 , Duration = %f,device id: %s, MID: %s ,stan: %s",
				DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
   		}
   	}

   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"db_update_tlf01_stip_reversal_for_cup_Acq ,ST1 :%d,ST2 : %d_3,device id: %s, MID: %s ,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}/*End of ..db_update_tlf01_stip_reversal_for_cup_Acq */



/* TF PHANI*/
/*******************************************************************************/
 /* This function is used to update a TLF01_STIP record during a Void.*/

/******************************************************************************/
BYTE db_update_tlf01_stip_void( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
   tlf01_to_db( tlf01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
  /* Make sure we can access the record before attempting to update it.  */
   EXEC SQL
      SELECT  *
      INTO  :db_tlf01_stip
      FROM   tlf01_stip
    WHERE retrieval_ref_num = :pte_tlf01.retrieval_ref_num AND
       		card_num = :pte_tlf01.card_num AND
        	merchant_id= :pte_tlf01.merchant_id AND
      		rownum = 1  
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : tlf01_stip ,Fun_Name : db_update_tlf01_stip_void_S , Duration = %f,device id: %s, MID: %s ,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_tlf01_stip_void ,ST1 :%d,ST2 : %d_1,device id: %s, MID: %s ,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }


   if ( db_error_statics_flag == true )
   {
     start_time = ptetime_get_time();
   }
   
   EXEC SQL UPDATE tlf01_stip
   SET   card_holder_name          = :pte_tlf01.card_holder_name,
         message_type			   = :pte_tlf01.message_type,
		 processing_code		   = :pte_tlf01.processing_code,
         response_code             = :pte_tlf01.response_code,
		 orig_amount			   = :pte_tlf01.orig_amount,
		 sys_trace_audit_num	   = :pte_tlf01.sys_trace_audit_num,
		 orig_sys_trace_num		   = :pte_tlf01.orig_sys_trace_num,
		 orig_retrieval_ref_num	   = :pte_tlf01.orig_retrieval_ref_num,
         nbr_of_prod_codes         = :pte_tlf01.nbr_of_prod_codes,          
         product1_code             = :pte_tlf01.product1_code,             
         product1_quantity         = :pte_tlf01.product1_quantity,            
         product1_amount           = :pte_tlf01.product1_amount,                  
         product2_code             = :pte_tlf01.product2_code,             
         product2_quantity         = :pte_tlf01.product2_quantity,             
         product2_amount           = :pte_tlf01.product2_amount    
   WHERE retrieval_ref_num = :pte_tlf01.retrieval_ref_num and card_num = :pte_tlf01.card_num
     and merchant_id= :pte_tlf01.merchant_id  ;
   
    if ( db_error_statics_flag == true )
    {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : TLF01 ,Fun_Name : db_update_tlf01_stip_void_U , Duration = %f,device id: %s, MID: %s ,stan: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
    }
 	if ( SQLCODE != 0 )
   	{
   				 /* Make sure we can access the record before attempting to update it.  */
  			 EXEC SQL
      		 SELECT  *
      			INTO  :db_tlf01_stip
     			 FROM   tlf01_stip
   				  WHERE auth_number = :pte_tlf01.auth_number AND
   				  	    card_num    = :pte_tlf01.card_num    AND
   				  	    merchant_id = :pte_tlf01.merchant_id AND
   				  	    rownum      =  1
     			 For Update NOWAIT;
   
   			if ( db_error_statics_flag == true )
   			{
      			end_time = ptetime_get_time();
      			duration = end_time - start_time;
      			if(duration >= db_error_statics_value)
	  			{
	  				memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
					sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : tlf01_stip ,Fun_Name : db_update_tlf01_stip_void_S2 , Duration = %f,device id: %s, MID: %s ,stan: %s",
					DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
					Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  			}
   			}
   			if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   			{
   				/* Record is inaccessible. Return with error. */
				memset(er_buf,0x00,sizeof(er_buf));
				DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
				sprintf(er_buf,"In  db_update_tlf01_stip_void ,ST1 :%d,ST2 : %d_2,device id: %s, MID: %s ,stan: %s",
				DB_MsgSubtype1,DB_MsgSubtype2,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
				strcat(er_buf,ErrorMsg);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
				return DB_rcode;

   			}
   	    if ( db_error_statics_flag == true )
   		{
     	 	start_time = ptetime_get_time();
   		}
   		EXEC SQL UPDATE tlf01_stip
   		SET   product1_code             = :pte_tlf01.product1_code,             
         product1_quantity         = :pte_tlf01.product1_quantity,            
         product1_amount           = :pte_tlf01.product1_amount,                  
         product2_code             = :pte_tlf01.product2_code
          WHERE auth_number = :pte_tlf01.auth_number and card_num= :pte_tlf01.card_num 
	          and merchant_id= :pte_tlf01.merchant_id  ;
	   
	   if ( db_error_statics_flag == true )
       {
      		end_time = ptetime_get_time();
     		duration = end_time - start_time;
      		if(duration >= (double)db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : TLF01 ,Fun_Name : db_update_tlf01_stip_void_U2 , Duration = %f,device id: %s, MID: %s ,stan: %s",
				DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
       }
   	}


   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_tlf01_stip_void ,ST1 :%d,ST2 : %d_3,device id: %s, MID: %s ,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   return PTEMSG_OK;
}/* End of db_update_tlf01_stip_void*/
/* TF PHANI*/

#ifdef BDOR_62_PREAUTH_VOID
/******************************************************************************/
BYTE db_update_tlf01_stip_void_preauth( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{	
	char preauth_type[2] = {0};
	
    tlf01_to_db( tlf01_ptr );

	if ( db_error_statics_flag == true )
    {
      start_time = ptetime_get_time();
    }
	
    /* Make sure we can access the record before attempting to update it.  */
    EXEC SQL
      SELECT  *
      INTO  :db_tlf01_stip
      FROM   tlf01_stip
      WHERE  card_num 		   = :pte_tlf01.card_num 		  AND
        	 merchant_id	   = :pte_tlf01.merchant_id 	  AND
			 retrieval_ref_num = :pte_tlf01.retrieval_ref_num AND
      		 rownum = 1  
      For Update NOWAIT;
   
    if ( db_error_statics_flag == true )
    {
    	end_time = ptetime_get_time();
    	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
    	{
    		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
    		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : tlf01_stip ,Fun_Name : db_update_tlf01_stip_void_preauth_S , Duration = %f,device id: %s, MID: %s ,stan: %s",
    				DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
    		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
    	}
    }
    if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
    {
    	/* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_tlf01_stip_void_preauth ,ST1 :%d,ST2 : %d_1,device id: %s, MID: %s ,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

    memcpy( preauth_type, db_tlf01_stip.saf.arr, db_tlf01_stip.saf.len);
    
    if ( db_error_statics_flag == true )
    {
    	start_time = ptetime_get_time();
    }
   
    if(preauth_type[0] == INCREMENTAL_AUTH)
    {
    	//it is incremental preauth, void only the incremental preauth
 	    EXEC SQL UPDATE tlf01_stip
 	    SET   product2_code  = :pte_tlf01.product2_code,
		  	  tx_key         = :pte_tlf01.tx_key,
			  processing_code= :pte_tlf01.processing_code,
			  sys_trace_audit_num = :pte_tlf01.sys_trace_audit_num,
			  orig_sys_trace_num  = :pte_tlf01.orig_sys_trace_num
 	    WHERE card_num 	 = :pte_tlf01.card_num 		AND
 		 	  merchant_id = :pte_tlf01.merchant_id 	AND
			  terminal_id = :pte_tlf01.terminal_id  AND
			  retrieval_ref_num = :pte_tlf01.retrieval_ref_num;
    }
    else
    {
    	//it is original preauth, void all the preauths
	    EXEC SQL UPDATE tlf01_stip
	    SET   product2_code  = :pte_tlf01.product2_code,
			  tx_key         = :pte_tlf01.tx_key,
			  processing_code= :pte_tlf01.processing_code,
			  sys_trace_audit_num = :pte_tlf01.sys_trace_audit_num,
			  orig_sys_trace_num  = :pte_tlf01.orig_sys_trace_num
	    WHERE card_num	 = :pte_tlf01.card_num 		AND
			  merchant_id = :pte_tlf01.merchant_id 	AND
			  terminal_id = :pte_tlf01.terminal_id;
    }
    
    if ( db_error_statics_flag == true )
    {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : TLF01 ,Fun_Name : db_update_tlf01_stip_void_preauth_U , Duration = %f,device id: %s, MID: %s ,stan: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
    }

    if ( SQLCODE != 0 )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_tlf01_stip_void_preauth ,ST1 :%d,ST2 : %d_3,device id: %s, MID: %s ,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }

    return PTEMSG_OK;
}
#endif

BYTE db_check_tlf01_stip_reversal( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
   tlf01_to_db( tlf01_ptr );

	if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
  /* Make sure we can access the record before attempting to update it.  */
   EXEC SQL
     SELECT *
      INTO  :db_tlf01_stip
      FROM   tlf01_stip
      WHERE sys_trace_audit_num = :pte_tlf01.sys_trace_audit_num AND
      		card_num= :pte_tlf01.card_num AND
      		merchant_id= :pte_tlf01.merchant_id AND
      		product2_code  = 'revers'  AND
      		rownum = 1  
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : tlf01_stip ,Fun_Name : db_update_tlf01_stip_reversal_S , Duration = %f,device id: %s, MID: %s ,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
 		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_tlf01_stip_reversal ,ST1 :%d,ST2 : %d_1,device id: %s, MID: %s ,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;

   }
   return PTEMSG_OK;
  }
/******************************************************************************/
 /* This function is used to update a TLF01_STIP record during a Adjust.	*/
/******************************************************************************/
BYTE db_update_tlf01_stip_adjust( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
   tlf01_to_db( tlf01_ptr );

   if ( db_error_statics_flag == true )
   {
     start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_tlf01
      FROM   TLF01_STIP
      WHERE  retrieval_ref_num = :pte_tlf01.retrieval_ref_num AND 
	  		 card_num          = :pte_tlf01.card_num          AND
	  		 rownum            = 1	
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : TLF01 ,Fun_Name : db_update_tlf01_stip_adjust_S , Duration = %f,device id: %s, MID: %s ,stan: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration, pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */
    	memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_tlf01_stip_adjust,ST1 :%d,ST2 : %d_1,device id: %s, MID: %s ,stan: %s",
		DB_MsgSubtype1,DB_MsgSubtype2, pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
     start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE tlf01_stip
   SET   transaction_id            = :pte_tlf01.transaction_id,
         card_holder_name          = :pte_tlf01.card_holder_name,
         message_type			   = :pte_tlf01.message_type,
		 total_amount			   = :pte_tlf01.total_amount,
		 processing_code		   = :pte_tlf01.processing_code,
         response_code             = :pte_tlf01.response_code,
		 orig_amount			   = :pte_tlf01.orig_amount,
		 sys_trace_audit_num	   = :pte_tlf01.sys_trace_audit_num,
		 orig_sys_trace_num		   = :pte_tlf01.orig_sys_trace_num,
		 orig_retrieval_ref_num	   = :pte_tlf01.orig_retrieval_ref_num,
         nbr_of_prod_codes         = :pte_tlf01.nbr_of_prod_codes,          
         product1_code             = :pte_tlf01.product1_code,             
         product1_quantity         = :pte_tlf01.product1_quantity,            
         product1_amount           = :pte_tlf01.product1_amount,                  
         product2_code             = :pte_tlf01.product2_code,             
         product2_quantity         = :pte_tlf01.product2_quantity,             
         product2_amount           = :pte_tlf01.product2_amount 
         
   WHERE retrieval_ref_num = :pte_tlf01.retrieval_ref_num and card_num = :pte_tlf01.card_num;
   
   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : TLF01 ,Fun_Name : db_update_tlf01_stip_adjust_U , Duration = %f,device id: %s, MID: %s ,stan: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration, pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_tlf01_stip_adjust,ST1 :%d,ST2 : %d_2,device id: %s, MID: %s ,stan: %",
		DB_MsgSubtype1,DB_MsgSubtype2, pte_tlf01.terminal_id,pte_tlf01.merchant_id,pte_tlf01.sys_trace_audit_num);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}/* End of db_update_tlf01_stip_adjust*/
/******************************************************************************/
 /*  NAME:         db_update_fguard												*/
 /*  DESCRIPTION:  This function makes the call to the database to update
 	 a record in FGUARD.  It will update any field from the	*/                
 /*                input data that contains information.						*/
 /*  INPUTS:       fguard_ptr - Structure containing fields to be updated		*/
 /*  OUTPUTS:      ErrorMsg - Error message if database call failed.			*/
 /*  RTRN VALUE:   A PTE code is returned:										*/
 /*                       PTEMSG_OK  if no errors else a code to identify		*/
 /*                       the reason for the failure.							*/
 /*  AUTHOR:       D. Irby														*/
 
 /******************************************************************************/
BYTE db_update_fguard( pFGUARD fguard_ptr, pCHAR ErrorMsg )
{
   BYTE   retval;
   FGUARD fguard_temp;

   memset( &db_fguard, 0x00, sizeof(db_fguard) );
   memcpy( pte_fguard.transaction_id,
           fguard_ptr->transaction_id,
           sizeof(pte_fguard.transaction_id) );

   if ( db_error_statics_flag == true )
   {
     start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_fguard
   FROM FGUARD
   WHERE transaction_id = :pte_fguard.transaction_id
   FOR UPDATE NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : FGUARD ,Fun_Name : db_update_fguard_S , Duration = %f, TXN ID: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_fguard.transaction_id);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_fguard ,ST1 :%d,ST2 : %d_1,TXN ID: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,pte_fguard.transaction_id);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   else
   {
      db_to_fguard( &fguard_temp );
      memcpy( &pte_fguard, &fguard_temp, sizeof(FGUARD) );

      /* Update only the fields that have data in them. */
      memcpy( pte_fguard.transaction_id, fguard_ptr->transaction_id, sizeof(pte_fguard.transaction_id) );
      if (fguard_ptr->timestamp[0] != 0x00 )
         memcpy( pte_fguard.timestamp, fguard_ptr->timestamp, sizeof(pte_fguard.timestamp) );

      if (fguard_ptr->message_type[0] != 0x00 )
         memcpy( pte_fguard.message_type, fguard_ptr->message_type, sizeof(pte_fguard.message_type) );

      if (fguard_ptr->card_num[0] != 0x00 )
         memcpy( pte_fguard.card_num, fguard_ptr->card_num, sizeof(pte_fguard.card_num) );

      if (fguard_ptr->processing_code[0] != 0x00 )
         memcpy( pte_fguard.processing_code, fguard_ptr->processing_code, sizeof(pte_fguard.processing_code) );

      if (fguard_ptr->amount_peso[0] != 0x00 )
         memcpy( pte_fguard.amount_peso, fguard_ptr->amount_peso, sizeof(pte_fguard.amount_peso) );

      if (fguard_ptr->amount_usd[0] != 0x00 )
         memcpy( pte_fguard.amount_usd, fguard_ptr->amount_usd, sizeof(pte_fguard.amount_usd) );

      if (fguard_ptr->gmt[0] != 0x00 )
         memcpy( pte_fguard.gmt, fguard_ptr->gmt, sizeof(pte_fguard.gmt) );

      if (fguard_ptr->sys_trace_audit_num[0] != 0x00 )
         memcpy( pte_fguard.sys_trace_audit_num, fguard_ptr->sys_trace_audit_num, sizeof(pte_fguard.sys_trace_audit_num) );

      if (fguard_ptr->mcc[0] != 0x00 )
         memcpy( pte_fguard.mcc, fguard_ptr->mcc, sizeof(pte_fguard.mcc) );

      if (fguard_ptr->country_code[0] != 0x00 )
         memcpy( pte_fguard.country_code, fguard_ptr->country_code, sizeof(pte_fguard.country_code) );

      if (fguard_ptr->pos_entry_mode[0] != 0x00 )
         memcpy( pte_fguard.pos_entry_mode, fguard_ptr->pos_entry_mode, sizeof(pte_fguard.pos_entry_mode) );

      if (fguard_ptr->pos_condition_code[0] != 0x00 )
         memcpy( pte_fguard.pos_condition_code, fguard_ptr->pos_condition_code, sizeof(pte_fguard.pos_condition_code) );

      if (fguard_ptr->acquiring_id[0] != 0x00 )
         memcpy( pte_fguard.acquiring_id, fguard_ptr->acquiring_id, sizeof(pte_fguard.acquiring_id) );

      if (fguard_ptr->auth_number[0] != 0x00 )
         memcpy( pte_fguard.auth_number, fguard_ptr->auth_number, sizeof(pte_fguard.auth_number) );

      if (fguard_ptr->response_code[0] != 0x00 )
         memcpy( pte_fguard.response_code, fguard_ptr->response_code, sizeof(pte_fguard.response_code) );

      if (fguard_ptr->terminal_id[0] != 0x00 )
         memcpy( pte_fguard.terminal_id, fguard_ptr->terminal_id, sizeof(pte_fguard.terminal_id) );

      if (fguard_ptr->merchant_id[0] != 0x00 )
         memcpy( pte_fguard.merchant_id, fguard_ptr->merchant_id, sizeof(pte_fguard.merchant_id) );

      if (fguard_ptr->card_acceptor_name[0] != 0x00 )
         memcpy( pte_fguard.card_acceptor_name, fguard_ptr->card_acceptor_name, sizeof(pte_fguard.card_acceptor_name) );

      if (fguard_ptr->card_acceptor_city[0] != 0x00 )
         memcpy( pte_fguard.card_acceptor_city, fguard_ptr->card_acceptor_city, sizeof(pte_fguard.card_acceptor_city) );

      if (fguard_ptr->card_acceptor_country[0] != 0x00 )
         memcpy( pte_fguard.card_acceptor_country, fguard_ptr->card_acceptor_country, sizeof(pte_fguard.card_acceptor_country) );

      if (fguard_ptr->currency_code_txn[0] != 0x00 )
         memcpy( pte_fguard.currency_code_txn, fguard_ptr->currency_code_txn, sizeof(pte_fguard.currency_code_txn) );

      if (fguard_ptr->currency_code_billing[0] != 0x00 )
         memcpy( pte_fguard.currency_code_billing, fguard_ptr->currency_code_billing, sizeof(pte_fguard.currency_code_billing) );

      if (fguard_ptr->pos_info[0] != 0x00 )
         memcpy( pte_fguard.pos_info, fguard_ptr->pos_info, sizeof(pte_fguard.pos_info) );

      if (fguard_ptr->status != 0x00 )
         pte_fguard.status = fguard_ptr->status;

      if (fguard_ptr->system_date[0] != 0x00 )
         memcpy( pte_fguard.system_date, fguard_ptr->system_date, sizeof(pte_fguard.system_date) );

      if (fguard_ptr->result_code[0] != 0x00 )
         memcpy( pte_fguard.result_code, fguard_ptr->result_code, sizeof(pte_fguard.result_code) );

      if (fguard_ptr->application[0] != 0x00 )
         memcpy( pte_fguard.application, fguard_ptr->application, sizeof(pte_fguard.application) );

      if (fguard_ptr->rule_domain[0] != 0x00 )
         memcpy( pte_fguard.rule_domain, fguard_ptr->rule_domain, sizeof(pte_fguard.rule_domain) );

      if (fguard_ptr->caller_id[0] != 0x00 )
         memcpy( pte_fguard.caller_id, fguard_ptr->caller_id, sizeof(pte_fguard.caller_id) );

      if (fguard_ptr->caller_msg_id[0] != 0x00 )
         memcpy( pte_fguard.caller_msg_id, fguard_ptr->caller_msg_id, sizeof(pte_fguard.caller_msg_id) );

      if (fguard_ptr->result_text[0] != 0x00 )
         memcpy( pte_fguard.result_text, fguard_ptr->result_text, sizeof(pte_fguard.result_text) );

      if (fguard_ptr->product[0] != 0x00 )
         memcpy( pte_fguard.product, fguard_ptr->product, sizeof(pte_fguard.product) );


       if ( db_error_statics_flag == true )
   	   {
        start_time = ptetime_get_time();
      }
      EXEC SQL UPDATE FGUARD
      SET   timestamp             = :pte_fguard.timestamp,
            message_type          = :pte_fguard.message_type,
            card_num              = :pte_fguard.card_num,
            processing_code       = :pte_fguard.processing_code,
            amount_peso           = :pte_fguard.amount_peso,
            amount_usd            = :pte_fguard.amount_usd,
            gmt                   = :pte_fguard.gmt,
            sys_trace_audit_num   = :pte_fguard.sys_trace_audit_num,
            mcc                   = :pte_fguard.mcc,
            country_code          = :pte_fguard.country_code,
            pos_entry_mode        = :pte_fguard.pos_entry_mode,
            pos_condition_code    = :pte_fguard.pos_condition_code,
            acquiring_id          = :pte_fguard.acquiring_id,
            auth_number           = :pte_fguard.auth_number,
            response_code         = :pte_fguard.response_code,
            terminal_id           = :pte_fguard.terminal_id,
            merchant_id           = :pte_fguard.merchant_id,
            card_acceptor_name    = :pte_fguard.card_acceptor_name,
            card_acceptor_city    = :pte_fguard.card_acceptor_city,
            card_acceptor_country = :pte_fguard.card_acceptor_country,
            currency_code_txn     = :pte_fguard.currency_code_txn,
            currency_code_billing = :pte_fguard.currency_code_billing,
            pos_info              = :pte_fguard.pos_info,
            status                = :pte_fguard.status,
            system_date           = :pte_fguard.system_date,
            result_code           = :pte_fguard.result_code,
            application           = :pte_fguard.application,
            rule_domain           = :pte_fguard.rule_domain,
            caller_id             = :pte_fguard.caller_id,
            caller_msg_id         = :pte_fguard.caller_msg_id,
            result_text           = :pte_fguard.result_text,
            product               = :pte_fguard.product

      WHERE transaction_id = :pte_fguard.transaction_id;

      if ( db_error_statics_flag == true )
      {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
      	 if(duration >= (double)db_error_statics_value)
	  	 {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : FGUARD ,Fun_Name : db_update_fguard_U , Duration = %f,TXN ID: %s",
			 DB_MsgSubtype1,DB_MsgSubtype2,duration,pte_fguard.transaction_id);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
      }
      if ( SQLCODE != 0 )
      {
			memset(er_buf,0x00,sizeof(er_buf));
			retval = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In db_update_fguard ,ST1 :%d,ST2 : %d_2,TXN ID: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,pte_fguard.transaction_id);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	 }
     else
         retval = PTEMSG_OK;
   }
   return( retval );
}



/******************************************************************************
 *
 *  NAME:         db_insert_emv01
 *
 *  DESCRIPTION:  This function makes the call to the database to insert a
 *                record into EMV01.
 *
 *  INPUTS:       emv01_ptr - EMV01 structure
 *
 *  OUTPUTS:      ErrorMsg - Error message if database call failed.
 *
 *  RTRN VALUE:   A PTE code is returned:
 *                       PTEMSG_OK  if no errors else a code to identify
 *                       the reason for the failure.
 *
 *  AUTHOR:       D. Irby
 *
 ******************************************************************************/
BYTE db_insert_emv01( pEMV01 emv01_ptr, pCHAR ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
      char  tran_id[21];
      char  tag[6];
      char  len[4];
      char  emv_data[129];
      char  sys_date[9];
   EXEC SQL END DECLARE SECTION;

   memset( tran_id,  0x00, sizeof(tran_id)  );
   memset( tag,      0x00, sizeof(tag)      );
   memset( len,      0x00, sizeof(len)      );
   memset( emv_data, 0x00, sizeof(emv_data) );
   memset( sys_date, 0x00, sizeof(sys_date) );

   memcpy( tran_id,  emv01_ptr->transaction_id, sizeof(tran_id)  );
   memcpy( tag,      emv01_ptr->tag,            sizeof(tag)      );
   memcpy( len,      emv01_ptr->len,            sizeof(len)      );
   memcpy( emv_data, emv01_ptr->emv_data,       sizeof(emv_data) );
   memcpy( sys_date, emv01_ptr->system_date,    sizeof(sys_date) );

   if ( db_error_statics_flag == true )
   {
       start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO emv01
      (  transaction_id,
         tag,
         len,
         emv_data,
         system_date
      )
   VALUES
      (  :tran_id,
         :tag,
         :len,
         :emv_data,
         :sys_date
      );
   
   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : EMV01 ,Fun_Name : db_insert_emv01 , Duration = %f, Txn ID : %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,tran_id);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_emv01,ST1 :%d , ST2 : %d , Txn ID : %s , Tag : %s , System date : %s  ",
		DB_MsgSubtype1,DB_MsgSubtype2,tran_id,tag,sys_date);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}


/******************************************************************************
 *
 *  NAME:         db_insert_emvraw
 *
 *  DESCRIPTION:  This function makes the call to the database to insert a
 *                record into EMV_RAW.
 *
 *  INPUTS:       emv01_ptr - EMV_RAW structure
 *
 *  OUTPUTS:      ErrorMsg - Error message if database call failed.
 *
 *  RTRN VALUE:   A PTE code is returned:
 *                       PTEMSG_OK  if no errors else a code to identify
 *                       the reason for the failure.
 *
 *
 *
 ******************************************************************************/
BYTE db_insert_emvraw( pEMV_RAW emvraw_ptr, pCHAR ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
      char       tran_id[21];   
      char       len[4];
      char       emv_data[129];
      char       sys_date[9];
      RAWEMVDATA emvblock;
   EXEC SQL END DECLARE SECTION;


   memset( tran_id,  0x00, sizeof(tran_id)  );   
   memset( len,      0x00, sizeof(len)      );
   memset( emv_data, 0x00, sizeof(emv_data) );
   memset( sys_date, 0x00, sizeof(sys_date) );

   memcpy( tran_id,  emvraw_ptr->transaction_id, sizeof(tran_id)  );   
   memcpy( len,      emvraw_ptr->DATA_LENGTH,            sizeof(len)      );
   emvblock.len = 300;
   memcpy( &emvblock.pin_data, emvraw_ptr->RAW_DATA,       sizeof(emvraw_ptr->RAW_DATA) );

   memcpy( sys_date, emvraw_ptr->system_date,    sizeof(sys_date) );


   if ( db_error_statics_flag == true )
   {
       start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO EMV_RAW
      (  transaction_id,
         system_date,
         DATA_LENGTH,
         RAW_DATA
      )
   VALUES
      (  :tran_id,
         :sys_date,
         :len,
         :&emvblock
      );
      
   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : EMV_RAW ,Fun_Name : db_insert_emvraw , Duration = %f, Txn ID : %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,tran_id);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }   
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_emvraw,ST1 :%d,ST2 : %d, Txn ID : %s",DB_MsgSubtype1,DB_MsgSubtype2,tran_id);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/******************************************************************************
 *
 *  NAME:         db_insert_pad_raw
 *
 *  DESCRIPTION:  This function makes the call to the database to insert a
 *                record into PAD_RAW.
 *
 *  INPUTS:       pad_raw_ptr - PAD_RAW structure
 *
 *  OUTPUTS:      ErrorMsg - Error message if database call failed.
 *
 *  RTRN VALUE:   A PTE code is returned:
 *                       PTEMSG_OK  if no errors else a code to identify
 *                       the reason for the failure.
 *
 *
 *
 ******************************************************************************/
BYTE db_insert_pad_raw( pPAD_RAW pad_raw_ptr, pCHAR ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
      char       tran_id[21] 	   = {0};   
      char       len[5] 		   = {0};
      char       pad_raw_data[129] = {0};
      char       sys_date[9] 	   = {0};
      INT		 dec_len 		   = 0;
      char		 ascii_len[10] 	       = {0};
      PADRAWDATA padrawblock;
   EXEC SQL END DECLARE SECTION;

   strncpy(ascii_len,pad_raw_ptr->DATA_LENGTH,3);
   dec_len = atoi(ascii_len);
   memcpy( tran_id,  pad_raw_ptr->transaction_id, sizeof(tran_id) -1 );   
   memcpy( len,      pad_raw_ptr->DATA_LENGTH,4);
   padrawblock.len =100;
   memcpy( &padrawblock.padrawdata, pad_raw_ptr->RAW_DATA, sizeof(pad_raw_ptr->RAW_DATA));
   memcpy( sys_date, pad_raw_ptr->system_date,    sizeof(sys_date)-1 );


   if ( db_error_statics_flag == true )
   {
       start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO PAD_RAW
      (  transaction_id,
         system_date,
         DATA_LENGTH,
         RAW_DATA
      )
   VALUES
      (  :tran_id,
         :sys_date,
         :len,
         :&padrawblock
      );
      
   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
      	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : PAD_RAW ,Fun_Name : db_insert_pad_raw , Duration = %f,TXN ID: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,tran_id);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }   
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_pad_raw,ST1 :%d,ST2 : %d,TXN ID: %s",
		DB_MsgSubtype1,DB_MsgSubtype2,tran_id);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/******************************************************************************/

/******************************************************************************
 *
 *  NAME:         db_udpate_chip_condition
 *
 *  DESCRIPTION:  This function makes the call to the database to update
 *                the device record with the chip condition result.  This
 *                for smart card transactions.
 *
 *  INPUTS:       p_auth_tx
 *
 *  OUTPUTS:      ErrorMsg - Error message if database call failed.
 *
 *  RTRN VALUE:   A PTE code is returned:
 *                       PTEMSG_OK  if no errors else a code to identify
 *                       the reason for the failure.
 *
 *  AUTHOR:       D. Irby
 *
 ******************************************************************************/
BYTE db_udpate_chip_condition( pAUTH_TX p_auth_tx, pCHAR ErrorMsg )
{
   BYTE  rcode = PTEMSG_OK;

   EXEC SQL BEGIN DECLARE SECTION;
      char  chip_condition[2];
      char  terminal_id[9];
	  char  merchant_id [16]; 
      char  temp_tid[9];
   EXEC SQL END DECLARE SECTION;

   memset( chip_condition, 0x00, sizeof(chip_condition) );
   memset( terminal_id,    0x00, sizeof(terminal_id)    );
   memset( merchant_id,    0x00, sizeof(merchant_id)    );

   memcpy( chip_condition,
           p_auth_tx->EMV_details.chip_condition_code,
           sizeof(chip_condition) );

   memcpy(terminal_id,p_auth_tx->TLF01_details.terminal_id,sizeof(terminal_id));
   memcpy(merchant_id,p_auth_tx->TLF01_details.merchant_id,sizeof(merchant_id));


   if ( db_error_statics_flag == true )
   {
       start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT device_id
      INTO  :temp_tid
      FROM   DCF01
      WHERE  device_id   = :terminal_id  AND 
      		 merchant_id = :merchant_id  AND
      		 rownum      = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : DCF01 ,Fun_Name : db_udpate_chip_condition_S , Duration = %f,device id: %s, MID: %s ",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,terminal_id,merchant_id);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */
 		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_udpate_chip_condition ,ST1 :%d,ST2 : %d_1,device id: %s, MID: %s ",
		DB_MsgSubtype1,DB_MsgSubtype2,terminal_id,merchant_id);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   else
   {
      if ( db_error_statics_flag == true )
      {
       		start_time = ptetime_get_time();
      }
      EXEC SQL  UPDATE  DCF01
                SET     additional_pos_information = :chip_condition
                WHERE   device_id = :terminal_id AND merchant_id =:merchant_id;
      
      if ( db_error_statics_flag == true )
   	  {
      	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
      	  if(duration >= (double)db_error_statics_value)
	  	  {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : DCF01 ,Fun_Name : db_udpate_chip_condition_U , Duration = %f,device id: %s, MID: %s ",
			 DB_MsgSubtype1,DB_MsgSubtype2,duration,terminal_id,merchant_id);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
      }
      if ( SQLCODE != 0 )
      {
			memset(er_buf,0x00,sizeof(er_buf));
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In db_udpate_chip_condition ,ST1 :%d,ST2 : %d_2,device id: %s, MID: %s ",
			DB_MsgSubtype1,DB_MsgSubtype2,terminal_id,merchant_id);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
	 }
   }
   return( rcode );
}


/******************************************************************************
 *
 *  NAME:         db_process_tc_crypto
 *
 *  DESCRIPTION:  This function will store the EMV Application Cryptogram (TC)
 *                into EMV01 with the original transaction.  The TC comes into
 *                ATP in an 0320 upload transaction.  So we must find the orig
 *                transaction and store the TC with it.  Then insert the whole
 *                transaction into TLF01.
 *
 *                1.  Get Tran ID of orig txn from BCH10
 *                2.  Insert TC (Tag 9F26) into EMV01 using orig Tran ID
 *                3.  Insert into TLF01
 *
 *                Any errors or warnings are logged from updatds because
 *                the calling application might be ignoring the result of
 *                this operation.
 *
 *  INPUTS:       tlf01_ptr  - Transaction information
 *                emv_ptr    - Pointer to EMV structure
 *
 *  OUTPUTS:      ErrorMsg  - Error message if database call failed.
 *                table_id  - Name of database table in which an error occurred
 *
 *  RTRN VALUE:   A PTE code is returned:
 *                       PTEMSG_OK  if no errors else a code to identify
 *                       the reason for the failure.
 *
 *  AUTHOR:       D. Irby
 *
 ******************************************************************************/
BYTE db_process_tc_crypto( pTLF01 tlf01_ptr, pEMV  emv_ptr,
                           pBYTE  table_id,  pCHAR ErrorMsg )
{
   INT    update_flag = false;
   INT    tag_len;
   INT    total_len;
   INT    tlf01_insert = 0;
   INT    i,j;
   BYTE   retval = PTEMSG_OK;
   CHAR   temp_len[5] = {0};
   CHAR   temp_tag[5] = {0};
   EMV01  emv01;

   EXEC SQL BEGIN DECLARE SECTION;
      char tran_id[21];
      char tid     [9];
	  char mid     [16];
      char rrn    [13];

      char emv_data[130]={0};
      char emv_len   [4]={0};
      char emv_tag   [5]={0};
      char sys_date  [9]={0};
   EXEC SQL END DECLARE SECTION;

   memset( tran_id, 0x00, sizeof(tran_id) );
   memset( tid,     0x00, sizeof(tid)     );
   memset( mid,     0x00, sizeof(mid)     );
   memset( rrn,     0x00, sizeof(rrn)     );
   memset( &emv01,  0x00, sizeof(EMV01)   );

   memcpy( tid, tlf01_ptr->terminal_id,        8 );
   memcpy( rrn, tlf01_ptr->retrieval_ref_num, 12 );
   memcpy( mid, tlf01_ptr->merchant_id, 15 );

   if ( db_error_statics_flag == true )
   {
       start_time = ptetime_get_time();
   }
   
    /* Get Tran Id of orig transaction from BCH10. */
   EXEC SQL  SELECT  transaction_id
             INTO   :tran_id
             FROM    BCH10
             WHERE   device_id          = :tid     AND   
             	     merchant_id		= :mid     AND   
             	     batch_nbr          = 'ACTIVE' AND   
             	     retrieval_ref_num  = :rrn;
   
   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH10 ,Fun_Name : db_process_tc_crypto_S , Duration = %f,TID:%s , MID:%s, RRN:%s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,tid,mid,rrn);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( (SQLCODE != 0) && (SQLCODE != NULL_COLUMN_DATA) )
   {
      /* SCR 19925 - ThoughtFocus */
	   /* Get Transaction ID of original transaction from BCH20. */
      if ( db_error_statics_flag == true )
   	  {
        start_time = ptetime_get_time();
      }
      
	  EXEC SQL  SELECT  transaction_id
             INTO   :tran_id
             FROM    BCH20
             WHERE   device_id          = :tid      AND   
             		 merchant_id		= :mid      AND   
             		 batch_nbr          = 'ACTIVE'  AND   
             		 retrieval_ref_num  = :rrn;
               
      if ( db_error_statics_flag == true )
      {
      	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
      	 if(duration >= (double)db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH20 ,Fun_Name : db_process_tc_crypto , Duration = %f,TID:%s , MID:%s, RRN:%s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,tid,mid,rrn);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
      }
	  if ( (SQLCODE != 0) && (SQLCODE != NULL_COLUMN_DATA) )
	  { 
			memset(er_buf,0x00,sizeof(er_buf));
			retval = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In db_process_tc_crypto ,ST1 :%d,ST2 : %d_1,TID:%s , MID:%s, RRN:%s",
			DB_MsgSubtype1,DB_MsgSubtype2,tid,mid,rrn);
			strcat(er_buf,ErrorMsg);
			strcpy( table_id, "BCH10, BCH20" );
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return(retval);
	  }	
   }
  /* SCR 19925 - ThoughtFocus */
  /*else
   {
  */
      /* We have the transaction Id. Now loop through all tags in
       * the transaction.  Select each tag from EMV01. If values
       * are different, update EMV01 record. If tag does not exist,
       * insert new value.
       */

      /* Populate the EMV01 structure. */
      memcpy( emv01.transaction_id, tran_id, sizeof(tran_id) );
      memcpy( emv01.system_date, tlf01_ptr->system_date, 8 );

      /* Point past length bytes of emv_ptr. */
      i = 2;

      /* Get total length. Convert from BCD. */
      genutil_bin_to_ascii( emv_ptr->emv_block, 2, temp_len, 4 );
      total_len = atoi( temp_len );

      /* Loop through each tag. If value is different, update DB. */
      while( (i < total_len) && (retval == PTEMSG_OK) )
      {
         /* Initialize variables */
         memset( emv01.tag,      0x00, sizeof(emv01.tag)      );
         memset( emv01.len,      0x00, sizeof(emv01.len)      );
         memset( emv01.emv_data, 0x00, sizeof(emv01.emv_data) );

         memset( emv_data, 0x00, sizeof(emv_data) );
         memset( emv_len,  0x00, sizeof(emv_len)  );
         memset( emv_tag,  0x00, sizeof(emv_tag)  );

         /* Get TAG */
         if ( (emv_ptr->emv_block[i] & 0x0f) == 0x0f )
         {
            /* Two byte tag */
            genutil_bin_to_ascii( emv_ptr->emv_block+i, 2, emv01.tag, 2 );
            memcpy( emv_tag, emv01.tag, 4 );
            i += 2;
         }
         else
         {
            /* One byte tag */
            genutil_bin_to_ascii( emv_ptr->emv_block+i, 1, emv01.tag, 2 );
            memcpy( emv_tag, emv01.tag, 2 );
            i++;
         }

         /* Length is always one byte. */
         tag_len = emv_ptr->emv_block[i];
         genutil_bin_to_ascii( emv_ptr->emv_block+i, 1, emv01.len, 2 );
         i++;

         /* Get the data portion of this EMV subfield. */
         memset( temp_tag, 0x00, sizeof(temp_tag) );
         for ( j=0; j<4; j++ )
            temp_tag[j] = toupper( emv01.tag[j] );

         if ( (0 == strcmp(temp_tag, "9F1E")) ||
              (0 == strcmp(temp_tag, "9F53"))  )
         {
            /* These are ASCII fields. Do not convert them, normally.
             * Sometimes 9F53 is sent in as 0x00. This causes a problem
             * when inserting into emv01 (cannot insert null). So check
             * the value to be between 0x20 and 0x7e; these are the
             * ascii values. Note: field length is one byte.
             */
            j = emv_ptr->emv_block[i];
            if ( (0 == strcmp(temp_tag, "9F53")) &&
                 ( (j < 0x20) || (j > 0x7e) ))
            {
               /* Come here for 9F53 non-Ascii value. */
               genutil_bin_to_ascii( emv_ptr->emv_block+i, tag_len,
                                     emv01.emv_data, 99 );
               sprintf( emv_len, "%02d", tag_len*2 );    /* BCD */
            }
            else
            {
               /* Come here for 9F1E and 9F53 Ascii value. */
               memcpy( emv01.emv_data, emv_ptr->emv_block+i, tag_len );
               sprintf( emv_len, "%02d", tag_len );      /* ASCII */
            }
         }
         else
         {
            genutil_bin_to_ascii( emv_ptr->emv_block+i, tag_len,
                                  emv01.emv_data, 99 );
            sprintf( emv_len, "%02d", tag_len*2 );    /* BCD */
         }
         i += tag_len;

          /* Now the data is in our structure in ASCII format (BCD * 2).
          * Update EMV01. If it fails, tag is not present, so insert it.
          */
         memcpy( emv_data, emv01.emv_data, tag_len*2 );
         if ( db_error_statics_flag == true )
   		 {
        	start_time = ptetime_get_time();
   		 }
   		/*Select Case to be added to avoid locking*/ 
         EXEC SQL  UPDATE EMV01
                   SET    emv_data       = :emv_data,
                          len            = :emv_len
                   WHERE  transaction_id = :tran_id
                     AND  tag            = :emv_tag;
		
		if ( db_error_statics_flag == true )
        {
      	  	end_time = ptetime_get_time();
     	  	duration = end_time - start_time;
      	  	if(duration >= (double)db_error_statics_value)
	  	  	{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : EMV01 ,Fun_Name : db_process_tc_crypto_U1 , Duration = %f,TXN ID:%s",
			 	DB_MsgSubtype1,DB_MsgSubtype2,duration,tran_id);
			 	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  	}
        }
         if ( SQLCODE == NO_DATA_FOUND )
         {
            /* Failed the update. Insert it. */
            strcpy( table_id, "EMV01" );
            retval = db_insert_emv01( &emv01, ErrorMsg );
            tlf01_insert = 1;
         }
         else if ( SQLCODE != PTEMSG_OK )
         {
            /* Error - break out of the loop based on retval. */
            update_flag = false;
            strcpy( table_id, "EMV01" );
			memset(er_buf,0x00,sizeof(er_buf));
			retval = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In  db_process_tc_crypto,ST1 :%d,ST2 : %d_2,TXN ID:%s",
			DB_MsgSubtype1,DB_MsgSubtype2,tran_id);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);

         }
      }

      if ( retval == PTEMSG_OK )
      {
         /* We have successfully inserted/updated the EMV01 record.
          * Now update system date and insert transaction into TLF01.
          */

 /* Make sure we can access the record before attempting to update it. */
  		EXEC SQL
      	SELECT *
      	INTO  :db_emv01
     	FROM   EMV01
     	WHERE transaction_id = :tran_id AND
     	 	  rownum = 1
      	For Update NOWAIT;

   		if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   		{
     		 /* Record is inaccessible. Return with error. */
     		 strcpy( table_id, "EMV01" );
      		return( dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg) );
   		}

         /* Update system date.  0320 txn with TC values might
          * be processed on the day following the original txn.
          */
         memset( sys_date, 0x00, sizeof(sys_date) );
         memcpy( sys_date, tlf01_ptr->system_date, 8 );
         
         if ( db_error_statics_flag == true )
   		 {
        	start_time = ptetime_get_time();
   		 }
         EXEC SQL  UPDATE EMV01
                   SET    system_date    = :sys_date
                   WHERE  transaction_id = :tran_id;
         
         if ( db_error_statics_flag == true )
        {
      	  	end_time = ptetime_get_time();
     	  	duration = end_time - start_time;
      	  	if(duration >= (double)db_error_statics_value)
	  	  	{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : EMV01 ,Fun_Name : db_process_tc_crypto_U2 , Duration = %f,TXN ID:%s",
			 	DB_MsgSubtype1,DB_MsgSubtype2,duration,tran_id);
			 	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  	}
        }
         if ( SQLCODE != PTEMSG_OK )
         {
			memset(er_buf,0x00,sizeof(er_buf));
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In db_process_tc_crypto ,ST1 :%d,ST2 : %d_3,TXN ID:%s",
			DB_MsgSubtype1,DB_MsgSubtype2,tran_id);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
		}

         /* Insert into TLF01. */
         // If db_insert_emv01 was done in this function , insert into TLF01 as well
         if(tlf01_insert == 1)
         {
         	retval = db_insert_tlf01( tlf01_ptr, ErrorMsg );
         	strcpy( table_id, "TLF01" );
         }
         else
         {
         	strcpy( table_id, "EMV01" );
         }
      }

   return( retval );
}


/******************************************************************************
 *
 *  NAME:         db_update_reload_confirm
 *
 *  DESCRIPTION:  This function is called when a reload confirm transaction is
 *                being processed.  It will mark the original reload txn in
 *                BCH10 as being confirmed.  It will also update the record in
 *                TLF01 with the same marking.
 *
 *  INPUTS:       tlf01_ptr  - Transaction information
 *
 *  OUTPUTS:      ErrorMsg  - Error message if database call failed.
 *
 *  RTRN VALUE:   A PTE code is returned:
 *                       PTEMSG_OK  if no errors else a code to identify
 *                       the reason for the failure.
 *
 *  AUTHOR:       D. Irby
 *
 ******************************************************************************/
BYTE db_update_reload_confirm( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
   BYTE  retval = PTEMSG_OK;
   CHAR  errbuf[200];

   EXEC SQL BEGIN DECLARE SECTION;
      char  tran_id_confirm[21] = "";
      char  tran_id        [21] = "";
      char  card           [20] = "";
      char  amount         [13] = "";
      char  terminal        [9] = "";
	  char  merchant_id     [15]= "";
      char  tx_key = AUTH_RELOAD;
   EXEC SQL END DECLARE SECTION;

   memcpy( card,     tlf01_ptr->card_num,     19 );
   memcpy( amount,   tlf01_ptr->total_amount, 12 );
   memcpy( terminal, tlf01_ptr->terminal_id,   8 );
   memcpy( merchant_id, tlf01_ptr->merchant_id,   15 );
   memcpy( tran_id_confirm, tlf01_ptr->primary_key.transaction_id, 20 );

  /*
   EXEC SQL  SELECT  transaction_id
             INTO   :tran_id
             FROM    BCH10
             WHERE   device_id   = :terminal   AND   
             		 batch_nbr   = 'ACTIVE'    AND  
             		 card_nbr    = :card       AND   
             		 tran_amount = :amount     AND   
             		 tx_key      = :tx_key     AND
             		 rownum      =  1
             FOR UPDATE NOWAIT;
   */


   if ( db_error_statics_flag == true )
   {
        start_time = ptetime_get_time();
   }
   /* Do not use a hint here. Let the Oracle optimizer figure it out. */
   EXEC SQL  SELECT  transaction_id
             INTO   :tran_id
             FROM    BCH10
             WHERE   device_id        = :terminal     AND   
             		 merchant_id      = :merchant_id  AND   
             		 batch_nbr        = 'ACTIVE'      AND   
             		 card_nbr         = :card         AND   
             		 tran_amount      = :amount       AND   
             		 tx_key           = :tx_key       AND
             		 rownum           = 1             AND   
             		 product18_amount IS NULL
             FOR UPDATE NOWAIT;
             
   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH10 ,Fun_Name : db_update_reload_confirm_U1 , Duration = %f,device id: %s, MID: %s ",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,terminal,merchant_id);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( (SQLCODE != 0) && (SQLCODE != NULL_COLUMN_DATA) )
   {
	    memset( errbuf, 0x00, sizeof(errbuf) );
		memset(er_buf,0x00,sizeof(er_buf));
		rtnval = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_reload_confirm ,ST1 :%d,ST2 : %d_1,device id: %s, MID: %s ",
		DB_MsgSubtype1,DB_MsgSubtype2,terminal,merchant_id);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
        strcpy(  ErrorMsg, "Reload Confirm Err selecting BCH10: " ); 
        strncat( ErrorMsg, errbuf, 63 ); /* Do not overflow the buffer */
   }
   else
   {
  
      /* Mark the original Reload in BCH10 as Confirmed.
       * The tran_id of the reload confirm (0202) gets
       * stored into BCH10.mcard_banknet of the reload (0200).
       * This is used to have a link between the two txns.
       */
    
	 /* SCR 13515 ThoughtFocus
      * Changing the query to use the transaction_id retrieved from the 
	  * above query.
	  */
	 /*
	  EXEC SQL  UPDATE  BCH10
                SET     product18_amount = 'Confirmed',
                        mcard_banknet    = :tran_id_confirm
                WHERE   device_id        = :terminal  AND   
                		batch_nbr        = 'ACTIVE'   AND   
                		card_nbr         = :card      AND   
                		tran_amount      = :amount    AND   
                		tx_key           = :tx_key   ;
      */

      /* In the following SQL, the transaction id is the important
       * factor because it ensures a unique record and the correct
       * record.  This SQL was tried with just transaction_id in the
       * WHERE clause, but it was too slow. So the other fields are
       * added to allow usage of either the primary key index or an
       * index which includes all of these fields, called:
       * IDX_BCH10_DIDBCNBRTAMTTKEYID.
       */
       
       if ( db_error_statics_flag == true )
   	   {
          start_time = ptetime_get_time();
       }
      EXEC SQL  UPDATE  BCH10
                SET     product18_amount = 'Confirmed',
                        mcard_banknet    = :tran_id_confirm
                WHERE   device_id        = :terminal    AND   
                		merchant_id      = :merchant_id AND   
                		batch_nbr        = 'ACTIVE'     AND   
                		card_nbr         = :card        AND   
                		tran_amount      = :amount      AND   
                		tx_key           = :tx_key      AND   
                		transaction_id   = :tran_id ;

	  if ( db_error_statics_flag == true )
   	  {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BCH10 ,Fun_Name : db_update_reload_confirm_U2 , Duration = %f,device id: %s, MID: %s ",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,terminal,merchant_id);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
      if ( (SQLCODE != 0) && (SQLCODE != NULL_COLUMN_DATA) )
      {
         
       		memset(er_buf,0x00,sizeof(er_buf));
			rtnval = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In  db_update_reload_confirm,ST1 :%d,ST2 : %d_2,device id: %s, MID: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,terminal,merchant_id);
			strcat(er_buf,ErrorMsg);
        	strcat(  ErrorMsg, "Reload Confirm Err updating BCH10: " );
        	strncat( ErrorMsg, errbuf, 63 ); /* Do not overflow the buffer */
         	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
      }
      else
      {

		  if ( db_error_statics_flag == true )
   	   	  {
         	 start_time = ptetime_get_time();
          }
         /* Make sure we can access the record before attempting to update it. */
         EXEC SQL
            SELECT *
            INTO  :db_tlf01
            FROM   TLF01
            WHERE  transaction_id = :tran_id AND 
            	   rownum         = 1
            For Update NOWAIT;
		
		  if ( db_error_statics_flag == true )
   	  	  {
      		  end_time = ptetime_get_time();
     		  duration = end_time - start_time;
      		  if(duration >= (double)db_error_statics_value)
	  		  {
	  			  memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				  sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : TLF01 ,Fun_Name : db_update_reload_confirm_S , Duration = %f,device id: %s, MID: %s ",
				  DB_MsgSubtype1,DB_MsgSubtype2,duration,terminal,merchant_id);
				 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		  }
      	  }
         if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
         {
            /* Record is inaccessible. Return with error. */
            
			memset(er_buf,0x00,sizeof(er_buf));
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			sprintf(er_buf,"In  db_update_reload_confirm,ST1 :%d,ST2 : %d_3,device id: %s, MID: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,terminal,merchant_id);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;

         }

		 if ( db_error_statics_flag == true )
   	   	  {
         	 start_time = ptetime_get_time();
         }
		 
         EXEC SQL  UPDATE  TLF01
                   SET     product18_amount = 'Confirmed',
                           mcard_banknet    = :tran_id_confirm
                   WHERE   transaction_id   = :tran_id;
		
		if ( db_error_statics_flag == true )
   	  	{
      	      end_time = ptetime_get_time();
     		  duration = end_time - start_time;
      		  if(duration >= (double)db_error_statics_value)
	  		  {
	  			  memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				  sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : TLF01 ,Fun_Name : db_update_reload_confirm_U , Duration = %f,device id: %s, MID: %s",
				  DB_MsgSubtype1,DB_MsgSubtype2,duration,terminal,merchant_id);
				  Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		  }
      	 }
         if ( (SQLCODE != 0) && (SQLCODE != NULL_COLUMN_DATA) )
         {
            memset( errbuf, 0x00, sizeof(errbuf) );
			memset(er_buf,0x00,sizeof(er_buf));
			retval = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In db_update_reload_confirm ,ST1 :%d,ST2 : %d_4,device id: %s, MID: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,terminal,merchant_id);
			strcat(er_buf,ErrorMsg);
            strcat(  ErrorMsg, "Reload Confirm Err updating TLF01: " );
            strncat( ErrorMsg, errbuf, 63 ); /* Do not overflow the buffer */
            Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
         }
      }
   }
   return( retval );
}


/*****************************************************************************

  Function:   genutil_bin_to_ascii

  Description:
      Convert binary string to ascii string
  Author: 
      JHapitas   5/6/98
  Inputs:
      bstring  - incoming binary string
      blen     - length of bstring
      astr_len - length of astr
  Outputs:
      astr     - pointer to the outgoing ascii string
  Return values:
  Modified by:
      BGable      6/26/98
******************************************************************************/
/*****************************************
   convert binary string to ascii string     JH May 06  New Procedure
*****************************************/
void genutil_bin_to_ascii (BYTE bstring[], INT blen, pCHAR astr, INT astr_len)
{
   INT  i = 0;

   memset (astr, 0x00, astr_len);

   for (i = 0; i < (blen * 2); i+=2)
   {
      if ((bstring[i/2] / 16) <= 9) 
        astr[i] = (bstring[i/2] / 16) + '0';
      else
        astr[i] = (bstring[i/2] / 16 - 0x0a)+'A';

      if ((bstring[i/2] & 0x0f) <= 9)
        astr[i+1] = (bstring[i/2] & 0x0F) + '0'; 
      else
        astr[i+1] = (bstring[i/2] & 0x0F) - 0x0a + 'A';    
   }
} /* genutil_bin_to_ascii */


/******************************************************************************
 *
 *  NAME:         db_look_for_duplicate
 *
 *  DESCRIPTION:  This function is called during the update all process to
 *                sure this transaction has not already been processed, which
 *                could happen if queues back up and terminals time out and
 *                reissue transactions.  If txn2 starts being processed by
 *                ATP before txn1 is completed, we could have this situation.
 *
 *                This function looks for a duplicate in TLF01 based on card,
 *                terminal_id, stan, and message type for approved txns only.
 *
 *                If a duplicate is found, its auth number and RRN are returned
 *                to the calling routine.
 *
 *                Some transactions might already be in TLF01 because
 *                dcpiso inserts voids into TLF01 right after forwarding txn to
 *                txcntl.  So to bypass that record, look in dcf01_retired_cwk
 *                which has an audit trail if txn went through update all.
 *
 *  INPUTS:       tlf01_ptr     - Transaction information
 *
 *  OUTPUTS:      auth_number - Authorization number of a duplicate if found
 *                rrn         - Retrieval ref number of a duplicate if found
 *
 *  RTRN VALUE:   PTEMSG_OK  if a duplicate is found
 *
 *  AUTHOR:       D. Irby
 *
 ******************************************************************************/
BYTE db_look_for_duplicate( pTLF01 tlf01_ptr, pBYTE auth_number, pBYTE rrn )
{
   BYTE  retval = PTEMSG_NOT_FOUND;
   CHAR  ErrorMsg[100] = "";

   EXEC SQL BEGIN DECLARE SECTION;
      char  card            [20] = {0};
      char  terminal        [9]  = {0};
      char  stan            [7]  = {0};
      char  msgtype         [5]  = {0};
      char  db_rrn          [13] = {0};
      char  db_auth_num     [7]  = {0};
      char  merchant_id     [16] = {0};
   EXEC SQL END DECLARE SECTION;

   memcpy( card,     tlf01_ptr->card_num,           19 );
   memcpy( terminal, tlf01_ptr->terminal_id,         8 );
   memcpy( stan,     tlf01_ptr->sys_trace_audit_num, 6 );
   memcpy( msgtype,  tlf01_ptr->message_type,        4 );
   memcpy( merchant_id,  tlf01_ptr->merchant_id,        15 );


    /* Force this query to use the index on the card_num field. */
   if ( db_error_statics_flag == true )
   {
        start_time = ptetime_get_time();
   }
   
   EXEC SQL  SELECT 
                     auth_number, retrieval_ref_num
             INTO   :db_auth_num, :db_rrn
             FROM    TLF01
             WHERE   card_num            = :card
               AND   terminal_id         = :terminal
               AND   sys_trace_audit_num = :stan
               AND   message_type        = :msgtype
               AND   response_code       = '00'
               AND   merchant_id         = :merchant_id
               AND   dcf01_retired_cwk   IS NOT NULL
               AND   rownum              = 1;
   
   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : TLF01 ,Fun_Name : db_look_for_duplicate , Duration = %f,device id: %s, MID: %s ,stan: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,terminal,merchant_id,stan);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( (SQLCODE == 0) || (SQLCODE == NULL_COLUMN_DATA) )
   {
      retval = PTEMSG_OK;
      memcpy( auth_number, db_auth_num, 6 );
      memcpy( rrn,         db_rrn,     12 );
   }
   return( retval );
}


/******************************************************************************
 *
 *  NAME:         db_process_cash_bonus_programs
 *
 *  DESCRIPTION:  This function will select all cash bonus records from
 *                BON02.  In a loop, it call a function to process each
 *                program record to see if the current transaction is a
 *                winner.  If current transaction is a winner of one or
 *                more programs, a record gets stored into BON03 for each
 *                program won.
 *
 *  INPUTS:       None
 *
 *  OUTPUTS:      p_auth_tx - Contains response text in event of a winner
 *
 *  RTRN VALUE:   CASH_WINNER
 *                NO_CASH_WINNER
 *                CASH_PROBLEM - Some kind of database problem
 *
 *  AUTHOR:       D. Irby
 *
 ******************************************************************************/
INT db_process_cash_bonus_programs( pAUTH_TX p_auth_tx,
                                    pCHAR    errbuf )
{
   CHAR    ErrorMsg[100] = "";
   INT     retval = NO_CASH_WINNER;
   INT     program_result;
   INT     program_ctr;
   INT     ch_name_flag = false;
   BON02   bon02;
   BON03   bon03;
   double  start_time;
   double  end_time;
   double  duration;

   EXEC SQL BEGIN DECLARE SECTION;

      int   NumRowsReturned = 0;

   EXEC SQL END DECLARE SECTION;

  /* Get number of cash bonus programs in BON02. */
   EXEC SQL SELECT COUNT(*) INTO :NumRowsReturned FROM bon02;

   if ( NumRowsReturned > 0 )
   {
      if ( DB_Timing_Flag == true )
         start_time = ptetime_get_time();

      EXEC SQL DECLARE cash_cursor CURSOR FOR
         SELECT *  FROM BON02;

      if ( DB_Timing_Flag == true )
      {
         end_time = ptetime_get_time();
         duration = end_time - start_time;
         update_timing_stats( ST1_DB_SELECT, 0, BON02_DATA,
                              (float)duration, &TimingStats );
      }

      if ( (SQLCODE != 0) && (SQLCODE != NULL_COLUMN_DATA) )
      {
			memset(er_buf,0x00,sizeof(er_buf));
			(void)dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In  db_process_cash_bonus_programs,ST1 :%d,ST2 : %d_1",DB_MsgSubtype1,DB_MsgSubtype2);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
         	retval = CASH_PROBLEM;
      }
      else
      {
         EXEC SQL OPEN cash_cursor;

         for( program_ctr=0; program_ctr < NumRowsReturned; program_ctr++ )
         {
            memset( &db_bon02, 0x00, sizeof(db_bon02) );

            if ( db_error_statics_flag == true )
               start_time = ptetime_get_time();

            EXEC SQL FETCH cash_cursor
            INTO :db_bon02;

            if ( DB_Timing_Flag == true )
            {
               end_time = ptetime_get_time();
               duration = end_time - start_time;
               update_timing_stats( ST1_DB_SELECT, 1, BON02_DATA,
                                    (float)duration, &TimingStats );
            }

            if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
            {
               memset(er_buf,0x00,sizeof(er_buf));
				(void)dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
				sprintf(er_buf,"In  db_process_cash_bonus_programs,ST1 :%d,ST2 : %d_2",DB_MsgSubtype1,DB_MsgSubtype2);
				strcat(er_buf,ErrorMsg);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
               retval = CASH_PROBLEM;
               break;
            }
            else
            {
               db_to_bon02( &bon02 );

               /* Check this particular program to see
                * if current transaction is a winner.
                */
               program_result = perform_cash_bonus_processing(p_auth_tx, &bon02, errbuf);
               if ( program_result == CASH_WINNER )
               {
                  retval = CASH_WINNER;
                  CashBonusWinner++;
                  if ( CashBonusWinner > 1 )
                  {
                     /* --------------------------- */
                     /* We have a Multiple Winner!! */
                     /* --------------------------- */
                     if ( bon02.multi_winner_text[0] != 0x00 )
                     {
                        memcpy( p_auth_tx->TLF01_details.response_text,
                                bon02.multi_winner_text,
                                40 );
                     }
                  }

                  /* Populate the name of the cardholder.
                   * Only need to do this once for the whole loop.
                   */
                  if ( ch_name_flag == false )
                  {
                     if ( p_auth_tx->CCF02P_details.primary_key.card_nbr[0] != 0x00 )
                     {
                        (void)db_select_cardholder_name(
                                p_auth_tx->CCF02P_details.primary_key.card_nbr,
                                p_auth_tx->CCF02P_details.primary_key.card_type,
                                p_auth_tx->TLF01_details.card_holder_name,
                                errbuf );
                     }
                  }

                  /* Insert the winner's record into BON03. */
                  create_bon03_record( p_auth_tx, &bon02, &bon03 );
                  if ( PTEMSG_OK != db_insert_bon03(&bon03, errbuf) )
                  {
                     memset(er_buf,0x00,sizeof(er_buf));
					(void)dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
					sprintf(er_buf,"In db_process_cash_bonus_programs ,ST1 :%d,ST2 : %d_3",DB_MsgSubtype1,DB_MsgSubtype2);
					strcat(er_buf,ErrorMsg);
					Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
                     retval = CASH_PROBLEM;
                     break;
                  }
               }

               /* Update the record in BON02 - winner or not. */
               if ( PTEMSG_OK != db_update_bon02(&bon02, errbuf) )
               {
	                  memset(er_buf,0x00,sizeof(er_buf));
					 (void)dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
					 sprintf(er_buf,"In  db_process_cash_bonus_programs,ST1 :%d,ST2 : %d_4",DB_MsgSubtype1,DB_MsgSubtype2);
					 strcat(er_buf,ErrorMsg);
					 Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	                 retval = CASH_PROBLEM;
	                 break;
               }
            }
         }

         EXEC SQL CLOSE cash_cursor;
      }
   }
   return( retval );
}

#ifdef AMEX03A
BYTE db_select_and_update_ncf30_for_Incrementalauthorization( pNCF30 ncf30_record,pCHAR  ErrorMsg )
{
   CHAR  current_date [ 9] = {0}, look_back_date[9]={0};
   LONG  current_julian_date=0,lookback_julian_date=0;
   CHAR  incremental_txn_amount[13]={0}, actual_total_amount[13]={0};
   double total_amount=0, incremental_amount=0, actual_amount=0;
   char estimated_txn_key[8]={0};

	memset( &db_ncf30, 0, sizeof( db_ncf30 ) );
	
	memcpy( pte_ncf30.card_nbr,ncf30_record->card_nbr,sizeof(pte_ncf30.card_nbr) );
   	memcpy( pte_ncf30.merchant_id,ncf30_record->merchant_id,sizeof(pte_ncf30.merchant_id) );
    memcpy( pte_ncf30.tran_fee_amount,ncf30_record->tran_fee_amount,sizeof(pte_ncf30.tran_fee_amount) );
    memcpy( pte_ncf30.open_time,ncf30_record->open_time,6 );
    memcpy( incremental_txn_amount,ncf30_record->network_data,12 );
    strncpy(estimated_txn_key,ESTIMATED_TRANSACTION_KEY,7);
    
	create_system_date(current_date );
	current_julian_date =  Txutils_Calculate_Julian_Date (current_date);
	lookback_julian_date = current_julian_date - LOOKBACK_DAYS;
    Txutils_Calculate_Gregorian_Date(lookback_julian_date,look_back_date);
   
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL SELECT   *
   INTO :db_ncf30
   FROM ncf30
   WHERE card_nbr    = :pte_ncf30.card_nbr
     AND merchant_id = :pte_ncf30.merchant_id
     AND open_time = :pte_ncf30.open_time
     AND tran_fee_amount = :pte_ncf30.tran_fee_amount
     AND (tran_date <= :current_date AND tran_date >= :look_back_date) 
     AND open_date =:estimated_txn_key
     AND rownum      = 1;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Netds, ST1:%d,ST2:%d ,Data_Type : NCF30 ,Fun_Name : db_select_and_update_ncf30_for_Incrementalauthorization , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_select_and_update_ncf30_for_Incrementalauthorization ,ST1:%d,ST2: %d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   
   /*now add the incremental amount to the estimated authrization transaction to keep track the total amount*/
   
   if(db_ncf30.network_data.arr[0] != '\0')
   {
   		total_amount = atoi(db_ncf30.network_data.arr);
   		incremental_amount = atoi(incremental_txn_amount);
   		actual_amount = total_amount+incremental_amount;
   		
   		itoa(actual_amount, actual_total_amount,10);
   		Rj_with_lead_zeros(actual_total_amount, 12);
   		
   		memcpy(pte_ncf30.network_data,actual_total_amount,12);
   		
	   	if ( db_error_statics_flag == true )
	   {
	      start_time = ptetime_get_time();
	   }
 		EXEC SQL UPDATE ncf30
   			 SET    network_data =   :pte_ncf30.network_data        
		   WHERE card_nbr    = :pte_ncf30.card_nbr
		     AND merchant_id = :pte_ncf30.merchant_id
		     AND open_time = :pte_ncf30.open_time
		     AND tran_fee_amount = :pte_ncf30.tran_fee_amount
		     AND (tran_date <= :current_date AND tran_date >= :look_back_date)  
		     AND open_date =:estimated_txn_key
		     AND rownum      = 1;
	   
	   if ( db_error_statics_flag == true )
	   {
	      end_time = ptetime_get_time();
	      duration = end_time - start_time;
	      if(duration >= db_error_statics_value)
		  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Netds, ST1:%d,ST2:%d ,Data_Type : NCF30 ,Fun_Name : db_select_and_update_ncf30_for_Incrementalauthorization_1 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		  }
	   }
	   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
	   {
			memset(er_buf,0x00,sizeof(er_buf));
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In db_select_and_update_ncf30_for_Incrementalauthorization_1 ,ST1:%d,ST2: %d",DB_MsgSubtype1,DB_MsgSubtype2);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
	   }
   }
   else
   {
   		return TOTAL_AMOUNT_EMPTY;
   }

   return PTEMSG_OK;
}

BYTE db_select_and_update_ncf30_for_Partialreversalauthorization( pNCF30 ncf30_record,pCHAR  ErrorMsg )
{
   CHAR  current_date [ 9] = {0}, look_back_date[9]={0};
   LONG  current_julian_date=0,lookback_julian_date=0;
   CHAR  partial_txn_amount[13]={0}, actual_total_amount[13]={0};
   double total_amount=0, partial_amount=0, actual_amount=0;
	CHAR estimated_txn_key[8]={0};
	
	memset( &db_ncf30, 0, sizeof( db_ncf30 ) );
	
	memcpy( pte_ncf30.card_nbr,ncf30_record->card_nbr,sizeof(pte_ncf30.card_nbr) );
   	memcpy( pte_ncf30.merchant_id,ncf30_record->merchant_id,sizeof(pte_ncf30.merchant_id) );
    memcpy( pte_ncf30.tran_fee_amount,ncf30_record->tran_fee_amount,sizeof(pte_ncf30.tran_fee_amount) );
    memcpy( pte_ncf30.open_time,ncf30_record->open_time,6 );
    memcpy( pte_ncf30.tran_amount,ncf30_record->tran_amount,sizeof(pte_ncf30.tran_amount) );
    memcpy( partial_txn_amount,ncf30_record->network_data,12 );
    strncpy(estimated_txn_key,ESTIMATED_TRANSACTION_KEY,7);
      
	create_system_date(current_date );
	current_julian_date =  Txutils_Calculate_Julian_Date (current_date);
	lookback_julian_date = current_julian_date - LOOKBACK_DAYS;
    Txutils_Calculate_Gregorian_Date(lookback_julian_date,look_back_date);
   
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL SELECT   *
   INTO :db_ncf30
   FROM ncf30
   WHERE card_nbr    = :pte_ncf30.card_nbr
     AND merchant_id = :pte_ncf30.merchant_id
     AND tran_fee_amount = :pte_ncf30.tran_fee_amount
     AND open_time = :pte_ncf30.open_time
     AND tran_amount = :pte_ncf30.tran_amount
     AND (tran_date <= :current_date AND tran_date >= :look_back_date)  
     AND open_date =:estimated_txn_key
     AND rownum      = 1;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Netds, ST1:%d,ST2:%d ,Data_Type : NCF30 ,Fun_Name : db_select_and_update_ncf30_for_Partialreversalauthorization , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_select_and_update_ncf30_for_Partialreversalauthorization ,ST1:%d,ST2: %d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

  
 /*now subtract the partial reversal amount from the total amount stored in the network_data*/

   if(db_ncf30.network_data.arr[0] != '\0')
   {
   		total_amount = atoi(db_ncf30.network_data.arr);
   		 partial_amount = atoi(partial_txn_amount);
   		 
   		 if(total_amount >= partial_amount)
   		 {
   		 	actual_amount = total_amount-partial_amount;
   		 }
   		 else
   		 {
   		 	return PARTIAL_AMOUNT_EXCEEDED_TOTAL_AMOUNT;
   		 }
   		 
   		itoa(actual_amount, actual_total_amount,10);
   		Rj_with_lead_zeros(actual_total_amount, 12);
   		
   		memcpy(pte_ncf30.network_data,actual_total_amount,12);
   		
	   	if ( db_error_statics_flag == true )
	   {
	      start_time = ptetime_get_time();
	   }
 		EXEC SQL UPDATE ncf30
   			 SET    network_data =   :pte_ncf30.network_data        
		   WHERE card_nbr    = :pte_ncf30.card_nbr
		     AND merchant_id = :pte_ncf30.merchant_id
		     AND open_time = :pte_ncf30.open_time
		     AND tran_fee_amount = :pte_ncf30.tran_fee_amount
		     AND (tran_date <= :current_date AND tran_date >= :look_back_date)  
		     AND open_date =:estimated_txn_key 
		     AND rownum      = 1;
	   
	   if ( db_error_statics_flag == true )
	   {
	      end_time = ptetime_get_time();
	      duration = end_time - start_time;
	      if(duration >= db_error_statics_value)
		  {
		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Netds, ST1:%d,ST2:%d ,Data_Type : NCF30 ,Fun_Name : db_select_and_update_ncf30_for_Partialreversalauthorization_1 , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		  }
	   }
	   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
	   {
			memset(er_buf,0x00,sizeof(er_buf));
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In db_select_and_update_ncf30_for_Partialreversalauthorization_1 ,ST1:%d,ST2: %d",DB_MsgSubtype1,DB_MsgSubtype2);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
	   }
   }
   else
   {
   		return TOTAL_AMOUNT_EMPTY;
   }
 
   return PTEMSG_OK;
}
#endif

/******************************************************************************
 *
 *  NAME:         db_update_bon02
 *
 *  DESCRIPTION:  This function makes the call to the database to update a
 *                record in BON02
 *
 *  INPUTS:       bon02_ptr - BON02 structure
 *
 *  OUTPUTS:      ErrorMsg - Error message if database call failed.
 *
 *  RTRN VALUE:   A PTE code is returned:
 *                       PTEMSG_OK  if no errors else a code to identify
 *                       the reason for the failure.
 *
 *  AUTHOR:       D. Irby
 *
 ******************************************************************************/
BYTE db_update_bon02( pBON02 bon02_ptr, pCHAR ErrorMsg )
{
   double         start_time;
   double         end_time;
   double         duration;

   if ( DB_Timing_Flag == true )
      start_time = ptetime_get_time();

   bon02_to_db( bon02_ptr );

      /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bon02
      FROM   bon02
      WHERE cash_promo_id = :pte_bon02.cash_id AND
      		rownum = 1	
      For Update NOWAIT;

   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */
      return( dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg) );
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
  /* Make sure we can access the record before attempting to update it.  */
   EXEC SQL
      SELECT  *
      INTO  :db_bon02
      FROM   bon02
      WHERE cash_promo_id = :pte_bon02.cash_id AND
      		rownum        = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : tlf01_stip ,Fun_Name : db_update_bon02_S , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */
  		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_bon02 ,ST1 :%d,ST2 : %d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
        start_time = ptetime_get_time();
   }
   
   EXEC SQL UPDATE bon02

   SET cash_promo_id            = :pte_bon02.cash_id,
       tag_id                   = :pte_bon02.tag_id,
       cash_promo_desc          = :pte_bon02.cash_desc,
       program_start_date       = :pte_bon02.program_start_date,
       program_end_date         = :pte_bon02.program_end_date,
       tran_threshold           = :pte_bon02.tran_threshold,
       tran_counter             = :pte_bon02.tran_ctr,
       time_period              = :pte_bon02.time_period,
       max_period_winners       = :pte_bon02.max_period_winners,
       period_win_counter       = :pte_bon02.period_win_ctr,
       max_program_winners      = :pte_bon02.max_program_winners,
       program_win_counter      = :pte_bon02.program_win_ctr,
       multi_winner_text        = :pte_bon02.multi_winner_text,

       amount1_low              = :pte_bon02.amount1_low,
       amount1_high             = :pte_bon02.amount1_high,
       response1                = :pte_bon02.response1,
       win_type_radio1          = :pte_bon02.win_type_radio1,
       reward_amount1           = :pte_bon02.reward_amount1,

       amount2_low              = :pte_bon02.amount2_low,
       amount2_high             = :pte_bon02.amount2_high,
       response2                = :pte_bon02.response2,
       win_type_radio2          = :pte_bon02.win_type_radio2,
       reward_amount2           = :pte_bon02.reward_amount2,

       amount3_low              = :pte_bon02.amount3_low,
       amount3_high             = :pte_bon02.amount3_high,
       response3                = :pte_bon02.response3,
       win_type_radio3          = :pte_bon02.win_type_radio3,
       reward_amount3           = :pte_bon02.reward_amount3,

       amount4_low              = :pte_bon02.amount4_low,
       amount4_high             = :pte_bon02.amount4_high,
       response4                = :pte_bon02.response4,
       win_type_radio4          = :pte_bon02.win_type_radio4,
       reward_amount4           = :pte_bon02.reward_amount4,

       amount5_low              = :pte_bon02.amount5_low,
       amount5_high             = :pte_bon02.amount5_high,
       response5                = :pte_bon02.response5,
       win_type_radio5          = :pte_bon02.win_type_radio5,
       reward_amount5           = :pte_bon02.reward_amount5

   WHERE cash_promo_id = :pte_bon02.cash_id;
   
   if ( db_error_statics_flag == true )
   {
      	end_time = ptetime_get_time();
     	duration = end_time - start_time;
      	if(duration >= (double)db_error_statics_value)
	  	{
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: Updateds, ST1 :%d,ST2 : %d,Data_Type : BON02 ,Fun_Name : db_update_bon02_U , Duration = %f",DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( DB_Timing_Flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      update_timing_stats( ST1_DB_UPDATE, 0, BON02_DATA,
                           (float)duration, &TimingStats );
   }

   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_update_bon02 ,ST1 :%d,ST2 : %d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}


/******************************************************************************
 *
 *  NAME:         db_insert_bon03
 *
 *  DESCRIPTION:  This function makes the call to the database to insert a
 *                record into BON03
 *
 *  INPUTS:       bon03_ptr - BON03 structure
 *
 *  OUTPUTS:      ErrorMsg - Error message if database call failed.
 *
 *  RTRN VALUE:   A PTE code is returned:
 *                       PTEMSG_OK  if no errors else a code to identify
 *                       the reason for the failure.
 *
 *  AUTHOR:       D. Irby
 *
 ******************************************************************************/
BYTE db_insert_bon03( pBON03 bon03_ptr, pCHAR ErrorMsg )
{
   double         start_time;
   double         end_time;
   double         duration;

   if ( db_error_statics_flag == true )
      start_time = ptetime_get_time();

   bon03_to_db( bon03_ptr );

    EXEC SQL INSERT INTO bon03
     (  transaction_id,
        cash_promo_id,
        tag_id,
        program_start_date,
        program_end_date,
        card_nbr,
        merchant_id,
        terminal_id,
        auth_number,
        tran_date,
        tran_time,
        reward_amount,
        tran_amount,
        retrieval_ref_num,
        resp_text,
        invoice_number,
        card_holder_name,
        system_date
     )
   VALUES
     (  :pte_bon03.transaction_id,
        :pte_bon03.cash_id,
        :pte_bon03.tag_id,
        :pte_bon03.program_start_date,
        :pte_bon03.program_end_date,
        :pte_bon03.card_nbr,
        :pte_bon03.merchant_id,
        :pte_bon03.terminal_id,
        :pte_bon03.auth_number,
        :pte_bon03.tran_date,
        :pte_bon03.tran_time,
        :pte_bon03.reward_amount,
        :pte_bon03.tran_amount,
        :pte_bon03.retrieval_ref_num,
        :pte_bon03.resp_text,
        :pte_bon03.invoice_number,
        :pte_bon03.card_holder_name,
        to_char(SysDate, 'YYYYMMDD')
     );

   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      update_timing_stats( ST1_DB_INSERT, 0, BON03_DATA,
                           (float)duration, &TimingStats );
   }

   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_bon03,ST1 :%d,ST2 : %d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}


/******************************************************************************
 *
 *  NAME:         db_select_bon03
 *
 *  DESCRIPTION:  This function will select a record from BON03.  This
 *                table contains a list of previous cash bonus winners.
 *
 *  INPUTS:       in_card    - Cardholder account number
 *                in_cash_id - Cash Bonus Program Identifier
 *
 *  OUTPUTS:      None
 *
 *  RTRN VALUE:   PTEMSG_OK        = Found a record
 *                PTEMSG_NOT_FOUND = Did not find a record
 *
 *  AUTHOR:       D. Irby
 *
 ******************************************************************************/
INT db_select_bon03( pBYTE in_card, pBYTE in_cash_id )
{
   CHAR    ErrorMsg[100] = "";
   INT     retval;
   double  start_time;
   double  end_time;
   double  duration;

   EXEC SQL BEGIN DECLARE SECTION;

      char  card[20];
      char  cash_id[21];
      int   NumRowsReturned = 0;

   EXEC SQL END DECLARE SECTION;


   /* Get a count of records in BON03 for this card and cash program. */
   memset( card,    0x00, sizeof(card   ) );
   memset( cash_id, 0x00, sizeof(cash_id) );

   memcpy( card,    in_card,    sizeof(card)    );
   memcpy( cash_id, in_cash_id, sizeof(cash_id) );

   if ( DB_Timing_Flag == true )
      start_time = ptetime_get_time();

   EXEC SQL
      SELECT COUNT(*) 
      INTO  :NumRowsReturned
      FROM   bon03
      WHERE  card_nbr       = :card
        AND  cash_promo_id  = :cash_id;

   if ( DB_Timing_Flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      update_timing_stats( ST1_DB_SELECT, 0, BON03_DATA,
                           (float)duration, &TimingStats );
   }

   if ( NumRowsReturned > 0 )
      retval = PTEMSG_OK;
   else
      retval = PTEMSG_NOT_FOUND;

   return( retval );
}


/******************************************************************************
 *
 *  NAME:         db_select_cardholder_name
 *
 *  DESCRIPTION:  This function gets the cardholder's name from CCF01.
 *
 *  INPUTS:       p_cardnum
 *                p_cardtype - C or D for credit or debit
 *
 *  OUTPUTS:      p_cardname - Cardholder name
 *                ErrorMsg   - Error message if database call failed.
 *
 *  RTRN VALUE:   A PTE code is returned:
 *                       PTEMSG_OK  if no errors else a code to identify
 *                       the reason for the failure.
 *
 *  AUTHOR:       D. Irby
 *
 ******************************************************************************/
BYTE db_select_cardholder_name( pCHAR p_cardnum,  pCHAR p_cardtype,
                                pCHAR p_cardname, pCHAR ErrorMsg )
{
   BYTE    retval = PTEMSG_OK;
   double  start_time;
   double  end_time;
   double  duration;

   EXEC SQL BEGIN DECLARE SECTION;

      char  ch_name[31];
      char  ch_num [20];
      char  ch_type [2];

   EXEC SQL END DECLARE SECTION;

   memset( ch_name, 0x00, sizeof(ch_name) );
   memset( ch_num,  0x00, sizeof(ch_num ) );
   memset( ch_type, 0x00, sizeof(ch_type) );

   strcpy( ch_num,  p_cardnum  );
   strcpy( ch_type, p_cardtype );

   if ( DB_Timing_Flag == true )
      start_time = ptetime_get_time();

 EXEC SQL SELECT name_dba
            INTO  :ch_name
            FROM   CCF01
            WHERE  card_nbr  = :ch_num
              AND  card_type = :ch_type;

   if ( DB_Timing_Flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      update_timing_stats( ST1_DB_SELECT, 0, BON02_DATA,
                           (float)duration, &TimingStats );
   }

   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		retval = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In db_select_cardholder_name ,ST1 :%d,ST2 : %d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	}
   else
      strcpy( p_cardname, ch_name );

   return( retval );
}
/*praneeth code*/
BYTE db_update_OMC01_Repeats( pCHAR merchant_id, pCHAR card_nbr,pCHAR no_repeated,pCHAR ErrorMsg )
{
	char cupMid[16]={0};
	
	strncpy( cupMid, &merchant_id[7],8);
	if ( db_error_statics_flag == true )
	{
		start_time = ptetime_get_time();
	}
	/* Make sure we can access the record before attempting to update it.  */
	EXEC SQL
	SELECT *
   	INTO  :db_omc01
   	FROM   OMC01
   	WHERE (merchant_id = :merchant_id OR SUBSTR(merchant_id,8,8) = :cupMid ) AND
       	  card_nbr = :card_nbr AND
   		  rownum = 1
      	  For Update NOWAIT;
		
	if ( db_error_statics_flag == true )
	{
		end_time = ptetime_get_time();
		duration = end_time - start_time;
		if(duration >= db_error_statics_value)
		{
			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query MID & Card : Updateds, ST1 :%d,ST2 : %d,Data_Type : OMC01 ,Fun_Name : db_update_OMC01_Repeats_S2 , Duration = %f,MID:%s ",
			DB_MsgSubtype1,DB_MsgSubtype2,duration,merchant_id);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		}
	}
	if (SQLCODE == NO_DATA_FOUND ) // No Rule define with MID and Card number. Lets check only with MID
	{
		if ( db_error_statics_flag == true )
		{
			start_time = ptetime_get_time();
		}
		/* Make sure we can access the record before attempting to update it.  */
		EXEC SQL
  		SELECT *
  		INTO  :db_omc01
  		FROM   OMC01
    	WHERE (merchant_id = merchant_id OR SUBSTR(merchant_id,8,8) = :cupMid )	AND
     	 	  card_nbr is NULL AND
  		  	  rownum = 1	
  		For Update NOWAIT;
	
		if ( db_error_statics_flag == true )
		{
			end_time = ptetime_get_time();
			duration = end_time - start_time;
			if(duration >= db_error_statics_value)
			{
				memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query Card Not Present: Updateds, ST1 :%d,ST2 : %d,Data_Type : OMC01 ,Fun_Name : db_update_OMC01_Repeats_S1 , Duration = %f,MID:%s",
				DB_MsgSubtype1,DB_MsgSubtype2,duration,merchant_id);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
			}
		}
		if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
		{
			/* Record is inaccessible. Return with error. */
			memset(er_buf,0x00,sizeof(er_buf));
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In card not Present Cant not present db_update_OMC01_Repeats ,ST1 :%d,ST2 : %d_1 MID: %s",
			DB_MsgSubtype1,DB_MsgSubtype2,merchant_id);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
		}

		if ( db_error_statics_flag == true )
		{
    		start_time = ptetime_get_time();
		}
		EXEC SQL UPDATE OMC01 
		SET repeated = :no_repeated                              
		WHERE (merchant_id = :merchant_id OR SUBSTR(merchant_id,8,8) = :cupMid )	  	
	    AND card_nbr is NULL;
  		if ( db_error_statics_flag == true )
   		{
  			end_time = ptetime_get_time();
 			duration = end_time - start_time;
  			if(duration >= (double)db_error_statics_value)
  			{
  				memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query Card Not Present: Updateds, ST1 :%d,ST2 : %d,Data_Type : OMC01 ,Fun_Name : db_update_OMC01_Repeats_U1 , Duration = %f,MID:%s",
				DB_MsgSubtype1,DB_MsgSubtype2,duration,merchant_id);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
  			}
		}
	}
	else if ( SQLCODE == 0 || SQLCODE == NULL_COLUMN_DATA)
	{
	 	if ( db_error_statics_flag == true )
   		{
    		start_time = ptetime_get_time();
   		}
		EXEC SQL UPDATE OMC01 
   		SET repeated = :no_repeated                              
   		WHERE (merchant_id = :merchant_id OR SUBSTR(merchant_id,8,8) = :cupMid )	  	
	  	AND card_nbr = :card_nbr;
   		
   		if ( db_error_statics_flag == true )
   		{
      	 	end_time = ptetime_get_time();
     		duration = end_time - start_time;
      		if(duration >= (double)db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query MID only: Updateds, ST1 :%d,ST2 : %d,Data_Type : OMC01 ,Fun_Name : db_update_OMC01_Repeats_U2 , Duration = %f,MID:%s ",
				DB_MsgSubtype1,DB_MsgSubtype2,duration,merchant_id);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
   		}

		if ( SQLCODE != 0 )
   		{   	   		
		   	memset(er_buf,0x00,sizeof(er_buf));
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
			sprintf(er_buf,"In MID only db_update_OMC01_Repeats,ST1 :%d,ST2 : %d_3,MID:%s ",
			DB_MsgSubtype1,DB_MsgSubtype2,merchant_id);
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
		}
   	}
   	else
   	{
   		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_update_OMC01_Repeats,ST1 :%d,ST2 : %d_3,MID:%s ",
		DB_MsgSubtype1,DB_MsgSubtype2,merchant_id);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   	}
       
   return PTEMSG_OK;
}
/*end of praneeth code*/

BYTE db_insert_ptsn01( pPTSN01 ptsn01_ptr, pCHAR ErrorMsg )
{
   double         start_time;
   double         end_time;
   double         duration;

   if ( db_error_statics_flag == true )
      start_time = ptetime_get_time();

   ptsn01_to_db( ptsn01_ptr );

    EXEC SQL INSERT INTO ptsn01
     (  transaction_id,
        system_date,
        length_serial_no,
        total_length,
        table_id,
        serial_number,
        future_field_1,
        future_field_2
     )
   VALUES
     (  :pte_ptsn01.transaction_id,
        :pte_ptsn01.system_date,
        :pte_ptsn01.length_serial_no,
        :pte_ptsn01.total_length,
        :pte_ptsn01.table_id,
        :pte_ptsn01.serial_number,
        :pte_ptsn01.future_field_1,
        :pte_ptsn01.future_field_2
     );

   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      update_timing_stats( ST1_DB_INSERT, 0, PTSN01_DATA,
                           (float)duration, &TimingStats );
   }

   if ( SQLCODE != 0 && SQLCODE!=TABLE_DOESNT_EXIST && SQLCODE!=UNIQUE_CONSTRAINT_ERROR)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) ;
		sprintf(er_buf,"In  db_insert_ptsn01,ST1 :%d,ST2 : %d",DB_MsgSubtype1,DB_MsgSubtype2);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
		return PTEMSG_OK;
	}

	//dbcommon_commit();
   return PTEMSG_OK;
}


