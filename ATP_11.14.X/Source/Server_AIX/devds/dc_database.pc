/******************************************************************************
  
   Module:           dc_database.pc
  
   Title:            Device Data Server DB Routines
  
   Description:
   
   Application:      Equitable

   Authour:       

******************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>


#ifdef WIN32
#include <sqlproto.h>
#endif

#include <math.h>
#include <time.h>
#include <sys/timeb.h>

#include "basictyp.h"
#include "pte.h"
#include "pteipc.h"
#include "ptemsg.h"
#include "ptetimer.h"
#include "ntutils.h"
#include "app_info.h"
#include "dc_dbstruct.h"
#include "equitdb.h"
#include "dc_database.h"
#include "dbcommon.h"
#include "txutils.h"
#include "ptetime.h"
#include "memmnger.h"
#include "nc_dbstruct.h"

#define AMEX03B_APRIL2024 1
#define BDOR_62_PREAUTH_VOID 1
#define OCT_MAN_2024_BLD_2 1

#define INITIAL_PREAUTH_TRA      						  	"PRIMRY"
#define INCREMENTAL_PREAUTH_TRA      					  	"INCPRA"
#define INITIAL_PREAUTH_TRA_WITH_INCREMENTAL                "PI"
#define INITIAL_PREAUTH_TRA_WITHOUT_INCREMENTAL             "WI"
#define PREAUTH_TRA_LEN  								  	6
#define PREAUTH_TRA_LEN_WITH_INCREMENTAL_FLAG  				2

/* Function prototypes */
extern void format_date(pCHAR temp);
extern long Txutils_Calculate_Julian_Date(BYTE * );
extern void Txutils_Calculate_Gregorian_Date(LONG , pCHAR );
extern void genutil_format_date(pCHAR temp);


#if BDOR_62_PREAUTH_VOID

extern CHAR maximum_validity_of_preauth_in_days_for_MC[3];
extern CHAR maximum_validity_of_preauth_in_days_for_VISA[3];
extern CHAR maximum_validity_of_preauth_in_days_for_AMEX[3];
extern CHAR maximum_validity_of_preauth_in_days_for_DCI[3];
extern CHAR maximum_validity_of_preauth_in_days_for_JCB[3];
extern CHAR maximum_validity_of_preauth_in_days_for_UPI[3];

#endif

#if OCT_MAN_2024_BLD_2

extern CHAR smcc_maximum_validity_of_preauth_in_days_for_MC[3];
extern CHAR smcc_maximum_validity_of_preauth_in_days_for_VISA[3];
extern CHAR smcc_maximum_validity_of_preauth_in_days_for_AMEX[3];
extern CHAR smcc_maximum_validity_of_preauth_in_days_for_DCI[3];
extern CHAR smcc_maximum_validity_of_preauth_in_days_for_JCB[3];
extern CHAR smcc_maximum_validity_of_preauth_in_days_for_UPI[3];

#endif

/* Oracle error codes */
#define NULL_COLUMN_DATA -1405
#define NO_DATA_FOUND    1403

/* For DB statics added by raghu */
extern BYTE DB_MsgSubtype2 ;
extern BYTE DB_MsgSubtype1 ;
char DB_Tmr_Lgng_Buf[512];
double start_time;
double end_time  ;
double duration  ; 
extern INT db_error_statics_flag;
extern double db_error_statics_value;
char er_buf[512];
BYTE DB_rcode;
extern CHAR  DB_Logging_Filename[256];
extern CHAR  DB_module_file_name[256];
extern CHAR  DB_file_path[256];
/* End   */

extern CHAR  AppName   [MAX_APP_NAME_SIZE];

/*Merchant offset in croosponding tables*/
#define DCF01_MERCHANT_ID_OFFSET      96
#define BCH01_MERCHANT_ID_OFFSET      16
#define BCH01_MP_MERCHANT_ID_OFFSET   16
#define BCH10_MERCHANT_ID_OFFSET      29
#define BCH11_MERCHANT_ID_OFFSET	  29
#define BCH20_MERCHANT_ID_OFFSET      29
#define MID_TID_STATE_RESTRICTED_VALUE "R"

#ifdef _DEBUG
   #define PRINT( X ) printf( X )
#else
   #define PRINT( X )
#endif

extern CHAR AppName[];
SQL01 Sql01;
INT    rtnval;

/* Dynamic sql IA */
typedef char dynsql[100]; 
EXEC SQL TYPE dynsql IS STRING(80) REFERENCE;

EXEC SQL INCLUDE sqlca;

typedef struct
{
   WORD len;
   BYTE pin_data[100];
}RAWPINDATA;

EXEC SQL BEGIN DECLARE SECTION;

   /* error code variable */
   long    SQLCODE;
   long    SQL_CODE;

/**/
EXEC SQL TYPE RAWPINDATA is VARRAW(5000);

struct
{
   
   char  device_id                                 [9];
   char  batch_nbr                                 [7];
   char  retrieval_ref_num                         [13];

   char  merchant_id                               [16];
   char  processing_code                           [7];
   char  tran_amount                               [13];
   char  response_code                             [3];
   char  auth_number                               [7];
   char  tran_date                                 [9];
   char  tran_time                                 [7];
   char  transaction_id                            [21];
   char  message_type                              [5];
   char  card_nbr                                  [20];
   char  invoice_nbr                               [9];
   char  settle_file_prefix                        [7];
   char  product_code                              [9];
   char  odometer                                  [8];
   char  sys_trace_audit_num                       [7];
   char  tx_key                                    ;
   char  bin_type                                  ;
   char type_of_data                               [3];
   char down_payment                               [13];
   char period                                     [3];
   char interest_rate                              [5];
   char total_interest                             [13];
   char redemption_amount                          [13];
   char vehicle_number                             [9];
   char pos_entry_mode                             [5];
   char profile                                    [3];
   char nbr_of_prod_codes                          [3];
   
   char product1_code                              [7];
   char product1_quantity                          [3];
   char product1_amount                            [13];
   char product2_code                              [7];
   char product2_quantity                          [3];
   char product2_amount                            [13];
   char product3_code                              [7];
   char product3_quantity                          [3];
   char product3_amount                            [13];
   char product4_code                              [7];
   char product4_quantity                          [3];
   char product4_amount                            [13];
   char product5_code                              [7];
   char product5_quantity                          [3];
   char product5_amount                            [13];
   char product6_code                              [7];
   char product6_quantity                          [3];
   char product6_amount                            [13];
   char product7_code                              [7];
   char product7_quantity                          [3];
   char product7_amount                            [13];
   char product8_code                              [7];
   char product8_quantity                          [3];
   char product8_amount                            [13];
   char product9_code                              [7];
   char product9_quantity                          [3];
   char product9_amount                            [13];
   char product10_code                              [7];
   char product10_quantity                          [3];
   char product10_amount                            [13];
   char product11_code                              [7];
   char product11_quantity                          [3];
   char product11_amount                            [13];
   char product12_code                              [7];
   char product12_quantity                          [3];
   char product12_amount                            [13];
   char product13_code                              [7];
   char product13_quantity                          [3];
   char product13_amount                            [13];
   char product14_code                              [7];
   char product14_quantity                          [3];
   char product14_amount                            [13];
   char product15_code                              [7];
   char product15_quantity                          [3];
   char product15_amount                            [13];
   char product16_code                              [7];
   char product16_quantity                          [3];
   char product16_amount                            [13];
   char product17_code                              [7];
   char product17_quantity                          [3];
   char product17_amount                            [13];
   char product18_code                              [7];
   char product18_quantity                          [3];
   char product18_amount                            [13];
   char product19_code                              [7];
   char product19_quantity                          [3];
   char product19_amount                            [13];
   char product20_code                              [7];
   char product20_quantity                          [3];
   char product20_amount                            [13];
   char aportionment_flag                           [2];
   char exp_date                                    [5];
   char open_date                                   [9];
   char open_time                                   [7];
   char cash_bonus                                  [2];
   char transmission_timestamp                      [11];
   char mcard_banknet                               [51];
   char  processed                                 [2];
   char ticket_nbr									[16];
   char def_gross_amt                               [13];
   char term                                        [4];
}pte_bch20;

struct
{
   
   varchar  device_id                                 [9];
   varchar  batch_nbr                                 [7];
   varchar  retrieval_ref_num                         [13];

   varchar  merchant_id                               [16];
   varchar  processing_code                           [7];
   varchar  tran_amount                               [13];
   varchar  response_code                             [3];
   varchar  auth_number                               [7];
   varchar  tran_date                                 [9];
   varchar  tran_time                                 [7];
   varchar  transaction_id                            [21];
   varchar  message_type                              [5];
   varchar  card_nbr                                  [20];
   varchar  invoice_nbr                               [9];
   varchar  settle_file_prefix                        [7];
   varchar  product_code                              [9];
   varchar  odometer                                  [8];
   varchar  sys_trace_audit_num                       [7];
   varchar  tx_key                                    [1];
   varchar  bin_type                                  [1];
   varchar type_of_data                               [3];
   varchar down_payment                               [13];
   varchar period                                     [3];
   varchar interest_rate                              [5];
   varchar total_interest                             [13];
   varchar redemption_amount                          [13];
   varchar vehicle_number                             [9];
   varchar pos_entry_mode                             [5];
   varchar profile                                    [3];
   varchar nbr_of_prod_codes                          [3];
   
   varchar product1_code                              [7];
   varchar product1_quantity                          [3];
   varchar product1_amount                            [13];
   varchar product2_code                              [7];
   varchar product2_quantity                          [3];
   varchar product2_amount                            [13];
   varchar product3_code                              [7];
   varchar product3_quantity                          [3];
   varchar product3_amount                            [13];
   varchar product4_code                              [7];
   varchar product4_quantity                          [3];
   varchar product4_amount                            [13];
   varchar product5_code                              [7];
   varchar product5_quantity                          [3];
   varchar product5_amount                            [13];
   varchar product6_code                              [7];
   varchar product6_quantity                          [3];
   varchar product6_amount                            [13];
   varchar product7_code                              [7];
   varchar product7_quantity                          [3];
   varchar product7_amount                            [13];
   varchar product8_code                              [7];
   varchar product8_quantity                          [3];
   varchar product8_amount                            [13];
   varchar product9_code                              [7];
   varchar product9_quantity                          [3];
   varchar product9_amount                            [13];
   varchar product10_code                              [7];
   varchar product10_quantity                          [3];
   varchar product10_amount                            [13];
   varchar product11_code                              [7];
   varchar product11_quantity                          [3];
   varchar product11_amount                            [13];
   varchar product12_code                              [7];
   varchar product12_quantity                          [3];
   varchar product12_amount                            [13];
   varchar product13_code                              [7];
   varchar product13_quantity                          [3];
   varchar product13_amount                            [13];
   varchar product14_code                              [7];
   varchar product14_quantity                          [3];
   varchar product14_amount                            [13];
   varchar product15_code                              [7];
   varchar product15_quantity                          [3];
   varchar product15_amount                            [13];
   varchar product16_code                              [7];
   varchar product16_quantity                          [3];
   varchar product16_amount                            [13];
   varchar product17_code                              [7];
   varchar product17_quantity                          [3];
   varchar product17_amount                            [13];
   varchar product18_code                              [7];
   varchar product18_quantity                          [3];
   varchar product18_amount                            [13];
   varchar product19_code                              [7];
   varchar product19_quantity                          [3];
   varchar product19_amount                            [13];
   varchar product20_code                              [7];
   varchar product20_quantity                          [3];
   varchar product20_amount                            [13];

   varchar aportionment_flag                           [2];
   varchar exp_date                                    [5];
   varchar open_date                                   [9];
   varchar open_time                                   [7];
   varchar cash_bonus                                  [2];
   varchar transmission_timestamp                      [11];
   varchar mcard_banknet                               [51];
   varchar  processed                                 [2];
   varchar ticket_nbr									[16];
   varchar def_gross_amt                               [13];
   varchar term                                        [4];
}db_bch20;

struct
{
    char transaction_id                     [21]; 

    char entry_type                         ;
    char tpdu_id                            [16];
    char issuer_id                          [21];
    char acquirer_id                        [21];
    char tx_key                             ;
    char terminal_id                        [9];
    char terminal_type                      [3];
    char response_text                      [41];
    char card_num_len                       [3];
    char card_num                           [20];
    char exp_date                           [5];
    char total_amount                       [13];
    char add_amounts                        [25];
    char invoice_number                     [9];
    char orig_amount                        [13];
    char auth_number                        [7];
    char processing_code                    [7];
    char sys_trace_audit_num                [7];
    char orig_sys_trace_num                 [7];
    char pos_entry_mode                     [5];
    char nii                                [5];
    char pos_condition_code                 [3];
    char track1                             [77];
    char track2                             [38];
    char retrieval_ref_num                  [13];
    char orig_retrieval_ref_num             [13];
    char merchant_id                        [16];
    char orig_message                       [5];
    char settlement_total                   [17];
    char message_type                       [5];
    char card_holder_name                   [31];
    char general_status                     ;
    char originator_queue                   [17];
    char originator_info                    [33];
    char batch_number                       [7];
    char response_code                      [3];
    char date_yyyymmdd                      [9];
    char time_hhmmss                        [7];
    char num_sales                          [4];
    char sales_amount                       [13];
    char num_refunds                        [4];
    char refund_amount                      [13];
    char num_dbsales                        [4];
    char dbsales_amount                     [13];
    char num_dbrefunds                      [4];
    char dbrefund_amount                    [13];
    char pin_block                          [19];
    char tax_amount                         [13];
    char tip_amount                         [13];
    char tran_start_time                    [17];
    char host_start_time                    [17];
    char host_finish_time                   [17];
    char tran_finish_time                   [17];
    char settle_file_prefix                 [7];
    char resp_source_len                    [3];
    char visa_char_indicator                ;
    char visa_tran_id                       [16];
    char visa_validation_code               [5];
    char mcard_banknet_len                  [4];
    char mcard_banknet                      [51];
    char agent_id_len                       [4];
    char agent_id                           [12];
    char cvc                                ;
    char settlement_date                    [5];

    char category_code                      [5];
    char conversion_rate                    [10];
    char product_code                       [9];
    char odometer                           [8];
    char organization_id                    [5];
    char dynamic_keychange                  ;

   char source_key                          [49];
   char txn_cnt                            [4];
   char dcf01_retired_cwk                  [49];
   char dest_key                           [49];
   char ncf01_retired_cwk                  [49];
   char handler_queue        		       [8];
   char authorizing_host_queue		   	   [8];
   char max_net_consec_tmouts              [4];
   char max_active_txns                    [4];
   char forwarding_institution_id          [12];
   char remote_nsp_type                    [2];
   char kek                                [17]; 
   char acquiring_id                       [12];
   char outstanding_balance                [13]; 
   char credit_limit                       [13];
   char nfi_name                           [11];
   char nfi_seq_nbr                        [7];
   char nfi_start_date                     [9];
   char nfi_end_date                       [9];
   char resp_source                        [26];

   char origin                             [3];
   char auth_1                             [3];
   char auth_2                             [3];
   char update_mask                        [2];
   char type_of_data                       [3];
   char down_payment                       [13];
   char period                             [3];
   char interest_rate                      [5];
   char total_interest                     [13];
   char redemption_amount                  [13];
   char vehicle_number                     [9];

   char profile                                    [3];
   char nbr_of_prod_codes                          [3];
   
   char product1_code                              [7];
   char product1_quantity                          [3];
   char product1_amount                            [13];
   char product2_code                              [7];
   char product2_quantity                          [3];
   char product2_amount                            [13];
   char product3_code                              [7];
   char product3_quantity                          [3];
   char product3_amount                            [13];
   char product4_code                              [7];
   char product4_quantity                          [3];
   char product4_amount                            [13];
   char product5_code                              [7];
   char product5_quantity                          [3];
   char product5_amount                            [13];
   char product6_code                              [7];
   char product6_quantity                          [3];
   char product6_amount                            [13];
   char product7_code                              [7];
   char product7_quantity                          [3];
   char product7_amount                            [13];
   char product8_code                              [7];
   char product8_quantity                          [3];
   char product8_amount                            [13];
   char product9_code                              [7];
   char product9_quantity                          [3];
   char product9_amount                            [13];
   char product10_code                              [7];
   char product10_quantity                          [3];
   char product10_amount                            [13];
   char product11_code                              [7];
   char product11_quantity                          [3];
   char product11_amount                            [13];
   char product12_code                              [7];
   char product12_quantity                          [3];
   char product12_amount                            [13];
   char product13_code                              [7];
   char product13_quantity                          [3];
   char product13_amount                            [13];
   char product14_code                              [7];
   char product14_quantity                          [3];
   char product14_amount                            [13];
   char product15_code                              [7];
   char product15_quantity                          [3];
   char product15_amount                            [13];
   char product16_code                              [7];
   char product16_quantity                          [3];
   char product16_amount                            [13];
   char product17_code                              [7];
   char product17_quantity                          [3];
   char product17_amount                            [13];
   char product18_code                              [7];
   char product18_quantity                          [3];
   char product18_amount                            [13];
   char product19_code                              [7];
   char product19_quantity                          [3];
   char product19_amount                            [13];
   char product20_code                              [7];
   char product20_quantity                          [3];
   char product20_amount                            [13];
   char visa_merchant_id                            [16];
   char cash_bonus                                  [2];  /* added 01-29-99 by IG */
   char deferred_factor                             [8];  /* added 01-29-99 by IG */
   char deferred_term_length                        [4];  /* added 01-29-99 by IG */
   char currency_code                               [4];  /* added 01-29-99 by IG */
   char transmission_timestamp                      [11]; /* added 01-29-99 by IG */
   char tran_fee_amount                             [9];  /* added 01-29-99 by IG */
   char cvc_data                                    [4];  /* added 01-29-99 by IG */

   char verify_mag_stripe                           [2];  /* added 02-09-99 by IG */
   char saf                                         [2];  /* added 02-09-99 by IG */
   char security_response_code                      [3];  /* added 02-09-99 by IG */
   char service_code                                [4];  /* added 02-09-99 by IG */
   char source_pin_format                           [3];  /* added 02-09-99 by IG */
   char dest_pin_format                             [3];  /* added 02-09-99 by IG */
   char voice_auth                                  [2];  /* added 02-09-99 by IG */
   char actual_amount                               [13]; /* AP IG, Equitable 02-10-99 */
   char reversal_amount                             [13]; /* AP IG, Equitable 02-10-99 */
   char voice_auth_text                             [241]; /* IG 02-22-99 */ 
   char operator_id                                 [21];  /* IA 03-09-99 */
   char workstation                                 [21];  /* IA 03-16-99 */
   char orig_auth_number                            [7];   /* IA 04-08-99 */
   char ticket_nbr									[16];
   char system_date                                 [9];
   char def_gross_amt                               [13];
   char monthly_amort_amt                           [13];
}pte_tlf01;

struct
{
    varchar transaction_id                     [21]; 

    varchar entry_type                         [1];
    varchar tpdu_id                            [16];
    varchar issuer_id                          [21];
    varchar acquirer_id                        [21];
    varchar tx_key                             [1];
    varchar terminal_id                        [9];
    varchar terminal_type                      [3];
    varchar response_text                      [41];
    varchar card_num_len                       [3];
    varchar card_num                           [20];
    varchar exp_date                           [5];
    varchar total_amount                       [13];
    varchar add_amounts                        [25];
    varchar invoice_number                     [9];
    varchar orig_amount                        [13];
    varchar auth_number                        [7];
    varchar processing_code                    [7];
    varchar sys_trace_audit_num                [7];
    varchar orig_sys_trace_num                 [7];
    varchar pos_entry_mode                     [5];
    varchar nii                                [5];
    varchar pos_condition_code                 [3];
    varchar track1                             [77];
    varchar track2                             [38];
    varchar retrieval_ref_num                  [13];
    varchar orig_retrieval_ref_num             [13];
    varchar merchant_id                        [16];
    varchar orig_message                       [5];
    varchar settlement_total                   [17];
    varchar message_type                       [5];
    varchar card_holder_name                   [31];
    varchar general_status                     [1];
    varchar originator_queue                   [17];
    varchar originator_info                    [33];
    varchar batch_number                       [7];
    varchar response_code                      [3];
    varchar date_yyyymmdd                      [9];
    varchar time_hhmmss                        [7];
    varchar num_sales                          [4];
    varchar sales_amount                       [13];
    varchar num_refunds                        [4];
    varchar refund_amount                      [13];
    varchar num_dbsales                        [4];
    varchar dbsales_amount                     [13];
    varchar num_dbrefunds                      [4];
    varchar dbrefund_amount                    [13];
    varchar pin_block                          [19];
    varchar tax_amount                         [13];
    varchar tip_amount                         [13];
    varchar tran_start_time                    [17];
    varchar host_start_time                    [17];
    varchar host_finish_time                   [17];
    varchar tran_finish_time                   [17];
    varchar settle_file_prefix                 [7];
    varchar resp_source_len                    [3];
    varchar visa_char_indicator                [1];
    varchar visa_tran_id                       [16];
    varchar visa_validation_code               [5];
    varchar mcard_banknet_len                  [4];
    varchar mcard_banknet                      [51];
    varchar agent_id_len                       [4];
    varchar agent_id                           [12];
    varchar cvc                                [1];
    varchar settlement_date                    [5];

    varchar category_code                      [5];
    varchar conversion_rate                    [10];
    varchar product_code                       [9];
    varchar odometer                           [8];
    varchar organization_id                    [5];
    varchar dynamic_keychange                  [1];

   varchar source_key                         [49];
   varchar txn_cnt                            [4];
   varchar dcf01_retired_cwk                  [49];
   varchar dest_key                           [49];
   varchar ncf01_retired_cwk                  [49];
   varchar handler_queue        		      [8];
   varchar authorizing_host_queue		   	  [8];
   varchar max_net_consec_tmouts              [4];
   varchar max_active_txns                    [4];
   varchar forwarding_institution_id          [12];
   varchar remote_nsp_type                    [2];
   varchar kek                                [17];
   varchar acquiring_id                       [12];
   varchar outstanding_balance                [13];
   varchar credit_limit                       [13];
   varchar nfi_name                           [11];
   varchar nfi_seq_nbr                        [7];
   varchar nfi_start_date                     [9];
   varchar nfi_end_date                       [9];
   varchar resp_source                        [26];
   varchar origin                             [3];
   varchar auth_1                             [3];
   varchar auth_2                             [3];
   varchar update_mask                        [2];
   varchar type_of_data                       [3];
   varchar down_payment                       [13];
   varchar period                             [3];
   varchar interest_rate                      [5];
   varchar total_interest                     [13];
   varchar redemption_amount                  [13];
   varchar vehicle_number                     [9];

   varchar profile                                    [3];
   varchar nbr_of_prod_codes                          [3];
   
   varchar product1_code                              [7];
   varchar product1_quantity                          [3];
   varchar product1_amount                            [13];
   varchar product2_code                              [7];
   varchar product2_quantity                          [3];
   varchar product2_amount                            [13];
   varchar product3_code                              [7];
   varchar product3_quantity                          [3];
   varchar product3_amount                            [13];
   varchar product4_code                              [7];
   varchar product4_quantity                          [3];
   varchar product4_amount                            [13];
   varchar product5_code                              [7];
   varchar product5_quantity                          [3];
   varchar product5_amount                            [13];
   varchar product6_code                              [7];
   varchar product6_quantity                          [3];
   varchar product6_amount                            [13];
   varchar product7_code                              [7];
   varchar product7_quantity                          [3];
   varchar product7_amount                            [13];
   varchar product8_code                              [7];
   varchar product8_quantity                          [3];
   varchar product8_amount                            [13];
   varchar product9_code                              [7];
   varchar product9_quantity                          [3];
   varchar product9_amount                            [13];
   varchar product10_code                              [7];
   varchar product10_quantity                          [3];
   varchar product10_amount                            [13];
   varchar product11_code                              [7];
   varchar product11_quantity                          [3];
   varchar product11_amount                            [13];
   varchar product12_code                              [7];
   varchar product12_quantity                          [3];
   varchar product12_amount                            [13];
   varchar product13_code                              [7];
   varchar product13_quantity                          [3];
   varchar product13_amount                            [13];
   varchar product14_code                              [7];
   varchar product14_quantity                          [3];
   varchar product14_amount                            [13];
   varchar product15_code                              [7];
   varchar product15_quantity                          [3];
   varchar product15_amount                            [13];
   varchar product16_code                              [7];
   varchar product16_quantity                          [3];
   varchar product16_amount                            [13];
   varchar product17_code                              [7];
   varchar product17_quantity                          [3];
   varchar product17_amount                            [13];
   varchar product18_code                              [7];
   varchar product18_quantity                          [3];
   varchar product18_amount                            [13];
   varchar product19_code                              [7];
   varchar product19_quantity                          [3];
   varchar product19_amount                            [13];
   varchar product20_code                              [7];
   varchar product20_quantity                          [3];
   varchar product20_amount                            [13];
   varchar visa_merchant_id                            [16];
   varchar cash_bonus                                  [2];  /* added 01-29-99 by IG */
   varchar deferred_factor                             [8];  /* added 01-29-99 by IG */
   varchar deferred_term_length                        [4];  /* added 01-29-99 by IG */
   varchar currency_code                               [4];  /* added 01-29-99 by IG */
   varchar transmission_timestamp                      [11]; /* added 01-29-99 by IG */
   varchar tran_fee_amount                             [9];  /* added 01-29-99 by IG */
   varchar cvc_data                                    [4];  /* added 01-29-99 by IG */
   varchar verify_mag_stripe                           [2];  /* added 02-09-99 by IG */
   varchar saf                                         [2];  /* added 02-09-99 by IG */
   varchar security_response_code                      [3];  /* added 02-09-99 by IG */
   varchar service_code                                [4];  /* added 02-09-99 by IG */
   varchar source_pin_format                           [3];  /* added 02-09-99 by IG */
   varchar dest_pin_format                             [3];  /* added 02-09-99 by IG */
   varchar voice_auth                                  [2];  /* added 02-09-99 by IG */
   varchar actual_amount                               [13]; /* AP IG, Equitable 02-10-99 */
   varchar reversal_amount                             [13]; /* AP IG, Equitable 02-10-99 */
   varchar voice_auth_text                             [241]; /* IG 02-22-99 */
   varchar operator_id                                 [21];  /* IA 03-09-99 */
   varchar workstation                                 [21];  /* IA 03-16-99 */
   varchar orig_auth_number                            [7];   /* IA 04-08-99 */
   varchar ticket_nbr									[16];
   varchar system_date                                 [9];
   varchar def_gross_amt                               [13];
   varchar monthly_amort_amt                           [13];
}db_tlf01;


struct
{
  char low                                         [17];
  char high                                        [17];
} pte_nbf01;

struct
{
  varchar low                                      [17];
  varchar high                                     [17];
} db_nbf01;



struct
{
    char negative_group_id                          [11];
   
    char low1                                       [17];
    char high1                                      [17];
    char low2                                       [17];
    char high2                                      [17];
    char low3                                       [17];
    char high3                                      [17];
    char low4                                       [17];
    char high4                                      [17];
    char low5                                       [17];
    char high5                                      [17];
    char low6                                       [17];
    char high6                                      [17];
    char low7                                       [17];
    char high7                                      [17];
    char low8                                       [17];
    char high8                                      [17];
    char low9                                       [17];
    char high9                                      [17];
    char low10                                      [17];
    char high10                                     [17];   
                                            
}pte_ngf01;

struct
{
   varchar negative_group_id                          [11];
   
   varchar low1                                       [17];
   varchar high1                                      [17];
   varchar low2                                       [17];
   varchar high2                                      [17];
   varchar low3                                       [17];
   varchar high3                                      [17];
   varchar low4                                       [17];
   varchar high4                                      [17];
   varchar low5                                       [17];
   varchar high5                                      [17];
   varchar low6                                       [17];
   varchar high6                                      [17];
   varchar low7                                       [17];
   varchar high7                                      [17];
   varchar low8                                       [17];
   varchar high8                                      [17];
   varchar low9                                       [17];
   varchar high9                                      [17];
   varchar low10                                      [17];
   varchar high10                                     [17];                                              
}db_ngf01;

/* Negative File Info. */
 struct
{
   char  file_name                                 [9];

   char start_date                                 [9];
   char end_date                                   [9];

}pte_nfi01;

struct
{
   varchar  file_name                              [9];

   varchar start_date                              [9];
   varchar end_date                                [9];
}db_nfi01;

/* Negative File Info. */
 struct
{
   char  file_name                                 [51];

   char start_date                                 [9];
   char end_date                                   [9];

}pte_nfi02;

struct
{
   varchar  file_name                              [51];

   varchar start_date                              [9];
   varchar end_date                                [9];
}db_nfi02;

/* Negative Master File */
struct
{
   char seq_nbr                                    [7];  

   char action_code                                [2];
   char format_code                                [2];
   char account_info                               [20];
   char file_name                                  [9];

}pte_nmf01;

struct
{
   varchar seq_nbr                                 [7];  

   varchar action_code                             [2];
   varchar format_code                             [2];
   varchar account_info                            [20];
   varchar file_name                               [9];

}db_nmf01;

/* Negative Temporary File */
struct
{
   char account_info                               [20];

   char format_code                                [2];
   char file_name                                  [9];
   
}pte_ntf01;

struct
{
   varchar account_info                            [20];

   varchar format_code                             [2];
   varchar file_name                               [9];
   
}db_ntf01;



struct
{
   char  organization_id                           [5];
   char  merchant_id                               [16];
   char  yyyymmdd                                  [9];

   char  ytd_total_adds                            [7];
   char  ytd_total_deletes                         [7];
   char  mtd_total_adds                            [7];
   char  mtd_total_deletes                         [7];
   char  daily1_adds                               [7];
   char  daily1_deletes                            [7];
   char  daily2_adds                               [7];
   char  daily2_deletes                            [7];
   char  daily3_adds                               [7];
   char  daily3_deletes                            [7];
   char  daily4_adds                               [7];
   char  daily4_deletes                            [7];
   char  daily5_adds                               [7];
   char  daily5_deletes                            [7];
   char  daily6_adds                               [7];
   char  daily6_deletes                            [7];
   char  daily7_adds                               [7];
   char  daily7_deletes                            [7];
   char  daily8_adds                               [7];
   char  daily8_deletes                            [7];
   char  daily9_adds                               [7];
   char  daily9_deletes                            [7];
   char  daily10_adds                              [7];
   char  daily10_deletes                           [7];
   char  daily11_adds                              [7];
   char  daily11_deletes                           [7];
   char  daily12_adds                              [7];
   char  daily12_deletes                           [7];
   char  daily13_adds                              [7];
   char  daily13_deletes                           [7];
   char  daily14_adds                              [7];
   char  daily14_deletes                           [7];
   char  daily15_adds                              [7];
   char  daily15_deletes                           [7];
   char  daily16_adds                              [7];
   char  daily16_deletes                           [7];
   char  daily17_adds                              [7];
   char  daily17_deletes                           [7];
   char  daily18_adds                              [7];
   char  daily18_deletes                           [7];
   char  daily19_adds                              [7];
   char  daily19_deletes                           [7];
   char  daily20_adds                              [7];
   char  daily20_deletes                           [7];
   char  daily21_deletes                           [7];
   char  daily21_adds                              [7];
   char  daily22_deletes                           [7];
   char  daily22_adds                              [7];
   char  daily23_deletes                           [7];
   char  daily23_adds                              [7];
   char  daily24_deletes                           [7];
   char  daily24_adds                              [7];
   char  daily25_deletes                           [7];
   char  daily25_adds                              [7];
   char  daily26_deletes                           [7];
   char  daily26_adds                              [7];
   char  daily27_deletes                           [7];
   char  daily27_adds                              [7];
   char  daily28_deletes                           [7];
   char  daily28_adds                              [7];
   char  daily29_deletes                           [7];
   char  daily29_adds                              [7];
   char  daily30_deletes                           [7];
   char  daily30_adds                              [7];
   char  daily31_deletes                           [7];
   char  daily31_adds                              [7];
}pte_mcf20;

struct
{
   varchar  organization_id                           [5];
   varchar  merchant_id                               [16];
   varchar  yyyymmdd                                  [9];

   varchar  ytd_total_adds                            [7];
   varchar  ytd_total_deletes                         [7];
   varchar  mtd_total_adds                            [7];
   varchar  mtd_total_deletes                         [7];
   varchar  daily1_adds                               [7];
   varchar  daily1_deletes                            [7];
   varchar  daily2_adds                               [7];
   varchar  daily2_deletes                            [7];
   varchar  daily3_adds                               [7];
   varchar  daily3_deletes                            [7];
   varchar  daily4_adds                               [7];
   varchar  daily4_deletes                            [7];
   varchar  daily5_adds                               [7];
   varchar  daily5_deletes                            [7];
   varchar  daily6_adds                               [7];
   varchar  daily6_deletes                            [7];
   varchar  daily7_adds                               [7];
   varchar  daily7_deletes                            [7];
   varchar  daily8_adds                               [7];
   varchar  daily8_deletes                            [7];
   varchar  daily9_adds                               [7];
   varchar  daily9_deletes                            [7];
   varchar  daily10_adds                              [7];
   varchar  daily10_deletes                           [7];
   varchar  daily11_adds                              [7];
   varchar  daily11_deletes                           [7];
   varchar  daily12_adds                              [7];
   varchar  daily12_deletes                           [7];
   varchar  daily13_adds                              [7];
   varchar  daily13_deletes                           [7];
   varchar  daily14_adds                              [7];
   varchar  daily14_deletes                           [7];
   varchar  daily15_adds                              [7];
   varchar  daily15_deletes                           [7];
   varchar  daily16_adds                              [7];
   varchar  daily16_deletes                           [7];
   varchar  daily17_adds                              [7];
   varchar  daily17_deletes                           [7];
   varchar  daily18_adds                              [7];
   varchar  daily18_deletes                           [7];
   varchar  daily19_adds                              [7];
   varchar  daily19_deletes                           [7];
   varchar  daily20_adds                              [7];
   varchar  daily20_deletes                           [7];
   varchar  daily21_deletes                           [7];
   varchar  daily21_adds                              [7];
   varchar  daily22_deletes                           [7];
   varchar  daily22_adds                              [7];
   varchar  daily23_deletes                           [7];
   varchar  daily23_adds                              [7];
   varchar  daily24_deletes                           [7];
   varchar  daily24_adds                              [7];
   varchar  daily25_deletes                           [7];
   varchar  daily25_adds                              [7];
   varchar  daily26_deletes                           [7];
   varchar  daily26_adds                              [7];
   varchar  daily27_deletes                           [7];
   varchar  daily27_adds                              [7];
   varchar  daily28_deletes                           [7];
   varchar  daily28_adds                              [7];
   varchar  daily29_deletes                           [7];
   varchar  daily29_adds                              [7];
   varchar  daily30_deletes                           [7];
   varchar  daily30_adds                              [7];
   varchar  daily31_deletes                           [7];
   varchar  daily31_adds                              [7];
}db_mcf20;

   struct
   {
      char  organization_id                           [5];
      char  yyyymmdd                                  [9];

      char  ytd_total_tran_cnt                        [13];
      char  ytd_total_tran_amt                        [13];
      char  mtd_total_tran_cnt                        [13];
      char  mtd_total_tran_amt                        [13];
      char  tran_cnt                                  [7];
      char  tran_amt                                  [13];
      char  tran_approved_cnt                         [7];
      char  tran_declined_cnt                         [7];
      char  decline1_category_code                    [5];
      char  decline1_category_cnt                     [5];
      char  decline2_category_code                    [5];
      char  decline2_category_cnt                     [5];
      char  decline3_category_code                    [5];
      char  decline3_category_cnt                     [5];
      char  decline4_category_code                    [5];
      char  decline4_category_cnt                     [5];
      char  decline5_category_code                    [5];
      char  decline5_category_cnt                     [5];
      char  decline6_category_code                    [5];
      char  decline6_category_cnt                     [5];
      char  decline7_category_code                    [5];
      char  decline7_category_cnt                     [5];
      char  decline8_category_code                    [5];
      char  decline8_category_cnt                     [5];
      char  decline9_category_code                    [5];
      char  decline9_category_cnt                     [5];
      char  decline10_category_code                   [5];
      char  decline10_category_cnt                    [5];
      char  decline11_category_code                   [5];
      char  decline11_category_cnt                    [5];
      char  decline12_category_code                   [5];
      char  decline12_category_cnt                    [5];
      char  decline13_category_code                   [5];
      char  decline13_category_cnt                    [5];
      char  decline14_category_code                   [5];
      char  decline14_category_cnt                    [5];
      char  decline15_category_code                   [5];
      char  decline15_category_cnt                    [5];
      char  decline16_category_code                   [5];
      char  decline16_category_cnt                    [5];
      char  decline17_category_code                   [5];
      char  decline17_category_cnt                    [5];
      char  decline18_category_code                   [5];
      char  decline18_category_cnt                    [5];
      char  decline19_category_code                   [5];
      char  decline19_category_cnt                    [5];
      char  decline20_category_code                   [5];
      char  decline20_category_cnt                    [5];

   }pte_ocf20;

   struct
   {
      varchar  organization_id                           [5];
      varchar  yyyymmdd                                  [9];

      varchar  ytd_total_tran_cnt                        [13];
      varchar  ytd_total_tran_amt                        [13];
      varchar  mtd_total_tran_cnt                        [13];
      varchar  mtd_total_tran_amt                        [13];
      varchar  tran_cnt                                  [7];
      varchar  tran_amt                                  [13];
      varchar  tran_approved_cnt                         [7];
      varchar  tran_declined_cnt                         [7];
      varchar  decline1_category_code                    [5];
      varchar  decline1_category_cnt                     [5];
      varchar  decline2_category_code                    [5];
      varchar  decline2_category_cnt                     [5];
      varchar  decline3_category_code                    [5];
      varchar  decline3_category_cnt                     [5];
      varchar  decline4_category_code                    [5];
      varchar  decline4_category_cnt                     [5];
      varchar  decline5_category_code                    [5];
      varchar  decline5_category_cnt                     [5];
      varchar  decline6_category_code                    [5];
      varchar  decline6_category_cnt                     [5];
      varchar  decline7_category_code                    [5];
      varchar  decline7_category_cnt                     [5];
      varchar  decline8_category_code                    [5];
      varchar  decline8_category_cnt                     [5];
      varchar  decline9_category_code                    [5];
      varchar  decline9_category_cnt                     [5];
      varchar  decline10_category_code                   [5];
      varchar  decline10_category_cnt                    [5];
      varchar  decline11_category_code                   [5];
      varchar  decline11_category_cnt                    [5];
      varchar  decline12_category_code                   [5];
      varchar  decline12_category_cnt                    [5];
      varchar  decline13_category_code                   [5];
      varchar  decline13_category_cnt                    [5];
      varchar  decline14_category_code                   [5];
      varchar  decline14_category_cnt                    [5];
      varchar  decline15_category_code                   [5];
      varchar  decline15_category_cnt                    [5];
      varchar  decline16_category_code                   [5];
      varchar  decline16_category_cnt                    [5];
      varchar  decline17_category_code                   [5];
      varchar  decline17_category_cnt                    [5];
      varchar  decline18_category_code                   [5];
      varchar  decline18_category_cnt                    [5];
      varchar  decline19_category_code                   [5];
      varchar  decline19_category_cnt                    [5];
      varchar  decline20_category_code                   [5];
      varchar  decline20_category_cnt                    [5];

   }db_ocf20;

  

   struct
   {
      char  organization_id                           [5];

      char  name01                                    [31];
      char  addr01                                    [31];
      char  addr02                                    [31];
      char  city                                      [21];
      char  state                                     [3];
      char  zip_code                                  [11];
      char  intl_code                                 [4];
      char  contact                                   [21];
      char  phone01                                   [18];
      char  phone02                                   [18];
      char  date_added                                [9];
      char  status                                    [2];
      char  totals_ind                                [2];
      char  statistics_ind                            [2];

   }pte_ocf01;

   struct
   {
      varchar  organization_id                           [5];

      varchar  name01                                    [31];
      varchar  addr01                                    [31];
      varchar  addr02                                    [31];
      varchar  city                                      [21];
      varchar  state                                     [3];
      varchar  zip_code                                  [11];
      varchar  intl_code                                 [4];
      varchar  contact                                   [21];
      varchar  phone01                                   [18];
      varchar  phone02                                   [18];
      varchar  date_added                                [9];
      varchar  status                                    [2];
      varchar  totals_ind                                [2];
      varchar  statistics_ind                            [2];

   }db_ocf01;

   

   struct
   {
      char  organization_id                           [5];
      char  merchant_id                               [16];

      char  status                                    [2];
      char  name01                                    [31];
      char  name02                                    [31];
      char  address01                                 [31];
      char  address02                                 [31];
      char  city                                      [21];
      char  country                                   [21];
      char  state                                     [3];
      char  zip_code                                  [11];
      char  intl_code                                 [4];
      char  currency_code                             [4];
      char  contact                                   [31];
      char  phone01                                   [18];
      char  phone02                                   [18];
      char  invoice_batch                             [4];
      char  invoice_subcode                           [3];
      char  process_control_id                        [7];
      char  date_added                                [9];

      char  region_nbr                                [4];  
      char  division_nbr                              [4];  
      char  password                                  [8];  
      char  rps_merchant                              [2];  
      char  house_card_merchant                       [2];  
      char  procurement_merchant                      [2];  
      char  deferred_merchant                         [2];  
      char  cash_bonus_eligible                       [2];  
      char  vip_code                                  [5];  
      char  pos_code                                  [2];  
      char  vs_tcc_code                               [2];  
      char  mc_fcc_code                               [2];  
      char  jcb_sub_code                              [3];  
      char  mall_code                                 [4];  
      char  hc_code                                   [4];  
      char  solicit_code                              [4]; 
       
      char  block_start_date                          [9];
      char  block_end_date                            [9];
      char  credit_purch_max                          [13];
      char  credit_auth_max                           [13];
      char  credit_return_max                         [13];
      char  credit_cash_adv_max                       [13];
      char  credit_man_entry_max                      [13];
      char  credit_cash_back_max                      [13];
      char  debit_purch_max                           [13];
      char  debit_auth_max                            [13];
      char  debit_return_max                          [13];
      char  debit_cash_adv_max                        [13];
      char  debit_man_entry_max                       [13];
      char  debit_cash_back_max                       [13];
      char  aver_purch_amount                         [13];
      char  max_num_returns                           [5];
      char  amount_returns                            [13];
      char  number_man_entries                        [5];
      char  amount_deposits                           [13];
      char  pan_same                                  [3];
      char  totals_ind                                [2];
      char  statistics_ind                            [2];

      char  network_priority_routing_1                [10];
      char  network_priority_routing_2                [10];
      char  network_priority_routing_3                [10];
      char  network_priority_routing_4                [10];
      char  network_priority_routing_5                [10];
      char  network_priority_routing_6                [10];
      char  network_priority_routing_7                [10];
      char  network_priority_routing_8                [10];
      char  network_priority_routing_9                [10];
      char  network_priority_routing_10               [10];
      char  negative_group_id                         [11];
      char  voice_category_code                       [5];
      char  class_code                                [4];
      char  deferred_start_date                       [9];
      char  deferred_end_date                         [9];
      char  group_outlet_code                         [6];
      char  group_type                                [5];
      char  reload_merchant                           [2];
   
   }pte_mcf01;

   struct
   {
      varchar  organization_id                           [5];
      varchar  merchant_id                               [16];

      varchar  status                                    [2];
      varchar  name01                                    [31];
      varchar  name02                                    [31];
      varchar  address01                                 [31];
      varchar  address02                                 [31];
      varchar  city                                      [21];
      varchar  country                                   [21];
      varchar  state                                     [3];
      varchar  zip_code                                  [11];
      varchar  intl_code                                 [4];
      varchar  currency_code                             [4];
      varchar  contact                                   [31];
      varchar  phone01                                   [18];
      varchar  phone02                                   [18];
      varchar  invoice_batch                             [4];
      varchar  invoice_subcode                           [3];
      varchar  process_control_id                        [7];
      varchar  date_added                                [9];

      varchar  region_nbr                                [4];  
      varchar  division_nbr                              [4];  
      varchar  password                                  [8];  
      varchar  rps_merchant                              [2];  
      varchar  house_card_merchant                       [2];  
      varchar  procurement_merchant                      [2];  
      varchar  deferred_merchant                         [2];  
      varchar  cash_bonus_eligible                       [2];  
      varchar  vip_code                                  [5];  
      varchar  pos_code                                  [2];  
      varchar  vs_tcc_code                               [2];  
      varchar  mc_fcc_code                               [2];  
      varchar  jcb_sub_code                              [3];  
      varchar  mall_code                                 [4];  
      varchar  hc_code                                   [4];  
      varchar  solicit_code                              [4]; 

      varchar  block_start_date                          [9];
      varchar  block_end_date                            [9];
      varchar  credit_purch_max                          [13];
      varchar  credit_auth_max                           [13];
      varchar  credit_return_max                         [13];
      varchar  credit_cash_adv_max                       [13];
      varchar  credit_man_entry_max                      [13];
      varchar  credit_cash_back_max                      [13];
      varchar  debit_purch_max                           [13];
      varchar  debit_auth_max                            [13];
      varchar  debit_return_max                          [13];
      varchar  debit_cash_adv_max                        [13];
      varchar  debit_man_entry_max                       [13];
      varchar  debit_cash_back_max                       [13];
      varchar  aver_purch_amount                         [13];
      varchar  max_num_returns                           [5];
      varchar  amount_returns                            [13];
      varchar  number_man_entries                        [5];
      varchar  amount_deposits                           [13];
      varchar  pan_same                                  [3];
      varchar  totals_ind                                [2];
      varchar  statistics_ind                            [2];

      varchar  network_priority_routing_1                [10];
      varchar  network_priority_routing_2                [10];
      varchar  network_priority_routing_3                [10];
      varchar  network_priority_routing_4                [10];
      varchar  network_priority_routing_5                [10];
      varchar  network_priority_routing_6                [10];
      varchar  network_priority_routing_7                [10];
      varchar  network_priority_routing_8                [10];
      varchar  network_priority_routing_9                [10];
      varchar  network_priority_routing_10               [10];
      varchar  negative_group_id                         [11];
      varchar  voice_category_code                       [5];
      varchar  class_code                                [4];
      varchar  deferred_start_date                       [9];
      varchar  deferred_end_date                         [9];
      varchar  group_outlet_code                         [6];
      varchar  group_type                                [5];
      varchar  reload_merchant                           [2];

   }db_mcf01;

   
struct
{
   char  device_id                                 [9];
   char  short_name                                [10];
   char  phone                                     [18];
   char  industry_code                             [4];
   char  category_code                             [5];
   char  contact                                   [21];
   char  device_type                               [3];
   char  date_added                                [9];
   char  current_bus_date                          [9];
   char  dept_nbr                                  [3];
   char  organization_id                           [5];
   char  merchant_id                               [16];
   char  aba_nbr                                   [10];
   char  status                                    [2];
   char  totals_ind                                [2];
   char  statistics_ind                            [2];
   char  valid_transactions                        [41];  /* 8583 table 'Y' or 'N' */
   char  draft_capture_type                        [2];
   char  amex_charge_desc                          [24];
   char  diners_charge_desc                        [24];
   char  additional_pos_information                [7];
   char  batch_nbr                                 [7];
   char  rental_program                            [4];
   char  nsp_process                               [16];
   char  pin_type                                  [2];
   char  kc                                        [17];
   char  encr_type                                 [2];
   char  pad_char                                  [2];
   char  keyxchange_cnt                            [4];
   char  txn_cnt                                   [4];
   char  cwk                                       [49];
   char  kek                                       [17];
   char  retired_cwk                               [49];
   char  icv                                       [17];

   char  pin_block_format                          [2];
   char  encryption_method                         [2];
   char  pin_key                                   [17];
   char  communication_key                         [17];

   /* Auto Init Fields */
   char  auto_init_activation                      [2];
   char  auto_init_time                            [6];
   char  auto_init_ref_number                      [7];
   char  auto_program_load_activation              [2];
   char  auto_program_load_time                    [6];
   char  auto_program_load_ref_number              [7];
   char  auto_icepac_activation                    [2];
   /* End Auto Init Fields */

}pte_dcf01;
 
struct
{
   varchar  device_id                                 [9];
   varchar  short_name                                [10];
   varchar  phone                                     [18];
   varchar  industry_code                             [4];
   varchar  category_code                             [5];
   varchar  contact                                   [21];
   varchar  device_type                               [3];
   varchar  date_added                                [9];
   varchar  current_bus_date                          [9];
   varchar  dept_nbr                                  [3];
   varchar  organization_id                           [5];
   varchar  merchant_id                               [16];
   varchar  aba_nbr                                   [10];
   varchar  status                                    [2];
   varchar  totals_ind                                [2];
   varchar  statistics_ind                            [2];
   varchar  valid_transactions                        [41];  /* 8583 table 'Y' or 'N' */
   varchar  draft_capture_type                        [2];
   varchar  amex_charge_desc                          [24];
   varchar  diners_charge_desc                        [24];
   varchar  additional_pos_information                [7];
   varchar  batch_nbr                                 [7];
   varchar  rental_program                            [4];
   varchar  nsp_process                               [16];
   varchar  pin_type                                  [2];
   varchar  kc                                        [17];
   varchar  encr_type                                 [2];
   varchar  pad_char                                  [2];
   varchar  keyxchange_cnt                            [4];
   varchar  txn_cnt                                   [4];
   varchar  cwk                                       [49];
   varchar  kek                                       [17];
   varchar  retired_cwk                               [49];
   varchar  icv                                       [17];

   varchar  pin_block_format                          [2];
   varchar  encryption_method                         [2];
   varchar  pin_key                                   [17];
   varchar  communication_key                         [17];

   /* Auto Init Fields */
   varchar  auto_init_activation                      [2];
   varchar  auto_init_time                            [6];
   varchar  auto_init_ref_number                      [7];
   varchar  auto_program_load_activation              [2];
   varchar  auto_program_load_time                    [6];
   varchar  auto_program_load_ref_number              [7];
   varchar  auto_icepac_activation                    [2];
   /* End Auto Init Fields */

}db_dcf01;
/*RPS01*/
 
struct
{
	char	merchant_id				[16];
	char	card_num				[20];
	char	date_yyyymmdd			[11];
	char 	visa_tran_id			[33];
	char	system_date				[11];
	char	total_amount			[13];
	char 	currency_code			[4];
	char 	transaction_id			[21];
	char	future_use1				[33];
	
}pte_rps01;

struct
{
	varchar	merchant_id				[16];
	varchar	card_num				[20];
	varchar	date_yyyymmdd			[11];
	varchar	visa_tran_id			[33];
	varchar	system_date				[11];
	varchar	total_amount			[13];
	varchar	currency_code			[4];
	varchar transaction_id			[21];
	varchar	future_use1				[33];
}db_rps01;

 struct
{
   char  device_id                                    [9];
   char  merchant_id                                  [16];
   char  date_of_request                              [9];
   char  time_of_request                              [7];
   char  request_approved                             [2];
   char  filename_downloaded                          [9];
   char  download_completed                           [2];

}pte_drf01;

 struct
{
   varchar  device_id                                 [9];
   varchar  merchant_id                               [16];
   varchar  date_of_request                           [9];
   varchar  time_of_request                           [7];
   varchar  request_approved                          [2];
   varchar  filename_downloaded                       [9];
   varchar  download_completed                        [2];

}db_drf01;


 struct
{
   char  device_id                                    [9];
   char  merchant_id                                  [16];
   char  last_downloaded_date                         [9];
   char  last_downloaded_filename                     [9];

}pte_dlf01;

 struct
{
   varchar  device_id                                 [9];
   varchar  merchant_id                               [16];
   varchar  last_downloaded_date                      [9];
   varchar  last_downloaded_filename                  [9];

}db_dlf01;




struct
{
   char  device_id                                 [9];
   char  batch_nbr                                 [7];
 
   char  merchant_id                               [16];
   char  total_credit_cnt                          [5];
   char  total_credit_amt                          [13];
   char  total_credit_refund_cnt                   [5];
   char  total_credit_refund_amt                   [13];
   char  total_debit_cnt                           [5];
   char  total_debit_amt                           [13];
   char  total_debit_refund_cnt                    [5];
   char  total_debit_refund_amt                    [13];
   char  total_void_credit_cnt                     [5];
   char  total_void_credit_amt                     [13];
   char  total_void_credit_refund_cnt              [5];
   char  total_void_credit_refund_amt              [13];
   char  open_date                                 [9];
   char  open_time                                 [7];
   char  release_date                              [9];
   char  release_time                              [7];
   char  batch_status                              [2];      /*R-released;C-closed;A-active*/
   char  visa_merchant_id                          [16];

}pte_bch01;

struct
{
   varchar  device_id                                 [9];
   varchar  batch_nbr                                 [7];

   varchar  merchant_id                               [16];
   varchar  total_credit_cnt                          [5];
   varchar  total_credit_amt                          [13];
   varchar  total_credit_refund_cnt                   [5];
   varchar  total_credit_refund_amt                   [13];
   varchar  total_debit_cnt                           [5];
   varchar  total_debit_amt                           [13];
   varchar  total_debit_refund_cnt                    [5];
   varchar  total_debit_refund_amt                    [13];
   varchar  total_void_credit_cnt                     [5];
   varchar  total_void_credit_amt                     [13];
   varchar  total_void_credit_refund_cnt              [5];
   varchar  total_void_credit_refund_amt              [13];
   varchar  open_date                                 [9];
   varchar  open_time                                 [7];
   varchar  release_date                              [9];
   varchar  release_time                              [7];
   varchar  batch_status                              [2];      /*R-released;C-closed;A-active*/
   varchar  visa_merchant_id                          [16];

}db_bch01;

struct
{
   char  device_id                                 [9];
   char  batch_nbr                                 [7];
 
   char  merchant_id                               [16];
   char  total_credit_cnt                          [5];
   char  total_credit_amt                          [13];
   char  total_credit_refund_cnt                   [5];
   char  total_credit_refund_amt                   [13];
   char  total_debit_cnt                           [5];
   char  total_debit_amt                           [13];
   char  total_debit_refund_cnt                    [5];
   char  total_debit_refund_amt                    [13];
   char  total_void_credit_cnt                     [5];
   char  total_void_credit_amt                     [13];
   char  total_void_credit_refund_cnt              [5];
   char  total_void_credit_refund_amt              [13];
   char  open_date                                 [9];
   char  open_time                                 [7];
   char  release_date                              [9];
   char  release_time                              [7];
   char  batch_status                              [2];      /*R-released;C-closed;A-active*/
   char  visa_merchant_id                          [16];

}pte_bch01_mp;

struct
{
   varchar  device_id                                 [9];
   varchar  batch_nbr                                 [7];

   varchar  merchant_id                               [16];
   varchar  total_credit_cnt                          [5];
   varchar  total_credit_amt                          [13];
   varchar  total_credit_refund_cnt                   [5];
   varchar  total_credit_refund_amt                   [13];
   varchar  total_debit_cnt                           [5];
   varchar  total_debit_amt                           [13];
   varchar  total_debit_refund_cnt                    [5];
   varchar  total_debit_refund_amt                    [13];
   varchar  total_void_credit_cnt                     [5];
   varchar  total_void_credit_amt                     [13];
   varchar  total_void_credit_refund_cnt              [5];
   varchar  total_void_credit_refund_amt              [13];
   varchar  open_date                                 [9];
   varchar  open_time                                 [7];
   varchar  release_date                              [9];
   varchar  release_time                              [7];
   varchar  batch_status                              [2];      /*R-released;C-closed;A-active*/
   varchar  visa_merchant_id                          [16];

}db_bch01_mp;


struct
{
   char  device_id                                 [9];
   char  batch_nbr                                 [7];
   char  retrieval_ref_num                         [13];

   char  merchant_id                               [16];
   char  processing_code                           [7];
   char  tran_amount                               [13];
   char  response_code                             [3];
   char  auth_number                               [7];
   char  tran_date                                 [9];
   char  tran_time                                 [7];
   char  transaction_id                            [21];
   char  message_type                              [5];
   char  card_nbr                                  [20];
   char  invoice_nbr                               [9];
   char  settle_file_prefix                        [7];
   char  product_code                              [9];
   char  odometer                                  [8];
   char  sys_trace_audit_num                       [7];
   char  tx_key                                    ;
   char  bin_type                                  ;
   char type_of_data                               [3];
   char down_payment                               [13];
   char period                                     [3];
   char interest_rate                              [5];
   char total_interest                             [13];
   char redemption_amount                          [13];
   char vehicle_number                             [9];
   char pos_entry_mode                             [5];
   char profile                                    [3];
   char nbr_of_prod_codes                          [3];
   
   char product1_code                              [7];
   char product1_quantity                          [3];
   char product1_amount                            [13];
   char product2_code                              [7];
   char product2_quantity                          [3];
   char product2_amount                            [13];
   char product3_code                              [7];
   char product3_quantity                          [3];
   char product3_amount                            [13];
   char product4_code                              [7];
   char product4_quantity                          [3];
   char product4_amount                            [13];
   char product5_code                              [7];
   char product5_quantity                          [3];
   char product5_amount                            [13];
   char product6_code                              [7];
   char product6_quantity                          [3];
   char product6_amount                            [13];
   char product7_code                              [7];
   char product7_quantity                          [3];
   char product7_amount                            [13];
   char product8_code                              [7];
   char product8_quantity                          [3];
   char product8_amount                            [13];
   char product9_code                              [7];
   char product9_quantity                          [3];
   char product9_amount                            [13];
   char product10_code                              [7];
   char product10_quantity                          [3];
   char product10_amount                            [13];
   char product11_code                              [7];
   char product11_quantity                          [3];
   char product11_amount                            [13];
   char product12_code                              [7];
   char product12_quantity                          [3];
   char product12_amount                            [13];
   char product13_code                              [7];
   char product13_quantity                          [3];
   char product13_amount                            [13];
   char product14_code                              [7];
   char product14_quantity                          [3];
   char product14_amount                            [13];
   char product15_code                              [7];
   char product15_quantity                          [3];
   char product15_amount                            [13];
   char product16_code                              [7];
   char product16_quantity                          [3];
   char product16_amount                            [13];
   char product17_code                              [7];
   char product17_quantity                          [3];
   char product17_amount                            [13];
   char product18_code                              [7];
   char product18_quantity                          [3];
   char product18_amount                            [13];
   char product19_code                              [7];
   char product19_quantity                          [3];
   char product19_amount                            [13];
   char product20_code                              [7];
   char product20_quantity                          [3];
   char product20_amount                            [13];
   char aportionment_flag                           [2];
   char exp_date                                    [5];
   char open_date                                   [9];
   char open_time                                   [7];
   char cash_bonus                                  [2];
   char transmission_timestamp                      [11];
   char mcard_banknet                               [51];
   char ticket_nbr                                  [16];
   char def_gross_amt                               [13];
   char term                                        [4];

}pte_bch10;

struct
{
   varchar  device_id                                 [9];
   varchar  batch_nbr                                 [7];
   varchar  retrieval_ref_num                         [13];

   varchar  merchant_id                               [16];
   varchar  processing_code                           [7];
   varchar  tran_amount                               [13];
   varchar  response_code                             [3];
   varchar  auth_number                               [7];
   varchar  tran_date                                 [9];
   varchar  tran_time                                 [7];
   varchar  transaction_id                            [21];
   varchar  message_type                              [5];
   varchar  card_nbr                                  [20];
   varchar  invoice_nbr                               [9];
   varchar  settle_file_prefix                        [7];
   varchar  product_code                              [9];
   varchar  odometer                                  [8];
   varchar  sys_trace_audit_num                       [7];
   varchar  tx_key                                    [1];
   varchar  bin_type                                  [1];
   varchar type_of_data                               [3];
   varchar down_payment                               [13];
   varchar period                                     [3];
   varchar interest_rate                              [5];
   varchar total_interest                             [13];
   varchar redemption_amount                          [13];
   varchar vehicle_number                             [9];
   varchar pos_entry_mode                             [5];
   varchar profile                                    [3];
   varchar nbr_of_prod_codes                          [3];
   
   varchar product1_code                              [7];
   varchar product1_quantity                          [3];
   varchar product1_amount                            [13];
   varchar product2_code                              [7];
   varchar product2_quantity                          [3];
   varchar product2_amount                            [13];
   varchar product3_code                              [7];
   varchar product3_quantity                          [3];
   varchar product3_amount                            [13];
   varchar product4_code                              [7];
   varchar product4_quantity                          [3];
   varchar product4_amount                            [13];
   varchar product5_code                              [7];
   varchar product5_quantity                          [3];
   varchar product5_amount                            [13];
   varchar product6_code                              [7];
   varchar product6_quantity                          [3];
   varchar product6_amount                            [13];
   varchar product7_code                              [7];
   varchar product7_quantity                          [3];
   varchar product7_amount                            [13];
   varchar product8_code                              [7];
   varchar product8_quantity                          [3];
   varchar product8_amount                            [13];
   varchar product9_code                              [7];
   varchar product9_quantity                          [3];
   varchar product9_amount                            [13];
   varchar product10_code                              [7];
   varchar product10_quantity                          [3];
   varchar product10_amount                            [13];
   varchar product11_code                              [7];
   varchar product11_quantity                          [3];
   varchar product11_amount                            [13];
   varchar product12_code                              [7];
   varchar product12_quantity                          [3];
   varchar product12_amount                            [13];
   varchar product13_code                              [7];
   varchar product13_quantity                          [3];
   varchar product13_amount                            [13];
   varchar product14_code                              [7];
   varchar product14_quantity                          [3];
   varchar product14_amount                            [13];
   varchar product15_code                              [7];
   varchar product15_quantity                          [3];
   varchar product15_amount                            [13];
   varchar product16_code                              [7];
   varchar product16_quantity                          [3];
   varchar product16_amount                            [13];
   varchar product17_code                              [7];
   varchar product17_quantity                          [3];
   varchar product17_amount                            [13];
   varchar product18_code                              [7];
   varchar product18_quantity                          [3];
   varchar product18_amount                            [13];
   varchar product19_code                              [7];
   varchar product19_quantity                          [3];
   varchar product19_amount                            [13];
   varchar product20_code                              [7];
   varchar product20_quantity                          [3];
   varchar product20_amount                            [13];

   varchar aportionment_flag                           [2];
   varchar exp_date                                    [5];
   varchar open_date                                   [9];
   varchar open_time                                   [7];
   varchar cash_bonus                                  [2];
   varchar transmission_timestamp                      [11];
   varchar mcard_banknet                               [51];
   varchar ticket_nbr                                  [16];
   varchar def_gross_amt                               [13];
   varchar term                                        [4];


}db_bch10;

/* Network file, identical to bch10 */

struct
{
   char  device_id                                 [9];
   char  batch_nbr                                 [7];
   char  retrieval_ref_num                         [13];

   char  merchant_id                               [16];
   char  processing_code                           [7];
   char  tran_amount                               [13];
   char  response_code                             [3];
   char  auth_number                               [7];
   char  tran_date                                 [9];
   char  tran_time                                 [7];
   char  transaction_id                            [21];
   char  message_type                              [5];
   char  card_nbr                                  [20];
   char  invoice_nbr                               [9];
   char  settle_file_prefix                        [7];
   char  product_code                              [9];
   char  odometer                                  [8];
   char  sys_trace_audit_num                       [7];
   char  tx_key                                    ;
   char  bin_type                                  ;
   char type_of_data                               [3];
   char down_payment                               [13];
   char period                                     [3];
   char interest_rate                              [5];
   char total_interest                             [13];
   char redemption_amount                          [13];
   char vehicle_number                             [9];
   char pos_entry_mode                             [5];
   char profile                                    [3];
   char nbr_of_prod_codes                          [3];
   
   char product1_code                              [7];
   char product1_quantity                          [3];
   char product1_amount                            [13];
   char product2_code                              [7];
   char product2_quantity                          [3];
   char product2_amount                            [13];
   char product3_code                              [7];
   char product3_quantity                          [3];
   char product3_amount                            [13];
   char product4_code                              [7];
   char product4_quantity                          [3];
   char product4_amount                            [13];
   char product5_code                              [7];
   char product5_quantity                          [3];
   char product5_amount                            [13];
   char product6_code                              [7];
   char product6_quantity                          [3];
   char product6_amount                            [13];
   char product7_code                              [7];
   char product7_quantity                          [3];
   char product7_amount                            [13];
   char product8_code                              [7];
   char product8_quantity                          [3];
   char product8_amount                            [13];
   char product9_code                              [7];
   char product9_quantity                          [3];
   char product9_amount                            [13];
   char product10_code                              [7];
   char product10_quantity                          [3];
   char product10_amount                            [13];
   char product11_code                              [7];
   char product11_quantity                          [3];
   char product11_amount                            [13];
   char product12_code                              [7];
   char product12_quantity                          [3];
   char product12_amount                            [13];
   char product13_code                              [7];
   char product13_quantity                          [3];
   char product13_amount                            [13];
   char product14_code                              [7];
   char product14_quantity                          [3];
   char product14_amount                            [13];
   char product15_code                              [7];
   char product15_quantity                          [3];
   char product15_amount                            [13];
   char product16_code                              [7];
   char product16_quantity                          [3];
   char product16_amount                            [13];
   char product17_code                              [7];
   char product17_quantity                          [3];
   char product17_amount                            [13];
   char product18_code                              [7];
   char product18_quantity                          [3];
   char product18_amount                            [13];
   char product19_code                              [7];
   char product19_quantity                          [3];
   char product19_amount                            [13];
   char product20_code                              [7];
   char product20_quantity                          [3];
   char product20_amount                            [13];
   char aportionment_flag                           [2];
   char exp_date                                    [5];
   char open_date                                   [9];
   char open_time                                   [7];
   char cash_bonus                                  [2];
   char transmission_timestamp                      [11];
   char mcard_banknet                               [51];
   char ticket_nbr                                  [16];
   char def_gross_amt                               [13];
   char term                                        [4];

}pte_bch11;

struct
{
   varchar  device_id                                 [9];
   varchar  batch_nbr                                 [7];
   varchar  retrieval_ref_num                         [13];

   varchar  merchant_id                               [16];
   varchar  processing_code                           [7];
   varchar  tran_amount                               [13];
   varchar  response_code                             [3];
   varchar  auth_number                               [7];
   varchar  tran_date                                 [9];
   varchar  tran_time                                 [7];
   varchar  transaction_id                            [21];
   varchar  message_type                              [5];
   varchar  card_nbr                                  [20];
   varchar  invoice_nbr                               [9];
   varchar  settle_file_prefix                        [7];
   varchar  product_code                              [9];
   varchar  odometer                                  [8];
   varchar  sys_trace_audit_num                       [7];
   varchar  tx_key                                    [1];
   varchar  bin_type                                  [1];
   varchar type_of_data                               [3];
   varchar down_payment                               [13];
   varchar period                                     [3];
   varchar interest_rate                              [5];
   varchar total_interest                             [13];
   varchar redemption_amount                          [13];
   varchar vehicle_number                             [9];
   varchar pos_entry_mode                             [5];
   varchar profile                                    [3];
   varchar nbr_of_prod_codes                          [3];
   
   varchar product1_code                              [7];
   varchar product1_quantity                          [3];
   varchar product1_amount                            [13];
   varchar product2_code                              [7];
   varchar product2_quantity                          [3];
   varchar product2_amount                            [13];
   varchar product3_code                              [7];
   varchar product3_quantity                          [3];
   varchar product3_amount                            [13];
   varchar product4_code                              [7];
   varchar product4_quantity                          [3];
   varchar product4_amount                            [13];
   varchar product5_code                              [7];
   varchar product5_quantity                          [3];
   varchar product5_amount                            [13];
   varchar product6_code                              [7];
   varchar product6_quantity                          [3];
   varchar product6_amount                            [13];
   varchar product7_code                              [7];
   varchar product7_quantity                          [3];
   varchar product7_amount                            [13];
   varchar product8_code                              [7];
   varchar product8_quantity                          [3];
   varchar product8_amount                            [13];
   varchar product9_code                              [7];
   varchar product9_quantity                          [3];
   varchar product9_amount                            [13];
   varchar product10_code                              [7];
   varchar product10_quantity                          [3];
   varchar product10_amount                            [13];
   varchar product11_code                              [7];
   varchar product11_quantity                          [3];
   varchar product11_amount                            [13];
   varchar product12_code                              [7];
   varchar product12_quantity                          [3];
   varchar product12_amount                            [13];
   varchar product13_code                              [7];
   varchar product13_quantity                          [3];
   varchar product13_amount                            [13];
   varchar product14_code                              [7];
   varchar product14_quantity                          [3];
   varchar product14_amount                            [13];
   varchar product15_code                              [7];
   varchar product15_quantity                          [3];
   varchar product15_amount                            [13];
   varchar product16_code                              [7];
   varchar product16_quantity                          [3];
   varchar product16_amount                            [13];
   varchar product17_code                              [7];
   varchar product17_quantity                          [3];
   varchar product17_amount                            [13];
   varchar product18_code                              [7];
   varchar product18_quantity                          [3];
   varchar product18_amount                            [13];
   varchar product19_code                              [7];
   varchar product19_quantity                          [3];
   varchar product19_amount                            [13];
   varchar product20_code                              [7];
   varchar product20_quantity                          [3];
   varchar product20_amount                            [13];

   varchar aportionment_flag                           [2];
   varchar exp_date                                    [5];
   varchar open_date                                   [9];
   varchar open_time                                   [7];
   varchar cash_bonus                                  [2];
   varchar transmission_timestamp                      [11];
   varchar mcard_banknet                               [51];
   varchar ticket_nbr								   [16];
   varchar def_gross_amt                               [13];
   varchar term                                        [4];
}db_bch11;

struct
   {
      varchar transaction_id                     [21];
      varchar terminal_id                        [9];
      varchar  merchant_id                       [16];
      varchar card_num                           [20];
      varchar exp_date                           [5];
      varchar total_amount                       [13];
      varchar pos_entry_mode                     [5];
      varchar response_code                      [3];
      varchar date_yyyymmdd                      [9];
      varchar time_hhmmss                        [7];
      varchar tx_key                             [1];
      varchar auth_number                        [7];
      varchar sys_trace_audit_num                [7];
      varchar outstanding_balance                [13];
      varchar invoice_number                     [9];
      varchar product_code                       [9];
      varchar deferred_factor                    [8];  
      varchar deferred_term_length               [4];  
      varchar category_code                      [5];
      varchar tran_start_time                    [17];
      varchar tran_finish_time                   [17];
      varchar currency_code                      [4];
      varchar ticket_nbr                         [16];
      varchar odometer                           [8];
   }db_tlf01_structure; /* this structure has been created for 
                          TLF01 list, do not add fields here!!!! */


/* EMV Raw Data for Reversals/Voids */
typedef struct
{
   unsigned short len;
   unsigned char  emv_data[300];

}RAWEMVDATA;

EXEC SQL TYPE RAWEMVDATA is VARRAW(5000);

struct
{
      char       tran_id[21];   
      char       sys_date[9];
      char       len[4];
      RAWEMVDATA emvblock;
}
db_emv_raw;

/* Created new table to hold stand-in procesed transactions - Girija Y */
struct
{
    char transaction_id                     [21]; 

    char entry_type                         ;
    char tpdu_id                            [16];
    char issuer_id                          [21];
    char acquirer_id                        [21];
    char tx_key                             ;
    char terminal_id                        [9];
    char terminal_type                      [3];
    char response_text                      [41];
    char card_num_len                       [3];
    char card_num                           [20];
    char exp_date                           [5];
    char total_amount                       [13];
    char add_amounts                        [25];
    char invoice_number                     [9];
    char orig_amount                        [13];
    char auth_number                        [7];
    char processing_code                    [7];
    char sys_trace_audit_num                [7];
    char orig_sys_trace_num                 [7];
    char pos_entry_mode                     [5];
    char nii                                [5];
    char pos_condition_code                 [3];
    char track1                             [77];
    char track2                             [38];
    char retrieval_ref_num                  [13];
    char orig_retrieval_ref_num             [13];
    char merchant_id                        [16];
    char orig_message                       [5];
    char settlement_total                   [17];
    char message_type                       [5];
    char card_holder_name                   [31];
    char general_status                     ;
    char originator_queue                   [17];
    char originator_info                    [33];
    char batch_number                       [7];
    char response_code                      [3];
    char date_yyyymmdd                      [9];
    char time_hhmmss                        [7];
    char num_sales                          [4];
    char sales_amount                       [13];
    char num_refunds                        [4];
    char refund_amount                      [13];
    char num_dbsales                        [4];
    char dbsales_amount                     [13];
    char num_dbrefunds                      [4];
    char dbrefund_amount                    [13];
    char pin_block                          [19];
    char tax_amount                         [13];
    char tip_amount                         [13];
    char tran_start_time                    [17];
    char host_start_time                    [17];
    char host_finish_time                   [17];
    char tran_finish_time                   [17];
    char settle_file_prefix                 [7];
    char resp_source_len                    [3];
    char visa_char_indicator                ;
    char visa_tran_id                       [16];
    char visa_validation_code               [5];
    char mcard_banknet_len                  [4];
    char mcard_banknet                      [51];
    char agent_id_len                       [4];
    char agent_id                           [12];
    char cvc                                ;
    char settlement_date                    [5];

    char category_code                      [5];
    char conversion_rate                    [10];
    char product_code                       [9];
    char odometer                           [8];
    char organization_id                    [5];
    char dynamic_keychange                  ;

   char source_key                          [49];
   char txn_cnt                            [4];
   char dcf01_retired_cwk                  [49];
   char dest_key                           [49];
   char ncf01_retired_cwk                  [49];
   char handler_queue        		       [8];
   char authorizing_host_queue		   	   [8];
   char max_net_consec_tmouts              [4];
   char max_active_txns                    [4];
   char forwarding_institution_id          [12];
   char remote_nsp_type                    [2];
   char kek                                [17]; 
   char acquiring_id                       [12];
   char outstanding_balance                [13]; 
   char credit_limit                       [13];
   char nfi_name                           [11];
   char nfi_seq_nbr                        [7];
   char nfi_start_date                     [9];
   char nfi_end_date                       [9];
   char resp_source                        [26];

   char origin                             [3];
   char auth_1                             [3];
   char auth_2                             [3];
   char update_mask                        [2];
   char type_of_data                       [3];
   char down_payment                       [13];
   char period                             [3];
   char interest_rate                      [5];
   char total_interest                     [13];
   char redemption_amount                  [13];
   char vehicle_number                     [9];

   char profile                                    [3];
   char nbr_of_prod_codes                          [3];
   
   char product1_code                              [7];
   char product1_quantity                          [3];
   char product1_amount                            [13];
   char product2_code                              [7];
   char product2_quantity                          [3];
   char product2_amount                            [13];
   char product3_code                              [7];
   char product3_quantity                          [3];
   char product3_amount                            [13];
   char product4_code                              [7];
   char product4_quantity                          [3];
   char product4_amount                            [13];
   char product5_code                              [7];
   char product5_quantity                          [3];
   char product5_amount                            [13];
   char product6_code                              [7];
   char product6_quantity                          [3];
   char product6_amount                            [13];
   char product7_code                              [7];
   char product7_quantity                          [3];
   char product7_amount                            [13];
   char product8_code                              [7];
   char product8_quantity                          [3];
   char product8_amount                            [13];
   char product9_code                              [7];
   char product9_quantity                          [3];
   char product9_amount                            [13];
   char product10_code                              [7];
   char product10_quantity                          [3];
   char product10_amount                            [13];
   char product11_code                              [7];
   char product11_quantity                          [3];
   char product11_amount                            [13];
   char product12_code                              [7];
   char product12_quantity                          [3];
   char product12_amount                            [13];
   char product13_code                              [7];
   char product13_quantity                          [3];
   char product13_amount                            [13];
   char product14_code                              [7];
   char product14_quantity                          [3];
   char product14_amount                            [13];
   char product15_code                              [7];
   char product15_quantity                          [3];
   char product15_amount                            [13];
   char product16_code                              [7];
   char product16_quantity                          [3];
   char product16_amount                            [13];
   char product17_code                              [7];
   char product17_quantity                          [3];
   char product17_amount                            [13];
   char product18_code                              [7];
   char product18_quantity                          [3];
   char product18_amount                            [13];
   char product19_code                              [7];
   char product19_quantity                          [3];
   char product19_amount                            [13];
   char product20_code                              [7];
   char product20_quantity                          [3];
   char product20_amount                            [13];
   char visa_merchant_id                            [16];
   char cash_bonus                                  [2];  
   char deferred_factor                             [8]; 
   char deferred_term_length                        [4]; 
   char currency_code                               [4];  
   char transmission_timestamp                      [11]; 
   char tran_fee_amount                             [9];  
   char cvc_data                                    [4];  

   char verify_mag_stripe                           [2];  
   char saf                                         [2];  
   char security_response_code                      [3];  
   char service_code                                [4];  
   char source_pin_format                           [3];  
   char dest_pin_format                             [3];  
   char voice_auth                                  [2]; 
   char actual_amount                               [13]; 
   char reversal_amount                             [13]; 
   char voice_auth_text                             [241]; 
   char operator_id                                 [21];  
   char workstation                                 [21];  
   char orig_auth_number                            [7];  
   char ticket_nbr									[16];
   char system_date                                 [9];
   char def_gross_amt                               [13];
   char monthly_amort_amt                           [13];
}pte_tlf01_stip;

struct
{
    varchar transaction_id                     [21]; 

    varchar entry_type                         [1];
    varchar tpdu_id                            [16];
    varchar issuer_id                          [21];
    varchar acquirer_id                        [21];
    varchar tx_key                             [1];
    varchar terminal_id                        [9];
    varchar terminal_type                      [3];
    varchar response_text                      [41];
    varchar card_num_len                       [3];
    varchar card_num                           [20];
    varchar exp_date                           [5];
    varchar total_amount                       [13];
    varchar add_amounts                        [25];
    varchar invoice_number                     [9];
    varchar orig_amount                        [13];
    varchar auth_number                        [7];
    varchar processing_code                    [7];
    varchar sys_trace_audit_num                [7];
    varchar orig_sys_trace_num                 [7];
    varchar pos_entry_mode                     [5];
    varchar nii                                [5];
    varchar pos_condition_code                 [3];
    varchar track1                             [77];
    varchar track2                             [38];
    varchar retrieval_ref_num                  [13];
    varchar orig_retrieval_ref_num             [13];
    varchar merchant_id                        [16];
    varchar orig_message                       [5];
    varchar settlement_total                   [17];
    varchar message_type                       [5];
    varchar card_holder_name                   [31];
    varchar general_status                     [1];
    varchar originator_queue                   [17];
    varchar originator_info                    [33];
    varchar batch_number                       [7];
    varchar response_code                      [3];
    varchar date_yyyymmdd                      [9];
    varchar time_hhmmss                        [7];
    varchar num_sales                          [4];
    varchar sales_amount                       [13];
    varchar num_refunds                        [4];
    varchar refund_amount                      [13];
    varchar num_dbsales                        [4];
    varchar dbsales_amount                     [13];
    varchar num_dbrefunds                      [4];
    varchar dbrefund_amount                    [13];
    varchar pin_block                          [19];
    varchar tax_amount                         [13];
    varchar tip_amount                         [13];
    varchar tran_start_time                    [17];
    varchar host_start_time                    [17];
    varchar host_finish_time                   [17];
    varchar tran_finish_time                   [17];
    varchar settle_file_prefix                 [7];
    varchar resp_source_len                    [3];
    varchar visa_char_indicator                [1];
    varchar visa_tran_id                       [16];
    varchar visa_validation_code               [5];
    varchar mcard_banknet_len                  [4];
    varchar mcard_banknet                      [51];
    varchar agent_id_len                       [4];
    varchar agent_id                           [12];
    varchar cvc                                [1];
    varchar settlement_date                    [5];

    varchar category_code                      [5];
    varchar conversion_rate                    [10];
    varchar product_code                       [9];
    varchar odometer                           [8];
    varchar organization_id                    [5];
    varchar dynamic_keychange                  [1];

   varchar source_key                         [49];
   varchar txn_cnt                            [4];
   varchar dcf01_retired_cwk                  [49];
   varchar dest_key                           [49];
   varchar ncf01_retired_cwk                  [49];
   varchar handler_queue        		      [8];
   varchar authorizing_host_queue		   	  [8];
   varchar max_net_consec_tmouts              [4];
   varchar max_active_txns                    [4];
   varchar forwarding_institution_id          [12];
   varchar remote_nsp_type                    [2];
   varchar kek                                [17];
   varchar acquiring_id                       [12];
   varchar outstanding_balance                [13];
   varchar credit_limit                       [13];
   varchar nfi_name                           [11];
   varchar nfi_seq_nbr                        [7];
   varchar nfi_start_date                     [9];
   varchar nfi_end_date                       [9];
   varchar resp_source                        [26];
   varchar origin                             [3];
   varchar auth_1                             [3];
   varchar auth_2                             [3];
   varchar update_mask                        [2];
   varchar type_of_data                       [3];
   varchar down_payment                       [13];
   varchar period                             [3];
   varchar interest_rate                      [5];
   varchar total_interest                     [13];
   varchar redemption_amount                  [13];
   varchar vehicle_number                     [9];

   varchar profile                                    [3];
   varchar nbr_of_prod_codes                          [3];
   
   varchar product1_code                              [7];
   varchar product1_quantity                          [3];
   varchar product1_amount                            [13];
   varchar product2_code                              [7];
   varchar product2_quantity                          [3];
   varchar product2_amount                            [13];
   varchar product3_code                              [7];
   varchar product3_quantity                          [3];
   varchar product3_amount                            [13];
   varchar product4_code                              [7];
   varchar product4_quantity                          [3];
   varchar product4_amount                            [13];
   varchar product5_code                              [7];
   varchar product5_quantity                          [3];
   varchar product5_amount                            [13];
   varchar product6_code                              [7];
   varchar product6_quantity                          [3];
   varchar product6_amount                            [13];
   varchar product7_code                              [7];
   varchar product7_quantity                          [3];
   varchar product7_amount                            [13];
   varchar product8_code                              [7];
   varchar product8_quantity                          [3];
   varchar product8_amount                            [13];
   varchar product9_code                              [7];
   varchar product9_quantity                          [3];
   varchar product9_amount                            [13];
   varchar product10_code                              [7];
   varchar product10_quantity                          [3];
   varchar product10_amount                            [13];
   varchar product11_code                              [7];
   varchar product11_quantity                          [3];
   varchar product11_amount                            [13];
   varchar product12_code                              [7];
   varchar product12_quantity                          [3];
   varchar product12_amount                            [13];
   varchar product13_code                              [7];
   varchar product13_quantity                          [3];
   varchar product13_amount                            [13];
   varchar product14_code                              [7];
   varchar product14_quantity                          [3];
   varchar product14_amount                            [13];
   varchar product15_code                              [7];
   varchar product15_quantity                          [3];
   varchar product15_amount                            [13];
   varchar product16_code                              [7];
   varchar product16_quantity                          [3];
   varchar product16_amount                            [13];
   varchar product17_code                              [7];
   varchar product17_quantity                          [3];
   varchar product17_amount                            [13];
   varchar product18_code                              [7];
   varchar product18_quantity                          [3];
   varchar product18_amount                            [13];
   varchar product19_code                              [7];
   varchar product19_quantity                          [3];
   varchar product19_amount                            [13];
   varchar product20_code                              [7];
   varchar product20_quantity                          [3];
   varchar product20_amount                            [13];
   varchar visa_merchant_id                            [16];
   varchar cash_bonus                                  [2];  
   varchar deferred_factor                             [8];  
   varchar deferred_term_length                        [4];  
   varchar currency_code                               [4];  
   varchar transmission_timestamp                      [11]; 
   varchar tran_fee_amount                             [9];  
   varchar cvc_data                                    [4];  
   varchar verify_mag_stripe                           [2];  
   varchar saf                                         [2];  
   varchar security_response_code                      [3];  
   varchar service_code                                [4];  
   varchar source_pin_format                           [3];  
   varchar dest_pin_format                             [3];  
   varchar voice_auth                                  [2];  
   varchar actual_amount                               [13]; 
   varchar reversal_amount                             [13]; 
   varchar voice_auth_text                             [241]; 
   varchar operator_id                                 [21];  
   varchar workstation                                 [21];  
   varchar orig_auth_number                            [7];   
   varchar ticket_nbr									[16];
   varchar system_date                                 [9];
   varchar def_gross_amt                               [13];
   varchar monthly_amort_amt                           [13];
}db_tlf01_stip;

struct
{
	 char merchant_group_id 						[16];
	 char effective_date							[9];
	 
	 char merchgrp_Amount_limit_1					[13];
	 char merchgrepint_nbr_of_months_1				[3];
	 char merchgrepint_INT_rate_1					[8];
	 char merchgrepint_MSF_rate_1					[8];
	 char merchgrepint_nbr_of_months_2				[3];
	 char merchgrepint_INT_rate_2					[8];
	 char merchgrepint_MSF_rate_2					[8];
	 char merchgrepint_nbr_of_months_3				[3];
	 char merchgrepint_INT_rate_3					[8];
	 char merchgrepint_MSF_rate_3					[8];
	 char merchgrepint_nbr_of_months_4				[3];
	 char merchgrepint_INT_rate_4					[8];
	 char merchgrepint_MSF_rate_4					[8];
	 char merchgrepint_nbr_of_months_5				[3];
	 char merchgrepint_INT_rate_5					[8];
	 char merchgrepint_MSF_rate_5					[8];
	 char merchgrepint_nbr_of_months_6				[3];
	 char merchgrepint_INT_rate_6					[8];
	 char merchgrepint_MSF_rate_6					[8];
	 char merchgrepint_nbr_of_months_7				[3];
	 char merchgrepint_INT_rate_7					[8];
	 char merchgrepint_MSF_rate_7					[8];
	 char merchgrepint_nbr_of_months_8				[3];
	 char merchgrepint_INT_rate_8					[8];
	 char merchgrepint_MSF_rate_8					[8];
	 char merchgrepint_nbr_of_months_9				[3];
	 char merchgrepint_INT_rate_9					[8];
	 char merchgrepint_MSF_rate_9					[8];
	 char merchgrepint_nbr_of_months_10 			[3];
	 char merchgrepint_INT_rate_10					[8];
	 char merchgrepint_MSF_rate_10					[8];
	 char merchgrepint_nbr_of_months_10A 			[3];
	 char merchgrepint_INT_rate_10A					[8];
	 char merchgrepint_MSF_rate_10A					[8];
	 char merchgrepint_nbr_of_months_10B 			[3];
	 char merchgrepint_INT_rate_10B					[8];
	 char merchgrepint_MSF_rate_10B					[8];
	 
	 char merchgrp_Amount_limit_2					[13];
	 char merchgrepint_nbr_of_months_11 			[3];
	 char merchgrepint_INT_rate_11					[8];
	 char merchgrepint_MSF_rate_11					[8];
	 char merchgrepint_nbr_of_months_12 			[3];
	 char merchgrepint_INT_rate_12					[8];
	 char merchgrepint_MSF_rate_12					[8];
	 char merchgrepint_nbr_of_months_13 			[3];
	 char merchgrepint_INT_rate_13					[8];
	 char merchgrepint_MSF_rate_13					[8];
	 char merchgrepint_nbr_of_months_14 			[3];
	 char merchgrepint_INT_rate_14					[8];
	 char merchgrepint_MSF_rate_14					[8];
	 char merchgrepint_nbr_of_months_15 			[3];
	 char merchgrepint_INT_rate_15					[8];
	 char merchgrepint_MSF_rate_15					[8];
	 char merchgrepint_nbr_of_months_16 			[3];
	 char merchgrepint_INT_rate_16					[8];
	 char merchgrepint_MSF_rate_16					[8];
	 char merchgrepint_nbr_of_months_17 			[3];
	 char merchgrepint_INT_rate_17					[8];
	 char merchgrepint_MSF_rate_17					[8];
	 char merchgrepint_nbr_of_months_18 			[3];
	 char merchgrepint_INT_rate_18					[8];
	 char merchgrepint_MSF_rate_18					[8];
	 char merchgrepint_nbr_of_months_19 			[3];
	 char merchgrepint_INT_rate_19					[8];
	 char merchgrepint_MSF_rate_19					[8];
	 char merchgrepint_nbr_of_months_20 			[3];
	 char merchgrepint_INT_rate_20					[8];
	 char merchgrepint_MSF_rate_20					[8];
	 char merchgrepint_nbr_of_months_20A 			[3];
	 char merchgrepint_INT_rate_20A					[8];
	 char merchgrepint_MSF_rate_20A					[8];
	 char merchgrepint_nbr_of_months_20B 			[3];
	 char merchgrepint_INT_rate_20B					[8];
	 char merchgrepint_MSF_rate_20B					[8];
	 
	 char merchgrp_Amount_limit_3					[13];
	 char merchgrepint_nbr_of_months_21 			[3];
	 char merchgrepint_INT_rate_21					[8];
	 char merchgrepint_MSF_rate_21					[8];
	 char merchgrepint_nbr_of_months_22 			[3];
	 char merchgrepint_INT_rate_22					[8];
	 char merchgrepint_MSF_rate_22					[8];
	 char merchgrepint_nbr_of_months_23 			[3];
	 char merchgrepint_INT_rate_23					[8];
	 char merchgrepint_MSF_rate_23					[8];
	 char merchgrepint_nbr_of_months_24 			[3];
	 char merchgrepint_INT_rate_24					[8];
	 char merchgrepint_MSF_rate_24					[8];
	 char merchgrepint_nbr_of_months_25 			[3];
	 char merchgrepint_INT_rate_25					[8];
	 char merchgrepint_MSF_rate_25					[8];
	 char merchgrepint_nbr_of_months_26 			[3];
	 char merchgrepint_INT_rate_26					[8];
	 char merchgrepint_MSF_rate_26					[8];
	 char merchgrepint_nbr_of_months_27 			[3];
	 char merchgrepint_INT_rate_27					[8];
	 char merchgrepint_MSF_rate_27					[8];
	 char merchgrepint_nbr_of_months_28 			[3];
	 char merchgrepint_INT_rate_28					[8];
	 char merchgrepint_MSF_rate_28					[8];
	 char merchgrepint_nbr_of_months_29 			[3];
	 char merchgrepint_INT_rate_29					[8];
	 char merchgrepint_MSF_rate_29					[8];	 
	 char merchgrepint_nbr_of_months_30 			[3];
	 char merchgrepint_INT_rate_30					[8];
	 char merchgrepint_MSF_rate_30					[8];
	 char merchgrepint_nbr_of_months_30A 			[3];
	 char merchgrepint_INT_rate_30A					[8];
	 char merchgrepint_MSF_rate_30A					[8];
	 char merchgrepint_nbr_of_months_30B 			[3];
	 char merchgrepint_INT_rate_30B					[8];
	 char merchgrepint_MSF_rate_30B					[8];
	 
	 char merchgrp_Amount_limit_4					[13];
	 char merchgrepint_nbr_of_months_31 			[3];
 	 char merchgrepint_INT_rate_31					[8];
	 char merchgrepint_MSF_rate_31					[8];
	 char merchgrepint_nbr_of_months_32 			[3];
	 char merchgrepint_INT_rate_32					[8];
	 char merchgrepint_MSF_rate_32					[8];
	 char merchgrepint_nbr_of_months_33 			[3];
	 char merchgrepint_INT_rate_33					[8];
	 char merchgrepint_MSF_rate_33					[8];
	 char merchgrepint_nbr_of_months_34 			[3];
	 char merchgrepint_INT_rate_34					[8];
	 char merchgrepint_MSF_rate_34					[8];
	 char merchgrepint_nbr_of_months_35 			[3];
	 char merchgrepint_INT_rate_35					[8];
	 char merchgrepint_MSF_rate_35					[8];
	 char merchgrepint_nbr_of_months_36 			[3];
	 char merchgrepint_INT_rate_36					[8];
	 char merchgrepint_MSF_rate_36					[8];
	 char merchgrepint_nbr_of_months_37 			[3];
	 char merchgrepint_INT_rate_37					[8];
	 char merchgrepint_MSF_rate_37					[8];
	 char merchgrepint_nbr_of_months_38 			[3];
	 char merchgrepint_INT_rate_38					[8];
	 char merchgrepint_MSF_rate_38					[8];
	 char merchgrepint_nbr_of_months_39 			[3];
	 char merchgrepint_INT_rate_39					[8];
	 char merchgrepint_MSF_rate_39					[8];
	 char merchgrepint_nbr_of_months_40 			[3];
	 char merchgrepint_INT_rate_40					[8];
	 char merchgrepint_MSF_rate_40					[8];
	 char merchgrepint_nbr_of_months_40A 			[3];
	 char merchgrepint_INT_rate_40A					[8];
	 char merchgrepint_MSF_rate_40A					[8];
	 char merchgrepint_nbr_of_months_40B 			[3];
	 char merchgrepint_INT_rate_40B					[8];
	 char merchgrepint_MSF_rate_40B					[8];
	 
}pte_mgf01;

struct
{
	 varchar merchant_group_id 					[15];
	 varchar effective_date						[8];
	 
	 varchar merchgrp_Amount_limit_1			[12];
	 varchar merchgrepint_nbr_of_months_1		[2];
	 varchar merchgrepint_INT_rate_1			[7];
	 varchar merchgrepint_MSF_rate_1			[7];
	 varchar merchgrepint_nbr_of_months_2		[2];
	 varchar merchgrepint_INT_rate_2			[7];
	 varchar merchgrepint_MSF_rate_2			[7];
	 varchar merchgrepint_nbr_of_months_3		[2];
	 varchar merchgrepint_INT_rate_3			[7];
	 varchar merchgrepint_MSF_rate_3			[7];
	 varchar merchgrepint_nbr_of_months_4		[2];
	 varchar merchgrepint_INT_rate_4			[7];
	 varchar merchgrepint_MSF_rate_4			[7];
	 varchar merchgrepint_nbr_of_months_5		[2];
	 varchar merchgrepint_INT_rate_5			[7];
	 varchar merchgrepint_MSF_rate_5			[7];
	 varchar merchgrepint_nbr_of_months_6		[2];
	 varchar merchgrepint_INT_rate_6			[7];
	 varchar merchgrepint_MSF_rate_6			[7];
	 varchar merchgrepint_nbr_of_months_7		[2];
	 varchar merchgrepint_INT_rate_7			[7];
	 varchar merchgrepint_MSF_rate_7			[7];
	 varchar merchgrepint_nbr_of_months_8		[2];
	 varchar merchgrepint_INT_rate_8			[7];
	 varchar merchgrepint_MSF_rate_8			[7];
	 varchar merchgrepint_nbr_of_months_9		[2];
	 varchar merchgrepint_INT_rate_9			[7];
	 varchar merchgrepint_MSF_rate_9			[7];
	 varchar merchgrepint_nbr_of_months_10		[2];
	 varchar merchgrepint_INT_rate_10			[7];
	 varchar merchgrepint_MSF_rate_10			[7];
	 varchar merchgrepint_nbr_of_months_10A		[2];
	 varchar merchgrepint_INT_rate_10A			[7];
	 varchar merchgrepint_MSF_rate_10A			[7];
	 varchar merchgrepint_nbr_of_months_10B		[2];
	 varchar merchgrepint_INT_rate_10B			[7];
	 varchar merchgrepint_MSF_rate_10B			[7];
 	 
 	 varchar merchgrp_Amount_limit_2			[12];
	 varchar merchgrepint_nbr_of_months_11		[2];
	 varchar merchgrepint_INT_rate_11			[7];
	 varchar merchgrepint_MSF_rate_11			[7];
	 varchar merchgrepint_nbr_of_months_12		[2];
	 varchar merchgrepint_INT_rate_12			[7];
	 varchar merchgrepint_MSF_rate_12			[7];
	 varchar merchgrepint_nbr_of_months_13		[2];
	 varchar merchgrepint_INT_rate_13			[7];
	 varchar merchgrepint_MSF_rate_13			[7];
	 varchar merchgrepint_nbr_of_months_14		[2];
	 varchar merchgrepint_INT_rate_14			[7];
	 varchar merchgrepint_MSF_rate_14			[7];
	 varchar merchgrepint_nbr_of_months_15		[2];
	 varchar merchgrepint_INT_rate_15			[7];
	 varchar merchgrepint_MSF_rate_15			[7];
	 varchar merchgrepint_nbr_of_months_16		[2];
	 varchar merchgrepint_INT_rate_16			[7];
	 varchar merchgrepint_MSF_rate_16			[7];
	 varchar merchgrepint_nbr_of_months_17		[2];
	 varchar merchgrepint_INT_rate_17			[7];
	 varchar merchgrepint_MSF_rate_17			[7];
	 varchar merchgrepint_nbr_of_months_18		[2];
	 varchar merchgrepint_INT_rate_18			[7];
	 varchar merchgrepint_MSF_rate_18			[7];
	 varchar merchgrepint_nbr_of_months_19		[2];
	 varchar merchgrepint_INT_rate_19			[7];
	 varchar merchgrepint_MSF_rate_19			[7];
	 varchar merchgrepint_nbr_of_months_20		[2];
	 varchar merchgrepint_INT_rate_20			[7];
	 varchar merchgrepint_MSF_rate_20			[7];
	 varchar merchgrepint_nbr_of_months_20A		[2];
	 varchar merchgrepint_INT_rate_20A			[7];
	 varchar merchgrepint_MSF_rate_20A			[7];
	 varchar merchgrepint_nbr_of_months_20B		[2];
	 varchar merchgrepint_INT_rate_20B			[7];
	 varchar merchgrepint_MSF_rate_20B			[7];
	 
 	 varchar merchgrp_Amount_limit_3			[12];
	 varchar merchgrepint_nbr_of_months_21		[2];
	 varchar merchgrepint_INT_rate_21			[7];
	 varchar merchgrepint_MSF_rate_21			[7];
	 varchar merchgrepint_nbr_of_months_22		[2];
	 varchar merchgrepint_INT_rate_22			[7];
	 varchar merchgrepint_MSF_rate_22			[7];
	 varchar merchgrepint_nbr_of_months_23		[2];
	 varchar merchgrepint_INT_rate_23			[7];
	 varchar merchgrepint_MSF_rate_23			[7];
	 varchar merchgrepint_nbr_of_months_24		[2];
	 varchar merchgrepint_INT_rate_24			[7];
	 varchar merchgrepint_MSF_rate_24			[7];
	 varchar merchgrepint_nbr_of_months_25		[2];
	 varchar merchgrepint_INT_rate_25			[7];
	 varchar merchgrepint_MSF_rate_25			[7];
	 varchar merchgrepint_nbr_of_months_26		[2];
	 varchar merchgrepint_INT_rate_26			[7];
	 varchar merchgrepint_MSF_rate_26			[7];
	 varchar merchgrepint_nbr_of_months_27		[2];
	 varchar merchgrepint_INT_rate_27			[7];
	 varchar merchgrepint_MSF_rate_27			[7];
	 varchar merchgrepint_nbr_of_months_28		[2];
	 varchar merchgrepint_INT_rate_28			[7];
	 varchar merchgrepint_MSF_rate_28			[7];
	 varchar merchgrepint_nbr_of_months_29		[2];
	 varchar merchgrepint_INT_rate_29			[7];
	 varchar merchgrepint_MSF_rate_29			[7];
	 varchar merchgrepint_nbr_of_months_30		[2];
	 varchar merchgrepint_INT_rate_30			[7];
	 varchar merchgrepint_MSF_rate_30			[7];
	 varchar merchgrepint_nbr_of_months_30A		[2];
	 varchar merchgrepint_INT_rate_30A			[7];
	 varchar merchgrepint_MSF_rate_30A			[7];
	 varchar merchgrepint_nbr_of_months_30B		[2];
	 varchar merchgrepint_INT_rate_30B			[7];
	 varchar merchgrepint_MSF_rate_30B			[7];
	 
 	 varchar merchgrp_Amount_limit_4			[12];
	 varchar merchgrepint_nbr_of_months_31		[2];
	 varchar merchgrepint_INT_rate_31			[7];
	 varchar merchgrepint_MSF_rate_31			[7];
	 varchar merchgrepint_nbr_of_months_32		[2];
	 varchar merchgrepint_INT_rate_32			[7];
	 varchar merchgrepint_MSF_rate_32			[7];
	 varchar merchgrepint_nbr_of_months_33		[2];
	 varchar merchgrepint_INT_rate_33			[7];
	 varchar merchgrepint_MSF_rate_33			[7];
	 varchar merchgrepint_nbr_of_months_34		[2];
	 varchar merchgrepint_INT_rate_34			[7];
	 varchar merchgrepint_MSF_rate_34			[7];
	 varchar merchgrepint_nbr_of_months_35		[2];
	 varchar merchgrepint_INT_rate_35			[7];
	 varchar merchgrepint_MSF_rate_35			[7];
	 varchar merchgrepint_nbr_of_months_36		[2];
	 varchar merchgrepint_INT_rate_36			[7];
	 varchar merchgrepint_MSF_rate_36			[7];
	 varchar merchgrepint_nbr_of_months_37		[2];
	 varchar merchgrepint_INT_rate_37			[7];
	 varchar merchgrepint_MSF_rate_37			[7];
	 varchar merchgrepint_nbr_of_months_38		[2];
	 varchar merchgrepint_INT_rate_38			[7];
	 varchar merchgrepint_MSF_rate_38			[7];
	 varchar merchgrepint_nbr_of_months_39		[2];
	 varchar merchgrepint_INT_rate_39			[7];
	 varchar merchgrepint_MSF_rate_39			[7];
	 varchar merchgrepint_nbr_of_months_40		[2];
	 varchar merchgrepint_INT_rate_40			[7];
	 varchar merchgrepint_MSF_rate_40			[7];
	 varchar merchgrepint_nbr_of_months_40A		[2];
	 varchar merchgrepint_INT_rate_40A			[7];
	 varchar merchgrepint_MSF_rate_40A			[7];
	 varchar merchgrepint_nbr_of_months_40B		[2];
	 varchar merchgrepint_INT_rate_40B			[7];
	 varchar merchgrepint_MSF_rate_40B			[7];
	 
	 
 }db_mgf01;


EXEC SQL END DECLARE SECTION;

/*************************************************************************************/
void LeftFill_String_With_Character (unsigned int destination_array_size,
                                     char* strAmount,
                                     unsigned char fill_character) 
{
   unsigned char strTemp[256] = {0} ;
   int len = 0 ;
   memset (strTemp, fill_character, sizeof strTemp) ;
   
   len = strlen (strAmount) ;
   strTemp [destination_array_size - len] = 0 ;
   strcat (strTemp, strAmount) ;
   strcpy (strAmount, strTemp) ;
}

/*************************************************************************************/
void tlf01_to_db( pTLF01 tlf01_ptr )
{
  memcpy (&pte_tlf01, tlf01_ptr, sizeof(pte_tlf01));
}


/*************************************************************************************/
/*************************************************************************************/
void tlf01_stip_to_db( pTLF01 tlf01_ptr )
{
  memcpy (&pte_tlf01_stip, tlf01_ptr, sizeof(pte_tlf01_stip));
}


/*************************************************************************************/
/*************************************************************************************/
void nbf01_to_db( pNBF01 nbf01_ptr )
{
  memcpy (&pte_nbf01, nbf01_ptr, sizeof(pte_nbf01));
}

/*************************************************************************************/
/*************************************************************************************/
void ngf01_to_db( pNGF01 ngf01_ptr )
{
  memcpy (&pte_ngf01, ngf01_ptr, sizeof(pte_ngf01));
}

/*************************************************************************************/
/*************************************************************************************/
void nfi01_to_db( pNFI01 nfi01_ptr )
{
  memcpy (&pte_nfi01, nfi01_ptr, sizeof(pte_nfi01));
}

/*************************************************************************************/
/*************************************************************************************/
void nfi02_to_db( pNFI02 nfi02_ptr )
{
  memcpy (&pte_nfi02, nfi02_ptr, sizeof(pte_nfi02));
}

/*************************************************************************************/
/*************************************************************************************/
void nmf01_to_db( pNMF01 nmf01_ptr )
{
  memcpy (&pte_nmf01, nmf01_ptr, sizeof(pte_nmf01));
}

/*************************************************************************************/
/*************************************************************************************/
void ntf01_to_db( pNTF01 ntf01_ptr )
{
  memcpy (&pte_ntf01, ntf01_ptr, sizeof(pte_ntf01));
}


/*************************************************************************************/
/*************************************************************************************/
void rps01_to_db( pRPS01 rps01_ptr )
{
  memcpy (&pte_rps01, rps01_ptr, sizeof(pte_rps01));
}

/*************************************************************************************/
/*************************************************************************************/
void drf01_to_db( pDRF01 drf01_ptr )
{
  memcpy (&pte_drf01, drf01_ptr, sizeof(pte_drf01));
}

/*************************************************************************************/
/* Description: Copy data from dlf01_ptr into pte_dlf01 structure
/*************************************************************************************/
void dlf01_to_db( pDLF01 dlf01_ptr )
{
  memcpy (&pte_dlf01, dlf01_ptr, sizeof(pte_dlf01));
}


/*************************************************************************************/
/*************************************************************************************/
void mcf20_to_db( pMCF20 mcf20_ptr )
{
  memcpy (&pte_mcf20, mcf20_ptr, sizeof(pte_mcf20));
}

/*************************************************************************************/
/*************************************************************************************/
void ocf20_to_db( pOCF20 ocf20_ptr )
{
  memcpy (&pte_ocf20, ocf20_ptr, sizeof(pte_ocf20));
}


/*************************************************************************************/
/*************************************************************************************/
void ocf01_to_db( pOCF01 ocf01_ptr )
{
  memcpy (&pte_ocf01, ocf01_ptr, sizeof(pte_ocf01));
}



/*************************************************************************************/
/*************************************************************************************/
void mcf01_to_db( pMCF01 mcf01_ptr )
{
  memcpy (&pte_mcf01, mcf01_ptr, sizeof(pte_mcf01));
}


/*************************************************************************************/
/*************************************************************************************/
void bch01_to_db( pBCH01 bch01_ptr )
{
  memcpy (&pte_bch01, bch01_ptr, sizeof(pte_bch01));
}

/*************************************************************************************/

/*************************************************************************************/
void bch01_mp_to_db( pBCH01_MP bch01_mp_ptr )
{
  memcpy (&pte_bch01_mp, bch01_mp_ptr, sizeof(pte_bch01_mp));
}

/*************************************************************************************/

/*************************************************************************************/
void bch10_to_db( pBCH10 bch10_ptr )
{
  memcpy (&pte_bch10, bch10_ptr, sizeof(pte_bch10));
}
/*************************************************************************************/
/*************************************************************************************/
void bch11_to_db( pBCH11 bch11_ptr )
{
  memcpy (&pte_bch11, bch11_ptr, sizeof(pte_bch11));
}

void bch20_to_db( pBCH20 bch20_ptr )
{
   memcpy (&pte_bch20, bch20_ptr, sizeof(pte_bch20));

   /* Unix implements unsigned chars greater than 127 by wrapping around zero.
    * That causes the tx_key in the database to not be accurate.  So for tx_keys
    * above 127, subtract 100.  This puts the request tx_key, not the response
    * tx_key, into the database.
    */
   if ( bch20_ptr->tx_key > 127 )
      pte_bch20.tx_key -= 100;
}

/*************************************************************************************/
/*************************************************************************************/
void dcf01_to_db( pDCF01 dcf01_ptr )
{
  memcpy (&pte_dcf01, dcf01_ptr, sizeof(pte_dcf01));
}

 /*************************************************************************************/
  void mgf01_to_db( pMGF01 mgf01_ptr )
  {
	memcpy (&pte_mgf01, mgf01_ptr, sizeof(pte_mgf01));
  }
/*************************************************************************************/

/*************************************************************************************/
/*************************************************************************************/
void db_to_nbf01 ( pNBF01 nbf01_ptr )
{
   memset(nbf01_ptr, 0, sizeof(NBF01));
   memcpy(nbf01_ptr->primary_key.low, db_nbf01.low.arr, db_nbf01.low.len);
   memcpy(nbf01_ptr->primary_key.high, db_nbf01.high.arr, db_nbf01.high.len);
}

/*************************************************************************************/
/*************************************************************************************/
void db_to_nfi01 ( pNFI01 nfi01_ptr )
{
   memset(nfi01_ptr, 0, sizeof(NFI01));
   memcpy(nfi01_ptr->primary_key.file_name, db_nfi01.file_name.arr, db_nfi01.file_name.len);
   memcpy(nfi01_ptr->start_date, db_nfi01.start_date.arr, db_nfi01.start_date.len);
   memcpy(nfi01_ptr->end_date, db_nfi01.end_date.arr, db_nfi01.end_date.len);
}

/*************************************************************************************/
/*************************************************************************************/
void db_to_nfi02 ( pNFI02 nfi02_ptr )
{
   memset(nfi02_ptr, 0, sizeof(NFI02));
   memcpy(nfi02_ptr->primary_key.file_name, db_nfi02.file_name.arr, db_nfi02.file_name.len);
   memcpy(nfi02_ptr->start_date, db_nfi02.start_date.arr, db_nfi02.start_date.len);
   memcpy(nfi02_ptr->end_date, db_nfi02.end_date.arr, db_nfi02.end_date.len);
}

/*************************************************************************************/
/*************************************************************************************/
void db_to_nmf01 ( pNMF01 nmf01_ptr )
{
   memset(nmf01_ptr, 0, sizeof(NMF01));
   memcpy(nmf01_ptr->primary_key.seq_nbr, db_nmf01.seq_nbr.arr, db_nmf01.seq_nbr.len);
   memcpy(nmf01_ptr->action_code, db_nmf01.action_code.arr, db_nmf01.action_code.len);
   memcpy(nmf01_ptr->format_code, db_nmf01.format_code.arr, db_nmf01.format_code.len);
   memcpy(nmf01_ptr->account_info, db_nmf01.account_info.arr, db_nmf01.account_info.len);
   memcpy(nmf01_ptr->file_name, db_nmf01.file_name.arr, db_nmf01.file_name.len);
   
}

/*************************************************************************************/
/*************************************************************************************/
void db_to_ntf01 ( pNTF01 ntf01_ptr )
{
   memset(ntf01_ptr, 0, sizeof(NTF01));
   memcpy(ntf01_ptr->primary_key.account_info, db_ntf01.account_info.arr, db_ntf01.account_info.len);
   memcpy(ntf01_ptr->format_code, db_ntf01.format_code.arr, db_ntf01.format_code.len);
   memcpy(ntf01_ptr->file_name, db_ntf01.file_name.arr, db_ntf01.file_name.len);
   
}

/*************************************************************************************/
/*************************************************************************************/
void db_to_ngf01 ( pNGF01 ngf01_ptr )
{
   memset(ngf01_ptr, 0, sizeof(NGF01));
   memcpy(ngf01_ptr->primary_key.negative_group_id, db_ngf01.negative_group_id.arr, db_ngf01.negative_group_id.len);
   memcpy(ngf01_ptr->bin_range[0].low, db_ngf01.low1.arr, db_ngf01.low1.len);
   memcpy(ngf01_ptr->bin_range[0].high, db_ngf01.high1.arr, db_ngf01.high1.len);
   memcpy(ngf01_ptr->bin_range[1].low, db_ngf01.low2.arr, db_ngf01.low2.len);
   memcpy(ngf01_ptr->bin_range[1].high, db_ngf01.high2.arr, db_ngf01.high2.len);
   memcpy(ngf01_ptr->bin_range[2].low, db_ngf01.low3.arr, db_ngf01.low3.len);
   memcpy(ngf01_ptr->bin_range[2].high , db_ngf01.high3.arr, db_ngf01.high3.len);
   memcpy(ngf01_ptr->bin_range[3].low, db_ngf01.low4.arr, db_ngf01.low4.len);
   memcpy(ngf01_ptr->bin_range[3].high, db_ngf01.high4.arr, db_ngf01.high4.len);
   memcpy(ngf01_ptr->bin_range[4].low, db_ngf01.low5.arr, db_ngf01.low5.len);
   memcpy(ngf01_ptr->bin_range[4].high, db_ngf01.high5.arr, db_ngf01.high5.len);
   memcpy(ngf01_ptr->bin_range[5].low, db_ngf01.low6.arr, db_ngf01.low6.len);
   memcpy(ngf01_ptr->bin_range[5].high, db_ngf01.high6.arr, db_ngf01.high6.len);
   memcpy(ngf01_ptr->bin_range[6].low, db_ngf01.low7.arr, db_ngf01.low7.len);
   memcpy(ngf01_ptr->bin_range[6].high, db_ngf01.high7.arr, db_ngf01.high7.len);
   memcpy(ngf01_ptr->bin_range[7].low, db_ngf01.low8.arr, db_ngf01.low8.len);
   memcpy(ngf01_ptr->bin_range[7].high, db_ngf01.high8.arr, db_ngf01.high8.len);
   memcpy(ngf01_ptr->bin_range[8].low, db_ngf01.low9.arr, db_ngf01.low9.len);
   memcpy(ngf01_ptr->bin_range[8].high, db_ngf01.high9.arr, db_ngf01.high9.len);
   memcpy(ngf01_ptr->bin_range[9].low, db_ngf01.low10.arr, db_ngf01.low10.len);
   memcpy(ngf01_ptr->bin_range[9].high, db_ngf01.high10.arr, db_ngf01.high10.len);
}


/*************************************************************************************/
/*************************************************************************************/
void db_to_tlf01 ( pTLF01 tlf01_ptr )
{
   
   memset(tlf01_ptr, 0, sizeof(TLF01));
   memcpy(tlf01_ptr->primary_key.transaction_id, db_tlf01.transaction_id.arr, db_tlf01.transaction_id.len);
   tlf01_ptr->entry_type = db_tlf01.entry_type.arr[0];
   memcpy(tlf01_ptr->tpdu_id, db_tlf01.tpdu_id.arr, db_tlf01.tpdu_id.len);
   memcpy(tlf01_ptr->issuer_id, db_tlf01.issuer_id.arr, db_tlf01.issuer_id.len);
   memcpy(tlf01_ptr->acquirer_id, db_tlf01.acquirer_id.arr, db_tlf01.acquirer_id.len);
   tlf01_ptr->tx_key = db_tlf01.tx_key.arr[0];
   memcpy(tlf01_ptr->terminal_id, db_tlf01.terminal_id.arr, db_tlf01.terminal_id.len);
   memcpy(tlf01_ptr->terminal_type, db_tlf01.terminal_type.arr, db_tlf01.terminal_type.len);
   memcpy(tlf01_ptr->response_text, db_tlf01.response_text.arr, db_tlf01.response_text.len);
   memcpy(tlf01_ptr->card_num_len, db_tlf01.card_num_len.arr, db_tlf01.card_num_len.len);
   memcpy(tlf01_ptr->card_num, db_tlf01.card_num.arr, db_tlf01.card_num.len);
   memcpy(tlf01_ptr->exp_date, db_tlf01.exp_date.arr, db_tlf01.exp_date.len);
   memcpy(tlf01_ptr->total_amount, db_tlf01.total_amount.arr, db_tlf01.total_amount.len);
   memcpy(tlf01_ptr->add_amounts, db_tlf01.add_amounts.arr, db_tlf01.add_amounts.len);
   memcpy(tlf01_ptr->invoice_number, db_tlf01.invoice_number.arr, db_tlf01.invoice_number.len);
   memcpy(tlf01_ptr->orig_amount, db_tlf01.orig_amount.arr, db_tlf01.orig_amount.len);
   memcpy(tlf01_ptr->auth_number, db_tlf01.auth_number.arr, db_tlf01.auth_number.len);
   memcpy(tlf01_ptr->processing_code, db_tlf01.processing_code.arr, db_tlf01.processing_code.len);
   memcpy(tlf01_ptr->sys_trace_audit_num, db_tlf01.sys_trace_audit_num.arr, db_tlf01.sys_trace_audit_num.len);
   memcpy(tlf01_ptr->orig_sys_trace_num, db_tlf01.orig_sys_trace_num.arr, db_tlf01.orig_sys_trace_num.len);
   memcpy(tlf01_ptr->pos_entry_mode, db_tlf01.pos_entry_mode.arr, db_tlf01.pos_entry_mode.len);
   memcpy(tlf01_ptr->nii, db_tlf01.nii.arr, db_tlf01.nii.len);
   memcpy(tlf01_ptr->pos_condition_code, db_tlf01.pos_condition_code.arr, db_tlf01.pos_condition_code.len);
   memcpy(tlf01_ptr->track1, db_tlf01.track1.arr, db_tlf01.track1.len);
   memcpy(tlf01_ptr->track2, db_tlf01.track2.arr, db_tlf01.track2.len);
   memcpy(tlf01_ptr->retrieval_ref_num, db_tlf01.retrieval_ref_num.arr, db_tlf01.retrieval_ref_num.len);
   memcpy(tlf01_ptr->orig_retrieval_ref_num, db_tlf01.orig_retrieval_ref_num.arr, db_tlf01.orig_retrieval_ref_num.len);
   memcpy(tlf01_ptr->merchant_id, db_tlf01.merchant_id.arr, db_tlf01.merchant_id.len);
   memcpy(tlf01_ptr->orig_message, db_tlf01.orig_message.arr, db_tlf01.orig_message.len);
   memcpy(tlf01_ptr->settlement_total, db_tlf01.settlement_total.arr, db_tlf01.settlement_total.len);
   memcpy(tlf01_ptr->message_type, db_tlf01.message_type.arr, db_tlf01.message_type.len);
   memcpy(tlf01_ptr->card_holder_name, db_tlf01.card_holder_name.arr, db_tlf01.card_holder_name.len);
   tlf01_ptr->general_status = db_tlf01.general_status.arr[0];
   memcpy(tlf01_ptr->originator_queue, db_tlf01.originator_queue.arr, db_tlf01.originator_queue.len);
   memcpy(tlf01_ptr->originator_info, db_tlf01.originator_info.arr, db_tlf01.originator_info.len);
   memcpy(tlf01_ptr->batch_number, db_tlf01.batch_number.arr, db_tlf01.batch_number.len);
   memcpy(tlf01_ptr->response_code, db_tlf01.response_code.arr, db_tlf01.response_code.len);
   memcpy(tlf01_ptr->date_yyyymmdd, db_tlf01.date_yyyymmdd.arr, db_tlf01.date_yyyymmdd.len);
   memcpy(tlf01_ptr->time_hhmmss, db_tlf01.time_hhmmss.arr, db_tlf01.time_hhmmss.len);
   memcpy(tlf01_ptr->num_sales, db_tlf01.num_sales.arr, db_tlf01.num_sales.len);
   memcpy(tlf01_ptr->sales_amount, db_tlf01.sales_amount.arr, db_tlf01.sales_amount.len);
   memcpy(tlf01_ptr->num_refunds, db_tlf01.num_refunds.arr, db_tlf01.num_refunds.len);
   memcpy(tlf01_ptr->refund_amount, db_tlf01.refund_amount.arr, db_tlf01.refund_amount.len);
   memcpy(tlf01_ptr->num_dbsales, db_tlf01.num_dbsales.arr, db_tlf01.num_dbsales.len);
   memcpy(tlf01_ptr->dbsales_amount, db_tlf01.dbsales_amount.arr, db_tlf01.dbsales_amount.len);
   memcpy(tlf01_ptr->num_dbrefunds, db_tlf01.num_dbrefunds.arr, db_tlf01.num_dbrefunds.len);
   memcpy(tlf01_ptr->dbrefund_amount, db_tlf01.dbrefund_amount.arr, db_tlf01.dbrefund_amount.len);
   memcpy(tlf01_ptr->pin_block, db_tlf01.pin_block.arr, db_tlf01.pin_block.len);
   memcpy(tlf01_ptr->tax_amount, db_tlf01.tax_amount.arr, db_tlf01.tax_amount.len);
   memcpy(tlf01_ptr->tip_amount, db_tlf01.tip_amount.arr, db_tlf01.tip_amount.len);
   memcpy(tlf01_ptr->tran_start_time, db_tlf01.tran_start_time.arr, db_tlf01.tran_start_time.len);
   memcpy(tlf01_ptr->host_start_time, db_tlf01.host_start_time.arr, db_tlf01.host_start_time.len);
   memcpy(tlf01_ptr->host_finish_time, db_tlf01.host_finish_time.arr, db_tlf01.host_finish_time.len);
   memcpy(tlf01_ptr->tran_finish_time, db_tlf01.tran_finish_time.arr, db_tlf01.tran_finish_time.len);
   memcpy(tlf01_ptr->settle_file_prefix, db_tlf01.settle_file_prefix.arr, db_tlf01.settle_file_prefix.len);
   memcpy(tlf01_ptr->resp_source_len, db_tlf01.resp_source_len.arr, db_tlf01.resp_source_len.len);
   tlf01_ptr->visa_char_indicator = db_tlf01.visa_char_indicator.arr[0];
   memcpy(tlf01_ptr->visa_tran_id, db_tlf01.visa_tran_id.arr, db_tlf01.visa_tran_id.len);
   memcpy(tlf01_ptr->visa_validation_code, db_tlf01.visa_validation_code.arr, db_tlf01.visa_validation_code.len);
   memcpy(tlf01_ptr->mcard_banknet_len, db_tlf01.mcard_banknet_len.arr, db_tlf01.mcard_banknet_len.len);
   memcpy(tlf01_ptr->mcard_banknet, db_tlf01.mcard_banknet.arr, db_tlf01.mcard_banknet.len);
   memcpy(tlf01_ptr->agent_id_len, db_tlf01.agent_id_len.arr, db_tlf01.agent_id_len.len);
   memcpy(tlf01_ptr->agent_id, db_tlf01.agent_id.arr, db_tlf01.agent_id.len);
   tlf01_ptr->cvc = db_tlf01.cvc.arr[0];
   memcpy(tlf01_ptr->settlement_date, db_tlf01.settlement_date.arr, db_tlf01.settlement_date.len);
   memcpy(tlf01_ptr->category_code, db_tlf01.category_code.arr, db_tlf01.category_code.len);
   memcpy(tlf01_ptr->conversion_rate, db_tlf01.conversion_rate.arr, db_tlf01.conversion_rate.len);
   memcpy(tlf01_ptr->product_code, db_tlf01.product_code.arr, db_tlf01.product_code.len);
   memcpy(tlf01_ptr->odometer, db_tlf01.odometer.arr, db_tlf01.odometer.len);
   memcpy(tlf01_ptr->organization_id, db_tlf01.organization_id.arr, db_tlf01.organization_id.len);
   tlf01_ptr->dynamic_keychange = db_tlf01.dynamic_keychange.arr[0];

   memcpy(tlf01_ptr->txn_cnt, db_tlf01.txn_cnt.arr, db_tlf01.txn_cnt.len);
   memcpy(tlf01_ptr->source_key, db_tlf01.source_key.arr, db_tlf01.source_key.len);
   memcpy(tlf01_ptr->dcf01_retired_cwk, db_tlf01.dcf01_retired_cwk.arr, db_tlf01.dcf01_retired_cwk.len);
   memcpy(tlf01_ptr->dest_key, db_tlf01.dest_key.arr, db_tlf01.dest_key.len);
   memcpy(tlf01_ptr->ncf01_retired_cwk, db_tlf01.ncf01_retired_cwk.arr, db_tlf01.ncf01_retired_cwk.len);
   memcpy(tlf01_ptr->handler_queue, db_tlf01.handler_queue.arr, db_tlf01.handler_queue.len);
   memcpy(tlf01_ptr->authorizing_host_queue, db_tlf01.authorizing_host_queue.arr, db_tlf01.authorizing_host_queue.len);
   memcpy(tlf01_ptr->max_net_consec_tmouts, db_tlf01.max_net_consec_tmouts.arr, db_tlf01.max_net_consec_tmouts.len);
   memcpy(tlf01_ptr->max_active_txns, db_tlf01.max_active_txns.arr, db_tlf01.max_active_txns.len);
   memcpy(tlf01_ptr->remote_nsp_type, db_tlf01.remote_nsp_type.arr, db_tlf01.remote_nsp_type.len);
   memcpy(tlf01_ptr->kek, db_tlf01.kek.arr, db_tlf01.kek.len);
   
   memcpy(tlf01_ptr->credit_limit, db_tlf01.credit_limit.arr, db_tlf01.credit_limit.len);
   memcpy(tlf01_ptr->forwarding_institution_id, db_tlf01.forwarding_institution_id.arr, db_tlf01.forwarding_institution_id.len);
   memcpy(tlf01_ptr->acquiring_id, db_tlf01.acquiring_id.arr, db_tlf01.acquiring_id.len);
   memcpy(tlf01_ptr->outstanding_balance, db_tlf01.outstanding_balance.arr, db_tlf01.outstanding_balance.len);
   memcpy(tlf01_ptr->nfi_name, db_tlf01.nfi_name.arr, db_tlf01.nfi_name.len);
   memcpy(tlf01_ptr->nfi_seq_nbr, db_tlf01.nfi_seq_nbr.arr, db_tlf01.nfi_seq_nbr.len);
   memcpy(tlf01_ptr->nfi_start_date, db_tlf01.nfi_start_date.arr, db_tlf01.nfi_start_date.len);
   memcpy(tlf01_ptr->nfi_end_date, db_tlf01.nfi_end_date.arr, db_tlf01.nfi_end_date.len);
   memcpy(tlf01_ptr->resp_source, db_tlf01.resp_source.arr, db_tlf01.resp_source.len);
   memcpy(tlf01_ptr->dispensation.origin, db_tlf01.origin.arr, db_tlf01.origin.len);
   memcpy(tlf01_ptr->dispensation.auth_1, db_tlf01.auth_1.arr, db_tlf01.auth_1.len);
   memcpy(tlf01_ptr->dispensation.auth_2, db_tlf01.auth_2.arr, db_tlf01.auth_2.len);
   memcpy(tlf01_ptr->update_mask, db_tlf01.update_mask.arr, db_tlf01.update_mask.len);

   memcpy(tlf01_ptr->type_of_data, db_tlf01.type_of_data.arr, db_tlf01.type_of_data.len);
   memcpy(tlf01_ptr->down_payment, db_tlf01.down_payment.arr, db_tlf01.down_payment.len);
   memcpy(tlf01_ptr->period, db_tlf01.period.arr, db_tlf01.period.len);
   memcpy(tlf01_ptr->interest_rate, db_tlf01.interest_rate.arr, db_tlf01.interest_rate.len);
   memcpy(tlf01_ptr->total_interest, db_tlf01.total_interest.arr, db_tlf01.total_interest.len);
   memcpy(tlf01_ptr->redemption_amount, db_tlf01.redemption_amount.arr, db_tlf01.redemption_amount.len);
   memcpy(tlf01_ptr->vehicle_number, db_tlf01.vehicle_number.arr, db_tlf01.vehicle_number.len);
  
   memcpy(tlf01_ptr->profile, db_tlf01.profile.arr, db_tlf01.profile.len);
   memcpy(tlf01_ptr->nbr_of_prod_codes, db_tlf01.nbr_of_prod_codes.arr, db_tlf01.nbr_of_prod_codes.len);
  
   memcpy(tlf01_ptr->product_codes[0].code, db_tlf01.product1_code.arr, db_tlf01.product1_code.len);
   memcpy(tlf01_ptr->product_codes[0].quantity, db_tlf01.product1_quantity.arr, db_tlf01.product1_quantity.len);
   memcpy(tlf01_ptr->product_codes[0].amount, db_tlf01.product1_amount.arr, db_tlf01.product1_amount.len);   
   memcpy(tlf01_ptr->product_codes[1].code, db_tlf01.product2_code.arr, db_tlf01.product2_code.len);
   memcpy(tlf01_ptr->product_codes[1].quantity, db_tlf01.product2_quantity.arr, db_tlf01.product2_quantity.len);
   memcpy(tlf01_ptr->product_codes[1].amount, db_tlf01.product2_amount.arr, db_tlf01.product2_amount.len);
   memcpy(tlf01_ptr->product_codes[2].code, db_tlf01.product3_code.arr, db_tlf01.product3_code.len);
   memcpy(tlf01_ptr->product_codes[2].quantity, db_tlf01.product3_quantity.arr, db_tlf01.product3_quantity.len);
   memcpy(tlf01_ptr->product_codes[2].amount, db_tlf01.product3_amount.arr, db_tlf01.product3_amount.len);
   memcpy(tlf01_ptr->product_codes[3].code, db_tlf01.product4_code.arr, db_tlf01.product4_code.len);
   memcpy(tlf01_ptr->product_codes[3].quantity, db_tlf01.product4_quantity.arr, db_tlf01.product4_quantity.len);
   memcpy(tlf01_ptr->product_codes[3].amount, db_tlf01.product4_amount.arr, db_tlf01.product4_amount.len);
   memcpy(tlf01_ptr->product_codes[4].code, db_tlf01.product5_code.arr, db_tlf01.product5_code.len);
   memcpy(tlf01_ptr->product_codes[4].quantity, db_tlf01.product5_quantity.arr, db_tlf01.product5_quantity.len);
   memcpy(tlf01_ptr->product_codes[4].amount, db_tlf01.product5_amount.arr, db_tlf01.product5_amount.len);
   memcpy(tlf01_ptr->product_codes[5].code, db_tlf01.product6_code.arr, db_tlf01.product6_code.len);
   memcpy(tlf01_ptr->product_codes[5].quantity, db_tlf01.product6_quantity.arr, db_tlf01.product6_quantity.len);
   memcpy(tlf01_ptr->product_codes[5].amount, db_tlf01.product6_amount.arr, db_tlf01.product6_amount.len);
   memcpy(tlf01_ptr->product_codes[6].code, db_tlf01.product7_code.arr, db_tlf01.product7_code.len);
   memcpy(tlf01_ptr->product_codes[6].quantity, db_tlf01.product7_quantity.arr, db_tlf01.product7_quantity.len);
   memcpy(tlf01_ptr->product_codes[6].amount, db_tlf01.product7_amount.arr, db_tlf01.product7_amount.len);
   memcpy(tlf01_ptr->product_codes[7].code, db_tlf01.product8_code.arr, db_tlf01.product8_code.len);
   memcpy(tlf01_ptr->product_codes[7].quantity, db_tlf01.product8_quantity.arr, db_tlf01.product8_quantity.len);
   memcpy(tlf01_ptr->product_codes[7].amount, db_tlf01.product8_amount.arr, db_tlf01.product8_amount.len);
   memcpy(tlf01_ptr->product_codes[8].code, db_tlf01.product9_code.arr, db_tlf01.product9_code.len);
   memcpy(tlf01_ptr->product_codes[8].quantity, db_tlf01.product9_quantity.arr, db_tlf01.product9_quantity.len);
   memcpy(tlf01_ptr->product_codes[8].amount, db_tlf01.product9_amount.arr, db_tlf01.product9_amount.len);
   memcpy(tlf01_ptr->product_codes[9].code, db_tlf01.product10_code.arr, db_tlf01.product10_code.len);
   memcpy(tlf01_ptr->product_codes[9].quantity, db_tlf01.product10_quantity.arr, db_tlf01.product10_quantity.len);
   memcpy(tlf01_ptr->product_codes[9].amount, db_tlf01.product10_amount.arr, db_tlf01.product10_amount.len);
   memcpy(tlf01_ptr->product_codes[10].code, db_tlf01.product11_code.arr, db_tlf01.product11_code.len);
   memcpy(tlf01_ptr->product_codes[10].quantity, db_tlf01.product11_quantity.arr, db_tlf01.product11_quantity.len);
   memcpy(tlf01_ptr->product_codes[10].amount, db_tlf01.product11_amount.arr, db_tlf01.product11_amount.len);
   memcpy(tlf01_ptr->product_codes[11].code, db_tlf01.product12_code.arr, db_tlf01.product12_code.len);
   memcpy(tlf01_ptr->product_codes[11].quantity, db_tlf01.product12_quantity.arr, db_tlf01.product12_quantity.len);
   memcpy(tlf01_ptr->product_codes[11].amount, db_tlf01.product12_amount.arr, db_tlf01.product12_amount.len);
   memcpy(tlf01_ptr->product_codes[12].code, db_tlf01.product13_code.arr, db_tlf01.product13_code.len);
   memcpy(tlf01_ptr->product_codes[12].quantity, db_tlf01.product13_quantity.arr, db_tlf01.product13_quantity.len);
   memcpy(tlf01_ptr->product_codes[12].amount, db_tlf01.product13_amount.arr, db_tlf01.product13_amount.len);
   memcpy(tlf01_ptr->product_codes[13].code, db_tlf01.product14_code.arr, db_tlf01.product14_code.len);
   memcpy(tlf01_ptr->product_codes[13].quantity, db_tlf01.product14_quantity.arr, db_tlf01.product14_quantity.len);
   memcpy(tlf01_ptr->product_codes[13].amount, db_tlf01.product14_amount.arr, db_tlf01.product14_amount.len);
   memcpy(tlf01_ptr->product_codes[14].code, db_tlf01.product15_code.arr, db_tlf01.product15_code.len);
   memcpy(tlf01_ptr->product_codes[14].quantity, db_tlf01.product15_quantity.arr, db_tlf01.product15_quantity.len);
   memcpy(tlf01_ptr->product_codes[14].amount, db_tlf01.product15_amount.arr, db_tlf01.product15_amount.len);
   memcpy(tlf01_ptr->product_codes[15].code, db_tlf01.product16_code.arr, db_tlf01.product16_code.len);
   memcpy(tlf01_ptr->product_codes[15].quantity, db_tlf01.product16_quantity.arr, db_tlf01.product16_quantity.len);
   memcpy(tlf01_ptr->product_codes[15].amount, db_tlf01.product16_amount.arr, db_tlf01.product16_amount.len);
   memcpy(tlf01_ptr->product_codes[16].code, db_tlf01.product17_code.arr, db_tlf01.product17_code.len);
   memcpy(tlf01_ptr->product_codes[16].quantity, db_tlf01.product17_quantity.arr, db_tlf01.product17_quantity.len);
   memcpy(tlf01_ptr->product_codes[16].amount, db_tlf01.product17_amount.arr, db_tlf01.product17_amount.len);
   memcpy(tlf01_ptr->product_codes[17].code, db_tlf01.product18_code.arr, db_tlf01.product18_code.len);
   memcpy(tlf01_ptr->product_codes[17].quantity, db_tlf01.product18_quantity.arr, db_tlf01.product18_quantity.len);
   memcpy(tlf01_ptr->product_codes[17].amount, db_tlf01.product18_amount.arr, db_tlf01.product18_amount.len);
   memcpy(tlf01_ptr->product_codes[18].code, db_tlf01.product19_code.arr, db_tlf01.product19_code.len);
   memcpy(tlf01_ptr->product_codes[18].quantity, db_tlf01.product19_quantity.arr, db_tlf01.product19_quantity.len);
   memcpy(tlf01_ptr->product_codes[18].amount, db_tlf01.product19_amount.arr, db_tlf01.product19_amount.len);
   memcpy(tlf01_ptr->product_codes[19].code, db_tlf01.product20_code.arr, db_tlf01.product20_code.len);
   memcpy(tlf01_ptr->product_codes[19].quantity, db_tlf01.product20_quantity.arr, db_tlf01.product20_quantity.len);
   memcpy(tlf01_ptr->product_codes[19].amount, db_tlf01.product20_amount.arr, db_tlf01.product20_amount.len);
   memcpy(tlf01_ptr->visa_merchant_id, db_tlf01.visa_merchant_id.arr, db_tlf01.visa_merchant_id.len);
   
   memcpy(tlf01_ptr->cash_bonus, db_tlf01.cash_bonus.arr, db_tlf01.cash_bonus.len);
   memcpy(tlf01_ptr->deferred_factor, db_tlf01.deferred_factor.arr, db_tlf01.deferred_factor.len);
   memcpy(tlf01_ptr->deferred_term_length, db_tlf01.deferred_term_length.arr, db_tlf01.deferred_term_length.len);
   memcpy(tlf01_ptr->currency_code, db_tlf01.currency_code.arr, db_tlf01.currency_code.len);
   memcpy(tlf01_ptr->transmission_timestamp, db_tlf01.transmission_timestamp.arr, db_tlf01.transmission_timestamp.len);
   memcpy(tlf01_ptr->tran_fee_amount, db_tlf01.tran_fee_amount.arr, db_tlf01.tran_fee_amount.len);
   memcpy(tlf01_ptr->cvc_data, db_tlf01.cvc_data.arr, db_tlf01.cvc_data.len);

   memcpy(tlf01_ptr->verify_mag_stripe, db_tlf01.verify_mag_stripe.arr, db_tlf01.verify_mag_stripe.len);
   memcpy(tlf01_ptr->saf, db_tlf01.saf.arr, db_tlf01.saf.len);
   memcpy(tlf01_ptr->security_response_code, db_tlf01.security_response_code.arr, db_tlf01.security_response_code.len);
   memcpy(tlf01_ptr->service_code, db_tlf01.service_code.arr, db_tlf01.service_code.len);
   memcpy(tlf01_ptr->source_pin_format, db_tlf01.source_pin_format.arr, db_tlf01.source_pin_format.len);
   memcpy(tlf01_ptr->dest_pin_format, db_tlf01.dest_pin_format.arr, db_tlf01.dest_pin_format.len);
   memcpy(tlf01_ptr->voice_auth, db_tlf01.voice_auth.arr, db_tlf01.voice_auth.len);

   memcpy(tlf01_ptr->actual_amount, db_tlf01.actual_amount.arr, db_tlf01.actual_amount.len);
   memcpy(tlf01_ptr->reversal_amount, db_tlf01.reversal_amount.arr, db_tlf01.reversal_amount.len);
  
   memcpy(tlf01_ptr->voice_auth_text, db_tlf01.voice_auth_text.arr, db_tlf01.voice_auth_text.len);
   memcpy(tlf01_ptr->operator_id, db_tlf01.operator_id.arr, db_tlf01.operator_id.len);
   memcpy(tlf01_ptr->workstation, db_tlf01.workstation.arr, db_tlf01.workstation.len);
   memcpy(tlf01_ptr->orig_auth_number, db_tlf01.orig_auth_number.arr, db_tlf01.orig_auth_number.len);
   memcpy(tlf01_ptr->ticket_nbr, db_tlf01.ticket_nbr.arr, db_tlf01.ticket_nbr.len);
   memcpy(tlf01_ptr->system_date, db_tlf01.system_date.arr, db_tlf01.system_date.len);
   memcpy(tlf01_ptr->def_gross_amt, db_tlf01.def_gross_amt.arr, db_tlf01.def_gross_amt.len);
   memcpy(tlf01_ptr->monthly_amort_amt, db_tlf01.monthly_amort_amt.arr, db_tlf01.monthly_amort_amt.len);


}

/*************************************************************************************/
/*************************************************************************************/
void db_to_tlf01_list ( pTLF01_LIST_STRUCTURE tlf01_ptr )
{
   
   memset(tlf01_ptr, 0, sizeof(TLF01_LIST_STRUCTURE));
   memcpy(tlf01_ptr->transaction_id, db_tlf01_structure.transaction_id.arr, db_tlf01_structure.transaction_id.len);
   
   memcpy(tlf01_ptr->terminal_id, db_tlf01_structure.terminal_id.arr, db_tlf01_structure.terminal_id.len);
   memcpy(tlf01_ptr->merchant_id, db_tlf01_structure.merchant_id.arr, db_tlf01_structure.merchant_id.len);
   
   memcpy(tlf01_ptr->card_num, db_tlf01_structure.card_num.arr, db_tlf01_structure.card_num.len);
   memcpy(tlf01_ptr->exp_date, db_tlf01_structure.exp_date.arr, db_tlf01_structure.exp_date.len);
   memcpy(tlf01_ptr->total_amount, db_tlf01_structure.total_amount.arr, db_tlf01_structure.total_amount.len);
   memcpy(tlf01_ptr->pos_entry_mode, db_tlf01_structure.pos_entry_mode.arr, db_tlf01_structure.pos_entry_mode.len);
   memcpy(tlf01_ptr->response_code, db_tlf01_structure.response_code.arr, db_tlf01_structure.response_code.len);
   memcpy(tlf01_ptr->date_yyyymmdd, db_tlf01_structure.date_yyyymmdd.arr, db_tlf01_structure.date_yyyymmdd.len);
   memcpy(tlf01_ptr->time_hhmmss, db_tlf01_structure.time_hhmmss.arr, db_tlf01_structure.time_hhmmss.len);
   tlf01_ptr->tx_key = db_tlf01_structure.tx_key.arr[0];
   memcpy(tlf01_ptr->auth_number, db_tlf01_structure.auth_number.arr, db_tlf01_structure.auth_number.len);
   memcpy(tlf01_ptr->sys_trace_audit_num, db_tlf01_structure.sys_trace_audit_num.arr, db_tlf01_structure.sys_trace_audit_num.len);
   memcpy(tlf01_ptr->outstanding_balance, db_tlf01_structure.outstanding_balance.arr, db_tlf01_structure.outstanding_balance.len);
   /*
   memcpy(tlf01_ptr->invoice_number, db_tlf01_structure.invoice_number.arr, db_tlf01_structure.invoice_number.len);
   */
   memcpy(tlf01_ptr->tran_start_time, db_tlf01_structure.tran_start_time.arr, db_tlf01_structure.tran_start_time.len);
   memcpy(tlf01_ptr->tran_finish_time, db_tlf01_structure.tran_finish_time.arr, db_tlf01_structure.tran_finish_time.len);
   memcpy(tlf01_ptr->category_code, db_tlf01_structure.category_code.arr, db_tlf01_structure.category_code.len);
   memcpy(tlf01_ptr->product_code, db_tlf01_structure.product_code.arr, db_tlf01_structure.product_code.len);
   memcpy(tlf01_ptr->deferred_factor, db_tlf01_structure.deferred_factor.arr, db_tlf01_structure.deferred_factor.len);
   memcpy(tlf01_ptr->ticket_nbr, db_tlf01_structure.ticket_nbr.arr, db_tlf01_structure.ticket_nbr.len);
   memcpy(tlf01_ptr->currency_code, db_tlf01_structure.currency_code.arr, db_tlf01_structure.currency_code.len);
   memcpy(tlf01_ptr->odometer, db_tlf01_structure.odometer.arr, db_tlf01_structure.odometer.len);
   
}


/*************************************************************************************/
/*************************************************************************************/
void db_to_mcf20 ( pMCF20 mcf20_ptr )
{
   memset(mcf20_ptr, 0, sizeof(MCF20));
   memcpy(mcf20_ptr->primary_key.organization_id, db_mcf20.organization_id.arr, db_mcf20.organization_id.len);
   memcpy(mcf20_ptr->primary_key.merchant_id, db_mcf20.merchant_id.arr, db_mcf20.merchant_id.len);
   memcpy(mcf20_ptr->primary_key.yyyymmdd, db_mcf20.yyyymmdd.arr, db_mcf20.yyyymmdd.len);
   memcpy(mcf20_ptr->ytd_total_adds, db_mcf20.ytd_total_adds.arr, db_mcf20.ytd_total_adds.len);
   memcpy(mcf20_ptr->ytd_total_deletes, db_mcf20.ytd_total_deletes.arr, db_mcf20.ytd_total_deletes.len);
   memcpy(mcf20_ptr->mtd_total_adds, db_mcf20.mtd_total_adds.arr, db_mcf20.mtd_total_adds.len);
   memcpy(mcf20_ptr->mtd_total_deletes, db_mcf20.mtd_total_deletes.arr, db_mcf20.mtd_total_deletes.len);
   memcpy(mcf20_ptr->daily[0].adds, db_mcf20.daily1_adds.arr, db_mcf20.daily1_adds.len);
   memcpy(mcf20_ptr->daily[0].deletes, db_mcf20.daily1_deletes.arr, db_mcf20.daily1_deletes.len);
   memcpy(mcf20_ptr->daily[1].adds, db_mcf20.daily2_adds.arr, db_mcf20.daily2_adds.len);
   memcpy(mcf20_ptr->daily[1].deletes, db_mcf20.daily2_deletes.arr, db_mcf20.daily2_deletes.len);
   memcpy(mcf20_ptr->daily[2].adds, db_mcf20.daily3_adds.arr, db_mcf20.daily3_adds.len);
   memcpy(mcf20_ptr->daily[2].deletes, db_mcf20.daily3_deletes.arr, db_mcf20.daily3_deletes.len);
   memcpy(mcf20_ptr->daily[3].adds, db_mcf20.daily4_adds.arr, db_mcf20.daily4_adds.len);
   memcpy(mcf20_ptr->daily[3].deletes, db_mcf20.daily4_deletes.arr, db_mcf20.daily4_deletes.len);
   memcpy(mcf20_ptr->daily[4].adds, db_mcf20.daily5_adds.arr, db_mcf20.daily5_adds.len);
   memcpy(mcf20_ptr->daily[4].deletes, db_mcf20.daily5_deletes.arr, db_mcf20.daily5_deletes.len);
   memcpy(mcf20_ptr->daily[5].adds, db_mcf20.daily6_adds.arr, db_mcf20.daily6_adds.len);
   memcpy(mcf20_ptr->daily[5].deletes, db_mcf20.daily6_deletes.arr, db_mcf20.daily6_deletes.len);
   memcpy(mcf20_ptr->daily[6].adds, db_mcf20.daily7_adds.arr, db_mcf20.daily7_adds.len);
   memcpy(mcf20_ptr->daily[6].deletes, db_mcf20.daily7_deletes.arr, db_mcf20.daily7_deletes.len);
   memcpy(mcf20_ptr->daily[7].adds, db_mcf20.daily8_adds.arr, db_mcf20.daily8_adds.len);
   memcpy(mcf20_ptr->daily[7].deletes, db_mcf20.daily8_deletes.arr, db_mcf20.daily8_deletes.len);
   memcpy(mcf20_ptr->daily[8].adds, db_mcf20.daily9_adds.arr, db_mcf20.daily9_adds.len);
   memcpy(mcf20_ptr->daily[8].deletes, db_mcf20.daily9_deletes.arr, db_mcf20.daily9_deletes.len);
   memcpy(mcf20_ptr->daily[9].adds, db_mcf20.daily10_adds.arr, db_mcf20.daily10_adds.len);
   memcpy(mcf20_ptr->daily[9].deletes, db_mcf20.daily10_deletes.arr, db_mcf20.daily10_deletes.len);
   memcpy(mcf20_ptr->daily[10].adds, db_mcf20.daily11_adds.arr, db_mcf20.daily11_adds.len);
   memcpy(mcf20_ptr->daily[10].deletes, db_mcf20.daily11_deletes.arr, db_mcf20.daily11_deletes.len);
   memcpy(mcf20_ptr->daily[11].adds, db_mcf20.daily12_adds.arr, db_mcf20.daily12_adds.len);
   memcpy(mcf20_ptr->daily[11].deletes, db_mcf20.daily12_deletes.arr, db_mcf20.daily12_deletes.len);
   memcpy(mcf20_ptr->daily[12].adds, db_mcf20.daily13_adds.arr, db_mcf20.daily13_adds.len);
   memcpy(mcf20_ptr->daily[12].deletes, db_mcf20.daily13_deletes.arr, db_mcf20.daily13_deletes.len);
   memcpy(mcf20_ptr->daily[13].adds, db_mcf20.daily14_adds.arr, db_mcf20.daily14_adds.len);
   memcpy(mcf20_ptr->daily[13].deletes, db_mcf20.daily14_deletes.arr, db_mcf20.daily14_deletes.len);
   memcpy(mcf20_ptr->daily[14].adds, db_mcf20.daily15_adds.arr, db_mcf20.daily15_adds.len);
   memcpy(mcf20_ptr->daily[14].deletes, db_mcf20.daily15_deletes.arr, db_mcf20.daily15_deletes.len);
   memcpy(mcf20_ptr->daily[15].adds, db_mcf20.daily16_adds.arr, db_mcf20.daily16_adds.len);
   memcpy(mcf20_ptr->daily[15].deletes, db_mcf20.daily16_deletes.arr, db_mcf20.daily16_deletes.len);
   memcpy(mcf20_ptr->daily[16].adds, db_mcf20.daily17_adds.arr, db_mcf20.daily17_adds.len);
   memcpy(mcf20_ptr->daily[16].deletes, db_mcf20.daily17_deletes.arr, db_mcf20.daily17_deletes.len);
   memcpy(mcf20_ptr->daily[17].adds, db_mcf20.daily18_adds.arr, db_mcf20.daily18_adds.len);
   memcpy(mcf20_ptr->daily[17].deletes, db_mcf20.daily18_deletes.arr, db_mcf20.daily18_deletes.len);
   memcpy(mcf20_ptr->daily[18].adds, db_mcf20.daily19_adds.arr, db_mcf20.daily19_adds.len);
   memcpy(mcf20_ptr->daily[18].deletes, db_mcf20.daily19_deletes.arr, db_mcf20.daily19_deletes.len);
   memcpy(mcf20_ptr->daily[19].adds, db_mcf20.daily20_adds.arr, db_mcf20.daily20_adds.len);
   memcpy(mcf20_ptr->daily[19].deletes, db_mcf20.daily20_deletes.arr, db_mcf20.daily20_deletes.len);
   memcpy(mcf20_ptr->daily[20].adds, db_mcf20.daily21_adds.arr, db_mcf20.daily21_adds.len);
   memcpy(mcf20_ptr->daily[20].deletes, db_mcf20.daily21_deletes.arr, db_mcf20.daily21_deletes.len);
   memcpy(mcf20_ptr->daily[21].adds, db_mcf20.daily22_adds.arr, db_mcf20.daily22_adds.len);
   memcpy(mcf20_ptr->daily[21].deletes, db_mcf20.daily22_deletes.arr, db_mcf20.daily22_deletes.len);
   memcpy(mcf20_ptr->daily[22].adds, db_mcf20.daily23_adds.arr, db_mcf20.daily23_adds.len);
   memcpy(mcf20_ptr->daily[22].deletes, db_mcf20.daily23_deletes.arr, db_mcf20.daily23_deletes.len);
   memcpy(mcf20_ptr->daily[23].adds, db_mcf20.daily24_adds.arr, db_mcf20.daily24_adds.len);
   memcpy(mcf20_ptr->daily[23].deletes, db_mcf20.daily24_deletes.arr, db_mcf20.daily24_deletes.len);
   memcpy(mcf20_ptr->daily[24].adds, db_mcf20.daily25_adds.arr, db_mcf20.daily25_adds.len);
   memcpy(mcf20_ptr->daily[24].deletes, db_mcf20.daily25_deletes.arr, db_mcf20.daily25_deletes.len);
   memcpy(mcf20_ptr->daily[25].adds, db_mcf20.daily26_adds.arr, db_mcf20.daily26_adds.len);
   memcpy(mcf20_ptr->daily[25].deletes, db_mcf20.daily26_deletes.arr, db_mcf20.daily26_deletes.len);
   memcpy(mcf20_ptr->daily[26].adds, db_mcf20.daily27_adds.arr, db_mcf20.daily27_adds.len);
   memcpy(mcf20_ptr->daily[26].deletes, db_mcf20.daily27_deletes.arr, db_mcf20.daily27_deletes.len);
   memcpy(mcf20_ptr->daily[27].adds, db_mcf20.daily28_adds.arr, db_mcf20.daily28_adds.len);
   memcpy(mcf20_ptr->daily[27].deletes, db_mcf20.daily28_deletes.arr, db_mcf20.daily28_deletes.len);
   memcpy(mcf20_ptr->daily[28].adds, db_mcf20.daily29_adds.arr, db_mcf20.daily29_adds.len);
   memcpy(mcf20_ptr->daily[28].deletes, db_mcf20.daily29_deletes.arr, db_mcf20.daily29_deletes.len);
   memcpy(mcf20_ptr->daily[29].adds, db_mcf20.daily30_adds.arr, db_mcf20.daily30_adds.len);
   memcpy(mcf20_ptr->daily[29].deletes, db_mcf20.daily30_deletes.arr, db_mcf20.daily30_deletes.len);
   memcpy(mcf20_ptr->daily[30].adds, db_mcf20.daily31_adds.arr, db_mcf20.daily31_adds.len);
   memcpy(mcf20_ptr->daily[30].deletes, db_mcf20.daily31_deletes.arr, db_mcf20.daily31_deletes.len);

}

/*************************************************************************************/
/*************************************************************************************/
void db_to_ocf20 ( pOCF20 ocf20_ptr )
{
   memset(ocf20_ptr, 0, sizeof(OCF20));
   memcpy(ocf20_ptr->primary_key.organization_id, db_ocf20.organization_id.arr, db_ocf20.organization_id.len);
   memcpy(ocf20_ptr->primary_key.yyyymmdd, db_ocf20.yyyymmdd.arr, db_ocf20.yyyymmdd.len);
   memcpy(ocf20_ptr->ytd_total_tran_cnt, db_ocf20.ytd_total_tran_cnt.arr, db_ocf20.ytd_total_tran_cnt.len);
   memcpy(ocf20_ptr->ytd_total_tran_amt, db_ocf20.ytd_total_tran_amt.arr, db_ocf20.ytd_total_tran_amt.len);
   memcpy(ocf20_ptr->mtd_total_tran_cnt, db_ocf20.mtd_total_tran_cnt.arr, db_ocf20.mtd_total_tran_cnt.len);
   memcpy(ocf20_ptr->mtd_total_tran_amt, db_ocf20.mtd_total_tran_amt.arr, db_ocf20.mtd_total_tran_amt.len);
   memcpy(ocf20_ptr->tran_cnt, db_ocf20.tran_cnt.arr, db_ocf20.tran_cnt.len);
   memcpy(ocf20_ptr->tran_amt, db_ocf20.tran_amt.arr, db_ocf20.tran_amt.len);
   memcpy(ocf20_ptr->tran_approved_cnt, db_ocf20.tran_approved_cnt.arr, db_ocf20.tran_approved_cnt.len);
   memcpy(ocf20_ptr->tran_declined_cnt, db_ocf20.tran_declined_cnt.arr, db_ocf20.tran_declined_cnt.len);
   memcpy(ocf20_ptr->decline[0].category_code, db_ocf20.decline1_category_code.arr, db_ocf20.decline1_category_code.len);
   memcpy(ocf20_ptr->decline[0].category_cnt, db_ocf20.decline1_category_cnt.arr, db_ocf20.decline1_category_cnt.len);
   memcpy(ocf20_ptr->decline[1].category_code, db_ocf20.decline2_category_code.arr, db_ocf20.decline2_category_code.len);
   memcpy(ocf20_ptr->decline[1].category_cnt, db_ocf20.decline2_category_cnt.arr, db_ocf20.decline2_category_cnt.len);
   memcpy(ocf20_ptr->decline[2].category_code, db_ocf20.decline3_category_code.arr, db_ocf20.decline3_category_code.len);
   memcpy(ocf20_ptr->decline[2].category_cnt, db_ocf20.decline3_category_cnt.arr, db_ocf20.decline3_category_cnt.len);
   memcpy(ocf20_ptr->decline[3].category_code, db_ocf20.decline4_category_code.arr, db_ocf20.decline4_category_code.len);
   memcpy(ocf20_ptr->decline[3].category_cnt, db_ocf20.decline4_category_cnt.arr, db_ocf20.decline4_category_cnt.len);
   memcpy(ocf20_ptr->decline[4].category_code, db_ocf20.decline5_category_code.arr, db_ocf20.decline5_category_code.len);
   memcpy(ocf20_ptr->decline[4].category_cnt, db_ocf20.decline5_category_cnt.arr, db_ocf20.decline5_category_cnt.len);
   memcpy(ocf20_ptr->decline[5].category_code, db_ocf20.decline6_category_code.arr, db_ocf20.decline6_category_code.len);
   memcpy(ocf20_ptr->decline[5].category_cnt, db_ocf20.decline6_category_cnt.arr, db_ocf20.decline6_category_cnt.len);
   memcpy(ocf20_ptr->decline[6].category_code, db_ocf20.decline7_category_code.arr, db_ocf20.decline7_category_code.len);
   memcpy(ocf20_ptr->decline[6].category_cnt, db_ocf20.decline7_category_cnt.arr, db_ocf20.decline7_category_cnt.len);
   memcpy(ocf20_ptr->decline[7].category_code, db_ocf20.decline8_category_code.arr, db_ocf20.decline8_category_code.len);
   memcpy(ocf20_ptr->decline[7].category_cnt, db_ocf20.decline8_category_cnt.arr, db_ocf20.decline8_category_cnt.len);
   memcpy(ocf20_ptr->decline[8].category_code, db_ocf20.decline9_category_code.arr, db_ocf20.decline9_category_code.len);
   memcpy(ocf20_ptr->decline[8].category_cnt, db_ocf20.decline9_category_cnt.arr, db_ocf20.decline9_category_cnt.len);
   memcpy(ocf20_ptr->decline[9].category_code, db_ocf20.decline10_category_code.arr, db_ocf20.decline10_category_code.len);
   memcpy(ocf20_ptr->decline[9].category_cnt, db_ocf20.decline10_category_cnt.arr, db_ocf20.decline10_category_cnt.len);
   memcpy(ocf20_ptr->decline[10].category_code, db_ocf20.decline11_category_code.arr, db_ocf20.decline11_category_code.len);
   memcpy(ocf20_ptr->decline[10].category_cnt, db_ocf20.decline11_category_cnt.arr, db_ocf20.decline11_category_cnt.len);
   memcpy(ocf20_ptr->decline[11].category_code, db_ocf20.decline12_category_code.arr, db_ocf20.decline12_category_code.len);
   memcpy(ocf20_ptr->decline[11].category_cnt, db_ocf20.decline12_category_cnt.arr, db_ocf20.decline12_category_cnt.len);
   memcpy(ocf20_ptr->decline[12].category_code, db_ocf20.decline13_category_code.arr, db_ocf20.decline13_category_code.len);
   memcpy(ocf20_ptr->decline[12].category_cnt, db_ocf20.decline13_category_cnt.arr, db_ocf20.decline13_category_cnt.len);
   memcpy(ocf20_ptr->decline[13].category_code, db_ocf20.decline14_category_code.arr, db_ocf20.decline14_category_code.len);
   memcpy(ocf20_ptr->decline[13].category_cnt, db_ocf20.decline14_category_cnt.arr, db_ocf20.decline14_category_cnt.len);
   memcpy(ocf20_ptr->decline[14].category_code, db_ocf20.decline15_category_code.arr, db_ocf20.decline15_category_code.len);
   memcpy(ocf20_ptr->decline[14].category_cnt, db_ocf20.decline15_category_cnt.arr, db_ocf20.decline15_category_cnt.len);
   memcpy(ocf20_ptr->decline[15].category_code, db_ocf20.decline16_category_code.arr, db_ocf20.decline16_category_code.len);
   memcpy(ocf20_ptr->decline[15].category_cnt, db_ocf20.decline16_category_cnt.arr, db_ocf20.decline16_category_cnt.len);
   memcpy(ocf20_ptr->decline[16].category_code, db_ocf20.decline17_category_code.arr, db_ocf20.decline17_category_code.len);
   memcpy(ocf20_ptr->decline[16].category_cnt, db_ocf20.decline17_category_cnt.arr, db_ocf20.decline17_category_cnt.len);
   memcpy(ocf20_ptr->decline[17].category_code, db_ocf20.decline18_category_code.arr, db_ocf20.decline18_category_code.len);
   memcpy(ocf20_ptr->decline[17].category_cnt, db_ocf20.decline18_category_cnt.arr, db_ocf20.decline18_category_cnt.len);
   memcpy(ocf20_ptr->decline[18].category_code, db_ocf20.decline19_category_code.arr, db_ocf20.decline19_category_code.len);
   memcpy(ocf20_ptr->decline[18].category_cnt, db_ocf20.decline19_category_cnt.arr, db_ocf20.decline19_category_cnt.len);
   memcpy(ocf20_ptr->decline[19].category_code, db_ocf20.decline20_category_code.arr, db_ocf20.decline20_category_code.len);
   memcpy(ocf20_ptr->decline[19].category_cnt, db_ocf20.decline20_category_cnt.arr, db_ocf20.decline20_category_cnt.len);

}



/*************************************************************************************/
/*************************************************************************************/
void db_to_ocf01 ( pOCF01 ocf01_ptr )
{
   memset(ocf01_ptr, 0, sizeof(OCF01));
   memcpy(ocf01_ptr->primary_key.organization_id, db_ocf01.organization_id.arr, db_ocf01.organization_id.len);
   memcpy(ocf01_ptr->name01, db_ocf01.name01.arr, db_ocf01.name01.len);
   memcpy(ocf01_ptr->addr01, db_ocf01.addr01.arr, db_ocf01.addr01.len);
   memcpy(ocf01_ptr->addr02, db_ocf01.addr02.arr, db_ocf01.addr02.len);
   memcpy(ocf01_ptr->city, db_ocf01.city.arr, db_ocf01.city.len);
   memcpy(ocf01_ptr->state, db_ocf01.state.arr, db_ocf01.state.len);
   memcpy(ocf01_ptr->zip_code, db_ocf01.zip_code.arr, db_ocf01.zip_code.len);
   memcpy(ocf01_ptr->intl_code, db_ocf01.intl_code.arr, db_ocf01.intl_code.len);
   memcpy(ocf01_ptr->contact, db_ocf01.contact.arr, db_ocf01.contact.len);
   memcpy(ocf01_ptr->phone01, db_ocf01.phone01.arr, db_ocf01.phone01.len);
   memcpy(ocf01_ptr->phone02, db_ocf01.phone02.arr, db_ocf01.phone02.len);
   memcpy(ocf01_ptr->date_added, db_ocf01.date_added.arr, db_ocf01.date_added.len);
   memcpy(ocf01_ptr->status, db_ocf01.status.arr, db_ocf01.status.len);
   memcpy(ocf01_ptr->totals_ind, db_ocf01.totals_ind.arr, db_ocf01.totals_ind.len);
   memcpy(ocf01_ptr->statistics_ind, db_ocf01.statistics_ind.arr, db_ocf01.statistics_ind.len);

}

/*************************************************************************************/
/*************************************************************************************/
void db_to_mcf01 ( pMCF01 mcf01_ptr )
{
   memset(mcf01_ptr, 0, sizeof(MCF01));
   memcpy(mcf01_ptr->primary_key.organization_id, db_mcf01.organization_id.arr, db_mcf01.organization_id.len);
   memcpy(mcf01_ptr->primary_key.merchant_id, db_mcf01.merchant_id.arr, db_mcf01.merchant_id.len);

   memcpy(mcf01_ptr->status, db_mcf01.status.arr, db_mcf01.status.len);
   memcpy(mcf01_ptr->name01, db_mcf01.name01.arr, db_mcf01.name01.len);
   memcpy(mcf01_ptr->name02, db_mcf01.name02.arr, db_mcf01.name02.len);
   memcpy(mcf01_ptr->address01, db_mcf01.address01.arr, db_mcf01.address01.len);
   memcpy(mcf01_ptr->address02, db_mcf01.address02.arr, db_mcf01.address02.len);
   memcpy(mcf01_ptr->city, db_mcf01.city.arr, db_mcf01.city.len);
   memcpy(mcf01_ptr->country, db_mcf01.country.arr, db_mcf01.country.len);
   memcpy(mcf01_ptr->state, db_mcf01.state.arr, db_mcf01.state.len);
   memcpy(mcf01_ptr->zip_code, db_mcf01.zip_code.arr, db_mcf01.zip_code.len);
   memcpy(mcf01_ptr->intl_code, db_mcf01.intl_code.arr, db_mcf01.intl_code.len);
   memcpy(mcf01_ptr->currency_code, db_mcf01.currency_code.arr, db_mcf01.currency_code.len);
   memcpy(mcf01_ptr->contact, db_mcf01.contact.arr, db_mcf01.contact.len);
   memcpy(mcf01_ptr->phone01, db_mcf01.phone01.arr, db_mcf01.phone01.len);
   memcpy(mcf01_ptr->phone02, db_mcf01.phone02.arr, db_mcf01.phone02.len);
   memcpy(mcf01_ptr->invoice_batch, db_mcf01.invoice_batch.arr, db_mcf01.invoice_batch.len);
   memcpy(mcf01_ptr->invoice_subcode, db_mcf01.invoice_subcode.arr, db_mcf01.invoice_subcode.len);
   memcpy(mcf01_ptr->process_control_id, db_mcf01.process_control_id.arr, db_mcf01.process_control_id.len);
   memcpy(mcf01_ptr->date_added, db_mcf01.date_added.arr, db_mcf01.date_added.len);
   
   memcpy(mcf01_ptr->region_nbr, db_mcf01.region_nbr.arr, db_mcf01.region_nbr.len);
   memcpy(mcf01_ptr->division_nbr, db_mcf01.division_nbr.arr, db_mcf01.division_nbr.len);
   memcpy(mcf01_ptr->password, db_mcf01.password.arr, db_mcf01.password.len);
   memcpy(mcf01_ptr->rps_merchant, db_mcf01.rps_merchant.arr, db_mcf01.rps_merchant.len);
   memcpy(mcf01_ptr->house_card_merchant, db_mcf01.house_card_merchant.arr, db_mcf01.house_card_merchant.len);
   memcpy(mcf01_ptr->procurement_merchant, db_mcf01.procurement_merchant.arr, db_mcf01.procurement_merchant.len);
   memcpy(mcf01_ptr->deferred_merchant, db_mcf01.deferred_merchant.arr, db_mcf01.deferred_merchant.len);
   memcpy(mcf01_ptr->cash_bonus_eligible, db_mcf01.cash_bonus_eligible.arr, db_mcf01.cash_bonus_eligible.len);
   memcpy(mcf01_ptr->vip_code, db_mcf01.vip_code.arr, db_mcf01.vip_code.len);
   memcpy(mcf01_ptr->pos_code, db_mcf01.pos_code.arr, db_mcf01.pos_code.len);
   memcpy(mcf01_ptr->vs_tcc_code, db_mcf01.vs_tcc_code.arr, db_mcf01.vs_tcc_code.len);
   memcpy(mcf01_ptr->mc_fcc_code, db_mcf01.mc_fcc_code.arr, db_mcf01.mc_fcc_code.len);
   memcpy(mcf01_ptr->jcb_sub_code, db_mcf01.jcb_sub_code.arr, db_mcf01.jcb_sub_code.len);
   memcpy(mcf01_ptr->mall_code, db_mcf01.mall_code.arr, db_mcf01.mall_code.len);
   memcpy(mcf01_ptr->hc_code, db_mcf01.hc_code.arr, db_mcf01.hc_code.len);
   memcpy(mcf01_ptr->solicit_code, db_mcf01.solicit_code.arr, db_mcf01.solicit_code.len);
   
   
   memcpy(mcf01_ptr->block_start_date, db_mcf01.block_start_date.arr, db_mcf01.block_start_date.len);
   memcpy(mcf01_ptr->block_end_date, db_mcf01.block_end_date.arr, db_mcf01.block_end_date.len);
   memcpy(mcf01_ptr->credit_purch_max, db_mcf01.credit_purch_max.arr, db_mcf01.credit_purch_max.len);
   memcpy(mcf01_ptr->credit_auth_max, db_mcf01.credit_auth_max.arr, db_mcf01.credit_auth_max.len);
   memcpy(mcf01_ptr->credit_return_max, db_mcf01.credit_return_max.arr, db_mcf01.credit_return_max.len);
   memcpy(mcf01_ptr->credit_cash_adv_max, db_mcf01.credit_cash_adv_max.arr, db_mcf01.credit_cash_adv_max.len);
   memcpy(mcf01_ptr->credit_man_entry_max, db_mcf01.credit_man_entry_max.arr, db_mcf01.credit_man_entry_max.len);
   memcpy(mcf01_ptr->credit_cash_back_max, db_mcf01.credit_cash_back_max.arr, db_mcf01.credit_cash_back_max.len);
   memcpy(mcf01_ptr->debit_purch_max, db_mcf01.debit_purch_max.arr, db_mcf01.debit_purch_max.len);
   memcpy(mcf01_ptr->debit_auth_max, db_mcf01.debit_auth_max.arr, db_mcf01.debit_auth_max.len);
   memcpy(mcf01_ptr->debit_return_max, db_mcf01.debit_return_max.arr, db_mcf01.debit_return_max.len);
   memcpy(mcf01_ptr->debit_cash_adv_max, db_mcf01.debit_cash_adv_max.arr, db_mcf01.debit_cash_adv_max.len);
   memcpy(mcf01_ptr->debit_man_entry_max, db_mcf01.debit_man_entry_max.arr, db_mcf01.debit_man_entry_max.len);
   memcpy(mcf01_ptr->debit_cash_back_max, db_mcf01.debit_cash_back_max.arr, db_mcf01.debit_cash_back_max.len);
   memcpy(mcf01_ptr->aver_purch_amount, db_mcf01.aver_purch_amount.arr, db_mcf01.aver_purch_amount.len);
   memcpy(mcf01_ptr->max_num_returns, db_mcf01.max_num_returns.arr, db_mcf01.max_num_returns.len);
   memcpy(mcf01_ptr->amount_returns, db_mcf01.amount_returns.arr, db_mcf01.amount_returns.len);
   memcpy(mcf01_ptr->number_man_entries, db_mcf01.number_man_entries.arr, db_mcf01.number_man_entries.len);
   memcpy(mcf01_ptr->amount_deposits, db_mcf01.amount_deposits.arr, db_mcf01.amount_deposits.len);
   memcpy(mcf01_ptr->pan_same, db_mcf01.pan_same.arr, db_mcf01.pan_same.len);
   memcpy(mcf01_ptr->totals_ind, db_mcf01.totals_ind.arr, db_mcf01.totals_ind.len);
   memcpy(mcf01_ptr->statistics_ind, db_mcf01.statistics_ind.arr, db_mcf01.statistics_ind.len);         

   memcpy(mcf01_ptr->network[0].priority_routing, db_mcf01.network_priority_routing_1.arr, db_mcf01.network_priority_routing_1.len);
   memcpy(mcf01_ptr->network[1].priority_routing, db_mcf01.network_priority_routing_2.arr, db_mcf01.network_priority_routing_2.len);
   memcpy(mcf01_ptr->network[2].priority_routing, db_mcf01.network_priority_routing_3.arr, db_mcf01.network_priority_routing_3.len);
   memcpy(mcf01_ptr->network[3].priority_routing, db_mcf01.network_priority_routing_4.arr, db_mcf01.network_priority_routing_4.len);
   memcpy(mcf01_ptr->network[4].priority_routing, db_mcf01.network_priority_routing_5.arr, db_mcf01.network_priority_routing_5.len);
   memcpy(mcf01_ptr->network[5].priority_routing, db_mcf01.network_priority_routing_6.arr, db_mcf01.network_priority_routing_6.len);
   memcpy(mcf01_ptr->network[6].priority_routing, db_mcf01.network_priority_routing_7.arr, db_mcf01.network_priority_routing_7.len);
   memcpy(mcf01_ptr->network[7].priority_routing, db_mcf01.network_priority_routing_8.arr, db_mcf01.network_priority_routing_8.len);
   memcpy(mcf01_ptr->network[8].priority_routing, db_mcf01.network_priority_routing_9.arr, db_mcf01.network_priority_routing_9.len);
   memcpy(mcf01_ptr->network[9].priority_routing, db_mcf01.network_priority_routing_10.arr, db_mcf01.network_priority_routing_10.len);
   memcpy(mcf01_ptr->negative_group_id, db_mcf01.negative_group_id.arr, db_mcf01.negative_group_id.len);
   memcpy(mcf01_ptr->voice_category_code, db_mcf01.voice_category_code.arr, db_mcf01.voice_category_code.len);
   memcpy(mcf01_ptr->class_code, db_mcf01.class_code.arr, db_mcf01.class_code.len);
   memcpy(mcf01_ptr->deferred_start_date, db_mcf01.deferred_start_date.arr, db_mcf01.deferred_start_date.len);
   memcpy(mcf01_ptr->deferred_end_date, db_mcf01.deferred_end_date.arr, db_mcf01.deferred_end_date.len);
   memcpy(mcf01_ptr->group_outlet_code, db_mcf01.group_outlet_code.arr, db_mcf01.group_outlet_code.len);
   memcpy(mcf01_ptr->group_type, db_mcf01.group_type.arr, db_mcf01.group_type.len);
   memcpy(mcf01_ptr->reload_merchant, db_mcf01.reload_merchant.arr, db_mcf01.reload_merchant.len);

}


/*************************************************************************************/
/*************************************************************************************/
void db_to_bch01 ( pBCH01 bch01_ptr)
{
   memset(bch01_ptr, 0, sizeof(BCH01));
   memcpy(bch01_ptr->primary_key.device_id, db_bch01.device_id.arr, db_bch01.device_id.len);
   memcpy(bch01_ptr->primary_key.batch_nbr, db_bch01.batch_nbr.arr, db_bch01.batch_nbr.len);

   memcpy(bch01_ptr->merchant_id, db_bch01.merchant_id.arr, db_bch01.merchant_id.len);
   memcpy(bch01_ptr->batch_status, db_bch01.batch_status.arr, db_bch01.batch_status.len);
   memcpy(bch01_ptr->total_credit_cnt, db_bch01.total_credit_cnt.arr, db_bch01.total_credit_cnt.len);
   memcpy(bch01_ptr->total_credit_amt, db_bch01.total_credit_amt.arr, db_bch01.total_credit_amt.len);
   memcpy(bch01_ptr->total_credit_refund_cnt, db_bch01.total_credit_refund_cnt.arr, db_bch01.total_credit_refund_cnt.len);
   memcpy(bch01_ptr->total_credit_refund_amt, db_bch01.total_credit_refund_amt.arr, db_bch01.total_credit_refund_amt.len);
   memcpy(bch01_ptr->total_debit_cnt, db_bch01.total_debit_cnt.arr, db_bch01.total_debit_cnt.len);
   memcpy(bch01_ptr->total_debit_amt, db_bch01.total_debit_amt.arr, db_bch01.total_debit_amt.len);
   memcpy(bch01_ptr->total_debit_refund_cnt, db_bch01.total_debit_refund_cnt.arr, db_bch01.total_debit_refund_cnt.len);
   memcpy(bch01_ptr->total_debit_refund_amt, db_bch01.total_debit_refund_amt.arr, db_bch01.total_debit_refund_amt.len);
   memcpy(bch01_ptr->total_void_credit_cnt, db_bch01.total_void_credit_cnt.arr, db_bch01.total_void_credit_cnt.len);
   memcpy(bch01_ptr->total_void_credit_amt, db_bch01.total_void_credit_amt.arr, db_bch01.total_void_credit_amt.len);
   memcpy(bch01_ptr->total_void_credit_refund_cnt, db_bch01.total_void_credit_refund_cnt.arr, db_bch01.total_void_credit_refund_cnt.len);
   memcpy(bch01_ptr->total_void_credit_refund_amt, db_bch01.total_void_credit_refund_amt.arr, db_bch01.total_void_credit_refund_amt.len);
   memcpy(bch01_ptr->open_date, db_bch01.open_date.arr, db_bch01.open_date.len);
   memcpy(bch01_ptr->open_time, db_bch01.open_time.arr, db_bch01.open_time.len);
   memcpy(bch01_ptr->release_date, db_bch01.release_date.arr, db_bch01.release_date.len);
   memcpy(bch01_ptr->release_time, db_bch01.release_time.arr, db_bch01.release_time.len);
   memcpy(bch01_ptr->visa_merchant_id, db_bch01.visa_merchant_id.arr, db_bch01.visa_merchant_id.len);

}

/*************************************************************************************/
/*************************************************************************************/
void db_to_bch01_mp ( pBCH01_MP bch01_mp_ptr)
{
   memset(bch01_mp_ptr, 0, sizeof(BCH01_MP));
   memcpy(bch01_mp_ptr->primary_key.device_id, db_bch01_mp.device_id.arr, db_bch01_mp.device_id.len);
   memcpy(bch01_mp_ptr->primary_key.batch_nbr, db_bch01_mp.batch_nbr.arr, db_bch01_mp.batch_nbr.len);

   memcpy(bch01_mp_ptr->merchant_id, db_bch01_mp.merchant_id.arr, db_bch01_mp.merchant_id.len);
   memcpy(bch01_mp_ptr->batch_status, db_bch01_mp.batch_status.arr, db_bch01_mp.batch_status.len);
   memcpy(bch01_mp_ptr->total_credit_cnt, db_bch01_mp.total_credit_cnt.arr, db_bch01_mp.total_credit_cnt.len);
   memcpy(bch01_mp_ptr->total_credit_amt, db_bch01_mp.total_credit_amt.arr, db_bch01_mp.total_credit_amt.len);
   memcpy(bch01_mp_ptr->total_credit_refund_cnt, db_bch01_mp.total_credit_refund_cnt.arr, db_bch01_mp.total_credit_refund_cnt.len);
   memcpy(bch01_mp_ptr->total_credit_refund_amt, db_bch01_mp.total_credit_refund_amt.arr, db_bch01_mp.total_credit_refund_amt.len);
   memcpy(bch01_mp_ptr->total_debit_cnt, db_bch01_mp.total_debit_cnt.arr, db_bch01_mp.total_debit_cnt.len);
   memcpy(bch01_mp_ptr->total_debit_amt, db_bch01_mp.total_debit_amt.arr, db_bch01_mp.total_debit_amt.len);
   memcpy(bch01_mp_ptr->total_debit_refund_cnt, db_bch01_mp.total_debit_refund_cnt.arr, db_bch01_mp.total_debit_refund_cnt.len);
   memcpy(bch01_mp_ptr->total_debit_refund_amt, db_bch01_mp.total_debit_refund_amt.arr, db_bch01_mp.total_debit_refund_amt.len);
   memcpy(bch01_mp_ptr->total_void_credit_cnt, db_bch01_mp.total_void_credit_cnt.arr, db_bch01_mp.total_void_credit_cnt.len);
   memcpy(bch01_mp_ptr->total_void_credit_amt, db_bch01_mp.total_void_credit_amt.arr, db_bch01_mp.total_void_credit_amt.len);
   memcpy(bch01_mp_ptr->total_void_credit_refund_cnt, db_bch01_mp.total_void_credit_refund_cnt.arr, db_bch01_mp.total_void_credit_refund_cnt.len);
   memcpy(bch01_mp_ptr->total_void_credit_refund_amt, db_bch01_mp.total_void_credit_refund_amt.arr, db_bch01_mp.total_void_credit_refund_amt.len);
   memcpy(bch01_mp_ptr->open_date, db_bch01_mp.open_date.arr, db_bch01_mp.open_date.len);
   memcpy(bch01_mp_ptr->open_time, db_bch01_mp.open_time.arr, db_bch01_mp.open_time.len);
   memcpy(bch01_mp_ptr->release_date, db_bch01_mp.release_date.arr, db_bch01_mp.release_date.len);
   memcpy(bch01_mp_ptr->release_time, db_bch01_mp.release_time.arr, db_bch01_mp.release_time.len);
   memcpy(bch01_mp_ptr->visa_merchant_id, db_bch01_mp.visa_merchant_id.arr, db_bch01_mp.visa_merchant_id.len);

}

/*************************************************************************************/


/*************************************************************************************/
void db_to_bch10 ( pBCH10 bch10_ptr)
{
   memset(bch10_ptr, 0, sizeof(BCH10));
   memcpy(bch10_ptr->primary_key.device_id, db_bch10.device_id.arr, db_bch10.device_id.len);
   memcpy(bch10_ptr->primary_key.batch_nbr, db_bch10.batch_nbr.arr, db_bch10.batch_nbr.len);
   memcpy(bch10_ptr->primary_key.retrieval_ref_num, db_bch10.retrieval_ref_num.arr, db_bch10.retrieval_ref_num.len);
   memcpy(bch10_ptr->merchant_id, db_bch10.merchant_id.arr, db_bch10.merchant_id.len);
   memcpy(bch10_ptr->processing_code, db_bch10.processing_code.arr, db_bch10.processing_code.len);
   memcpy(bch10_ptr->tran_amount, db_bch10.tran_amount.arr, db_bch10.tran_amount.len);
   memcpy(bch10_ptr->response_code, db_bch10.response_code.arr, db_bch10.response_code.len);
   memcpy(bch10_ptr->auth_number, db_bch10.auth_number.arr, db_bch10.auth_number.len);
   memcpy(bch10_ptr->tran_date, db_bch10.tran_date.arr, db_bch10.tran_date.len);
   memcpy(bch10_ptr->tran_time, db_bch10.tran_time.arr, db_bch10.tran_time.len);
   memcpy(bch10_ptr->transaction_id, db_bch10.transaction_id.arr, db_bch10.transaction_id.len);
   memcpy(bch10_ptr->message_type, db_bch10.message_type.arr, db_bch10.message_type.len);
   memcpy(bch10_ptr->card_nbr, db_bch10.card_nbr.arr, db_bch10.card_nbr.len);
   memcpy(bch10_ptr->invoice_nbr, db_bch10.invoice_nbr.arr, db_bch10.invoice_nbr.len);
   memcpy(bch10_ptr->settle_file_prefix, db_bch10.settle_file_prefix.arr, db_bch10.settle_file_prefix.len);
   memcpy(bch10_ptr->product_code, db_bch10.product_code.arr, db_bch10.product_code.len);
   memcpy(bch10_ptr->odometer, db_bch10.odometer.arr, db_bch10.odometer.len);
   memcpy(bch10_ptr->sys_trace_audit_num, db_bch10.sys_trace_audit_num.arr, db_bch10.sys_trace_audit_num.len);
   bch10_ptr->tx_key = db_bch10.tx_key.arr[0];
   bch10_ptr->bin_type = db_bch10.bin_type.arr[0];

   memcpy(bch10_ptr->type_of_data, db_bch10.type_of_data.arr, db_bch10.type_of_data.len);
   memcpy(bch10_ptr->down_payment, db_bch10.down_payment.arr, db_bch10.down_payment.len);
   memcpy(bch10_ptr->period, db_bch10.period.arr, db_bch10.period.len);
   memcpy(bch10_ptr->interest_rate, db_bch10.interest_rate.arr, db_bch10.interest_rate.len);
   memcpy(bch10_ptr->total_interest, db_bch10.total_interest.arr, db_bch10.total_interest.len);
   memcpy(bch10_ptr->redemption_amount, db_bch10.redemption_amount.arr, db_bch10.redemption_amount.len);
   memcpy(bch10_ptr->vehicle_number, db_bch10.vehicle_number.arr, db_bch10.vehicle_number.len);
   memcpy(bch10_ptr->pos_entry_mode, db_bch10.pos_entry_mode.arr, db_bch10.pos_entry_mode.len);
   memcpy(bch10_ptr->profile, db_bch10.profile.arr, db_bch10.profile.len);
   memcpy(bch10_ptr->nbr_of_prod_codes, db_bch10.nbr_of_prod_codes.arr, db_bch10.nbr_of_prod_codes.len);
  
   memcpy(bch10_ptr->product_codes[0].code, db_bch10.product1_code.arr, db_bch10.product1_code.len);
   memcpy(bch10_ptr->product_codes[0].quantity, db_bch10.product1_quantity.arr, db_bch10.product1_quantity.len);
   memcpy(bch10_ptr->product_codes[0].amount, db_bch10.product1_amount.arr, db_bch10.product1_amount.len);   
   memcpy(bch10_ptr->product_codes[1].code, db_bch10.product2_code.arr, db_bch10.product2_code.len);
   memcpy(bch10_ptr->product_codes[1].quantity, db_bch10.product2_quantity.arr, db_bch10.product2_quantity.len);
   memcpy(bch10_ptr->product_codes[1].amount, db_bch10.product2_amount.arr, db_bch10.product2_amount.len);
   memcpy(bch10_ptr->product_codes[2].code, db_bch10.product3_code.arr, db_bch10.product3_code.len);
   memcpy(bch10_ptr->product_codes[2].quantity, db_bch10.product3_quantity.arr, db_bch10.product3_quantity.len);
   memcpy(bch10_ptr->product_codes[2].amount, db_bch10.product3_amount.arr, db_bch10.product3_amount.len);
   memcpy(bch10_ptr->product_codes[3].code, db_bch10.product4_code.arr, db_bch10.product4_code.len);
   memcpy(bch10_ptr->product_codes[3].quantity, db_bch10.product4_quantity.arr, db_bch10.product4_quantity.len);
   memcpy(bch10_ptr->product_codes[3].amount, db_bch10.product4_amount.arr, db_bch10.product4_amount.len);
   memcpy(bch10_ptr->product_codes[4].code, db_bch10.product5_code.arr, db_bch10.product5_code.len);
   memcpy(bch10_ptr->product_codes[4].quantity, db_bch10.product5_quantity.arr, db_bch10.product5_quantity.len);
   memcpy(bch10_ptr->product_codes[4].amount, db_bch10.product5_amount.arr, db_bch10.product5_amount.len);
   memcpy(bch10_ptr->product_codes[5].code, db_bch10.product6_code.arr, db_bch10.product6_code.len);
   memcpy(bch10_ptr->product_codes[5].quantity, db_bch10.product6_quantity.arr, db_bch10.product6_quantity.len);
   memcpy(bch10_ptr->product_codes[5].amount, db_bch10.product6_amount.arr, db_bch10.product6_amount.len);
   memcpy(bch10_ptr->product_codes[6].code, db_bch10.product7_code.arr, db_bch10.product7_code.len);
   memcpy(bch10_ptr->product_codes[6].quantity, db_bch10.product7_quantity.arr, db_bch10.product7_quantity.len);
   memcpy(bch10_ptr->product_codes[6].amount, db_bch10.product7_amount.arr, db_bch10.product7_amount.len);
   memcpy(bch10_ptr->product_codes[7].code, db_bch10.product8_code.arr, db_bch10.product8_code.len);
   memcpy(bch10_ptr->product_codes[7].quantity, db_bch10.product8_quantity.arr, db_bch10.product8_quantity.len);
   memcpy(bch10_ptr->product_codes[7].amount, db_bch10.product8_amount.arr, db_bch10.product8_amount.len);
   memcpy(bch10_ptr->product_codes[8].code, db_bch10.product9_code.arr, db_bch10.product9_code.len);
   memcpy(bch10_ptr->product_codes[8].quantity, db_bch10.product9_quantity.arr, db_bch10.product9_quantity.len);
   memcpy(bch10_ptr->product_codes[8].amount, db_bch10.product9_amount.arr, db_bch10.product9_amount.len);
   memcpy(bch10_ptr->product_codes[9].code, db_bch10.product10_code.arr, db_bch10.product10_code.len);
   memcpy(bch10_ptr->product_codes[9].quantity, db_bch10.product10_quantity.arr, db_bch10.product10_quantity.len);
   memcpy(bch10_ptr->product_codes[9].amount, db_bch10.product10_amount.arr, db_bch10.product10_amount.len);
   memcpy(bch10_ptr->product_codes[10].code, db_bch10.product11_code.arr, db_bch10.product11_code.len);
   memcpy(bch10_ptr->product_codes[10].quantity, db_bch10.product11_quantity.arr, db_bch10.product11_quantity.len);
   memcpy(bch10_ptr->product_codes[10].amount, db_bch10.product11_amount.arr, db_bch10.product11_amount.len);
   memcpy(bch10_ptr->product_codes[11].code, db_bch10.product12_code.arr, db_bch10.product12_code.len);
   memcpy(bch10_ptr->product_codes[11].quantity, db_bch10.product12_quantity.arr, db_bch10.product12_quantity.len);
   memcpy(bch10_ptr->product_codes[11].amount, db_bch10.product12_amount.arr, db_bch10.product12_amount.len);
   memcpy(bch10_ptr->product_codes[12].code, db_bch10.product13_code.arr, db_bch10.product13_code.len);
   memcpy(bch10_ptr->product_codes[12].quantity, db_bch10.product13_quantity.arr, db_bch10.product13_quantity.len);
   memcpy(bch10_ptr->product_codes[12].amount, db_bch10.product13_amount.arr, db_bch10.product13_amount.len);
   memcpy(bch10_ptr->product_codes[13].code, db_bch10.product14_code.arr, db_bch10.product14_code.len);
   memcpy(bch10_ptr->product_codes[13].quantity, db_bch10.product14_quantity.arr, db_bch10.product14_quantity.len);
   memcpy(bch10_ptr->product_codes[13].amount, db_bch10.product14_amount.arr, db_bch10.product14_amount.len);
   memcpy(bch10_ptr->product_codes[14].code, db_bch10.product15_code.arr, db_bch10.product15_code.len);
   memcpy(bch10_ptr->product_codes[14].quantity, db_bch10.product15_quantity.arr, db_bch10.product15_quantity.len);
   memcpy(bch10_ptr->product_codes[14].amount, db_bch10.product15_amount.arr, db_bch10.product15_amount.len);
   memcpy(bch10_ptr->product_codes[15].code, db_bch10.product16_code.arr, db_bch10.product16_code.len);
   memcpy(bch10_ptr->product_codes[15].quantity, db_bch10.product16_quantity.arr, db_bch10.product16_quantity.len);
   memcpy(bch10_ptr->product_codes[15].amount, db_bch10.product16_amount.arr, db_bch10.product16_amount.len);
   memcpy(bch10_ptr->product_codes[16].code, db_bch10.product17_code.arr, db_bch10.product17_code.len);
   memcpy(bch10_ptr->product_codes[16].quantity, db_bch10.product17_quantity.arr, db_bch10.product17_quantity.len);
   memcpy(bch10_ptr->product_codes[16].amount, db_bch10.product17_amount.arr, db_bch10.product17_amount.len);
   memcpy(bch10_ptr->product_codes[17].code, db_bch10.product18_code.arr, db_bch10.product18_code.len);
   memcpy(bch10_ptr->product_codes[17].quantity, db_bch10.product18_quantity.arr, db_bch10.product18_quantity.len);
   memcpy(bch10_ptr->product_codes[17].amount, db_bch10.product18_amount.arr, db_bch10.product18_amount.len);
   memcpy(bch10_ptr->product_codes[18].code, db_bch10.product19_code.arr, db_bch10.product19_code.len);
   memcpy(bch10_ptr->product_codes[18].quantity, db_bch10.product19_quantity.arr, db_bch10.product19_quantity.len);
   memcpy(bch10_ptr->product_codes[18].amount, db_bch10.product19_amount.arr, db_bch10.product19_amount.len);
   memcpy(bch10_ptr->product_codes[19].code, db_bch10.product20_code.arr, db_bch10.product20_code.len);
   memcpy(bch10_ptr->product_codes[19].quantity, db_bch10.product20_quantity.arr, db_bch10.product20_quantity.len);
   memcpy(bch10_ptr->product_codes[19].amount, db_bch10.product20_amount.arr, db_bch10.product20_amount.len);

   memcpy(bch10_ptr->aportionment_flag, db_bch10.aportionment_flag.arr, db_bch10.aportionment_flag.len);
   memcpy(bch10_ptr->exp_date, db_bch10.exp_date.arr, db_bch10.exp_date.len);
   memcpy(bch10_ptr->open_date, db_bch10.open_date.arr, db_bch10.open_date.len);
   memcpy(bch10_ptr->open_time, db_bch10.open_time.arr, db_bch10.open_time.len);
   memcpy(bch10_ptr->cash_bonus, db_bch10.cash_bonus.arr, db_bch10.cash_bonus.len);

/* The following 2 lines have been added by SDG */
	memcpy(bch10_ptr->transmission_timestamp, db_bch10.transmission_timestamp.arr, db_bch10.transmission_timestamp.len);
	memcpy(bch10_ptr->mcard_banknet, db_bch10.mcard_banknet.arr, db_bch10.mcard_banknet.len);
	memcpy(bch10_ptr->ticket_nbr, db_bch10.ticket_nbr.arr, db_bch10.ticket_nbr.len);
	memcpy(bch10_ptr->def_gross_amt, db_bch10.def_gross_amt.arr, db_bch10.def_gross_amt.len);
	memcpy(bch10_ptr->term, db_bch10.term.arr, db_bch10.term.len);

}

void db_to_bch20 ( pBCH20 bch20_ptr)
{
   memset(bch20_ptr, 0, sizeof(BCH20));
   memcpy(bch20_ptr->primary_key.device_id, db_bch20.device_id.arr, db_bch20.device_id.len);
   memcpy(bch20_ptr->primary_key.batch_nbr, db_bch20.batch_nbr.arr, db_bch20.batch_nbr.len);
   memcpy(bch20_ptr->primary_key.retrieval_ref_num, db_bch20.retrieval_ref_num.arr, db_bch20.retrieval_ref_num.len);
   memcpy(bch20_ptr->merchant_id, db_bch20.merchant_id.arr, db_bch20.merchant_id.len);
   memcpy(bch20_ptr->processing_code, db_bch20.processing_code.arr, db_bch20.processing_code.len);
   memcpy(bch20_ptr->tran_amount, db_bch20.tran_amount.arr, db_bch20.tran_amount.len);
   memcpy(bch20_ptr->response_code, db_bch20.response_code.arr, db_bch20.response_code.len);
   memcpy(bch20_ptr->auth_number, db_bch20.auth_number.arr, db_bch20.auth_number.len);
   memcpy(bch20_ptr->tran_date, db_bch20.tran_date.arr, db_bch20.tran_date.len);
   memcpy(bch20_ptr->tran_time, db_bch20.tran_time.arr, db_bch20.tran_time.len);
   memcpy(bch20_ptr->transaction_id, db_bch20.transaction_id.arr, db_bch20.transaction_id.len);
   memcpy(bch20_ptr->message_type, db_bch20.message_type.arr, db_bch20.message_type.len);
   memcpy(bch20_ptr->card_nbr, db_bch20.card_nbr.arr, db_bch20.card_nbr.len);
   memcpy(bch20_ptr->invoice_nbr, db_bch20.invoice_nbr.arr, db_bch20.invoice_nbr.len);
   memcpy(bch20_ptr->settle_file_prefix, db_bch20.settle_file_prefix.arr, db_bch20.settle_file_prefix.len);
   memcpy(bch20_ptr->product_code, db_bch20.product_code.arr, db_bch20.product_code.len);
   memcpy(bch20_ptr->odometer, db_bch20.odometer.arr, db_bch20.odometer.len);
   memcpy(bch20_ptr->sys_trace_audit_num, db_bch20.sys_trace_audit_num.arr, db_bch20.sys_trace_audit_num.len);
   bch20_ptr->tx_key = db_bch20.tx_key.arr[0];
   bch20_ptr->bin_type = db_bch20.bin_type.arr[0];

   memcpy(bch20_ptr->type_of_data, db_bch20.type_of_data.arr, db_bch20.type_of_data.len);
   memcpy(bch20_ptr->down_payment, db_bch20.down_payment.arr, db_bch20.down_payment.len);
   memcpy(bch20_ptr->period, db_bch20.period.arr, db_bch20.period.len);
   memcpy(bch20_ptr->interest_rate, db_bch20.interest_rate.arr, db_bch20.interest_rate.len);
   memcpy(bch20_ptr->total_interest, db_bch20.total_interest.arr, db_bch20.total_interest.len);
   memcpy(bch20_ptr->redemption_amount, db_bch20.redemption_amount.arr, db_bch20.redemption_amount.len);
   memcpy(bch20_ptr->vehicle_number, db_bch20.vehicle_number.arr, db_bch20.vehicle_number.len);
   memcpy(bch20_ptr->pos_entry_mode, db_bch20.pos_entry_mode.arr, db_bch20.pos_entry_mode.len);
   memcpy(bch20_ptr->profile, db_bch20.profile.arr, db_bch20.profile.len);
   
   memcpy(bch20_ptr->aportionment_flag, db_bch20.aportionment_flag.arr, db_bch20.aportionment_flag.len);
   memcpy(bch20_ptr->exp_date, db_bch20.exp_date.arr, db_bch20.exp_date.len);
   memcpy(bch20_ptr->open_date, db_bch20.open_date.arr, db_bch20.open_date.len);
   memcpy(bch20_ptr->open_time, db_bch20.open_time.arr, db_bch20.open_time.len);
   memcpy(bch20_ptr->cash_bonus, db_bch20.cash_bonus.arr, db_bch20.cash_bonus.len);
   memcpy(bch20_ptr->processed, db_bch20.processed.arr, db_bch20.processed.len);

   /* The following 2 lines have been added by SDG */
	memcpy(bch20_ptr->transmission_timestamp, db_bch20.transmission_timestamp.arr, db_bch20.transmission_timestamp.len);
	memcpy(bch20_ptr->mcard_banknet, db_bch20.mcard_banknet.arr, db_bch20.mcard_banknet.len);
	memcpy(bch20_ptr->ticket_nbr, db_bch20.ticket_nbr.arr, db_bch20.ticket_nbr.len);
	memcpy(bch20_ptr->def_gross_amt, db_bch20.def_gross_amt.arr, db_bch20.def_gross_amt.len);
	memcpy(bch20_ptr->term, db_bch20.term.arr, db_bch20.term.len);
	memcpy(bch20_ptr->product_codes[0].code, db_bch20.product1_code.arr, db_bch20.product1_code.len);
    memcpy(bch20_ptr->product_codes[1].code, db_bch20.product2_code.arr, db_bch20.product2_code.len);
    memcpy(bch20_ptr->product_codes[19].code, db_bch20.product20_code.arr, db_bch20.product20_code.len);
    memcpy(bch20_ptr->product_codes[16].amount, db_bch20.product17_amount.arr, db_bch20.product17_amount.len);
    memcpy(bch20_ptr->product_codes[13].code, db_bch20.product14_code.arr, db_bch20.product14_code.len);
    memcpy(bch20_ptr->product_codes[13].quantity, db_bch20.product14_quantity.arr, db_bch20.product14_quantity.len);
    memcpy(bch20_ptr->product_codes[13].amount, db_bch20.product14_amount.arr, db_bch20.product14_amount.len);
    memcpy(bch20_ptr->product_codes[6].amount, db_bch20.product7_amount.arr, db_bch20.product7_amount.len);
    memcpy(bch20_ptr->product_codes[5].code, db_bch20.product6_code.arr, db_bch20.product6_code.len);
    memcpy(bch20_ptr->product_codes[12].amount, db_bch20.product13_amount.arr, db_bch20.product13_amount.len);
    memcpy(bch20_ptr->product_codes[10].amount, db_bch20.product11_amount.arr, db_bch20.product11_amount.len);//MC02_APR2024
    memcpy(bch20_ptr->product_codes[1].amount, db_bch20.product2_amount.arr, db_bch20.product2_amount.len);
    memcpy(bch20_ptr->product_codes[4].code, db_bch20.product5_code.arr, db_bch20.product5_code.len);
    memcpy(bch20_ptr->product_codes[4].amount, db_bch20.product5_amount.arr, db_bch20.product5_amount.len);
    memcpy(bch20_ptr->product_codes[4].quantity, db_bch20.product5_quantity.arr, db_bch20.product5_quantity.len);
    memcpy(bch20_ptr->product_codes[5].quantity, db_bch20.product6_quantity.arr, db_bch20.product6_quantity.len);
    memcpy(bch20_ptr->product_codes[8].code, db_bch20.product9_code.arr, db_bch20.product9_code.len);
    memcpy(bch20_ptr->product_codes[7].code, db_bch20.product8_code.arr, db_bch20.product8_code.len);
}

/*************************************************************************************/
/*************************************************************************************/
void db_to_bch11 ( pBCH11 bch11_ptr)
{
   memset(bch11_ptr, 0, sizeof(BCH11));
   memcpy(bch11_ptr->primary_key.device_id, db_bch11.device_id.arr, db_bch11.device_id.len);
   memcpy(bch11_ptr->primary_key.batch_nbr, db_bch11.batch_nbr.arr, db_bch11.batch_nbr.len);
   memcpy(bch11_ptr->primary_key.retrieval_ref_num, db_bch11.retrieval_ref_num.arr, db_bch11.retrieval_ref_num.len);
   memcpy(bch11_ptr->merchant_id, db_bch11.merchant_id.arr, db_bch11.merchant_id.len);
   memcpy(bch11_ptr->processing_code, db_bch11.processing_code.arr, db_bch11.processing_code.len);
   memcpy(bch11_ptr->tran_amount, db_bch11.tran_amount.arr, db_bch11.tran_amount.len);
   memcpy(bch11_ptr->response_code, db_bch11.response_code.arr, db_bch11.response_code.len);
   memcpy(bch11_ptr->auth_number, db_bch11.auth_number.arr, db_bch11.auth_number.len);
   memcpy(bch11_ptr->tran_date, db_bch11.tran_date.arr, db_bch11.tran_date.len);
   memcpy(bch11_ptr->tran_time, db_bch11.tran_time.arr, db_bch11.tran_time.len);
   memcpy(bch11_ptr->transaction_id, db_bch11.transaction_id.arr, db_bch11.transaction_id.len);
   memcpy(bch11_ptr->message_type, db_bch11.message_type.arr, db_bch11.message_type.len);
   memcpy(bch11_ptr->card_nbr, db_bch11.card_nbr.arr, db_bch11.card_nbr.len);
   memcpy(bch11_ptr->invoice_nbr, db_bch11.invoice_nbr.arr, db_bch11.invoice_nbr.len);
   memcpy(bch11_ptr->settle_file_prefix, db_bch11.settle_file_prefix.arr, db_bch11.settle_file_prefix.len);
   memcpy(bch11_ptr->product_code, db_bch11.product_code.arr, db_bch11.product_code.len);
   memcpy(bch11_ptr->odometer, db_bch11.odometer.arr, db_bch11.odometer.len);
   memcpy(bch11_ptr->sys_trace_audit_num, db_bch11.sys_trace_audit_num.arr, db_bch11.sys_trace_audit_num.len);
   bch11_ptr->tx_key = db_bch11.tx_key.arr[0];
   bch11_ptr->bin_type = db_bch11.bin_type.arr[0];

   memcpy(bch11_ptr->type_of_data, db_bch11.type_of_data.arr, db_bch11.type_of_data.len);
   memcpy(bch11_ptr->down_payment, db_bch11.down_payment.arr, db_bch11.down_payment.len);
   memcpy(bch11_ptr->period, db_bch11.period.arr, db_bch11.period.len);
   memcpy(bch11_ptr->interest_rate, db_bch11.interest_rate.arr, db_bch11.interest_rate.len);
   memcpy(bch11_ptr->total_interest, db_bch11.total_interest.arr, db_bch11.total_interest.len);
   memcpy(bch11_ptr->redemption_amount, db_bch11.redemption_amount.arr, db_bch11.redemption_amount.len);
   memcpy(bch11_ptr->vehicle_number, db_bch11.vehicle_number.arr, db_bch11.vehicle_number.len);
   memcpy(bch11_ptr->pos_entry_mode, db_bch11.pos_entry_mode.arr, db_bch11.pos_entry_mode.len);
   memcpy(bch11_ptr->profile, db_bch11.profile.arr, db_bch11.profile.len);
   memcpy(bch11_ptr->nbr_of_prod_codes, db_bch11.nbr_of_prod_codes.arr, db_bch11.nbr_of_prod_codes.len);
  
   memcpy(bch11_ptr->product_codes[0].code, db_bch11.product1_code.arr, db_bch11.product1_code.len);
   memcpy(bch11_ptr->product_codes[0].quantity, db_bch11.product1_quantity.arr, db_bch11.product1_quantity.len);
   memcpy(bch11_ptr->product_codes[0].amount, db_bch11.product1_amount.arr, db_bch11.product1_amount.len);   
   memcpy(bch11_ptr->product_codes[1].code, db_bch11.product2_code.arr, db_bch11.product2_code.len);
   memcpy(bch11_ptr->product_codes[1].quantity, db_bch11.product2_quantity.arr, db_bch11.product2_quantity.len);
   memcpy(bch11_ptr->product_codes[1].amount, db_bch11.product2_amount.arr, db_bch11.product2_amount.len);
   memcpy(bch11_ptr->product_codes[2].code, db_bch11.product3_code.arr, db_bch11.product3_code.len);
   memcpy(bch11_ptr->product_codes[2].quantity, db_bch11.product3_quantity.arr, db_bch11.product3_quantity.len);
   memcpy(bch11_ptr->product_codes[2].amount, db_bch11.product3_amount.arr, db_bch11.product3_amount.len);
   memcpy(bch11_ptr->product_codes[3].code, db_bch11.product4_code.arr, db_bch11.product4_code.len);
   memcpy(bch11_ptr->product_codes[3].quantity, db_bch11.product4_quantity.arr, db_bch11.product4_quantity.len);
   memcpy(bch11_ptr->product_codes[3].amount, db_bch11.product4_amount.arr, db_bch11.product4_amount.len);
   memcpy(bch11_ptr->product_codes[4].code, db_bch11.product5_code.arr, db_bch11.product5_code.len);
   memcpy(bch11_ptr->product_codes[4].quantity, db_bch11.product5_quantity.arr, db_bch11.product5_quantity.len);
   memcpy(bch11_ptr->product_codes[4].amount, db_bch11.product5_amount.arr, db_bch11.product5_amount.len);
   memcpy(bch11_ptr->product_codes[5].code, db_bch11.product6_code.arr, db_bch11.product6_code.len);
   memcpy(bch11_ptr->product_codes[5].quantity, db_bch11.product6_quantity.arr, db_bch11.product6_quantity.len);
   memcpy(bch11_ptr->product_codes[5].amount, db_bch11.product6_amount.arr, db_bch11.product6_amount.len);
   memcpy(bch11_ptr->product_codes[6].code, db_bch11.product7_code.arr, db_bch11.product7_code.len);
   memcpy(bch11_ptr->product_codes[6].quantity, db_bch11.product7_quantity.arr, db_bch11.product7_quantity.len);
   memcpy(bch11_ptr->product_codes[6].amount, db_bch11.product7_amount.arr, db_bch11.product7_amount.len);
   memcpy(bch11_ptr->product_codes[7].code, db_bch11.product8_code.arr, db_bch11.product8_code.len);
   memcpy(bch11_ptr->product_codes[7].quantity, db_bch11.product8_quantity.arr, db_bch11.product8_quantity.len);
   memcpy(bch11_ptr->product_codes[7].amount, db_bch11.product8_amount.arr, db_bch11.product8_amount.len);
   memcpy(bch11_ptr->product_codes[8].code, db_bch11.product9_code.arr, db_bch11.product9_code.len);
   memcpy(bch11_ptr->product_codes[8].quantity, db_bch11.product9_quantity.arr, db_bch11.product9_quantity.len);
   memcpy(bch11_ptr->product_codes[8].amount, db_bch11.product9_amount.arr, db_bch11.product9_amount.len);
   memcpy(bch11_ptr->product_codes[9].code, db_bch11.product10_code.arr, db_bch11.product10_code.len);
   memcpy(bch11_ptr->product_codes[9].quantity, db_bch11.product10_quantity.arr, db_bch11.product10_quantity.len);
   memcpy(bch11_ptr->product_codes[9].amount, db_bch11.product10_amount.arr, db_bch11.product10_amount.len);
   memcpy(bch11_ptr->product_codes[10].code, db_bch11.product11_code.arr, db_bch11.product11_code.len);
   memcpy(bch11_ptr->product_codes[10].quantity, db_bch11.product11_quantity.arr, db_bch11.product11_quantity.len);
   memcpy(bch11_ptr->product_codes[10].amount, db_bch11.product11_amount.arr, db_bch11.product11_amount.len);
   memcpy(bch11_ptr->product_codes[11].code, db_bch11.product12_code.arr, db_bch11.product12_code.len);
   memcpy(bch11_ptr->product_codes[11].quantity, db_bch11.product12_quantity.arr, db_bch11.product12_quantity.len);
   memcpy(bch11_ptr->product_codes[11].amount, db_bch11.product12_amount.arr, db_bch11.product12_amount.len);
   memcpy(bch11_ptr->product_codes[12].code, db_bch11.product13_code.arr, db_bch11.product13_code.len);
   memcpy(bch11_ptr->product_codes[12].quantity, db_bch11.product13_quantity.arr, db_bch11.product13_quantity.len);
   memcpy(bch11_ptr->product_codes[12].amount, db_bch11.product13_amount.arr, db_bch11.product13_amount.len);
   memcpy(bch11_ptr->product_codes[13].code, db_bch11.product14_code.arr, db_bch11.product14_code.len);
   memcpy(bch11_ptr->product_codes[13].quantity, db_bch11.product14_quantity.arr, db_bch11.product14_quantity.len);
   memcpy(bch11_ptr->product_codes[13].amount, db_bch11.product14_amount.arr, db_bch11.product14_amount.len);
   memcpy(bch11_ptr->product_codes[14].code, db_bch11.product15_code.arr, db_bch11.product15_code.len);
   memcpy(bch11_ptr->product_codes[14].quantity, db_bch11.product15_quantity.arr, db_bch11.product15_quantity.len);
   memcpy(bch11_ptr->product_codes[14].amount, db_bch11.product15_amount.arr, db_bch11.product15_amount.len);
   memcpy(bch11_ptr->product_codes[15].code, db_bch11.product16_code.arr, db_bch11.product16_code.len);
   memcpy(bch11_ptr->product_codes[15].quantity, db_bch11.product16_quantity.arr, db_bch11.product16_quantity.len);
   memcpy(bch11_ptr->product_codes[15].amount, db_bch11.product16_amount.arr, db_bch11.product16_amount.len);
   memcpy(bch11_ptr->product_codes[16].code, db_bch11.product17_code.arr, db_bch11.product17_code.len);
   memcpy(bch11_ptr->product_codes[16].quantity, db_bch11.product17_quantity.arr, db_bch11.product17_quantity.len);
   memcpy(bch11_ptr->product_codes[16].amount, db_bch11.product17_amount.arr, db_bch11.product17_amount.len);
   memcpy(bch11_ptr->product_codes[17].code, db_bch11.product18_code.arr, db_bch11.product18_code.len);
   memcpy(bch11_ptr->product_codes[17].quantity, db_bch11.product18_quantity.arr, db_bch11.product18_quantity.len);
   memcpy(bch11_ptr->product_codes[17].amount, db_bch11.product18_amount.arr, db_bch11.product18_amount.len);
   memcpy(bch11_ptr->product_codes[18].code, db_bch11.product19_code.arr, db_bch11.product19_code.len);
   memcpy(bch11_ptr->product_codes[18].quantity, db_bch11.product19_quantity.arr, db_bch11.product19_quantity.len);
   memcpy(bch11_ptr->product_codes[18].amount, db_bch11.product19_amount.arr, db_bch11.product19_amount.len);
   memcpy(bch11_ptr->product_codes[19].code, db_bch11.product20_code.arr, db_bch11.product20_code.len);
   memcpy(bch11_ptr->product_codes[19].quantity, db_bch11.product20_quantity.arr, db_bch11.product20_quantity.len);
   memcpy(bch11_ptr->product_codes[19].amount, db_bch11.product20_amount.arr, db_bch11.product20_amount.len);

   memcpy(bch11_ptr->aportionment_flag, db_bch11.aportionment_flag.arr, db_bch11.aportionment_flag.len);
   memcpy(bch11_ptr->exp_date, db_bch11.exp_date.arr, db_bch11.exp_date.len);
   memcpy(bch11_ptr->open_date, db_bch11.open_date.arr, db_bch11.open_date.len);
   memcpy(bch11_ptr->open_time, db_bch11.open_time.arr, db_bch11.open_time.len);
   memcpy(bch11_ptr->cash_bonus, db_bch11.cash_bonus.arr, db_bch11.cash_bonus.len);

   /* The following 2 lines have been added by SDG */
	memcpy(bch11_ptr->transmission_timestamp, db_bch11.transmission_timestamp.arr, db_bch11.transmission_timestamp.len);
	memcpy(bch11_ptr->mcard_banknet, db_bch11.mcard_banknet.arr, db_bch11.mcard_banknet.len);
	memcpy(bch11_ptr->ticket_nbr, db_bch11.ticket_nbr.arr, db_bch11.ticket_nbr.len);
	memcpy(bch11_ptr->def_gross_amt, db_bch11.def_gross_amt.arr, db_bch11.def_gross_amt.len);
	memcpy(bch11_ptr->term, db_bch11.term.arr, db_bch11.term.len);
  

}

/*************************************************************************************/
/*************************************************************************************/
void db_to_dcf01 ( pDCF01 dcf01_ptr )
{
   memset(dcf01_ptr, 0, sizeof(DCF01));
   memcpy(dcf01_ptr->primary_key.device_id, db_dcf01.device_id.arr, db_dcf01.device_id.len);
   memcpy(dcf01_ptr->short_name, db_dcf01.short_name.arr, db_dcf01.short_name.len);
   memcpy(dcf01_ptr->phone, db_dcf01.phone.arr, db_dcf01.phone.len);
   memcpy(dcf01_ptr->industry_code, db_dcf01.industry_code.arr, db_dcf01.industry_code.len);
   memcpy(dcf01_ptr->category_code, db_dcf01.category_code.arr, db_dcf01.category_code.len);
   memcpy(dcf01_ptr->contact, db_dcf01.contact.arr, db_dcf01.contact.len);
   memcpy(dcf01_ptr->device_type, db_dcf01.device_type.arr, db_dcf01.device_type.len);
   memcpy(dcf01_ptr->date_added, db_dcf01.date_added.arr, db_dcf01.date_added.len);
   memcpy(dcf01_ptr->current_bus_date, db_dcf01.current_bus_date.arr, db_dcf01.current_bus_date.len);
   memcpy(dcf01_ptr->dept_nbr, db_dcf01.dept_nbr.arr, db_dcf01.dept_nbr.len);
   memcpy(dcf01_ptr->organization_id, db_dcf01.organization_id.arr, db_dcf01.organization_id.len);
   memcpy(dcf01_ptr->merchant_id, db_dcf01.merchant_id.arr, db_dcf01.merchant_id.len);
   memcpy(dcf01_ptr->aba_nbr, db_dcf01.aba_nbr.arr, db_dcf01.aba_nbr.len);
   memcpy(dcf01_ptr->status, db_dcf01.status.arr, db_dcf01.status.len);
   memcpy(dcf01_ptr->totals_ind, db_dcf01.totals_ind.arr, db_dcf01.totals_ind.len);
   memcpy(dcf01_ptr->statistics_ind, db_dcf01.statistics_ind.arr, db_dcf01.statistics_ind.len);
   memcpy(dcf01_ptr->valid_transactions, db_dcf01.valid_transactions.arr, db_dcf01.valid_transactions.len);
   memcpy(dcf01_ptr->draft_capture_type, db_dcf01.draft_capture_type.arr, db_dcf01.draft_capture_type.len);
   memcpy(dcf01_ptr->amex_charge_desc, db_dcf01.amex_charge_desc.arr, db_dcf01.amex_charge_desc.len);
   memcpy(dcf01_ptr->diners_charge_desc, db_dcf01.diners_charge_desc.arr, db_dcf01.diners_charge_desc.len);
   memcpy(dcf01_ptr->additional_pos_information, db_dcf01.additional_pos_information.arr, db_dcf01.additional_pos_information.len);
   memcpy(dcf01_ptr->batch_nbr, db_dcf01.batch_nbr.arr, db_dcf01.batch_nbr.len);
   memcpy(dcf01_ptr->rental_program, db_dcf01.rental_program.arr, db_dcf01.rental_program.len);
   memcpy(dcf01_ptr->nsp_process, db_dcf01.nsp_process.arr, db_dcf01.nsp_process.len);
   memcpy(dcf01_ptr->pin_type, db_dcf01.pin_type.arr, db_dcf01.pin_type.len);
   memcpy(dcf01_ptr->kc, db_dcf01.kc.arr, db_dcf01.kc.len);
   memcpy(dcf01_ptr->encr_type, db_dcf01.encr_type.arr, db_dcf01.encr_type.len);
   memcpy(dcf01_ptr->pad_char, db_dcf01.pad_char.arr, db_dcf01.pad_char.len);
   memcpy(dcf01_ptr->keyxchange_cnt, db_dcf01.keyxchange_cnt.arr, db_dcf01.keyxchange_cnt.len);
   memcpy(dcf01_ptr->txn_cnt, db_dcf01.txn_cnt.arr, db_dcf01.txn_cnt.len);
   memcpy(dcf01_ptr->cwk, db_dcf01.cwk.arr, db_dcf01.cwk.len);
   memcpy(dcf01_ptr->kek, db_dcf01.kek.arr, db_dcf01.kek.len);
   memcpy(dcf01_ptr->retired_cwk, db_dcf01.retired_cwk.arr, db_dcf01.retired_cwk.len);
   memcpy(dcf01_ptr->icv, db_dcf01.icv.arr, db_dcf01.icv.len);

   memcpy(dcf01_ptr->pin_block_format, db_dcf01.pin_block_format.arr, db_dcf01.pin_block_format.len);                                
   memcpy(dcf01_ptr->encryption_method, db_dcf01.encryption_method.arr, db_dcf01.encryption_method.len);
   memcpy(dcf01_ptr->pin_key, db_dcf01.pin_key.arr, db_dcf01.pin_key.len);
   memcpy(dcf01_ptr->communication_key, db_dcf01.communication_key.arr, db_dcf01.communication_key.len);       

   /* Auto Init Fields */
   memcpy(dcf01_ptr->auto_init_activation,         db_dcf01.auto_init_activation.arr,         db_dcf01.auto_init_activation.len);
   memcpy(dcf01_ptr->auto_init_time,               db_dcf01.auto_init_time.arr,               db_dcf01.auto_init_time.len);
   memcpy(dcf01_ptr->auto_init_ref_number,         db_dcf01.auto_init_ref_number.arr,         db_dcf01.auto_init_ref_number.len);
   memcpy(dcf01_ptr->auto_program_load_activation, db_dcf01.auto_program_load_activation.arr, db_dcf01.auto_program_load_activation.len);
   memcpy(dcf01_ptr->auto_program_load_time,       db_dcf01.auto_program_load_time.arr,       db_dcf01.auto_program_load_time.len);
   memcpy(dcf01_ptr->auto_program_load_ref_number, db_dcf01.auto_program_load_ref_number.arr, db_dcf01.auto_program_load_ref_number.len);
   memcpy(dcf01_ptr->auto_icepac_activation,       db_dcf01.auto_icepac_activation.arr,       db_dcf01.auto_icepac_activation.len);
   /* End Auto Init Fields */
}
/*************************************************************************************/

/*************************************************************************************/
 void db_to_mgf01(pMGF01 mgf01_ptr)
  {
	 memset(mgf01_ptr, 0, sizeof(MGF01));
	 memcpy(mgf01_ptr->primary_key.merchant_group_id, db_mgf01.merchant_group_id.arr, db_mgf01.merchant_group_id.len);
	 memcpy(mgf01_ptr->effective_date, db_mgf01.effective_date.arr, db_mgf01.effective_date.len);
	 
	 memcpy(mgf01_ptr->merchgrp[0].Amount_limit,                    db_mgf01.merchgrp_Amount_limit_1.arr,                db_mgf01.merchgrp_Amount_limit_1.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[0].nbr_of_months,   db_mgf01.merchgrepint_nbr_of_months_1.arr,	 db_mgf01.merchgrepint_nbr_of_months_1.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[0].INT_rate,  	    db_mgf01.merchgrepint_INT_rate_1.arr,       db_mgf01.merchgrepint_INT_rate_1.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[0].MSF_rate,        db_mgf01.merchgrepint_MSF_rate_1.arr,       db_mgf01.merchgrepint_MSF_rate_1.len);
	  
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[1].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_2.arr,  db_mgf01.merchgrepint_nbr_of_months_2.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[1].INT_rate,        db_mgf01.merchgrepint_INT_rate_2.arr,       db_mgf01.merchgrepint_INT_rate_2.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[1].MSF_rate,        db_mgf01.merchgrepint_MSF_rate_2.arr,       db_mgf01.merchgrepint_MSF_rate_2.len);
	  
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[2].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_3.arr,  db_mgf01.merchgrepint_nbr_of_months_3.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[2].INT_rate,        db_mgf01.merchgrepint_INT_rate_3.arr,       db_mgf01.merchgrepint_INT_rate_3.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[2].MSF_rate,        db_mgf01.merchgrepint_MSF_rate_3.arr,       db_mgf01.merchgrepint_MSF_rate_3.len);
	  
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[3].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_4.arr,  db_mgf01.merchgrepint_nbr_of_months_4.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[3].INT_rate,        db_mgf01.merchgrepint_INT_rate_4.arr,       db_mgf01.merchgrepint_INT_rate_4.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[3].MSF_rate,        db_mgf01.merchgrepint_MSF_rate_4.arr,       db_mgf01.merchgrepint_MSF_rate_4.len);
	 
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[4].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_5.arr,  db_mgf01.merchgrepint_nbr_of_months_5.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[4].INT_rate,        db_mgf01.merchgrepint_INT_rate_5.arr,       db_mgf01.merchgrepint_INT_rate_5.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[4].MSF_rate,        db_mgf01.merchgrepint_MSF_rate_5.arr,       db_mgf01.merchgrepint_MSF_rate_5.len);
	 
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[5].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_6.arr,  db_mgf01.merchgrepint_nbr_of_months_6.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[5].INT_rate,        db_mgf01.merchgrepint_INT_rate_6.arr,       db_mgf01.merchgrepint_INT_rate_6.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[5].MSF_rate,        db_mgf01.merchgrepint_MSF_rate_6.arr,       db_mgf01.merchgrepint_MSF_rate_6.len);
	 
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[6].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_7.arr,  db_mgf01.merchgrepint_nbr_of_months_7.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[6].INT_rate,        db_mgf01.merchgrepint_INT_rate_7.arr,       db_mgf01.merchgrepint_INT_rate_7.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[6].MSF_rate,        db_mgf01.merchgrepint_MSF_rate_7.arr,       db_mgf01.merchgrepint_MSF_rate_7.len);
	 
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[7].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_8.arr,  db_mgf01.merchgrepint_nbr_of_months_8.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[7].INT_rate,        db_mgf01.merchgrepint_INT_rate_8.arr,       db_mgf01.merchgrepint_INT_rate_8.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[7].MSF_rate,        db_mgf01.merchgrepint_MSF_rate_8.arr,       db_mgf01.merchgrepint_MSF_rate_8.len);
	 
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[8].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_9.arr,  db_mgf01.merchgrepint_nbr_of_months_8.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[8].INT_rate,        db_mgf01.merchgrepint_INT_rate_9.arr,       db_mgf01.merchgrepint_INT_rate_9.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[8].MSF_rate,        db_mgf01.merchgrepint_MSF_rate_9.arr,       db_mgf01.merchgrepint_MSF_rate_9.len);
	 
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[9].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_10.arr, db_mgf01.merchgrepint_nbr_of_months_10.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[9].INT_rate,        db_mgf01.merchgrepint_INT_rate_10.arr,      db_mgf01.merchgrepint_INT_rate_10.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[9].MSF_rate,        db_mgf01.merchgrepint_MSF_rate_10.arr,      db_mgf01.merchgrepint_MSF_rate_10.len);

	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[10].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_10A.arr, db_mgf01.merchgrepint_nbr_of_months_10A.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[10].INT_rate,		db_mgf01.merchgrepint_INT_rate_10A.arr, 	 db_mgf01.merchgrepint_INT_rate_10A.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[10].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_10A.arr, 	 db_mgf01.merchgrepint_MSF_rate_10A.len);

	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[11].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_10B.arr, db_mgf01.merchgrepint_nbr_of_months_10B.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[11].INT_rate,       db_mgf01.merchgrepint_INT_rate_10B.arr,      db_mgf01.merchgrepint_INT_rate_10B.len);
	 memcpy(mgf01_ptr->merchgrp[0].merchgrepint[11].MSF_rate,       db_mgf01.merchgrepint_MSF_rate_10B.arr,      db_mgf01.merchgrepint_MSF_rate_10B.len);
	
	 memcpy(mgf01_ptr->merchgrp[1].Amount_limit,                    db_mgf01.merchgrp_Amount_limit_2.arr,                db_mgf01.merchgrp_Amount_limit_2.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[0].nbr_of_months,   db_mgf01.merchgrepint_nbr_of_months_11.arr, db_mgf01.merchgrepint_nbr_of_months_11.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[0].INT_rate,		db_mgf01.merchgrepint_INT_rate_11.arr,		 db_mgf01.merchgrepint_INT_rate_11.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[0].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_11.arr,		 db_mgf01.merchgrepint_MSF_rate_11.len);
		   
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[1].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_12.arr, db_mgf01.merchgrepint_nbr_of_months_12.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[1].INT_rate,		db_mgf01.merchgrepint_INT_rate_12.arr, 	 db_mgf01.merchgrepint_INT_rate_12.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[1].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_12.arr, 	 db_mgf01.merchgrepint_MSF_rate_12.len);
	  
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[2].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_13.arr, db_mgf01.merchgrepint_nbr_of_months_13.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[2].INT_rate,		db_mgf01.merchgrepint_INT_rate_13.arr, 	 db_mgf01.merchgrepint_INT_rate_13.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[2].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_13.arr, 	 db_mgf01.merchgrepint_MSF_rate_13.len);
		   
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[3].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_14.arr, db_mgf01.merchgrepint_nbr_of_months_14.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[3].INT_rate,		db_mgf01.merchgrepint_INT_rate_14.arr, 	 db_mgf01.merchgrepint_INT_rate_14.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[3].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_14.arr, 	 db_mgf01.merchgrepint_MSF_rate_14.len);
		  
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[4].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_15.arr, db_mgf01.merchgrepint_nbr_of_months_15.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[4].INT_rate,		db_mgf01.merchgrepint_INT_rate_15.arr, 	 db_mgf01.merchgrepint_INT_rate_15.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[4].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_15.arr, 	 db_mgf01.merchgrepint_MSF_rate_15.len);
		  
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[5].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_16.arr, db_mgf01.merchgrepint_nbr_of_months_16.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[5].INT_rate,		db_mgf01.merchgrepint_INT_rate_16.arr, 	 db_mgf01.merchgrepint_INT_rate_16.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[5].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_16.arr, 	 db_mgf01.merchgrepint_MSF_rate_16.len);
		  
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[6].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_17.arr, db_mgf01.merchgrepint_nbr_of_months_17.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[6].INT_rate,		db_mgf01.merchgrepint_INT_rate_17.arr, 	 db_mgf01.merchgrepint_INT_rate_17.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[6].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_17.arr, 	 db_mgf01.merchgrepint_MSF_rate_17.len);
		  
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[7].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_18.arr, db_mgf01.merchgrepint_nbr_of_months_18.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[7].INT_rate,		db_mgf01.merchgrepint_INT_rate_18.arr, 	 db_mgf01.merchgrepint_INT_rate_18.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[7].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_18.arr, 	 db_mgf01.merchgrepint_MSF_rate_18.len);
		  
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[8].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_19.arr, db_mgf01.merchgrepint_nbr_of_months_19.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[8].INT_rate,		db_mgf01.merchgrepint_INT_rate_19.arr, 	 db_mgf01.merchgrepint_INT_rate_19.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[8].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_19.arr, 	 db_mgf01.merchgrepint_MSF_rate_19.len);
		  
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[9].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_20.arr, db_mgf01.merchgrepint_nbr_of_months_20.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[9].INT_rate,		db_mgf01.merchgrepint_INT_rate_20.arr,      db_mgf01.merchgrepint_INT_rate_20.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[9].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_20.arr,      db_mgf01.merchgrepint_MSF_rate_20.len);

	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[10].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_20A.arr, db_mgf01.merchgrepint_nbr_of_months_20A.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[10].INT_rate,		db_mgf01.merchgrepint_INT_rate_20A.arr,      db_mgf01.merchgrepint_INT_rate_20A.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[10].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_20A.arr,      db_mgf01.merchgrepint_MSF_rate_20A.len);

	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[11].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_20B.arr, db_mgf01.merchgrepint_nbr_of_months_20B.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[11].INT_rate,		db_mgf01.merchgrepint_INT_rate_20B.arr,      db_mgf01.merchgrepint_INT_rate_20B.len);
	 memcpy(mgf01_ptr->merchgrp[1].merchgrepint[11].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_20B.arr,      db_mgf01.merchgrepint_MSF_rate_20B.len);

	 memcpy(mgf01_ptr->merchgrp[2].Amount_limit,                    db_mgf01.merchgrp_Amount_limit_3.arr,                db_mgf01.merchgrp_Amount_limit_3.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[0].nbr_of_months,   db_mgf01.merchgrepint_nbr_of_months_21.arr, db_mgf01.merchgrepint_nbr_of_months_21.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[0].INT_rate,		db_mgf01.merchgrepint_INT_rate_21.arr,		 db_mgf01.merchgrepint_INT_rate_21.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[0].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_21.arr,		 db_mgf01.merchgrepint_MSF_rate_21.len);
		   
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[1].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_22.arr, db_mgf01.merchgrepint_nbr_of_months_22.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[1].INT_rate,		db_mgf01.merchgrepint_INT_rate_22.arr, 	 db_mgf01.merchgrepint_INT_rate_22.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[1].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_22.arr, 	 db_mgf01.merchgrepint_MSF_rate_22.len);
	  
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[2].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_23.arr, db_mgf01.merchgrepint_nbr_of_months_23.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[2].INT_rate,		db_mgf01.merchgrepint_INT_rate_23.arr, 	 db_mgf01.merchgrepint_INT_rate_23.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[2].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_23.arr, 	 db_mgf01.merchgrepint_MSF_rate_23.len);
		   
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[3].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_24.arr, db_mgf01.merchgrepint_nbr_of_months_24.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[3].INT_rate,		db_mgf01.merchgrepint_INT_rate_24.arr, 	 db_mgf01.merchgrepint_INT_rate_24.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[3].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_24.arr, 	 db_mgf01.merchgrepint_MSF_rate_24.len);
		  
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[4].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_25.arr, db_mgf01.merchgrepint_nbr_of_months_25.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[4].INT_rate,		db_mgf01.merchgrepint_INT_rate_25.arr, 	 db_mgf01.merchgrepint_INT_rate_25.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[4].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_25.arr, 	 db_mgf01.merchgrepint_MSF_rate_25.len);
		  
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[5].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_26.arr, db_mgf01.merchgrepint_nbr_of_months_26.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[5].INT_rate,		db_mgf01.merchgrepint_INT_rate_26.arr, 	 db_mgf01.merchgrepint_INT_rate_26.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[5].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_26.arr, 	 db_mgf01.merchgrepint_MSF_rate_26.len);
		  
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[6].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_27.arr, db_mgf01.merchgrepint_nbr_of_months_27.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[6].INT_rate,		db_mgf01.merchgrepint_INT_rate_27.arr, 	 db_mgf01.merchgrepint_INT_rate_27.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[6].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_27.arr, 	 db_mgf01.merchgrepint_MSF_rate_27.len);
		  
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[7].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_28.arr, db_mgf01.merchgrepint_nbr_of_months_28.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[7].INT_rate,		db_mgf01.merchgrepint_INT_rate_28.arr, 	 db_mgf01.merchgrepint_INT_rate_28.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[7].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_28.arr, 	 db_mgf01.merchgrepint_MSF_rate_28.len);
		  
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[8].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_29.arr, db_mgf01.merchgrepint_nbr_of_months_29.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[8].INT_rate,		db_mgf01.merchgrepint_INT_rate_29.arr, 	 db_mgf01.merchgrepint_INT_rate_29.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[8].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_29.arr, 	 db_mgf01.merchgrepint_MSF_rate_29.len);
		  
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[9].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_30.arr, db_mgf01.merchgrepint_nbr_of_months_30.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[9].INT_rate,		db_mgf01.merchgrepint_INT_rate_30.arr,      db_mgf01.merchgrepint_INT_rate_30.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[9].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_30.arr,      db_mgf01.merchgrepint_MSF_rate_30.len);

	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[10].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_30A.arr, db_mgf01.merchgrepint_nbr_of_months_30A.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[10].INT_rate,		db_mgf01.merchgrepint_INT_rate_30A.arr,      db_mgf01.merchgrepint_INT_rate_30A.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[10].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_30A.arr,      db_mgf01.merchgrepint_MSF_rate_30A.len);

	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[11].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_30B.arr, db_mgf01.merchgrepint_nbr_of_months_30B.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[11].INT_rate,		db_mgf01.merchgrepint_INT_rate_30B.arr,      db_mgf01.merchgrepint_INT_rate_30B.len);
	 memcpy(mgf01_ptr->merchgrp[2].merchgrepint[11].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_30B.arr,      db_mgf01.merchgrepint_MSF_rate_30B.len);

	 memcpy(mgf01_ptr->merchgrp[3].Amount_limit,                    db_mgf01.merchgrp_Amount_limit_4.arr,                db_mgf01.merchgrp_Amount_limit_4.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[0].nbr_of_months,   db_mgf01.merchgrepint_nbr_of_months_31.arr, db_mgf01.merchgrepint_nbr_of_months_31.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[0].INT_rate,		db_mgf01.merchgrepint_INT_rate_31.arr,		 db_mgf01.merchgrepint_INT_rate_31.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[0].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_31.arr,		 db_mgf01.merchgrepint_MSF_rate_31.len);
		   
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[1].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_32.arr, db_mgf01.merchgrepint_nbr_of_months_32.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[1].INT_rate,		db_mgf01.merchgrepint_INT_rate_32.arr, 	 db_mgf01.merchgrepint_INT_rate_32.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[1].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_32.arr, 	 db_mgf01.merchgrepint_MSF_rate_32.len);
	  
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[2].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_33.arr, db_mgf01.merchgrepint_nbr_of_months_33.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[2].INT_rate,		db_mgf01.merchgrepint_INT_rate_33.arr, 	 db_mgf01.merchgrepint_INT_rate_33.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[2].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_33.arr, 	 db_mgf01.merchgrepint_MSF_rate_33.len);
		   
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[3].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_34.arr, db_mgf01.merchgrepint_nbr_of_months_34.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[3].INT_rate,		db_mgf01.merchgrepint_INT_rate_34.arr, 	 db_mgf01.merchgrepint_INT_rate_34.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[3].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_34.arr, 	 db_mgf01.merchgrepint_MSF_rate_34.len);
		  
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[4].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_35.arr, db_mgf01.merchgrepint_nbr_of_months_35.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[4].INT_rate,		db_mgf01.merchgrepint_INT_rate_35.arr, 	 db_mgf01.merchgrepint_INT_rate_35.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[4].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_35.arr, 	 db_mgf01.merchgrepint_MSF_rate_35.len);
		  
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[5].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_36.arr, db_mgf01.merchgrepint_nbr_of_months_36.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[5].INT_rate,		db_mgf01.merchgrepint_INT_rate_36.arr, 	 db_mgf01.merchgrepint_INT_rate_36.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[5].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_36.arr, 	 db_mgf01.merchgrepint_MSF_rate_36.len);
		  
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[6].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_37.arr, db_mgf01.merchgrepint_nbr_of_months_37.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[6].INT_rate,		db_mgf01.merchgrepint_INT_rate_37.arr, 	 db_mgf01.merchgrepint_INT_rate_37.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[6].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_37.arr, 	 db_mgf01.merchgrepint_MSF_rate_37.len);
		  
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[7].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_38.arr, db_mgf01.merchgrepint_nbr_of_months_38.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[7].INT_rate,		db_mgf01.merchgrepint_INT_rate_38.arr, 	 db_mgf01.merchgrepint_INT_rate_38.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[7].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_38.arr, 	 db_mgf01.merchgrepint_MSF_rate_38.len);
		  
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[8].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_39.arr, db_mgf01.merchgrepint_nbr_of_months_39.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[8].INT_rate,		db_mgf01.merchgrepint_INT_rate_39.arr, 	 db_mgf01.merchgrepint_INT_rate_39.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[8].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_39.arr, 	 db_mgf01.merchgrepint_MSF_rate_39.len);
		  
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[9].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_40.arr, db_mgf01.merchgrepint_nbr_of_months_40.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[9].INT_rate,		db_mgf01.merchgrepint_INT_rate_40.arr,      db_mgf01.merchgrepint_INT_rate_40.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[9].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_40.arr,      db_mgf01.merchgrepint_MSF_rate_40.len);

	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[10].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_40A.arr, db_mgf01.merchgrepint_nbr_of_months_40A.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[10].INT_rate,		db_mgf01.merchgrepint_INT_rate_40A.arr,      db_mgf01.merchgrepint_INT_rate_40A.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[10].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_40A.arr,      db_mgf01.merchgrepint_MSF_rate_40A.len);

	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[11].nbr_of_months,	db_mgf01.merchgrepint_nbr_of_months_40B.arr, db_mgf01.merchgrepint_nbr_of_months_40B.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[11].INT_rate,		db_mgf01.merchgrepint_INT_rate_40B.arr,      db_mgf01.merchgrepint_INT_rate_40B.len);
	 memcpy(mgf01_ptr->merchgrp[3].merchgrepint[11].MSF_rate,		db_mgf01.merchgrepint_MSF_rate_40B.arr,      db_mgf01.merchgrepint_MSF_rate_40B.len);

}

/*************************************************************************************/
BYTE db_select_RPS01_for_VISA (pAUTH_TX auth_tx,pRPS01 rps01_ptr, pCHAR ErrorMsg)
{
    EXEC SQL BEGIN DECLARE SECTION;
        char temp_visa_tran_id[51] = {0};
		char LErrorMsg[100] = {0};
		char rps_Date[9]={0};
		char str_Year[5]={0};
		int  curretn_Year=0;
	EXEC SQL END DECLARE SECTION;

    strncpy( pte_rps01.card_num, auth_tx->TLF01_details.card_num, sizeof( pte_rps01.card_num) );
    strncpy( pte_rps01.merchant_id, auth_tx->TLF01_details.merchant_id, sizeof( pte_rps01.merchant_id) );
    
    strncpy( rps_Date, auth_tx->TLF01_details.date_yyyymmdd, 8 );
     /*Check for 365 days */
    	strncpy(str_Year,rps_Date,4);
    	curretn_Year = atoi(str_Year);
    	curretn_Year--;
    	memset(str_Year,0x00,sizeof(str_Year));
    	memset(rps_Date,0x00,sizeof(rps_Date));
    	sprintf(str_Year,"%d",curretn_Year);
    	memcpy(rps_Date,str_Year,4);
    	strncpy( rps_Date+4, auth_tx->TLF01_details.date_yyyymmdd+4, 4 );
    
    EXEC SQL SELECT  
	   visa_tran_id INTO :temp_visa_tran_id
	   FROM RPS01
		   WHERE card_num            = :pte_rps01.card_num
		     AND merchant_id         = :pte_rps01.merchant_id
		    AND date_yyyymmdd		> :rps_Date
			 AND rownum = 1;
			 
	/*Copy VISA TID*/	
	if(temp_visa_tran_id > 0)
	{
		strncpy(auth_tx->TLF01_details.visa_tran_id,temp_visa_tran_id,15);
		return PTEMSG_OK;
	}
	return PTEMSG_OK;

}
/*************************************************************************************/
/* TF PHANI db_select_DE63_for_MC*/
/*************************************************************************************/
 
BYTE db_select_DE63_for_MC (pBCH10 bch10_ptr, pCHAR ErrorMsg)
{
	INT  retval;

	EXEC SQL BEGIN DECLARE SECTION;
	char temp_mcard_bk[51] = {0};
	char temp_settle_date[5] = {0};
	char temp_service_code[4] = {0};
	char temp_transmission_timestamp[11] = {0};
	char temp_response_code[3] = "00";
	char temp_message_type[5] = {0};
	char temp_message_type_1[5] = {0};
	char temp_message_type_2[5] = {0};
	char LErrorMsg[1000] = {0};
	char temp_CUP_Cobranded_CC_flag[3] = {0};
	char temp_pos_data[13] = {0};
	char temp_product6_code[7] = {0};
	char temp_product7_code[7] = {0};
	char temp_product5_quantity[17] = {0};
	char tranlink_data[13] = {0};
	char plan_regn_sys_idntfr[13] = {0};
	char temp_dwn_pymt[13]	= {0};
	char temp_intr_rt[5]	= {0};
	char temp_term[4]		= {0};
	char tlf01_response_code[3]= {0};
	char temp_product0_code[27]={0};
	EXEC SQL END DECLARE SECTION;
  
   strncpy( pte_tlf01.terminal_id, bch10_ptr->primary_key.device_id, sizeof(pte_bch01.device_id) );
   strncpy( pte_tlf01.merchant_id, bch10_ptr->merchant_id, sizeof(pte_tlf01.merchant_id) );
   strncpy( pte_tlf01.sys_trace_audit_num, bch10_ptr->sys_trace_audit_num, sizeof(pte_tlf01.sys_trace_audit_num) );
   strncpy( pte_tlf01.card_num, bch10_ptr->card_nbr, sizeof(pte_tlf01.card_num) );
   strncpy( pte_tlf01.auth_number, bch10_ptr->auth_number, sizeof(pte_tlf01.auth_number) );
   strncpy( pte_tlf01.retrieval_ref_num, bch10_ptr->primary_key.retrieval_ref_num, sizeof(pte_tlf01.retrieval_ref_num) );
   strncpy( pte_tlf01.total_amount, bch10_ptr->tran_amount, sizeof( pte_tlf01.total_amount) );
   
   strncpy( temp_message_type, bch10_ptr->message_type, 4);

     if(0 == strncmp(temp_message_type,"0220",4))
   {
       /* Its OFFLINE sale batch upload , we have to retrive details from original*/
       
       strncpy( temp_message_type_1, "0100", 4);
       strncpy( temp_message_type_2, "0200", 4);
  	   if ( db_error_statics_flag == true )
   	   {
      		start_time = ptetime_get_time();
       }
	   EXEC SQL SELECT  
	   service_code,settlement_date,mcard_banknet,transmission_timestamp,product_code,PRODUCT17_AMOUNT,product11_amount,product2_amount,kek,product7_code,product8_code,add_amounts,visa_validation_code,currency_code,response_code,resp_source  INTO :temp_service_code,:temp_settle_date,:temp_mcard_bk,:temp_transmission_timestamp,:temp_CUP_Cobranded_CC_flag,:temp_pos_data,:tranlink_data,:plan_regn_sys_idntfr,:temp_product5_quantity,:temp_product6_code,:temp_product7_code,:temp_dwn_pymt,:temp_intr_rt,:temp_term,:tlf01_response_code,:temp_product0_code 
	   FROM tlf01
		   WHERE card_num            = :pte_tlf01.card_num
		     AND terminal_id         = :pte_tlf01.terminal_id
		     AND merchant_id         = :pte_tlf01.merchant_id
		     AND auth_number		 = :pte_tlf01.auth_number
		     AND (message_type = :temp_message_type_1  OR message_type = :temp_message_type_2)
			 AND response_code       = :temp_response_code
			 AND rownum = 1;
	  
	  
	  if ( db_error_statics_flag == true )
      {
          end_time = ptetime_get_time();
      	  duration = end_time - start_time;
      	  if(duration >= db_error_statics_value)
	  	  {
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_DE63_for_MC_S1 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
      }
		 printf("Query OFFLINE 2 result %d\n",SQLCODE);
		 if(NO_DATA_FOUND == SQLCODE)
		 {
		    strncpy( temp_message_type, "0220", 4);
   	    	if ( db_error_statics_flag == true )
   	   		   {
      				start_time = ptetime_get_time();
               }
			   EXEC SQL SELECT  
			   service_code,settlement_date,mcard_banknet,transmission_timestamp,product_code,PRODUCT17_AMOUNT,product11_amount,product2_amount,kek,product8_code,add_amounts,visa_validation_code,currency_code,response_code,resp_source   INTO :temp_service_code,:temp_settle_date,:temp_mcard_bk,:temp_transmission_timestamp,:temp_CUP_Cobranded_CC_flag,:temp_pos_data,:tranlink_data,:plan_regn_sys_idntfr,:temp_product5_quantity,:temp_product7_code,:temp_dwn_pymt,:temp_intr_rt,:temp_term,:tlf01_response_code,:temp_product0_code
			   FROM tlf01
			   WHERE card_num            = :pte_tlf01.card_num
			     AND terminal_id         = :pte_tlf01.terminal_id
			     AND merchant_id         = :pte_tlf01.merchant_id
			     AND auth_number		 = :pte_tlf01.auth_number
			     AND message_type		 = :temp_message_type 
				 AND response_code       = :temp_response_code
				 AND rownum = 1;
				 
				 if ( db_error_statics_flag == true )
      			{
         			 end_time = ptetime_get_time();
      	  			 duration = end_time - start_time;
      	 			 if(duration >= db_error_statics_value)
	  	  	 		{
	  					memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
						sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_DE63_for_MC_S2 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
						Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  			}
     		    }
			printf("Query OFFLINE 4 result %d\n",SQLCODE);
		 
		}
	 
   }
   else
   {
   		if ( db_error_statics_flag == true )
   		{
      		start_time = ptetime_get_time();
   		}
   		/* Force usage of the card number index. */
   		EXEC SQL SELECT  
   		service_code,settlement_date,mcard_banknet,transmission_timestamp,product_code,PRODUCT17_AMOUNT,product7_code,product11_amount,product2_amount,kek,product8_code,add_amounts,visa_validation_code,currency_code,response_code,resp_source   INTO :temp_service_code,:temp_settle_date,:temp_mcard_bk,:temp_transmission_timestamp,:temp_CUP_Cobranded_CC_flag,:temp_pos_data,:temp_product6_code,:tranlink_data,:plan_regn_sys_idntfr,:temp_product5_quantity,:temp_product7_code,:temp_dwn_pymt,:temp_intr_rt,:temp_term,:tlf01_response_code,:temp_product0_code
   		FROM tlf01
   		WHERE card_num              = :pte_tlf01.card_num
     		AND terminal_id         = :pte_tlf01.terminal_id
    		AND merchant_id         = :pte_tlf01.merchant_id
     		AND auth_number		    = :pte_tlf01.auth_number
     		AND retrieval_ref_num   = :pte_tlf01.retrieval_ref_num
	 		AND message_type		= :temp_message_type 
	 		AND response_code       = :temp_response_code
	 		AND rownum = 1;
	   if ( db_error_statics_flag == true )
       {
          end_time = ptetime_get_time();
      	  duration = end_time - start_time;
      	  if(duration >= db_error_statics_value)
	  	  {
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_DE63_for_MC_S2 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
       }
	}
	memcpy(bch10_ptr->mcard_banknet,temp_mcard_bk,sizeof(temp_mcard_bk)-1);
	memcpy(bch10_ptr->product_codes[19].code,temp_settle_date,sizeof(temp_settle_date)-1);
	memcpy(bch10_ptr->product_codes[6].amount + 2,temp_service_code,sizeof(temp_service_code)-1);
	memcpy(bch10_ptr->transmission_timestamp,temp_transmission_timestamp,sizeof(temp_transmission_timestamp)-1);
	memcpy(bch10_ptr->product_codes[9].quantity,temp_CUP_Cobranded_CC_flag,sizeof(temp_CUP_Cobranded_CC_flag)-1);
	memcpy(bch10_ptr->product_codes[16].amount,temp_pos_data,sizeof(temp_pos_data)-1);
	//We are copying OFFUS from original pre-auth transaction to insert record in BCH10
	memcpy(bch10_ptr->product_codes[5].code,temp_product6_code,sizeof(temp_product6_code)-1);
	bch10_ptr->mcard_banknet[49]=0x00;
	bch10_ptr->product_codes[19].code[6]=0x00;
	bch10_ptr->product_codes[6].amount[12]=0x00;
	bch10_ptr->product_codes[5].code[6]=0x00;
	//MC02_APR2024 - copying DE105 tranlink data to BCH10
	memcpy(bch10_ptr->product_codes[10].amount,tranlink_data,10);
	
	memcpy(bch10_ptr->product_codes[1].amount, plan_regn_sys_idntfr, sizeof(bch10_ptr->product_codes[1].amount)-1);
	strncpy(bch10_ptr->product_codes[5].quantity,&temp_product5_quantity[4], 1);
	strncat(bch10_ptr->product_codes[5].quantity,&temp_product5_quantity[0], 1);
	bch10_ptr->product_codes[5].quantity[2]=0x00;
	memcpy(bch10_ptr->product_codes[7].code,temp_product7_code,sizeof(temp_product7_code)-1);
	bch10_ptr->product_codes[7].code[4]=0x00;
	memcpy(bch10_ptr->down_payment,temp_dwn_pymt,sizeof(temp_dwn_pymt)-1);
	memcpy(bch10_ptr->interest_rate,temp_intr_rt,sizeof(temp_intr_rt)-1);
	memcpy(bch10_ptr->term,temp_term,sizeof(temp_term)-1);
	memcpy(bch10_ptr->response_code,tlf01_response_code,sizeof(tlf01_response_code)-1);
	strncpy(bch10_ptr->product_codes[0].code, temp_product0_code, 1);
	
	bch10_ptr->product_codes[0].code[1]=0x00;
	bch10_ptr->down_payment[9]=0x00;
	bch10_ptr->interest_rate[4]=0x00;
	bch10_ptr->term[3]=0x00;
	bch10_ptr->response_code[2]=0x00;
	
	printf("Service code :%s Settlement Date :%s and Transmission Timestamp :%s for STAN %s is \n",
	        temp_service_code,temp_settle_date,temp_transmission_timestamp,pte_tlf01.sys_trace_audit_num);
	sprintf ( LErrorMsg, "BATCH_UPLOAD:retrived service code:%s temp_mcard_bk:%s temp_settle_date:%s Message_type: %s for STAN: %s RRN: %s", 
				temp_service_code,temp_mcard_bk,temp_settle_date,temp_message_type,pte_tlf01.sys_trace_audit_num,pte_tlf01.retrieval_ref_num);
  	devds_log_message(2,1,LErrorMsg,"db_select_DE63_for_MC");
   return PTEMSG_OK;
}/* END db_select_DE63_for_MC funtion*/

/*************************************************************************************/

/************************************************************************************/

/*TF -- Abhishek Verma ---> This function is for reterving fields durring batch upload*/ 
 /*We are not using this function as we have merge with V9 version of this function*/
/*for CUP Cards*/
/*************************************************************************************/
 
BYTE db_select_CUP_EPOS_Field_V8 (pBCH10 bch10_ptr, pCHAR ErrorMsg)
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
        char temp_mcard_bk[51]={0};
		char temp_settle_date[5]={0};
		char temp_service_code[4]={0};
		char temp_transmission_timestamp[11]={0};
		char temp_stan[7]={0};
		char temp_response_code[3]="00";
		char temp_message_type[5]={0};
		char temp_POS_entry_mode[5]={0};
		char LErrorMsg[1000]={0};
		char temp_CUP_Cobranded_CC_flag[3]={0};
		char temp_pos_data[13] = {0};
		
   EXEC SQL END DECLARE SECTION;
   
   printf("In db_select_CUP_EPOS_Field_V8 Function\n");
  
   strncpy( pte_tlf01.terminal_id, bch10_ptr->primary_key.device_id, sizeof(pte_bch01.device_id) );
   strncpy( pte_tlf01.merchant_id, bch10_ptr->merchant_id, sizeof(pte_tlf01.merchant_id) );
   strncpy( pte_tlf01.sys_trace_audit_num, bch10_ptr->sys_trace_audit_num, sizeof(pte_tlf01.sys_trace_audit_num) );
   strncpy( pte_tlf01.card_num, bch10_ptr->card_nbr, sizeof(pte_tlf01.card_num) );
   strncpy( pte_tlf01.auth_number, bch10_ptr->auth_number, sizeof(pte_tlf01.auth_number) );
   strncpy( pte_tlf01.retrieval_ref_num, bch10_ptr->primary_key.retrieval_ref_num, sizeof(pte_tlf01.retrieval_ref_num) );
   strncpy( pte_tlf01.total_amount, bch10_ptr->tran_amount, sizeof( pte_tlf01.total_amount) );
   
   strncpy( temp_message_type, bch10_ptr->message_type, 4);
   
 	  if ( db_error_statics_flag == true )
   	  {
      		start_time = ptetime_get_time();
      }
	   /* Force usage of the card number index. */
	   EXEC SQL SELECT  
	   service_code,settlement_date,mcard_banknet,transmission_timestamp,product_code,sys_trace_audit_num, pos_entry_mode, PRODUCT17_AMOUNT INTO :temp_service_code,:temp_settle_date,:temp_mcard_bk,:temp_transmission_timestamp,:temp_CUP_Cobranded_CC_flag,:temp_stan,:temp_POS_entry_mode,:temp_pos_data
	   FROM tlf01
	   WHERE card_num            = :pte_tlf01.card_num
	     AND terminal_id         = :pte_tlf01.terminal_id
	     AND merchant_id         = :pte_tlf01.merchant_id
	     AND auth_number		 = :pte_tlf01.auth_number
	     AND retrieval_ref_num   = :pte_tlf01.retrieval_ref_num
		 AND response_code       = :temp_response_code
		 AND message_type not like '0220'
		 AND rownum = 1;
	  if ( db_error_statics_flag == true )
      {
          end_time = ptetime_get_time();
      	  duration = end_time - start_time;
      	  if(duration >= db_error_statics_value)
	  	  {
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_CUP_EPOS_Field_V8 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
      }
		 
	memcpy(bch10_ptr->mcard_banknet,temp_mcard_bk,sizeof(temp_mcard_bk)-1);
	memcpy(bch10_ptr->product_codes[19].code,temp_settle_date,sizeof(temp_settle_date)-1);
	if(strlen(temp_service_code )> 0)
	{
		memcpy(bch10_ptr->product_codes[6].amount + 2,temp_service_code,sizeof(temp_service_code)-1);
	}
	memcpy(bch10_ptr->transmission_timestamp,temp_transmission_timestamp,sizeof(temp_transmission_timestamp)-1);
	memcpy(bch10_ptr->product_codes[9].quantity,temp_CUP_Cobranded_CC_flag,sizeof(temp_CUP_Cobranded_CC_flag)-1);
	if(strlen(temp_stan )> 0)
	{
		memcpy(bch10_ptr->sys_trace_audit_num,temp_stan,sizeof(temp_stan)-1);
	}
	if(strlen(temp_POS_entry_mode )> 0)
	{
		memcpy(bch10_ptr->pos_entry_mode,temp_POS_entry_mode,sizeof(temp_POS_entry_mode)-1);
	}
	memcpy(bch10_ptr->product_codes[16].amount,temp_pos_data,sizeof(temp_pos_data)-1);
	bch10_ptr->mcard_banknet[49]=0x00;
	bch10_ptr->product_codes[19].code[6]=0x00;
	bch10_ptr->product_codes[6].amount[12]=0x00;

   return PTEMSG_OK;
}/* END db_select_CUP_EPOS_Field_V8 funtion*/

/*************************************************************************************/

/*TF -- Abhishek Verma ---> This function is for reterving fields durring batch*/
/* upload for CUP CO branded Cards*/
/*************************************************************************************/
 
BYTE db_select_CUP_Co_Branded_EPOS_Field_V8 (pBCH10 bch10_ptr, pCHAR ErrorMsg)
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
        char temp_mcard_bk[51] = {0};
		char temp_settle_date[5] = {0};
		char temp_service_code[4] = {0};
		char temp_transmission_timestamp[11] = {0};
		char temp_stan[7] = {0};
		char temp_response_code[3] = "00";
		char temp_message_type[5] = {0};
		char temp_POS_entry_mode[5] = {0};
		char LErrorMsg[1000] = {0};
		char temp_CUP_Cobranded_CC_flag[3] = {0};
		CHAR  gmt_time[20] = {0};
		char temp_pos_data[13] = {0};
		
   EXEC SQL END DECLARE SECTION;
   
    printf("In db_select_CUP_Co_Branded_EPOS_Field_V8 Function\n");
  
   strncpy( pte_tlf01.terminal_id, bch10_ptr->primary_key.device_id, sizeof(pte_bch01.device_id) );
   strncpy( pte_tlf01.merchant_id, bch10_ptr->merchant_id, sizeof(pte_tlf01.merchant_id) );
   strncpy( pte_tlf01.sys_trace_audit_num, bch10_ptr->sys_trace_audit_num, sizeof(pte_tlf01.sys_trace_audit_num) );
   strncpy( pte_tlf01.card_num, bch10_ptr->card_nbr, sizeof(pte_tlf01.card_num) );
   strncpy( pte_tlf01.auth_number, bch10_ptr->auth_number, sizeof(pte_tlf01.auth_number) );
   strncpy( pte_tlf01.retrieval_ref_num, bch10_ptr->primary_key.retrieval_ref_num, sizeof(pte_tlf01.retrieval_ref_num) );
   strncpy( pte_tlf01.total_amount, bch10_ptr->tran_amount, sizeof( pte_tlf01.total_amount) );
   
   strncpy( temp_message_type, bch10_ptr->message_type, 4);
   
    if ( db_error_statics_flag == true )
   	  {
      		start_time = ptetime_get_time();
      }
	   /* Force usage of the card number index. */
	   EXEC SQL SELECT  
	   service_code,settlement_date,mcard_banknet,transmission_timestamp,product_code,sys_trace_audit_num, pos_entry_mode,PRODUCT17_AMOUNT INTO :temp_service_code,:temp_settle_date,:temp_mcard_bk,:temp_transmission_timestamp,:temp_CUP_Cobranded_CC_flag,:temp_stan,:temp_POS_entry_mode,:temp_pos_data
	   FROM tlf01
	   WHERE card_num            = :pte_tlf01.card_num
	     AND terminal_id         = :pte_tlf01.terminal_id
	     AND merchant_id         = :pte_tlf01.merchant_id
	     AND auth_number		 = :pte_tlf01.auth_number
	     AND retrieval_ref_num   = :pte_tlf01.retrieval_ref_num
	 	 AND message_type		 = :temp_message_type 
		 AND response_code       = :temp_response_code
		 AND rownum = 1;
    if ( db_error_statics_flag == true )
    {
          end_time = ptetime_get_time();

      	  duration = end_time - start_time;

      	  if(duration >= db_error_statics_value)
	  	  {
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_CUP_Co_Branded_EPOS_Field_V8 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
    }
	printf("SQL result %d\n",SQLCODE);
	memcpy(bch10_ptr->mcard_banknet,temp_mcard_bk,sizeof(temp_mcard_bk)-1);
	
	if(strlen(temp_settle_date)>0)
	{
		memcpy(bch10_ptr->product_codes[19].code,temp_settle_date,sizeof(temp_settle_date)-1);
	}
	else
	{
		// Let us create a settle date
		pintime_get_gmt( gmt_time );  /* YYYYMMDDhhmmss */
	 	strncpy( temp_settle_date, &gmt_time[4], 4 );  /* MMDDhhmmss */
		memcpy(bch10_ptr->product_codes[19].code,temp_settle_date,sizeof(temp_settle_date)-1);
	}
	
	if(strlen(temp_service_code )> 0)
	{
		memcpy(bch10_ptr->product_codes[6].amount + 2 ,temp_service_code,sizeof(temp_service_code)-1);
	}
	else
	{
		memcpy(bch10_ptr->product_codes[6].amount+2,"000",sizeof(temp_service_code)-1);
	}
	
	if(strlen(temp_transmission_timestamp )> 0)
	{
		memcpy(bch10_ptr->transmission_timestamp,temp_transmission_timestamp,sizeof(temp_transmission_timestamp)-1);
	}
	else
	{
	 // Let us create a transamission time 
	 	pintime_get_gmt( gmt_time );  /* YYYYMMDDhhmmss */
	 	strncpy( temp_transmission_timestamp, &gmt_time[4], 10 );  /* MMDDhhmmss */
		memcpy(bch10_ptr->transmission_timestamp,temp_transmission_timestamp,sizeof(temp_transmission_timestamp)-1);
	}
	
	memcpy(bch10_ptr->product_codes[9].quantity,temp_CUP_Cobranded_CC_flag,sizeof(temp_CUP_Cobranded_CC_flag)-1);
	
	if(strlen(temp_stan) >0)
	{
		memcpy(bch10_ptr->sys_trace_audit_num,temp_stan,sizeof(temp_stan)-1);
	}
	
	if(strlen(temp_POS_entry_mode) > 0) 
	{
		memcpy(bch10_ptr->pos_entry_mode,temp_POS_entry_mode,sizeof(temp_POS_entry_mode)-1);
	}
	memcpy(bch10_ptr->product_codes[16].amount,temp_pos_data,sizeof(temp_pos_data)-1);
	bch10_ptr->mcard_banknet[49]=0x00;
	bch10_ptr->product_codes[19].code[6]=0x00;
	bch10_ptr->product_codes[6].amount[12]=0x00;
	
	printf("Service code :%s Settlement Date :%s and Transmission Timestamp :%s for STAN %s is \n",
	        temp_service_code,temp_settle_date,temp_transmission_timestamp,pte_tlf01.sys_trace_audit_num);
	sprintf ( LErrorMsg, "BATCH_UPLOAD:retrived service code:%s temp_mcard_bk:%s temp_settle_date:%s Message_type: %s for STAN: %s RRN: %s", 
				temp_service_code,temp_mcard_bk,temp_settle_date,temp_message_type,pte_tlf01.sys_trace_audit_num,pte_tlf01.retrieval_ref_num);
  	devds_log_message(2,1,LErrorMsg,"db_select_CUP_Co_Branded_EPOS_Field_V8");
   return PTEMSG_OK;
}/* END db_select_CUP_Co_Branded_EPOS_Field_V8 funtion*/

/************************************************************************************/

/************************************************************************************/

/*TF -- Abhishek Verma ---> This function is for reterving fields durring batch upload */
/*for CUP Cards*/
/*************************************************************************************/
 
BYTE db_select_CUP_EPOS_Field_V9 (pBCH10 bch10_ptr, pCHAR ErrorMsg)
{
    INT  retval;
    
   EXEC SQL BEGIN DECLARE SECTION;
        char temp_mcard_bk[51] = {0};
		char temp_settle_date[5] = {0};
		char temp_service_code[4] = {0};
		char temp_transmission_timestamp[11] = {0};
		char temp_stan[7] = {0};
		char temp_response_code[3] = "00";
		char temp_message_type[5] = {0};
		char temp_POS_entry_mode[5] = {0};
		char LErrorMsg[1000] = {0};
		char temp_CUP_Cobranded_CC_flag[3] = {0};
		char temp_message_type_sale[5] = "0200";
		char temp_message_type_auth[5] = "0100";
		CHAR  gmt_time[20] = {0};
		char temp_pos_data[13] = {0};
		
   EXEC SQL END DECLARE SECTION;
   
   printf("In db_select_CUP_EPOS_Field_V9 Function\n");
  
   strncpy( pte_tlf01.terminal_id, bch10_ptr->primary_key.device_id, sizeof(pte_bch01.device_id) );
   strncpy( pte_tlf01.merchant_id, bch10_ptr->merchant_id, sizeof(pte_tlf01.merchant_id) );
   strncpy( pte_tlf01.sys_trace_audit_num, bch10_ptr->sys_trace_audit_num, sizeof(pte_tlf01.sys_trace_audit_num) );
   strncpy( pte_tlf01.card_num, bch10_ptr->card_nbr, sizeof(pte_tlf01.card_num) );
   strncpy( pte_tlf01.auth_number, bch10_ptr->auth_number, sizeof(pte_tlf01.auth_number) );
   strncpy( pte_tlf01.retrieval_ref_num, bch10_ptr->primary_key.retrieval_ref_num, sizeof(pte_tlf01.retrieval_ref_num) );
   strncpy( pte_tlf01.total_amount, bch10_ptr->tran_amount, sizeof( pte_tlf01.total_amount) );
   
   strncpy( temp_message_type, bch10_ptr->message_type, 4);
   
    /* For OFFLINE transaction , we have to fatch details from Pre - Auth / Card Verificatio
    and amount can not be the parameter in that case. Also we are not keeping RRN as well*/

   if(0 == strncmp(temp_message_type,"0220",4))
   {
       /* Its OFFLINE sale batch upload , change temp message to 0100 as we have 
       to retrive details from Perauth/ Card verificaion transaction details*/
       
       strncpy( temp_message_type, "0100", 4);
	   if ( db_error_statics_flag == true )
   	   {
      		start_time = ptetime_get_time();
       }
	   EXEC SQL SELECT  
	   service_code,settlement_date,mcard_banknet,transmission_timestamp,product_code,sys_trace_audit_num, pos_entry_mode,PRODUCT17_AMOUNT INTO :temp_service_code,:temp_settle_date,:temp_mcard_bk,:temp_transmission_timestamp,:temp_CUP_Cobranded_CC_flag,:temp_stan,:temp_POS_entry_mode,:temp_pos_data 
	   FROM tlf01
		   WHERE card_num            = :pte_tlf01.card_num
		     AND terminal_id         = :pte_tlf01.terminal_id
		     AND merchant_id         = :pte_tlf01.merchant_id
		     AND auth_number		 = :pte_tlf01.auth_number
		     AND message_type		 = :temp_message_type 
			 AND response_code       = :temp_response_code
			 AND rownum = 1;
	   if ( db_error_statics_flag == true )
       {
          end_time = ptetime_get_time();
      	  duration = end_time - start_time;
      	  if(duration >= db_error_statics_value)
	  	  {
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_CUP_EPOS_Field_V9 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
       }
		 printf("Query OFFLINE 2 result %d\n",SQLCODE);
		 if(NO_DATA_FOUND == SQLCODE)
		 {
		    printf("No Preauth/ Card verfication found for SATN %s \n", pte_tlf01.sys_trace_audit_num);
		    
		    strncpy( temp_message_type, "0220", 4);

	          if ( db_error_statics_flag == true )
   	   		  {
      		     start_time = ptetime_get_time();
              }
			   EXEC SQL SELECT  
			   service_code,settlement_date,mcard_banknet,transmission_timestamp,product_code,sys_trace_audit_num, pos_entry_mode,PRODUCT17_AMOUNT INTO :temp_service_code,:temp_settle_date,:temp_mcard_bk,:temp_transmission_timestamp,:temp_CUP_Cobranded_CC_flag,:temp_stan,:temp_POS_entry_mode,:temp_pos_data 
			   FROM tlf01
			   WHERE card_num            = :pte_tlf01.card_num
			     AND terminal_id         = :pte_tlf01.terminal_id
			     AND merchant_id         = :pte_tlf01.merchant_id
			     AND auth_number		 = :pte_tlf01.auth_number
			     AND retrieval_ref_num   = :pte_tlf01.retrieval_ref_num
			     AND message_type		 = :temp_message_type 
				 AND response_code       = :temp_response_code
				 AND rownum = 1;
				if ( db_error_statics_flag == true )
       			{
          			end_time = ptetime_get_time();
      	  			duration = end_time - start_time;
      	  			if(duration >= db_error_statics_value)
	  	  			{
	  					memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
						sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_CUP_EPOS_Field_V9 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
						Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  			}
       			} 
		}
   }
   else
   {
   
	   if ( db_error_statics_flag == true )
   	   {
      		start_time = ptetime_get_time();
       }
	   /* Force usage of the card number index. */
	   EXEC SQL SELECT  
		   service_code,settlement_date,mcard_banknet,transmission_timestamp,product_code,sys_trace_audit_num, pos_entry_mode,PRODUCT17_AMOUNT INTO :temp_service_code,:temp_settle_date,:temp_mcard_bk,:temp_transmission_timestamp,:temp_CUP_Cobranded_CC_flag,:temp_stan,:temp_POS_entry_mode,:temp_pos_data 
	   FROM tlf01
	   WHERE card_num            = :pte_tlf01.card_num
	     AND terminal_id         = :pte_tlf01.terminal_id
	     AND merchant_id         = :pte_tlf01.merchant_id
	     AND auth_number		 = :pte_tlf01.auth_number
	     AND retrieval_ref_num   = :pte_tlf01.retrieval_ref_num
		 AND response_code       = :temp_response_code
		 AND (message_type = :temp_message_type_sale OR message_type = :temp_message_type_auth)
		 AND rownum = 1;
		 
		if ( db_error_statics_flag == true )
       	{
          	end_time = ptetime_get_time();
      	  	duration = end_time - start_time;
      	  	if(duration >= db_error_statics_value)
	  	  	{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_CUP_EPOS_Field_V9 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  	}
       	} 
		printf("SQL result %d\n",SQLCODE);
	}	 
	memcpy(bch10_ptr->mcard_banknet,temp_mcard_bk,sizeof(temp_mcard_bk)-1);
	if(strlen(temp_settle_date)>0)
	{
		memcpy(bch10_ptr->product_codes[19].code,temp_settle_date,sizeof(temp_settle_date)-1);
	}
	else
	{
		// Let us create a settle date
		pintime_get_gmt( gmt_time );  /* YYYYMMDDhhmmss */
	 	strncpy( temp_settle_date, &gmt_time[4], 4 );  /* MMDDhhmmss */
		memcpy(bch10_ptr->product_codes[19].code,temp_settle_date,sizeof(temp_settle_date)-1);
	}
	
	if(strlen(temp_service_code )> 0)
	{
		memcpy(bch10_ptr->product_codes[6].amount + 2,temp_service_code,sizeof(temp_service_code)-1);
	}
	else
	{
		memcpy(bch10_ptr->product_codes[6].amount+2,"000",sizeof(temp_service_code)-1);
	}
	
	if(strlen(temp_transmission_timestamp )> 0)
	{
		memcpy(bch10_ptr->transmission_timestamp,temp_transmission_timestamp,sizeof(temp_transmission_timestamp)-1);
	}
	else
	{
	 // Let us create a transamission time 
	 	pintime_get_gmt( gmt_time );  /* YYYYMMDDhhmmss */
	 	strncpy( temp_transmission_timestamp, &gmt_time[4], 10 );  /* MMDDhhmmss */
		memcpy(bch10_ptr->transmission_timestamp,temp_transmission_timestamp,sizeof(temp_transmission_timestamp)-1);
	}
	memcpy(bch10_ptr->product_codes[9].quantity,temp_CUP_Cobranded_CC_flag,sizeof(temp_CUP_Cobranded_CC_flag)-1);
	if(strlen(temp_stan )> 0)
	{
		memcpy(bch10_ptr->sys_trace_audit_num,temp_stan,sizeof(temp_stan)-1);
	}
	if(strlen(temp_POS_entry_mode )> 0)
	{
		memcpy(bch10_ptr->pos_entry_mode,temp_POS_entry_mode,sizeof(temp_POS_entry_mode)-1);
	}
	memcpy(bch10_ptr->product_codes[16].amount,temp_pos_data,sizeof(temp_pos_data)-1);
	bch10_ptr->mcard_banknet[49]=0x00;
	bch10_ptr->product_codes[19].code[6]=0x00;
	bch10_ptr->product_codes[6].amount[12]=0x00;
	
	printf("Service code :%s Settlement Date :%s and Transmission Timestamp :%s for STAN %s is \n",
	        temp_service_code,temp_settle_date,temp_transmission_timestamp,pte_tlf01.sys_trace_audit_num);
	sprintf ( LErrorMsg, "BATCH_UPLOAD:retrived service code:%s temp_mcard_bk:%s temp_settle_date:%s Message_type: %s for STAN: %s RRN: %s", 
				temp_service_code,temp_mcard_bk,temp_settle_date,temp_message_type,pte_tlf01.sys_trace_audit_num,pte_tlf01.retrieval_ref_num);
  	devds_log_message(2,1,LErrorMsg,"db_select_CUP_EPOS_Field_V9");
   return PTEMSG_OK;
}/* END db_select_CUP_EPOS_Field_V9 funtion*/

/************************************************************************************/

/* TF PHANI*/
/*************************************************************************************/
 
BYTE db_select_DE31_for_amex (pBCH10 bch10_ptr, pCHAR ErrorMsg)
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
        char temp_tran_id[16] = {0};
		char temp_service_code[4] = {0};
		char LErrorMsg[1000] = {0};
		char temp_message_type[5] = {0};
		char temp_message_type_1[5] = {0};
		char temp_message_type_2[5] = {0};
		char temp_response_code[3] = "00";
		char temp_pos_data[13] = {0};
   EXEC SQL END DECLARE SECTION;
  
   strncpy( pte_tlf01.terminal_id, bch10_ptr->primary_key.device_id, sizeof(pte_bch01.device_id) );
   strncpy( pte_tlf01.merchant_id, bch10_ptr->merchant_id, sizeof(pte_tlf01.merchant_id) );
   strncpy( pte_tlf01.sys_trace_audit_num, bch10_ptr->sys_trace_audit_num, sizeof(pte_tlf01.sys_trace_audit_num) );
   strncpy( pte_tlf01.card_num, bch10_ptr->card_nbr, sizeof(pte_tlf01.card_num) );
   strncpy( pte_tlf01.auth_number, bch10_ptr->auth_number, sizeof(pte_tlf01.auth_number) );
   strncpy( pte_tlf01.retrieval_ref_num, bch10_ptr->primary_key.retrieval_ref_num, sizeof(pte_tlf01.retrieval_ref_num) );
   strncpy( pte_tlf01.total_amount, bch10_ptr->tran_amount, sizeof( pte_tlf01.total_amount) );
   
    strncpy( temp_message_type, bch10_ptr->message_type, 4);

   if(0 == strncmp(temp_message_type,"0220",4))
   {
           /* For OFFLINE transaction , we have to fatch details from original*/
       
       strncpy( temp_message_type_1, "0100", 4);
       strncpy( temp_message_type_2, "0200", 4);
   	   
	   if ( db_error_statics_flag == true )
   	   {
      		start_time = ptetime_get_time();
       }
	   EXEC SQL SELECT  
	   visa_tran_id,service_code,PRODUCT17_AMOUNT INTO :temp_tran_id,:temp_service_code,:temp_pos_data 
	   FROM tlf01
		   WHERE card_num            = :pte_tlf01.card_num
		     AND terminal_id         = :pte_tlf01.terminal_id
		     AND merchant_id         = :pte_tlf01.merchant_id
		     AND auth_number		 = :pte_tlf01.auth_number
		     AND (message_type = :temp_message_type_1  OR message_type = :temp_message_type_2)
			 AND response_code       = :temp_response_code
			 AND rownum = 1;
		 if ( db_error_statics_flag == true )
       	 {
          	end_time = ptetime_get_time();
      	  	duration = end_time - start_time;
      	  	if(duration >= db_error_statics_value)
	  	  	{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_DE31_for_amex , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  	}
       	 }

		 if(NO_DATA_FOUND == SQLCODE)
		 {
		    printf("No Preauth/ Card verfication found for SATN %s \n", pte_tlf01.sys_trace_audit_num);
		    
		    strncpy( temp_message_type, "0220", 4);
 
			   EXEC SQL SELECT  
			   visa_tran_id,service_code,PRODUCT17_AMOUNT INTO :temp_tran_id,:temp_service_code,:temp_pos_data 
			   FROM tlf01
			   WHERE card_num            = :pte_tlf01.card_num
			     AND terminal_id         = :pte_tlf01.terminal_id
			     AND merchant_id         = :pte_tlf01.merchant_id
			     AND auth_number		 = :pte_tlf01.auth_number
			     AND message_type		 = :temp_message_type 
				 AND response_code       = :temp_response_code
				 AND rownum = 1;
		}
	}
    else
    {
		if ( db_error_statics_flag == true )
   	    {
      		start_time = ptetime_get_time();
        }
   		/* Force usage of the card number index. */
   		
	   EXEC SQL SELECT  
	   visa_tran_id,service_code,PRODUCT17_AMOUNT INTO :temp_tran_id,:temp_service_code,:temp_pos_data  
	   from( SELECT *
	   FROM tlf01
	   WHERE card_num            = :pte_tlf01.card_num
	     AND terminal_id         = :pte_tlf01.terminal_id
	     AND merchant_id         = :pte_tlf01.merchant_id
	     AND auth_number		 = :pte_tlf01.auth_number
	     AND retrieval_ref_num   = :pte_tlf01.retrieval_ref_num
	 	 AND message_type		 = :temp_message_type 
		 AND response_code       = :temp_response_code
		 order by transaction_id ASC )
		 where rownum = 1;
	 	if ( db_error_statics_flag == true )
       	{
          	end_time = ptetime_get_time();
      	  	duration = end_time - start_time;
      	  	if(duration >= db_error_statics_value)
	  	  	{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_DE31_for_amex , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  	}
       	}
	}
 	memcpy(bch10_ptr->mcard_banknet,temp_tran_id,sizeof(temp_tran_id)-1);
	memcpy(bch10_ptr->product_codes[6].amount + 2,temp_service_code,sizeof(temp_service_code)-1);
	memcpy(bch10_ptr->product_codes[16].amount,temp_pos_data,sizeof(temp_pos_data)-1);

	bch10_ptr->mcard_banknet[49]=0x00;
	bch10_ptr->product_codes[6].amount[12]=0x00;
	
	sprintf ( LErrorMsg, "BATCH_UPLOAD :retrived service code:%s tran id:%s Message_type: %s for STAN: %s RRN: %s" , 
				temp_service_code,temp_tran_id,temp_message_type,pte_tlf01.sys_trace_audit_num,pte_tlf01.retrieval_ref_num);
  	devds_log_message(2,1,LErrorMsg,"db_select_DE31_for_amex");

   return PTEMSG_OK;
}/* END DE31 funtion*/

/*************************************************************************************/

/*************************************************************************************/
 
BYTE db_select_DCI_for_batch_upload (pBCH10 bch10_ptr, pCHAR ErrorMsg)
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
        char temp_tran_id[16] = {0};
		char temp_service_code[4] = {0};
		char LErrorMsg[1000] = {0};
		char temp_message_type[5] = {0};
		char temp_message_type_1[5] = {0};
		char temp_message_type_2[5] = {0};
		char temp_response_code[3] = "00";
		char temp_pos_data[13] = {0};
		char temp_NRID[27]={0};
		INT DCI_NRID_len = 0;
		INT Max_DCI_NRID_len = 15;
   EXEC SQL END DECLARE SECTION;
  
   strncpy( pte_tlf01.terminal_id, bch10_ptr->primary_key.device_id, sizeof(pte_bch01.device_id) );
   strncpy( pte_tlf01.merchant_id, bch10_ptr->merchant_id, sizeof(pte_tlf01.merchant_id) );
   strncpy( pte_tlf01.sys_trace_audit_num, bch10_ptr->sys_trace_audit_num, sizeof(pte_tlf01.sys_trace_audit_num) );
   strncpy( pte_tlf01.card_num, bch10_ptr->card_nbr, sizeof(pte_tlf01.card_num) );
   strncpy( pte_tlf01.auth_number, bch10_ptr->auth_number, sizeof(pte_tlf01.auth_number) );
   strncpy( pte_tlf01.retrieval_ref_num, bch10_ptr->primary_key.retrieval_ref_num, sizeof(pte_tlf01.retrieval_ref_num) );
   strncpy( temp_message_type, bch10_ptr->message_type, 4);

    /* For OFFLINE transaction , we have to fatch original details*/

   if(0 == strncmp(temp_message_type,"0220",4))
   {
       strncpy( temp_message_type_1, "0100", 4);
       strncpy( temp_message_type_2, "0200", 4);
   	   if ( db_error_statics_flag == true )
   	   {
      		start_time = ptetime_get_time();
       }
	   EXEC SQL SELECT  
	   visa_tran_id,service_code,PRODUCT17_AMOUNT,RESP_SOURCE INTO :temp_tran_id,:temp_service_code,:temp_pos_data,:temp_NRID 
	   FROM tlf01
		   WHERE card_num            = :pte_tlf01.card_num
		     AND terminal_id         = :pte_tlf01.terminal_id
		     AND merchant_id         = :pte_tlf01.merchant_id
		     AND auth_number		 = :pte_tlf01.auth_number
		     AND (message_type = :temp_message_type_1  OR message_type = :temp_message_type_2) 
			 AND response_code       = :temp_response_code
			 AND rownum = 1;
		 if ( db_error_statics_flag == true )
       	 {
          	end_time = ptetime_get_time();
      	  	duration = end_time - start_time;
      	  	if(duration >= db_error_statics_value)
	  	  	{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_DE31_for_amex , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  	}
       	 }
		 if(NO_DATA_FOUND == SQLCODE)
		 {
		    strncpy( temp_message_type, "0220", 4);
 			
 			EXEC SQL SELECT  
			   visa_tran_id,service_code,PRODUCT17_AMOUNT,RESP_SOURCE INTO :temp_tran_id,:temp_service_code,:temp_pos_data,:temp_NRID  
			   FROM tlf01
			   WHERE card_num            = :pte_tlf01.card_num
			     AND terminal_id         = :pte_tlf01.terminal_id
			     AND merchant_id         = :pte_tlf01.merchant_id
			     AND auth_number		 = :pte_tlf01.auth_number
			     AND message_type		 = :temp_message_type 
				 AND response_code       = :temp_response_code
				 AND rownum = 1;
		}
	}
    else
    {
		if ( db_error_statics_flag == true )
   	    {
      		start_time = ptetime_get_time();
        }

   		EXEC SQL SELECT  
   		visa_tran_id,service_code,PRODUCT17_AMOUNT,RESP_SOURCE INTO :temp_tran_id,:temp_service_code,:temp_pos_data,:temp_NRID 
   		FROM tlf01
   		WHERE card_num              = :pte_tlf01.card_num
     		AND terminal_id         = :pte_tlf01.terminal_id
     		AND merchant_id         = :pte_tlf01.merchant_id
     		AND auth_number		    = :pte_tlf01.auth_number
     		AND retrieval_ref_num   = :pte_tlf01.retrieval_ref_num
 	 		AND message_type		= :temp_message_type 
	 		AND response_code       = :temp_response_code
	 		AND rownum = 1;
	 	if ( db_error_statics_flag == true )
       	{
          	end_time = ptetime_get_time();
      	  	duration = end_time - start_time;
      	  	if(duration >= db_error_statics_value)
	  	  	{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_DE31_for_amex , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  	}
       	}
	}
 	memcpy(bch10_ptr->mcard_banknet,temp_tran_id,sizeof(temp_tran_id)-1);
	memcpy(bch10_ptr->product_codes[6].amount + 2,temp_service_code,sizeof(temp_service_code)-1);
	memcpy(bch10_ptr->product_codes[16].amount,temp_pos_data,sizeof(temp_pos_data)-1);
	DCI_NRID_len = strlen(temp_NRID);
	if(DCI_NRID_len > 0)
	{
		if(DCI_NRID_len > 6)
		{
			memcpy(	bch10_ptr->product_codes[13].code,temp_NRID,6);
			memcpy(	bch10_ptr->product_codes[13].amount,temp_NRID + 6,(Max_DCI_NRID_len - 6));
		}
		else
		{
			memcpy(	bch10_ptr->product_codes[13].code,temp_NRID,DCI_NRID_len);
		}
	}
	
   return PTEMSG_OK;
}/* END db_select_DCI_for_batch_upload*/

/*************************************************************************************/


/*************************************************************************************/
BYTE db_select_tlf01 (  pCHAR          Primary_key, 
                        pTLF01         tlf01_ptr, 
                        pCHAR          ErrorMsg )
{
   INT  retval;

   memset( &db_tlf01, 0, sizeof( db_tlf01 ) );
   strncpy( pte_tlf01.transaction_id, Primary_key, sizeof(pte_tlf01.transaction_id) );
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *
   INTO :db_tlf01
   FROM tlf01
   WHERE transaction_id = :pte_tlf01.transaction_id;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_tlf01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
      
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_tlf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);	
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);	
		return DB_rcode;
	}

   db_to_tlf01 (tlf01_ptr);

   return PTEMSG_OK;
}
/*************************************************************************************/
/*************************************************************************************/
BYTE db_select_nfi02 (  pCHAR          Primary_key, 
                        pNFI02         nfi02_ptr, 
                        pCHAR          ErrorMsg )
{
   INT  retval;

   memset( &db_nfi02, 0, sizeof( db_nfi02 ) );
   strncpy( pte_nfi02.file_name, Primary_key, sizeof(pte_nfi02.file_name) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *
   INTO :db_nfi02
   FROM nfi02;
    
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NFI02 ,Fun_Name : db_select_nfi02 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }      
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_nfi02,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_nfi02 (nfi02_ptr);

   return PTEMSG_OK;
 }


/*************************************************************************************/

/*************************************************************************************/
BYTE db_select_nbf01 (  pCHAR         key, 
                        pNBF01         nbf01_ptr, 
                        pCHAR          ErrorMsg )
{
   INT  retval;

   memset( &db_nbf01, 0, sizeof( db_nbf01 ) );

   strncpy( pte_nbf01.low, key, sizeof(pte_nbf01.low) );
   strncpy( pte_nbf01.high, key + sizeof(pte_nbf01.low), sizeof(pte_nbf01.high) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *        
   INTO :db_nbf01
   FROM nbf01
   WHERE low = :pte_nbf01.low AND high = :pte_nbf01.high ;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NBF01 ,Fun_Name : db_select_nbf01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }   
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_nbf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_nbf01 (nbf01_ptr);

   return PTEMSG_OK;

}
/*************************************************************************************/
/*************************************************************************************/
BYTE db_select_ngf01 (  pCHAR         key, 
                        pNGF01         ngf01_ptr, 
                        pCHAR          ErrorMsg )
{
   INT  retval;

   memset( &db_ngf01, 0, sizeof( db_ngf01 ) );

   strncpy( pte_ngf01.negative_group_id, key, sizeof(pte_ngf01.negative_group_id) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *        
   INTO :db_ngf01
   FROM ngf01
   WHERE negative_group_id = :pte_ngf01.negative_group_id ;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NGF01 ,Fun_Name : db_select_ngf01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_ngf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_ngf01 (ngf01_ptr);

   return PTEMSG_OK;

}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_select_bch10_by_stan (pBCH10    bch10_record, 
                        pBCH10         bch10_ptr, 
                        pCHAR          ErrorMsg )
{
   INT  retval;

   memset( &db_bch10, 0, sizeof( db_bch10 ) );
   strncpy( pte_bch10.device_id, bch10_record->primary_key.device_id, sizeof(pte_bch10.device_id) );
   strncpy( pte_bch10.batch_nbr, bch10_record->primary_key.batch_nbr, sizeof(pte_bch10.batch_nbr) );
   strncpy( pte_bch10.sys_trace_audit_num, bch10_record->sys_trace_audit_num, sizeof(pte_bch10.sys_trace_audit_num) );
   strncpy( pte_bch10.merchant_id,bch10_record->merchant_id,sizeof(pte_bch10.merchant_id) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_bch10
   FROM bch10
   WHERE device_id   		 = :pte_bch10.device_id   AND 
   	     batch_nbr   		 = :pte_bch10.batch_nbr   AND 
   	     merchant_id 		 = :pte_bch10.merchant_id AND 
   	     sys_trace_audit_num = :pte_bch10.sys_trace_audit_num; 
      
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_bch10_by_stan , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch10_by_stan,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch10 (bch10_ptr);

   return PTEMSG_OK;
}
/*************************************************************************************/

/*************************************************************************************/
BYTE db_select_bch10_for_CUP (pBCH10    bch10_record, 
                        pBCH10         bch10_ptr, 
                        pCHAR          ErrorMsg )
{

   memset( &db_bch10, 0, sizeof( db_bch10 ) );
   
   strncpy( pte_bch10.device_id, bch10_record->primary_key.device_id, sizeof(pte_bch10.device_id) );
   strncpy( pte_bch10.batch_nbr, bch10_record->primary_key.batch_nbr, sizeof(pte_bch10.batch_nbr) );
   strncpy( pte_bch10.sys_trace_audit_num, bch10_record->sys_trace_audit_num, sizeof(pte_bch10.sys_trace_audit_num) );
   strncpy( pte_bch10.merchant_id,bch10_record->merchant_id,sizeof(pte_bch10.merchant_id) );
   strncpy( pte_bch10.card_nbr,bch10_record->card_nbr,sizeof(pte_bch10.card_nbr) );
   strncpy( pte_bch10.tran_amount,bch10_record->tran_amount,sizeof(pte_bch10.tran_amount) );
   strncpy( pte_bch10.tran_date,bch10_record->tran_date,sizeof(pte_bch10.tran_date) );
   strncpy( pte_bch10.invoice_nbr, bch10_record->invoice_nbr,sizeof(pte_bch10.invoice_nbr) );
   strncpy( pte_bch10.processing_code, bch10_record->processing_code,sizeof(pte_bch10.processing_code) );
   strncpy( pte_bch10.message_type, bch10_record->message_type,sizeof(pte_bch10.message_type) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   if((0==strncmp(pte_bch10.message_type,"0400",4))&&(0==strncmp(pte_bch10.processing_code,"02",2)))
   {
   
   EXEC SQL SELECT *
   INTO :db_bch10
   FROM bch10
   WHERE device_id 	 = :pte_bch10.device_id   AND 
   	     batch_nbr 	 = :pte_bch10.batch_nbr   AND 
   		 merchant_id = :pte_bch10.merchant_id AND 
   		 card_nbr	 = :pte_bch10.card_nbr    AND
   		 tran_amount = :pte_bch10.tran_amount AND 
   		 invoice_nbr =:pte_bch10.invoice_nbr AND
   		 processing_code =:pte_bch10.processing_code;
   }
   else
   {
   
   EXEC SQL SELECT *
   INTO :db_bch10
   FROM bch10
   WHERE device_id 	 = :pte_bch10.device_id   AND 
   	     batch_nbr 	 = :pte_bch10.batch_nbr   AND 
   		 merchant_id = :pte_bch10.merchant_id AND 
   		 card_nbr	 = :pte_bch10.card_nbr    AND
   		 tran_amount = :pte_bch10.tran_amount AND 
   		 invoice_nbr =:pte_bch10.invoice_nbr;
   
   
   }
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_bch10_for_CUP , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch10_for_CUP,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch10 (bch10_ptr);

   return PTEMSG_OK;
}
/*************************************************************************************/


BYTE db_select_bch10_by_rrn (pBCH10    bch10_record, 
                        pBCH10         bch10_ptr, 
                        pCHAR          ErrorMsg )
{
   INT  retval;

   memset( &db_bch10, 0, sizeof( db_bch10 ) );
   strncpy( pte_bch10.device_id, bch10_record->primary_key.device_id, sizeof(pte_bch10.device_id) );
   strncpy( pte_bch10.merchant_id, bch10_record->merchant_id, sizeof(pte_bch10.merchant_id) );
   strncpy( pte_bch10.batch_nbr, bch10_record->primary_key.batch_nbr, sizeof(pte_bch10.batch_nbr) );
   strncpy( pte_bch10.retrieval_ref_num, bch10_record->primary_key.retrieval_ref_num, sizeof(pte_bch10.retrieval_ref_num) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_bch10
   FROM bch10
   WHERE device_id 	 	   = :pte_bch10.device_id   AND 
   		 merchant_id 	   = :pte_bch10.merchant_id AND 
   		 batch_nbr   	   = :pte_bch10.batch_nbr   AND 
   		 retrieval_ref_num = :pte_bch10.retrieval_ref_num; 
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_bch10_by_rrn , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch10_by_rrn,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch10 (bch10_ptr);

   return PTEMSG_OK;
}

/*************************************************************************************/
/******************************************************************************/
BYTE db_select_bch10_duplicate_txn (pBCH10    bch10_record, 
                                    pBCH10    bch10_ptr, 
                                    pCHAR     ErrorMsg )
{
   INT  retval;

   memset( &db_bch10, 0x00, sizeof(db_bch10) );
   strcpy( pte_bch10.device_id,           bch10_record->primary_key.device_id );
   strcpy( pte_bch10.merchant_id,           bch10_record->merchant_id );
   strcpy( pte_bch10.sys_trace_audit_num, bch10_record->sys_trace_audit_num   );
   strcpy( pte_bch10.message_type,        bch10_record->message_type          );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_bch10
   FROM bch10
   WHERE device_id           = :pte_bch10.device_id    		   AND 
   		 merchant_id		 = :pte_bch10.merchant_id  		   AND 
   		 batch_nbr           = 'ACTIVE'                		   AND 
   		 sys_trace_audit_num = :pte_bch10.sys_trace_audit_num  AND 
   		 message_type        = :pte_bch10.message_type;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_bch10_duplicate_txn , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   } 
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch10_duplicate_txn,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		if(SQLCODE != NO_DATA_FOUND)
		{
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		}
		return DB_rcode;
	}

   db_to_bch10( bch10_ptr );

   return PTEMSG_OK;
}

BYTE db_select_bch20_by_auth_nbr (pBCH20  bch20_record,
                                  pBCH20  bch20_ptr,
                                  pCHAR   ErrorMsg )
{
   INT  retval;

   memset( &db_bch20, 0, sizeof( db_bch20 ) );
   strncpy( pte_bch20.tran_amount, bch20_record->tran_amount, sizeof(pte_bch20.tran_amount) );
   strncpy( pte_bch20.auth_number, bch20_record->auth_number, sizeof(pte_bch20.auth_number) );
   strncpy( pte_bch20.card_nbr,    bch20_record->card_nbr,    sizeof(pte_bch20.card_nbr   ) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_bch20
   FROM bch20
   WHERE    card_nbr    = :pte_bch20.card_nbr    AND    
   			auth_number = :pte_bch20.auth_number AND    
   			tran_amount = :pte_bch20.tran_amount;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH20 ,Fun_Name : db_select_bch20_by_auth_nbr , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   } 
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch20_by_auth_nbr,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch20 (bch20_ptr);

   return PTEMSG_OK;
}


/* For SALE COMP and for OFFLINE SALE*/
BYTE db_select_bch20_by_auth_nbr_card_nbr (pBCH20  bch20_record,
                                  pBCH20  bch20_ptr,
                                  pCHAR   ErrorMsg )
{
   INT  retval;

   memset( &db_bch20, 0, sizeof( db_bch20 ) );
   
   strncpy( pte_bch20.merchant_id, bch20_record->merchant_id, sizeof(pte_bch20.merchant_id) );
   strncpy( pte_bch20.auth_number, bch20_record->auth_number, sizeof(pte_bch20.auth_number) );
   strncpy( pte_bch20.card_nbr,    bch20_record->card_nbr,    sizeof(pte_bch20.card_nbr   ) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_bch20
   FROM bch20
   WHERE    card_nbr    = :pte_bch20.card_nbr     AND    
   		    auth_number = :pte_bch20.auth_number  AND    
   		    merchant_id = :pte_bch20.merchant_id   ;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH20 ,Fun_Name : db_select_bch20_by_auth_nbr_card_nbr , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   } 
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In  db_select_bch20_by_auth_nbr_card_nbr,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch20 (bch20_ptr);

   return PTEMSG_OK;
}

#if BDOR_62_PREAUTH_VOID
BYTE db_select_bch20_for_preauth_void (pBCH20  bch20_record,
                                  pBCH20  bch20_ptr,
                                  pCHAR   ErrorMsg )
{
   INT  retval;

   memset( &db_bch20, 0, sizeof( db_bch20 ) );
   
   strncpy( pte_bch20.merchant_id, bch20_record->merchant_id, sizeof(pte_bch20.merchant_id) );
   strncpy( pte_bch20.auth_number, bch20_record->auth_number, sizeof(pte_bch20.auth_number) );
   strncpy( pte_bch20.card_nbr,    bch20_record->card_nbr,    sizeof(pte_bch20.card_nbr   ) );
   strncpy( pte_bch20.retrieval_ref_num, bch20_record->primary_key.retrieval_ref_num, sizeof(pte_bch20.retrieval_ref_num) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_bch20
   FROM bch20
   WHERE    card_nbr    		= :pte_bch20.card_nbr     AND    
   		    auth_number 		= :pte_bch20.auth_number  AND    
   		    merchant_id 		= :pte_bch20.merchant_id   AND
   		    retrieval_ref_num 	= :pte_bch20.retrieval_ref_num AND
   		    (product5_code = 'procsd'  OR 
   		     product5_code = 'voided'  OR 
   		     product5_code = 'revers'  OR
   		     product5_code = 'expird'  OR
   		     product5_code = 'prused'  OR
   		     product5_code is null )	AND
   		    rownum              = 1;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH20 ,Fun_Name : db_select_bch20_for_preauth_void , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   } 
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In  db_select_bch20_for_preauth_void,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch20 (bch20_ptr);

   return PTEMSG_OK;
}

#endif

BYTE db_select_bch20_by_stan (pBCH20    bch20_record, 
                        pBCH20         bch20_ptr, 
                        pCHAR          ErrorMsg )
{
   INT  retval;

   memset( &db_bch20, 0, sizeof( db_bch20 ) );
   strncpy( pte_bch20.device_id, bch20_record->primary_key.device_id, sizeof(pte_bch20.device_id) );
   strncpy( pte_bch20.merchant_id, bch20_record->merchant_id, sizeof(pte_bch20.merchant_id) );
   strncpy( pte_bch20.batch_nbr, bch20_record->primary_key.batch_nbr, sizeof(pte_bch20.batch_nbr) );
   strncpy( pte_bch20.sys_trace_audit_num, bch20_record->sys_trace_audit_num, sizeof(pte_bch20.sys_trace_audit_num) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_bch20
   FROM bch20
   WHERE device_id   		 = :pte_bch20.device_id   AND 
   		 merchant_id 		 = :pte_bch20.merchant_id AND 
   		 batch_nbr   		 = :pte_bch20.batch_nbr   AND 
   		 sys_trace_audit_num = :pte_bch20.sys_trace_audit_num; 
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH20 ,Fun_Name : db_select_bch20_by_stan , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }  
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch20_by_stan,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch20 (bch20_ptr);

   return PTEMSG_OK;
}
/*************************************************************/

/***************************************************************************/
BYTE db_select_bch20_for_CUP (pBCH20    bch20_record, 
                        pBCH20         bch20_ptr, 
                        pCHAR          ErrorMsg )
{
  
   memset( &db_bch20, 0, sizeof( db_bch20 ) );
   strncpy( pte_bch20.device_id, bch20_record->primary_key.device_id, sizeof(pte_bch20.device_id) );
   strncpy( pte_bch20.merchant_id, bch20_record->merchant_id, sizeof(pte_bch20.merchant_id) );
   strncpy( pte_bch20.batch_nbr, bch20_record->primary_key.batch_nbr, sizeof(pte_bch20.batch_nbr) );
   strncpy( pte_bch20.sys_trace_audit_num, bch20_record->sys_trace_audit_num, sizeof(pte_bch20.sys_trace_audit_num) );
   strncpy( pte_bch20.card_nbr, bch20_record->card_nbr, sizeof(pte_bch20.card_nbr) );
   strncpy( pte_bch20.tran_amount, bch20_record->tran_amount, sizeof(pte_bch20.tran_amount) );
   strncpy( pte_bch20.tran_date,bch20_record->tran_date,sizeof(pte_bch20.tran_date) );
   strncpy( pte_bch20.invoice_nbr, bch20_record->invoice_nbr,sizeof(pte_bch20.invoice_nbr) );
  
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_bch20
   FROM bch20
   WHERE device_id   = :pte_bch20.device_id 	AND 
   		 merchant_id = :pte_bch20.merchant_id 	AND 
   		 batch_nbr   = :pte_bch20.batch_nbr 	AND 
   		 card_nbr    = :pte_bch20.card_nbr 		AND
   		 tran_amount = :pte_bch20.tran_amount 	AND 
   		 invoice_nbr =:pte_bch20.invoice_nbr;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH20 ,Fun_Name : db_select_bch20_for_CUP , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch20_for_CUP,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch20 (bch20_ptr);

   return PTEMSG_OK;
}
/*************************************************************/
/*************************************************************/

BYTE db_select_bch20_by_rrn (pBCH20    bch20_record, 
                        pBCH20         bch20_ptr, 
                        pCHAR          ErrorMsg )
{
   INT  retval;

   memset( &db_bch20, 0, sizeof( db_bch20 ) );
   strncpy( pte_bch20.device_id, bch20_record->primary_key.device_id, sizeof(pte_bch20.device_id) );
   strncpy( pte_bch20.merchant_id, bch20_record->merchant_id, sizeof(pte_bch20.merchant_id) );
   strncpy( pte_bch20.batch_nbr, bch20_record->primary_key.batch_nbr, sizeof(pte_bch20.batch_nbr) );
   strncpy( pte_bch20.retrieval_ref_num, bch20_record->primary_key.retrieval_ref_num, sizeof(pte_bch20.retrieval_ref_num) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_bch20
   FROM bch20
   WHERE device_id   	   = :pte_bch20.device_id     AND 
   		 merchant_id 	   = :pte_bch20.merchant_id   AND 
   		 batch_nbr   	   = :pte_bch20.batch_nbr     AND 
   		 retrieval_ref_num = :pte_bch20.retrieval_ref_num; 
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH20 ,Fun_Name : db_select_bch20_by_rrn , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch20_by_rrn,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch20 (bch20_ptr);

   return PTEMSG_OK;
}
/*************************************************************************************/
/*************************************/
BYTE db_update_emv_raw_by_bch20_auth_number( pBCH20 bch20_ptr,pCHAR tid, pCHAR ErrorMsg)
{

EXEC SQL BEGIN DECLARE SECTION;
      char bch10_tid[21]={0};
      char bch20_tid[21]={0};
      char serviceCode[6]= {0};
      char posEntryCode[5]={0};
   	  char mcard_banknet[51]={0};
   	  char product1_code[6]={0};
   EXEC SQL END DECLARE SECTION;
   bch20_to_db( bch20_ptr );

	memcpy(bch10_tid,tid,sizeof(bch10_tid));

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT TRANSACTION_ID, PRODUCT7_AMOUNT, POS_ENTRY_MODE, MCARD_BANKNET,PRODUCT1_CODE
      INTO  :bch20_tid , :serviceCode , :posEntryCode , :mcard_banknet , :product1_code
      FROM   BCH20
      WHERE  merchant_id 		 = :pte_bch20.merchant_id AND  
      		 batch_nbr           = :pte_bch20.batch_nbr   AND  
      		 card_nbr 			 = :pte_bch20.card_nbr    AND 
      		 auth_number		 = :pte_bch20.auth_number AND
      		 rownum              = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH20 ,Fun_Name : db_update_emv_raw_by_bch20_auth_number_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_emv_raw_by_bch20_auth_number,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
   }
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
     
   EXEC SQL UPDATE emv_raw
   SET TRANSACTION_ID  = :bch10_tid 
   WHERE TRANSACTION_ID  = :bch20_tid;

    if ( db_error_statics_flag == true )
    {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : emv_raw ,Fun_Name : db_update_emv_raw_by_bch20_auth_number_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
    }

    if ( db_error_statics_flag == true )
    {
      start_time = ptetime_get_time();
    }

   	EXEC SQL UPDATE bch20
	SET TRANSACTION_ID	= :bch10_tid 
	WHERE TRANSACTION_ID  = :bch20_tid;
	
	if ( db_error_statics_flag == true )
    {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH20 ,Fun_Name : db_update_emv_raw_by_bch20_auth_number_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
    }
	if(strlen(serviceCode) != 0)
	{
		strncpy(bch20_ptr->product_codes[6].amount,serviceCode,6);
	}
	if(strlen(posEntryCode) != 0)
	{
		strcpy(bch20_ptr->pos_entry_mode,posEntryCode);
	}
	if(strlen(mcard_banknet) != 0)
	{
		strcpy(bch20_ptr->mcard_banknet,mcard_banknet);
	}
		if(strlen(product1_code) != 0)
	{
		strcpy(bch20_ptr->product_codes[0].code,product1_code);
	}
	
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_emv_raw_by_bch20_auth_number,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_select_bch10_detail_by_batch_tid_stan   ( pCHAR batch_number,
                                         pCHAR device_id, pCHAR stan,pCHAR merchant_id,
                                         pBCH01  bch01_ptr,
                                         pCHAR     ErrorMsg)
{
   INT  retval;

   memset( &db_bch10, 0, sizeof( db_bch10 ) );
   
   strncpy ( pte_bch10.batch_nbr, batch_number, sizeof(pte_bch10.batch_nbr) );
   strncpy ( pte_bch10.device_id, device_id, sizeof(pte_bch10.device_id) );
   strncpy ( pte_bch10.merchant_id, merchant_id, sizeof(pte_bch10.merchant_id) );
   strncpy ( pte_bch10.sys_trace_audit_num, stan, sizeof(pte_bch10.sys_trace_audit_num) );
   

   /*  TOTALS for SALE*/
   
   pte_bch10.tx_key = AUTH_SALE;
   memset(pte_bch01.total_credit_amt, 0,sizeof(pte_bch01.total_credit_amt));
   memset(pte_bch01.total_credit_cnt, 0,sizeof(pte_bch01.total_credit_cnt));

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT 
      rtrim(to_char(sum(to_number(tran_amount)))), 
      rtrim(to_char(count(tx_key)))
   INTO 
      :pte_bch01.total_credit_amt,
      :pte_bch01.total_credit_cnt
   FROM bch10
   WHERE device_id   		 = :pte_bch10.device_id     AND 
   	     merchant_id 		 = :pte_bch10.merchant_id   AND 
   	     batch_nbr   		 = :pte_bch10.batch_nbr     AND 
   	     tx_key      		 = :pte_bch10.tx_key        AND 
   	     sys_trace_audit_num = :pte_bch10.sys_trace_audit_num;
  
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_bch10_detail_by_batch_tid_stan_S1 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In  db_select_bch10_detail_by_batch_tid_stan,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   strcpy(bch01_ptr->total_credit_amt, pte_bch01.total_credit_amt);
   strcpy(bch01_ptr->total_credit_cnt, pte_bch01.total_credit_cnt);

   strcpy(bch01_ptr->total_debit_amt, pte_bch01.total_credit_amt);
   strcpy(bch01_ptr->total_debit_cnt, pte_bch01.total_credit_cnt);


   
   /*  TOTALS for VOID SALE*/
     
   pte_bch10.tx_key = AUTH_VOID_SALE;
   memset(pte_bch01.total_credit_amt, 0,sizeof(pte_bch01.total_credit_amt));
   memset(pte_bch01.total_credit_cnt, 0,sizeof(pte_bch01.total_credit_cnt));

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT 
      rtrim(to_char(sum(to_number(tran_amount)))), 
      rtrim(to_char(count(tx_key)))
   INTO 
      :pte_bch01.total_credit_amt,
      :pte_bch01.total_credit_cnt
   FROM bch10
   WHERE device_id 			 = :pte_bch10.device_id     AND 
  		 merchant_id 		 = :pte_bch10.merchant_id   AND 
  		 batch_nbr 			 = :pte_bch10.batch_nbr     AND 
  		 tx_key 			 = :pte_bch10.tx_key        AND 
  		 sys_trace_audit_num = :pte_bch10.sys_trace_audit_num;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_bch10_detail_by_batch_tid_stan_S2 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
  
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch10_detail_by_batch_tid_stan,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   itoa(atoi(bch01_ptr->total_credit_amt) + atoi(pte_bch01.total_credit_amt), pte_bch01.total_credit_amt, 10);
   itoa(atoi(bch01_ptr->total_credit_cnt) + atoi(pte_bch01.total_credit_cnt), pte_bch01.total_credit_cnt, 10);
   strcpy(bch01_ptr->total_credit_amt, pte_bch01.total_credit_amt);
   strcpy(bch01_ptr->total_credit_cnt, pte_bch01.total_credit_cnt);


	/*  TOTALS for CASH ADVANCE*/
  
     
  pte_bch10.tx_key = AUTH_CASH_ADVANCE;
  memset(pte_bch01.total_credit_amt, 0,sizeof(pte_bch01.total_credit_amt));
  memset(pte_bch01.total_credit_cnt, 0,sizeof(pte_bch01.total_credit_cnt));

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT 
      rtrim(to_char(sum(to_number(tran_amount)))), 
      rtrim(to_char(count(tx_key)))
   INTO 
      :pte_bch01.total_credit_amt,
      :pte_bch01.total_credit_cnt
   FROM bch10
   WHERE device_id 			 = :pte_bch10.device_id   AND 
   		 merchant_id 		 = :pte_bch10.merchant_id AND 
   		 batch_nbr 			 = :pte_bch10.batch_nbr   AND 
   		 tx_key 			 = :pte_bch10.tx_key      AND 
   		 sys_trace_audit_num = :pte_bch10.sys_trace_audit_num;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_bch10_detail_by_batch_tid_stan_S3 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch10_detail_by_batch_tid_stan,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   itoa(atoi(bch01_ptr->total_credit_amt) + atoi(pte_bch01.total_credit_amt), bch01_ptr->total_credit_amt, 10);
   itoa(atoi(bch01_ptr->total_credit_cnt) + atoi(pte_bch01.total_credit_cnt), bch01_ptr->total_credit_cnt, 10);
   
   itoa(atoi(bch01_ptr->total_debit_amt) + atoi(pte_bch01.total_credit_amt), bch01_ptr->total_debit_amt, 10);
   itoa(atoi(bch01_ptr->total_debit_cnt) + atoi(pte_bch01.total_credit_cnt), bch01_ptr->total_debit_cnt, 10);

/* Totals for VOID_CASH_ADVANCE */
    
  pte_bch10.tx_key = AUTH_VOID_CASH_ADVANCE;
  memset(pte_bch01.total_credit_amt, 0,sizeof(pte_bch01.total_credit_amt));
  memset(pte_bch01.total_credit_cnt, 0,sizeof(pte_bch01.total_credit_cnt));

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT 
      rtrim(to_char(sum(to_number(tran_amount)))), 
      rtrim(to_char(count(tx_key)))
   INTO 
      :pte_bch01.total_credit_amt,
      :pte_bch01.total_credit_cnt
   FROM bch10
   WHERE device_id 			 = :pte_bch10.device_id   	AND 
  	 	 merchant_id 		 = :pte_bch10.merchant_id   AND 
   		 batch_nbr 			 = :pte_bch10.batch_nbr  	AND 
   		 tx_key 			 = :pte_bch10.tx_key   		AND 
   		 sys_trace_audit_num = :pte_bch10.sys_trace_audit_num;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_bch10_detail_by_batch_tid_stan_S4 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch10_detail_by_batch_tid_stan,ST1:%d,ST2:%d_4",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   itoa(atoi(bch01_ptr->total_credit_amt) + atoi(pte_bch01.total_credit_amt), bch01_ptr->total_credit_amt, 10);
   itoa(atoi(bch01_ptr->total_credit_cnt) + atoi(pte_bch01.total_credit_cnt), bch01_ptr->total_credit_cnt, 10);
  

   /* Totals for REFUND */
   memset(pte_bch01.total_credit_amt, 0,sizeof(pte_bch01.total_credit_amt));
   memset(pte_bch01.total_credit_cnt, 0,sizeof(pte_bch01.total_credit_cnt));

 
   pte_bch10.tx_key = AUTH_REFUND;

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT 
      rtrim(to_char(sum(to_number(tran_amount)))), 
      rtrim(to_char(count(tx_key)))
   INTO 
      :pte_bch01.total_credit_refund_amt,
      :pte_bch01.total_credit_refund_cnt
   FROM bch10
   WHERE device_id 			 = :pte_bch10.device_id   AND 
   		 merchant_id 		 = :pte_bch10.merchant_id AND 
   		 batch_nbr 			 = :pte_bch10.batch_nbr   AND 
   		 tx_key 			 = :pte_bch10.tx_key   	  AND 
   		 sys_trace_audit_num = :pte_bch10.sys_trace_audit_num;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_bch10_detail_by_batch_tid_stan_S5 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch10_detail_by_batch_tid_stan,ST1:%d,ST2:%d_5",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
	
   strcpy(bch01_ptr->total_credit_refund_amt, pte_bch01.total_credit_refund_amt);
   strcpy(bch01_ptr->total_credit_refund_cnt, pte_bch01.total_credit_refund_cnt);

   strcpy(bch01_ptr->total_debit_refund_amt, pte_bch01.total_credit_refund_amt);
   strcpy(bch01_ptr->total_debit_refund_cnt, pte_bch01.total_credit_refund_cnt);

  /* Totals for VOID_REFUND */
   
   
   pte_bch10.tx_key = AUTH_VOID_REFUND;

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT 
      rtrim(to_char(sum(to_number(tran_amount)))), 
      rtrim(to_char(count(tx_key)))
   INTO 
      :pte_bch01.total_credit_refund_amt,
      :pte_bch01.total_credit_refund_cnt
   FROM bch10
   WHERE device_id 			 = :pte_bch10.device_id   AND 
   		 merchant_id 		 = :pte_bch10.merchant_id AND 
   		 batch_nbr 			 = :pte_bch10.batch_nbr   AND 
   		 tx_key 			 = :pte_bch10.tx_key   	  AND 
   		 sys_trace_audit_num = :pte_bch10.sys_trace_audit_num;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_bch10_detail_by_batch_tid_stan_S6 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch10_detail_by_batch_tid_stan,ST1:%d,ST2:%d_6",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
	
   itoa(atoi(bch01_ptr->total_credit_refund_amt) + atoi(pte_bch01.total_credit_refund_amt), pte_bch01.total_credit_refund_amt, 10);
   itoa(atoi(bch01_ptr->total_credit_refund_cnt) + atoi(pte_bch01.total_credit_refund_cnt), pte_bch01.total_credit_refund_cnt, 10);
   strcpy(bch01_ptr->total_credit_refund_amt, pte_bch01.total_credit_refund_amt);
   strcpy(bch01_ptr->total_credit_refund_cnt, pte_bch01.total_credit_refund_cnt);

   return PTEMSG_OK;

}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_select_bch10_mp_detail_by_batch_tid_stan   ( pCHAR batch_number,
                                         pCHAR device_id, pCHAR stan,pCHAR merchant_id,
                                         pBCH01_MP  bch01_mp_ptr,
                                         pCHAR     ErrorMsg)
{
   INT  retval;

   memset( &db_bch10, 0, sizeof( db_bch10 ) );
   
   strncpy ( pte_bch10.batch_nbr, batch_number, sizeof(pte_bch10.batch_nbr) );
   strncpy ( pte_bch10.device_id, device_id, sizeof(pte_bch10.device_id) );
   strncpy ( pte_bch10.merchant_id, merchant_id, sizeof(pte_bch10.merchant_id) );
   strncpy ( pte_bch10.sys_trace_audit_num, stan, sizeof(pte_bch10.sys_trace_audit_num) );

   

   /*  TOTALS for SALE*/
   
   pte_bch10.tx_key = AUTH_SALE;
   memset(pte_bch01_mp.total_credit_amt, 0,sizeof(pte_bch01_mp.total_credit_amt));
   memset(pte_bch01_mp.total_credit_cnt, 0,sizeof(pte_bch01_mp.total_credit_cnt));

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT 
      rtrim(to_char(sum(to_number(tran_amount)))), 
      rtrim(to_char(count(tx_key)))
   INTO 
      :pte_bch01_mp.total_credit_amt,
      :pte_bch01_mp.total_credit_cnt
   FROM bch10
   WHERE device_id 			 = :pte_bch10.device_id   AND 
  		 merchant_id 		 = :pte_bch10.merchant_id AND 
  		 batch_nbr 			 = :pte_bch10.batch_nbr   AND 
   		 tx_key 			 = :pte_bch10.tx_key   	  AND 
   		 sys_trace_audit_num = :pte_bch10.sys_trace_audit_num;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_bch10_mp_detail_by_batch_tid_stan_S1 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch10_mp_detail_by_batch_tid_stan,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   strcpy(bch01_mp_ptr->total_credit_amt, pte_bch01_mp.total_credit_amt);
   strcpy(bch01_mp_ptr->total_credit_cnt, pte_bch01_mp.total_credit_cnt);

   strcpy(bch01_mp_ptr->total_debit_amt, pte_bch01_mp.total_credit_amt);
   strcpy(bch01_mp_ptr->total_debit_cnt, pte_bch01_mp.total_credit_cnt);


   
   /*  TOTALS for VOID SALE*/
     
   pte_bch10.tx_key = AUTH_VOID_SALE;
   memset(pte_bch01_mp.total_credit_amt, 0,sizeof(pte_bch01_mp.total_credit_amt));
   memset(pte_bch01_mp.total_credit_cnt, 0,sizeof(pte_bch01_mp.total_credit_cnt));

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT 
      rtrim(to_char(sum(to_number(tran_amount)))), 
      rtrim(to_char(count(tx_key)))
   INTO 
      :pte_bch01_mp.total_credit_amt,
      :pte_bch01_mp.total_credit_cnt
   FROM bch10
   WHERE device_id 			 = :pte_bch10.device_id   AND 
  		 merchant_id 		 = :pte_bch10.merchant_id AND 
   		 batch_nbr 			 = :pte_bch10.batch_nbr   AND 
   		 tx_key 			 = :pte_bch10.tx_key   	  AND 
   		 sys_trace_audit_num = :pte_bch10.sys_trace_audit_num;
  
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_bch10_mp_detail_by_batch_tid_stan_S2 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch10_mp_detail_by_batch_tid_stan,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   itoa(atoi(bch01_mp_ptr->total_credit_amt) + atoi(pte_bch01_mp.total_credit_amt), pte_bch01_mp.total_credit_amt, 10);
   itoa(atoi(bch01_mp_ptr->total_credit_cnt) + atoi(pte_bch01_mp.total_credit_cnt), pte_bch01_mp.total_credit_cnt, 10);
   strcpy(bch01_mp_ptr->total_credit_amt, pte_bch01_mp.total_credit_amt);
   strcpy(bch01_mp_ptr->total_credit_cnt, pte_bch01_mp.total_credit_cnt);


	/*  TOTALS for CASH ADVANCE*/
  
     
  pte_bch10.tx_key = AUTH_CASH_ADVANCE;
  memset(pte_bch01_mp.total_credit_amt, 0,sizeof(pte_bch01_mp.total_credit_amt));
  memset(pte_bch01_mp.total_credit_cnt, 0,sizeof(pte_bch01_mp.total_credit_cnt));
   
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT 
      rtrim(to_char(sum(to_number(tran_amount)))), 
      rtrim(to_char(count(tx_key)))
   INTO 
      :pte_bch01_mp.total_credit_amt,
      :pte_bch01_mp.total_credit_cnt
   FROM bch10
   WHERE device_id 			 = :pte_bch10.device_id   AND 
   		 merchant_id		 = :pte_bch10.merchant_id AND 
  		 batch_nbr 			 = :pte_bch10.batch_nbr   AND 
   		 tx_key 			 = :pte_bch10.tx_key   	  AND 
   		 sys_trace_audit_num = :pte_bch10.sys_trace_audit_num;

   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_bch10_mp_detail_by_batch_tid_stan_S3 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch10_mp_detail_by_batch_tid_stan,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   itoa(atoi(bch01_mp_ptr->total_credit_amt) + atoi(pte_bch01_mp.total_credit_amt), bch01_mp_ptr->total_credit_amt, 10);
   itoa(atoi(bch01_mp_ptr->total_credit_cnt) + atoi(pte_bch01_mp.total_credit_cnt), bch01_mp_ptr->total_credit_cnt, 10);
   
   itoa(atoi(bch01_mp_ptr->total_debit_amt) + atoi(pte_bch01_mp.total_credit_amt), bch01_mp_ptr->total_debit_amt, 10);
   itoa(atoi(bch01_mp_ptr->total_debit_cnt) + atoi(pte_bch01_mp.total_credit_cnt), bch01_mp_ptr->total_debit_cnt, 10);

/* Totals for VOID_CASH_ADVANCE */
    
  pte_bch10.tx_key = AUTH_VOID_CASH_ADVANCE;
  memset(pte_bch01_mp.total_credit_amt, 0,sizeof(pte_bch01_mp.total_credit_amt));
  memset(pte_bch01_mp.total_credit_cnt, 0,sizeof(pte_bch01_mp.total_credit_cnt));

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT 
      rtrim(to_char(sum(to_number(tran_amount)))), 
      rtrim(to_char(count(tx_key)))
   INTO 
      :pte_bch01_mp.total_credit_amt,
      :pte_bch01_mp.total_credit_cnt
   FROM bch10
   WHERE device_id 			 = :pte_bch10.device_id   AND 
   		 merchant_id 		 = :pte_bch10.merchant_id AND 
  		 batch_nbr 			 = :pte_bch10.batch_nbr   AND 
   		 tx_key 			 = :pte_bch10.tx_key   	  AND 
   		 sys_trace_audit_num = :pte_bch10.sys_trace_audit_num;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_bch10_mp_detail_by_batch_tid_stan_S4 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch10_mp_detail_by_batch_tid_stan,ST1:%d,ST2:%d_4",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   itoa(atoi(bch01_mp_ptr->total_credit_amt) + atoi(pte_bch01_mp.total_credit_amt), bch01_mp_ptr->total_credit_amt, 10);
   itoa(atoi(bch01_mp_ptr->total_credit_cnt) + atoi(pte_bch01_mp.total_credit_cnt), bch01_mp_ptr->total_credit_cnt, 10);
  

   /* Totals for REFUND */
   memset(pte_bch01_mp.total_credit_amt, 0,sizeof(pte_bch01_mp.total_credit_amt));
   memset(pte_bch01_mp.total_credit_cnt, 0,sizeof(pte_bch01_mp.total_credit_cnt));

 
   pte_bch10.tx_key = AUTH_REFUND;

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT 
      rtrim(to_char(sum(to_number(tran_amount)))), 
      rtrim(to_char(count(tx_key)))
   INTO 
      :pte_bch01_mp.total_credit_refund_amt,
      :pte_bch01_mp.total_credit_refund_cnt
   FROM bch10
   WHERE device_id 			 = :pte_bch10.device_id   AND 
   		 merchant_id 		 = :pte_bch10.merchant_id AND 
   		 batch_nbr 			 = :pte_bch10.batch_nbr   AND 
   		 tx_key 			 = :pte_bch10.tx_key   	  AND 
   		 sys_trace_audit_num = :pte_bch10.sys_trace_audit_num;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_bch10_mp_detail_by_batch_tid_stan_S5 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch10_mp_detail_by_batch_tid_stan,ST1:%d,ST2:%d_5",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
	
   strcpy(bch01_mp_ptr->total_credit_refund_amt, pte_bch01_mp.total_credit_refund_amt);
   strcpy(bch01_mp_ptr->total_credit_refund_cnt, pte_bch01_mp.total_credit_refund_cnt);

   strcpy(bch01_mp_ptr->total_debit_refund_amt, pte_bch01_mp.total_credit_refund_amt);
   strcpy(bch01_mp_ptr->total_debit_refund_cnt, pte_bch01_mp.total_credit_refund_cnt);

  /* Totals for VOID_REFUND */
   
   
   pte_bch10.tx_key = AUTH_VOID_REFUND;

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT 
      rtrim(to_char(sum(to_number(tran_amount)))), 
      rtrim(to_char(count(tx_key)))
   INTO 
      :pte_bch01_mp.total_credit_refund_amt,
      :pte_bch01_mp.total_credit_refund_cnt
   FROM bch10
   WHERE device_id 		     = :pte_bch10.device_id   AND 
   		 merchant_id 		 = :pte_bch10.merchant_id AND 
   		 batch_nbr			 = :pte_bch10.batch_nbr   AND 
   		 tx_key 			 = :pte_bch10.tx_key   	  AND 
   		 sys_trace_audit_num = :pte_bch10.sys_trace_audit_num;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_bch10_mp_detail_by_batch_tid_stan_S6 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch10_mp_detail_by_batch_tid_stan,ST1:%d,ST2:%d_6",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
	
   itoa(atoi(bch01_mp_ptr->total_credit_refund_amt) + atoi(pte_bch01_mp.total_credit_refund_amt), pte_bch01_mp.total_credit_refund_amt, 10);
   itoa(atoi(bch01_mp_ptr->total_credit_refund_cnt) + atoi(pte_bch01_mp.total_credit_refund_cnt), pte_bch01_mp.total_credit_refund_cnt, 10);
   strcpy(bch01_mp_ptr->total_credit_refund_amt, pte_bch01_mp.total_credit_refund_amt);
   strcpy(bch01_mp_ptr->total_credit_refund_cnt, pte_bch01_mp.total_credit_refund_cnt);

   return PTEMSG_OK;

}

/*************************************************************************************/


/*************************************************************************************/

BYTE db_select_tlf01_by_stan (pTLF01   tlf01_record, 
                        pTLF01         tlf01_ptr, 
						pCHAR          ErrorMsg )
{
   INT  retval;

   memset( &db_tlf01, 0, sizeof( db_tlf01 ) );
   strncpy( pte_tlf01.sys_trace_audit_num, tlf01_record->sys_trace_audit_num, sizeof(pte_tlf01.sys_trace_audit_num) );
   strncpy( pte_tlf01.card_num, tlf01_record->card_num, sizeof(pte_tlf01.card_num) );
   strncpy( pte_tlf01.total_amount, tlf01_record->total_amount, sizeof(pte_tlf01.total_amount) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   /* Force usage of the card number index. */
   EXEC SQL SELECT /*+ index(TLF01 IDX_TLF01_CARD_NUM) */  *
   INTO :db_tlf01
   FROM tlf01
   WHERE card_num = :pte_tlf01.card_num
         AND sys_trace_audit_num = :pte_tlf01.sys_trace_audit_num
         AND total_amount = :pte_tlf01.total_amount
         AND rownum = 1;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_tlf01_by_stan , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   } 
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_tlf01_by_stan,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_tlf01 (tlf01_ptr);

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/

BYTE db_select_tlf01_by_terminal_id (pTLF01   tlf01_record, 
                                     pTLF01   tlf01_ptr, 
                                     pCHAR    ErrorMsg )
{
   INT  retval;

   memset( &db_tlf01, 0, sizeof( db_tlf01 ) );
   strncpy( pte_tlf01.terminal_id,  tlf01_record->terminal_id,  sizeof(pte_tlf01.terminal_id) );
   strncpy( pte_tlf01.card_num,     tlf01_record->card_num,     sizeof(pte_tlf01.card_num)    );
   strncpy( pte_tlf01.total_amount, tlf01_record->total_amount, sizeof(pte_tlf01.total_amount));

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Force usage of the card number index. */
   EXEC SQL SELECT /*+ index(TLF01 IDX_TLF01_CARD_NUM) */  *
   INTO :db_tlf01
   FROM tlf01
   WHERE card_num           = :pte_tlf01.card_num
         AND terminal_id    = :pte_tlf01.terminal_id
         AND total_amount   = :pte_tlf01.total_amount
         AND ascii(tx_key) != 19
         AND ascii(tx_key) != 119
         AND rownum         = 1
         AND date_yyyymmdd  = (select max(date_yyyymmdd) from tlf01 
                               where
                                 card_num = :pte_tlf01.card_num
                                 AND terminal_id = :pte_tlf01.terminal_id
                                 AND total_amount = :pte_tlf01.total_amount
                                 AND ascii(tx_key) != 19
                                 AND ascii(tx_key) != 119
                              );
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_tlf01_by_terminal_id , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }    
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_tlf01_by_terminal_id,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_tlf01 (tlf01_ptr);


   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/

BYTE db_select_tlf01_by_original_tran (pTLF01   tlf01_record,
                                    pTLF01         tlf01_ptr,  
                        			pCHAR          ErrorMsg )
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
        char response_code[3]="00";
   EXEC SQL END DECLARE SECTION;
   memset( &db_tlf01, 0, sizeof( db_tlf01 ) );
   strncpy( pte_tlf01.terminal_id, tlf01_record->terminal_id, sizeof(pte_tlf01.terminal_id) );
   strncpy( pte_tlf01.merchant_id, tlf01_record->merchant_id, sizeof(pte_tlf01.merchant_id) );
   strncpy( pte_tlf01.sys_trace_audit_num, tlf01_record->sys_trace_audit_num, sizeof(pte_tlf01.sys_trace_audit_num) );
   strncpy( pte_tlf01.card_num, tlf01_record->card_num, sizeof(pte_tlf01.card_num) );
   /* strncpy( pte_tlf01.invoice_number, tlf01_record->invoice_number, sizeof(pte_tlf01.invoice_number) );*/

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   /* Force usage of the card number index. */
   EXEC SQL SELECT /*+ index(TLF01 IDX_TLF01_CARD_NUM) */  *
   INTO :db_tlf01
   FROM tlf01
   WHERE card_num = :pte_tlf01.card_num
     AND terminal_id = :pte_tlf01.terminal_id
     AND merchant_id  = :pte_tlf01.merchant_id
     AND sys_trace_audit_num = :pte_tlf01.sys_trace_audit_num
     AND response_code = :response_code
     AND rownum = 1;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_tlf01_by_original_tran , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_tlf01_by_original_tran,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_tlf01 (tlf01_ptr);

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/

BYTE db_select_tlf01_by_reversed_tran (pTLF01   tlf01_record,
                                    pTLF01         tlf01_ptr, 
                        			pCHAR          ErrorMsg )
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
        char response_code[3]="00";
   EXEC SQL END DECLARE SECTION;
   memset( &db_tlf01, 0, sizeof( db_tlf01 ) );
   strncpy( pte_tlf01.terminal_id, tlf01_record->terminal_id, sizeof(pte_tlf01.terminal_id) );
   strncpy( pte_tlf01.merchant_id, tlf01_record->merchant_id, sizeof(pte_tlf01.merchant_id) );
   strncpy( pte_tlf01.sys_trace_audit_num, tlf01_record->sys_trace_audit_num, sizeof(pte_tlf01.sys_trace_audit_num) );
   strncpy( pte_tlf01.card_num, tlf01_record->card_num, sizeof(pte_tlf01.card_num) );
   strncpy( pte_tlf01.invoice_number, tlf01_record->invoice_number, sizeof(pte_tlf01.invoice_number) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   /* Force usage of the card number index. */
   EXEC SQL SELECT /*+ index(TLF01 IDX_TLF01_CARD_NUM) */  *
   INTO :db_tlf01
   FROM tlf01
   WHERE card_num            = :pte_tlf01.card_num
     AND terminal_id         = :pte_tlf01.terminal_id
     AND merchant_id         = :pte_tlf01.merchant_id
     AND sys_trace_audit_num = :pte_tlf01.sys_trace_audit_num
     AND invoice_number      = :pte_tlf01.invoice_number
     AND response_code       = :response_code
     AND message_type     LIKE '04%'
     AND rownum = 1;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_tlf01_by_reversed_tran , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_tlf01_by_reversed_tran,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   
   db_to_tlf01 (tlf01_ptr);

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/

BYTE db_select_tlf01_for_sales_completion (pTLF01   tlf01_record,
                                    pTLF01         tlf01_ptr, 
                        			pCHAR          ErrorMsg )
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
        char response_code[3]="00";
   EXEC SQL END DECLARE SECTION;

   memset( &db_tlf01, 0, sizeof( db_tlf01 ) );
   
   
   strncpy( pte_tlf01.card_num, tlf01_record->card_num, sizeof(pte_tlf01.card_num) );
   strncpy( pte_tlf01.auth_number, tlf01_record->auth_number, sizeof(pte_tlf01.auth_number) );
   
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Force usage of the card number index. */
   EXEC SQL SELECT /*+ index(TLF01 IDX_TLF01_CARD_NUM) */  *
   INTO :db_tlf01
   FROM tlf01
   WHERE card_num      = :pte_tlf01.card_num
     AND auth_number   = :pte_tlf01.auth_number
     AND response_code = :response_code
     AND rownum = 1;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_tlf01_for_sales_completion , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_tlf01_for_sales_completion,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   
   db_to_tlf01 (tlf01_ptr);

   return PTEMSG_OK;
}



/*************************************************************************************/
/*************************************************************************************/

BYTE db_select_tlf01_by_rrn (pTLF01    tlf01_record, 
                        pTLF01         tlf01_ptr, 
                        pCHAR          ErrorMsg )
{
   INT  retval;

   memset( &db_tlf01, 0, sizeof( db_tlf01 ) );
   strncpy( pte_tlf01.card_num, tlf01_record->card_num, sizeof(pte_tlf01.card_num) );
   strncpy( pte_tlf01.retrieval_ref_num, tlf01_record->retrieval_ref_num, sizeof(pte_tlf01.retrieval_ref_num) );
   strncpy( pte_tlf01.auth_number, tlf01_record->auth_number, sizeof(pte_tlf01.auth_number) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   /* Force usage of the card number index. */
   EXEC SQL SELECT /*+ index(TLF01 IDX_TLF01_CARD_NUM) */  *
   INTO :db_tlf01
   FROM tlf01
   WHERE card_num = :pte_tlf01.card_num
     AND retrieval_ref_num = :pte_tlf01.retrieval_ref_num
     AND auth_number = :pte_tlf01.auth_number;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
     	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_tlf01_by_rrn , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_tlf01_by_rrn,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_tlf01 (tlf01_ptr);

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/

BYTE db_select_tlf01_saf (pTLF01    tlf01_record, 
                        pTLF01         tlf01_ptr, 
                        pCHAR          ErrorMsg )
{
   INT  retval;

   memset( &db_tlf01, 0, sizeof( db_tlf01 ) );
   strncpy( pte_tlf01.authorizing_host_queue, tlf01_record->authorizing_host_queue, sizeof(pte_tlf01.authorizing_host_queue) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_tlf01
   FROM tlf01
   WHERE rownum = 1 AND 
         saf = 'Y' AND
         authorizing_host_queue = :pte_tlf01.authorizing_host_queue 
   ORDER BY date_yyyymmdd, time_hhmmss;
      
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
     	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_tlf01_saf , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_tlf01_saf,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_tlf01 (tlf01_ptr);

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/

BYTE db_select_tlf01_for_visa_rejects( pTLF01 tlf01_record,
                                       pTLF01 tlf01_ptr, 
                                       pCHAR  ErrorMsg )
{
   INT   retval;
   BYTE  retcode;

   memset( &db_tlf01, 0x00, sizeof(db_tlf01) );

   strncpy( pte_tlf01.sys_trace_audit_num,
            tlf01_record->sys_trace_audit_num,
            sizeof(pte_tlf01.sys_trace_audit_num) );

   strncpy( pte_tlf01.card_num,
            tlf01_record->card_num,
            sizeof(pte_tlf01.card_num) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   /* Force usage of the card number index. */
   EXEC SQL SELECT /*+ index(TLF01 IDX_TLF01_CARD_NUM) */  *
   INTO  :db_tlf01
   FROM   tlf01
   WHERE  card_num = :pte_tlf01.card_num
     AND  sys_trace_audit_num = :pte_tlf01.sys_trace_audit_num
     AND  rownum = 1;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_tlf01_for_visa_rejects , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_tlf01_for_visa_rejects,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   else
   {
      db_to_tlf01 (tlf01_ptr);
      retcode = PTEMSG_OK;
   }
   return( retcode );
}

/******************************************************************************
   Find a Reload Confirm transaction in TLF01.
   Need this to void a reload at EB host.
 ******************************************************************************/
BYTE db_select_tlf01_for_void_reload( pTLF01  tlf01_record,
                                      pTLF01  tlf01_ptr,
                                      pCHAR   ErrorMsg )
{
   INT   retval;
   BYTE  retcode = PTEMSG_OK;


   memset( &db_tlf01, 0x00, sizeof(db_tlf01) );

    /* SCR 13515 - ThoughtFocus */
   memcpy( pte_tlf01.mcard_banknet, tlf01_record->mcard_banknet, sizeof(pte_tlf01.mcard_banknet));

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_tlf01
   FROM tlf01
   WHERE transaction_id = :pte_tlf01.mcard_banknet;

   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_tlf01_for_void_reload , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_tlf01_for_void_reload,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   else
      db_to_tlf01( tlf01_ptr );

   return( retcode );
}

/******************************************************************************
   Find the record in TLF01 that contains the most recently assigned
   authorization number by ATP (ON-US). For efficiency, look at 'today'
   and 'yesterday' only. This allows us to use the index on system date.
 ******************************************************************************/
BYTE db_select_tlf01_last_auth_nbr( pTLF01  tlf01_record,
                                    pTLF01  tlf01_ptr,
                                    pCHAR   ErrorMsg )
{
   INT   retval;
   INT   i;
   BYTE  retcode = PTEMSG_OK;

   EXEC SQL BEGIN DECLARE SECTION;
      char sys_date[9]="";
   EXEC SQL END DECLARE SECTION;


   memset( &db_tlf01, 0x00, sizeof(db_tlf01) );
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Get 'today' */
   EXEC SQL SELECT  to_char( sysdate,'YYYYMMDD' )
            INTO   :sys_date
            FROM    dual;
    if ( db_error_statics_flag == true )
    {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : dual ,Fun_Name : db_select_tlf01_last_auth_nbr , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
    }
   /* Loop twice: once for today, once for yesterday if necessary. */
   for( i=0; i<2; i++ )
   {

      /* First, see if 'today' has any approved ON-US transactions.
       * ON-US is defined by field AUTH_2 being set to "LA" for
       * Local Authorization. Tran Finish Time is used to find the
       * most recent transaction.
       */
      if ( db_error_statics_flag == true )
      {
      		start_time = ptetime_get_time();
      } 
      EXEC SQL
         SELECT  *
         INTO   :db_tlf01
         FROM    TLF01
         WHERE   system_date = :sys_date
           AND   auth_number IS NOT NULL
           AND   auth_2 = 'LA'
           AND   tran_finish_time =
                   ( SELECT MAX(tran_finish_time)
                     FROM   TLF01
                     WHERE  system_date = :sys_date
                       AND  auth_number IS NOT NULL
                       AND  auth_2 = 'LA'
                   );
      if ( db_error_statics_flag == true )
      {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_tlf01_last_auth_nbr , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
      }
      if ( SQLCODE == NO_DATA_FOUND )
      {
         if ( i == 0 )
         {
            /* No ON-US records today.  Check yesterday. */
            EXEC SQL SELECT  to_char( sysdate-1,'YYYYMMDD' )
                     INTO   :sys_date
                     FROM    dual;
         }
         else
         {
            /* No ON-US records yesterday. Send back No Data Found. */
            
			memset(er_buf,0x00,sizeof(er_buf));
			sprintf(er_buf,"In db_select_tlf01_last_auth_nbr,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
	
         }
      }
      else
      {
         if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
         {
			memset(er_buf,0x00,sizeof(er_buf));
			sprintf(er_buf,"In db_select_tlf01_last_auth_nbr,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
		 }
         else
            db_to_tlf01( tlf01_ptr );

         break;
      }
   }

   return( retcode );
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_select_mcf20 (  pCHAR          Primary_key, 
                        pMCF20         mcf20_ptr, 
                        pCHAR          ErrorMsg )
{
   INT  retval;

   memset( &db_mcf20, 0, sizeof( db_mcf20 ) );
   strncpy( pte_mcf20.organization_id, Primary_key, sizeof(pte_mcf20.organization_id) );
   strncpy( pte_mcf20.merchant_id, Primary_key + sizeof(pte_mcf20.organization_id), sizeof(pte_mcf20.merchant_id) );
   strncpy( pte_mcf20.yyyymmdd, Primary_key + sizeof(pte_mcf20.organization_id) + sizeof(pte_mcf20.merchant_id), sizeof(pte_mcf20.yyyymmdd) );

   if ( db_error_statics_flag == true )
   {
      	start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_mcf20
   FROM mcf20
   WHERE organization_id = :pte_mcf20.organization_id AND merchant_id = :pte_mcf20.merchant_id AND yyyymmdd = :pte_mcf20.yyyymmdd;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : MCF20 ,Fun_Name : db_select_mcf20 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_mcf20,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_mcf20 (mcf20_ptr);

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_select_ocf20 (  pCHAR          Primary_key, 
                        pOCF20         ocf20_ptr, 
                        pCHAR          ErrorMsg )
{
   INT  retval;

   memset( &db_ocf20, 0, sizeof( db_ocf20 ) );
   strncpy( pte_ocf20.organization_id, Primary_key, sizeof(pte_ocf20.organization_id) );
   strncpy( pte_ocf20.yyyymmdd, Primary_key + sizeof(pte_ocf20.organization_id), sizeof(pte_ocf20.yyyymmdd) );

   if ( db_error_statics_flag == true )
   {
      	start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_ocf20
   FROM ocf20
   WHERE organization_id = :pte_ocf20.organization_id AND yyyymmdd = :pte_ocf20.yyyymmdd;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : OCF20 ,Fun_Name : db_select_ocf20 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }   
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_ocf20,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_ocf20 (ocf20_ptr);

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_select_ocf01 (  pCHAR          Primary_key, 
                        pOCF01         ocf01_ptr, 
                        pCHAR          ErrorMsg )
{
   INT  retval;

   memset( &db_ocf01, 0, sizeof( db_ocf01 ) );
   strncpy( pte_ocf01.organization_id, Primary_key, sizeof(pte_ocf01.organization_id) );

   if ( db_error_statics_flag == true )
   {
      	start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_ocf01
   FROM ocf01
   WHERE organization_id = :pte_ocf01.organization_id;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : OCF01 ,Fun_Name : db_select_ocf01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }  
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_ocf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_ocf01 (ocf01_ptr);

   return PTEMSG_OK;
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_select_mcf01 (  pCHAR          Primary_key, 
                        pMCF01         mcf01_ptr, 
                        pCHAR          ErrorMsg )
{
   INT  retval;

   memset( &db_mcf01, 0, sizeof( db_mcf01 ) );
   strncpy( pte_mcf01.organization_id, Primary_key, sizeof(pte_mcf01.organization_id) );
   strncpy( pte_mcf01.merchant_id, Primary_key + sizeof(pte_mcf01.organization_id), sizeof(pte_mcf01.merchant_id) );

   if ( db_error_statics_flag == true )
   {
      	start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_mcf01
   FROM mcf01
   WHERE merchant_id = :pte_mcf01.merchant_id AND organization_id = :pte_mcf01.organization_id;
     
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : MCF01 ,Fun_Name : db_select_mcf01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }  
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_mcf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_mcf01 (mcf01_ptr);

   return PTEMSG_OK;
}



/*************************************************************************************/


/*************************************************************************************/
BYTE db_select_mcf01_CUP (  pCHAR          Primary_key, 
                        pMCF01         mcf01_ptr, 
                        pCHAR          ErrorMsg )
{
   INT  retval;
   BYTE cupAccID[15]={0};
   memset( &db_mcf01, 0, sizeof( db_mcf01 ) );
   strncpy( pte_mcf01.organization_id, Primary_key, sizeof(pte_mcf01.organization_id) );
   strncpy( pte_mcf01.merchant_id, Primary_key + sizeof(pte_mcf01.organization_id), sizeof(pte_mcf01.merchant_id) );
   strncpy(cupAccID, &pte_mcf01.merchant_id[7],8);

   if ( db_error_statics_flag == true )
   {
      	start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_mcf01
   FROM mcf01
   WHERE  network_priority_routing_5 = :cupAccID AND 
   		  organization_id = :pte_mcf01.organization_id;
    
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : MCF01 ,Fun_Name : db_select_mcf01_CUP , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }  
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_mcf01_CUP,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_mcf01 (mcf01_ptr);

   return PTEMSG_OK;
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_select_bch01_by_status_and_tid (  pBCH01         Batch_status, 
                                          pBCH01         bch01_ptr, 
                                          pCHAR          ErrorMsg )
{
   INT  retval;

   memset( &db_bch01, 0, sizeof( db_bch01 ) );
   strncpy( pte_bch01.batch_status, Batch_status->batch_status, sizeof(pte_bch01.batch_status) );
   strncpy( pte_bch01.device_id, Batch_status->primary_key.device_id, sizeof(pte_bch01.device_id) );
   strncpy( pte_bch01.merchant_id, Batch_status->merchant_id, sizeof(pte_bch01.merchant_id) );

   if ( db_error_statics_flag == true )
   {
      	start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_bch01
   FROM bch01
   WHERE device_id    = :pte_bch01.device_id
     AND batch_status = :pte_bch01.batch_status
     AND merchant_id  = :pte_bch01.merchant_id;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_select_bch01_by_status_and_tid , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch01_by_status_and_tid,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch01 (bch01_ptr);

   return PTEMSG_OK;
}

/*************************************************************************************/

/*************************************************************************************/
BYTE db_select_bch01_mp_by_status_and_tid (  pBCH01_MP         Batch_status, 
                                             pBCH01_MP         bch01_mp_ptr, 
                                             pCHAR             ErrorMsg )
{
   INT  retval;

   memset( &db_bch01_mp, 0, sizeof( db_bch01_mp ) );
   strncpy( pte_bch01_mp.batch_status, Batch_status->batch_status, sizeof(pte_bch01_mp.batch_status) );
   strncpy( pte_bch01_mp.device_id, Batch_status->primary_key.device_id, sizeof(pte_bch01_mp.device_id) );
   strncpy( pte_bch01_mp.merchant_id, Batch_status->merchant_id, sizeof(pte_bch01_mp.merchant_id) );

   if ( db_error_statics_flag == true )
   {
      	start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_bch01_mp
   FROM bch01_mp
   WHERE device_id    = :pte_bch01_mp.device_id   AND 
   		 merchant_id  = :pte_bch01_mp.merchant_id AND 
   		 batch_status = :pte_bch01_mp.batch_status;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_select_bch01_by_status_and_tid , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch01_mp_by_status_and_tid,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch01_mp (bch01_mp_ptr);

   return PTEMSG_OK;
}

/*************************************************************************************/


/*************************************************************************************/
BYTE db_select_bch01_by_status (  pBCH01         Batch_status, 
                                  pBCH01         bch01_ptr, 
                                  pCHAR          ErrorMsg )
{
   INT  retval;

   memset( &db_bch01, 0, sizeof( db_bch01 ) );
   strncpy( pte_bch01.batch_status, Batch_status->batch_status, sizeof(pte_bch01.batch_status) );
   strncpy( pte_bch01.device_id, Batch_status->primary_key.device_id, sizeof(pte_bch01.device_id) );
   strncpy( pte_bch01.merchant_id, Batch_status->merchant_id, sizeof(pte_bch01.merchant_id) );

   if ( db_error_statics_flag == true )
   {
      	start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_bch01
   FROM bch01
   WHERE device_id    = :pte_bch01.device_id
     AND batch_status = :pte_bch01.batch_status
     AND merchant_id  = :pte_bch01.merchant_id;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_select_bch01_by_status , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }  
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch01_by_status,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch01 (bch01_ptr);

   return PTEMSG_OK;
}


/*************************************************************************************
db_select_bch01_mp_by_status
/*************************************************************************************/
BYTE db_select_bch01_mp_by_status (  pBCH01_MP         Batch_status, 
                                     pBCH01_MP         bch01_mp_ptr, 
                                     pCHAR          	ErrorMsg )
{
   INT  retval;

   memset( &db_bch01_mp, 0, sizeof( db_bch01_mp ) );
   
   strncpy( pte_bch01_mp.batch_status, Batch_status->batch_status, sizeof(pte_bch01_mp.batch_status) );
   strncpy( pte_bch01_mp.device_id, Batch_status->primary_key.device_id, sizeof(pte_bch01_mp.device_id) );
   strncpy( pte_bch01_mp.merchant_id, Batch_status->merchant_id, sizeof(pte_bch01_mp.merchant_id) );

   if ( db_error_statics_flag == true )
   {
      	start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_bch01_mp
   FROM bch01_mp
   WHERE device_id    = :pte_bch01_mp.device_id   AND 
   		 merchant_id  = :pte_bch01_mp.merchant_id AND 
   		 batch_status = :pte_bch01_mp.batch_status;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_select_bch01_mp_by_status , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   } 
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch01_mp_by_status,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch01_mp (bch01_mp_ptr);

   return PTEMSG_OK;
}
/*************************************************************************************/



/*************************************************************************************/
BYTE db_select_or_insert_bch01_by_status (  pBCH01  Batch_status, 
                                  pBCH01         bch01_ptr, 
                                  pCHAR          ErrorMsg )
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
      char date[9]="";
      char time[7]="";
      char yymmdd[25]="";
      INT bch10_active_count = 0;
   	  INT bch01_active_count = 0;
   EXEC SQL END DECLARE SECTION;

   memset( &pte_bch01, 0, sizeof(pte_bch01));
   memset( &db_bch01, 0, sizeof( db_bch01 ) );
   strncpy( pte_bch01.device_id, Batch_status->primary_key.device_id, sizeof(pte_bch01.device_id) );
   strncpy ( pte_bch01.batch_nbr, Batch_status->primary_key.batch_nbr,sizeof(pte_bch01.batch_nbr)) ;
   strncpy ( pte_bch01.merchant_id, Batch_status->merchant_id,sizeof(pte_bch01.merchant_id)) ;

   if ( db_error_statics_flag == true )
   {
      	start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *
   INTO :db_bch01
   FROM bch01
   WHERE device_id = :pte_bch01.device_id
           AND batch_nbr = 'ACTIVE'
           AND merchant_id = :pte_bch01.merchant_id;
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_select_or_insert_bch01_by_status_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   printf("\nSQLCODE for ins-select %d\n", SQLCODE);
   
   if(SQLCODE == NO_DATA_FOUND)
   {
      /*pintime_get_gmt ( yymmdd );*/
      genutil_format_date(yymmdd);
      strncpy(date, yymmdd, 8);
      strncpy(time, yymmdd + 8, 6);
      printf("\ndate time for ins-select %s %s\n", date, time);

      if ( db_error_statics_flag == true )
   	  {
        	start_time = ptetime_get_time();
      }
      EXEC SQL INSERT INTO bch01
         ( device_id, batch_nbr, merchant_id, open_date, open_time)
      VALUES(
           :pte_bch01.device_id, :pte_bch01.batch_nbr, :pte_bch01.merchant_id, :date, :time  );
     
     if ( db_error_statics_flag == true )
     {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_select_or_insert_bch01_by_status_I , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
     }
     printf("\nSQLCODE for ins %d\n", SQLCODE);
     if ( SQLCODE != 0 )
     {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_or_insert_bch01_by_status,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

	EXEC SQL COMMIT;
	  
      memcpy(bch01_ptr, &pte_bch01, sizeof(pte_bch01));

	  
      return PTEMSG_OK;

   }
    
    printf("\nSQLCODE for ins %d\n", SQLCODE);
    if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_or_insert_bch01_by_status,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
       
    db_to_bch01 (bch01_ptr);
    
       bch01_active_count = atoi(bch01_ptr->total_credit_cnt);
   
   /*Lets calculate total count present in BCH10  which are active*/
   
   EXEC SQL SELECT COUNT(*) INTO :bch10_active_count FROM bch10 
      WHERE device_id = :pte_bch01.device_id
        AND batch_nbr = :pte_bch01.batch_nbr
        AND merchant_id = :pte_bch01.merchant_id
        AND processing_code != '020000';
    
   	if ( db_error_statics_flag == true )
   	{
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query 1: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_select_or_insert_bch01_by_status , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   	} 
   	
	if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_or_insert_bch01_by_status 1,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
	
	if (bch01_active_count == bch10_active_count)
	{
	  /* Both Count are same */ 
	}
	else
	{
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_or_insert_bch01_by_status BCH01 and BCH10 Counts are miss matching for MID: %s TID: %s Batch Number: %s",pte_bch01.merchant_id, pte_bch01.device_id, pte_bch01.batch_nbr);
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	 	memcpy(bch01_ptr->total_credit_cnt, 0x00, 4);
	}

  

   return PTEMSG_OK;
}

/*************************************************************************************/

/*************************************************************************************/
BYTE db_select_or_insert_bch01_mp_by_status (  pBCH01_MP  Batch_status, 
                                  			   pBCH01_MP  bch01_mp_ptr, 
                                  			   pCHAR      ErrorMsg )
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
      char date[9]="";
      char time[7]="";
      char yymmdd[25]="";
   EXEC SQL END DECLARE SECTION;

   printf(" In db_select_or_insert_bch01_mp_by_status\n");
   memset( &pte_bch01_mp, 0, sizeof(pte_bch01_mp));
   memset( &db_bch01_mp, 0, sizeof( db_bch01_mp ) );
   strncpy( pte_bch01_mp.device_id, Batch_status->primary_key.device_id, sizeof(pte_bch01_mp.device_id) );
   strncpy ( pte_bch01_mp.batch_nbr, Batch_status->primary_key.batch_nbr,sizeof(pte_bch01_mp.batch_nbr)) ;
   strncpy ( pte_bch01_mp.merchant_id, Batch_status->merchant_id,sizeof( pte_bch01_mp.merchant_id)) ;

   if ( db_error_statics_flag == true )
   {
        start_time = ptetime_get_time();
   }
      
   EXEC SQL SELECT *
   INTO :db_bch01_mp
   FROM bch01_mp
   WHERE device_id 	 = :pte_bch01_mp.device_id 	 AND 
   		 merchant_id = :pte_bch01_mp.merchant_id AND 
   		 batch_nbr 	 = 'ACTIVE';
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_select_or_insert_bch01_mp_by_status_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   printf("\nSQLCODE for ins-select %d\n", SQLCODE);
   
   if(SQLCODE == NO_DATA_FOUND)
   {
      /*pintime_get_gmt ( yymmdd );*/
      genutil_format_date(yymmdd);
      strncpy(date, yymmdd, 8);
      strncpy(time, yymmdd + 8, 6);
      printf("\ndate time for ins-select %s %s\n", date, time);

      if ( db_error_statics_flag == true )
      {
          start_time = ptetime_get_time();
   	  }
   
      EXEC SQL INSERT INTO bch01_mp
         ( device_id, batch_nbr, merchant_id, open_date, open_time)
      VALUES(
           :pte_bch01_mp.device_id, :pte_bch01_mp.batch_nbr, :pte_bch01_mp.merchant_id, :date, :time  );
     
     if ( db_error_statics_flag == true )
     {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_select_or_insert_bch01_mp_by_status_I , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
     }
     printf("\nSQLCODE for ins %d\n", SQLCODE);
     if ( SQLCODE != 0 )
     {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_or_insert_bch01_mp_by_status,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	 }

	EXEC SQL COMMIT;
	  
      memcpy(bch01_mp_ptr, &pte_bch01_mp, sizeof(pte_bch01_mp));

	  
      return PTEMSG_OK;

   }
    
    printf("\nSQLCODE for ins %d\n", SQLCODE);
    if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
    {
       printf("Error is select query\n");
       
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In ,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
    }
    db_to_bch01_mp (bch01_mp_ptr);
    printf("Retrive Terminal_id:%s, Merchant_id:%s\n",bch01_mp_ptr->primary_key.device_id,bch01_mp_ptr->merchant_id);

   return PTEMSG_OK;
}

/*************************************************************************************/


/*************************************************************************************/
BYTE db_select_bch01_for_gui (  pBCH01          bch01_rec, 
                        pBCH01         bch01_ptr, 
                        pCHAR          ErrorMsg )
{
   INT  retval;

   memset( &db_bch01, 0, sizeof( db_bch01 ) );
   strncpy( pte_bch01.device_id, bch01_rec->primary_key.device_id, sizeof(pte_bch01.device_id) );
   strncpy( pte_bch01.batch_nbr, bch01_rec->primary_key.batch_nbr, sizeof(pte_bch01.batch_nbr) );
   strncpy( pte_bch01.merchant_id, bch01_rec->merchant_id, sizeof(pte_bch01.merchant_id) );
   strncpy( pte_bch01.open_date, bch01_rec->open_date, sizeof(pte_bch01.open_date) );
   strncpy( pte_bch01.open_time, bch01_rec->open_time, sizeof(pte_bch01.open_time)) ;

   if ( db_error_statics_flag == true )
   {
          start_time = ptetime_get_time();
   }
   	  
   EXEC SQL SELECT *
   INTO :db_bch01
   FROM bch01
   WHERE device_id = :pte_bch01.device_id AND batch_nbr = :pte_bch01.batch_nbr 
         AND open_date = :pte_bch01.open_date AND open_time = :pte_bch01.open_time 
         AND merchant_id = :pte_bch01.merchant_id ;
      
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_select_bch01_for_gui , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }   
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch01_for_gui,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch01 (bch01_ptr);

   return PTEMSG_OK;
}

/*************************************************************************************/
/* TF PHANI.. db_select_bch01_duplicate_batch_nbr*/
/*************************************************************************************/
BYTE db_select_bch01_duplicate_batch_nbr (  pCHAR          Primary_key, 
                        pBCH01         bch01_ptr, 
                        pCHAR          ErrorMsg )
{
   INT  rt;
   BYTE retval = PTEMSG_OK;

   memset(  &db_bch01, 0, sizeof( db_bch01 ) );
   strncpy( pte_bch01.device_id, Primary_key, sizeof(pte_bch01.device_id) );
   strncpy( pte_bch01.batch_nbr,
            Primary_key + sizeof(pte_bch01.device_id),
            sizeof(pte_bch01.batch_nbr) );
   strncpy( pte_bch01.merchant_id,
            Primary_key + BCH01_MERCHANT_ID_OFFSET,
            sizeof(pte_bch01.merchant_id) );

   if ( db_error_statics_flag == true )
   {
          start_time = ptetime_get_time();
   }
   
   /* Removed Condition for batch status - TF Phani*/
      EXEC SQL SELECT *
	  INTO :db_bch01
	  FROM bch01
      WHERE device_id = :pte_bch01.device_id
        AND batch_nbr = :pte_bch01.batch_nbr
        AND merchant_id = :pte_bch01.merchant_id
		AND rownum=1
      ORDER BY  open_date DESC,  open_time DESC;
      
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_select_bch01_duplicate_batch_nbr , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   } 
	if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch01_duplicate_batch_nbr,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch01 (bch01_ptr);
   
   return PTEMSG_OK;
}


/*************************************************************************************/
/* TF Abhishek .. db_select_bch01_mp_duplicate_batch_nbr*/
/*************************************************************************************/
BYTE db_select_bch01_mp_duplicate_batch_nbr (  pCHAR          Primary_key, 
                        					   pBCH01_MP      bch01_mp_ptr, 
						                       pCHAR          ErrorMsg )
{
   INT  rt;
   BYTE retval = PTEMSG_OK;

   printf("In db_select_bch01_mp_duplicate_batch_nbr\n");

   memset(  &db_bch01_mp, 0, sizeof( db_bch01_mp ) );
   strncpy( pte_bch01_mp.device_id, Primary_key, sizeof(pte_bch01_mp.device_id) );
   strncpy( pte_bch01_mp.batch_nbr,
            Primary_key + sizeof(pte_bch01_mp.device_id),
            sizeof(pte_bch01_mp.batch_nbr) );
   strncpy( pte_bch01_mp.merchant_id, Primary_key + BCH01_MP_MERCHANT_ID_OFFSET,
            sizeof(pte_bch01_mp.merchant_id) );

   if ( db_error_statics_flag == true )
   {
          start_time = ptetime_get_time();
   }
   /* Removed Condition for batch status - TF Phani*/
      EXEC SQL SELECT *
	  INTO :db_bch01_mp
	  FROM bch01_mp
      WHERE device_id 	= :pte_bch01_mp.device_id   AND 
      		merchant_id = :pte_bch01_mp.merchant_id AND 
      		batch_nbr 	= :pte_bch01_mp.batch_nbr   AND 
      		rownum		= 1
      ORDER BY  open_date DESC,  open_time DESC;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_select_bch01_mp_duplicate_batch_nbr , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   } 
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch01_mp_duplicate_batch_nbr,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch01_mp (bch01_mp_ptr);

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_select_bch01 (  pCHAR          Primary_key, 
                        pBCH01         bch01_ptr, 
                        pCHAR          ErrorMsg )
{
   INT  rt;
   BYTE retval = PTEMSG_OK;

   memset(  &db_bch01, 0, sizeof( db_bch01 ) );
   strncpy( pte_bch01.device_id, Primary_key, sizeof(pte_bch01.device_id) );
   strncpy( pte_bch01.batch_nbr,
            Primary_key + sizeof(pte_bch01.device_id),
            sizeof(pte_bch01.batch_nbr) );
   strncpy( pte_bch01.merchant_id,
            Primary_key + BCH01_MERCHANT_ID_OFFSET,
            sizeof(pte_bch01.merchant_id) );

   if ( db_error_statics_flag == true )
   {
          start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE batch_cursor CURSOR FOR
      SELECT *
      FROM bch01
      WHERE device_id = :pte_bch01.device_id
        AND batch_nbr = :pte_bch01.batch_nbr
        AND merchant_id = :pte_bch01.merchant_id
      ORDER BY  open_date DESC,  open_time DESC;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_select_bch01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   } 
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch01,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		retval = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
   }
   else
   {
      if ( db_error_statics_flag == true )
      {
          start_time = ptetime_get_time();
      }
      EXEC SQL OPEN  batch_cursor;
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
        memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch01,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		retval = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	  }
      else
      {
         memset(&db_bch01, 0x00, sizeof(db_bch01));
         EXEC SQL FETCH batch_cursor
         INTO :db_bch01;

         if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
         {
      	  	memset(er_buf,0x00,sizeof(er_buf));
			sprintf(er_buf,"In ,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
			retval = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			strcat(er_buf,ErrorMsg);
			
         }
         else
            db_to_bch01 (bch01_ptr);

         EXEC SQL CLOSE batch_cursor;
      }
      if ( db_error_statics_flag == true )
      {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01_OPEN_CURSOR ,Fun_Name : db_select_bch01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
      }
   }
 
   return( retval );
}
/*************************************************************************************/

/*************************************************************************************/
BYTE db_select_bch01_mp (  pCHAR          Primary_key, 
                        pBCH01_MP         bch01_mp_ptr, 
                        pCHAR          ErrorMsg )
{
   INT  rt;
   BYTE retval = PTEMSG_OK;

   memset(  &db_bch01_mp, 0, sizeof( db_bch01_mp ) );
   strncpy( pte_bch01_mp.device_id, Primary_key, sizeof(pte_bch01_mp.device_id) );
   strncpy( pte_bch01_mp.batch_nbr,
            Primary_key + sizeof(pte_bch01_mp.device_id),
            sizeof(pte_bch01_mp.batch_nbr) );
   strncpy( pte_bch01_mp.merchant_id,
            Primary_key + BCH01_MP_MERCHANT_ID_OFFSET,
            sizeof(pte_bch01_mp.merchant_id) );

   if ( db_error_statics_flag == true )
   {
          start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE batch_cursor_mp CURSOR FOR
      SELECT *
      FROM bch01_mp
      WHERE device_id 	= :pte_bch01_mp.device_id   AND 
      		merchant_id = :pte_bch01_mp.merchant_id AND 
      		batch_nbr 	= :pte_bch01_mp.batch_nbr
      ORDER BY  open_date DESC,  open_time DESC;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_select_bch01_mp , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      
      	  	memset(er_buf,0x00,sizeof(er_buf));
			sprintf(er_buf,"In db_select_bch01_mp,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
			retval = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);  
   }
   else
   {
      if ( db_error_statics_flag == true )
      {
          start_time = ptetime_get_time();
      }
      
      EXEC SQL OPEN  batch_cursor_mp;
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         
      	  	memset(er_buf,0x00,sizeof(er_buf));
			sprintf(er_buf,"In db_select_bch01_mp,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
			retval = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
      }
      else
      {
         memset(&db_bch01_mp, 0x00, sizeof(db_bch01_mp));
         EXEC SQL FETCH batch_cursor_mp
         INTO :db_bch01_mp;

         if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
         {
      	  	memset(er_buf,0x00,sizeof(er_buf));
			sprintf(er_buf,"In db_select_bch01_mp,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
			retval = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
      	 }
         else
            db_to_bch01_mp (bch01_mp_ptr);

         EXEC SQL CLOSE batch_cursor_mp;
      }
      if ( db_error_statics_flag == true )
      {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01_OPEN_CURSOR ,Fun_Name : db_select_bch01_mp , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
      }
   }
 
   return( retval );
}
/*************************************************************************************/

/*************************************************************************************/
BYTE db_select_active_bch10 (  pBCH10         bch10_record, 
                        pBCH10         bch10_ptr, 
                        pCHAR          ErrorMsg )
{
   INT  retval;

   memset( &db_bch10, 0, sizeof( db_bch10 ) );

   strncpy( pte_bch10.device_id, bch10_record->primary_key.device_id, sizeof(pte_bch10.device_id) );
   strncpy( pte_bch10.batch_nbr, bch10_record->primary_key.batch_nbr, sizeof(pte_bch10.batch_nbr) );
   strncpy( pte_bch10.retrieval_ref_num, bch10_record->primary_key.retrieval_ref_num, sizeof(pte_bch10.retrieval_ref_num) );

   if ( db_error_statics_flag == true )
   {
          start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_bch10
   FROM bch10
   WHERE device_id 		   = :pte_bch10.device_id   AND 
   		 merchant_id	   = :pte_bch10.merchant_id AND 
   		 batch_nbr 		   = :pte_bch10.batch_nbr   AND 
   		 retrieval_ref_num = :pte_bch10.retrieval_ref_num;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_active_bch10 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   } 
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_active_bch10,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch10 (bch10_ptr);

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_select_bch10 (  pBCH10         bch10_record, 
                        pBCH10         bch10_ptr, 
                        pCHAR          ErrorMsg )
{
   INT  retval;

   memset( &db_bch10, 0, sizeof( db_bch10 ) );

   strncpy( pte_bch10.device_id, bch10_record->primary_key.device_id, sizeof(pte_bch10.device_id) );
   strncpy( pte_bch10.batch_nbr, bch10_record->primary_key.batch_nbr, sizeof(pte_bch10.batch_nbr) );
   strncpy( pte_bch10.retrieval_ref_num, bch10_record->primary_key.retrieval_ref_num, sizeof(pte_bch10.retrieval_ref_num) );
   strncpy( pte_bch10.open_date, bch10_record->open_date, sizeof(pte_bch10.open_date) );
   strncpy( pte_bch10.open_time, bch10_record->open_time, sizeof(pte_bch10.open_time) );

   if ( db_error_statics_flag == true )
   {
          start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_bch10
   FROM bch10
   WHERE device_id 		  = :pte_bch10.device_id 		  AND 
   		 merchant_id 	  = :pte_bch10.merchant_id		  AND 
   		 batch_nbr 		  = :pte_bch10.batch_nbr          AND 
   		 retrieval_ref_num = :pte_bch10.retrieval_ref_num AND 
   		 open_date 		  = :pte_bch10.open_date 		  AND 
   		 open_time 		  = :pte_bch10.open_time;
      
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_bch10 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }    
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch10,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch10 (bch10_ptr);

   return PTEMSG_OK;
}



/*************************************************************************************/
/*************************************************************************************/
BYTE  db_select_dcf01(  pCHAR          device, 
                        pDCF01         dcf01_ptr, 
                        pCHAR          ErrorMsg )
{
   INT  retval;

   memset( &db_dcf01, 0, sizeof( db_dcf01 ) );
   strncpy( pte_dcf01.device_id, device, sizeof(pte_dcf01.device_id) );
   strncpy( pte_dcf01.merchant_id, device + DCF01_MERCHANT_ID_OFFSET , sizeof(pte_dcf01.merchant_id) );

   if ( db_error_statics_flag == true )
   {
          start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_dcf01
   FROM dcf01
   WHERE device_id = :pte_dcf01.device_id AND
	     merchant_id = :pte_dcf01.merchant_id;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : DCF01 ,Fun_Name : db_select_dcf01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }  
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_dcf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_dcf01 (dcf01_ptr);

   return PTEMSG_OK;
}



/*************************************************************************************/


/*************************************************************************************/
BYTE db_select_dcf01_CUP (  pCHAR          device,
                        pDCF01         dcf01_ptr, 
                        pCHAR          ErrorMsg )
{
   INT  retval;
   char cupMid[16]={0};

   memset( &db_dcf01, 0, sizeof( db_dcf01 ) );
   strncpy( pte_dcf01.device_id, device, sizeof(pte_dcf01.device_id) );
   strncpy( pte_dcf01.merchant_id, device + DCF01_MERCHANT_ID_OFFSET , sizeof(pte_dcf01.merchant_id) );
   strncpy(cupMid, &pte_dcf01.merchant_id[7],8);

   if ( db_error_statics_flag == true )
   {
          start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_dcf01 
   FROM dcf01
   WHERE device_id = :pte_dcf01.device_id AND (merchant_id = :pte_dcf01.merchant_id OR SUBSTR(merchant_id,8,8) = :cupMid );
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : DCF01 ,Fun_Name : db_select_dcf01_CUP , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_dcf01_CUP,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_dcf01 (dcf01_ptr);

   return PTEMSG_OK;
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_tlf01( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   tlf01_to_db( tlf01_ptr );

   if ( db_error_statics_flag == true )
   {
          start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_tlf01
      FROM   TLF01
      WHERE  transaction_id = :pte_tlf01.transaction_id AND
      		 rownum         = 1
      For Update NOWAIT;
      
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_update_tlf01_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
  		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_tlf01,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
   }

   if ( db_error_statics_flag == true )
   {
          start_time = ptetime_get_time();
   }
   
   EXEC SQL UPDATE tlf01
   SET   transaction_id                     = :pte_tlf01.transaction_id,
         entry_type                         = :pte_tlf01.entry_type,
         tpdu_id                            = :pte_tlf01.tpdu_id,
         issuer_id                          = :pte_tlf01.issuer_id,
         acquirer_id                        = :pte_tlf01.acquirer_id,
         tx_key                             = :pte_tlf01.tx_key,
         terminal_id                        = :pte_tlf01.terminal_id,
         terminal_type                      = :pte_tlf01.terminal_type,
         response_text                      = :pte_tlf01.response_text,
         card_num_len                       = :pte_tlf01.card_num_len,
         card_num                           = :pte_tlf01.card_num,
         exp_date                           = :pte_tlf01.exp_date,
         total_amount                       = :pte_tlf01.total_amount,
         add_amounts                        = :pte_tlf01.add_amounts,
         invoice_number                     = :pte_tlf01.invoice_number,
         orig_amount                        = :pte_tlf01.orig_amount,
         auth_number                        = :pte_tlf01.auth_number,
         processing_code                    = :pte_tlf01.processing_code,
         sys_trace_audit_num                = :pte_tlf01.sys_trace_audit_num,
         orig_sys_trace_num                 = :pte_tlf01.orig_sys_trace_num,
         pos_entry_mode                     = :pte_tlf01.pos_entry_mode,
         nii                                = :pte_tlf01.nii,
         pos_condition_code                 = :pte_tlf01.pos_condition_code,
         track1                             = :pte_tlf01.track1,
         track2                             = :pte_tlf01.track2,
         retrieval_ref_num                  = :pte_tlf01.retrieval_ref_num,
         orig_retrieval_ref_num             = :pte_tlf01.orig_retrieval_ref_num,
         merchant_id                        = :pte_tlf01.merchant_id,
         orig_message                       = :pte_tlf01.orig_message,
         settlement_total                   = :pte_tlf01.settlement_total,
         message_type                       = :pte_tlf01.message_type,
         card_holder_name                   = :pte_tlf01.card_holder_name,
         general_status                     = :pte_tlf01.general_status,
         originator_queue                   = :pte_tlf01.originator_queue,
         originator_info                    = :pte_tlf01.originator_info,
         batch_number                       = :pte_tlf01.batch_number,
         response_code                      = :pte_tlf01.response_code,
         date_yyyymmdd                      = :pte_tlf01.date_yyyymmdd,
         time_hhmmss                        = :pte_tlf01.time_hhmmss,
         num_sales                          = :pte_tlf01.num_sales,
         sales_amount                       = :pte_tlf01.sales_amount,
         num_refunds                        = :pte_tlf01.num_refunds,
         refund_amount                      = :pte_tlf01.refund_amount,
         num_dbsales                        = :pte_tlf01.num_dbsales,
         dbsales_amount                     = :pte_tlf01.dbsales_amount,
         num_dbrefunds                      = :pte_tlf01.num_dbrefunds,
         dbrefund_amount                    = :pte_tlf01.dbrefund_amount,
         pin_block                          = :pte_tlf01.pin_block,
         tax_amount                         = :pte_tlf01.tax_amount,
         tip_amount                         = :pte_tlf01.tip_amount,
         tran_start_time                    = :pte_tlf01.tran_start_time,
         host_start_time                    = :pte_tlf01.host_start_time,
         host_finish_time                   = :pte_tlf01.host_finish_time,
         tran_finish_time                   = :pte_tlf01.tran_finish_time,
         settle_file_prefix                 = :pte_tlf01.settle_file_prefix,
         resp_source_len                    = :pte_tlf01.resp_source_len,
         visa_char_indicator                = :pte_tlf01.visa_char_indicator,
         visa_tran_id                       = :pte_tlf01.visa_tran_id,
         visa_validation_code               = :pte_tlf01.visa_validation_code,
         mcard_banknet_len                  = :pte_tlf01.mcard_banknet_len,
         mcard_banknet                      = :pte_tlf01.mcard_banknet,
         agent_id_len                       = :pte_tlf01.agent_id_len,
         agent_id                           = :pte_tlf01.agent_id,
         cvc                                = :pte_tlf01.cvc,
         settlement_date                    = :pte_tlf01.settlement_date,

         category_code                      = :pte_tlf01.category_code,
         conversion_rate                    = :pte_tlf01.conversion_rate,
         product_code                       = :pte_tlf01.product_code,
         odometer                           = :pte_tlf01.odometer,
         organization_id                    = :pte_tlf01.organization_id,
         dynamic_keychange                  = :pte_tlf01.dynamic_keychange,

         txn_cnt                            =:pte_tlf01.txn_cnt,
         source_key                          =:pte_tlf01.source_key,
         dcf01_retired_cwk                  =:pte_tlf01.dcf01_retired_cwk,
         dest_key                          =:pte_tlf01.dest_key,
         ncf01_retired_cwk                  =:pte_tlf01.ncf01_retired_cwk,
	      handler_queue        		        =:pte_tlf01.handler_queue,
	      authorizing_host_queue    	     =:pte_tlf01.authorizing_host_queue,
         max_net_consec_tmouts              =:pte_tlf01.max_net_consec_tmouts,
         max_active_txns                    =:pte_tlf01.max_active_txns,
         remote_nsp_type                    =:pte_tlf01.remote_nsp_type,
         kek                                =:pte_tlf01.kek,

         credit_limit                       =:pte_tlf01.credit_limit,
         forwarding_institution_id          =:pte_tlf01.forwarding_institution_id,
         acquiring_id                       =:pte_tlf01.acquiring_id,
         outstanding_balance                =:pte_tlf01.outstanding_balance,
         nfi_name                           =:pte_tlf01.nfi_name,
         nfi_seq_nbr                        =:pte_tlf01.nfi_seq_nbr,
         nfi_start_date                     =:pte_tlf01.nfi_start_date,
         nfi_end_date                       =:pte_tlf01.nfi_end_date,
         resp_source                        =:pte_tlf01.resp_source,
         origin                             =:pte_tlf01.origin,
         auth_1                             =:pte_tlf01.auth_1,
         auth_2                             =:pte_tlf01.auth_2,
         update_mask                        =:pte_tlf01.update_mask,
         type_of_data                      =:pte_tlf01.type_of_data,
         down_payment                      =:pte_tlf01.down_payment,
         period                            =:pte_tlf01.period,
         interest_rate                     =:pte_tlf01.interest_rate,
         total_interest                    =:pte_tlf01.total_interest,
         redemption_amount                 =:pte_tlf01.redemption_amount,
         vehicle_number                    =:pte_tlf01.vehicle_number,

         profile                   = :pte_tlf01.profile,            
       nbr_of_prod_codes         = :pte_tlf01.nbr_of_prod_codes,          
       product1_code             = :pte_tlf01.product1_code,             
       product1_quantity         = :pte_tlf01.product1_quantity,            
       product1_amount           = :pte_tlf01.product1_amount,                  
       product2_code             = :pte_tlf01.product2_code,             
       product2_quantity         = :pte_tlf01.product2_quantity,             
       product2_amount           = :pte_tlf01.product2_amount, 
       product3_code             = :pte_tlf01.product3_code,             
       product3_quantity         = :pte_tlf01.product3_quantity,            
       product3_amount           = :pte_tlf01.product3_amount,    
       product4_code             = :pte_tlf01.product4_code,             
       product4_quantity         = :pte_tlf01.product4_quantity,            
       product4_amount           = :pte_tlf01.product4_amount,                  
       product5_code             = :pte_tlf01.product5_code,             
       product5_quantity         = :pte_tlf01.product5_quantity,             
       product5_amount           = :pte_tlf01.product5_amount,                        
       product6_code             = :pte_tlf01.product6_code,             
       product6_quantity         = :pte_tlf01.product6_quantity,             
       product6_amount           = :pte_tlf01.product6_amount,  
       product7_code             = :pte_tlf01.product7_code,             
       product7_quantity         = :pte_tlf01.product7_quantity,            
       product7_amount           = :pte_tlf01.product7_amount,                  
       product8_code             = :pte_tlf01.product8_code,             
       product8_quantity         = :pte_tlf01.product8_quantity,             
       product8_amount           = :pte_tlf01.product8_amount, 
       product9_code             = :pte_tlf01.product9_code,             
       product9_quantity         = :pte_tlf01.product9_quantity,            
       product9_amount           = :pte_tlf01.product9_amount,                  
       product10_code            = :pte_tlf01.product10_code,             
       product10_quantity        = :pte_tlf01.product10_quantity,             
       product10_amount          = :pte_tlf01.product10_amount,   
       product11_code            = :pte_tlf01.product11_code,             
       product11_quantity        = :pte_tlf01.product11_quantity,            
       product11_amount          = :pte_tlf01.product11_amount,                  
       product12_code            = :pte_tlf01.product12_code,             
       product12_quantity        = :pte_tlf01.product12_quantity,             
       product12_amount          = :pte_tlf01.product12_amount, 
       product13_code            = :pte_tlf01.product13_code,             
       product13_quantity        = :pte_tlf01.product13_quantity,            
       product13_amount          = :pte_tlf01.product13_amount,                  
       product14_code            = :pte_tlf01.product14_code,             
       product14_quantity        = :pte_tlf01.product14_quantity,             
       product14_amount          = :pte_tlf01.product14_amount, 
       product15_code            = :pte_tlf01.product15_code,             
       product15_quantity        = :pte_tlf01.product15_quantity,            
       product15_amount          = :pte_tlf01.product15_amount,                  
       product16_code            = :pte_tlf01.product16_code,             
       product16_quantity        = :pte_tlf01.product16_quantity,             
       product16_amount          = :pte_tlf01.product16_amount, 
       product17_code            = :pte_tlf01.product17_code,             
       product17_quantity        = :pte_tlf01.product17_quantity,            
       product17_amount          = :pte_tlf01.product17_amount,                  
       product18_code            = :pte_tlf01.product18_code,             
       product18_quantity        = :pte_tlf01.product18_quantity,             
       product18_amount          = :pte_tlf01.product18_amount, 
       product19_code            = :pte_tlf01.product19_code,             
       product19_quantity        = :pte_tlf01.product19_quantity,            
       product19_amount          = :pte_tlf01.product19_amount,                  
       product20_code            = :pte_tlf01.product20_code,             
       product20_quantity        = :pte_tlf01.product20_quantity,             
       product20_amount          = :pte_tlf01.product20_amount,
       visa_merchant_id          = :pte_tlf01.visa_merchant_id,

       cash_bonus                = :pte_tlf01.cash_bonus,            
       deferred_factor           = :pte_tlf01.deferred_factor,                  
       deferred_term_length      = :pte_tlf01.deferred_term_length,             
       currency_code             = :pte_tlf01.currency_code, 
	   transmission_timestamp    = :pte_tlf01.transmission_timestamp,             
       tran_fee_amount           = :pte_tlf01.tran_fee_amount,
       cvc_data                  = :pte_tlf01.cvc_data,

	   verify_mag_stripe         = :pte_tlf01.verify_mag_stripe,            
       saf                       = :pte_tlf01.saf,                  
       security_response_code    = :pte_tlf01.security_response_code,             
       service_code              = :pte_tlf01.service_code, 
	   source_pin_format         = :pte_tlf01.source_pin_format,             
       dest_pin_format           = :pte_tlf01.dest_pin_format,
       voice_auth                = :pte_tlf01.voice_auth,
	   actual_amount             = :pte_tlf01.actual_amount,
       reversal_amount           = :pte_tlf01.reversal_amount, 
	   voice_auth_text           = :pte_tlf01.voice_auth_text,
	   operator_id               = :pte_tlf01.operator_id,
	   workstation				 = :pte_tlf01.workstation,
	   orig_auth_number			 = :pte_tlf01.orig_auth_number,
	   ticket_nbr                = :pte_tlf01.ticket_nbr,
	   system_date               = :pte_tlf01.system_date,
	   def_gross_amt             = :pte_tlf01.def_gross_amt,
	   monthly_amort_amt         = :pte_tlf01.monthly_amort_amt
   WHERE transaction_id = :pte_tlf01.transaction_id;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_update_tlf01_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }    
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_tlf01,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/
/* Girija Y - ThoughtFocus */
/*************************************************************************************/
BYTE db_update_tlf01_stip( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   tlf01_stip_to_db( tlf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_tlf01_stip
      FROM   tlf01_stip
      WHERE  transaction_id = :pte_tlf01_stip.transaction_id AND
      		 rownum         = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }  
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
 		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_tlf01_stip,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL UPDATE tlf01_stip
   SET   transaction_id                     = :pte_tlf01_stip.transaction_id,
         entry_type                         = :pte_tlf01_stip.entry_type,
         tpdu_id                            = :pte_tlf01_stip.tpdu_id,
         issuer_id                          = :pte_tlf01_stip.issuer_id,
         acquirer_id                        = :pte_tlf01_stip.acquirer_id,
         tx_key                             = :pte_tlf01_stip.tx_key,
         terminal_id                        = :pte_tlf01_stip.terminal_id,
         terminal_type                      = :pte_tlf01_stip.terminal_type,
         response_text                      = :pte_tlf01_stip.response_text,
         card_num_len                       = :pte_tlf01_stip.card_num_len,
         card_num                           = :pte_tlf01_stip.card_num,
         exp_date                           = :pte_tlf01_stip.exp_date,
         total_amount                       = :pte_tlf01_stip.total_amount,
         add_amounts                        = :pte_tlf01_stip.add_amounts,
         invoice_number                     = :pte_tlf01_stip.invoice_number,
         orig_amount                        = :pte_tlf01_stip.orig_amount,
         auth_number                        = :pte_tlf01_stip.auth_number,
         processing_code                    = :pte_tlf01_stip.processing_code,
         sys_trace_audit_num                = :pte_tlf01_stip.sys_trace_audit_num,
         orig_sys_trace_num                 = :pte_tlf01_stip.orig_sys_trace_num,
         pos_entry_mode                     = :pte_tlf01_stip.pos_entry_mode,
         nii                                = :pte_tlf01_stip.nii,
         pos_condition_code                 = :pte_tlf01_stip.pos_condition_code,
         track1                             = :pte_tlf01_stip.track1,
         track2                             = :pte_tlf01_stip.track2,
         retrieval_ref_num                  = :pte_tlf01_stip.retrieval_ref_num,
         orig_retrieval_ref_num             = :pte_tlf01_stip.orig_retrieval_ref_num,
         merchant_id                        = :pte_tlf01_stip.merchant_id,
         orig_message                       = :pte_tlf01_stip.orig_message,
         settlement_total                   = :pte_tlf01_stip.settlement_total,
         message_type                       = :pte_tlf01_stip.message_type,
         card_holder_name                   = :pte_tlf01_stip.card_holder_name,
         general_status                     = :pte_tlf01_stip.general_status,
         originator_queue                   = :pte_tlf01_stip.originator_queue,
         originator_info                    = :pte_tlf01_stip.originator_info,
         batch_number                       = :pte_tlf01_stip.batch_number,
         response_code                      = :pte_tlf01_stip.response_code,
         date_yyyymmdd                      = :pte_tlf01_stip.date_yyyymmdd,
         time_hhmmss                        = :pte_tlf01_stip.time_hhmmss,
         num_sales                          = :pte_tlf01_stip.num_sales,
         sales_amount                       = :pte_tlf01_stip.sales_amount,
         num_refunds                        = :pte_tlf01_stip.num_refunds,
         refund_amount                      = :pte_tlf01_stip.refund_amount,
         num_dbsales                        = :pte_tlf01_stip.num_dbsales,
         dbsales_amount                     = :pte_tlf01_stip.dbsales_amount,
         num_dbrefunds                      = :pte_tlf01_stip.num_dbrefunds,
         dbrefund_amount                    = :pte_tlf01_stip.dbrefund_amount,
         pin_block                          = :pte_tlf01_stip.pin_block,
         tax_amount                         = :pte_tlf01_stip.tax_amount,
         tip_amount                         = :pte_tlf01_stip.tip_amount,
         tran_start_time                    = :pte_tlf01_stip.tran_start_time,
         host_start_time                    = :pte_tlf01_stip.host_start_time,
         host_finish_time                   = :pte_tlf01_stip.host_finish_time,
         tran_finish_time                   = :pte_tlf01_stip.tran_finish_time,
         settle_file_prefix                 = :pte_tlf01_stip.settle_file_prefix,
         resp_source_len                    = :pte_tlf01_stip.resp_source_len,
         visa_char_indicator                = :pte_tlf01_stip.visa_char_indicator,
         visa_tran_id                       = :pte_tlf01_stip.visa_tran_id,
         visa_validation_code               = :pte_tlf01_stip.visa_validation_code,
         mcard_banknet_len                  = :pte_tlf01_stip.mcard_banknet_len,
         mcard_banknet                      = :pte_tlf01_stip.mcard_banknet,
         agent_id_len                       = :pte_tlf01_stip.agent_id_len,
         agent_id                           = :pte_tlf01_stip.agent_id,
         cvc                                = :pte_tlf01_stip.cvc,
         settlement_date                    = :pte_tlf01_stip.settlement_date,

         category_code                      = :pte_tlf01_stip.category_code,
         conversion_rate                    = :pte_tlf01_stip.conversion_rate,
         product_code                       = :pte_tlf01_stip.product_code,
         odometer                           = :pte_tlf01_stip.odometer,
         organization_id                    = :pte_tlf01_stip.organization_id,
         dynamic_keychange                  = :pte_tlf01_stip.dynamic_keychange,

         txn_cnt                            =:pte_tlf01_stip.txn_cnt,
         source_key                          =:pte_tlf01_stip.source_key,
         dcf01_retired_cwk                  =:pte_tlf01_stip.dcf01_retired_cwk,
         dest_key                          =:pte_tlf01_stip.dest_key,
         ncf01_retired_cwk                  =:pte_tlf01_stip.ncf01_retired_cwk,
	      handler_queue        		        =:pte_tlf01_stip.handler_queue,
	      authorizing_host_queue    	     =:pte_tlf01_stip.authorizing_host_queue,
         max_net_consec_tmouts              =:pte_tlf01_stip.max_net_consec_tmouts,
         max_active_txns                    =:pte_tlf01_stip.max_active_txns,
         remote_nsp_type                    =:pte_tlf01_stip.remote_nsp_type,
         kek                                =:pte_tlf01_stip.kek,

         credit_limit                       =:pte_tlf01_stip.credit_limit,
         forwarding_institution_id          =:pte_tlf01_stip.forwarding_institution_id,
         acquiring_id                       =:pte_tlf01_stip.acquiring_id,
         outstanding_balance                =:pte_tlf01_stip.outstanding_balance,
         nfi_name                           =:pte_tlf01_stip.nfi_name,
         nfi_seq_nbr                        =:pte_tlf01_stip.nfi_seq_nbr,
         nfi_start_date                     =:pte_tlf01_stip.nfi_start_date,
         nfi_end_date                       =:pte_tlf01_stip.nfi_end_date,
         resp_source                        =:pte_tlf01_stip.resp_source,
         origin                             =:pte_tlf01_stip.origin,
         auth_1                             =:pte_tlf01_stip.auth_1,
         auth_2                             =:pte_tlf01_stip.auth_2,
         update_mask                        =:pte_tlf01_stip.update_mask,
         type_of_data                      =:pte_tlf01_stip.type_of_data,
         down_payment                      =:pte_tlf01_stip.down_payment,
         period                            =:pte_tlf01_stip.period,
         interest_rate                     =:pte_tlf01_stip.interest_rate,
         total_interest                    =:pte_tlf01_stip.total_interest,
         redemption_amount                 =:pte_tlf01_stip.redemption_amount,
         vehicle_number                    =:pte_tlf01_stip.vehicle_number,

         profile                   = :pte_tlf01_stip.profile,            
       nbr_of_prod_codes         = :pte_tlf01_stip.nbr_of_prod_codes,          
       product1_code             = :pte_tlf01_stip.product1_code,             
       product1_quantity         = :pte_tlf01_stip.product1_quantity,            
       product1_amount           = :pte_tlf01_stip.product1_amount,                  
       product2_code             = :pte_tlf01_stip.product2_code,             
       product2_quantity         = :pte_tlf01_stip.product2_quantity,             
       product2_amount           = :pte_tlf01_stip.product2_amount, 
       product3_code             = :pte_tlf01_stip.product3_code,             
       product3_quantity         = :pte_tlf01_stip.product3_quantity,            
       product3_amount           = :pte_tlf01_stip.product3_amount,    
       product4_code             = :pte_tlf01_stip.product4_code,             
       product4_quantity         = :pte_tlf01_stip.product4_quantity,            
       product4_amount           = :pte_tlf01_stip.product4_amount,                  
       product5_code             = :pte_tlf01_stip.product5_code,             
       product5_quantity         = :pte_tlf01_stip.product5_quantity,             
       product5_amount           = :pte_tlf01_stip.product5_amount,                        
       product6_code             = :pte_tlf01_stip.product6_code,             
       product6_quantity         = :pte_tlf01_stip.product6_quantity,             
       product6_amount           = :pte_tlf01_stip.product6_amount,  
       product7_code             = :pte_tlf01_stip.product7_code,             
       product7_quantity         = :pte_tlf01_stip.product7_quantity,            
       product7_amount           = :pte_tlf01_stip.product7_amount,                  
       product8_code             = :pte_tlf01_stip.product8_code,             
       product8_quantity         = :pte_tlf01_stip.product8_quantity,             
       product8_amount           = :pte_tlf01_stip.product8_amount, 
       product9_code             = :pte_tlf01_stip.product9_code,             
       product9_quantity         = :pte_tlf01_stip.product9_quantity,            
       product9_amount           = :pte_tlf01_stip.product9_amount,                  
       product10_code            = :pte_tlf01_stip.product10_code,             
       product10_quantity        = :pte_tlf01_stip.product10_quantity,             
       product10_amount          = :pte_tlf01_stip.product10_amount,   
       product11_code            = :pte_tlf01_stip.product11_code,             
       product11_quantity        = :pte_tlf01_stip.product11_quantity,            
       product11_amount          = :pte_tlf01_stip.product11_amount,                  
       product12_code            = :pte_tlf01_stip.product12_code,             
       product12_quantity        = :pte_tlf01_stip.product12_quantity,             
       product12_amount          = :pte_tlf01_stip.product12_amount, 
       product13_code            = :pte_tlf01_stip.product13_code,             
       product13_quantity        = :pte_tlf01_stip.product13_quantity,            
       product13_amount          = :pte_tlf01_stip.product13_amount,                  
       product14_code            = :pte_tlf01_stip.product14_code,             
       product14_quantity        = :pte_tlf01_stip.product14_quantity,             
       product14_amount          = :pte_tlf01_stip.product14_amount, 
       product15_code            = :pte_tlf01_stip.product15_code,             
       product15_quantity        = :pte_tlf01_stip.product15_quantity,            
       product15_amount          = :pte_tlf01_stip.product15_amount,                  
       product16_code            = :pte_tlf01_stip.product16_code,             
       product16_quantity        = :pte_tlf01_stip.product16_quantity,             
       product16_amount          = :pte_tlf01_stip.product16_amount, 
       product17_code            = :pte_tlf01_stip.product17_code,             
       product17_quantity        = :pte_tlf01_stip.product17_quantity,            
       product17_amount          = :pte_tlf01_stip.product17_amount,                  
       product18_code            = :pte_tlf01_stip.product18_code,             
       product18_quantity        = :pte_tlf01_stip.product18_quantity,             
       product18_amount          = :pte_tlf01_stip.product18_amount, 
       product19_code            = :pte_tlf01_stip.product19_code,             
       product19_quantity        = :pte_tlf01_stip.product19_quantity,            
       product19_amount          = :pte_tlf01_stip.product19_amount,                  
       product20_code            = :pte_tlf01_stip.product20_code,             
       product20_quantity        = :pte_tlf01_stip.product20_quantity,             
       product20_amount          = :pte_tlf01_stip.product20_amount,
       visa_merchant_id          = :pte_tlf01_stip.visa_merchant_id,

       cash_bonus                = :pte_tlf01_stip.cash_bonus,            
       deferred_factor           = :pte_tlf01_stip.deferred_factor,                  
       deferred_term_length      = :pte_tlf01_stip.deferred_term_length,             
       currency_code             = :pte_tlf01_stip.currency_code, 
	   transmission_timestamp    = :pte_tlf01_stip.transmission_timestamp,             
       tran_fee_amount           = :pte_tlf01_stip.tran_fee_amount,
       cvc_data                  = :pte_tlf01_stip.cvc_data,

	   verify_mag_stripe         = :pte_tlf01_stip.verify_mag_stripe,            
       saf                       = :pte_tlf01_stip.saf,                  
       security_response_code    = :pte_tlf01_stip.security_response_code,             
       service_code              = :pte_tlf01_stip.service_code, 
	   source_pin_format         = :pte_tlf01_stip.source_pin_format,             
       dest_pin_format           = :pte_tlf01_stip.dest_pin_format,
       voice_auth                = :pte_tlf01_stip.voice_auth,
	   actual_amount             = :pte_tlf01_stip.actual_amount,
       reversal_amount           = :pte_tlf01_stip.reversal_amount, 
	   voice_auth_text           = :pte_tlf01_stip.voice_auth_text,
	   operator_id               = :pte_tlf01_stip.operator_id,
	   workstation				 = :pte_tlf01_stip.workstation,
	   orig_auth_number			 = :pte_tlf01_stip.orig_auth_number,
	   ticket_nbr                = :pte_tlf01_stip.ticket_nbr,
	   system_date               = :pte_tlf01_stip.system_date,
	   def_gross_amt             = :pte_tlf01_stip.def_gross_amt,
	   monthly_amort_amt         = :pte_tlf01_stip.monthly_amort_amt
   WHERE transaction_id = :pte_tlf01_stip.transaction_id;
       
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01_STIP ,Fun_Name : db_update_tlf01_stip_I , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }     
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_tlf01_stip,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}
/*************************************************************************************/
BYTE db_update_nfi02( pNFI02 nfi02_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   nfi02_to_db( nfi02_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_nfi02
      FROM   NFI02
      WHERE  file_name = :pte_nfi02.file_name AND
             rownum    = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NFI02 ,Fun_Name : db_update_nfi02_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }   
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
  		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_nfi02,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE nfi02
   SET   file_name                     =   :pte_nfi02.file_name,    
         start_date                    =   :pte_nfi02.start_date,         
         end_date                      =   :pte_nfi02.end_date
   WHERE  file_name    =   :pte_nfi02.file_name ;         
        
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NFI02 ,Fun_Name : db_update_nfi02_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_nfi02,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_nbf01( pNBF01 nbf01_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   nbf01_to_db( nbf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_nbf01
      FROM   nbf01
      WHERE  low       = :pte_nbf01.low   AND  
      		 high      = :pte_nbf01.high  AND
      		 rownum    = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NBF01 ,Fun_Name : db_update_nbf01_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_nbf01,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE nbf01
   SET   low            = :pte_nbf01.low,
         high           = :pte_nbf01.high
   WHERE low = :pte_nbf01.low AND high = :pte_nbf01.high;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NBF01 ,Fun_Name : db_update_nbf01_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   } 
       
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_nfi02,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_ngf01( pNGF01 ngf01_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   ngf01_to_db( ngf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_ngf01
      FROM   ngf01
      WHERE  negative_group_id = :pte_ngf01.negative_group_id AND
      		 rownum    		   = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NGF01 ,Fun_Name : db_update_ngf01_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   } 
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_ngf01,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE ngf01
   SET   negative_group_id        = :pte_ngf01.negative_group_id,
         low1                     = :pte_ngf01.low1,
         high1                    = :pte_ngf01.high1,
        low2                      = :pte_ngf01.low2,
         high2                    = :pte_ngf01.high2,
         low3                     = :pte_ngf01.low3,
         high3                    = :pte_ngf01.high3,
         low4                     = :pte_ngf01.low4,
         high4                    = :pte_ngf01.high4,
         low5                     = :pte_ngf01.low5,
         high5                    = :pte_ngf01.high5,
         low6                     = :pte_ngf01.low6,
         high6                    = :pte_ngf01.high6,
         low7                     = :pte_ngf01.low7,
         high7                    = :pte_ngf01.high7,
         low8                     = :pte_ngf01.low8,
         high8                    = :pte_ngf01.high8,
         low9                     = :pte_ngf01.low9,
         high9                    = :pte_ngf01.high9,
         low10                    = :pte_ngf01.low10,
         high10                   = :pte_ngf01.high10
   
   WHERE negative_group_id = :pte_ngf01.negative_group_id;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NGF01 ,Fun_Name : db_update_ngf01_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   } 
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_ngf01,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_mcf20( pMCF20 mcf20_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   mcf20_to_db( mcf20_ptr );
   
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_mcf20
      FROM   mcf20
      WHERE  organization_id = :pte_mcf20.organization_id  AND  
      		 merchant_id     = :pte_mcf20.merchant_id      AND  
      		 yyyymmdd        = :pte_mcf20.yyyymmdd         AND
      		 rownum    		 = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : MCF20 ,Fun_Name : db_update_mcf20_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   } 
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
  		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_mcf20,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE mcf20
   SET   organization_id                  = :pte_mcf20.organization_id,
         merchant_id                      = :pte_mcf20.merchant_id,
         yyyymmdd                         = :pte_mcf20.yyyymmdd,
         ytd_total_adds                   = :pte_mcf20.ytd_total_adds,
         ytd_total_deletes                = :pte_mcf20.ytd_total_deletes,
         mtd_total_adds                   = :pte_mcf20.mtd_total_adds,
         mtd_total_deletes                = :pte_mcf20.mtd_total_deletes,
         daily1_adds                      = :pte_mcf20.daily1_adds,
         daily1_deletes                   = :pte_mcf20.daily1_deletes,
         daily2_adds                      = :pte_mcf20.daily2_adds,
         daily2_deletes                   = :pte_mcf20.daily2_deletes,
         daily3_adds                      = :pte_mcf20.daily3_adds,
         daily3_deletes                   = :pte_mcf20.daily3_deletes,
         daily4_adds                      = :pte_mcf20.daily4_adds,
         daily4_deletes                   = :pte_mcf20.daily4_deletes,
         daily5_adds                      = :pte_mcf20.daily5_adds,
         daily5_deletes                   = :pte_mcf20.daily5_deletes,
         daily6_adds                      = :pte_mcf20.daily6_adds,
         daily6_deletes                   = :pte_mcf20.daily6_deletes,
         daily7_adds                      = :pte_mcf20.daily7_adds,
         daily7_deletes                   = :pte_mcf20.daily7_deletes,
         daily8_adds                      = :pte_mcf20.daily8_adds,
         daily8_deletes                   = :pte_mcf20.daily8_deletes,
         daily9_adds                      = :pte_mcf20.daily9_adds,
         daily9_deletes                   = :pte_mcf20.daily9_deletes,
         daily10_adds                     = :pte_mcf20.daily10_adds,
         daily10_deletes                  = :pte_mcf20.daily10_deletes,
         daily11_adds                     = :pte_mcf20.daily11_adds,
         daily11_deletes                  = :pte_mcf20.daily11_deletes,
         daily12_adds                     = :pte_mcf20.daily12_adds,
         daily12_deletes                  = :pte_mcf20.daily12_deletes,
         daily13_adds                     = :pte_mcf20.daily13_adds,
         daily13_deletes                  = :pte_mcf20.daily13_deletes,
         daily14_adds                     = :pte_mcf20.daily14_adds,
         daily14_deletes                  = :pte_mcf20.daily14_deletes,
         daily15_adds                     = :pte_mcf20.daily15_adds,
         daily15_deletes                  = :pte_mcf20.daily15_deletes,
         daily16_adds                     = :pte_mcf20.daily16_adds,
         daily16_deletes                  = :pte_mcf20.daily16_deletes,
         daily17_adds                     = :pte_mcf20.daily17_adds,
         daily17_deletes                  = :pte_mcf20.daily17_deletes,
         daily18_adds                     = :pte_mcf20.daily18_adds,
         daily18_deletes                  = :pte_mcf20.daily18_deletes,
         daily19_adds                     = :pte_mcf20.daily19_adds,
         daily19_deletes                  = :pte_mcf20.daily19_deletes,
         daily20_adds                     = :pte_mcf20.daily20_adds,
         daily20_deletes                  = :pte_mcf20.daily20_deletes,
         daily21_adds                     = :pte_mcf20.daily21_adds,
         daily21_deletes                  = :pte_mcf20.daily21_deletes,
         daily22_adds                     = :pte_mcf20.daily22_adds,
         daily22_deletes                  = :pte_mcf20.daily22_deletes,
         daily23_adds                     = :pte_mcf20.daily23_adds,
         daily23_deletes                  = :pte_mcf20.daily23_deletes,
         daily24_adds                     = :pte_mcf20.daily24_adds,
         daily24_deletes                  = :pte_mcf20.daily24_deletes,
         daily25_adds                     = :pte_mcf20.daily25_adds,
         daily25_deletes                  = :pte_mcf20.daily25_deletes,
         daily26_adds                     = :pte_mcf20.daily26_adds,
         daily26_deletes                  = :pte_mcf20.daily26_deletes,
         daily27_adds                     = :pte_mcf20.daily27_adds,
         daily27_deletes                  = :pte_mcf20.daily27_deletes,
         daily28_adds                     = :pte_mcf20.daily28_adds,
         daily28_deletes                  = :pte_mcf20.daily28_deletes,
         daily29_adds                     = :pte_mcf20.daily29_adds,
         daily29_deletes                  = :pte_mcf20.daily29_deletes,
         daily30_adds                     = :pte_mcf20.daily30_adds,
         daily30_deletes                  = :pte_mcf20.daily30_deletes,
         daily31_adds                     = :pte_mcf20.daily31_adds,
         daily31_deletes                  = :pte_mcf20.daily31_deletes

   WHERE organization_id = :pte_mcf20.organization_id AND merchant_id = :pte_mcf20.merchant_id AND yyyymmdd = :pte_mcf20.yyyymmdd;
   
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : MCF20 ,Fun_Name : db_update_mcf20_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }  
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_mcf20,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_ocf20( pOCF20 ocf20_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   ocf20_to_db( ocf20_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_ocf20
      FROM   ocf20
      WHERE  organization_id = :pte_ocf20.organization_id   AND  
      		 yyyymmdd        = :pte_ocf20.yyyymmdd          AND
      		 rownum    		 = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : OCF20 ,Fun_Name : db_update_ocf20_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   } 
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
  		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_ocf20,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL UPDATE ocf20
   SET   organization_id                 = :pte_ocf20.organization_id,
         yyyymmdd                        = :pte_ocf20.yyyymmdd,
         ytd_total_tran_cnt              = :pte_ocf20.ytd_total_tran_cnt,
         ytd_total_tran_amt              = :pte_ocf20.ytd_total_tran_amt,
         mtd_total_tran_cnt              = :pte_ocf20.mtd_total_tran_cnt,
         mtd_total_tran_amt              = :pte_ocf20.mtd_total_tran_amt,
         tran_cnt                        = :pte_ocf20.tran_cnt,
         tran_amt                        = :pte_ocf20.tran_amt,
         tran_approved_cnt               = :pte_ocf20.tran_approved_cnt,
         tran_declined_cnt               = :pte_ocf20.tran_declined_cnt,
         decline1_category_code          = :pte_ocf20.decline1_category_code,
         decline1_category_cnt           = :pte_ocf20.decline1_category_cnt,
         decline2_category_code          = :pte_ocf20.decline2_category_code,
         decline2_category_cnt           = :pte_ocf20.decline2_category_cnt,
         decline3_category_code          = :pte_ocf20.decline3_category_code,
         decline3_category_cnt           = :pte_ocf20.decline3_category_cnt,
         decline4_category_code          = :pte_ocf20.decline4_category_code,
         decline4_category_cnt           = :pte_ocf20.decline4_category_cnt,
         decline5_category_code          = :pte_ocf20.decline5_category_code,
         decline5_category_cnt           = :pte_ocf20.decline5_category_cnt,
         decline6_category_code          = :pte_ocf20.decline6_category_code,
         decline6_category_cnt           = :pte_ocf20.decline6_category_cnt,
         decline7_category_code          = :pte_ocf20.decline7_category_code,
         decline7_category_cnt           = :pte_ocf20.decline7_category_cnt,
         decline8_category_code          = :pte_ocf20.decline8_category_code,
         decline8_category_cnt           = :pte_ocf20.decline8_category_cnt,
         decline9_category_code          = :pte_ocf20.decline9_category_code,
         decline9_category_cnt           = :pte_ocf20.decline9_category_cnt,
         decline10_category_code         = :pte_ocf20.decline10_category_code,
         decline10_category_cnt          = :pte_ocf20.decline10_category_cnt,
         decline11_category_code         = :pte_ocf20.decline11_category_code,
         decline11_category_cnt          = :pte_ocf20.decline11_category_cnt,
         decline12_category_code         = :pte_ocf20.decline12_category_code,
         decline12_category_cnt          = :pte_ocf20.decline12_category_cnt,
         decline13_category_code         = :pte_ocf20.decline13_category_code,
         decline13_category_cnt          = :pte_ocf20.decline13_category_cnt,
         decline14_category_code         = :pte_ocf20.decline14_category_code,
         decline14_category_cnt          = :pte_ocf20.decline14_category_cnt,
         decline15_category_code         = :pte_ocf20.decline15_category_code,
         decline15_category_cnt          = :pte_ocf20.decline15_category_cnt,
         decline16_category_code         = :pte_ocf20.decline16_category_code,
         decline16_category_cnt          = :pte_ocf20.decline16_category_cnt,
         decline17_category_code         = :pte_ocf20.decline17_category_code,
         decline17_category_cnt          = :pte_ocf20.decline17_category_cnt,
         decline18_category_code         = :pte_ocf20.decline18_category_code,
         decline18_category_cnt          = :pte_ocf20.decline18_category_cnt,
         decline19_category_code         = :pte_ocf20.decline19_category_code,
         decline19_category_cnt          = :pte_ocf20.decline19_category_cnt,
         decline20_category_code         = :pte_ocf20.decline20_category_code,
         decline20_category_cnt          = :pte_ocf20.decline20_category_cnt
                  
   WHERE organization_id = :pte_ocf20.organization_id AND yyyymmdd = :pte_ocf20.yyyymmdd;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : OCF20 ,Fun_Name : db_update_ocf20_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }     
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_ocf20,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_ocf01( pOCF01 ocf01_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   ocf01_to_db( ocf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_ocf01
      FROM   ocf01
      WHERE  organization_id = :pte_ocf01.organization_id AND
      		 rownum    		 = 1
      For Update NOWAIT;
      
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : OCF01 ,Fun_Name : db_update_ocf01_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   } 
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
  		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_ocf01,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE ocf01 
   SET  organization_id                      = :pte_ocf01.organization_id,
        name01                               = :pte_ocf01.name01,
        addr01                               = :pte_ocf01.addr01,
        addr02                               = :pte_ocf01.addr02,
        city                                 = :pte_ocf01.city,
        state                                = :pte_ocf01.state,
        zip_code                             = :pte_ocf01.zip_code,
        intl_code                            = :pte_ocf01.intl_code,
        contact                              = :pte_ocf01.contact,
        phone01                              = :pte_ocf01.phone01,
        phone02                              = :pte_ocf01.phone02,
        date_added                           = :pte_ocf01.date_added,
        status                               = :pte_ocf01.status,
        totals_ind                           = :pte_ocf01.totals_ind,
        statistics_ind                       = :pte_ocf01.statistics_ind
                  
   WHERE organization_id = :pte_ocf01.organization_id;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : OCF01 ,Fun_Name : db_update_ocf01_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_ocf01,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_mcf01( pMCF01 mcf01_ptr, pCHAR ErrorMsg )
{
   INT  retval;
   char ErrorMsg1[100] = {0};
	
   memset( &db_dcf01, 0x00, sizeof( db_dcf01 ) );
   mcf01_to_db( mcf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_mcf01
      FROM   mcf01
      WHERE  merchant_id     = :pte_mcf01.merchant_id      AND  
      		 organization_id = :pte_mcf01.organization_id  AND
      		 rownum    		 = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : MCF01 ,Fun_Name : db_update_mcf01_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
 		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_mcf01,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL UPDATE mcf01 
   SET organization_id              = :pte_mcf01.organization_id,
       merchant_id                  = :pte_mcf01.merchant_id,                              
       status                       = :pte_mcf01.status,
       name01                       = :pte_mcf01.name01,
       name02                       = :pte_mcf01.name02,
       address01                    = :pte_mcf01.address01,
       address02                    = :pte_mcf01.address02,
       city                         = :pte_mcf01.city,
       country                      = :pte_mcf01.country,
       state                        = :pte_mcf01.state,
       zip_code                     = :pte_mcf01.zip_code,
       intl_code                    = :pte_mcf01.intl_code,
       currency_code                = :pte_mcf01.currency_code,
       contact                      = :pte_mcf01.contact,
       phone01                      = :pte_mcf01.phone01,
       phone02                      = :pte_mcf01.phone02,
       invoice_batch                = :pte_mcf01.invoice_batch,
       invoice_subcode              = :pte_mcf01.invoice_subcode,
       process_control_id           = :pte_mcf01.process_control_id,
       date_added                   = :pte_mcf01.date_added,
       region_nbr                   = :pte_mcf01.region_nbr,          
       division_nbr                 = :pte_mcf01.division_nbr,                    
       password                     = :pte_mcf01.password,                   
       rps_merchant                 = :pte_mcf01.rps_merchant,             
       house_card_merchant          = :pte_mcf01.house_card_merchant,    
       procurement_merchant         = :pte_mcf01.procurement_merchant,   
       deferred_merchant            = :pte_mcf01.deferred_merchant,    
       cash_bonus_eligible          = :pte_mcf01.cash_bonus_eligible,    
       vip_code                     = :pte_mcf01.vip_code,                      
       pos_code                     = :pte_mcf01.pos_code,                      
       vs_tcc_code                  = :pte_mcf01.vs_tcc_code,                
       mc_fcc_code                  = :pte_mcf01.mc_fcc_code,                
       jcb_sub_code                 = :pte_mcf01.jcb_sub_code,               
       mall_code                    = :pte_mcf01.mall_code,                    
       hc_code                      = :pte_mcf01.hc_code,                       
       solicit_code                 = :pte_mcf01.solicit_code,         
       block_start_date             = :pte_mcf01.block_start_date,
       block_end_date               = :pte_mcf01.block_end_date,
       credit_purch_max             = :pte_mcf01.credit_purch_max,
       credit_auth_max              = :pte_mcf01.credit_auth_max,
       credit_return_max            = :pte_mcf01.credit_return_max,
       credit_cash_adv_max          = :pte_mcf01.credit_cash_adv_max,
       credit_man_entry_max         = :pte_mcf01.credit_man_entry_max,
       credit_cash_back_max         = :pte_mcf01.credit_cash_back_max,
       debit_purch_max              = :pte_mcf01.debit_purch_max,
       debit_auth_max               = :pte_mcf01.debit_auth_max,
       debit_return_max             = :pte_mcf01.debit_return_max,
       debit_cash_adv_max           = :pte_mcf01.debit_cash_adv_max,
       debit_man_entry_max          = :pte_mcf01.debit_man_entry_max,
       debit_cash_back_max          = :pte_mcf01.debit_cash_back_max,
       aver_purch_amount            = :pte_mcf01.aver_purch_amount,
       max_num_returns              = :pte_mcf01.max_num_returns,
       amount_returns               = :pte_mcf01.amount_returns,
       number_man_entries           = :pte_mcf01.number_man_entries,
       amount_deposits              = :pte_mcf01.amount_deposits,
       pan_same                     = :pte_mcf01.pan_same,

       totals_ind                   = :pte_mcf01.totals_ind,
       statistics_ind               = :pte_mcf01.statistics_ind,

       network_priority_routing_1   = :pte_mcf01.network_priority_routing_1,
       network_priority_routing_2   = :pte_mcf01.network_priority_routing_2,
       network_priority_routing_3   = :pte_mcf01.network_priority_routing_3,
       network_priority_routing_4   = :pte_mcf01.network_priority_routing_4,
       network_priority_routing_5   = :pte_mcf01.network_priority_routing_5,
       network_priority_routing_6   = :pte_mcf01.network_priority_routing_6,
       network_priority_routing_7   = :pte_mcf01.network_priority_routing_7,
       network_priority_routing_8   = :pte_mcf01.network_priority_routing_8,
       network_priority_routing_9   = :pte_mcf01.network_priority_routing_9,
       network_priority_routing_10  = :pte_mcf01.network_priority_routing_10,
       negative_group_id            = :pte_mcf01.negative_group_id,
       voice_category_code          = :pte_mcf01.voice_category_code,
       class_code                   = :pte_mcf01.class_code,
       deferred_start_date          = :pte_mcf01.deferred_start_date,
       deferred_end_date            = :pte_mcf01.deferred_end_date,
       group_outlet_code            = :pte_mcf01.group_outlet_code,
       group_type                   = :pte_mcf01.group_type,
       reload_merchant              = :pte_mcf01.reload_merchant

   WHERE merchant_id = :pte_mcf01.merchant_id AND organization_id = :pte_mcf01.organization_id;
  
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : MCF01 ,Fun_Name : db_update_mcf01_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   } 
     
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_mcf01,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
  
   
   if(strncmp(pte_mcf01.status,MID_TID_STATE_RESTRICTED_VALUE,1) == 0)
   {
	   if ( db_error_statics_flag == true )
	   {
	          start_time = ptetime_get_time();
	   }
	   EXEC SQL SELECT *
	   INTO :db_dcf01
	   FROM dcf01
	   WHERE merchant_id = :pte_mcf01.merchant_id AND
	   		 organization_id = :pte_mcf01.organization_id AND
	   		 rownum    		 = 1
      		 For Update NOWAIT;
	   
	   if ( db_error_statics_flag == true )
	   {
	         end_time = ptetime_get_time();
	      	 duration = end_time - start_time;
	      	 if(duration >= db_error_statics_value)
		  	 {
		  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : DCF01 ,Fun_Name : db_update_mcf01_Select_DCF01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		  	 }
	   }  
		  
	  
		
	 	//No record found, no TID for the restricted Merchant ID
		 if(SQLCODE == NO_DATA_FOUND)
		 {
		 	memset(er_buf,0x00,sizeof(er_buf));
			sprintf(er_buf,"In db_update_mcf01,ST1 : %d,ST2 : %d _3",DB_MsgSubtype1,DB_MsgSubtype2);
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			strcat(er_buf,ErrorMsg);
			strcat(er_buf,"  NO TID corresponds to the particular Restricted Merchant ID");
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return PTEMSG_OK;
		 }
		 //There is issue in select query except NULL colum data
		 //Error in Select query or Columns might have null values
		 else if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
		 {
		 	memset(er_buf,0x00,sizeof(er_buf));
		 	memset(ErrorMsg,0x00,sizeof(ErrorMsg));
		 	sprintf(er_buf,"In db_update_mcf01,ST1:%d,ST2:%d _4",DB_MsgSubtype1,DB_MsgSubtype2);
		 	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			strncpy(ErrorMsg1," TID Select ",13);
			strcat(ErrorMsg1,ErrorMsg);
			memset(ErrorMsg,0x00,sizeof(ErrorMsg));
			strcpy(ErrorMsg,ErrorMsg1);
			strcat(er_buf, ErrorMsg );
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
		  }
		
		 // Terminal assosiated with This MID is present.Lets updated.
	  	else 
		{
		   if ( db_error_statics_flag == true )
		   {
		      start_time = ptetime_get_time();
		   }
	  
			EXEC SQL UPDATE dcf01
			SET status = :pte_mcf01.status 
			WHERE merchant_id = :pte_mcf01.merchant_id  AND  
				  organization_id = :pte_mcf01.organization_id ;
		}
	
		
		if ( db_error_statics_flag == true )
	   	{
	         end_time = ptetime_get_time();
	      	 duration = end_time - start_time;
	      	 if(duration >= db_error_statics_value)
		  	 {
		  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : Updating DCF01 ,Fun_Name : db_update_mcf01_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		  	 }
	  	}   
	  	
	   if ( SQLCODE != 0 )
	   {
			memset(er_buf,0x00,sizeof(er_buf));
			sprintf(er_buf,"While updating status of TID in DCF01, ST1 : %d , ST2 : %d_5",DB_MsgSubtype1,DB_MsgSubtype2);
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			strncpy(ErrorMsg1," TID Update ",13);
			strcat(ErrorMsg1,ErrorMsg);
			memset(ErrorMsg,0x00,sizeof(ErrorMsg));
			strcpy(ErrorMsg,ErrorMsg1);
			strcat(er_buf, ErrorMsg );
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
		}
	}
		
   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/

BYTE db_return_bch01_delete_bch10( pBCH01 bch01_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   char batch_nbr[7];
   char device_id[9];
   char merchant_id[16];
   EXEC SQL END DECLARE SECTION;

   bch01_to_db( bch01_ptr );
   memset(batch_nbr, 0, sizeof(batch_nbr));
   memset(device_id, 0, sizeof(device_id));
   memset(merchant_id, 0, sizeof(merchant_id));
   strncpy( batch_nbr, bch01_ptr->primary_key.batch_nbr, sizeof(batch_nbr) );
   strncpy( device_id, bch01_ptr->primary_key.device_id, sizeof(device_id) );
   strncpy( merchant_id, bch01_ptr->merchant_id, sizeof(merchant_id) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL SELECT * 
            INTO db_bch01
            FROM bch01 
            WHERE device_id   = :device_id   AND 
            	  batch_nbr   = :batch_nbr   AND 
            	  merchant_id = :merchant_id AND
            	  rownum      = 1 ;
            	  
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_return_bch01_delete_bch10 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   } 
   if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_return_bch01_delete_bch10,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   
   if(SQLCODE == NO_DATA_FOUND)
   {

      if ( db_error_statics_flag == true )
      {
         start_time = ptetime_get_time();
      }
      EXEC SQL DELETE FROM bch10 
      where device_id 	= :device_id   AND 
      		merchant_id = :merchant_id AND 
      		batch_nbr 	= :batch_nbr;
      if ( db_error_statics_flag == true )
      {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_return_bch01_delete_bch10 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
      } 
   }
   else
   {
      db_to_bch01 (bch01_ptr);
   }

   return PTEMSG_OK;
}

/*************************************************************************************/

/*************************************************************************************/

BYTE db_return_bch01_mp_delete_bch10( pBCH01_MP bch01_mp_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   char batch_nbr[7];
   char device_id[9];
   char merchant_id[16];
   EXEC SQL END DECLARE SECTION;

   bch01_mp_to_db( bch01_mp_ptr );
   memset(batch_nbr, 0, sizeof(batch_nbr));
   memset(device_id, 0, sizeof(device_id));
   memset(merchant_id, 0, sizeof(merchant_id));
   strncpy( batch_nbr, bch01_mp_ptr->primary_key.batch_nbr, sizeof(batch_nbr) );
   strncpy( device_id, bch01_mp_ptr->primary_key.device_id, sizeof(device_id) );
   strncpy( merchant_id, bch01_mp_ptr->merchant_id, sizeof(merchant_id) );

   if ( db_error_statics_flag == true )
   {
       start_time = ptetime_get_time();
   }
   EXEC SQL SELECT * 
        INTO db_bch01_mp
        FROM bch01_mp 
        WHERE device_id		 = :device_id   AND 
       		  merchant_id 	 = :merchant_id AND 
        	  batch_nbr 	 = :batch_nbr   AND
        	  rownum         = 1 ;
            
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_return_bch01_mp_delete_bch10 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   } 
   if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_return_bch01_mp_delete_bch10,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   
   if(SQLCODE == NO_DATA_FOUND)
   {
      if ( db_error_statics_flag == true )
  	  {
       		start_time = ptetime_get_time();
 	  }
      EXEC SQL DELETE FROM bch10 
      		where device_id   = :device_id   AND 
      			  merchant_id = :merchant_id AND 
      			  batch_nbr	  = :batch_nbr;
      if ( db_error_statics_flag == true )
      {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_return_bch01_mp_delete_bch10 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
      }
   }
   else
   {
      db_to_bch01_mp (bch01_mp_ptr);
   }

   return PTEMSG_OK;

}

/*************************************************************************************/


/*************************************************************************************/

BYTE db_update_bch01_delete_bch10( pBCH01 bch01_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   char batch_nbr[7] = {0};
   char device_id[9] = {0};
   char merchant_id[16] = {0};
   EXEC SQL END DECLARE SECTION;

   bch01_to_db( bch01_ptr );
   memset(batch_nbr, 0, sizeof(batch_nbr));
   memset(device_id, 0, sizeof(device_id));
   memset(merchant_id, 0, sizeof(merchant_id));
   strncpy( batch_nbr, "ACTIVE", sizeof(batch_nbr) );
   strncpy( device_id, bch01_ptr->primary_key.device_id, sizeof(device_id) );
   strncpy( merchant_id, bch01_ptr->merchant_id, sizeof(merchant_id) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch01
      FROM   bch01
      WHERE  device_id   = :pte_bch01.device_id    AND  
      		 batch_nbr   = :batch_nbr              AND  
      		 merchant_id = :pte_bch01.merchant_id  AND 
      		 rownum      = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_update_bch01_delete_bch10_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
  		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_delete_bch10,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE bch01 
   SET total_credit_cnt          	  = :pte_bch01.total_credit_cnt,           
       total_credit_amt          	  = :pte_bch01.total_credit_amt,           
       total_credit_refund_cnt   	  = :pte_bch01.total_credit_refund_cnt,           
       total_credit_refund_amt   	  = :pte_bch01.total_credit_refund_amt,           
       total_debit_cnt           	  = :pte_bch01.total_debit_cnt,           
       total_debit_amt           	  = :pte_bch01.total_debit_amt,           
       total_debit_refund_cnt    	  = :pte_bch01.total_debit_refund_cnt,           
       total_debit_refund_amt    	  = :pte_bch01.total_debit_refund_amt, 
       total_void_credit_cnt          = :pte_bch01.total_void_credit_cnt,           
       total_void_credit_amt          = :pte_bch01.total_void_credit_amt,           
       total_void_credit_refund_cnt   = :pte_bch01.total_void_credit_refund_cnt,           
       total_void_credit_refund_amt   = :pte_bch01.total_void_credit_refund_amt      
                 
   WHERE device_id 	 = :pte_bch01.device_id AND 
   		 batch_nbr 	 = :batch_nbr 		    AND 
   		 merchant_id = :pte_bch01.merchant_id;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_update_bch01_delete_bch10_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_delete_bch10,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL WHENEVER NOTFOUND CONTINUE ;
   EXEC SQL DELETE FROM bch10 
   		where device_id   = :pte_bch01.device_id AND 
   			  merchant_id = :merchant_id 		 AND 
   			  batch_nbr   = :batch_nbr;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_update_bch01_delete_bch10 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }

   return PTEMSG_OK;
}

/*************************************************************************************/

/*************************************************************************************/

BYTE db_update_bch01_mp_delete_bch10( pBCH01_MP bch01_mp_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   char batch_nbr[7]= {0};
   char device_id[9]= {0};
   char acquirer_id[20]= {0};
   char terminal_id[20]= {0};
   char batch_number[10]= {0};
   char product2_code[10]= {0};
   EXEC SQL END DECLARE SECTION;

   bch01_mp_to_db( bch01_mp_ptr );
   memset(batch_nbr, 0, sizeof(batch_nbr));
   memset(device_id, 0, sizeof(device_id));
   memset(acquirer_id, 0, sizeof(acquirer_id));
   memset(terminal_id, 0, sizeof(terminal_id));
   memset(batch_number, 0, sizeof(batch_number));
   memset(product2_code, 0, sizeof(product2_code));
   strncpy( batch_nbr, "ACTIVE", sizeof(batch_nbr) );
   strncpy( device_id, bch01_mp_ptr->primary_key.device_id, sizeof(device_id) );
   strcpy( acquirer_id, "nciftr");
   strcpy( batch_number, "ACTIVE");
   strcpy( product2_code, "stndin");

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch01_mp
      FROM   bch01_mp
      WHERE  device_id   = :pte_bch01_mp.device_id    AND 
      		 merchant_id = :pte_bch01_mp.merchant_id  AND  
      		 batch_nbr	 = :batch_nbr                 AND
      		 rownum      = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01_MP ,Fun_Name : db_update_bch01_mp_delete_bch10_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_mp_delete_bch10,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL UPDATE bch01_mp 
   SET total_credit_cnt          	  = :pte_bch01_mp.total_credit_cnt,           
       total_credit_amt          	  = :pte_bch01_mp.total_credit_amt,           
       total_credit_refund_cnt   	  = :pte_bch01_mp.total_credit_refund_cnt,           
       total_credit_refund_amt   	  = :pte_bch01_mp.total_credit_refund_amt,           
       total_debit_cnt          	  = :pte_bch01_mp.total_debit_cnt,           
       total_debit_amt          	  = :pte_bch01_mp.total_debit_amt,           
       total_debit_refund_cnt   	  = :pte_bch01_mp.total_debit_refund_cnt,           
       total_debit_refund_amt   	  = :pte_bch01_mp.total_debit_refund_amt, 
       total_void_credit_cnt          = :pte_bch01_mp.total_void_credit_cnt,           
       total_void_credit_amt          = :pte_bch01_mp.total_void_credit_amt,           
       total_void_credit_refund_cnt   = :pte_bch01_mp.total_void_credit_refund_cnt,           
       total_void_credit_refund_amt   = :pte_bch01_mp.total_void_credit_refund_amt      
                 
   WHERE device_id 	 = :pte_bch01_mp.device_id   AND 
   		 merchant_id = :pte_bch01_mp.merchant_id AND 
   		 batch_nbr 	 = :batch_nbr;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01_MP ,Fun_Name : db_update_bch01_mp_delete_bch10_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }    
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_mp_delete_bch10,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL WHENEVER NOTFOUND CONTINUE ;
   EXEC SQL DELETE FROM bch10 
   		where device_id   = :pte_bch01_mp.device_id   AND 
   			  merchant_id = :pte_bch01_mp.merchant_id AND 
   			  batch_nbr   = :batch_nbr;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_update_bch01_mp_delete_bch10_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }   
   return PTEMSG_OK;
}

/*************************************************************************************/

/*************************************************************************************/

BYTE db_update_bch01_good_settle( pBCH01 bch01_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   char batch_nbr[7]="";
   char device_id[9]="";
   char CUP_merchnat_id[16]="";
   char settle_date[5]="";
   EXEC SQL END DECLARE SECTION;

   bch01_to_db( bch01_ptr );
   memset(batch_nbr, 0, sizeof(batch_nbr));
   memset(device_id, 0, sizeof(device_id));
   strncpy( batch_nbr, "ACTIVE", sizeof(batch_nbr) );
   strncpy( device_id, bch01_ptr->primary_key.device_id, sizeof(device_id) );
   strncpy( CUP_merchnat_id, bch01_ptr->visa_merchant_id,15 );
   strncpy(settle_date,bch01_ptr->release_date +4 , 4);//copy only mm dd
   if(0 == strlen(CUP_merchnat_id))
   {
		strncpy( CUP_merchnat_id, bch01_ptr->merchant_id, sizeof(CUP_merchnat_id) );
   }
   
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch01
      FROM   bch01
      WHERE  device_id   = :pte_bch01.device_id      AND  
      		 batch_nbr   = :batch_nbr        		 AND  
      		 merchant_id = :pte_bch01.merchant_id    AND
      		 rownum      = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_update_bch01_good_settle_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   } 
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
 		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_good_settle,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE bch01 
   SET batch_nbr                 = :pte_bch01.batch_nbr,                 
       release_date              = :pte_bch01.release_date,
       release_time              = :pte_bch01.release_time,
       batch_status              = :pte_bch01.batch_status,
       visa_merchant_id          = :pte_bch01.visa_merchant_id

   WHERE device_id   = :pte_bch01.device_id AND 
   		 batch_nbr   = :batch_nbr AND
   		 merchant_id = :pte_bch01.merchant_id ;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_update_bch01_good_settle_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }     
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_good_settle,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL WHENEVER NOTFOUND CONTINUE ;
   EXEC SQL UPDATE bch10 
   SET batch_nbr                 = :pte_bch01.batch_nbr
   WHERE device_id   = :pte_bch01.device_id   AND 
   		 merchant_id = :pte_bch01.merchant_id AND
		 batch_nbr   = :batch_nbr;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_update_bch01_good_settle , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   } 
   if ( SQLCODE != 0 && ( SQLCODE != NO_DATA_FOUND))
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_good_settle,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
 /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_dcf01
      FROM   dcf01
      WHERE device_id = :pte_bch01.device_id AND
      		merchant_id = :CUP_merchnat_id AND
       		rownum = 1
      For Update NOWAIT;

if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      return( dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg) );
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL UPDATE dcf01 
   SET batch_nbr   = :pte_bch01.batch_nbr                            
   WHERE device_id = :pte_bch01.device_id AND merchant_id = :CUP_merchnat_id;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : DCF01 ,Fun_Name : db_update_bch01_good_settle , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }    
   if (( SQLCODE != 0 ) && (SQLCODE != NULL_COLUMN_DATA) )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_good_settle,ST1:%d,ST2:%d_4",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/

/*************************************************************************************/

BYTE db_update_bch01_mp_good_settle( pBCH01_MP bch01_mp_ptr, int  standin, pCHAR ErrorMsg )
{
   INT  retval;

   printf("In db_update_bch01_mp_good_settle\n");
   EXEC SQL BEGIN DECLARE SECTION;
   char batch_nbr[7]={0};
   char device_id[9]={0};
   char acquirer_id[20]={0};
   char terminal_id[20]={0};
   EXEC SQL END DECLARE SECTION;

   bch01_mp_to_db( bch01_mp_ptr );
   memset(batch_nbr, 0, sizeof(batch_nbr));
   memset(device_id, 0, sizeof(device_id));
   memset(acquirer_id, 0, sizeof(acquirer_id));
   memset(terminal_id, 0, sizeof(terminal_id));
   strncpy( batch_nbr, "ACTIVE", sizeof(batch_nbr) );
   strncpy( device_id, bch01_mp_ptr->primary_key.device_id, sizeof(device_id) );
   strcpy( acquirer_id, "nciftr");

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch01_mp
      FROM   bch01_mp
      WHERE  device_id 	 = :pte_bch01_mp.device_id    AND 
      		 merchant_id = :pte_bch01_mp.merchant_id  AND  
      		 batch_nbr 	 = :batch_nbr				  AND
      		 rownum      = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01_MP ,Fun_Name : db_update_bch01_mp_good_settle_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      printf("Error on selecting");
      /* Record is inaccessible. Return with error. */
  		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_mp_good_settle,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE bch01_mp 
   SET batch_nbr                 = :pte_bch01_mp.batch_nbr,                 
       release_date              = :pte_bch01_mp.release_date,
       release_time              = :pte_bch01_mp.release_time,
       batch_status              = :pte_bch01_mp.batch_status,
       visa_merchant_id          = :pte_bch01_mp.visa_merchant_id

   WHERE device_id   = :pte_bch01_mp.device_id   AND 
   		 merchant_id = :pte_bch01_mp.merchant_id AND 
   		 batch_nbr   = :batch_nbr;
   		 
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01_MP ,Fun_Name : db_update_bch01_mp_good_settle_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }   
   if ( SQLCODE != 0 )
   {
      printf("Error in bch01_mp update %d\n",SQLCODE);
      
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_mp_good_settle,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
  }
EXEC SQL WHENEVER NOTFOUND CONTINUE ;
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch10
      FROM   bch10
      WHERE  device_id   = :pte_bch01_mp.device_id    AND 
      		 merchant_id = :pte_bch01_mp.merchant_id  AND  
      		 batch_nbr   = :batch_nbr				  AND
      		 rownum      = 1
      For Update NOWAIT;

   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      printf("Error on selecting");
      /* Record is inaccessible. Return with error. */
      return( dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg) );
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL WHENEVER NOTFOUND CONTINUE ;
   EXEC SQL UPDATE bch10 
   SET batch_nbr                 = :pte_bch01_mp.batch_nbr
   WHERE device_id   = :pte_bch01_mp.device_id    AND 
   		 merchant_id = :pte_bch01_mp.merchant_id  AND 
   		 batch_nbr   = :batch_nbr;
       
   if ( db_error_statics_flag == true )
   {
         end_time = ptetime_get_time();
      	 duration = end_time - start_time;
      	 if(duration >= db_error_statics_value)
	  	 {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_update_bch01_mp_good_settle , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   } 
   if ( SQLCODE != 0 && ( SQLCODE != NO_DATA_FOUND))
   {  
   	  printf("Error in bch10 update\n");
      
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_mp_good_settle,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

 /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_dcf01
      FROM   dcf01
      WHERE device_id = :pte_bch01_mp.device_id     AND
        	merchant_id = :pte_bch01_mp.merchant_id AND
            rownum = 1
      For Update NOWAIT;

   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      printf("Error on selecting");
      /* Record is inaccessible. Return with error. */
      return( dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg) );
   }	
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE dcf01 
   SET batch_nbr   = :pte_bch01_mp.batch_nbr                            
   WHERE device_id = :pte_bch01_mp.device_id AND merchant_id = :pte_bch01_mp.merchant_id;
   
   if ( db_error_statics_flag == true )
   {
      end_time = ptetime_get_time();
      duration = end_time - start_time;
      if(duration >= db_error_statics_value)
	  {
	  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : DCF01 ,Fun_Name : db_update_bch01_mp_good_settle , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  }
   }
   if (( SQLCODE != 0 ) && (SQLCODE != NULL_COLUMN_DATA) )
   {
   	  printf("Error is updating dcf01\n");
      
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_mp_good_settle,ST1:%d,ST2:%d_4",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   // We have to do this only for Stip transaction
   if (standin == 1)
   {
          if ( db_error_statics_flag == true )
          {
      		 start_time = ptetime_get_time();
          }
	     EXEC SQL
	      SELECT *
	      INTO  :db_tlf01_stip
	      FROM   tlf01_stip
	      WHERE terminal_id = :pte_bch01_mp.device_id   AND 
				merchant_id = :pte_bch01_mp.merchant_id AND 
				batch_number = :batch_nbr 			    AND
				acquirer_id = :acquirer_id 				AND
				rownum      = 1
	      For Update NOWAIT;
	     
	     if ( db_error_statics_flag == true )
   		 {
     		 end_time = ptetime_get_time();
     		 duration = end_time - start_time;
    		 if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01_STIP ,Fun_Name : db_update_bch01_mp_good_settle_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
   		}
	   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
	   {
	        /* There is no stip records as all sale transaction fro */
	        /*this batch is online only settlemetn if OFFLINE */
	        return PTEMSG_OK; 
	   }
       if ( db_error_statics_flag == true )
       {
      		start_time = ptetime_get_time();
       }
       
  	 EXEC SQL UPDATE tlf01_stip 
		 SET batch_number	 = :pte_bch01_mp.batch_nbr							  
		 WHERE terminal_id = :pte_bch01_mp.device_id AND 
				merchant_id = :pte_bch01_mp.merchant_id AND 
				batch_number = :batch_nbr AND
				acquirer_id = :acquirer_id ;
         
         if ( db_error_statics_flag == true )
   		 {
     		 end_time = ptetime_get_time();
     		 duration = end_time - start_time;
    		 if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01_STIP ,Fun_Name : db_update_bch01_mp_good_settle_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
   		}
		 if (( SQLCODE != 0 ) && (SQLCODE != NULL_COLUMN_DATA) )
			 {
			    printf("Error in TLF01_stip tables\n");
			    /* We are not able to update tlf01_table, continue as we have to send response to 0500*/
				memset(er_buf,0x00,sizeof(er_buf));
				sprintf(er_buf,"In db_update_bch01_mp_good_settle,ST1:%d,ST2:%d_5",DB_MsgSubtype1,DB_MsgSubtype2);
				dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
				strcat(er_buf,ErrorMsg);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
				return PTEMSG_OK; 
			}
   	}
   	else
   	{
   	 // batch is settle online, let us update all the records for this batch as procsd in TLF01_stip
   	 
   	     if ( db_error_statics_flag == true )
          {
      		 start_time = ptetime_get_time();
          }
	     EXEC SQL
	      SELECT *
	      INTO  :db_tlf01_stip
	      FROM   tlf01_stip
	      WHERE terminal_id = :pte_bch01_mp.device_id   AND 
				merchant_id = :pte_bch01_mp.merchant_id AND 
				batch_number = :batch_nbr 			    AND
				acquirer_id = :acquirer_id				AND
				rownum      = 1 
	      For Update NOWAIT;
	      
	      
	     if ( db_error_statics_flag == true )
   		 {
     		 end_time = ptetime_get_time();
     		 duration = end_time - start_time;
    		 if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01_STIP ,Fun_Name : db_update_bch01_mp_good_settle_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
   		}
		   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
		   {
		        /* There is no stip records as all sale transaction fro */
		        /*this batch is online only settlemetn if OFFLINE */
		        return PTEMSG_OK; 
		   }
		if ( db_error_statics_flag == true )
       {
      		start_time = ptetime_get_time();
       }
   		EXEC SQL UPDATE tlf01_stip 
		 SET batch_number	 = :pte_bch01_mp.batch_nbr,
		     product2_code = 'procsd'							  
		 WHERE terminal_id = :pte_bch01_mp.device_id AND 
				merchant_id = :pte_bch01_mp.merchant_id AND 
				batch_number = :batch_nbr AND
				acquirer_id = :acquirer_id ;
	  if ( db_error_statics_flag == true )
   	  {
     		 end_time = ptetime_get_time();
     		 duration = end_time - start_time;
    		 if(duration >= db_error_statics_value)
	  		{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
				sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01_STIP ,Fun_Name : db_update_bch01_mp_good_settle_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
      }
   	}

   return PTEMSG_OK;
}

/*************************************************************************************/



/*************************************************************************************/

BYTE db_update_bch01( pBCH01 bch01_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   bch01_to_db( bch01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch01
      FROM   bch01
      WHERE  device_id   = :pte_bch01.device_id      AND  
      		 batch_nbr   = :pte_bch01.batch_nbr      AND  
      		 open_time   = :pte_bch01.open_time      AND  
      		 open_date   = :pte_bch01.open_date      AND  
      		 merchant_id = :pte_bch01.merchant_id    AND
      		 rownum      = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_update_bch01_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
  		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL UPDATE bch01 
   SET device_id                 	  = :pte_bch01.device_id,                              
       batch_nbr                 	  = :pte_bch01.batch_nbr,                 
       merchant_id               	  = :pte_bch01.merchant_id,
       total_credit_cnt          	  = :pte_bch01.total_credit_cnt,           
       total_credit_amt          	  = :pte_bch01.total_credit_amt,           
       total_credit_refund_cnt   	  = :pte_bch01.total_credit_refund_cnt,           
       total_credit_refund_amt   	  = :pte_bch01.total_credit_refund_amt,           
       total_debit_cnt           	  = :pte_bch01.total_debit_cnt,           
       total_debit_amt           	  = :pte_bch01.total_debit_amt,           
       total_debit_refund_cnt    	  = :pte_bch01.total_debit_refund_cnt,           
       total_debit_refund_amt    	  = :pte_bch01.total_debit_refund_amt, 
       total_void_credit_cnt          = :pte_bch01.total_void_credit_cnt,           
       total_void_credit_amt          = :pte_bch01.total_void_credit_amt,           
       total_void_credit_refund_cnt   = :pte_bch01.total_void_credit_refund_cnt,           
       total_void_credit_refund_amt   = :pte_bch01.total_void_credit_refund_amt,      
                 
       open_date                 	  = :pte_bch01.open_date,
       open_time                 	  = :pte_bch01.open_time,
       release_date              	  = :pte_bch01.release_date,
       release_time              	  = :pte_bch01.release_time,
       batch_status              	  = :pte_bch01.batch_status,
       visa_merchant_id          	  = :pte_bch01.visa_merchant_id

   WHERE device_id 	 = :pte_bch01.device_id   AND 
   		 batch_nbr   = :pte_bch01.batch_nbr   AND 
   		 merchant_id = :pte_bch01.merchant_id AND 
   		 open_time   = :pte_bch01.open_time   AND 
   		 open_date   = :pte_bch01.open_date;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_update_bch01_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/

/*************************************************************************************/

BYTE db_update_bch01_mp( pBCH01_MP bch01_mp_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   bch01_mp_to_db( bch01_mp_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch01_mp
      FROM   bch01_mp
      WHERE  device_id   = :pte_bch01_mp.device_id   AND  
      		 merchant_id = :pte_bch01_mp.merchant_id AND  
      		 batch_nbr 	 = :pte_bch01_mp.batch_nbr   AND  
      		 open_time 	 = :pte_bch01_mp.open_time   AND  
      		 open_date 	 = :pte_bch01_mp.open_date	 AND
      		 rownum      = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01_MP ,Fun_Name : db_update_bch01_mp_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
 		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_mp,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL UPDATE bch01_mp 
   SET device_id                 	  = :pte_bch01_mp.device_id,                              
       batch_nbr                 	  = :pte_bch01_mp.batch_nbr,                 
       merchant_id               	  = :pte_bch01_mp.merchant_id,
       total_credit_cnt         	  = :pte_bch01_mp.total_credit_cnt,           
       total_credit_amt         	  = :pte_bch01_mp.total_credit_amt,           
       total_credit_refund_cnt   	  = :pte_bch01_mp.total_credit_refund_cnt,           
       total_credit_refund_amt   	  = :pte_bch01_mp.total_credit_refund_amt,           
       total_debit_cnt          	  = :pte_bch01_mp.total_debit_cnt,           
       total_debit_amt          	  = :pte_bch01_mp.total_debit_amt,           
       total_debit_refund_cnt   	  = :pte_bch01_mp.total_debit_refund_cnt,           
       total_debit_refund_amt    	  = :pte_bch01_mp.total_debit_refund_amt, 
       total_void_credit_cnt          = :pte_bch01_mp.total_void_credit_cnt,           
       total_void_credit_amt          = :pte_bch01_mp.total_void_credit_amt,           
       total_void_credit_refund_cnt   = :pte_bch01_mp.total_void_credit_refund_cnt,           
       total_void_credit_refund_amt   = :pte_bch01_mp.total_void_credit_refund_amt,      
                 
       open_date                 	  = :pte_bch01_mp.open_date,
       open_time                	  = :pte_bch01_mp.open_time,
       release_date             	  = :pte_bch01_mp.release_date,
       release_time             	  = :pte_bch01_mp.release_time,
       batch_status             	  = :pte_bch01_mp.batch_status,
       visa_merchant_id          	  = :pte_bch01_mp.visa_merchant_id

   WHERE device_id   = :pte_bch01_mp.device_id   AND 
   		 merchant_id = :pte_bch01_mp.merchant_id AND 
   		 batch_nbr 	 = :pte_bch01_mp.batch_nbr   AND 
   		 open_time   = :pte_bch01_mp.open_time   AND 
   		 open_date   = :pte_bch01_mp.open_date;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01_MP ,Fun_Name : db_update_bch01_mp_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }  
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_mp,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/



/*************************************************************************************/
BYTE db_update_bch01_to_close_batch( pBCH01 bch01_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
      char batch_nbr[7]="";
	  char batch_tmp[7]="";
   	  char date[9]="";
	  char time[7]="";
	  char yymmdd[25]="";
   EXEC SQL END DECLARE SECTION;


   bch01_to_db( bch01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT NVL (batch_nbr, 0)
   INTO batch_nbr
   FROM dcf01
   WHERE device_id = :pte_bch01.device_id AND merchant_id = :pte_bch01.merchant_id;
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : DCF01 ,Fun_Name : db_update_bch01_to_close_batch_S1 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }  
   if ( atoi ( batch_nbr ) == 0 ) 
      strcpy ( batch_nbr, "000000" );

   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_to_close_batch,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   
   sprintf(batch_tmp, "%06d", (atol(batch_nbr) + 1) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_dcf01
      FROM   dcf01
      WHERE  device_id   = :pte_bch01.device_id    AND 
      		 merchant_id = :pte_bch01.merchant_id  AND
      		 rownum      = 1
      For Update NOWAIT;
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : DCF01 ,Fun_Name : db_update_bch01_to_close_batch_S2 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }  
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_to_close_batch,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE dcf01
   SET batch_nbr   = :batch_tmp
   WHERE device_id = :pte_bch01.device_id AND merchant_id = :pte_bch01.merchant_id;
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %, ST1:%d,ST2:%d ,Data_Type : DCF01 ,Fun_Name : db_update_bch01_to_close_batch_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }  
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_to_close_batch,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}


   genutil_format_date(yymmdd);
   strncpy(date, yymmdd, 8);
   strncpy(time, yymmdd + 8, 6);
  
   strcpy(pte_bch01.release_date, date);
   strcpy(pte_bch01.release_time, time);

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch01
      FROM   bch01
      WHERE  device_id   = :pte_bch01.device_id         AND  
      		 batch_nbr   = 'ACTIVE'        				AND  
      		 merchant_id = :pte_bch01.visa_merchant_id  AND
      		 rownum      = 1
      For Update NOWAIT;
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_update_bch01_to_close_batch_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }  
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_to_close_batch,ST1:%d,ST2:%d_4",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE bch01 
   SET batch_nbr                 =  :batch_tmp,                 
       batch_status              = 'C',
	   release_time              = :pte_bch01.release_time,
	   release_date              = :pte_bch01.release_date

   WHERE device_id 	 = :pte_bch01.device_id 		AND 
   		 batch_nbr 	 = 'ACTIVE' 					AND 
   		 merchant_id = :pte_bch01.visa_merchant_id;
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_update_bch01_to_close_batch_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }    
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_to_close_batch,ST1:%d,ST2:%d_5",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
EXEC SQL
      SELECT *
      INTO  :db_bch10
      FROM   bch10
	  WHERE device_id   = :pte_bch01.device_id        AND
	   		merchant_id = :pte_bch01.visa_merchant_id AND
	   		batch_nbr   = 'ACTIVE' AND
	   		rownum      = 1
      For Update NOWAIT;
      
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      return( dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg) );
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE bch10 
   SET batch_nbr                 =  :batch_tmp                                          
   WHERE device_id   = :pte_bch01.device_id        AND 
   		 merchant_id = :pte_bch01.visa_merchant_id AND 
   		 batch_nbr   = 'ACTIVE';
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_update_bch01_to_close_batch , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }     
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_to_close_batch,ST1:%d,ST2:%d_6",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}


/*************************************************************************************/

/*************************************************************************************/
BYTE db_update_bch01_mp_to_close_batch( pBCH01_MP bch01_mp_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
      char batch_nbr[7]="";
	  char batch_tmp[7]="";
   	  char date[9]="";
	  char time[7]="";
	  char yymmdd[25]="";
   EXEC SQL END DECLARE SECTION;

   bch01_mp_to_db( bch01_mp_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT NVL (batch_nbr, 0)
   INTO batch_nbr
   FROM dcf01
   WHERE device_id = :pte_bch01_mp.device_id AND merchant_id = :pte_bch01_mp.merchant_id;
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : DCF01 ,Fun_Name : db_update_bch01_mp_to_close_batch_S1 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }     
   
   if ( atoi ( batch_nbr ) == 0 ) 
      strcpy ( batch_nbr, "000000" );

   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_mp_to_close_batch,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   
   sprintf(batch_tmp, "%06d", (atol(batch_nbr) + 1) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_dcf01
      FROM   dcf01
      WHERE  device_id   = :pte_bch01_mp.device_id 		AND 
      		 merchant_id = :pte_bch01_mp.merchant_id	AND
      		 rownum      = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : DCF01 ,Fun_Name : db_update_bch01_mp_to_close_batch_S2 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }   
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_mp_to_close_batch,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }
   
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE dcf01
   SET batch_nbr   = :batch_tmp
   WHERE device_id = :pte_bch01_mp.device_id AND merchant_id = :pte_bch01_mp.merchant_id;
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : DCF01 ,Fun_Name : db_update_bch01_mp_to_close_batch_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }  
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_mp_to_close_batch,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}


   genutil_format_date(yymmdd);
   strncpy(date, yymmdd, 8);
   strncpy(time, yymmdd + 8, 6);
  
   strcpy(pte_bch01_mp.release_date, date);
   strcpy(pte_bch01_mp.release_time, time);

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch01_mp
      FROM   bch01_mp
      WHERE  device_id   = :pte_bch01_mp.device_id   AND 
			 merchant_id = :pte_bch01_mp.merchant_id AND  
			 batch_nbr 	 = 'ACTIVE' AND
        	 rownum 	 = 1
      		 For Update NOWAIT;
    
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01_MP ,Fun_Name : db_update_bch01_mp_to_close_batch_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }  
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_mp_to_close_batch,ST1:%d,ST2:%d_4",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE bch01_mp 
   SET batch_nbr                 =  :batch_tmp,                 
       batch_status              = 'C',
	   release_time              = :pte_bch01_mp.release_time,
	   release_date              = :pte_bch01_mp.release_date

   WHERE device_id 	 = :pte_bch01_mp.device_id   AND 
   		 merchant_id = :pte_bch01_mp.merchant_id AND 
   		 batch_nbr 	 = 'ACTIVE';
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01_MP ,Fun_Name : db_update_bch01_mp_to_close_batch_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }      
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_mp_to_close_batch,ST1:%d,ST2:%d_5",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
EXEC SQL
      SELECT *
      INTO  :db_bch10
      FROM   bch10
      WHERE device_id   = :pte_bch01_mp.device_id    AND
       		merchant_id = :pte_bch01_mp.merchant_id  AND
        	batch_nbr   = 'ACTIVE' AND
        	rownum      = 1
      For Update NOWAIT;

   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      return( dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg) );
   }


   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL UPDATE bch10 
   SET batch_nbr                 =  :batch_tmp                                          
   WHERE device_id   = :pte_bch01_mp.device_id   AND 
   		 merchant_id = :pte_bch01_mp.merchant_id AND 
   		 batch_nbr   = 'ACTIVE';
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_update_bch01_mp_to_close_batch_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }   
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_mp_to_close_batch,ST1:%d,ST2:%d_6",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}


/*************************************************************************************/


/*************************************************************************************/
/*BYTE db_update_bch10_to_close_batch( pBCH10 bch10_ptr, pCHAR ErrorMsg )
{
   bch10_to_db( bch10_ptr );
   
   EXEC SQL UPDATE bch10 
   SET batch_nbr                 =  ( SELECT MAX(batch_nbr) + 1
                                       FROM bch10 
                                       WHERE batch_nbr != 'ACTIVE')                   
                          
   WHERE device_id   = :pte_bch10.device_id      AND
   	     merchant_id = :pte_bch01_mp.merchant_id AND 
   	     batch_nbr   = 'ACTIVE';
      
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch10_to_close_batch,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

  
   Update DCF01.batch_nbr to contain batch_nbr after BCH10 is closed
   
    EXEC SQL UPDATE dcf01 
    SET batch_nbr                 =  ( SELECT batch_nbr
                                       FROM bch10 
                                       WHERE device_id = :pte_bch10.device_id )
                          
   WHERE device_id = :pte_bch10.device_id AND
   	     merchant_id = :pte_bch01_mp.merchant_id;
      
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch10_to_close_batch,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}
*/
/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_bch10( pBCH10 bch10_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   bch10_to_db( bch10_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch10
      FROM   bch10
      WHERE  device_id 		   = :pte_bch10.device_id     	  AND 
      		 merchant_id 	   = :pte_bch10.merchant_id  	  AND  
      		 batch_nbr 		   = :pte_bch10.batch_nbr    	  AND  
      		 retrieval_ref_num = :pte_bch10.retrieval_ref_num AND
      		 rownum    		   = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_update_bch10_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }   
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
  		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch10,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }     
   EXEC SQL UPDATE bch10 
   SET device_id                 = :pte_bch10.device_id,                              
       batch_nbr                 = :pte_bch10.batch_nbr,                 
       retrieval_ref_num         = :pte_bch10.retrieval_ref_num,
       merchant_id               = :pte_bch10.merchant_id,
       processing_code           = :pte_bch10.processing_code,           
       tran_amount               = :pte_bch10.tran_amount,           
       response_code             = :pte_bch10.response_code,           
       auth_number               = :pte_bch10.auth_number,           
       tran_date                 = :pte_bch10.tran_date,           
       tran_time                 = :pte_bch10.tran_time,           
       transaction_id            = :pte_bch10.transaction_id,           
       message_type              = :pte_bch10.message_type,           
       card_nbr                  = :pte_bch10.card_nbr,
       invoice_nbr               = :pte_bch10.invoice_nbr,
       settle_file_prefix        = :pte_bch10.settle_file_prefix,
       product_code              = :pte_bch10.product_code,
       odometer                  = :pte_bch10.odometer,
       sys_trace_audit_num       = :pte_bch10.sys_trace_audit_num,
       tx_key                    = :pte_bch10.tx_key,
       bin_type                  = :pte_bch10.bin_type,
       
       type_of_data              = :pte_bch10.type_of_data,            
       down_payment              = :pte_bch10.down_payment,          
       period                    = :pte_bch10.period,             
       interest_rate             = :pte_bch10.interest_rate,            
       total_interest            = :pte_bch10.total_interest,                  
       redemption_amount         = :pte_bch10.redemption_amount,             
       vehicle_number            = :pte_bch10.vehicle_number,             
       pos_entry_mode            = :pte_bch10.pos_entry_mode, 
       
       profile                   = :pte_bch10.profile,            
       nbr_of_prod_codes         = :pte_bch10.nbr_of_prod_codes,          
       product1_code             = :pte_bch10.product1_code,             
       product1_quantity         = :pte_bch10.product1_quantity,            
       product1_amount           = :pte_bch10.product1_amount,                  
       product2_code             = :pte_bch10.product2_code,             
       product2_quantity         = :pte_bch10.product2_quantity,             
       product2_amount           = :pte_bch10.product2_amount, 
       product3_code             = :pte_bch10.product3_code,             
       product3_quantity         = :pte_bch10.product3_quantity,            
       product3_amount           = :pte_bch10.product3_amount,    
       product4_code             = :pte_bch10.product4_code,             
       product4_quantity         = :pte_bch10.product4_quantity,            
       product4_amount           = :pte_bch10.product4_amount,                  
       product5_code             = :pte_bch10.product5_code,             
       product5_quantity         = :pte_bch10.product5_quantity,             
       product5_amount           = :pte_bch10.product5_amount,                        
       product6_code             = :pte_bch10.product6_code,             
       product6_quantity         = :pte_bch10.product6_quantity,             
       product6_amount           = :pte_bch10.product6_amount,  
       product7_code             = :pte_bch10.product7_code,             
       product7_quantity         = :pte_bch10.product7_quantity,            
       product7_amount           = :pte_bch10.product7_amount,                  
       product8_code             = :pte_bch10.product8_code,             
       product8_quantity         = :pte_bch10.product8_quantity,             
       product8_amount           = :pte_bch10.product8_amount, 
       product9_code             = :pte_bch10.product9_code,             
       product9_quantity         = :pte_bch10.product9_quantity,            
       product9_amount           = :pte_bch10.product9_amount,                  
       product10_code            = :pte_bch10.product10_code,             
       product10_quantity        = :pte_bch10.product10_quantity,             
       product10_amount          = :pte_bch10.product10_amount,   
       product11_code            = :pte_bch10.product11_code,             
       product11_quantity        = :pte_bch10.product11_quantity,            
       product11_amount          = :pte_bch10.product11_amount,                  
       product12_code            = :pte_bch10.product12_code,             
       product12_quantity        = :pte_bch10.product12_quantity,             
       product12_amount          = :pte_bch10.product12_amount, 
       product13_code            = :pte_bch10.product13_code,             
       product13_quantity        = :pte_bch10.product13_quantity,            
       product13_amount          = :pte_bch10.product13_amount,                  
       product14_code            = :pte_bch10.product14_code,             
       product14_quantity        = :pte_bch10.product14_quantity,             
       product14_amount          = :pte_bch10.product14_amount, 
       product15_code            = :pte_bch10.product15_code,             
       product15_quantity        = :pte_bch10.product15_quantity,            
       product15_amount          = :pte_bch10.product15_amount,                  
       product16_code            = :pte_bch10.product16_code,             
       product16_quantity        = :pte_bch10.product16_quantity,             
       product16_amount          = :pte_bch10.product16_amount, 
       product17_code            = :pte_bch10.product17_code,             
       product17_quantity        = :pte_bch10.product17_quantity,            
       product17_amount          = :pte_bch10.product17_amount,                  
       product18_code            = :pte_bch10.product18_code,             
       product18_quantity        = :pte_bch10.product18_quantity,             
       product18_amount          = :pte_bch10.product18_amount, 
       product19_code            = :pte_bch10.product19_code,             
       product19_quantity        = :pte_bch10.product19_quantity,            
       product19_amount          = :pte_bch10.product19_amount,                  
       product20_code            = :pte_bch10.product20_code,             
       product20_quantity        = :pte_bch10.product20_quantity,             
       product20_amount          = :pte_bch10.product20_amount,
       aportionment_flag         = :pte_bch10.aportionment_flag,
       exp_date                  = :pte_bch10.exp_date,
       open_date                 = :pte_bch10.open_date,
       open_time                 = :pte_bch10.open_time,
       cash_bonus                = :pte_bch10.cash_bonus,
       ticket_nbr                = :pte_bch10.ticket_nbr,
       def_gross_amt             = :pte_bch10.def_gross_amt,
       term                      = :pte_bch10.term
                       

   WHERE device_id 		   = :pte_bch10.device_id   AND 
   		 merchant_id 	   = :pte_bch10.merchant_id AND 
   		 batch_nbr 		   = :pte_bch10.batch_nbr   AND
         retrieval_ref_num = :pte_bch10.retrieval_ref_num;

   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_update_bch10_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch10,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/

BYTE db_update_dcf01( pDCF01 dcf01_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   dcf01_to_db( dcf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_dcf01
      FROM   dcf01
      WHERE  device_id   = :pte_dcf01.device_id 	AND 
      		 merchant_id = :pte_dcf01.merchant_id	AND
      		 rownum      = 1
      For Update NOWAIT;
    
    if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : DCF01 ,Fun_Name : db_update_dcf01_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
 		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_dcf01,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL UPDATE dcf01 
   SET device_id           = :pte_dcf01.device_id,                              
       short_name          = :pte_dcf01.short_name,                 
       phone               = :pte_dcf01.phone,           
       industry_code       = :pte_dcf01.industry_code,
       category_code       = :pte_dcf01.category_code,
       contact             = :pte_dcf01.contact,
       device_type         = :pte_dcf01.device_type,
       date_added          = :pte_dcf01.date_added,
       current_bus_date    = :pte_dcf01.current_bus_date,
       dept_nbr            = :pte_dcf01.dept_nbr,
       organization_id     = :pte_dcf01.organization_id,
       merchant_id         = :pte_dcf01.merchant_id,
       aba_nbr             = :pte_dcf01.aba_nbr,
       status              = :pte_dcf01.status,
       totals_ind          = :pte_dcf01.totals_ind,
       statistics_ind      = :pte_dcf01.statistics_ind,
       valid_transactions  = :pte_dcf01.valid_transactions,
       draft_capture_type  = :pte_dcf01.draft_capture_type,
       amex_charge_desc    = :pte_dcf01.amex_charge_desc,
       diners_charge_desc  = :pte_dcf01.diners_charge_desc,
       additional_pos_information    = :pte_dcf01.additional_pos_information,
       batch_nbr           = :pte_dcf01.batch_nbr,
       rental_program      = :pte_dcf01.rental_program,
       nsp_process         = :pte_dcf01.nsp_process,
       pin_type            = :pte_dcf01.pin_type,
       kc                  = :pte_dcf01.kc,
       encr_type           = :pte_dcf01.encr_type,
       pad_char            = :pte_dcf01.pad_char,
       keyxchange_cnt      = :pte_dcf01.keyxchange_cnt,
       txn_cnt             = :pte_dcf01.txn_cnt,
       cwk                 = :pte_dcf01.cwk,
       kek                 = :pte_dcf01.kek,
       retired_cwk         = :pte_dcf01.retired_cwk,
       icv                 = :pte_dcf01.icv,

       pin_block_format    = :pte_dcf01.pin_block_format,
       encryption_method   = :pte_dcf01.encryption_method,
       pin_key             = :pte_dcf01.pin_key,
       communication_key   = :pte_dcf01.communication_key,
       auto_init_activation         = :pte_dcf01.auto_init_activation,
       auto_init_time               = :pte_dcf01.auto_init_time,
       auto_init_ref_number         = :pte_dcf01.auto_init_ref_number,
       auto_program_load_activation = :pte_dcf01.auto_program_load_activation,
       auto_program_load_time       = :pte_dcf01.auto_program_load_time,
       auto_program_load_ref_number = :pte_dcf01.auto_program_load_ref_number,
       auto_icepac_activation       = :pte_dcf01.auto_icepac_activation

   WHERE device_id = :pte_dcf01.device_id AND merchant_id = :pte_dcf01.merchant_id;
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %, ST1:%d,ST2:%d ,Data_Type : DCF01 ,Fun_Name : db_update_dcf01_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }   
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_dcf01,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}




/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_tlf01( pTLF01 tlf01_ptr, pCHAR ErrorMsg)
{
   INT  retval;

   tlf01_to_db( tlf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_tlf01
      FROM   tlf01
      WHERE  transaction_id = :pte_tlf01.transaction_id AND
      		 rownum         = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_delete_tlf01_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
 		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_tlf01,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM tlf01
   WHERE transaction_id = :pte_tlf01.transaction_id;
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_delete_tlf01_D , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_tlf01,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/
/*Delete Tlf01 recs. that are older than 'date'*/
/*************************************************************************************/

BYTE db_delete_tlf01_by_date( pCHAR Date_yyyymmdd, pCHAR ErrorMsg)
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   char  yyyymmdd[9];
   EXEC SQL END DECLARE SECTION;
   
   strncpy(yyyymmdd, Date_yyyymmdd,sizeof(yyyymmdd));
      yyyymmdd[8] = '\0';

	   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_tlf01
      FROM   tlf01
      WHERE date_yyyymmdd <= :yyyymmdd AND
      		rownum = 1
      For Update NOWAIT;

   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      return( dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg) );
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM tlf01
   WHERE date_yyyymmdd <= :yyyymmdd;
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_delete_tlf01_by_date , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND))
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_tlf01_by_date,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/
/*ThoughtFocus Girija Y */
/*************************************************************************************/
BYTE db_delete_tlf01_by_standin( pTLF01 tlf01_ptr, pCHAR ErrorMsg)
{
   INT  retval;
/*	char product2_code[7];*/

   tlf01_to_db( tlf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_tlf01
      FROM   tlf01
      WHERE  transaction_id =:pte_tlf01.transaction_id
	   OR merchant_id = :pte_tlf01.merchant_id
        OR card_num = :pte_tlf01.card_num
        OR  date_yyyymmdd = :pte_tlf01.date_yyyymmdd 
        OR sys_trace_audit_num = :pte_tlf01.sys_trace_audit_num AND
        rownum = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_delete_tlf01_by_standin_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
   		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_tlf01_by_standin,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM tlf01
   WHERE    transaction_id =:pte_tlf01.transaction_id
			OR card_num = :pte_tlf01.card_num
            OR merchant_id = :pte_tlf01.merchant_id 
            OR sys_trace_audit_num = :pte_tlf01.sys_trace_audit_num;
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_delete_tlf01_by_standin_D , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_tlf01_by_standin,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/****************************************************************************/

/*************************************************************************************/
/*delete NFI01 recs. that are older than 'date' */
/*************************************************************************************/
BYTE db_delete_nfi01_by_date( pCHAR Date_yyyymmdd, pCHAR ErrorMsg)
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   char  yyyymmdd[9];
   EXEC SQL END DECLARE SECTION;

   strncpy(yyyymmdd, Date_yyyymmdd,sizeof(yyyymmdd));
   yyyymmdd[8] = '\0';

	   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_nfi01
      FROM   nfi01
      WHERE file_name <= :yyyymmdd AND
      		rownum = 1
      For Update NOWAIT;

   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      return( dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg) );
   }


   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM nfi01
   WHERE file_name <= :yyyymmdd;
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NFI01 ,Fun_Name : db_delete_nfi01_by_date , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND) )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_nfi01_by_date,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/
/* Delete DRF01 recs. that are older than 'date'*/
/*************************************************************************************/
BYTE  db_delete_drf01_by_date(  pCHAR Date_yyyymmdd, pCHAR ErrorMsg )
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   char  yyyymmdd[9];
   EXEC SQL END DECLARE SECTION;
   
   strncpy(yyyymmdd, Date_yyyymmdd,sizeof(yyyymmdd));
      yyyymmdd[8] = '\0';

/* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_drf01
      FROM   drf01
      WHERE date_of_request <= :yyyymmdd AND
      		rownum = 1
      For Update NOWAIT;

   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      return( dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg) );
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM drf01
   WHERE date_of_request <= :yyyymmdd;
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : DRF01 ,Fun_Name : db_delete_drf01_by_date , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND) )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_drf01_by_date,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;


}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_nfi01( pNFI01 nfi01_ptr, pCHAR ErrorMsg)
{
   INT  retval;

   nfi01_to_db( nfi01_ptr );

   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_nfi01
      FROM   nfi01
      WHERE file_name = :pte_nfi01.file_name AND
      		 rownum = 1
      For Update NOWAIT;

   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      return( dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg) );
   }
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM nfi01
   WHERE file_name = :pte_nfi01.file_name ;
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NFI01 ,Fun_Name : db_delete_nfi01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND) )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_nfi01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/
/* ----------------     Delete all records in table NTF01 ---------------       */
/*************************************************************************************/
BYTE db_delete_all_ntf01( pCHAR ErrorMsg)
{
   INT  retval;

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM ntf01;
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NTF01 ,Fun_Name : db_delete_all_ntf01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_all_ntf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_nfi02( pNFI02 nfi02_ptr, pCHAR ErrorMsg)
{
   INT  retval;

   nfi02_to_db( nfi02_ptr );

       /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_nfi02
      FROM   nfi02
      WHERE file_name = :pte_nfi02.file_name AND
      		rownum = 1
      For Update NOWAIT;

   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      return( dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg) );
   }
   nfi02_to_db( nfi02_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM nfi02
   WHERE file_name = :pte_nfi02.file_name ;
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NFI02 ,Fun_Name : db_delete_nfi02 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
    {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_nfi02,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_nbf01( pNBF01 nbf01_ptr, pCHAR ErrorMsg)
{
   INT  retval;

   nbf01_to_db( nbf01_ptr );

	/* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_nbf01
      FROM   nbf01
      WHERE low = :pte_nbf01.low AND
       		high = :pte_nbf01.high AND
      		rownum = 1
      For Update NOWAIT;

   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      return( dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg) );
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM nbf01
   WHERE low = :pte_nbf01.low AND high = :pte_nbf01.high;
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;

    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NBF01 ,Fun_Name : db_delete_nbf01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_nbf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_ngf01( pNGF01 ngf01_ptr, pCHAR ErrorMsg)
{
   INT  retval;

   ngf01_to_db( ngf01_ptr );

/* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_ngf01
      FROM   ngf01
      WHERE negative_group_id = :pte_ngf01.negative_group_id AND
      		rownum = 1 
      For Update NOWAIT;

   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      return( dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg) );
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM ngf01
   WHERE negative_group_id = :pte_ngf01.negative_group_id ;
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NGF01 ,Fun_Name : db_delete_ngf01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_ngf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************
Description: Move all recs. from the temporary file to the master file.
     Delete all recs. in NMF01 that are marked for deletion(action_code =D)
     and move recs. from NTF01 to NMF01 if can be accomidated within the range of SEQ_NBR
     which is 6bytes long.else delete all in NMF and move recs. from NTF01 starting with 
     SEQ_NBR = 0.
*************************************************************************************/
BYTE db_move_recs_from_ntf01_to_nmf01( pNTF01 ntf01_ptr,  pCHAR ErrorMsg)
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   long   NumRowsReturned = 0, count =0;
   /*char  seq_nbr        [6];*/
   int   flag = 0,i     =0;
   char  maxseqnbr      [7];
   char  nbr[6]         = " ";
   long  julian         = 0;
   char  date           [7];

   EXEC SQL END DECLARE SECTION;
   
   ntf01_to_db( ntf01_ptr );

  	/* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_nmf01
      FROM   nmf01
      WHERE action_code ='D' AND
      		rownum = 1
      For Update NOWAIT;

   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      return( dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg) );
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /*Delete all recs. from NMF01 with action_code=D*/
   EXEC SQL DELETE FROM nmf01
   WHERE action_code ='D' ;
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NMF01 ,Fun_Name : db_move_recs_from_ntf01_to_nmf01_D1 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
 
   EXEC SQL SELECT (MAX(seq_nbr)) INTO :maxseqnbr FROM nmf01;
   for(i=0; i<6; i++)
   {
      if (maxseqnbr[i] == '9')
         flag++;
      else
         break;
   }
   /* Get the count on No. of recs in NTF01 and check if highest seq_nbr in NMF01
      + count in NTF01 < max. range of seq_nbr
      if flag is < 6 , implies maximum range = 999999 not reached

      */

   EXEC SQL SELECT COUNT(*) INTO :NumRowsReturned FROM ntf01;
   /*count = maxseqnbr;*/
   if( (flag != 6) && ( atol(maxseqnbr) + NumRowsReturned <= 999999) )
   {
      /*count++;*/
      /*ltoa(count, seq_nbr, 10);*/
      EXEC SQL INSERT INTO nmf01
      SELECT to_char(to_number(MAX(seq_nbr)+ 1)), 'P',nt.file_name, nt.format_code, nt.account_info 
      FROM ntf01 nt, nmf01 nm
      WHERE nt.file_name NOT IN (SELECT file_name from  nmf01);
   } 
   else
   {
      if ( db_error_statics_flag == true )
   	  {
        start_time = ptetime_get_time();
      }
      EXEC SQL DELETE FROM NMF01;
      
      if ( db_error_statics_flag == true )
      {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NMF01 ,Fun_Name : db_move_recs_from_ntf01_to_nmf01_D2 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
      }    

      EXEC SQL SELECT MAX(file_name) INTO :date FROM ntf01;
            
      julian = Txutils_Calculate_Julian_Date ((BYTE*) date);
      julian = julian - 1;
      Txutils_Calculate_Gregorian_Date( julian, (char *)date);

      if ( db_error_statics_flag == true )
      {
         start_time = ptetime_get_time();
      }
   
      EXEC SQL INSERT INTO nmf01(seq_nbr, action_code, format_code, account_info, file_name)
               VALUES   ('0000', ' ',' ', ' ', :date);
      count = 1;

      if ( db_error_statics_flag == true )
   	  {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NMF01 ,Fun_Name : db_move_recs_from_ntf01_to_nmf01_I1 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
      }

      if ( db_error_statics_flag == true )
      {
         start_time = ptetime_get_time();
      }
      
      EXEC SQL INSERT INTO nmf01
      SELECT to_char(count + 1), 'P',nt.file_name, nt.format_code, nt.account_info 
      FROM ntf01 nt ;
      
      if ( db_error_statics_flag == true )
   	  {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NMF01 ,Fun_Name : db_move_recs_from_ntf01_to_nmf01_I2 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
      }
   }
   
   if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND))
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_move_recs_from_ntf01_to_nmf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}



/*************************************************************************************
delete all recs in BCH01, BCH10 and BCH11 with status C or R and less than specific 'date'
if status is A, reset all totals to zero for recs. less than 'date' in BCH01
*************************************************************************************/
BYTE db_delete_bchrecs_for_cleanup ( pCHAR date_yyyymmdd, pCHAR ErrorMsg)
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;  
      char date   [9];
   EXEC SQL END DECLARE SECTION;
   strncpy(date, date_yyyymmdd, sizeof(date));
      date[8] = '\0';

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM bch10 b10 
   WHERE exists (SELECT 1
                  FROM bch01 b01
                  WHERE 
                  b10.device_id   = b01.device_id   AND 
                  b10.batch_nbr   = b01.batch_nbr   AND 
                  b10.merchant_id = b01.merchant_id AND
                  b01.release_date < :date          AND 
                  b01.batch_status = 'C' );
   
    if ( db_error_statics_flag == true )
   	{
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01_B01 ,Fun_Name : db_delete_bchrecs_for_cleanup , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
    }
   if (( SQLCODE != 0  && ( SQLCODE != NO_DATA_FOUND) ))
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_bchrecs_for_cleanup,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

	/* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch01
      FROM   bch01
      WHERE batch_status = 'C' AND
        	release_date < :date AND
      		rownum = 1
      For Update NOWAIT;

   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      return( dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg) );
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM bch01
   WHERE batch_status = 'C' AND release_date < :date;
   
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_delete_bchrecs_for_cleanup_D1 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   }
   if (( SQLCODE != 0  && ( SQLCODE != NO_DATA_FOUND) ))
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_bchrecs_for_cleanup,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }

   EXEC SQL DELETE FROM bch11 b11 
   WHERE exists (SELECT 1
                  FROM bch01 b01
                  WHERE b11.device_id   = b01.device_id   AND 
                  		b11.batch_nbr   = b01.batch_nbr   AND 
                  		b11.merchant_id = b01.merchant_id AND 
                  		b01.release_date < :date          AND 
                  		batch_status = 'R');
   
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH11_B11 ,Fun_Name : db_delete_bchrecs_for_cleanup , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   }                     
                        
   if (( SQLCODE != 0 ) )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_bchrecs_for_cleanup,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   	/* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch01
      FROM   bch01
      WHERE batch_status = 'R' AND 
      		release_date < :date AND
      		rownum = 1
      For Update NOWAIT;

   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      return( dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg) );
   }
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM bch01
   WHERE batch_status = 'R' AND release_date < :date;
   
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_delete_bchrecs_for_cleanup_D2 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   }
   if (( SQLCODE != 0 ) )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_bchrecs_for_cleanup,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
/* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch01
      FROM   bch01
      WHERE batch_status = 'A' AND
        	release_date < :date AND
      		rownum = 1
      For Update NOWAIT;

   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      return( dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg) );
   }
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL UPDATE bch01
   SET 
       total_credit_cnt          = '00',           
       total_credit_amt          = '00',           
       total_credit_refund_cnt   = '00',           
       total_credit_refund_amt   = '00',           
       total_debit_cnt           = '00',           
       total_debit_amt           = '000',           
       total_debit_refund_cnt    = '00',           
       total_debit_refund_amt    = '00', 
       total_void_credit_cnt          = '00',           
       total_void_credit_amt          = '00',           
       total_void_credit_refund_cnt   = '00',           
       total_void_credit_refund_amt   = '00'      
                 
   WHERE batch_status = 'A' AND release_date < :date;
   
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_delete_bchrecs_for_cleanup_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   }
   if (( SQLCODE != 0 ) )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_bchrecs_for_cleanup,ST1:%d,ST2:%d_4",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}


/*************************************************************************************/

/*************************************************************************************
delete all recs in BCH01_MP, BCH10 and BCH11 with status C or R and less than specific 'date'
if status is A, reset all totals to zero for recs. less than 'date' in BCH01_MP
*************************************************************************************/
BYTE db_delete_bchrecs_mp_for_cleanup ( pCHAR date_yyyymmdd, pCHAR ErrorMsg)
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;  
      char date   [9];
   EXEC SQL END DECLARE SECTION;
   strncpy(date, date_yyyymmdd, sizeof(date));
      date[8] = '\0';

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM bch10 b10 
   WHERE exists (SELECT 1
                  FROM bch01_mp b01
                  WHERE 
                  b10.device_id   = b01.device_id   AND 
                  b10.merchant_id = b01.merchant_id AND 
                  b10.batch_nbr   = b01.batch_nbr   AND
                  b01.release_date < :date 			AND 
                  b01.batch_status = 'C' );
   
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10_B10 ,Fun_Name : db_delete_bchrecs_mp_for_cleanup , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   }  
	/* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch01_mp
      FROM   bch01_mp
      WHERE batch_status = 'C' AND
       		release_date < :date AND
      		rownum = 1
      For Update NOWAIT;

   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      return( dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg) );
   }
            
   if (( SQLCODE != 0  && ( SQLCODE != NO_DATA_FOUND) ))
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_bchrecs_mp_for_cleanup,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   EXEC SQL DELETE FROM bch01_mp
   WHERE batch_status = 'C' AND 
   		 release_date < :date;
   
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01_MP ,Fun_Name : db_delete_bchrecs_mp_for_cleanup_D1 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   }    
   if (( SQLCODE != 0  && ( SQLCODE != NO_DATA_FOUND) ))
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_bchrecs_mp_for_cleanup,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }

   EXEC SQL DELETE FROM bch11 b11 
   WHERE exists (SELECT 1
                  FROM bch01_mp b01
                  WHERE b11.device_id = b01.device_id  AND 
                  		b11.batch_nbr = b01.batch_nbr  AND 
                  		b01.release_date < :date       AND 
                  		batch_status  = 'R');
                        
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH11_B11 ,Fun_Name : db_delete_bchrecs_mp_for_cleanup , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   }                         
   if (( SQLCODE != 0 ) )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_bchrecs_mp_for_cleanup,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

	/* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch01_mp
      FROM   bch01_mp
      WHERE batch_status = 'R' AND
       		release_date < :date AND
      		rownum = 1
      For Update NOWAIT;

   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      return( dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg) );
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM bch01_mp
   WHERE batch_status = 'R' AND 
   		 release_date < :date;
   
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01_MP ,Fun_Name : db_delete_bchrecs_mp_for_cleanup_D2 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   }    
   if (( SQLCODE != 0 ) )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_bchrecs_mp_for_cleanup,ST1:%d,ST2:%d_4",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

/* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch01_mp
      FROM   bch01_mp
      WHERE batch_status = 'A'   AND
       		release_date < :date AND
      		rownum = 1
      For Update NOWAIT;

   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      return( dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg) );
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL UPDATE bch01_mp
   SET 
       total_credit_cnt          	  = '00',           
       total_credit_amt         	  = '00',           
       total_credit_refund_cnt   	  = '00',           
       total_credit_refund_amt   	  = '00',           
       total_debit_cnt           	  = '00',           
       total_debit_amt           	  = '000',           
       total_debit_refund_cnt    	  = '00',           
       total_debit_refund_amt   	  = '00', 
       total_void_credit_cnt          = '00',           
       total_void_credit_amt          = '00',           
       total_void_credit_refund_cnt   = '00',           
       total_void_credit_refund_amt   = '00'      
                 
   WHERE batch_status = 'A' AND 
         release_date < :date;
   
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01_MP ,Fun_Name : db_delete_bchrecs_mp_for_cleanup_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   }    
   if (( SQLCODE != 0 ) )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_bchrecs_mp_for_cleanup,ST1:%d,ST2:%d_5",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}
/*************************************************************************************/


/*************************************************************************************/
BYTE db_delete_mcf20( pMCF20 mcf20_ptr, pCHAR ErrorMsg)
{
   INT  retval;

   mcf20_to_db( mcf20_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_mcf20
      FROM   mcf20
      WHERE  organization_id = :pte_mcf20.organization_id  AND  
      		 merchant_id     = :pte_mcf20.merchant_id      AND  
      		 yyyymmdd        = :pte_mcf20.yyyymmdd         AND
      		 rownum          = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : MCF20 ,Fun_Name : db_delete_mcf20_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   }    
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
 		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_mcf20,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM mcf20
   WHERE organization_id = :pte_mcf20.organization_id AND merchant_id = :pte_mcf20.merchant_id AND yyyymmdd = :pte_mcf20.yyyymmdd;
   
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : MCF20 ,Fun_Name : db_delete_mcf20_D , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   }    
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_mcf20,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}
/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_ocf20( pOCF20 ocf20_ptr, pCHAR ErrorMsg)
{
   INT  retval;

   ocf20_to_db( ocf20_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_ocf20
      FROM   ocf20
      WHERE  organization_id = :pte_ocf20.organization_id    AND  
      		 yyyymmdd        = :pte_ocf20.yyyymmdd           AND
      		 rownum          = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : OCF20 ,Fun_Name : db_delete_ocf20_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   }    
   
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
 		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_ocf20,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM ocf20
   WHERE organization_id = :pte_ocf20.organization_id AND yyyymmdd = :pte_ocf20.yyyymmdd;
   
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : OCF20 ,Fun_Name : db_delete_ocf20_D , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   } 
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_ocf20,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_ocf01( pOCF01 ocf01_ptr, pCHAR ErrorMsg)
{
   INT  retval;

   ocf01_to_db( ocf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_ocf01
      FROM   ocf01
      WHERE  organization_id = :pte_ocf01.organization_id AND
      		rownum           = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : OCF01 ,Fun_Name : db_delete_ocf01_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   } 
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
   		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_ocf01,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM ocf01
   WHERE organization_id = :pte_ocf01.organization_id;
   
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : OCF01 ,Fun_Name : db_delete_ocf01_D , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   } 
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
    {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_ocf01,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_mcf01( pMCF01 mcf01_ptr, pCHAR ErrorMsg)
{
   INT  retval;

   mcf01_to_db( mcf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_mcf01
      FROM   mcf01
      WHERE  merchant_id     = :pte_mcf01.merchant_id AND
             organization_id = :pte_mcf01.organization_id AND
      		 rownum = 1
      For Update NOWAIT;
      
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : MCF01 ,Fun_Name : db_delete_mcf01_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   } 
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
  		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_mcf01,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DELETE FROM mcf01
   WHERE merchant_id = :pte_mcf01.merchant_id AND organization_id = :pte_mcf01.organization_id;
   
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : MCF01 ,Fun_Name : db_delete_mcf01_D , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   } 
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_mcf01,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   EXEC SQL WHENEVER NOTFOUND CONTINUE ;
   EXEC SQL DELETE FROM mct01 where merchant_id = :pte_mcf01.merchant_id AND organization_id = :pte_mcf01.organization_id;

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_bch10( pBCH10 bch10_ptr, pCHAR ErrorMsg)
{
   INT  retval;

   bch10_to_db( bch10_ptr );

 /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch10
      FROM   bch10
      WHERE device_id   = :pte_bch10.device_id   AND
       		merchant_id = :pte_bch10.merchant_id AND
       		batch_nbr   = :pte_bch10.batch_nbr   AND
       		open_date   = :pte_bch10.open_date   AND
       		open_time   = :pte_bch10.open_time   AND
      		rownum      = 1
      For Update NOWAIT;

   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      return( dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg) );
   }
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM bch10
   WHERE device_id   = :pte_bch10.device_id 	AND 
   		 merchant_id = :pte_bch10.merchant_id   AND 
   		 batch_nbr   = :pte_bch10.batch_nbr     AND 
   		 open_date   = :pte_bch10.open_date 	AND 
   		 open_time   = :pte_bch10.open_time;
   
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_delete_bch10 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   } 
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_bch10,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_active_bch10( pBCH10 bch10_ptr, pCHAR ErrorMsg)
{
   INT  retval;

   bch10_to_db( bch10_ptr );

/* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch10
      FROM   bch10
     WHERE device_id   = :pte_bch10.device_id   AND 
     	   merchant_id = :pte_bch10.merchant_id AND 
     	   batch_nbr   = :pte_bch10.batch_nbr   AND
     	   rownum      = 1
      For Update NOWAIT;

   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      return( dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg) );
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM bch10
   WHERE device_id   = :pte_bch10.device_id     AND 
   		 merchant_id = :pte_bch10.merchant_id   AND 
   		 batch_nbr   = :pte_bch10.batch_nbr;
         
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_delete_active_bch10 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_active_bch10,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_bch10_by_stan( pBCH10 bch10_ptr, pCHAR ErrorMsg)
{
   INT  retval;

   bch10_to_db( bch10_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch10
      FROM   bch10
      WHERE  device_id  		 = :pte_bch10.device_id	    	  AND 
      		 merchant_id 		 = :pte_bch10.merchant_id  		  AND  
      		 batch_nbr 			 = :pte_bch10.batch_nbr    		  AND 
      		 sys_trace_audit_num = :pte_bch10.sys_trace_audit_num AND
      		 rownum              = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_delete_bch10_by_stan_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_bch10_by_stan,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM bch10
   WHERE device_id 			 = :pte_bch10.device_id  	  AND 
   		 merchant_id 	     = :pte_bch10.merchant_id 	  AND 
   		 batch_nbr 			 = :pte_bch10.batch_nbr       AND 
   		 sys_trace_audit_num = :pte_bch10.sys_trace_audit_num;
   
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_delete_bch10_by_stan_D , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_bch10_by_stan,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_dcf01( pDCF01 dcf01_ptr, pCHAR ErrorMsg)
{
   INT  retval;

   dcf01_to_db( dcf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_dcf01
      FROM   dcf01
      WHERE  device_id   = :pte_dcf01.device_id AND 
      	     merchant_id = :pte_dcf01.merchant_id AND
      	     rownum      = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : DCF01 ,Fun_Name : db_delete_dcf01_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_dcf01,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM dcf01
   WHERE device_id = :pte_dcf01.device_id AND merchant_id = :pte_dcf01.merchant_id;
   
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : DCF01 ,Fun_Name : db_delete_dcf01_D , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_dcf01,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/***************************************************************************************/
/*TF Phani : Date validation functions*/
INT isnum(pCHAR string)
{
   INT i;
   INT length;

   length = (INT)strlen(string);
   for (i = 0; i < length; i++)
   {
      if (!isdigit(string[i]))
        return(false);
   }
   return(true);
}
INT validate_date_yyyymmdd( pBYTE date_str)
{
   INT  ret_val = false;
   INT  imonth, iday, iyear;
   CHAR temp_month[3]="";
   CHAR temp_day[3]  ="";
   CHAR temp_year[5] ="";

   /* Validate date is numeric. */
   if ( (true == isnum(date_str)) && (8 == strlen(date_str)) )
   {
      /* Validate month */
      memcpy( temp_month, date_str+4, 2 );
      imonth = atoi(temp_month);
      if ( (1 <= imonth) && (imonth <= 12) )
      {
         /* Month is valid; check the day. */
         memcpy( temp_day, date_str+6, 2 );
         iday = atoi(temp_day);
         if ( (1 <= iday) && (iday <= 31) )
         {
            if ( iday == 31 )
            {
               if ( (imonth == 1) || (imonth == 3) || (imonth == 5) ||
                    (imonth == 7) || (imonth == 8) || (imonth == 10)||
                    (imonth == 12) )
               {
                  ret_val = true;
               }
            }
            else if ( (iday == 30) && (imonth != 2) )
            {
               ret_val = true;
            }
            else if ( (iday == 29) && (imonth == 2) )
            {
               /* This must be a leap year to be valid. */
               memcpy( temp_year, date_str, 4 );
               iyear = atoi(temp_year);
               if ( (iyear%4) == 0 )
                  ret_val = true;
               //else
               //   sprintf( err_buf, "Too many days for February (%s)",date_str);
            }
            else
               ret_val = true;

            /* Validate the year. */
            memcpy( temp_year, date_str, 4 );
            iyear = atoi(temp_year);
            if ( (iyear < 2000) || (iyear > 2200) )
            {
               ret_val = false;
              // sprintf( err_buf, "ERROR: Invalid date (%s). Bad Year",date_str);
            }
         }
         else
         {
            //sprintf( err_buf, "ERROR: Invalid date (%s). Bad Day.", date_str );
         }
      }
      else
      {
         //sprintf( err_buf, "ERROR: Invalid date (%s). Bad Month.", date_str );
      }
   }
   else
   {
     // sprintf( err_buf, "ERROR: Invalid date (%s).", date_str );
   }
   if ( true != ret_val )
      //strcat(  err_buf, " Must be in format YYYYMMDD." );

   return( ret_val );
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_delete_mgf01( pMGF01 mgf01_ptr, pCHAR ErrorMsg)

{
   INT  retval;

   mgf01_to_db( mgf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   /* Make sure we can access the record before attempting to delete it. */
   EXEC SQL
      SELECT *
      INTO  :db_mgf01
      FROM   mgf01
      WHERE  merchant_group_id     = :pte_mgf01.merchant_group_id AND
      		 rownum                = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : MGF01 ,Fun_Name : db_delete_mgf01_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_mgf01,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM mgf01
   WHERE merchant_group_id = :pte_mgf01.merchant_group_id ;
   
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : MGF01 ,Fun_Name : db_delete_mgf01_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   }
   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_delete_mgf01,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   EXEC SQL WHENEVER NOTFOUND CONTINUE ;
   EXEC SQL DELETE FROM mgf01 where merchant_group_id = :pte_mgf01.merchant_group_id ;

   return PTEMSG_OK;
}
/*************************************************************************************/


/*************************************************************************************/
BYTE db_insert_tlf01( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
   INT  retval = 0;

   EXEC SQL BEGIN DECLARE SECTION;
   char date[9] = {0};
   char yyyymmdd[25] = {0};
   char hostname[256] = {0}; 
   INT  hostname_len = 0;
   INT  move_len = 0;
   EXEC SQL END DECLARE SECTION;
   
   tlf01_to_db( tlf01_ptr );
   gethostname(hostname, sizeof(hostname));
   hostname_len = strlen(hostname);
   if (hostname_len > 12)
   {
   		move_len= hostname_len - 12;
   		memcpy(pte_tlf01.redemption_amount,hostname + move_len,12);
   }
   else
   { 
   		memcpy(pte_tlf01.redemption_amount,hostname,hostname_len);
   }
   /*printf("Date in TLF01: %s\n",pte_tlf01.date_yyyymmdd); */

   if (strlen(pte_tlf01.date_yyyymmdd) < 8 || (validate_date_yyyymmdd(pte_tlf01.date_yyyymmdd) == false) )
   {
      PRINT("Entered datecheck loop\n");
      /*pintime_get_gmt ( yymmdd );*/
       memset( date,   0x00, sizeof(date)   );
      memset( yyyymmdd, 0x00, sizeof(yyyymmdd) );
      genutil_format_date(yyyymmdd);
      strncpy(pte_tlf01.date_yyyymmdd, yyyymmdd, sizeof(pte_tlf01.date_yyyymmdd)-1);
   }
 
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL INSERT INTO tlf01
     (   transaction_id,
         entry_type,
         tpdu_id,
         issuer_id,
         acquirer_id,
         tx_key,
         terminal_id,
         terminal_type,
         response_text,
         card_num_len,
         card_num,
         exp_date,
         total_amount,
         add_amounts,
         invoice_number,
         orig_amount,
         auth_number,
         processing_code,
         sys_trace_audit_num,
         orig_sys_trace_num,
         pos_entry_mode,
         nii,
         pos_condition_code,
         track1,
         track2,
         retrieval_ref_num,
         orig_retrieval_ref_num,
         merchant_id,
         orig_message,
         settlement_total,
         message_type,
         card_holder_name,
         general_status,
         originator_queue,
         originator_info,
         batch_number,
         response_code,
         date_yyyymmdd,
         time_hhmmss,
         num_sales,
         sales_amount,
         num_refunds,
         refund_amount,
         num_dbsales,
         dbsales_amount,
         num_dbrefunds,
         dbrefund_amount,
         pin_block,
         tax_amount,
         tip_amount,
         tran_start_time,
         host_start_time,
         host_finish_time,
         tran_finish_time,
         settle_file_prefix,
         resp_source_len,
         visa_char_indicator,
         visa_tran_id,
         visa_validation_code,
         mcard_banknet_len,
         mcard_banknet,
         agent_id_len,
         agent_id,
         cvc,
         settlement_date,
         category_code,
         conversion_rate,
         product_code,
         odometer,
         organization_id,
         dynamic_keychange,
                          
	      txn_cnt,
         source_key,                         
         dcf01_retired_cwk,                  
         dest_key,                          
         ncf01_retired_cwk,                                                 
	      handler_queue,        		          
	      authorizing_host_queue,		   	    
         max_net_consec_tmouts,              
         max_active_txns,                    
         remote_nsp_type,
         kek,  
         credit_limit,
         forwarding_institution_id,          
         acquiring_id,                                             
         outstanding_balance,
         nfi_name,                           
         nfi_seq_nbr,                     
         nfi_start_date,            
         nfi_end_date,          
         resp_source,
         origin,
         auth_1,
         auth_2,                      
         update_mask,
         type_of_data,   
         down_payment,         
         period,                 
         interest_rate,               
         total_interest,               
         redemption_amount,             
         vehicle_number,
         profile,nbr_of_prod_codes , product1_code ,product1_quantity,
        product1_amount, product2_code, product2_quantity, product2_amount, product3_code, product3_quantity,
        product3_amount, product4_code, product4_quantity, product4_amount, product5_code, product5_quantity,
        product5_amount, product6_code, product6_quantity, product6_amount, product7_code, product7_quantity,
        product7_amount, product8_code, product8_quantity, product8_amount, product9_code, product9_quantity,
        product9_amount, product10_code, product10_quantity, product10_amount, product11_code, product11_quantity,
        product11_amount, product12_code, product12_quantity, product12_amount, product13_code, product13_quantity,
        product13_amount, product14_code, product14_quantity, product14_amount, product15_code, product15_quantity,          
        product15_amount, product16_code, product16_quantity, product16_amount, product17_code, product17_quantity,
        product17_amount, product18_code, product18_quantity, product18_amount, product19_code, product19_quantity,
        product19_amount, product20_code, product20_quantity, product20_amount,visa_merchant_id, 
		cash_bonus, deferred_factor, deferred_term_length, currency_code,transmission_timestamp, tran_fee_amount, cvc_data,
		verify_mag_stripe, saf, security_response_code, service_code, source_pin_format, dest_pin_format, voice_auth,
		actual_amount, reversal_amount, voice_auth_text, operator_id, workstation, orig_auth_number, ticket_nbr,
      system_date, def_gross_amt, monthly_amort_amt

     )               
   VALUES(  :pte_tlf01.transaction_id,
         :pte_tlf01.entry_type,
         :pte_tlf01.tpdu_id,
         :pte_tlf01.issuer_id,
         :pte_tlf01.acquirer_id,
         :pte_tlf01.tx_key,
         :pte_tlf01.terminal_id,
         :pte_tlf01.terminal_type,
         :pte_tlf01.response_text,
         :pte_tlf01.card_num_len,
         :pte_tlf01.card_num,
         :pte_tlf01.exp_date,
         :pte_tlf01.total_amount,
         :pte_tlf01.add_amounts,
         :pte_tlf01.invoice_number,
         :pte_tlf01.orig_amount,
         :pte_tlf01.auth_number,
         :pte_tlf01.processing_code,
         :pte_tlf01.sys_trace_audit_num,
         :pte_tlf01.orig_sys_trace_num,
         :pte_tlf01.pos_entry_mode,
         :pte_tlf01.nii,
         :pte_tlf01.pos_condition_code,
         :pte_tlf01.track1,
         :pte_tlf01.track2,
         :pte_tlf01.retrieval_ref_num,
         :pte_tlf01.orig_retrieval_ref_num,
         :pte_tlf01.merchant_id,
         :pte_tlf01.orig_message,
         :pte_tlf01.settlement_total,
         :pte_tlf01.message_type,
         :pte_tlf01.card_holder_name,
         :pte_tlf01.general_status,
         :pte_tlf01.originator_queue,
         :pte_tlf01.originator_info,
         :pte_tlf01.batch_number,
         :pte_tlf01.response_code,
         :pte_tlf01.date_yyyymmdd,
         :pte_tlf01.time_hhmmss,
         :pte_tlf01.num_sales,
         :pte_tlf01.sales_amount,
         :pte_tlf01.num_refunds,
         :pte_tlf01.refund_amount,
         :pte_tlf01.num_dbsales,
         :pte_tlf01.dbsales_amount,
         :pte_tlf01.num_dbrefunds,
         :pte_tlf01.dbrefund_amount,
         :pte_tlf01.pin_block,
         :pte_tlf01.tax_amount,
         :pte_tlf01.tip_amount,
         :pte_tlf01.tran_start_time,
         :pte_tlf01.host_start_time,
         :pte_tlf01.host_finish_time,
         :pte_tlf01.tran_finish_time,
         :pte_tlf01.settle_file_prefix,
         :pte_tlf01.resp_source_len,
         :pte_tlf01.visa_char_indicator,
         :pte_tlf01.visa_tran_id,
         :pte_tlf01.visa_validation_code,
         :pte_tlf01.mcard_banknet_len,
         :pte_tlf01.mcard_banknet,
         :pte_tlf01.agent_id_len,
         :pte_tlf01.agent_id,
         :pte_tlf01.cvc,
         :pte_tlf01.settlement_date,
         :pte_tlf01.category_code,
         :pte_tlf01.conversion_rate,
         :pte_tlf01.product_code,
         :pte_tlf01.odometer,
         :pte_tlf01.organization_id,
         :pte_tlf01.dynamic_keychange,
          
         :pte_tlf01.txn_cnt,               
	      :pte_tlf01.source_key,                         
         :pte_tlf01.dcf01_retired_cwk,                  
         :pte_tlf01.dest_key,                          
         :pte_tlf01.ncf01_retired_cwk,                                                 
	      :pte_tlf01.handler_queue,        		          
	      :pte_tlf01.authorizing_host_queue,		   	    
         :pte_tlf01.max_net_consec_tmouts,              
         :pte_tlf01.max_active_txns,                    
         :pte_tlf01.remote_nsp_type,
         :pte_tlf01.kek,
         
         :pte_tlf01.credit_limit,
         :pte_tlf01.forwarding_institution_id,          
         :pte_tlf01.acquiring_id,                                             
         :pte_tlf01.outstanding_balance,
         :pte_tlf01.nfi_name,                           
         :pte_tlf01.nfi_seq_nbr,                     
         :pte_tlf01.nfi_start_date,            
         :pte_tlf01.nfi_end_date,           
         :pte_tlf01.resp_source,
         :pte_tlf01.origin,
         :pte_tlf01.auth_1,
         :pte_tlf01.auth_2,                      
         :pte_tlf01.update_mask,
         :pte_tlf01.type_of_data,   
         :pte_tlf01.down_payment,         
         :pte_tlf01.period,                 
         :pte_tlf01.interest_rate,               
         :pte_tlf01.total_interest,                                  
         :pte_tlf01.redemption_amount,             
         :pte_tlf01.vehicle_number,
         :pte_tlf01.profile, :pte_tlf01.nbr_of_prod_codes,          
         :pte_tlf01.product1_code, :pte_tlf01.product1_quantity, :pte_tlf01.product1_amount, :pte_tlf01.product2_code,             
         :pte_tlf01.product2_quantity, :pte_tlf01.product2_amount, :pte_tlf01.product3_code, :pte_tlf01.product3_quantity,            
         :pte_tlf01.product3_amount, :pte_tlf01.product4_code, :pte_tlf01.product4_quantity, :pte_tlf01.product4_amount,                  
         :pte_tlf01.product5_code, :pte_tlf01.product5_quantity, :pte_tlf01.product5_amount, :pte_tlf01.product6_code,             
         :pte_tlf01.product6_quantity, :pte_tlf01.product6_amount, :pte_tlf01.product7_code, :pte_tlf01.product7_quantity,          
         :pte_tlf01.product7_amount, :pte_tlf01.product8_code, :pte_tlf01.product8_quantity, :pte_tlf01.product8_amount,
         :pte_tlf01.product9_code, :pte_tlf01.product9_quantity, :pte_tlf01.product9_amount, :pte_tlf01.product10_code,
         :pte_tlf01.product10_quantity, :pte_tlf01.product10_amount, :pte_tlf01.product11_code, :pte_tlf01.product11_quantity, 
         :pte_tlf01.product11_amount, :pte_tlf01.product12_code, :pte_tlf01.product12_quantity, :pte_tlf01.product12_amount,
         :pte_tlf01.product13_code, :pte_tlf01. product13_quantity, :pte_tlf01.product13_amount,:pte_tlf01.product14_code, 
         :pte_tlf01.product14_quantity, :pte_tlf01.product14_amount, :pte_tlf01.product15_code, :pte_tlf01.product15_quantity,
         :pte_tlf01.product15_amount, :pte_tlf01.product16_code, :pte_tlf01.product16_quantity, :pte_tlf01.product16_amount,    
         :pte_tlf01.product17_code, :pte_tlf01.product17_quantity, :pte_tlf01.product17_amount, :pte_tlf01.product18_code,
         :pte_tlf01.product18_quantity, :pte_tlf01.product18_amount, :pte_tlf01.product19_code, :pte_tlf01.product19_quantity,
         :pte_tlf01.product19_amount, :pte_tlf01.product20_code, :pte_tlf01.product20_quantity, :pte_tlf01.product20_amount,
         :pte_tlf01.visa_merchant_id,
		 :pte_tlf01.cash_bonus,
		 :pte_tlf01.deferred_factor,
		 :pte_tlf01.deferred_term_length,
		 :pte_tlf01.currency_code,
		 :pte_tlf01.transmission_timestamp,
		 :pte_tlf01.tran_fee_amount,
		 :pte_tlf01.cvc_data,
		 :pte_tlf01.verify_mag_stripe,
		 :pte_tlf01.saf,
		 :pte_tlf01.security_response_code,
		 :pte_tlf01.service_code,
		 :pte_tlf01.source_pin_format,
		 :pte_tlf01.dest_pin_format,
		 :pte_tlf01.voice_auth,
         :pte_tlf01.actual_amount,
		 :pte_tlf01.reversal_amount, 
		 :pte_tlf01.voice_auth_text,
		 :pte_tlf01.operator_id,
		 :pte_tlf01.workstation,
		 :pte_tlf01.orig_auth_number,
		 :pte_tlf01.ticket_nbr,
		 :pte_tlf01.system_date,
		 :pte_tlf01.def_gross_amt,
		 :pte_tlf01.monthly_amort_amt

		    
      );
    if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_insert_tlf01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   }
   /*printf("value of terminal_id: x%sx\n", pte_tlf01.terminal_id);*/
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_tlf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;

}


/*************************************************************************************/
/* Girija Y - ThoughtFocus */
/*************************************************************************************/
BYTE db_insert_tlf01_stip( pTLF01 tlf01_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   char date[9] = {0};
   char yymmdd[25] = {0};
   char hostname[256] = {0}; 
   INT  hostname_len = 0;
   INT  move_len = 0;
   EXEC SQL END DECLARE SECTION;
   
   tlf01_stip_to_db( tlf01_ptr );
   /*printf("Date in TLF01: %s\n",pte_tlf01_stip.date_yyyymmdd); */

   if (strlen(pte_tlf01_stip.date_yyyymmdd) < 8 )
   {
      PRINT("Entered datecheck loop\n");
      /*pintime_get_gmt ( yymmdd );*/
      genutil_format_date(yymmdd);
      //strncpy(date, yymmdd, 4);
      //strcat(date, pte_tlf01_stip.date_yyyymmdd);
      /*printf("Date after concatenate: %s", date);*/
      strncpy(pte_tlf01_stip.date_yyyymmdd, yymmdd, sizeof(pte_tlf01_stip.date_yyyymmdd)-1);
   }
   gethostname(hostname, sizeof(hostname));
   hostname_len = strlen(hostname);
   if (hostname_len > 12)
   {
   		move_len= hostname_len - 12;
   		memcpy(pte_tlf01_stip.redemption_amount,hostname + move_len,12);
   }
   else
   { 
   		memcpy(pte_tlf01_stip.redemption_amount,hostname,hostname_len);
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL INSERT INTO tlf01_stip
     (   transaction_id,
         entry_type,
         tpdu_id,
         issuer_id,
         acquirer_id,
         tx_key,
         terminal_id,
         terminal_type,
         response_text,
         card_num_len,
         card_num,
         exp_date,
         total_amount,
         add_amounts,
         invoice_number,
         orig_amount,
         auth_number,
         processing_code,
         sys_trace_audit_num,
         orig_sys_trace_num,
         pos_entry_mode,
         nii,
         pos_condition_code,
         track1,
         track2,
         retrieval_ref_num,
         orig_retrieval_ref_num,
         merchant_id,
         orig_message,
         settlement_total,
         message_type,
         card_holder_name,
         general_status,
         originator_queue,
         originator_info,
         batch_number,
         response_code,
         date_yyyymmdd,
         time_hhmmss,
         num_sales,
         sales_amount,
         num_refunds,
         refund_amount,
         num_dbsales,
         dbsales_amount,
         num_dbrefunds,
         dbrefund_amount,
         pin_block,
         tax_amount,
         tip_amount,
         tran_start_time,
         host_start_time,
         host_finish_time,
         tran_finish_time,
         settle_file_prefix,
         resp_source_len,
         visa_char_indicator,
         visa_tran_id,
         visa_validation_code,
         mcard_banknet_len,
         mcard_banknet,
         agent_id_len,
         agent_id,
         cvc,
         settlement_date,
         category_code,
         conversion_rate,
         product_code,
         odometer,
         organization_id,
         dynamic_keychange,
                          
	      txn_cnt,
         source_key,                         
         dcf01_retired_cwk,                  
         dest_key,                          
         ncf01_retired_cwk,                                                 
	      handler_queue,        		          
	      authorizing_host_queue,		   	    
         max_net_consec_tmouts,              
         max_active_txns,                    
         remote_nsp_type,
         kek,  
         credit_limit,
         forwarding_institution_id,          
         acquiring_id,                                             
         outstanding_balance,
         nfi_name,                           
         nfi_seq_nbr,                     
         nfi_start_date,            
         nfi_end_date,          
         resp_source,
         origin,
         auth_1,
         auth_2,                      
         update_mask,
         type_of_data,   
         down_payment,         
         period,                 
         interest_rate,               
         total_interest,               
         redemption_amount,             
         vehicle_number,
         profile,nbr_of_prod_codes , product1_code ,product1_quantity,
        product1_amount, product2_code, product2_quantity, product2_amount, product3_code, product3_quantity,
        product3_amount, product4_code, product4_quantity, product4_amount, product5_code, product5_quantity,
        product5_amount, product6_code, product6_quantity, product6_amount, product7_code, product7_quantity,
        product7_amount, product8_code, product8_quantity, product8_amount, product9_code, product9_quantity,
        product9_amount, product10_code, product10_quantity, product10_amount, product11_code, product11_quantity,
        product11_amount, product12_code, product12_quantity, product12_amount, product13_code, product13_quantity,
        product13_amount, product14_code, product14_quantity, product14_amount, product15_code, product15_quantity,          
        product15_amount, product16_code, product16_quantity, product16_amount, product17_code, product17_quantity,
        product17_amount, product18_code, product18_quantity, product18_amount, product19_code, product19_quantity,
        product19_amount, product20_code, product20_quantity, product20_amount,visa_merchant_id, 
		cash_bonus, deferred_factor, deferred_term_length, currency_code,transmission_timestamp, tran_fee_amount, cvc_data,
		verify_mag_stripe, saf, security_response_code, service_code, source_pin_format, dest_pin_format, voice_auth,
		actual_amount, reversal_amount, voice_auth_text, operator_id, workstation, orig_auth_number, ticket_nbr,
      system_date, def_gross_amt, monthly_amort_amt

     )               
   VALUES(  :pte_tlf01_stip.transaction_id,
         :pte_tlf01_stip.entry_type,
         :pte_tlf01_stip.tpdu_id,
         :pte_tlf01_stip.issuer_id,
         :pte_tlf01_stip.acquirer_id,
         :pte_tlf01_stip.tx_key,
         :pte_tlf01_stip.terminal_id,
         :pte_tlf01_stip.terminal_type,
         :pte_tlf01_stip.response_text,
         :pte_tlf01_stip.card_num_len,
         :pte_tlf01_stip.card_num,
         :pte_tlf01_stip.exp_date,
         :pte_tlf01_stip.total_amount,
         :pte_tlf01_stip.add_amounts,
         :pte_tlf01_stip.invoice_number,
         :pte_tlf01_stip.orig_amount,
         :pte_tlf01_stip.auth_number,
         :pte_tlf01_stip.processing_code,
         :pte_tlf01_stip.sys_trace_audit_num,
         :pte_tlf01_stip.orig_sys_trace_num,
         :pte_tlf01_stip.pos_entry_mode,
         :pte_tlf01_stip.nii,
         :pte_tlf01_stip.pos_condition_code,
         :pte_tlf01_stip.track1,
         :pte_tlf01_stip.track2,
         :pte_tlf01_stip.retrieval_ref_num,
         :pte_tlf01_stip.orig_retrieval_ref_num,
         :pte_tlf01_stip.merchant_id,
         :pte_tlf01_stip.orig_message,
         :pte_tlf01_stip.settlement_total,
         :pte_tlf01_stip.message_type,
         :pte_tlf01_stip.card_holder_name,
         :pte_tlf01_stip.general_status,
         :pte_tlf01_stip.originator_queue,
         :pte_tlf01_stip.originator_info,
         :pte_tlf01_stip.batch_number,
         :pte_tlf01_stip.response_code,
         :pte_tlf01_stip.date_yyyymmdd,
         :pte_tlf01_stip.time_hhmmss,
         :pte_tlf01_stip.num_sales,
         :pte_tlf01_stip.sales_amount,
         :pte_tlf01_stip.num_refunds,
         :pte_tlf01_stip.refund_amount,
         :pte_tlf01_stip.num_dbsales,
         :pte_tlf01_stip.dbsales_amount,
         :pte_tlf01_stip.num_dbrefunds,
         :pte_tlf01_stip.dbrefund_amount,
         :pte_tlf01_stip.pin_block,
         :pte_tlf01_stip.tax_amount,
         :pte_tlf01_stip.tip_amount,
         :pte_tlf01_stip.tran_start_time,
         :pte_tlf01_stip.host_start_time,
         :pte_tlf01_stip.host_finish_time,
         :pte_tlf01_stip.tran_finish_time,
         :pte_tlf01_stip.settle_file_prefix,
         :pte_tlf01_stip.resp_source_len,
         :pte_tlf01_stip.visa_char_indicator,
         :pte_tlf01_stip.visa_tran_id,
         :pte_tlf01_stip.visa_validation_code,
         :pte_tlf01_stip.mcard_banknet_len,
         :pte_tlf01_stip.mcard_banknet,
         :pte_tlf01_stip.agent_id_len,
         :pte_tlf01_stip.agent_id,
         :pte_tlf01_stip.cvc,
         :pte_tlf01_stip.settlement_date,
         :pte_tlf01_stip.category_code,
         :pte_tlf01_stip.conversion_rate,
         :pte_tlf01_stip.product_code,
         :pte_tlf01_stip.odometer,
         :pte_tlf01_stip.organization_id,
         :pte_tlf01_stip.dynamic_keychange,
          
         :pte_tlf01_stip.txn_cnt,               
	      :pte_tlf01_stip.source_key,                         
         :pte_tlf01_stip.dcf01_retired_cwk,                  
         :pte_tlf01_stip.dest_key,                          
         :pte_tlf01_stip.ncf01_retired_cwk,                                                 
	      :pte_tlf01_stip.handler_queue,        		          
	      :pte_tlf01_stip.authorizing_host_queue,		   	    
         :pte_tlf01_stip.max_net_consec_tmouts,              
         :pte_tlf01_stip.max_active_txns,                    
         :pte_tlf01_stip.remote_nsp_type,
         :pte_tlf01_stip.kek,
         
         :pte_tlf01_stip.credit_limit,
         :pte_tlf01_stip.forwarding_institution_id,          
         :pte_tlf01_stip.acquiring_id,                                             
         :pte_tlf01_stip.outstanding_balance,
         :pte_tlf01_stip.nfi_name,                           
         :pte_tlf01_stip.nfi_seq_nbr,                     
         :pte_tlf01_stip.nfi_start_date,            
         :pte_tlf01_stip.nfi_end_date,           
         :pte_tlf01_stip.resp_source,
         :pte_tlf01_stip.origin,
         :pte_tlf01_stip.auth_1,
         :pte_tlf01_stip.auth_2,                      
         :pte_tlf01_stip.update_mask,
         :pte_tlf01_stip.type_of_data,   
         :pte_tlf01_stip.down_payment,         
         :pte_tlf01_stip.period,                 
         :pte_tlf01_stip.interest_rate,               
         :pte_tlf01_stip.total_interest,                                  
         :pte_tlf01_stip.redemption_amount,             
         :pte_tlf01_stip.vehicle_number,
         :pte_tlf01_stip.profile, :pte_tlf01_stip.nbr_of_prod_codes,          
         :pte_tlf01_stip.product1_code, :pte_tlf01_stip.product1_quantity, :pte_tlf01_stip.product1_amount, :pte_tlf01_stip.product2_code,             
         :pte_tlf01_stip.product2_quantity, :pte_tlf01_stip.product2_amount, :pte_tlf01_stip.product3_code, :pte_tlf01_stip.product3_quantity,            
         :pte_tlf01_stip.product3_amount, :pte_tlf01_stip.product4_code, :pte_tlf01_stip.product4_quantity, :pte_tlf01_stip.product4_amount,                  
         :pte_tlf01_stip.product5_code, :pte_tlf01_stip.product5_quantity, :pte_tlf01_stip.product5_amount, :pte_tlf01_stip.product6_code,             
         :pte_tlf01_stip.product6_quantity, :pte_tlf01_stip.product6_amount, :pte_tlf01_stip.product7_code, :pte_tlf01_stip.product7_quantity,          
         :pte_tlf01_stip.product7_amount, :pte_tlf01_stip.product8_code, :pte_tlf01_stip.product8_quantity, :pte_tlf01_stip.product8_amount,
         :pte_tlf01_stip.product9_code, :pte_tlf01_stip.product9_quantity, :pte_tlf01_stip.product9_amount, :pte_tlf01_stip.product10_code,
         :pte_tlf01_stip.product10_quantity, :pte_tlf01_stip.product10_amount, :pte_tlf01_stip.product11_code, :pte_tlf01_stip.product11_quantity, 
         :pte_tlf01_stip.product11_amount, :pte_tlf01_stip.product12_code, :pte_tlf01_stip.product12_quantity, :pte_tlf01_stip.product12_amount,
         :pte_tlf01_stip.product13_code, :pte_tlf01_stip. product13_quantity, :pte_tlf01_stip.product13_amount,:pte_tlf01_stip.product14_code, 
         :pte_tlf01_stip.product14_quantity, :pte_tlf01_stip.product14_amount, :pte_tlf01_stip.product15_code, :pte_tlf01_stip.product15_quantity,
         :pte_tlf01_stip.product15_amount, :pte_tlf01_stip.product16_code, :pte_tlf01_stip.product16_quantity, :pte_tlf01_stip.product16_amount,    
         :pte_tlf01_stip.product17_code, :pte_tlf01_stip.product17_quantity, :pte_tlf01_stip.product17_amount, :pte_tlf01_stip.product18_code,
         :pte_tlf01_stip.product18_quantity, :pte_tlf01_stip.product18_amount, :pte_tlf01_stip.product19_code, :pte_tlf01_stip.product19_quantity,
         :pte_tlf01_stip.product19_amount, :pte_tlf01_stip.product20_code, :pte_tlf01_stip.product20_quantity, :pte_tlf01_stip.product20_amount,
         :pte_tlf01_stip.visa_merchant_id,
		 :pte_tlf01_stip.cash_bonus,
		 :pte_tlf01_stip.deferred_factor,
		 :pte_tlf01_stip.deferred_term_length,
		 :pte_tlf01_stip.currency_code,
		 :pte_tlf01_stip.transmission_timestamp,
		 :pte_tlf01_stip.tran_fee_amount,
		 :pte_tlf01_stip.cvc_data,
		 :pte_tlf01_stip.verify_mag_stripe,
		 :pte_tlf01_stip.saf,
		 :pte_tlf01_stip.security_response_code,
		 :pte_tlf01_stip.service_code,
		 :pte_tlf01_stip.source_pin_format,
		 :pte_tlf01_stip.dest_pin_format,
		 :pte_tlf01_stip.voice_auth,
         :pte_tlf01_stip.actual_amount,
		 :pte_tlf01_stip.reversal_amount, 
		 :pte_tlf01_stip.voice_auth_text,
		 :pte_tlf01_stip.operator_id,
		 :pte_tlf01_stip.workstation,
		 :pte_tlf01_stip.orig_auth_number,
		 :pte_tlf01_stip.ticket_nbr,
		 :pte_tlf01_stip.system_date,
		 :pte_tlf01_stip.def_gross_amt,
		 :pte_tlf01_stip.monthly_amort_amt
    
		    
      );
    if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01_STIP ,Fun_Name : db_insert_tlf01_stip , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   }
   /*printf("value of terminal_id: x%sx\n", pte_tlf01_stip.terminal_id);*/
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_tlf01_stip,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;

}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_drf01( pDRF01 drf01_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   drf01_to_db( drf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO drf01
     (   device_id,
         merchant_id,
         date_of_request,
         time_of_request,
         request_approved,
         filename_downloaded,
         download_completed
     )               
   VALUES(  :pte_drf01.device_id,
         :pte_drf01.merchant_id,
         :pte_drf01.date_of_request,
         :pte_drf01.time_of_request,
         :pte_drf01.request_approved,
         :pte_drf01.filename_downloaded,
         :pte_drf01.download_completed
      );
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : DRF01 ,Fun_Name : db_insert_drf01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_drf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}
/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_dlf01( pDLF01 dlf01_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   dlf01_to_db( dlf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL INSERT INTO dlf01
     (   device_id,
         merchant_id,
         last_downloaded_date,
         last_downloaded_filename
     )               
   VALUES(  :pte_dlf01.device_id,
         :pte_dlf01.merchant_id,
         :pte_dlf01.last_downloaded_date,
         :pte_dlf01.last_downloaded_filename

      );
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : DLF01 ,Fun_Name : db_insert_dlf01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   }
   if ( SQLCODE != 0 )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_dlf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}
/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_nfi02( pNFI02 nfi02_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   nfi02_to_db( nfi02_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO nfi02
     (   file_name,
         start_date,
         end_date
     )               
   VALUES(  :pte_nfi02.file_name,
         :pte_nfi02.start_date,
         :pte_nfi02.end_date
      );
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NFI02 ,Fun_Name : db_insert_nfi02 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_nfi02,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}
/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_nfi01( pNFI01 nfi01_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   nfi01_to_db( nfi01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO nfi01
     (   file_name,
         start_date,
         end_date
     )               
   VALUES(  :pte_nfi01.file_name,
         :pte_nfi01.start_date,
         :pte_nfi01.end_date
      );
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NFI01 ,Fun_Name : db_insert_nfi01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_nfi01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}
/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_ntf01( pNTF01 ntf01_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   ntf01_to_db( ntf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO ntf01
     (   account_info,
         format_code,
         file_name
     )               
   VALUES(  :pte_ntf01.account_info,
         :pte_ntf01.format_code,
         :pte_ntf01.file_name
      );
   
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NTF01 ,Fun_Name : db_insert_ntf01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_ntf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}
/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_delete_nmf01_action_code (pNMF01 nmf01_rec, pCHAR ErrorMsg)
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   int NumRowsReturned = 0;
   char  nbr      [7];
   char  maxseqnbr      [7];
   EXEC SQL END DECLARE SECTION;

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   /*Delete all recs. from NMF01 with action_code=D*/
   EXEC SQL DELETE FROM nmf01
   WHERE action_code ='D' ;
   
   if ( db_error_statics_flag == true )
   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NMF01 ,Fun_Name : db_update_delete_nmf01_action_code_D1 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   }

   EXEC SQL SELECT COUNT(*) INTO :NumRowsReturned FROM nmf01; 
   if(NumRowsReturned == 0  )
   {
      strcpy(nmf01_rec->primary_key.seq_nbr, "000000" );
      return PTEMSG_OK;
   }
   else

   {
      /* Get the max and return it to the -ve file processor*/
      EXEC SQL WHENEVER SQLERROR CONTINUE; 
      EXEC SQL SELECT (MAX(seq_nbr)) INTO :maxseqnbr FROM nmf01;

      EXEC SQL WHENEVER SQLERROR CONTINUE; 
      if (SQLCODE == NULL_COLUMN_DATA)
      {
         strcpy(nmf01_rec->primary_key.seq_nbr, "000000" );
         return PTEMSG_OK;
      }
      else if (SQLCODE == 0 )
      {
         strncpy(nbr, nmf01_rec->primary_key.seq_nbr, sizeof(maxseqnbr) );

         if( (atol(maxseqnbr) + atol(nbr)) > 999999 )
         {

            if ( db_error_statics_flag == true )
   			{
      			start_time = ptetime_get_time();
   			}
            EXEC SQL DELETE nmf01;
            if ( db_error_statics_flag == true )
   			{
     	 		 end_time = ptetime_get_time();
     	 		 duration = end_time - start_time;
    	  		if(duration >= db_error_statics_value)
	      		{
	  				memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NMF01 ,Fun_Name : db_update_delete_nmf01_action_code_D2 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  		}
   			}
            /*set the seq_nbr field to zero and retrun*/
            strcpy(nmf01_rec->primary_key.seq_nbr, "000000" );
            return PTEMSG_OK;
         }
         else
         {
           sprintf(nmf01_rec->primary_key.seq_nbr, "%06s",maxseqnbr);
           /*strncpy(nmf01_rec->primary_key.seq_nbr, maxseqnbr, sizeof(maxseqnbr) );*/
         }
      }
   }

      if ( db_error_statics_flag == true )
   	  {
      		start_time = ptetime_get_time();
      }
   
      EXEC SQL UPDATE nmf01
      SET   action_code = 'P';
      
      if ( db_error_statics_flag == true )
   	  {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NMF01 ,Fun_Name : db_update_delete_nmf01_action_code_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
      }
   if (( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND) )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_delete_nmf01_action_code,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_nmf01_action_code(pCHAR ErrorMsg)
{
   INT  retval;

 /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_nmf01
      FROM   nmf01
      WHERE action_code = 'P' AND
      		rownum = 1
      For Update NOWAIT;

   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
      return( dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg) );
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE nmf01
      SET action_code = 'D'
      WHERE action_code = 'P';
  if ( db_error_statics_flag == true )
  {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NMF01 ,Fun_Name : db_update_nmf01_action_code , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
  }
  if (( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND) )
  {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_nmf01_action_code,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}
/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_nmf01 (pNMF01 nmf01_rec, pCHAR ErrorMsg)
{
   INT  retval;
 
   EXEC SQL BEGIN DECLARE SECTION;
   long   NumRowsReturned = 0, count =0;
   /*char  seq_nbr        [6];*/
   int   flag = 0,i     =0;
   /*char  maxseqnbr      [7];*/
   char  nbr1[15]         = "";
   char  nbr[7]         = "";
   long  julian         = 0;
   /*char  date           [9];*/

   EXEC SQL END DECLARE SECTION;
   
   nmf01_to_db( nmf01_rec );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT * 
   INTO db_nmf01
   from NMF01
   WHERE format_code  = :pte_nmf01.format_code      AND
   		 account_info = :pte_nmf01.account_info     AND
         rownum       =  1 ;
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NMF01 ,Fun_Name : db_update_nmf01_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if(SQLCODE == NO_DATA_FOUND)
   {
      PRINT("Insert rec. into NMF01\n");
      sprintf(nbr1, "%06d", atol(nmf01_rec->primary_key.seq_nbr) +  1);
      strcpy(nmf01_rec->primary_key.seq_nbr, nbr1 );

      if ( db_error_statics_flag == true )
      {
          start_time = ptetime_get_time();
      }
      EXEC SQL INSERT 
      INTO nmf01
            (seq_nbr, action_code, format_code, account_info, file_name )
      VALUES ( :nbr1, 'A', :pte_nmf01.format_code, :pte_nmf01.account_info, :pte_nmf01.file_name);
      
      if ( db_error_statics_flag == true )
     {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NMF01 ,Fun_Name : db_update_nmf01_I , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
     }
   }
   else if(SQLCODE == 0)
   {

      if ( db_error_statics_flag == true )
      {
          start_time = ptetime_get_time();
      }
      EXEC SQL UPDATE nmf01
      SET action_code = 'A'
      WHERE seq_nbr= :db_nmf01.seq_nbr;
      
      if ( db_error_statics_flag == true )
      {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NMF01 ,Fun_Name : db_update_nmf01_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
   }
       
   /*return the structure with the current MAX seq_nbr*/

   if (( SQLCODE != 0 ) && (SQLCODE != NULL_COLUMN_DATA) )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_nmf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}



/*************************************************************************************/

/*************************************************************************************/
BYTE db_insert_nbf01( pNBF01 nbf01_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   nbf01_to_db( nbf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL INSERT INTO nbf01
     (   low,
         high
     )               
   VALUES(  :pte_nbf01.low,
         :pte_nbf01.high
      );

   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NBF01 ,Fun_Name : db_insert_nbf01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( SQLCODE != 0 )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_nbf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_ngf01( pNGF01 ngf01_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   ngf01_to_db( ngf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO ngf01
     (   
         negative_group_id,
         low1,
         high1,
         low2,
         high2,
         low3,
         high3,
         low4,
         high4,
         low5,
         high5,
         low6,
         high6,
         low7,
         high7,
         low8,
         high8,
         low9,
         high9,
         low10,
         high10
     )               
   VALUES(  :pte_ngf01.negative_group_id,
         :pte_ngf01.low1,
         :pte_ngf01.high1,
         :pte_ngf01.low2,
         :pte_ngf01.high2,
         :pte_ngf01.low3,
         :pte_ngf01.high3,
         :pte_ngf01.low4,
         :pte_ngf01.high4,
         :pte_ngf01.low5,
         :pte_ngf01.high5,
         :pte_ngf01.low6,
         :pte_ngf01.high6,
         :pte_ngf01.low7,
         :pte_ngf01.high7,
         :pte_ngf01.low8,
         :pte_ngf01.high8,
         :pte_ngf01.low9,
         :pte_ngf01.high9,
         :pte_ngf01.low10,
         :pte_ngf01.high10
      );
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NGF01 ,Fun_Name : db_insert_ngf01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_ngf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_mcf20( pMCF20 mcf20_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   mcf20_to_db( mcf20_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO mcf20
     (   organization_id,
         merchant_id,
         yyyymmdd,
         ytd_total_adds,
         ytd_total_deletes,
         mtd_total_adds,
         mtd_total_deletes,
         daily1_adds,
         daily1_deletes,
         daily2_adds,
         daily2_deletes,
         daily3_adds,
         daily3_deletes,
         daily4_adds,
         daily4_deletes,
         daily5_adds,
         daily5_deletes,
         daily6_adds,
         daily6_deletes,
         daily7_adds,
         daily7_deletes,
         daily8_adds,
         daily8_deletes,
         daily9_adds,
         daily9_deletes,
         daily10_adds,
         daily10_deletes,
         daily11_adds,
         daily11_deletes,
         daily12_adds,
         daily12_deletes,
         daily13_adds,
         daily13_deletes,
         daily14_adds,
         daily14_deletes,
         daily15_adds,
         daily15_deletes,
         daily16_adds,
         daily16_deletes,
         daily17_adds,
         daily17_deletes,
         daily18_adds,
         daily18_deletes,
         daily19_adds,
         daily19_deletes,
         daily20_adds,
         daily20_deletes,
         daily21_adds,
         daily21_deletes,
         daily22_adds,
         daily22_deletes,
         daily23_adds,
         daily23_deletes,
         daily24_adds,
         daily24_deletes,
         daily25_adds,
         daily25_deletes,
         daily26_adds,
         daily26_deletes,
         daily27_adds,
         daily27_deletes,
         daily28_adds,
         daily28_deletes,
         daily29_adds,
         daily29_deletes,
         daily30_adds,
         daily30_deletes,
         daily31_adds,
         daily31_deletes
     )               
   VALUES(  :pte_mcf20.organization_id,
         :pte_mcf20.merchant_id,
         :pte_mcf20.yyyymmdd,
         :pte_mcf20.ytd_total_adds,
         :pte_mcf20.ytd_total_deletes,
         :pte_mcf20.mtd_total_adds,
         :pte_mcf20.mtd_total_deletes,
         :pte_mcf20.daily1_adds,
         :pte_mcf20.daily1_deletes,
         :pte_mcf20.daily2_adds,
         :pte_mcf20.daily2_deletes,
         :pte_mcf20.daily3_adds,
         :pte_mcf20.daily3_deletes,
         :pte_mcf20.daily4_adds,
         :pte_mcf20.daily4_deletes,
         :pte_mcf20.daily5_adds,
         :pte_mcf20.daily5_deletes,
         :pte_mcf20.daily6_adds,
         :pte_mcf20.daily6_deletes,
         :pte_mcf20.daily7_adds,
         :pte_mcf20.daily7_deletes,
         :pte_mcf20.daily8_adds,
         :pte_mcf20.daily8_deletes,
         :pte_mcf20.daily9_adds,
         :pte_mcf20.daily9_deletes,
         :pte_mcf20.daily10_adds,
         :pte_mcf20.daily10_deletes,
         :pte_mcf20.daily11_adds,
         :pte_mcf20.daily11_deletes,
         :pte_mcf20.daily12_adds,
         :pte_mcf20.daily12_deletes,
         :pte_mcf20.daily13_adds,
         :pte_mcf20.daily13_deletes,
         :pte_mcf20.daily14_adds,
         :pte_mcf20.daily14_deletes,
         :pte_mcf20.daily15_adds,
         :pte_mcf20.daily15_deletes,
         :pte_mcf20.daily16_adds,
         :pte_mcf20.daily16_deletes,
         :pte_mcf20.daily17_adds,
         :pte_mcf20.daily17_deletes,
         :pte_mcf20.daily18_adds,
         :pte_mcf20.daily18_deletes,
         :pte_mcf20.daily19_adds,
         :pte_mcf20.daily19_deletes,
         :pte_mcf20.daily20_adds,
         :pte_mcf20.daily20_deletes,
         :pte_mcf20.daily21_adds,
         :pte_mcf20.daily21_deletes,
         :pte_mcf20.daily22_adds,
         :pte_mcf20.daily22_deletes,
         :pte_mcf20.daily23_adds,
         :pte_mcf20.daily23_deletes,
         :pte_mcf20.daily24_adds,
         :pte_mcf20.daily24_deletes,
         :pte_mcf20.daily25_adds,
         :pte_mcf20.daily25_deletes,
         :pte_mcf20.daily26_adds,
         :pte_mcf20.daily26_deletes,
         :pte_mcf20.daily27_adds,
         :pte_mcf20.daily27_deletes,
         :pte_mcf20.daily28_adds,
         :pte_mcf20.daily28_deletes,
         :pte_mcf20.daily29_adds,
         :pte_mcf20.daily29_deletes,
         :pte_mcf20.daily30_adds,
         :pte_mcf20.daily30_deletes,
         :pte_mcf20.daily31_adds,
         :pte_mcf20.daily31_deletes
      );
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : MCF20 ,Fun_Name : db_insert_mcf20 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_mcf20,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_ocf20( pOCF20 ocf20_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   ocf20_to_db( ocf20_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO ocf20
     (   organization_id,
         yyyymmdd,
         ytd_total_tran_cnt,
         ytd_total_tran_amt,
         mtd_total_tran_cnt,
         mtd_total_tran_amt,
         tran_cnt,
         tran_amt,
         tran_approved_cnt,
         tran_declined_cnt,
         decline1_category_code,
         decline1_category_cnt,
         decline2_category_code,
         decline2_category_cnt,
         decline3_category_code,
         decline3_category_cnt,
         decline4_category_code,
         decline4_category_cnt,
         decline5_category_code,
         decline5_category_cnt,
         decline6_category_code,
         decline6_category_cnt,
         decline7_category_code,
         decline7_category_cnt,
         decline8_category_code,
         decline8_category_cnt,
         decline9_category_code,
         decline9_category_cnt,
         decline10_category_code,
         decline10_category_cnt,
         decline11_category_code,
         decline11_category_cnt,
         decline12_category_code,
         decline12_category_cnt,
         decline13_category_code,
         decline13_category_cnt,
         decline14_category_code,
         decline14_category_cnt,
         decline15_category_code,
         decline15_category_cnt,
         decline16_category_code,
         decline16_category_cnt,
         decline17_category_code,
         decline17_category_cnt,
         decline18_category_code,
         decline18_category_cnt,
         decline19_category_code,
         decline19_category_cnt,
         decline20_category_code,
         decline20_category_cnt
     )               
   VALUES(  :pte_ocf20.organization_id,
         :pte_ocf20.yyyymmdd,
         :pte_ocf20.ytd_total_tran_cnt,
         :pte_ocf20.ytd_total_tran_amt,
         :pte_ocf20.mtd_total_tran_cnt,
         :pte_ocf20.mtd_total_tran_amt,
         :pte_ocf20.tran_cnt,
         :pte_ocf20.tran_amt,
         :pte_ocf20.tran_approved_cnt,
         :pte_ocf20.tran_declined_cnt,
         :pte_ocf20.decline1_category_code,
         :pte_ocf20.decline1_category_cnt,
         :pte_ocf20.decline2_category_code,
         :pte_ocf20.decline2_category_cnt,
         :pte_ocf20.decline3_category_code,
         :pte_ocf20.decline3_category_cnt,
         :pte_ocf20.decline4_category_code,
         :pte_ocf20.decline4_category_cnt,
         :pte_ocf20.decline5_category_code,
         :pte_ocf20.decline5_category_cnt,
         :pte_ocf20.decline6_category_code,
         :pte_ocf20.decline6_category_cnt,
         :pte_ocf20.decline7_category_code,
         :pte_ocf20.decline7_category_cnt,
         :pte_ocf20.decline8_category_code,
         :pte_ocf20.decline8_category_cnt,
         :pte_ocf20.decline9_category_code,
         :pte_ocf20.decline9_category_cnt,
         :pte_ocf20.decline10_category_code,
         :pte_ocf20.decline10_category_cnt,
         :pte_ocf20.decline11_category_code,
         :pte_ocf20.decline11_category_cnt,
         :pte_ocf20.decline12_category_code,
         :pte_ocf20.decline12_category_cnt,
         :pte_ocf20.decline13_category_code,
         :pte_ocf20.decline13_category_cnt,
         :pte_ocf20.decline14_category_code,
         :pte_ocf20.decline14_category_cnt,
         :pte_ocf20.decline15_category_code,
         :pte_ocf20.decline15_category_cnt,
         :pte_ocf20.decline16_category_code,
         :pte_ocf20.decline16_category_cnt,
         :pte_ocf20.decline17_category_code,
         :pte_ocf20.decline17_category_cnt,
         :pte_ocf20.decline18_category_code,
         :pte_ocf20.decline18_category_cnt,
         :pte_ocf20.decline19_category_code,
         :pte_ocf20.decline19_category_cnt,
         :pte_ocf20.decline20_category_code,
         :pte_ocf20.decline20_category_cnt
      );
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : OCF20 ,Fun_Name : db_insert_ocf20 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_ocf20,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_ocf01( pOCF01 ocf01_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   ocf01_to_db( ocf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO ocf01
     (  organization_id,
        name01,
        addr01,
        addr02,
        city,
        state,
        zip_code,
        intl_code,
        contact,
        phone01,
        phone02,
        date_added,
        status,
        totals_ind,
        statistics_ind
     )               
   VALUES(  :pte_ocf01.organization_id,
       :pte_ocf01.name01,
       :pte_ocf01.addr01,
       :pte_ocf01.addr02,
       :pte_ocf01.city,
       :pte_ocf01.state,
       :pte_ocf01.zip_code,
       :pte_ocf01.intl_code,
       :pte_ocf01.contact,
       :pte_ocf01.phone01,
       :pte_ocf01.phone02,
       :pte_ocf01.date_added,
       :pte_ocf01.status,
       :pte_ocf01.totals_ind,
       :pte_ocf01.statistics_ind
      );
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : OCF01 ,Fun_Name : db_insert_ocf01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_ocf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}


/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_mcf01( pMCF01 mcf01_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   mcf01_to_db( mcf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO mcf01
     ( organization_id, 
       merchant_id, 
       status, 
       name01, 
       name02, 
       address01, 
       address02, 
       city,               
       country, 
       state, 
       zip_code, 
       intl_code, 
       currency_code, 
       contact, 
       phone01,               
       phone02,               
       invoice_batch,               
       invoice_subcode,               
       process_control_id,               
       date_added,
               
       region_nbr,           
       division_nbr,         
       password,             
       rps_merchant,         
       house_card_merchant,  
       procurement_merchant, 
       deferred_merchant,    
       cash_bonus_eligible,  
       vip_code,             
       pos_code,             
       vs_tcc_code,          
       mc_fcc_code,          
       jcb_sub_code,         
       mall_code,            
       hc_code,              
       solicit_code,         

       block_start_date,               
       block_end_date,               
       credit_purch_max,               
       credit_auth_max,               
       credit_return_max,               
       credit_cash_adv_max,
       credit_man_entry_max,               
       credit_cash_back_max,               
       debit_purch_max,               
       debit_auth_max,               
       debit_return_max,               
       debit_cash_adv_max,               
       debit_man_entry_max,               
       debit_cash_back_max,               
       aver_purch_amount,               
       max_num_returns,               
       amount_returns,               
       number_man_entries,               
       amount_deposits,               
       pan_same,               
               
       totals_ind,               
       statistics_ind,               
       network_priority_routing_1,               
       network_priority_routing_2,               
       network_priority_routing_3,               
       network_priority_routing_4,               
       network_priority_routing_5,               
       network_priority_routing_6,               
       network_priority_routing_7,               
       network_priority_routing_8,               
       network_priority_routing_9,               
       network_priority_routing_10,
       negative_group_id,
       voice_category_code,
       class_code,
       deferred_start_date,
       deferred_end_date,
       group_outlet_code,
       group_type,
       reload_merchant
     )               
   VALUES(  :pte_mcf01.organization_id,
       :pte_mcf01.merchant_id,
       :pte_mcf01.status,
       :pte_mcf01.name01,
       :pte_mcf01.name02,               
       :pte_mcf01.address01,               
       :pte_mcf01.address02,               
       :pte_mcf01.city,               
       :pte_mcf01.country,               
       :pte_mcf01.state,               
       :pte_mcf01.zip_code,               
       :pte_mcf01.intl_code,               
       :pte_mcf01.currency_code,               
       :pte_mcf01.contact,               
       :pte_mcf01.phone01,               
       :pte_mcf01.phone02,               
       :pte_mcf01.invoice_batch,               
       :pte_mcf01.invoice_subcode,               
       :pte_mcf01.process_control_id,               
       :pte_mcf01.date_added,
                     
       :pte_mcf01.region_nbr,           
       :pte_mcf01.division_nbr,         
       :pte_mcf01.password,             
       :pte_mcf01.rps_merchant,         
       :pte_mcf01.house_card_merchant,  
       :pte_mcf01.procurement_merchant, 
       :pte_mcf01.deferred_merchant,    
       :pte_mcf01.cash_bonus_eligible,  
       :pte_mcf01.vip_code,             
       :pte_mcf01.pos_code,             
       :pte_mcf01.vs_tcc_code,          
       :pte_mcf01.mc_fcc_code,          
       :pte_mcf01.jcb_sub_code,         
       :pte_mcf01.mall_code,            
       :pte_mcf01.hc_code,              
       :pte_mcf01.solicit_code,         

       :pte_mcf01.block_start_date,               
       :pte_mcf01.block_end_date,               
       :pte_mcf01.credit_purch_max,               
       :pte_mcf01.credit_auth_max,               
       :pte_mcf01.credit_return_max,               
       :pte_mcf01.credit_cash_adv_max,               
       :pte_mcf01.credit_man_entry_max,               
       :pte_mcf01.credit_cash_back_max,               
       :pte_mcf01.debit_purch_max,               
       :pte_mcf01.debit_auth_max,               
       :pte_mcf01.debit_return_max,               
       :pte_mcf01.debit_cash_adv_max,               
       :pte_mcf01.debit_man_entry_max,               
       :pte_mcf01.debit_cash_back_max,
       :pte_mcf01.aver_purch_amount,               
       :pte_mcf01.max_num_returns,               
       :pte_mcf01.amount_returns,               
       :pte_mcf01.number_man_entries,               
       :pte_mcf01.amount_deposits,               
       :pte_mcf01.pan_same,               
       :pte_mcf01.totals_ind,               
       :pte_mcf01.statistics_ind,               
                     
       :pte_mcf01.network_priority_routing_1,               
       :pte_mcf01.network_priority_routing_2,               
       :pte_mcf01.network_priority_routing_3,               
       :pte_mcf01.network_priority_routing_4,               
       :pte_mcf01.network_priority_routing_5,               
       :pte_mcf01.network_priority_routing_6,               
       :pte_mcf01.network_priority_routing_7,               
       :pte_mcf01.network_priority_routing_8,               
       :pte_mcf01.network_priority_routing_9,               
       :pte_mcf01.network_priority_routing_10,
       :pte_mcf01.negative_group_id,
       :pte_mcf01.voice_category_code,
       :pte_mcf01.class_code,
       :pte_mcf01.deferred_start_date,
       :pte_mcf01.deferred_end_date,
       :pte_mcf01.group_outlet_code,
       :pte_mcf01.group_type,
       :pte_mcf01.reload_merchant
	   
      );
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : MCF01 ,Fun_Name : db_insert_mcf01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_mcf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_bch10_settle( pBCH10 bch10_ptr, pCHAR ErrorMsg)
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   int cnt = 0;
   double amount=0.0;
   double camount=0.0;
   char temp_total_debit_amt[13]={0};
   char temp_total_debit_refund_amt[13]={0};
   char temp_total_credit_amt[13]={0};
   char temp_total_credit_refund_amt[13]={0};
   char date[9]= {0};
   char yyyymmdd[25]= {0};
   char product11_amount_temp [13]={0};
   char os_tx_key = AUTH_OFFLINE_SALE_RESPONSE;
   char sale_tx_key = AUTH_SALE_RESPONSE;
   EXEC SQL END DECLARE SECTION;
    
   memset( &db_bch01, 0, sizeof( db_bch01 ) );
   strncpy( pte_bch01.batch_nbr, "ACTIVE", sizeof(pte_bch01.batch_nbr) );
   strncpy( pte_bch01.device_id, bch10_ptr->primary_key.device_id, sizeof(pte_bch01.device_id) );
   strncpy( pte_bch01.merchant_id, bch10_ptr->merchant_id, sizeof(pte_bch01.merchant_id) );

   if (strlen(bch10_ptr->tran_date) < 8 || (validate_date_yyyymmdd(bch10_ptr->tran_date) == false) )
   {
     	format_date(yyyymmdd);
      	strncpy(bch10_ptr->tran_date, yyyymmdd, sizeof(bch10_ptr->tran_date)-1);
      	devds_log_message(2,2,"Tran_date was NULL in BCH10","db_insert_bch10_settle");
   }
   
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *
   INTO :db_bch01
   FROM bch01
   WHERE device_id = :pte_bch01.device_id AND batch_nbr = :pte_bch01.batch_nbr AND merchant_id = :pte_bch01.merchant_id;
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_insert_bch10_settle_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }  
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_bch10_settle,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch01 ( (pBCH01)&pte_bch01 );
   bch10_to_db( bch10_ptr );

   memcpy(pte_bch10.open_date, db_bch01.open_date.arr, db_bch01.open_date.len);
   memcpy(pte_bch10.open_time, db_bch01.open_time.arr, db_bch01.open_time.len);

   //camount = atoi(pte_bch10.tran_amount);
   camount = strtod (pte_bch10.tran_amount, 0)/100;
   if(pte_bch10.bin_type == 'D')
   {
      if((pte_bch10.tx_key==AUTH_SALE) || (pte_bch10.tx_key==AUTH_OFFLINE_SALE) || (pte_bch10.tx_key==AUTH_BRANCH_PMT))
      {
         if(camount > 0)
         {
         	cnt = atoi(pte_bch01.total_debit_cnt);
         	sprintf(pte_bch01.total_debit_cnt, "%04d", cnt+1);
            //amount = atoi(pte_bch01.total_debit_amt) + camount;
            amount = strtod (pte_bch01.total_debit_amt, 0) / 100;
            amount = amount  + camount;
            //sprintf(pte_bch01.total_debit_amt, "%012lf", amount);
            Convert_Amt_To_Auth_Tx_String_Format(amount,temp_total_debit_amt);
            LeftFill_String_With_Character (sizeof temp_total_debit_amt-1, temp_total_debit_amt,'0') ;
            strcpy (pte_bch01.total_debit_amt, temp_total_debit_amt) ;
         }
      }
      else if((pte_bch10.tx_key==AUTH_REFUND) || (pte_bch10.tx_key==AUTH_OFFLINE_REFUND))
      {
         if(camount > 0)
         {
        	 cnt = atoi(pte_bch01.total_debit_refund_cnt);
        	 sprintf(pte_bch01.total_debit_refund_cnt, "%04d", cnt+1);
            //amount = atoi(pte_bch01.total_debit_refund_amt) + camount;
            amount = strtod (pte_bch01.total_debit_refund_amt, 0) / 100;
            amount = amount  + camount;
            //sprintf(pte_bch01.total_debit_refund_amt, "%012lf", amount);
            Convert_Amt_To_Auth_Tx_String_Format(amount,temp_total_debit_refund_amt);
            LeftFill_String_With_Character (sizeof temp_total_debit_refund_amt-1, temp_total_debit_refund_amt,'0') ;
            strcpy (pte_bch01.total_debit_refund_amt, temp_total_debit_refund_amt) ;
         }
      }
   }
   else
   {
      if( (pte_bch10.tx_key==AUTH_SALE)         ||
          (pte_bch10.tx_key==AUTH_RELOAD)       ||
          (pte_bch10.tx_key==AUTH_OFFLINE_SALE) ||
          (pte_bch10.tx_key==AUTH_CASH_ADVANCE) ||
          (pte_bch10.tx_key==AUTH_QUASI_CASH) )
      {
         if(camount > 0)
         {
         	cnt = atoi(pte_bch01.total_credit_cnt);
         	sprintf(pte_bch01.total_credit_cnt, "%04d", cnt+1);
            //amount = atoi(pte_bch01.total_credit_amt) + camount;
            amount = strtod (pte_bch01.total_credit_amt, 0) / 100;
            amount = amount  + camount;
             //  sprintf(pte_bch01.total_credit_amt, "%012lf", amount);
             Convert_Amt_To_Auth_Tx_String_Format(amount,temp_total_credit_amt);
             LeftFill_String_With_Character (sizeof temp_total_credit_amt-1, temp_total_credit_amt,'0') ;
             strcpy (pte_bch01.total_credit_amt, temp_total_credit_amt) ;
         }
      }
      else if((pte_bch10.tx_key==AUTH_REFUND) || (pte_bch10.tx_key==AUTH_OFFLINE_REFUND))
      {
         if(camount > 0)
         {
        	 cnt = atoi(pte_bch01.total_credit_refund_cnt);
        	 sprintf(pte_bch01.total_credit_refund_cnt, "%04d", cnt+1);
            //amount = atoi(pte_bch01.total_credit_refund_amt) + camount;
            amount = strtod (pte_bch01.total_credit_refund_amt, 0) / 100;
            amount = amount  + camount;
            //sprintf(pte_bch01.total_credit_refund_amt, "%012lf", amount);
            Convert_Amt_To_Auth_Tx_String_Format(amount,temp_total_credit_refund_amt);
            LeftFill_String_With_Character (sizeof temp_total_credit_refund_amt-1, temp_total_credit_refund_amt,'0') ;
            strcpy (pte_bch01.total_credit_refund_amt, temp_total_credit_refund_amt) ;
         }
      }
   }


   if((SQLCODE = db_update_bch01 ((pBCH01)&pte_bch01, ErrorMsg)) != PTEMSG_OK)
   {  	
		strcat (ErrorMsg , ":-db_update_bch01")	;
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_bch10_settle,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;

   }
   
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO bch10
      ( device_id, batch_nbr, retrieval_ref_num, merchant_id, processing_code, tran_amount, response_code,
        auth_number, tran_date, tran_time, transaction_id, message_type, card_nbr, invoice_nbr,
        settle_file_prefix, product_code, odometer,sys_trace_audit_num, tx_key,bin_type, type_of_data,
        down_payment, period, interest_rate, total_interest, redemption_amount,
        vehicle_number, pos_entry_mode,profile,nbr_of_prod_codes , product1_code ,product1_quantity,
        product1_amount, product2_code, product2_quantity, product2_amount, product3_code, product3_quantity,
        product3_amount, product4_code, product4_quantity, product4_amount, product5_code, product5_quantity,
        product5_amount, product6_code, product6_quantity, product6_amount, product7_code, product7_quantity,
        product7_amount, product8_code, product8_quantity, product8_amount, product9_code, product9_quantity,
        product9_amount, product10_code, product10_quantity, product10_amount, product11_code, product11_quantity,
        product11_amount, product12_code, product12_quantity, product12_amount, product13_code, product13_quantity,
        product13_amount, product14_code, product14_quantity, product14_amount, product15_code, product15_quantity,          
        product15_amount, product16_code, product16_quantity, product16_amount, product17_code, product17_quantity,
        product17_amount, product18_code, product18_quantity, product18_amount, product19_code, product19_quantity,
        product19_amount, product20_code, product20_quantity, product20_amount, aportionment_flag, exp_date, 
        open_date, open_time, cash_bonus,transmission_timestamp, mcard_banknet,ticket_nbr, def_gross_amt, term
                           
      )
   VALUES(:pte_bch10.device_id, :pte_bch10.batch_nbr, :pte_bch10.retrieval_ref_num,
        :pte_bch10.merchant_id, :pte_bch10.processing_code, :pte_bch10.tran_amount,    
        :pte_bch10.response_code, :pte_bch10.auth_number, :pte_bch10.tran_date,
        :pte_bch10.tran_time, :pte_bch10.transaction_id, :pte_bch10.message_type,
        :pte_bch10.card_nbr, :pte_bch10.invoice_nbr,
        :pte_bch10.settle_file_prefix, :pte_bch10.product_code, :pte_bch10.odometer,
        :pte_bch10.sys_trace_audit_num,:pte_bch10.tx_key,:pte_bch10.bin_type, :pte_bch10.type_of_data, 
        :pte_bch10.down_payment, :pte_bch10.period, :pte_bch10.interest_rate, :pte_bch10.total_interest, 
        :pte_bch10.redemption_amount, 
        :pte_bch10.vehicle_number, :pte_bch10.pos_entry_mode, :pte_bch10.profile, :pte_bch10.nbr_of_prod_codes,          
        :pte_bch10.product1_code, :pte_bch10.product1_quantity, :pte_bch10.product1_amount, :pte_bch10.product2_code,             
        :pte_bch10.product2_quantity, :pte_bch10.product2_amount, :pte_bch10.product3_code, :pte_bch10.product3_quantity,            
        :pte_bch10.product3_amount, :pte_bch10.product4_code, :pte_bch10.product4_quantity, :pte_bch10.product4_amount,                  
        :pte_bch10.product5_code, :pte_bch10.product5_quantity, :pte_bch10.product5_amount, :pte_bch10.product6_code,             
        :pte_bch10.product6_quantity, :pte_bch10.product6_amount, :pte_bch10.product7_code, :pte_bch10.product7_quantity,          
        :pte_bch10.product7_amount, :pte_bch10.product8_code, :pte_bch10.product8_quantity, :pte_bch10.product8_amount,
        :pte_bch10.product9_code, :pte_bch10.product9_quantity, :pte_bch10.product9_amount, :pte_bch10.product10_code,
        :pte_bch10.product10_quantity, :pte_bch10.product10_amount, :pte_bch10.product11_code, :pte_bch10.product11_quantity, 
        :pte_bch10.product11_amount, :pte_bch10.product12_code, :pte_bch10.product12_quantity, :pte_bch10.product12_amount,
        :pte_bch10.product13_code, :pte_bch10. product13_quantity, :pte_bch10.product13_amount,:pte_bch10.product14_code, 
        :pte_bch10.product14_quantity, :pte_bch10.product14_amount, :pte_bch10.product15_code, :pte_bch10.product15_quantity,
        :pte_bch10.product15_amount, :pte_bch10.product16_code, :pte_bch10.product16_quantity, :pte_bch10.product16_amount,    
        :pte_bch10.product17_code, :pte_bch10.product17_quantity, :pte_bch10.product17_amount, :pte_bch10.product18_code,
        :pte_bch10.product18_quantity, :pte_bch10.product18_amount, :pte_bch10.product19_code, :pte_bch10.product19_quantity,
        :pte_bch10.product19_amount, :pte_bch10.product20_code, :pte_bch10.product20_quantity, :pte_bch10.product20_amount,
        :pte_bch10.aportionment_flag, :pte_bch10.exp_date, :pte_bch10.open_date, :pte_bch10.open_time, :pte_bch10.cash_bonus,
		:pte_bch10.transmission_timestamp,:pte_bch10.mcard_banknet,:pte_bch10.ticket_nbr, :pte_bch10.def_gross_amt, :pte_bch10.term
        
      );
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_insert_bch10_settle_I , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( SQLCODE != 0 )
   {
		strcat (ErrorMsg , ":-db_insert_bch10_settle")	;
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_bch10_settle,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
	}

   return PTEMSG_OK;
}

/*************************************************************************************/

/*************************************************************************************/
BYTE db_insert_bch10_mp_settle( pBCH10 bch10_ptr, pCHAR ErrorMsg)
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   int cnt = 0;
   double amount=0.0;
   double camount=0.0;
   char temp_total_debit_amt[13]={0};
   char temp_total_debit_refund_amt[13]={0};
   char temp_total_credit_amt[13]={0};
   char temp_total_credit_refund_amt[13]={0};
   EXEC SQL END DECLARE SECTION;

   memset( &db_bch01_mp, 0, sizeof( db_bch01_mp ) );
   strncpy( pte_bch01_mp.batch_nbr, "ACTIVE", sizeof(pte_bch01_mp.batch_nbr) );
   strncpy( pte_bch01_mp.device_id, bch10_ptr->primary_key.device_id, sizeof(pte_bch01_mp.device_id) );
   strncpy( pte_bch01_mp.merchant_id, bch10_ptr->merchant_id, sizeof(pte_bch01_mp.merchant_id) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL SELECT *
   INTO :db_bch01_mp
   FROM bch01_mp
   WHERE device_id    = :pte_bch01_mp.device_id   AND 
   		 merchant_id  = :pte_bch01_mp.merchant_id AND 
   		 batch_nbr    = :pte_bch01_mp.batch_nbr;
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_insert_bch10_mp_settle_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_bch10_mp_settle,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch01_mp ( (pBCH01_MP)&pte_bch01_mp );
   bch10_to_db( bch10_ptr );

   memcpy(pte_bch10.open_date, db_bch01_mp.open_date.arr, db_bch01_mp.open_date.len);
   memcpy(pte_bch10.open_time, db_bch01_mp.open_time.arr, db_bch01_mp.open_time.len);

   //camount = atoi(pte_bch10.tran_amount);
   camount = strtod (pte_bch10.tran_amount, 0)/100;
   if(pte_bch10.bin_type == 'D')
   {
      if((pte_bch10.tx_key==AUTH_SALE) || (pte_bch10.tx_key==AUTH_OFFLINE_SALE) || (pte_bch10.tx_key==AUTH_BRANCH_PMT))
      {
         if(camount > 0)
         {
         	cnt = atoi(pte_bch01_mp.total_debit_cnt);
        	sprintf(pte_bch01_mp.total_debit_cnt, "%04d", cnt+1);
            amount = strtod (pte_bch01_mp.total_debit_amt, 0) / 100;
            amount = amount  + camount;
            Convert_Amt_To_Auth_Tx_String_Format(amount,temp_total_debit_amt);
            LeftFill_String_With_Character (sizeof temp_total_debit_amt-1, temp_total_debit_amt,'0') ;
            strcpy (pte_bch01_mp.total_debit_amt, temp_total_debit_amt) ; 
         }
      }
      else if((pte_bch10.tx_key==AUTH_REFUND) || (pte_bch10.tx_key==AUTH_OFFLINE_REFUND))
      {
         if(camount > 0)
         {
	         cnt = atoi(pte_bch01_mp.total_debit_refund_cnt);
	         sprintf(pte_bch01_mp.total_debit_refund_cnt, "%04d", cnt+1);
	         amount = strtod (pte_bch01_mp.total_debit_refund_amt, 0) / 100;
             amount = amount  + camount;
             Convert_Amt_To_Auth_Tx_String_Format(amount,temp_total_debit_refund_amt);
             LeftFill_String_With_Character (sizeof temp_total_debit_refund_amt-1, temp_total_debit_refund_amt,'0') ;
             strcpy (pte_bch01_mp.total_debit_refund_amt, temp_total_debit_refund_amt) ;
         }
      }
   }
   else
   {
      if( (pte_bch10.tx_key==AUTH_SALE)         ||
          (pte_bch10.tx_key==AUTH_RELOAD)       ||
          (pte_bch10.tx_key==AUTH_OFFLINE_SALE) ||
          (pte_bch10.tx_key==AUTH_CASH_ADVANCE) ||
          (pte_bch10.tx_key==AUTH_QUASI_CASH) )
      {
         if(camount > 0)
         {
         	cnt = atoi(pte_bch01_mp.total_credit_cnt);
         	sprintf(pte_bch01_mp.total_credit_cnt, "%04d", cnt+1);
            amount = strtod (pte_bch01_mp.total_credit_amt, 0) / 100;
            amount = amount  + camount;
            Convert_Amt_To_Auth_Tx_String_Format(amount,temp_total_credit_amt);
            LeftFill_String_With_Character (sizeof temp_total_credit_amt-1, temp_total_credit_amt,'0') ;
            strcpy (pte_bch01_mp.total_credit_amt, temp_total_credit_amt) ;
         }
      }
      else if((pte_bch10.tx_key==AUTH_REFUND) || (pte_bch10.tx_key==AUTH_OFFLINE_REFUND))
      {
         if(camount > 0)
         {
	         cnt = atoi(pte_bch01_mp.total_credit_refund_cnt);
	         sprintf(pte_bch01_mp.total_credit_refund_cnt, "%04d", cnt+1);
	         amount = strtod (pte_bch01_mp.total_credit_refund_amt, 0) / 100;
             amount = amount  + camount;
             Convert_Amt_To_Auth_Tx_String_Format(amount,temp_total_credit_refund_amt);
             LeftFill_String_With_Character (sizeof temp_total_credit_refund_amt-1, temp_total_credit_refund_amt,'0') ;
             strcpy (pte_bch01_mp.total_credit_refund_amt, temp_total_credit_refund_amt) ;
         }
      }
   }


   if((SQLCODE = db_update_bch01_mp ((pBCH01_MP)&pte_bch01_mp, ErrorMsg)) != PTEMSG_OK)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_bch10_mp_settle,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL INSERT INTO bch10
      ( device_id, batch_nbr, retrieval_ref_num, merchant_id, processing_code, tran_amount, response_code,
        auth_number, tran_date, tran_time, transaction_id, message_type, card_nbr, invoice_nbr,
        settle_file_prefix, product_code, odometer,sys_trace_audit_num, tx_key,bin_type, type_of_data,
        down_payment, period, interest_rate, total_interest, redemption_amount,
        vehicle_number, pos_entry_mode,profile,nbr_of_prod_codes , product1_code ,product1_quantity,
        product1_amount, product2_code, product2_quantity, product2_amount, product3_code, product3_quantity,
        product3_amount, product4_code, product4_quantity, product4_amount, product5_code, product5_quantity,
        product5_amount, product6_code, product6_quantity, product6_amount, product7_code, product7_quantity,
        product7_amount, product8_code, product8_quantity, product8_amount, product9_code, product9_quantity,
        product9_amount, product10_code, product10_quantity, product10_amount, product11_code, product11_quantity,
        product11_amount, product12_code, product12_quantity, product12_amount, product13_code, product13_quantity,
        product13_amount, product14_code, product14_quantity, product14_amount, product15_code, product15_quantity,          
        product15_amount, product16_code, product16_quantity, product16_amount, product17_code, product17_quantity,
        product17_amount, product18_code, product18_quantity, product18_amount, product19_code, product19_quantity,
        product19_amount, product20_code, product20_quantity, product20_amount, aportionment_flag, exp_date, 
        open_date, open_time, cash_bonus,transmission_timestamp, mcard_banknet,ticket_nbr, def_gross_amt, term
                           
      )
   VALUES(:pte_bch10.device_id, :pte_bch10.batch_nbr, :pte_bch10.retrieval_ref_num,
        :pte_bch10.merchant_id, :pte_bch10.processing_code, :pte_bch10.tran_amount,    
        :pte_bch10.response_code, :pte_bch10.auth_number, :pte_bch10.tran_date,
        :pte_bch10.tran_time, :pte_bch10.transaction_id, :pte_bch10.message_type,
        :pte_bch10.card_nbr, :pte_bch10.invoice_nbr,
        :pte_bch10.settle_file_prefix, :pte_bch10.product_code, :pte_bch10.odometer,
        :pte_bch10.sys_trace_audit_num,:pte_bch10.tx_key,:pte_bch10.bin_type, :pte_bch10.type_of_data, 
        :pte_bch10.down_payment, :pte_bch10.period, :pte_bch10.interest_rate, :pte_bch10.total_interest, 
        :pte_bch10.redemption_amount, 
        :pte_bch10.vehicle_number, :pte_bch10.pos_entry_mode, :pte_bch10.profile, :pte_bch10.nbr_of_prod_codes,          
        :pte_bch10.product1_code, :pte_bch10.product1_quantity, :pte_bch10.product1_amount, :pte_bch10.product2_code,             
        :pte_bch10.product2_quantity, :pte_bch10.product2_amount, :pte_bch10.product3_code, :pte_bch10.product3_quantity,            
        :pte_bch10.product3_amount, :pte_bch10.product4_code, :pte_bch10.product4_quantity, :pte_bch10.product4_amount,                  
        :pte_bch10.product5_code, :pte_bch10.product5_quantity, :pte_bch10.product5_amount, :pte_bch10.product6_code,             
        :pte_bch10.product6_quantity, :pte_bch10.product6_amount, :pte_bch10.product7_code, :pte_bch10.product7_quantity,          
        :pte_bch10.product7_amount, :pte_bch10.product8_code, :pte_bch10.product8_quantity, :pte_bch10.product8_amount,
        :pte_bch10.product9_code, :pte_bch10.product9_quantity, :pte_bch10.product9_amount, :pte_bch10.product10_code,
        :pte_bch10.product10_quantity, :pte_bch10.product10_amount, :pte_bch10.product11_code, :pte_bch10.product11_quantity, 
        :pte_bch10.product11_amount, :pte_bch10.product12_code, :pte_bch10.product12_quantity, :pte_bch10.product12_amount,
        :pte_bch10.product13_code, :pte_bch10. product13_quantity, :pte_bch10.product13_amount,:pte_bch10.product14_code, 
        :pte_bch10.product14_quantity, :pte_bch10.product14_amount, :pte_bch10.product15_code, :pte_bch10.product15_quantity,
        :pte_bch10.product15_amount, :pte_bch10.product16_code, :pte_bch10.product16_quantity, :pte_bch10.product16_amount,    
        :pte_bch10.product17_code, :pte_bch10.product17_quantity, :pte_bch10.product17_amount, :pte_bch10.product18_code,
        :pte_bch10.product18_quantity, :pte_bch10.product18_amount, :pte_bch10.product19_code, :pte_bch10.product19_quantity,
        :pte_bch10.product19_amount, :pte_bch10.product20_code, :pte_bch10.product20_quantity, :pte_bch10.product20_amount,
        :pte_bch10.aportionment_flag, :pte_bch10.exp_date, :pte_bch10.open_date, :pte_bch10.open_time, :pte_bch10.cash_bonus,
		:pte_bch10.transmission_timestamp,:pte_bch10.mcard_banknet,:pte_bch10.ticket_nbr, :pte_bch10.def_gross_amt, :pte_bch10.term
        
      );
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_insert_bch10_mp_settle_I , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_bch10_mp_settle,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/



/*************************************************************************************/
BYTE db_insert_bch10( pBCH10 bch10_ptr, pCHAR ErrorMsg)
{
   EXEC SQL BEGIN DECLARE SECTION;
   INT  retval = 0;
   char date[9]= {0};
   char yyyymmdd[25]={0};
   EXEC SQL END DECLARE SECTION;
   
   bch10_to_db( bch10_ptr );
   
   if (strlen(bch10_ptr->tran_date) < 8 || (validate_date_yyyymmdd(bch10_ptr->tran_date) == false) )
   {
     	format_date(yyyymmdd);
      	strncpy(bch10_ptr->tran_date, yyyymmdd, sizeof(bch10_ptr->tran_date)-1);
      	devds_log_message(2,2,"Tran_date was NULL in BCH10","db_insert_bch10");
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO bch10
      ( device_id, batch_nbr, retrieval_ref_num, merchant_id, processing_code, tran_amount, response_code,
        auth_number, tran_date, tran_time, transaction_id, message_type, card_nbr, invoice_nbr,
        settle_file_prefix, product_code, odometer,sys_trace_audit_num, tx_key,bin_type, type_of_data,
        down_payment, period, interest_rate, total_interest, redemption_amount,
        vehicle_number, pos_entry_mode,profile,nbr_of_prod_codes , product1_code ,product1_quantity,
        product1_amount, product2_code, product2_quantity, product2_amount, product3_code, product3_quantity,
        product3_amount, product4_code, product4_quantity, product4_amount, product5_code, product5_quantity,
        product5_amount, product6_code, product6_quantity, product6_amount, product7_code, product7_quantity,
        product7_amount, product8_code, product8_quantity, product8_amount, product9_code, product9_quantity,
        product9_amount, product10_code, product10_quantity, product10_amount, product11_code, product11_quantity,
        product11_amount, product12_code, product12_quantity, product12_amount, product13_code, product13_quantity,
        product13_amount, product14_code, product14_quantity, product14_amount, product15_code, product15_quantity,          
        product15_amount, product16_code, product16_quantity, product16_amount, product17_code, product17_quantity,
        product17_amount, product18_code, product18_quantity, product18_amount, product19_code, product19_quantity,
        product19_amount, product20_code, product20_quantity, product20_amount, aportionment_flag, exp_date, 
        open_date, open_time, cash_bonus, ticket_nbr, def_gross_amt, term
                           
      )
   VALUES(:pte_bch10.device_id, :pte_bch10.batch_nbr, :pte_bch10.retrieval_ref_num,
        :pte_bch10.merchant_id, :pte_bch10.processing_code, :pte_bch10.tran_amount,    
        :pte_bch10.response_code, :pte_bch10.auth_number, :pte_bch10.tran_date,
        :pte_bch10.tran_time, :pte_bch10.transaction_id, :pte_bch10.message_type,
        :pte_bch10.card_nbr, :pte_bch10.invoice_nbr,
        :pte_bch10.settle_file_prefix, :pte_bch10.product_code, :pte_bch10.odometer,
        :pte_bch10.sys_trace_audit_num,:pte_bch10.tx_key,:pte_bch10.bin_type, :pte_bch10.type_of_data, 
        :pte_bch10.down_payment, :pte_bch10.period, :pte_bch10.interest_rate, :pte_bch10.total_interest, 
        :pte_bch10.redemption_amount, 
        :pte_bch10.vehicle_number, :pte_bch10.pos_entry_mode, :pte_bch10.profile, :pte_bch10.nbr_of_prod_codes,          
        :pte_bch10.product1_code, :pte_bch10.product1_quantity, :pte_bch10.product1_amount, :pte_bch10.product2_code,             
        :pte_bch10.product2_quantity, :pte_bch10.product2_amount, :pte_bch10.product3_code, :pte_bch10.product3_quantity,            
        :pte_bch10.product3_amount, :pte_bch10.product4_code, :pte_bch10.product4_quantity, :pte_bch10.product4_amount,                  
        :pte_bch10.product5_code, :pte_bch10.product5_quantity, :pte_bch10.product5_amount, :pte_bch10.product6_code,             
        :pte_bch10.product6_quantity, :pte_bch10.product6_amount, :pte_bch10.product7_code, :pte_bch10.product7_quantity,          
        :pte_bch10.product7_amount, :pte_bch10.product8_code, :pte_bch10.product8_quantity, :pte_bch10.product8_amount,
        :pte_bch10.product9_code, :pte_bch10.product9_quantity, :pte_bch10.product9_amount, :pte_bch10.product10_code,
        :pte_bch10.product10_quantity, :pte_bch10.product10_amount, :pte_bch10.product11_code, :pte_bch10.product11_quantity, 
        :pte_bch10.product11_amount, :pte_bch10.product12_code, :pte_bch10.product12_quantity, :pte_bch10.product12_amount,
        :pte_bch10.product13_code, :pte_bch10. product13_quantity, :pte_bch10.product13_amount,:pte_bch10.product14_code, 
        :pte_bch10.product14_quantity, :pte_bch10.product14_amount, :pte_bch10.product15_code, :pte_bch10.product15_quantity,
        :pte_bch10.product15_amount, :pte_bch10.product16_code, :pte_bch10.product16_quantity, :pte_bch10.product16_amount,    
        :pte_bch10.product17_code, :pte_bch10.product17_quantity, :pte_bch10.product17_amount, :pte_bch10.product18_code,
        :pte_bch10.product18_quantity, :pte_bch10.product18_amount, :pte_bch10.product19_code, :pte_bch10.product19_quantity,
        :pte_bch10.product19_amount, :pte_bch10.product20_code, :pte_bch10.product20_quantity, :pte_bch10.product20_amount,
        :pte_bch10.aportionment_flag, :pte_bch10.exp_date, :pte_bch10.open_date, :pte_bch10.open_time, :pte_bch10.cash_bonus,
		:pte_bch10.ticket_nbr, :pte_bch10.def_gross_amt, :pte_bch10.term
        
      );
      if ( db_error_statics_flag == true )
      {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_insert_bch10 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
     }

   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_bch10,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_bch01_update_dcf01( pBCH01 bch01_ptr, pCHAR ErrorMsg)
{
   INT  retval;

   bch01_to_db( bch01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO bch01
      ( device_id, batch_nbr, merchant_id,total_credit_cnt,total_credit_amt, total_credit_refund_cnt, total_credit_refund_amt,
        total_debit_cnt, total_debit_amt, total_debit_refund_cnt, total_debit_refund_amt,
        total_void_credit_cnt,total_void_credit_amt, total_void_credit_refund_cnt,
        total_void_credit_refund_amt, open_date, open_time,
        release_date, release_time, batch_status,visa_merchant_id
      )
   VALUES(:pte_bch01.device_id, :pte_bch01.batch_nbr,
        :pte_bch01.merchant_id, :pte_bch01.total_credit_cnt, :pte_bch01.total_credit_amt,    
        :pte_bch01.total_credit_refund_cnt, :pte_bch01.total_credit_refund_amt, :pte_bch01.total_debit_cnt,
        :pte_bch01.total_debit_amt, :pte_bch01.total_debit_refund_cnt, :pte_bch01.total_debit_refund_amt,
        :pte_bch01.total_void_credit_cnt, :pte_bch01.total_void_credit_amt, 
        :pte_bch01.total_void_credit_refund_cnt, :pte_bch01.total_void_credit_refund_amt,
        :pte_bch01.open_date, :pte_bch01.open_time, :pte_bch01.release_date,:pte_bch01.release_time,
        :pte_bch01.batch_status, :pte_bch01.visa_merchant_id
      );
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_insert_bch01_update_dcf01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_bch01_update_dcf01,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_dcf01
      FROM   DCF01
      WHERE  device_id   = :pte_bch01.device_id 	AND 
      		 merchant_id = :pte_bch01.merchant_id	AND
      		 rownum      = 1
      For Update NOWAIT;
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : DCF01 ,Fun_Name : db_insert_bch01_update_dcf01_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
 		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_bch01_update_dcf01,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE dcf01
   SET batch_nbr   = :pte_bch01.batch_nbr                 
   WHERE device_id = :pte_bch01.device_id  AND merchant_id = :pte_bch01.merchant_id;
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : DCF01 ,Fun_Name : db_insert_bch01_update_dcf01_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_bch01_update_dcf01,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/

/*************************************************************************************/
BYTE db_insert_bch01_mp_update_dcf01( pBCH01_MP bch01_mp_ptr, pCHAR ErrorMsg)
{
   INT  retval;

   bch01_mp_to_db( bch01_mp_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO bch01_mp
      ( device_id, batch_nbr, merchant_id,total_credit_cnt,total_credit_amt, total_credit_refund_cnt, total_credit_refund_amt,
        total_debit_cnt, total_debit_amt, total_debit_refund_cnt, total_debit_refund_amt,
        total_void_credit_cnt,total_void_credit_amt, total_void_credit_refund_cnt,
        total_void_credit_refund_amt, open_date, open_time,
        release_date, release_time, batch_status,visa_merchant_id
      )
   VALUES(:pte_bch01_mp.device_id, :pte_bch01_mp.batch_nbr,
        :pte_bch01_mp.merchant_id, :pte_bch01_mp.total_credit_cnt, :pte_bch01_mp.total_credit_amt,    
        :pte_bch01_mp.total_credit_refund_cnt, :pte_bch01_mp.total_credit_refund_amt, :pte_bch01_mp.total_debit_cnt,
        :pte_bch01_mp.total_debit_amt, :pte_bch01_mp.total_debit_refund_cnt, :pte_bch01_mp.total_debit_refund_amt,
        :pte_bch01_mp.total_void_credit_cnt, :pte_bch01_mp.total_void_credit_amt, 
        :pte_bch01_mp.total_void_credit_refund_cnt, :pte_bch01_mp.total_void_credit_refund_amt,
        :pte_bch01_mp.open_date, :pte_bch01_mp.open_time, :pte_bch01_mp.release_date,:pte_bch01_mp.release_time,
        :pte_bch01_mp.batch_status, :pte_bch01_mp.visa_merchant_id
      );
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01_MP ,Fun_Name : db_insert_bch01_mp_update_dcf01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_bch01_mp_update_dcf01,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_dcf01
      FROM   DCF01
      WHERE  device_id 	 = :pte_bch01_mp.device_id 		AND 
      		 merchant_id = :pte_bch01_mp.merchant_id	AND
      		 rownum      = 1
      For Update NOWAIT;
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : DCF01 ,Fun_Name : db_insert_bch01_mp_update_dcf01_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_bch01_mp_update_dcf01,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL UPDATE dcf01
   SET batch_nbr   = :pte_bch01_mp.batch_nbr                 
   WHERE device_id = :pte_bch01_mp.device_id AND merchant_id = :pte_bch01_mp.merchant_id;
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : DCF01 ,Fun_Name : db_insert_bch01_mp_update_dcf01_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_bch01_mp_update_dcf01,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   return PTEMSG_OK;
}

/*************************************************************************************/


/*************************************************************************************/
BYTE db_insert_bch01( pBCH01 bch01_ptr, pCHAR ErrorMsg)
{
   INT  retval;

   bch01_to_db( bch01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO bch01
      ( device_id, batch_nbr, merchant_id,total_credit_cnt,total_credit_amt, total_credit_refund_cnt, total_credit_refund_amt,
        total_debit_cnt, total_debit_amt, total_debit_refund_cnt, total_debit_refund_amt,
        total_void_credit_cnt,total_void_credit_amt, total_void_credit_refund_cnt,
        total_void_credit_refund_amt, open_date, open_time,
        release_date, release_time, batch_status,visa_merchant_id
      )
   VALUES(:pte_bch01.device_id, :pte_bch01.batch_nbr,
        :pte_bch01.merchant_id, :pte_bch01.total_credit_cnt, :pte_bch01.total_credit_amt,    
        :pte_bch01.total_credit_refund_cnt, :pte_bch01.total_credit_refund_amt, :pte_bch01.total_debit_cnt,
        :pte_bch01.total_debit_amt, :pte_bch01.total_debit_refund_cnt, :pte_bch01.total_debit_refund_amt,
        :pte_bch01.total_void_credit_cnt, :pte_bch01.total_void_credit_amt, 
        :pte_bch01.total_void_credit_refund_cnt, :pte_bch01.total_void_credit_refund_amt,
        :pte_bch01.open_date, :pte_bch01.open_time, :pte_bch01.release_date,:pte_bch01.release_time,
        :pte_bch01.batch_status, :pte_bch01.visa_merchant_id
      );
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_insert_bch01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_bch01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}



/*************************************************************************************/

/*************************************************************************************/
BYTE db_insert_bch01_mp( pBCH01_MP bch01_mp_ptr, pCHAR ErrorMsg)
{
   INT  retval;

   bch01_mp_to_db( bch01_mp_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO bch01_mp
      ( device_id, batch_nbr, merchant_id,total_credit_cnt,total_credit_amt, total_credit_refund_cnt, total_credit_refund_amt,
        total_debit_cnt, total_debit_amt, total_debit_refund_cnt, total_debit_refund_amt,
        total_void_credit_cnt,total_void_credit_amt, total_void_credit_refund_cnt,
        total_void_credit_refund_amt, open_date, open_time,
        release_date, release_time, batch_status,visa_merchant_id
      )
   VALUES(:pte_bch01_mp.device_id, :pte_bch01_mp.batch_nbr,
        :pte_bch01_mp.merchant_id, :pte_bch01_mp.total_credit_cnt, :pte_bch01_mp.total_credit_amt,    
        :pte_bch01_mp.total_credit_refund_cnt, :pte_bch01_mp.total_credit_refund_amt, :pte_bch01_mp.total_debit_cnt,
        :pte_bch01_mp.total_debit_amt, :pte_bch01_mp.total_debit_refund_cnt, :pte_bch01_mp.total_debit_refund_amt,
        :pte_bch01_mp.total_void_credit_cnt, :pte_bch01_mp.total_void_credit_amt, 
        :pte_bch01_mp.total_void_credit_refund_cnt, :pte_bch01_mp.total_void_credit_refund_amt,
        :pte_bch01_mp.open_date, :pte_bch01_mp.open_time, :pte_bch01_mp.release_date,:pte_bch01_mp.release_time,
        :pte_bch01_mp.batch_status, :pte_bch01_mp.visa_merchant_id
      );
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01_MP ,Fun_Name : db_insert_bch01_mp , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( SQLCODE != 0 )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_bch01_mp,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}



/*************************************************************************************/


/*************************************************************************************/
BYTE db_insert_dcf01( pDCF01 dcf01_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   dcf01_to_db( dcf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO dcf01
      ( device_id, short_name, phone, industry_code, category_code,
        contact, device_type, date_added, current_bus_date,
        dept_nbr, organization_id, merchant_id, aba_nbr, 
        status, totals_ind, statistics_ind, valid_transactions,
        draft_capture_type, amex_charge_desc, diners_charge_desc, additional_pos_information, batch_nbr,
        rental_program, nsp_process, pin_type, kc,
        encr_type, pad_char, keyxchange_cnt, txn_cnt,
        cwk, kek, retired_cwk, icv,pin_block_format,encryption_method,pin_key,communication_key,
        auto_init_activation, auto_init_time, auto_init_ref_number, auto_program_load_activation,
        auto_program_load_time, auto_program_load_ref_number, auto_icepac_activation
      )
   VALUES
      ( :pte_dcf01.device_id, :pte_dcf01.short_name, :pte_dcf01.phone, :pte_dcf01.industry_code, :pte_dcf01.category_code,
        :pte_dcf01.contact, :pte_dcf01.device_type, :pte_dcf01.date_added, :pte_dcf01.current_bus_date,
        :pte_dcf01.dept_nbr, :pte_dcf01.organization_id, :pte_dcf01.merchant_id, :pte_dcf01.aba_nbr, 
        :pte_dcf01.status, :pte_dcf01.totals_ind, :pte_dcf01.statistics_ind, :pte_dcf01.valid_transactions,
        :pte_dcf01.draft_capture_type, :pte_dcf01.amex_charge_desc, :pte_dcf01.diners_charge_desc, :pte_dcf01.additional_pos_information, 
        :pte_dcf01.batch_nbr,
        :pte_dcf01.rental_program, :pte_dcf01.nsp_process, :pte_dcf01.pin_type, :pte_dcf01.kc,
        :pte_dcf01.encr_type, :pte_dcf01.pad_char, :pte_dcf01.keyxchange_cnt, :pte_dcf01.txn_cnt,
        :pte_dcf01.cwk, :pte_dcf01.kek, :pte_dcf01.retired_cwk, :pte_dcf01.icv, :pte_dcf01.pin_block_format,
        :pte_dcf01.encryption_method, :pte_dcf01.pin_key, :pte_dcf01.communication_key,
        :pte_dcf01.auto_init_activation, :pte_dcf01.auto_init_time, :pte_dcf01.auto_init_ref_number,
        :pte_dcf01.auto_program_load_activation, :pte_dcf01.auto_program_load_time,
        :pte_dcf01.auto_program_load_ref_number, :pte_dcf01.auto_icepac_activation
      );
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : DCF01 ,Fun_Name : db_insert_dcf01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_dcf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   return PTEMSG_OK;
}




/*************************************************************************************/
/*************************************************************************************/
BYTE db_insert_mgf01( pMGF01 mgf01_ptr, pCHAR ErrorMsg )
{
   INT  retval;

   mgf01_to_db( mgf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL INSERT INTO mgf01
     ( 
		merchant_group_id, 			
		effective_date,	
		
		merchgrp_Amount_limit_1,			
		merchgrepint_nbr_of_months_1,	
		merchgrepint_INT_rate_1,	
		merchgrepint_MSF_rate_1,	
		merchgrepint_nbr_of_months_2,	
		merchgrepint_INT_rate_2,	
		merchgrepint_MSF_rate_2,	
		merchgrepint_nbr_of_months_3,	
		merchgrepint_INT_rate_3,	
		merchgrepint_MSF_rate_3,	
		merchgrepint_nbr_of_months_4,	
		merchgrepint_INT_rate_4,	
		merchgrepint_MSF_rate_4,	
		merchgrepint_nbr_of_months_5,	
		merchgrepint_INT_rate_5,	
		merchgrepint_MSF_rate_5,	
		merchgrepint_nbr_of_months_6,	
		merchgrepint_INT_rate_6,	
		merchgrepint_MSF_rate_6,	
		merchgrepint_nbr_of_months_7,	
		merchgrepint_INT_rate_7,	
		merchgrepint_MSF_rate_7,	
		merchgrepint_nbr_of_months_8,	
		merchgrepint_INT_rate_8,	
		merchgrepint_MSF_rate_8,	
		merchgrepint_nbr_of_months_9,
		merchgrepint_INT_rate_9,	
		merchgrepint_MSF_rate_9,	
		merchgrepint_nbr_of_months_10, 	
		merchgrepint_INT_rate_10,	
		merchgrepint_MSF_rate_10,	
		merchgrepint_nbr_of_months_10A, 	
		merchgrepint_INT_rate_10A,	
		merchgrepint_MSF_rate_10A,	
		merchgrepint_nbr_of_months_10B, 	
		merchgrepint_INT_rate_10B,	
		merchgrepint_MSF_rate_10B,	
		
		merchgrp_Amount_limit_2,			
		merchgrepint_nbr_of_months_11, 	
		merchgrepint_INT_rate_11,	
		merchgrepint_MSF_rate_11,	
		merchgrepint_nbr_of_months_12, 	
		merchgrepint_INT_rate_12,	
		merchgrepint_MSF_rate_12,	
		merchgrepint_nbr_of_months_13, 	
		merchgrepint_INT_rate_13,	
		merchgrepint_MSF_rate_13,	
		merchgrepint_nbr_of_months_14, 	
		merchgrepint_INT_rate_14,	
		merchgrepint_MSF_rate_14,	
		merchgrepint_nbr_of_months_15, 	
		merchgrepint_INT_rate_15,	
		merchgrepint_MSF_rate_15,	
		merchgrepint_nbr_of_months_16, 	
		merchgrepint_INT_rate_16,	
		merchgrepint_MSF_rate_16,	
		merchgrepint_nbr_of_months_17, 	
		merchgrepint_INT_rate_17,	
		merchgrepint_MSF_rate_17,	
		merchgrepint_nbr_of_months_18, 	
		merchgrepint_INT_rate_18,	
		merchgrepint_MSF_rate_18,	
		merchgrepint_nbr_of_months_19, 	
		merchgrepint_INT_rate_19,	
		merchgrepint_MSF_rate_19,	
		merchgrepint_nbr_of_months_20, 	
		merchgrepint_INT_rate_20,	
		merchgrepint_MSF_rate_20,	
		merchgrepint_nbr_of_months_20A, 	
		merchgrepint_INT_rate_20A,	
		merchgrepint_MSF_rate_20A,	
		merchgrepint_nbr_of_months_20B, 	
		merchgrepint_INT_rate_20B,	
		merchgrepint_MSF_rate_20B,	
		
		merchgrp_Amount_limit_3,			
		merchgrepint_nbr_of_months_21,	
		merchgrepint_INT_rate_21,	
		merchgrepint_MSF_rate_21,	
		merchgrepint_nbr_of_months_22, 	
		merchgrepint_INT_rate_22,	
		merchgrepint_MSF_rate_22,	
		merchgrepint_nbr_of_months_23, 	
		merchgrepint_INT_rate_23,	
		merchgrepint_MSF_rate_23,	
		merchgrepint_nbr_of_months_24, 	
		merchgrepint_INT_rate_24,	
		merchgrepint_MSF_rate_24,	
		merchgrepint_nbr_of_months_25, 	
		merchgrepint_INT_rate_25,	
		merchgrepint_MSF_rate_25,	
		merchgrepint_nbr_of_months_26, 	
		merchgrepint_INT_rate_26,	
		merchgrepint_MSF_rate_26,	
		merchgrepint_nbr_of_months_27, 	
		merchgrepint_INT_rate_27,	
		merchgrepint_MSF_rate_27,	
		merchgrepint_nbr_of_months_28, 	
		merchgrepint_INT_rate_28,	
		merchgrepint_MSF_rate_28,	
		merchgrepint_nbr_of_months_29, 	
		merchgrepint_INT_rate_29,	
		merchgrepint_MSF_rate_29,	
		merchgrepint_nbr_of_months_30, 	
		merchgrepint_INT_rate_30,	
		merchgrepint_MSF_rate_30,
		merchgrepint_nbr_of_months_30A, 	
		merchgrepint_INT_rate_30A,	
		merchgrepint_MSF_rate_30A,	
		merchgrepint_nbr_of_months_30B, 	
		merchgrepint_INT_rate_30B,	
		merchgrepint_MSF_rate_30B,	
		
		merchgrp_Amount_limit_4,			
		merchgrepint_nbr_of_months_31, 	
		merchgrepint_INT_rate_31,	
		merchgrepint_MSF_rate_31,	
		merchgrepint_nbr_of_months_32, 	
		merchgrepint_INT_rate_32,	
		merchgrepint_MSF_rate_32,	
		merchgrepint_nbr_of_months_33, 	
		merchgrepint_INT_rate_33,	
		merchgrepint_MSF_rate_33,	
		merchgrepint_nbr_of_months_34, 	
		merchgrepint_INT_rate_34,	
		merchgrepint_MSF_rate_34,	
		merchgrepint_nbr_of_months_35, 	
		merchgrepint_INT_rate_35,	
		merchgrepint_MSF_rate_35,	
		merchgrepint_nbr_of_months_36, 	
		merchgrepint_INT_rate_36,	
		merchgrepint_MSF_rate_36,	
		merchgrepint_nbr_of_months_37, 	
		merchgrepint_INT_rate_37,	
		merchgrepint_MSF_rate_37,	
		merchgrepint_nbr_of_months_38, 	
		merchgrepint_INT_rate_38,	
		merchgrepint_MSF_rate_38,	
		merchgrepint_nbr_of_months_39, 	
		merchgrepint_INT_rate_39,	
		merchgrepint_MSF_rate_39,	
		merchgrepint_nbr_of_months_40, 	
		merchgrepint_INT_rate_40,	
		merchgrepint_MSF_rate_40,
		merchgrepint_nbr_of_months_40A, 	
		merchgrepint_INT_rate_40A,	
		merchgrepint_MSF_rate_40A,	
		merchgrepint_nbr_of_months_40B, 	
		merchgrepint_INT_rate_40B,	
		merchgrepint_MSF_rate_40B	
     )               
   VALUES(  :pte_mgf01.merchant_group_id, 			
			:pte_mgf01.effective_date,	
			
			:pte_mgf01.merchgrp_Amount_limit_1,			
			:pte_mgf01.merchgrepint_nbr_of_months_1,	
			:pte_mgf01.merchgrepint_INT_rate_1,	
			:pte_mgf01.merchgrepint_MSF_rate_1,	
			:pte_mgf01.merchgrepint_nbr_of_months_2,	
			:pte_mgf01.merchgrepint_INT_rate_2,	
			:pte_mgf01.merchgrepint_MSF_rate_2,	
			:pte_mgf01.merchgrepint_nbr_of_months_3,	
			:pte_mgf01.merchgrepint_INT_rate_3,	
			:pte_mgf01.merchgrepint_MSF_rate_3,	
			:pte_mgf01.merchgrepint_nbr_of_months_4,	
			:pte_mgf01.merchgrepint_INT_rate_4,	
			:pte_mgf01.merchgrepint_MSF_rate_4,	
			:pte_mgf01.merchgrepint_nbr_of_months_5,	
			:pte_mgf01.merchgrepint_INT_rate_5,	
			:pte_mgf01.merchgrepint_MSF_rate_5,	
			:pte_mgf01.merchgrepint_nbr_of_months_6,	
			:pte_mgf01.merchgrepint_INT_rate_6,	
			:pte_mgf01.merchgrepint_MSF_rate_6,	
			:pte_mgf01.merchgrepint_nbr_of_months_7,	
			:pte_mgf01.merchgrepint_INT_rate_7,	
			:pte_mgf01.merchgrepint_MSF_rate_7,	
			:pte_mgf01.merchgrepint_nbr_of_months_8,	
			:pte_mgf01.merchgrepint_INT_rate_8,	
			:pte_mgf01.merchgrepint_MSF_rate_8,	
			:pte_mgf01.merchgrepint_nbr_of_months_9,
			:pte_mgf01.merchgrepint_INT_rate_9,	
			:pte_mgf01.merchgrepint_MSF_rate_9,	
			:pte_mgf01.merchgrepint_nbr_of_months_10, 	
			:pte_mgf01.merchgrepint_INT_rate_10,	
			:pte_mgf01.merchgrepint_MSF_rate_10,
			:pte_mgf01.merchgrepint_nbr_of_months_10A, 	
			:pte_mgf01.merchgrepint_INT_rate_10A,	
			:pte_mgf01.merchgrepint_MSF_rate_10A,	
			:pte_mgf01.merchgrepint_nbr_of_months_10B, 	
			:pte_mgf01.merchgrepint_INT_rate_10B,	
			:pte_mgf01.merchgrepint_MSF_rate_10B,	
			
			:pte_mgf01.merchgrp_Amount_limit_2,			
			:pte_mgf01.merchgrepint_nbr_of_months_11, 	
			:pte_mgf01.merchgrepint_INT_rate_11,	
			:pte_mgf01.merchgrepint_MSF_rate_11,	
			:pte_mgf01.merchgrepint_nbr_of_months_12, 	
			:pte_mgf01.merchgrepint_INT_rate_12,	
			:pte_mgf01.merchgrepint_MSF_rate_12,	
			:pte_mgf01.merchgrepint_nbr_of_months_13, 	
			:pte_mgf01.merchgrepint_INT_rate_13,	
			:pte_mgf01.merchgrepint_MSF_rate_13,	
			:pte_mgf01.merchgrepint_nbr_of_months_14, 	
			:pte_mgf01.merchgrepint_INT_rate_14,	
			:pte_mgf01.merchgrepint_MSF_rate_14,	
			:pte_mgf01.merchgrepint_nbr_of_months_15, 	
			:pte_mgf01.merchgrepint_INT_rate_15,	
			:pte_mgf01.merchgrepint_MSF_rate_15,	
			:pte_mgf01.merchgrepint_nbr_of_months_16, 	
			:pte_mgf01.merchgrepint_INT_rate_16,	
			:pte_mgf01.merchgrepint_MSF_rate_16,	
			:pte_mgf01.merchgrepint_nbr_of_months_17, 	
			:pte_mgf01.merchgrepint_INT_rate_17,	
			:pte_mgf01.merchgrepint_MSF_rate_17,	
			:pte_mgf01.merchgrepint_nbr_of_months_18, 	
			:pte_mgf01.merchgrepint_INT_rate_18,	
			:pte_mgf01.merchgrepint_MSF_rate_18,	
			:pte_mgf01.merchgrepint_nbr_of_months_19, 	
			:pte_mgf01.merchgrepint_INT_rate_19,	
			:pte_mgf01.merchgrepint_MSF_rate_19,	
			:pte_mgf01.merchgrepint_nbr_of_months_20, 	
			:pte_mgf01.merchgrepint_INT_rate_20,	
			:pte_mgf01.merchgrepint_MSF_rate_20,	
			:pte_mgf01.merchgrepint_nbr_of_months_20A, 	
			:pte_mgf01.merchgrepint_INT_rate_20A,	
			:pte_mgf01.merchgrepint_MSF_rate_20A,
			:pte_mgf01.merchgrepint_nbr_of_months_20B, 	
			:pte_mgf01.merchgrepint_INT_rate_20B,	
			:pte_mgf01.merchgrepint_MSF_rate_20B,
			
			:pte_mgf01.merchgrp_Amount_limit_3,			
			:pte_mgf01.merchgrepint_nbr_of_months_21,	
			:pte_mgf01.merchgrepint_INT_rate_21,	
			:pte_mgf01.merchgrepint_MSF_rate_21,	
			:pte_mgf01.merchgrepint_nbr_of_months_22, 	
			:pte_mgf01.merchgrepint_INT_rate_22,	
			:pte_mgf01.merchgrepint_MSF_rate_22,	
			:pte_mgf01.merchgrepint_nbr_of_months_23, 	
			:pte_mgf01.merchgrepint_INT_rate_23,	
			:pte_mgf01.merchgrepint_MSF_rate_23,	
			:pte_mgf01.merchgrepint_nbr_of_months_24, 	
			:pte_mgf01.merchgrepint_INT_rate_24,	
			:pte_mgf01.merchgrepint_MSF_rate_24,	
			:pte_mgf01.merchgrepint_nbr_of_months_25, 	
			:pte_mgf01.merchgrepint_INT_rate_25,	
			:pte_mgf01.merchgrepint_MSF_rate_25,	
			:pte_mgf01.merchgrepint_nbr_of_months_26, 	
			:pte_mgf01.merchgrepint_INT_rate_26,	
			:pte_mgf01.merchgrepint_MSF_rate_26,	
			:pte_mgf01.merchgrepint_nbr_of_months_27, 	
			:pte_mgf01.merchgrepint_INT_rate_27,	
			:pte_mgf01.merchgrepint_MSF_rate_27,	
			:pte_mgf01.merchgrepint_nbr_of_months_28, 	
			:pte_mgf01.merchgrepint_INT_rate_28,	
			:pte_mgf01.merchgrepint_MSF_rate_28,	
			:pte_mgf01.merchgrepint_nbr_of_months_29, 	
			:pte_mgf01.merchgrepint_INT_rate_29,	
			:pte_mgf01.merchgrepint_MSF_rate_29,	
			:pte_mgf01.merchgrepint_nbr_of_months_30, 	
			:pte_mgf01.merchgrepint_INT_rate_30,	
			:pte_mgf01.merchgrepint_MSF_rate_30,
			:pte_mgf01.merchgrepint_nbr_of_months_30A, 	
			:pte_mgf01.merchgrepint_INT_rate_30A,	
			:pte_mgf01.merchgrepint_MSF_rate_30A,	
			:pte_mgf01.merchgrepint_nbr_of_months_30B, 	
			:pte_mgf01.merchgrepint_INT_rate_30B,	
			:pte_mgf01.merchgrepint_MSF_rate_30B,	
			
			:pte_mgf01.merchgrp_Amount_limit_4,			
			:pte_mgf01.merchgrepint_nbr_of_months_31, 	
			:pte_mgf01.merchgrepint_INT_rate_31,	
			:pte_mgf01.merchgrepint_MSF_rate_31,	
			:pte_mgf01.merchgrepint_nbr_of_months_32, 	
			:pte_mgf01.merchgrepint_INT_rate_32,	
			:pte_mgf01.merchgrepint_MSF_rate_32,	
			:pte_mgf01.merchgrepint_nbr_of_months_33, 	
			:pte_mgf01.merchgrepint_INT_rate_33,	
			:pte_mgf01.merchgrepint_MSF_rate_33,	
			:pte_mgf01.merchgrepint_nbr_of_months_34, 	
			:pte_mgf01.merchgrepint_INT_rate_34,	
			:pte_mgf01.merchgrepint_MSF_rate_34,	
			:pte_mgf01.merchgrepint_nbr_of_months_35, 	
			:pte_mgf01.merchgrepint_INT_rate_35,	
			:pte_mgf01.merchgrepint_MSF_rate_35,	
			:pte_mgf01.merchgrepint_nbr_of_months_36, 	
			:pte_mgf01.merchgrepint_INT_rate_36,	
			:pte_mgf01.merchgrepint_MSF_rate_36,	
			:pte_mgf01.merchgrepint_nbr_of_months_37, 	
			:pte_mgf01.merchgrepint_INT_rate_37,	
			:pte_mgf01.merchgrepint_MSF_rate_37,	
			:pte_mgf01.merchgrepint_nbr_of_months_38, 	
			:pte_mgf01.merchgrepint_INT_rate_38,	
			:pte_mgf01.merchgrepint_MSF_rate_38,	
			:pte_mgf01.merchgrepint_nbr_of_months_39, 	
			:pte_mgf01.merchgrepint_INT_rate_39,	
			:pte_mgf01.merchgrepint_MSF_rate_39,	
			:pte_mgf01.merchgrepint_nbr_of_months_40, 	
			:pte_mgf01.merchgrepint_INT_rate_40,	
			:pte_mgf01.merchgrepint_MSF_rate_40,
			:pte_mgf01.merchgrepint_nbr_of_months_40A, 	
			:pte_mgf01.merchgrepint_INT_rate_40A,	
			:pte_mgf01.merchgrepint_MSF_rate_40A,
			:pte_mgf01.merchgrepint_nbr_of_months_40B, 	
			:pte_mgf01.merchgrepint_INT_rate_40B,	
			:pte_mgf01.merchgrepint_MSF_rate_40B
	 	   
      );
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : MGF01 ,Fun_Name : db_insert_mgf01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   if ( SQLCODE != 0 )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_insert_mgf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}
/*************************************************************************************/


/*************************************************************************************/
BYTE db_get_nbf01_count( pCHAR nbfcount, pCHAR ErrorMsg )
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   int NumRowsReturned = 0;
   EXEC SQL END DECLARE SECTION;

   EXEC SQL SELECT COUNT(*) INTO :NumRowsReturned FROM nbf01;
   
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_nbf01_count,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   else
   {
      itoa(NumRowsReturned, nbfcount, 10);
      return PTEMSG_OK;
   }

}

/*************************************************************************************/
/*************************************************************************************/
/*BYTE db_get_nmf01_list(pNMF01_REQUEST key,
					   pNMF01_LIST NMF01List, pCHAR ErrorMsg)
{
	EXEC SQL BEGIN DECLARE SECTION;
		char low_list[10][17];
		char high_list[10][17];
      char date[9];
      char yymmdd[25];
      char res;
		int temp, cardlen, binlen, i;
    EXEC SQL END DECLARE SECTION;

      DLF01 dlf01_rec;


    memset ( NMF01List, 0, sizeof(NMF01_LIST) );
    strncpy( pte_tlf01.terminal_id, key->term_id, sizeof(pte_tlf01.terminal_id) );
    strncpy( pte_tlf01.merchant_id, key->merch_id, sizeof(pte_tlf01.merchant_id) );
    strncpy( pte_tlf01.nfi_name, key->file_name, sizeof(pte_tlf01.nfi_name) );
    strncpy( pte_tlf01.nfi_seq_nbr, key->seq_nbr, sizeof(pte_tlf01.nfi_seq_nbr) );
   ***************
    *copy the values into DLF01 table
        memset( &dlf01_rec, 0, sizeof(DLF01) );
        strcpy( dlf01_rec.primary_key.device_id, key->term_id );
        strcpy( dlf01_rec.merchant_id, key->merch_id );
        strcpy( dlf01_rec.last_downloaded_filename, key->file_name);
        ptetime_get_timestamp ( yymmdd );
        strncpy(date, yymmdd, 4);
        strncat(date, yymmdd + 5, 2);
        strncat(date, yymmdd + 8, 2);
        strcpy( dlf01_rec.last_downloaded_date, date);
     
   ****************
 
   *   EXEC SQL DECLARE master CURSOR FOR
       SELECT * FROM nmf01
	    WHERE  seq_nbr > :pte_tlf01.nfi_seq_nbr
	    AND  ((:pte_tlf01.nfi_name = NULL AND action_code = 'A')	
			  OR (:pte_tlf01.nfi_name != NULL AND file_name = :pte_tlf01.nfi_name));
	
	EXEC SQL WHENEVER SQLERROR goto sql_error;

    EXEC SQL SELECT g.low1, g.high1,
		  g.low2, g.high2,
		  g.low3, g.high3,
		  g.low4, g.high4,
		  g.low5, g.high5,
		  g.low6, g.high6,
		  g.low7, g.high7,
		  g.low8, g.high8,
		  g.low9, g.high9,
		  g.low10,g.high10
    INTO  :low_list[0], :high_list[0],
		  :low_list[1], :high_list[1],
		  :low_list[2], :high_list[2],
		  :low_list[3], :high_list[3],
		  :low_list[4], :high_list[4],
		  :low_list[5], :high_list[5],
		  :low_list[6], :high_list[6],
		  :low_list[7], :high_list[7],
		  :low_list[8], :high_list[8],
		  :low_list[9], :high_list[9]
    FROM  mcf01 m, dcf01 d, ngf01 g
    WHERE  d.device_id = :pte_tlf01.terminal_id
       AND  d.merchant_id = :pte_tlf01.merchant_id
	    AND  m.merchant_id = :pte_tlf01.merchant_id
	    AND  m.organization_id = d.organization_id
	    AND  m.negative_group_id = g.negative_group_id;

 
	EXEC SQL WHENEVER SQLERROR goto sql_error;

	EXEC SQL OPEN master;

	temp = 0;
	while (true)
	{
		if (temp == 8) break;
		EXEC SQL FETCH master INTO :db_nmf01;
		if ((SQLCODE != 0) && (SQLCODE != NULL_COLUMN_DATA))
      {
         res = db_insert_dlf01(&dlf01_rec, ErrorMsg);
			break;
      }
		cardlen = 0;
		if (db_nmf01.format_code.arr[0] == '1') cardlen = 13;
		if (db_nmf01.format_code.arr[0] == '2') cardlen = 16;
		if (db_nmf01.format_code.arr[0] == '5') cardlen = db_nmf01.account_info.len;

		if (cardlen == 0) continue;

		for (i = 0; i<10; i++)
		{
			binlen = strlen(low_list[i]);
			if (binlen == 0) break;
			if (binlen > cardlen) continue;
			if ( (strncmp(db_nmf01.account_info.arr, low_list[i], binlen) >= 0) &&
				(strncmp(db_nmf01.account_info.arr, high_list[i], binlen) <= 0) )
			{
				db_to_nmf01(&NMF01List->nmf01_record[temp]);
				itoa(temp + 1, NMF01List->num_returned, 10);
				temp++;
				break;
			}
		}
	}
 
	EXEC SQL CLOSE master;
  
   code to insert most recent rec. into DLF01
   * if(temp < 8)
      {
        res = db_insert_dlf01(dlf01_rec, ErrorMsg);
      }
   
  * ------------------------
	return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_nmf01_list,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
}
*/
/*************************************************************************************/
               /*          Modified by Gabriel     */
/*************************************************************************************/
BYTE db_get_nmf01_list(pNMF01_REQUEST key,
					   pNMF01_LIST NMF01List, pCHAR ErrorMsg)
{
   INT  retval;

	EXEC SQL BEGIN DECLARE SECTION;
		char low_list[10][17];
		char high_list[10][17];
		int temp, cardlen, binlen,i;
      char date_time[15] = "";
    EXEC SQL END DECLARE SECTION;

    memset ( NMF01List, 0, sizeof(NMF01_LIST) );
    strcpy( NMF01List->num_returned,"0");
    strncpy( pte_tlf01.terminal_id, key->term_id, sizeof(pte_tlf01.terminal_id) );
    strncpy( pte_tlf01.merchant_id, key->merch_id, sizeof(pte_tlf01.merchant_id) );
    strncpy( pte_tlf01.nfi_name, key->file_name, sizeof(pte_tlf01.nfi_name) );
    strncpy( pte_tlf01.nfi_seq_nbr, key->seq_nbr, sizeof(pte_tlf01.nfi_seq_nbr) );

    

    if(strcmp(pte_tlf01.nfi_name,"") == 0)
    {
       EXEC SQL DECLARE master1 CURSOR FOR
       SELECT * FROM nmf01
	    WHERE  (seq_nbr > :pte_tlf01.nfi_seq_nbr)
	            AND  (action_code = 'A')	;
    }
    else
    {
       EXEC SQL DECLARE master2 CURSOR FOR
       SELECT * FROM nmf01
	    WHERE  (seq_nbr > :pte_tlf01.nfi_seq_nbr)
	            AND  (file_name = :pte_tlf01.nfi_name)	;
			        
    }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
	   	EXEC SQL WHENEVER SQLERROR CONTINUE;
   /*EXEC SQL WHENEVER SQLERROR goto sql_error;*/
   
   EXEC SQL SELECT g.low1, g.high1,
		  g.low2, g.high2,
		  g.low3, g.high3,
		  g.low4, g.high4,
		  g.low5, g.high5,
		  g.low6, g.high6,
		  g.low7, g.high7,
		  g.low8, g.high8,
		  g.low9, g.high9,
		  g.low10,g.high10
    INTO  :low_list[0], :high_list[0],
		  :low_list[1], :high_list[1],
		  :low_list[2], :high_list[2],
		  :low_list[3], :high_list[3],
		  :low_list[4], :high_list[4],
		  :low_list[5], :high_list[5],
		  :low_list[6], :high_list[6],
		  :low_list[7], :high_list[7],
		  :low_list[8], :high_list[8],
		  :low_list[9], :high_list[9]
    FROM  mcf01 m, dcf01 d, ngf01 g
    WHERE  d.device_id   =  :pte_tlf01.terminal_id
     AND  d.merchant_id =  :pte_tlf01.merchant_id
	  AND  m.merchant_id  =  :pte_tlf01.merchant_id
	  AND  m.organization_id = d.organization_id
	  AND  m.negative_group_id = g.negative_group_id;

     if ( db_error_statics_flag == true )
     {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NMF01 ,Fun_Name : db_get_nmf01_list , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
     }
	   	EXEC SQL WHENEVER SQLERROR CONTINUE;
   /*EXEC SQL WHENEVER SQLERROR goto sql_error;*/

    if(strcmp(pte_tlf01.nfi_name,"") == 0)
   	EXEC SQL OPEN master1;
    else
   	EXEC SQL OPEN master2;

	temp = 0;
	while (true)
	{
		if (temp == 8) break;

   	EXEC SQL WHENEVER SQLERROR CONTINUE;


      if(strcmp(pte_tlf01.nfi_name,"") == 0)
		   EXEC SQL FETCH master1 INTO :db_nmf01;
      else
		   EXEC SQL FETCH master2 INTO :db_nmf01;
		if ((SQLCODE != 0) && (SQLCODE != NULL_COLUMN_DATA) )
      {
			break;
      }
		cardlen = 0;
      if( strcmp(db_nmf01.format_code.arr,"1") == 0)cardlen = 13;
		if (db_nmf01.format_code.arr[0] == '2') cardlen = 16;
		if (db_nmf01.format_code.arr[0] == '5') cardlen = db_nmf01.account_info.len;

		if (cardlen == 0) continue;

		for (i = 0; i<10; i++)  
		{
			binlen = strlen(low_list[i]);
			if (binlen == 0) break;
			if (binlen > cardlen) continue;
			if( (strncmp(db_nmf01.account_info.arr, low_list[i], binlen) >= 0) &&
				(strncmp(db_nmf01.account_info.arr, high_list[i], binlen) <= 0) )
			{
				db_to_nmf01(&NMF01List->nmf01_record[temp]);		
            itoa(temp + 1, NMF01List->num_returned, 10);
            temp++;
				break;
			}
		}
	}
 
   if(strcmp(pte_tlf01.nfi_name,"") == 0)
   	EXEC SQL CLOSE master1;
   else
   	EXEC SQL CLOSE master2;
   
   if (atoi(NMF01List->num_returned) < 8)
   {
   
      memset( &db_dlf01, 0, sizeof( db_dlf01 ) );
      memset(&pte_dlf01, 0, sizeof(pte_dlf01));   
   
      strcpy( pte_dlf01.device_id, key->term_id );
      strcpy( pte_dlf01.merchant_id, key->merch_id );
      strcpy( pte_dlf01.last_downloaded_filename, key->file_name);
      genutil_format_date(date_time);
      strncpy( pte_dlf01.last_downloaded_date, date_time, 8);

      if ( db_error_statics_flag == true )
      {
          start_time = ptetime_get_time();
      }
      
      EXEC SQL SELECT *
      INTO :db_dlf01
      FROM dlf01
      WHERE device_id   = :pte_dcf01.device_id     AND
      	    merchant_id = :pte_dcf01.merchant_id   AND
      	    rownum      = 1;
      
      if ( db_error_statics_flag == true )
      {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : DLF01 ,Fun_Name : db_get_nmf01_list_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }
      if ( SQLCODE == 0 || SQLCODE == NULL_COLUMN_DATA )
      {

 		 if ( db_error_statics_flag == true )
   		 {
      		start_time = ptetime_get_time();
   		 }	
 		 
         EXEC SQL UPDATE dlf01 
         SET device_id                  = :pte_dlf01.device_id,
             merchant_id                = :pte_dlf01.merchant_id,
             last_downloaded_date       = :pte_dlf01.last_downloaded_date,
             last_downloaded_filename   = :pte_dlf01.last_downloaded_filename                  
                    
         WHERE device_id = :pte_dlf01.device_id;
         
         if ( db_error_statics_flag == true )
         {
     	   	end_time = ptetime_get_time();
     	  	duration = end_time - start_time;
    	  	if(duration >= db_error_statics_value)
	      	{
	  		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			  	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : DLF01 ,Fun_Name : db_get_nmf01_list_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			  	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  	}
         }
 
      }
      else
      {
         if ( db_error_statics_flag == true )
   		 {
      		start_time = ptetime_get_time();
   		 }	
   		 
         EXEC SQL INSERT INTO dlf01
           (   device_id,
               merchant_id,
               last_downloaded_date,
               last_downloaded_filename
           )               
         VALUES(  :pte_dlf01.device_id,
               :pte_dlf01.merchant_id,
               :pte_dlf01.last_downloaded_date,
               :pte_dlf01.last_downloaded_filename
               );
         if ( db_error_statics_flag == true )
         {
     	   	end_time = ptetime_get_time();
     	  	duration = end_time - start_time;
    	  	if(duration >= db_error_statics_value)
	      	{
	  		  	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			  	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : DLF01 ,Fun_Name : db_get_nmf01_list_I , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			  	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  	}
         }
           
      }

   }
	return PTEMSG_OK;

/*sql_error:*/
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_nmf01_list,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
}


/*************************************************************************************/
/*    
      Revision History: Modified WHERE clause from 'high >' to 'high >=' 
      Authour         :supriya, 20th,Nov,98.  
 */
/*************************************************************************************/
BYTE db_get_nbf01_gui_list( pNBF01 nbf01_ptr,
                                pNBF01_GUI_LIST Nbf01_List,
                                pCHAR ErrorMsg )
{
   INT  retval;

    EXEC SQL BEGIN DECLARE SECTION;
    char low[17];
    char high[17];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Nbf01_List, 0, sizeof(NBF01_GUI_LIST) );
   strcpy(Nbf01_List->num_returned,"0");
   strncpy( low, nbf01_ptr->primary_key.low, sizeof(low) );
   strncpy( high, nbf01_ptr->primary_key.high, sizeof(high) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DECLARE nbf01_cursor1 CURSOR FOR
      SELECT * from nbf01
      WHERE  (low = :low AND high >= :high) OR (low > :low)
	  ORDER BY low, high;

   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NBF01 ,Fun_Name : db_get_nbf01_gui_list , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   
   EXEC SQL OPEN nbf01_cursor1;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
      memset(&db_nbf01, 0x00, sizeof(db_nbf01));
      
         EXEC SQL FETCH nbf01_cursor1
         INTO :db_nbf01;
     
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA  )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE nbf01_cursor1;
         
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_nbf01_gui_list,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
      }
      db_to_nbf01(&Nbf01_List->nbf01_record[temp]);
      itoa(temp + 1, Nbf01_List->num_returned, 10);
   }

   EXEC SQL CLOSE nbf01_cursor1;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_nbf01_gui_list,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
}

/*************************************************************************************/
/*    
      Revision History: Modified WHERE clause from '>' to '>=' 
      Authour         :supriya, 20th,Nov,98.  
 */
/*************************************************************************************/
BYTE db_get_ngf01_gui_list( pCHAR Primary_Key,
                        pNGF01_GUI_LIST Ngf01List,
                        pCHAR ErrorMsg )
{
   INT  retval;

    EXEC SQL BEGIN DECLARE SECTION;
    char negative_group_id[11];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Ngf01List, 0, sizeof(NGF01_GUI_LIST) );
   strcpy( Ngf01List->num_returned,"0");
   strncpy( negative_group_id, Primary_Key, sizeof(negative_group_id) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE ngf01_cursor CURSOR FOR
      SELECT * from ngf01
      WHERE  negative_group_id >= :negative_group_id;
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NGF01 ,Fun_Name : db_get_ngf01_gui_list , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN ngf01_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
      memset(&db_ngf01, 0x00, sizeof(db_ngf01));
      EXEC SQL FETCH ngf01_cursor
      INTO :db_ngf01;

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA  )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE ngf01_cursor;
   	      
			memset(er_buf,0x00,sizeof(er_buf));
			sprintf(er_buf,"In db_get_ngf01_gui_list,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;

      }
      db_to_ngf01(&Ngf01List->ngf01_record[temp]);
      itoa(temp + 1, Ngf01List->num_returned, 10);
   }

   EXEC SQL CLOSE ngf01_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	sprintf(er_buf,"In db_get_ngf01_gui_list,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
	
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_nbf01_service_list( pNBF01 nbf01_ptr,
                                pNBF01_LIST Nbf01_List,
                                pCHAR ErrorMsg )
{
   INT  retval;

    EXEC SQL BEGIN DECLARE SECTION;
    char low[17];
    char high[17];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Nbf01_List, 0, sizeof(NBF01_LIST) );
   strcpy(Nbf01_List->num_returned,"0");
   strncpy( low, nbf01_ptr->primary_key.low, sizeof(low) );
   strncpy( high, nbf01_ptr->primary_key.high, sizeof(high) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE nbf01_cursor2 CURSOR FOR
      SELECT * from nbf01
      WHERE  (low = :low AND high > :high) OR (low > :low);
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NBF01 ,Fun_Name : db_get_nbf01_service_list , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   
   EXEC SQL OPEN nbf01_cursor2;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < SERVICE_LIST_SIZE; temp++ )
   {
      memset(&db_nbf01, 0x00, sizeof(db_nbf01));
      
         EXEC SQL FETCH nbf01_cursor2
         INTO :db_nbf01;
     
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA  )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE nbf01_cursor2;
         
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_nbf01_service_list,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;

      }
      db_to_nbf01(&Nbf01_List->nbf01_record[temp]);
      itoa(temp + 1, Nbf01_List->num_returned, 10);
   }

   
   EXEC SQL CLOSE nbf01_cursor2;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
  
  	memset(er_buf,0x00,sizeof(er_buf));
	sprintf(er_buf,"In db_get_nbf01_service_list,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
	
}

/*************************************************************************************/
/*************************************************************************************/
/* Function    :  db_get_ngf01_list_by_binrange
   Parameters  :  pNGF01 ngf01_rec: pointer of type NGF01, it has fields low1
                         and high1 populated
                  pNGF01_LIST Ngf01List: pointer of type NGF01_LIST, the result of the 
                        query is written into this structure
                  pCHAR ErrorMsg : Errors from SELECT etc., are logged  
   Return      :  PTEMSG_OK if success else could be any of the Pinnacle system-wide error codes 
   Description :  Return list of negative_group_id's that have the same bin_range 
                     as in ngf01_rec, remember bin_range is an array[10], so compare with
                     each element in the array
   Authour     :  Nov, 17th'98, Supriya.
*/
/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_ngf01_list_by_binrange( pNGF01 ngf01_rec,
                        pNGF01_LIST Ngf01List,
                        pCHAR ErrorMsg )
{
   INT  retval;

    EXEC SQL BEGIN DECLARE SECTION;
    varchar new_negative_group_id [11];
    char low [17];
    char high [17];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Ngf01List, 0, sizeof(NGF01_LIST) );
   strcpy( Ngf01List->num_returned,"0");
   strncpy( low, ngf01_rec->bin_range[0].low, sizeof(low) );
   strncpy( high, ngf01_rec->bin_range[0].high, sizeof(high) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE ngf01_cursor1 CURSOR FOR
      SELECT negative_group_id from ngf01
      WHERE  (low1 = :low AND high1 = :high)
             OR (low2 = :low AND high2 = :high)
             OR (low3 = :low AND high3 = :high)
             OR (low4 = :low AND high4 = :high)
             OR (low5 = :low AND high5 = :high)
             OR (low6 = :low AND high6 = :high)
             OR (low7 = :low AND high7 = :high)
             OR (low8 = :low AND high8 = :high)
             OR (low9 = :low AND high9 = :high)
             OR (low10 = :low AND high10 = :high);
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NGF01 ,Fun_Name : db_get_ngf01_list_by_binrange , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }
   
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN ngf01_cursor1;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE; temp++ )
   {
      memset(&new_negative_group_id, 0x00, sizeof(new_negative_group_id));
      EXEC SQL FETCH ngf01_cursor1
      INTO :new_negative_group_id;

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA  )
      {
	        SQL_CODE = SQLCODE;
	        EXEC SQL CLOSE ngf01_cursor1;
	     	memset(er_buf,0x00,sizeof(er_buf));
			sprintf(er_buf,"In db_get_ngf01_list_by_binrange,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;

      }
      strncpy( Ngf01List->negative_group_id[temp], new_negative_group_id.arr, new_negative_group_id.len );
      itoa(temp + 1, Ngf01List->num_returned, 10);
   }

   EXEC SQL CLOSE ngf01_cursor1;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_ngf01_list_by_binrange,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
}


/*************************************************************************************/
/*************************************************************************************/
/*    
      Revision History: Modified WHERE clause from ' >' to ' >=' 
      Authour         :supriya, 20th,Nov,98.  
 */
/*************************************************************************************/

BYTE db_get_dcf01_gui_list( pCHAR Device_Id,
                        pDCF01_GUI_LIST Dcf01List,
                        pCHAR ErrorMsg )
{
		INT  retval;
	
		EXEC SQL BEGIN DECLARE SECTION;
		char device_id[9];
		varchar db_device_id[9];
		varchar db_merchant_id[16];
		varchar db_organization_id[5];
		int temp;
		EXEC SQL END DECLARE SECTION;
	
	   memset( Dcf01List, 0, sizeof(DCF01_GUI_LIST) );
	   strcpy(Dcf01List->num_returned,"0");
	   strncpy( device_id, Device_Id, sizeof(device_id) );

	   if ( db_error_statics_flag == true )
   	   {
      		start_time = ptetime_get_time();
   	   }
	   
	   EXEC SQL DECLARE dcf01_cursor CURSOR FOR
		  SELECT device_id, merchant_id, organization_id from dcf01
		  WHERE  device_id >= :device_id
		  ORDER BY device_id;
	   
	   if ( db_error_statics_flag == true )
   	   {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : DCF01 ,Fun_Name : db_get_dcf01_gui_list , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   	   }
	   EXEC SQL WHENEVER SQLERROR goto sql_error;
	   EXEC SQL OPEN dcf01_cursor;
	
	   EXEC SQL WHENEVER SQLERROR goto sql_error2;
	   EXEC SQL WHENEVER NOTFOUND DO break;
	   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
	   {
		  memset(&db_dcf01, 0x00, sizeof(db_dcf01));
		  EXEC SQL FETCH dcf01_cursor
		  INTO db_device_id, db_merchant_id, db_organization_id;
	
		  sql_error2:
		  if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
		  {
				SQL_CODE = SQLCODE;
				EXEC SQL CLOSE dcf01_cursor;
				memset(er_buf,0x00,sizeof(er_buf));
				sprintf(er_buf,"In db_get_dcf01_gui_list,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
				DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
				strcat(er_buf,ErrorMsg);
				Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
				return DB_rcode;
		  }
		  memcpy( Dcf01List->dcf01_record[temp].primary_key.device_id, db_device_id.arr,	   db_device_id.len );
		  memcpy( Dcf01List->dcf01_record[temp].merchant_id,		   db_merchant_id.arr,	   db_merchant_id.len );
		  memcpy( Dcf01List->dcf01_record[temp].organization_id,	   db_organization_id.arr, db_organization_id.len );
	
	/*		db_to_dcf01(&Dcf01List->dcf01_record[temp]);*/
		  itoa(temp + 1, Dcf01List->num_returned, 10);
	   }
	
	   EXEC SQL CLOSE dcf01_cursor;
	
	   return PTEMSG_OK;
	
	sql_error:
	   EXEC SQL WHENEVER SQLERROR CONTINUE;
	   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	   
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_dcf01_gui_list,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
}

/*************************************************************************************/
/*    
      Revision History: Modified WHERE clause from 'merchant_id >' to 'merchant_id >='
                        added ORDER BY clause  
      Authour         :supriya, 20th,Nov,98.  
 */
/*************************************************************************************/
BYTE db_get_mcf01_gui_list( pCHAR Primary_Key, BYTE Select_Flag,
                            pMCF01_GUI_LIST Mcf01_Gui_List,
                            pCHAR ErrorMsg )
{
   INT  retval;

    EXEC SQL BEGIN DECLARE SECTION;
    char organization_id[5];
    char merchant_id[16];
    varchar db_organization_id[5];
    varchar db_merchant_id[16];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Mcf01_Gui_List, 0, sizeof(MCF01_GUI_LIST) );
   strcpy(Mcf01_Gui_List->num_returned,"0");
   strncpy( organization_id, Primary_Key, sizeof(organization_id) );
   strncpy( merchant_id, Primary_Key + sizeof(organization_id), sizeof(merchant_id) );

   if(Select_Flag == 0)
   {

      if ( db_error_statics_flag == true )
   	  {
      	 start_time = ptetime_get_time();
      }
      EXEC SQL DECLARE mcf01_cursor1 CURSOR FOR
         SELECT organization_id, merchant_id from mcf01
         WHERE  (organization_id = :organization_id AND merchant_id >= :merchant_id) OR (organization_id > :organization_id)
         ORDER BY organization_id, merchant_id;
         
     if ( db_error_statics_flag == true )
   	 {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : MCF01 ,Fun_Name : db_get_mcf01_gui_list , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   	 }
         
   }
   else
   {

      if ( db_error_statics_flag == true )
  	  {
     	 start_time = ptetime_get_time();
  	  }
      EXEC SQL DECLARE mcf01_cursor2 CURSOR FOR
         SELECT organization_id, merchant_id from mcf01
         WHERE  (organization_id = :organization_id AND merchant_id >= :merchant_id)
         ORDER BY organization_id, merchant_id;
      if ( db_error_statics_flag == true )
   	  {
     	  end_time = ptetime_get_time();
     	  duration = end_time - start_time;
    	  if(duration >= db_error_statics_value)
	      {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : MCF01 ,Fun_Name : db_get_mcf01_gui_list , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	  }
   	  }
   } 
   
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   if(Select_Flag == 0)
      EXEC SQL OPEN mcf01_cursor1;
   else
      EXEC SQL OPEN mcf01_cursor2;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
      memset(&db_mcf01, 0x00, sizeof(db_mcf01));
      if(Select_Flag == 0)
      {
         EXEC SQL FETCH mcf01_cursor1
         INTO db_organization_id, db_merchant_id;
      }
      else
      {
         EXEC SQL FETCH mcf01_cursor2
         INTO db_organization_id, db_merchant_id;
      }

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         if(Select_Flag == 0)
            EXEC SQL CLOSE mcf01_cursor1;
         else
            EXEC SQL CLOSE mcf01_cursor2;
         
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_mcf01_gui_list,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;

      }
      memcpy( Mcf01_Gui_List->merchant_info[temp].organization_id, db_organization_id.arr, db_organization_id.len );
      memcpy( Mcf01_Gui_List->merchant_info[temp].merchant_id,     db_merchant_id.arr,     db_merchant_id.len );
      itoa(temp + 1, Mcf01_Gui_List->num_returned, 10);
   }

   if(Select_Flag == 0)
      EXEC SQL CLOSE mcf01_cursor1;
   else
      EXEC SQL CLOSE mcf01_cursor2;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_mcf01_gui_list,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
}

/*************************************************************************************/
/*    
      Revision History: Modified WHERE clause from 'merchant_id >' to 'merchant_id >='
                        added ORDER BY clause  
      Authour         :supriya, 20th,Nov,98.  
 */
/*************************************************************************************/
BYTE db_get_tlf01_gui_list( pTLF01 Tlf01_ptr, 
                            pTLF01_GUI_LIST Tlf01_Gui_List,
                            pCHAR ErrorMsg )
{
   INT  retval;

    EXEC SQL BEGIN DECLARE SECTION;
    char transaction_id [21];
	char card_num [21];
	char date_yyyymmdd[9];
	char time_hhmmss[7];
	char acquirer_id[21];
	char issuer_id[21];
	char merchant_id[16];
	char terminal_id[9];
	char response_code[3];
	char sys_trace_audit_num[9];
	char sales_amount[13];
	char refund_amount[13];
	char auth_number[7];

    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Tlf01_Gui_List, 0, sizeof(TLF01_GUI_LIST) );
   strcpy( Tlf01_Gui_List->num_returned,"0");
   strncpy( transaction_id,		 Tlf01_ptr->primary_key.transaction_id, sizeof(transaction_id) );
   strncpy( card_num,			 Tlf01_ptr->card_num,	sizeof(card_num) );
   strncpy( date_yyyymmdd,		 Tlf01_ptr->date_yyyymmdd,	sizeof(date_yyyymmdd) );
   strncpy( time_hhmmss,		 Tlf01_ptr->time_hhmmss,	sizeof(time_hhmmss) );
   strncpy( issuer_id,			 Tlf01_ptr->issuer_id,		sizeof(issuer_id) );
   strncpy( acquirer_id,		 Tlf01_ptr->acquirer_id,		sizeof(acquirer_id) );
   strncpy( merchant_id,		 Tlf01_ptr->merchant_id,	sizeof(merchant_id) );
   strncpy( terminal_id,		 Tlf01_ptr->terminal_id,		sizeof(terminal_id) );
   strncpy( response_code,		 Tlf01_ptr->response_code,	sizeof(response_code) );
   strncpy( sys_trace_audit_num, Tlf01_ptr->sys_trace_audit_num, sizeof(sys_trace_audit_num) );
   strncpy( sales_amount,		 Tlf01_ptr->sales_amount,	sizeof(sales_amount) );
   strncpy( refund_amount,		 Tlf01_ptr->refund_amount,	sizeof(refund_amount) );
   strncpy( auth_number,		 Tlf01_ptr->auth_number,	sizeof(auth_number) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE tlf01_cursor10 CURSOR FOR
         SELECT * from tlf01
         WHERE  transaction_id >= :transaction_id AND
				card_num >= :card_num AND
				date_yyyymmdd >= :date_yyyymmdd AND
				time_hhmmss >= :time_hhmmss AND
				acquirer_id >= :acquirer_id AND
				issuer_id >= :issuer_id AND
				merchant_id >= :merchant_id AND
				terminal_id >= :terminal_id AND
				response_code >= :response_code AND
				sys_trace_audit_num >= :sys_trace_audit_num AND
				sales_amount >= :sales_amount AND
				refund_amount >= :refund_amount AND
				auth_number >= :auth_number
				ORDER BY transaction_id;

   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_get_tlf01_gui_list , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
      EXEC SQL OPEN tlf01_cursor10;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
      memset(&db_tlf01, 0x00, sizeof(db_tlf01));
      EXEC SQL FETCH tlf01_cursor10
      INTO :db_tlf01;

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         	SQL_CODE = SQLCODE;
         	EXEC SQL CLOSE tlf01_cursor10;
       		memset(er_buf,0x00,sizeof(er_buf));
			sprintf(er_buf,"In db_get_tlf01_gui_list,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
      }
      memcpy( Tlf01_Gui_List->tlf01_structure[temp].primary_key.transaction_id, 
			  db_tlf01.transaction_id.arr, 
			  db_tlf01.transaction_id.len );
      itoa(temp + 1, Tlf01_Gui_List->num_returned, 10);
   }

   EXEC SQL CLOSE tlf01_cursor10;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_tlf01_gui_list,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
}



/*************************************************************************************/
/*    
      Revision History: Modified WHERE clause from 'batch_nbr >' to 'batch_nbr >=' 
      Authour         :supriya, 20th,Nov,98.  
 */
/*************************************************************************************/
BYTE db_get_bch01_gui_list( pBCH01 bch01_ptr,
                                pBCH01_GUI_LIST Bch01_List,
                                pCHAR ErrorMsg )
{
   INT  retval;

    EXEC SQL BEGIN DECLARE SECTION;
    char device_id[9]={0};
    char batch_nbr[7]={0};
    char batch_status[2]={0};
	char merchant_id[16]={0};
	char cupMid[16]={0};
	char open_date[9] = {0};
    int temp = 0;
    EXEC SQL END DECLARE SECTION;

   memset( Bch01_List, 0, sizeof(BCH01_GUI_LIST) );
   strcpy(Bch01_List->num_returned,"0");
   strncpy( device_id, bch01_ptr->primary_key.device_id, sizeof(device_id) );
   strncpy( batch_nbr, bch01_ptr->primary_key.batch_nbr, sizeof(batch_nbr) );
   strncpy( merchant_id, bch01_ptr->merchant_id, sizeof(merchant_id) );
   strncpy( batch_status, "A", sizeof(batch_status) );
   strncpy(cupMid, &merchant_id[7],8);
   strncpy( open_date,bch01_ptr->open_date,sizeof(open_date));

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE bch01_cursor3 CURSOR FOR
        
        SELECT * from bch01
      	WHERE   open_date  >= :open_date 		AND 
      	 		device_id = :device_id AND 
      		    batch_status <> :batch_status AND 
      		    (merchant_id = :merchant_id OR SUBSTR(merchant_id,8,8) = :cupMid )
      		    ORDER BY open_date ASC, batch_nbr ASC;
      		 
      		 
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_get_bch01_gui_list , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
    printf("\nReturn type for bch01_cursor3 call is %d\n",SQLCODE); 
   
   
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN bch01_cursor3;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
      memset(&db_bch01, 0x00, sizeof(db_bch01));
      EXEC SQL FETCH bch01_cursor3
      INTO :db_bch01;

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         	SQL_CODE = SQLCODE;
         	EXEC SQL CLOSE bch01_cursor3;
         	memset(er_buf,0x00,sizeof(er_buf));
			sprintf(er_buf,"In db_get_bch01_gui_list,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
      }
      db_to_bch01(&Bch01_List->batch_record[temp]);
      itoa(temp + 1, Bch01_List->num_returned, 10);
   }

   EXEC SQL CLOSE bch01_cursor3;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   
	memset(er_buf,0x00,sizeof(er_buf));
	sprintf(er_buf,"In db_get_bch01_gui_list,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
}

/**************************************************************************************************/

/*************************************************************************************/
BYTE db_get_bch01_mp_gui_list( pBCH01_MP bch01_mp_ptr,
                                pBCH01_MP_GUI_LIST Bch01_Mp_list,
                                pCHAR ErrorMsg )
{
   INT  retval;

    EXEC SQL BEGIN DECLARE SECTION;
    char device_id[9]={0};
    char batch_nbr[7]={0};
    char batch_status[2]={0};
	char merchant_id[16]={0};
	char open_date[9] = {0};
    int temp=0;
    EXEC SQL END DECLARE SECTION;

   memset( Bch01_Mp_list, 0, sizeof(BCH01_MP_GUI_LIST) );
   strcpy(Bch01_Mp_list->num_returned,"0");
   strncpy( device_id, bch01_mp_ptr->primary_key.device_id, sizeof(device_id) );
   strncpy( batch_nbr, bch01_mp_ptr->primary_key.batch_nbr, sizeof(batch_nbr) );
   strncpy( merchant_id, bch01_mp_ptr->merchant_id, sizeof(merchant_id) );
   strncpy( batch_status, "A", sizeof(batch_status) );
   strncpy( open_date,bch01_mp_ptr->open_date,sizeof(open_date));

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE bch01_mp_cursor3 CURSOR FOR
      SELECT * from bch01_mp
      WHERE  open_date  >= :open_date 	AND 
      	     device_id	 = :device_id   AND 
      	     merchant_id = :merchant_id AND 
      	     batch_status <> :batch_status 
      	     ORDER BY open_date ASC, batch_nbr ASC;
    
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01_MP ,Fun_Name : db_get_bch01_mp_gui_list , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN bch01_mp_cursor3;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
      memset(&db_bch01_mp, 0x00, sizeof(db_bch01_mp));
      EXEC SQL FETCH bch01_mp_cursor3
      INTO :db_bch01_mp;

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE bch01_mp_cursor3;
        
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_bch01_mp_gui_list,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
      }
      db_to_bch01_mp(&Bch01_Mp_list->batch_record[temp]);
      itoa(temp + 1, Bch01_Mp_list->num_returned, 10);
   }

   EXEC SQL CLOSE bch01_mp_cursor3;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_bch01_mp_gui_list,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
}

/**************************************************************************************************/


/*    
      Revision History: Modified WHERE clause from 'retrieval_ref_num >' to 'retrieval_ref_num >=' 
      Authour         :supriya, 20th,Nov,98.  
 */
/**************************************************************************************************/
BYTE db_get_bch10_gui_list( pBCH10 bch10_ptr,
                                pBCH10_GUI_LIST Bch10_List,
                                pCHAR ErrorMsg )
{
   INT  retval;

    EXEC SQL BEGIN DECLARE SECTION;
    char device_id[9];
    char batch_nbr[7];
    char retrieval_ref_num[13];
    char open_date[9];
    char open_time[7];
	char merchant_id[16];
	char cupMid[16]={0};
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Bch10_List, 0, sizeof(BCH10_GUI_LIST) );
   strcpy(Bch10_List->num_returned,"0");
   strncpy( device_id, bch10_ptr->primary_key.device_id, sizeof(device_id) );
   strncpy( batch_nbr, bch10_ptr->primary_key.batch_nbr, sizeof(batch_nbr) );
   strncpy( retrieval_ref_num, bch10_ptr->primary_key.retrieval_ref_num, sizeof(retrieval_ref_num) );
   strncpy( open_date, bch10_ptr->open_date, sizeof(open_date) );
   strncpy( open_time, bch10_ptr->open_time, sizeof(open_time) );
   strncpy( merchant_id, bch10_ptr->merchant_id, sizeof(merchant_id) );
   strncpy(cupMid, &merchant_id[7],8);

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE bch10_cursor3 CURSOR FOR
      SELECT * from bch10
      WHERE    retrieval_ref_num >= :retrieval_ref_num  AND 
      		   batch_nbr 		  = :batch_nbr 			AND 
      		   device_id 		  = :device_id 			AND 
      		   (merchant_id = :pte_dcf01.merchant_id OR SUBSTR(merchant_id,8,8) = :cupMid )   AND 
      		   open_time 		  = :open_time 			AND 
      		   open_date 		  = :open_date
			   order by transaction_id;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_get_bch10_gui_list , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN bch10_cursor3;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
      memset(&db_bch10, 0x00, sizeof(db_bch10));
      EXEC SQL FETCH bch10_cursor3
      INTO :db_bch10;

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE bch10_cursor3;
         
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_bch10_gui_list,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;

      }
      db_to_bch10(&Bch10_List->batch_list[temp]);
      itoa(temp + 1, Bch10_List->num_returned, 10);
   }

   EXEC SQL CLOSE bch10_cursor3;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_bch10_gui_list,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_bch10_service_list( pBCH10 bch10_ptr,
                                pBCH10_LIST Bch10_List,
                                pCHAR ErrorMsg )
{
   INT  retval;

    EXEC SQL BEGIN DECLARE SECTION;
    char device_id[9];
    char batch_nbr[7];
    char retrieval_ref_num[13];
    char open_date[9];
    char open_time[7];
	char merchant_id[16];
    char tx_key;
    int temp;
    int transaction_type = 11;
    EXEC SQL END DECLARE SECTION;

   memset( Bch10_List, 0, sizeof(BCH10_LIST) );
   strcpy(Bch10_List->num_returned,"0");
   strncpy( device_id, bch10_ptr->primary_key.device_id, sizeof(device_id) );
   strncpy( batch_nbr, bch10_ptr->primary_key.batch_nbr, sizeof(batch_nbr) );
   strncpy( retrieval_ref_num, bch10_ptr->primary_key.retrieval_ref_num, sizeof(retrieval_ref_num) );
   strncpy( open_date, bch10_ptr->open_date, sizeof(open_date) );
   strncpy( open_time, bch10_ptr->open_time, sizeof(open_time) );
   strncpy( merchant_id, bch10_ptr->merchant_id, sizeof(merchant_id) );

   tx_key = bch10_ptr->tx_key;

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE bch10_cursor2 CURSOR FOR
      SELECT * from bch10
      WHERE  device_id = :device_id      	AND  
      		 merchant_id = :merchant_id     AND  
      		 batch_nbr = :batch_nbr         AND  
      		 open_date = :open_date         AND  
      		 open_time = :open_time         AND  
      		 retrieval_ref_num > :retrieval_ref_num
      ORDER BY retrieval_ref_num;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_get_bch10_service_list , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN bch10_cursor2;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < BATCH_SERVICE_LIST_SIZE; temp++ )
   {
      memset(&db_bch10, 0x00, sizeof(db_bch10));
      EXEC SQL FETCH bch10_cursor2
      INTO :db_bch10;

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE bch10_cursor2;
        
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_bch10_service_list,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;

      }
      db_to_bch10(&Bch10_List->batch_list[temp]);
      itoa(temp + 1, Bch10_List->num_returned, 10);
   }

   EXEC SQL CLOSE bch10_cursor2;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
  
	memset(er_buf,0x00,sizeof(er_buf));
	sprintf(er_buf,"In db_get_bch10_service_list,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
}

/**************************************************************************************************/
/*    
      Revision History: Modified WHERE clause from 'retrieval_ref_num >' to 'retrieval_ref_num >=' 
      Authour         :supriya, 20th,Nov,98.  
 */
/**************************************************************************************************/
BYTE db_get_bch11_gui_list( pBCH11 bch11_ptr,
                                pBCH11_GUI_LIST Bch11_List,
                                pCHAR ErrorMsg )
{
   INT  retval;

    EXEC SQL BEGIN DECLARE SECTION;
    char device_id[9];
    char batch_nbr[7];
    char retrieval_ref_num[13];
    char open_date[9];
    char open_time[7];
	char merchant_id[16];
	char cupMid[16]={0};
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Bch11_List, 0, sizeof(BCH11_GUI_LIST) );
   strcpy(Bch11_List->num_returned,"0");
   strncpy( device_id, bch11_ptr->primary_key.device_id, sizeof(device_id) );
   strncpy( batch_nbr, bch11_ptr->primary_key.batch_nbr, sizeof(batch_nbr) );
   strncpy( retrieval_ref_num, bch11_ptr->primary_key.retrieval_ref_num, sizeof(retrieval_ref_num) );
   strncpy( open_date, bch11_ptr->open_date, sizeof(open_date) );
   strncpy( open_time, bch11_ptr->open_time, sizeof(open_time) );
   strncpy( merchant_id, bch11_ptr->merchant_id, sizeof(merchant_id) );   
   strncpy(cupMid, &merchant_id[7],8);

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE bch11_cursor3 CURSOR FOR
      SELECT * from bch11
      WHERE  device_id = :device_id
	  AND (merchant_id = :pte_dcf01.merchant_id OR SUBSTR(merchant_id,8,8) = :cupMid )
      AND  batch_nbr = :batch_nbr
      AND  open_date = :open_date AND open_time = :open_time
      AND  retrieval_ref_num >= :retrieval_ref_num
      order by transaction_id;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH11 ,Fun_Name : db_get_bch11_gui_list , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN bch11_cursor3;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
      memset(&db_bch11, 0x00, sizeof(db_bch11));
      EXEC SQL FETCH bch11_cursor3
      INTO :db_bch11;

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE bch11_cursor3;
         
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_bch11_gui_list,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;

      }
      db_to_bch11(&Bch11_List->batch_list[temp]);
      itoa(temp + 1, Bch11_List->num_returned, 10);
   }

   EXEC SQL CLOSE bch11_cursor3;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   
	memset(er_buf,0x00,sizeof(er_buf));
	sprintf(er_buf,"In db_get_bch11_gui_list,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
	
}
/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_bch11_service_list( pBCH11 bch11_ptr,
                                pBCH11_LIST Bch11_List,
                                pCHAR ErrorMsg )
{
   INT  retval;

    EXEC SQL BEGIN DECLARE SECTION;
    char device_id[9];
    char batch_nbr[7];
    char retrieval_ref_num[13];
    char open_date[9];
    char open_time[7];
	char merchant_id[16];
    char tx_key;
    int temp;
    int transaction_type = 11;
    EXEC SQL END DECLARE SECTION;

   memset( Bch11_List, 0, sizeof(BCH11_LIST) );
   strcpy(Bch11_List->num_returned,"0");
   strncpy( device_id, bch11_ptr->primary_key.device_id, sizeof(device_id) );
   strncpy( batch_nbr, bch11_ptr->primary_key.batch_nbr, sizeof(batch_nbr) );
   strncpy( retrieval_ref_num, bch11_ptr->primary_key.retrieval_ref_num, sizeof(retrieval_ref_num) );
   strncpy( open_date, bch11_ptr->open_date, sizeof(open_date) );
   strncpy( open_time, bch11_ptr->open_time, sizeof(open_time) );
   strncpy( merchant_id, bch11_ptr->merchant_id, sizeof(merchant_id) );
   tx_key = bch11_ptr->tx_key;

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE bch11_cursor2 CURSOR FOR
      SELECT * from bch11
      WHERE  device_id   = :device_id    AND  
      		 merchant_id = :merchant_id  AND  
      		 batch_nbr   = :batch_nbr    AND  
      		 open_date   = :open_date    AND  
      		 open_time   = :open_time    AND  
      		 retrieval_ref_num > :retrieval_ref_num
      ORDER BY retrieval_ref_num;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();

     	 duration = end_time - start_time;

    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH11 ,Fun_Name : db_get_bch11_service_list , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN bch11_cursor2;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < BATCH_SERVICE_LIST_SIZE; temp++ )
   {
      memset(&db_bch11, 0x00, sizeof(db_bch11));
      EXEC SQL FETCH bch11_cursor2
      INTO :db_bch11;

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE bch11_cursor2;
         
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_bch11_service_list,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;

      }
      db_to_bch11(&Bch11_List->batch_list[temp]);
      itoa(temp + 1, Bch11_List->num_returned, 10);
   }

   EXEC SQL CLOSE bch11_cursor2;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   
	memset(er_buf,0x00,sizeof(er_buf));
	sprintf(er_buf,"In db_get_bch11_service_list,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
	
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_bch01_service_list( pBCH01 bch01_ptr,
                                pBCH01_LIST Bch01_List,
                                pCHAR ErrorMsg )
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   int temp;
   char open_date [9];
   char release_date [9];
   char open_time[7] ;
   char release_time [7] ;
   char device_id[9];
   char batch_nbr[7];
   char merchant_id[16];
   EXEC SQL END DECLARE SECTION;

   memset( Bch01_List, 0, sizeof(BCH01_LIST) );
   strcpy(Bch01_List->num_returned,"0");
   
   strcpy ( open_date, bch01_ptr->open_date );
   strcpy ( release_date, bch01_ptr->release_date );
   strcpy ( release_time, bch01_ptr->release_time);
   strcpy ( open_time, bch01_ptr->open_time );

   strcpy( batch_nbr, bch01_ptr->primary_key.batch_nbr);
   strcpy( device_id, bch01_ptr->primary_key.device_id);
   strcpy( merchant_id, bch01_ptr->merchant_id);

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE bch01_cursor2 CURSOR FOR
      SELECT *
      FROM bch01
      WHERE ( (batch_status <> 'A') AND
              (  (release_date  = :open_date AND release_time >= :open_time)
               OR (release_date = :release_date AND release_time < :release_time) )
                AND ( (device_id = :device_id AND merchant_id= :merchant_id AND batch_nbr > :batch_nbr) OR (device_id > :device_id AND merchant_id=:merchant_id) ) )
      ORDER BY  device_id, batch_nbr;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_get_bch01_service_list , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;

   EXEC SQL OPEN  bch01_cursor2;
   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < SCH_MAX_LIST_SIZE; temp++ )
   {
      memset(&db_bch01, 0x00, sizeof(db_bch01));
      EXEC SQL FETCH bch01_cursor2
      INTO :db_bch01;

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE bch01_cursor2;
         
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_bch01_service_list,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
      }
      db_to_bch01(&Bch01_List->batch_list[temp]);
      itoa(temp + 1, Bch01_List->num_returned, 10);
   }
  
   EXEC SQL CLOSE bch01_cursor2;

  sql_error:
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_bch01_service_list,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
 
   return PTEMSG_OK;
}

/*************************************************************************************/

/*************************************************************************************/
BYTE db_get_bch01_mp_service_list( pBCH01_MP bch01_mp_ptr,
                                pBCH01_MP_LIST Bch01_Mp_list,
                                pCHAR ErrorMsg )
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   int temp;
   char open_date [9];
   char release_date [9];
   char open_time[7] ;
   char release_time [7] ;
   char device_id[9];
   char batch_nbr[7];
   char merchant_id[16];
   EXEC SQL END DECLARE SECTION;

   memset( Bch01_Mp_list, 0, sizeof(BCH01_MP_LIST) );
   strcpy(Bch01_Mp_list->num_returned,"0");
   
   strcpy ( open_date, bch01_mp_ptr->open_date );
   strcpy ( release_date, bch01_mp_ptr->release_date );
   strcpy ( release_time, bch01_mp_ptr->release_time);
   strcpy ( open_time, bch01_mp_ptr->open_time );

   strcpy( batch_nbr, bch01_mp_ptr->primary_key.batch_nbr);
   strcpy( device_id, bch01_mp_ptr->primary_key.device_id);

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE bch01_mp_cursor2 CURSOR FOR
      SELECT *
      FROM bch01_mp
      WHERE ( (batch_status <> 'A') AND
              (  (release_date  = :open_date AND release_time >= :open_time)
               OR (release_date = :release_date AND release_time < :release_time) )
                AND ( (device_id = :device_id AND merchant_id =:merchant_id AND batch_nbr > :batch_nbr) OR (device_id > :device_id AND merchant_id =:merchant_id) ) )
      ORDER BY  device_id, batch_nbr;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01_MP ,Fun_Name : db_get_bch01_mp_service_list , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   
   EXEC SQL WHENEVER SQLERROR goto sql_error;

   EXEC SQL OPEN  bch01_mp_cursor2;
   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < SCH_MAX_LIST_SIZE; temp++ )
   {
      memset(&db_bch01_mp, 0x00, sizeof(db_bch01_mp));
      EXEC SQL FETCH bch01_mp_cursor2
      INTO :db_bch01_mp;

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE bch01_mp_cursor2;
         memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_bch01_mp_service_list,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
      }
      db_to_bch01_mp(&Bch01_Mp_list->batch_list[temp]);
      itoa(temp + 1, Bch01_Mp_list->num_returned, 10);
   }
  
   EXEC SQL CLOSE bch01_mp_cursor2;

  sql_error:
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_bch01_mp_service_list,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
 
   return PTEMSG_OK;
}

/*************************************************************************************/


/*************************************************************************************/
BYTE db_get_tlf01_service_list( pTLF01 Tlf01_ptr,
                                pTLF01_LIST Tlf01_List,
                                pCHAR ErrorMsg )
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   
   int temp;
   char date_1 [9] = "";
   char date_2 [9] = "";
   char time_1 [7] = "";
   char time_2 [7] = "";
   char transaction_id [21] = "";
   EXEC SQL END DECLARE SECTION;
    
   memset( Tlf01_List, 0, sizeof(TLF01_LIST) );
   strcpy(Tlf01_List->num_returned,"0");
  
   strncpy ( date_1, Tlf01_ptr->date_yyyymmdd, sizeof(date_1) );
   strncpy ( date_2, Tlf01_ptr->terminal_id, sizeof(date_2) );
   strncpy ( time_1, Tlf01_ptr->time_hhmmss, sizeof(time_1) );
   strncpy ( time_2, Tlf01_ptr->time_hhmmss, sizeof(time_2) );
   strncpy ( transaction_id, Tlf01_ptr->primary_key.transaction_id, sizeof(transaction_id) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE Tlf01_cursor2 CURSOR FOR
      SELECT transaction_id,
     terminal_id,
     merchant_id,
     card_num,
     exp_date,
     total_amount,
     pos_entry_mode,
     response_code,
     date_yyyymmdd,
     time_hhmmss,
     tx_key,
     auth_number ,
     sys_trace_audit_num,
     outstanding_balance,
     invoice_number,
     product_code,
     deferred_factor,
     deferred_term_length,
     category_code ,
     currency_code,
     ticket_nbr,
     odometer,
     tran_start_time,
     tran_finish_time 
	  FROM tlf01
      WHERE transaction_id > :transaction_id AND  
		  ((date_yyyymmdd  = :date_1 AND time_hhmmss > :time_1 ) OR  
		  (date_yyyymmdd  = :date_2 AND time_hhmmss <= :time_2 )) ;
   

   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_get_tlf01_service_list , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN Tlf01_cursor2;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < SCH_MAX_LIST_SIZE; temp++ )
   {
      memset(&db_tlf01_structure, 0x00, sizeof(db_tlf01_structure));
      EXEC SQL FETCH Tlf01_cursor2
      INTO :db_tlf01_structure;

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE Tlf01_cursor2;
         memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_tlf01_service_list,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
      }
      db_to_tlf01_list(&Tlf01_List->tlf01_list_structure[temp]);
      itoa(temp + 1, Tlf01_List->num_returned, 10);
   }

   EXEC SQL CLOSE Tlf01_cursor2;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
  
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_tlf01_service_list,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
}



/*************************************************************************************/
/*************************************************************************************/
BYTE db_get_nfi01_service_list( pNFI01 nfi01_ptr,
                                     pNFI01_LIST Nfi01List,
                                     pCHAR ErrorMsg )
{
   INT  retval;

    EXEC SQL BEGIN DECLARE SECTION;
    char file_name[9];
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Nfi01List, 0, sizeof(NFI01_LIST) );
   strcpy(Nfi01List->num_returned,"0");
   strncpy( file_name, nfi01_ptr->primary_key.file_name, sizeof(file_name) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE nfi01_cursor1 CURSOR FOR
      SELECT * from nfi01
      WHERE  file_name > :file_name 
      ORDER BY file_name;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : NFI01 ,Fun_Name : db_get_nfi01_service_list , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN nfi01_cursor1;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < SERVICE_LIST_SIZE; temp++ )
   {
      memset(&db_nfi01, 0x00, sizeof(db_nfi01));
      EXEC SQL FETCH nfi01_cursor1
      INTO :db_nfi01;

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE nfi01_cursor1;
         		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_nfi01_service_list,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
      }
      db_to_nfi01(&Nfi01List->nfi01_rec[temp]);
      /*strncpy( Nfi01List->file_name[temp], new_file_name.arr, new_file_name.len );*/
      itoa(temp + 1, Nfi01List->num_returned, 10);
   }

   EXEC SQL CLOSE nfi01_cursor1;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_nfi01_service_list,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
}


/*************************************************************************************/
/*************************************************************************************/

BYTE db_move_bch10_to_bch11(pCHAR PrimaryKey, pCHAR ErrorMsg)
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   EXEC SQL END DECLARE SECTION;
   
   strncpy( pte_bch10.device_id, PrimaryKey, sizeof(pte_bch10.device_id) );
   strncpy( pte_bch10.batch_nbr, PrimaryKey + sizeof(pte_bch10.device_id), sizeof(pte_bch10.batch_nbr) );   
   strncpy( pte_bch10.merchant_id, PrimaryKey + BCH10_MERCHANT_ID_OFFSET, sizeof(pte_bch10.merchant_id) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL INSERT INTO bch11
   SELECT * FROM bch10 
   WHERE device_id   = :pte_bch10.device_id   AND 
   		 merchant_id = :pte_bch10.merchant_id AND  
         batch_nbr   = :pte_bch10.batch_nbr;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH11 ,Fun_Name : db_move_bch10_to_bch11 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if (( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND) )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_move_bch10_to_bch11,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM bch10
   WHERE device_id   = :pte_bch10.device_id   AND 
   		 merchant_id = :pte_bch10.merchant_id AND 
         batch_nbr   = :pte_bch10.batch_nbr;
         
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_move_bch10_to_bch11 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if (( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND) )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_move_bch10_to_bch11,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/***********************************************************************************/
/***********************************************************************************/
BYTE db_move_bch11_to_bch10(pCHAR PrimaryKey, pCHAR ErrorMsg)
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   EXEC SQL END DECLARE SECTION;
   
   strncpy( pte_bch11.device_id, PrimaryKey, sizeof(pte_bch11.device_id) );
   strncpy( pte_bch11.batch_nbr, PrimaryKey + sizeof(pte_bch11.device_id), sizeof(pte_bch11.batch_nbr) );  
   strncpy( pte_bch11.merchant_id, PrimaryKey + BCH11_MERCHANT_ID_OFFSET, sizeof(pte_bch11.merchant_id) );   

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL INSERT INTO bch10
   SELECT * FROM bch11 
   WHERE device_id   = :pte_bch11.device_id   AND 
   		 merchant_id = :pte_bch11.merchant_id AND 
         batch_nbr   = :pte_bch11.batch_nbr;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_move_bch11_to_bch10 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if (( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND) )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_move_bch11_to_bch10,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM bch11
   WHERE device_id   = :pte_bch11.device_id    AND 
   		 merchant_id = :pte_bch11.merchant_id  AND 
   		 batch_nbr   = :pte_bch11.batch_nbr;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH11 ,Fun_Name : db_move_bch11_to_bch10 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if (( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND) )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_move_bch11_to_bch10,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}


/*********************************************************************************/
/*********************************************************************************/
BYTE db_update_bch01_insert_bch10(pBCH01 bch01_ptr, pBCH10 bch10_ptr,  pCHAR ErrorMsg)
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   EXEC SQL END DECLARE SECTION;

   bch01_to_db( bch01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch01
      FROM   BCH01
      WHERE  device_id = :pte_bch01.device_id        AND  
      		 batch_nbr = :pte_bch01.batch_nbr        AND  
      		 merchant_id = :pte_bch01.merchant_id    AND  
      		 open_date = :pte_bch01.open_date        AND  
      		 open_time = :pte_bch01.open_time        AND
      		 rownum    = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_update_bch01_insert_bch10_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_insert_bch10,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL UPDATE bch01 
   SET device_id                 	  = :pte_bch01.device_id,                              
       batch_nbr                 	  = :pte_bch01.batch_nbr,                 
       merchant_id              	  = :pte_bch01.merchant_id,
       batch_status              	  = :pte_bch01.batch_status,
       total_credit_cnt         	  = :pte_bch01.total_credit_cnt,           
       total_credit_amt         	  = :pte_bch01.total_credit_amt,           
       total_credit_refund_cnt  	  = :pte_bch01.total_credit_refund_cnt,           
       total_credit_refund_amt  	  = :pte_bch01.total_credit_refund_amt,           
       total_debit_cnt          	  = :pte_bch01.total_debit_cnt,           
       total_debit_amt           	  = :pte_bch01.total_debit_amt,           
       total_debit_refund_cnt    	  = :pte_bch01.total_debit_refund_cnt,           
       total_debit_refund_amt    	  = :pte_bch01.total_debit_refund_amt, 
       total_void_credit_cnt          = :pte_bch01.total_void_credit_cnt,           
       total_void_credit_amt          = :pte_bch01.total_void_credit_amt,           
       total_void_credit_refund_cnt   = :pte_bch01.total_void_credit_refund_cnt,           
       total_void_credit_refund_amt   = :pte_bch01.total_void_credit_refund_amt,      
                 
       open_date                 	  = :pte_bch01.open_date,
       open_time                 	  = :pte_bch01.open_time,
       release_date              	  = :pte_bch01.release_date,
       release_time              	  = :pte_bch01.release_time,
       visa_merchant_id          	  = :pte_bch01.visa_merchant_id

   WHERE device_id   = :pte_bch01.device_id    AND 
   		 batch_nbr   = :pte_bch01.batch_nbr    AND 
   		 merchant_id = :pte_bch01.merchant_id  AND 
   		 open_date   = :pte_bch01.open_date    AND 
   		 open_time   = :pte_bch01.open_time; 
 
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_update_bch01_insert_bch10_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_insert_bch10,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   
   bch10_to_db( bch10_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL INSERT INTO bch10
      ( device_id, batch_nbr, retrieval_ref_num, merchant_id, processing_code, tran_amount, response_code,
        auth_number, tran_date, tran_time, transaction_id, message_type, card_nbr, invoice_nbr,
        settle_file_prefix, product_code, odometer,sys_trace_audit_num, tx_key,bin_type, type_of_data,
        down_payment, period, interest_rate, total_interest, redemption_amount,
        vehicle_number, pos_entry_mode,profile,nbr_of_prod_codes , product1_code ,product1_quantity,
        product1_amount, product2_code, product2_quantity, product2_amount, product3_code, product3_quantity,
        product3_amount, product4_code, product4_quantity, product4_amount, product5_code, product5_quantity,
        product5_amount, product6_code, product6_quantity, product6_amount, product7_code, product7_quantity,
        product7_amount, product8_code, product8_quantity, product8_amount, product9_code, product9_quantity,
        product9_amount, product10_code, product10_quantity, product10_amount, product11_code, product11_quantity,
        product11_amount, product12_code, product12_quantity, product12_amount, product13_code, product13_quantity,
        product13_amount, product14_code, product14_quantity, product14_amount, product15_code, product15_quantity,          
        product15_amount, product16_code, product16_quantity, product16_amount, product17_code, product17_quantity,
        product17_amount, product18_code, product18_quantity, product18_amount, product19_code, product19_quantity,
        product19_amount, product20_code, product20_quantity, product20_amount, aportionment_flag, exp_date, 
        open_date, open_time, cash_bonus, ticket_nbr, def_gross_amt, term
                           
      )
   VALUES(:pte_bch10.device_id, :pte_bch10.batch_nbr, :pte_bch10.retrieval_ref_num,
        :pte_bch10.merchant_id, :pte_bch10.processing_code, :pte_bch10.tran_amount,    
        :pte_bch10.response_code, :pte_bch10.auth_number, :pte_bch10.tran_date,
        :pte_bch10.tran_time, :pte_bch10.transaction_id, :pte_bch10.message_type,
        :pte_bch10.card_nbr, :pte_bch10.invoice_nbr,
        :pte_bch10.settle_file_prefix, :pte_bch10.product_code, :pte_bch10.odometer,
        :pte_bch10.sys_trace_audit_num,:pte_bch10.tx_key,:pte_bch10.bin_type, :pte_bch10.type_of_data, 
        :pte_bch10.down_payment, :pte_bch10.period, :pte_bch10.interest_rate, :pte_bch10.total_interest, 
        :pte_bch10.redemption_amount, 
        :pte_bch10.vehicle_number, :pte_bch10.pos_entry_mode, :pte_bch10.profile, :pte_bch10.nbr_of_prod_codes,          
        :pte_bch10.product1_code, :pte_bch10.product1_quantity, :pte_bch10.product1_amount, :pte_bch10.product2_code,             
        :pte_bch10.product2_quantity, :pte_bch10.product2_amount, :pte_bch10.product3_code, :pte_bch10.product3_quantity,            
        :pte_bch10.product3_amount, :pte_bch10.product4_code, :pte_bch10.product4_quantity, :pte_bch10.product4_amount,                  
        :pte_bch10.product5_code, :pte_bch10.product5_quantity, :pte_bch10.product5_amount, :pte_bch10.product6_code,             
        :pte_bch10.product6_quantity, :pte_bch10.product6_amount, :pte_bch10.product7_code, :pte_bch10.product7_quantity,          
        :pte_bch10.product7_amount, :pte_bch10.product8_code, :pte_bch10.product8_quantity, :pte_bch10.product8_amount,
        :pte_bch10.product9_code, :pte_bch10.product9_quantity, :pte_bch10.product9_amount, :pte_bch10.product10_code,
        :pte_bch10.product10_quantity, :pte_bch10.product10_amount, :pte_bch10.product11_code, :pte_bch10.product11_quantity, 
        :pte_bch10.product11_amount, :pte_bch10.product12_code, :pte_bch10.product12_quantity, :pte_bch10.product12_amount,
        :pte_bch10.product13_code, :pte_bch10. product13_quantity, :pte_bch10.product13_amount,:pte_bch10.product14_code, 
        :pte_bch10.product14_quantity, :pte_bch10.product14_amount, :pte_bch10.product15_code, :pte_bch10.product15_quantity,
        :pte_bch10.product15_amount, :pte_bch10.product16_code, :pte_bch10.product16_quantity, :pte_bch10.product16_amount,    
        :pte_bch10.product17_code, :pte_bch10.product17_quantity, :pte_bch10.product17_amount, :pte_bch10.product18_code,
        :pte_bch10.product18_quantity, :pte_bch10.product18_amount, :pte_bch10.product19_code, :pte_bch10.product19_quantity,
        :pte_bch10.product19_amount, :pte_bch10.product20_code, :pte_bch10.product20_quantity, :pte_bch10.product20_amount,
        :pte_bch10.aportionment_flag, :pte_bch10.exp_date, :pte_bch10.open_date, :pte_bch10.open_time, :pte_bch10.cash_bonus,
		:pte_bch10.ticket_nbr, :pte_bch10.def_gross_amt, :pte_bch10.term
        
      );
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_update_bch01_insert_bch10 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_insert_bch10,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}

/*************************************************************************************/

/*********************************************************************************/
BYTE db_update_bch01_mp_insert_bch10(pBCH01_MP bch01_mp_ptr, pBCH10 bch10_ptr,  pCHAR ErrorMsg)
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   EXEC SQL END DECLARE SECTION;

   bch01_mp_to_db( bch01_mp_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   } 
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch01_mp
      FROM   BCH01_MP
      WHERE  device_id   = :pte_bch01_mp.device_id 		AND  
      		 merchant_id = :pte_bch01_mp.merchant_id    AND  
      		 batch_nbr   = :pte_bch01_mp.batch_nbr      AND  
      		 open_date   = :pte_bch01_mp.open_date      AND  
      		 open_time   = :pte_bch01_mp.open_time		AND
      		 rownum      = 1
      For Update NOWAIT;
      
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01_MP ,Fun_Name : db_update_bch01_mp_insert_bch10_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
  		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_mp_insert_bch10,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL UPDATE bch01_mp 
   SET device_id                 	  = :pte_bch01_mp.device_id,                              
       batch_nbr                	  = :pte_bch01_mp.batch_nbr,                 
       merchant_id              	  = :pte_bch01_mp.merchant_id,
       batch_status              	  = :pte_bch01_mp.batch_status,
       total_credit_cnt         	  = :pte_bch01_mp.total_credit_cnt,           
       total_credit_amt          	  = :pte_bch01_mp.total_credit_amt,           
       total_credit_refund_cnt   	  = :pte_bch01_mp.total_credit_refund_cnt,           
       total_credit_refund_amt   	  = :pte_bch01_mp.total_credit_refund_amt,           
       total_debit_cnt           	  = :pte_bch01_mp.total_debit_cnt,           
       total_debit_amt           	  = :pte_bch01_mp.total_debit_amt,           
       total_debit_refund_cnt    	  = :pte_bch01_mp.total_debit_refund_cnt,           
       total_debit_refund_amt    	  = :pte_bch01_mp.total_debit_refund_amt, 
       total_void_credit_cnt          = :pte_bch01_mp.total_void_credit_cnt,           
       total_void_credit_amt          = :pte_bch01_mp.total_void_credit_amt,           
       total_void_credit_refund_cnt   = :pte_bch01_mp.total_void_credit_refund_cnt,           
       total_void_credit_refund_amt   = :pte_bch01_mp.total_void_credit_refund_amt,      
                 
       open_date                 	  = :pte_bch01_mp.open_date,
       open_time                 	  = :pte_bch01_mp.open_time,
       release_date              	  = :pte_bch01_mp.release_date,
       release_time              	  = :pte_bch01_mp.release_time,
       visa_merchant_id          	  = :pte_bch01_mp.visa_merchant_id

   WHERE device_id   = :pte_bch01_mp.device_id   AND 
   		 merchant_id = :pte_bch01_mp.merchant_id AND 
   		 batch_nbr   = :pte_bch01_mp.batch_nbr   AND
         open_date   = :pte_bch01_mp.open_date   AND 
         open_time   = :pte_bch01_mp.open_time; 
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01_MP ,Fun_Name : db_update_bch01_mp_insert_bch10_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_mp_insert_bch10,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   
   bch10_to_db( bch10_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL INSERT INTO bch10
      ( device_id, batch_nbr, retrieval_ref_num, merchant_id, processing_code, tran_amount, response_code,
        auth_number, tran_date, tran_time, transaction_id, message_type, card_nbr, invoice_nbr,
        settle_file_prefix, product_code, odometer,sys_trace_audit_num, tx_key,bin_type, type_of_data,
        down_payment, period, interest_rate, total_interest, redemption_amount,
        vehicle_number, pos_entry_mode,profile,nbr_of_prod_codes , product1_code ,product1_quantity,
        product1_amount, product2_code, product2_quantity, product2_amount, product3_code, product3_quantity,
        product3_amount, product4_code, product4_quantity, product4_amount, product5_code, product5_quantity,
        product5_amount, product6_code, product6_quantity, product6_amount, product7_code, product7_quantity,
        product7_amount, product8_code, product8_quantity, product8_amount, product9_code, product9_quantity,
        product9_amount, product10_code, product10_quantity, product10_amount, product11_code, product11_quantity,
        product11_amount, product12_code, product12_quantity, product12_amount, product13_code, product13_quantity,
        product13_amount, product14_code, product14_quantity, product14_amount, product15_code, product15_quantity,          
        product15_amount, product16_code, product16_quantity, product16_amount, product17_code, product17_quantity,
        product17_amount, product18_code, product18_quantity, product18_amount, product19_code, product19_quantity,
        product19_amount, product20_code, product20_quantity, product20_amount, aportionment_flag, exp_date, 
        open_date, open_time, cash_bonus, ticket_nbr, def_gross_amt, term
                           
      )
   VALUES(:pte_bch10.device_id, :pte_bch10.batch_nbr, :pte_bch10.retrieval_ref_num,
        :pte_bch10.merchant_id, :pte_bch10.processing_code, :pte_bch10.tran_amount,    
        :pte_bch10.response_code, :pte_bch10.auth_number, :pte_bch10.tran_date,
        :pte_bch10.tran_time, :pte_bch10.transaction_id, :pte_bch10.message_type,
        :pte_bch10.card_nbr, :pte_bch10.invoice_nbr,
        :pte_bch10.settle_file_prefix, :pte_bch10.product_code, :pte_bch10.odometer,
        :pte_bch10.sys_trace_audit_num,:pte_bch10.tx_key,:pte_bch10.bin_type, :pte_bch10.type_of_data, 
        :pte_bch10.down_payment, :pte_bch10.period, :pte_bch10.interest_rate, :pte_bch10.total_interest, 
        :pte_bch10.redemption_amount, 
        :pte_bch10.vehicle_number, :pte_bch10.pos_entry_mode, :pte_bch10.profile, :pte_bch10.nbr_of_prod_codes,          
        :pte_bch10.product1_code, :pte_bch10.product1_quantity, :pte_bch10.product1_amount, :pte_bch10.product2_code,             
        :pte_bch10.product2_quantity, :pte_bch10.product2_amount, :pte_bch10.product3_code, :pte_bch10.product3_quantity,            
        :pte_bch10.product3_amount, :pte_bch10.product4_code, :pte_bch10.product4_quantity, :pte_bch10.product4_amount,                  
        :pte_bch10.product5_code, :pte_bch10.product5_quantity, :pte_bch10.product5_amount, :pte_bch10.product6_code,             
        :pte_bch10.product6_quantity, :pte_bch10.product6_amount, :pte_bch10.product7_code, :pte_bch10.product7_quantity,          
        :pte_bch10.product7_amount, :pte_bch10.product8_code, :pte_bch10.product8_quantity, :pte_bch10.product8_amount,
        :pte_bch10.product9_code, :pte_bch10.product9_quantity, :pte_bch10.product9_amount, :pte_bch10.product10_code,
        :pte_bch10.product10_quantity, :pte_bch10.product10_amount, :pte_bch10.product11_code, :pte_bch10.product11_quantity, 
        :pte_bch10.product11_amount, :pte_bch10.product12_code, :pte_bch10.product12_quantity, :pte_bch10.product12_amount,
        :pte_bch10.product13_code, :pte_bch10. product13_quantity, :pte_bch10.product13_amount,:pte_bch10.product14_code, 
        :pte_bch10.product14_quantity, :pte_bch10.product14_amount, :pte_bch10.product15_code, :pte_bch10.product15_quantity,
        :pte_bch10.product15_amount, :pte_bch10.product16_code, :pte_bch10.product16_quantity, :pte_bch10.product16_amount,    
        :pte_bch10.product17_code, :pte_bch10.product17_quantity, :pte_bch10.product17_amount, :pte_bch10.product18_code,
        :pte_bch10.product18_quantity, :pte_bch10.product18_amount, :pte_bch10.product19_code, :pte_bch10.product19_quantity,
        :pte_bch10.product19_amount, :pte_bch10.product20_code, :pte_bch10.product20_quantity, :pte_bch10.product20_amount,
        :pte_bch10.aportionment_flag, :pte_bch10.exp_date, :pte_bch10.open_date, :pte_bch10.open_time, :pte_bch10.cash_bonus,
		:pte_bch10.ticket_nbr, :pte_bch10.def_gross_amt, :pte_bch10.term
        
      );
      
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_update_bch01_mp_insert_bch10 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_mp_insert_bch10,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

  return PTEMSG_OK;
}

/*************************************************************************************/


/*********************************************************************************/
BYTE db_update_bch01_move_bch10tobch11_delete_bch10(pBCH01 bch01_ptr, pCHAR ErrorMsg)
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
  
   EXEC SQL END DECLARE SECTION;

   bch01_to_db( bch01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch01
      FROM   BCH01
      WHERE  device_id = :pte_bch01.device_id        AND  
      		 batch_nbr = :pte_bch01.batch_nbr        AND  
      		 merchant_id = :pte_bch01.merchant_id    AND  
      		 open_date = :pte_bch01.open_date        AND  
      		 open_time = :pte_bch01.open_time        AND
      		 rownum    = 1
      For Update NOWAIT;
      
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_update_bch01_move_bch10tobch11_delete_bch10_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
 		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_move_bch10tobch11_delete_bch10,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL UPDATE bch01 
   SET  batch_status              = :pte_bch01.batch_status          
   WHERE device_id   = :pte_bch01.device_id   AND 
   		 batch_nbr   = :pte_bch01.batch_nbr   AND 
   		 merchant_id = :pte_bch01.merchant_id AND 
   		 open_date   = :pte_bch01.open_date   AND 
   		 open_time   = :pte_bch01.open_time;  
         
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_update_bch01_move_bch10tobch11_delete_bch10_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_move_bch10tobch11_delete_bch10,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   /*Move recs. from BCH10 to BCH11*/
   EXEC SQL INSERT INTO BCH11
      SELECT * from BCH10
      WHERE device_id 	= :pte_bch01.device_id   AND 
      		merchant_id = :pte_bch01.merchant_id AND 
      		batch_nbr 	= :pte_bch01.batch_nbr   AND 
      		open_date 	= :pte_bch01.open_date   AND 
      		open_time 	= :pte_bch01.open_time;  ;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH11 ,Fun_Name : db_update_bch01_move_bch10tobch11_delete_bch10 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_move_bch10tobch11_delete_bch10,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /*Delete the recs. in BCH10*/
   EXEC SQL DELETE FROM bch10 
   where device_id   = :pte_bch01.device_id     AND 
   		 merchant_id = :pte_bch01.merchant_id   AND 
   		 batch_nbr   = :pte_bch01.batch_nbr     AND 
   		 open_date   = :pte_bch01.open_date     AND 
   		 open_time   = :pte_bch01.open_time;
            
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_update_bch01_move_bch10tobch11_delete_bch10 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_move_bch10tobch11_delete_bch10,ST1:%d,ST2:%d_4",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
  
   return PTEMSG_OK;
}


/*************************************************************************************/

/*********************************************************************************/
BYTE db_update_bch01_mp_move_bch10tobch11_delete_bch10(pBCH01_MP bch01_mp_ptr, pCHAR ErrorMsg)
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
  
   EXEC SQL END DECLARE SECTION;

   bch01_mp_to_db( bch01_mp_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_bch01_mp
      FROM   BCH01_MP
      WHERE  device_id   = :pte_bch01_mp.device_id      AND  
      		 merchant_id = :pte_bch01_mp.merchant_id    AND  
      		 batch_nbr   = :pte_bch01_mp.batch_nbr      AND  
      		 open_date   = :pte_bch01_mp.open_date      AND  
      		 open_time   = :pte_bch01_mp.open_time      AND
      		 rownum      = 1
      For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01_MP ,Fun_Name : db_update_bch01_mp_move_bch10tobch11_delete_bch10_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_mp_move_bch10tobch11_delete_bch10,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL UPDATE bch01_mp 
   SET  batch_status = :pte_bch01_mp.batch_status          
   WHERE device_id   = :pte_bch01_mp.device_id   AND 
   	     merchant_id = :pte_bch01_mp.merchant_id AND 
   	     batch_nbr   = :pte_bch01_mp.batch_nbr   AND 
   	     open_date   = :pte_bch01_mp.open_date   AND 
   	     open_time   = :pte_bch01_mp.open_time;  
  
  if ( db_error_statics_flag == true )
  {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01_MP ,Fun_Name : db_update_bch01_mp_move_bch10tobch11_delete_bch10_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_mp_move_bch10tobch11_delete_bch10,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /*Move recs. from BCH10 to BCH11*/
   EXEC SQL INSERT INTO BCH11
      SELECT * from BCH10
      WHERE device_id   = :pte_bch01_mp.device_id   AND 
      		merchant_id = :pte_bch01_mp.merchant_id AND 
      		batch_nbr   = :pte_bch01_mp.batch_nbr   AND 
      		open_date   = :pte_bch01_mp.open_date   AND 
      		open_time   = :pte_bch01_mp.open_time;  ;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH11 ,Fun_Name : db_update_bch01_mp_move_bch10tobch11_delete_bch10 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_mp_move_bch10tobch11_delete_bch10,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   /*Delete the recs. in BCH10*/
   EXEC SQL DELETE FROM bch10 
   where device_id   = :pte_bch01_mp.device_id     AND 
   		 merchant_id = :pte_bch01_mp.merchant_id   AND 
   		 batch_nbr   = :pte_bch01_mp.batch_nbr     AND 
   		 open_date   = :pte_bch01_mp.open_date     AND 
   		 open_time   = :pte_bch01_mp.open_time;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_update_bch01_mp_move_bch10tobch11_delete_bch10 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_mp_move_bch10tobch11_delete_bch10,ST1:%d,ST2:%d_4",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
  
   return PTEMSG_OK;
}


/*************************************************************************************/

/*************************************************************************************/
BYTE db_select_bch10_by_batch_nbr (  pCHAR          Primary_key, 
                        pBCH10         bch10_ptr, 
                        pCHAR          ErrorMsg )
{
   INT  retval;

   memset( &db_bch10, 0, sizeof( db_bch10 ) );
   strncpy( pte_bch10.device_id, Primary_key, sizeof(pte_bch10.device_id) );
   strncpy( pte_bch10.batch_nbr, Primary_key + sizeof(pte_bch10.device_id), sizeof(pte_bch10.batch_nbr) );
   strncpy( pte_bch10.retrieval_ref_num, Primary_key + BCH10_MERCHANT_ID_OFFSET, sizeof(pte_bch10.retrieval_ref_num));

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_bch10
   FROM bch10
   WHERE( (device_id >= :pte_bch10.device_id  AND merchant_id = :pte_bch10.merchant_id AND batch_nbr = :pte_bch10.batch_nbr) OR
   (batch_nbr > :pte_bch10.batch_nbr) )AND rownum =1;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_bch10_by_batch_nbr , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if(SQLCODE == NO_DATA_FOUND)
         return(PTEMSG_NOT_FOUND);   
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch10_by_batch_nbr,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch10 (bch10_ptr);

   return PTEMSG_OK;
}
/*************************************************************************************/
/*************************************************************************************/
BYTE db_select_bch11_by_batch_nbr (  pCHAR          Primary_key, 
                        pBCH11         bch11_ptr, 
                        pCHAR          ErrorMsg )
{
   INT  retval;

   memset( &db_bch11, 0, sizeof( db_bch11 ) );
   strncpy( pte_bch11.device_id, Primary_key, sizeof(pte_bch11.device_id) );
   strncpy( pte_bch11.batch_nbr, Primary_key + sizeof(pte_bch11.device_id), sizeof(pte_bch11.batch_nbr) );
   strncpy( pte_bch11.retrieval_ref_num, Primary_key + BCH11_MERCHANT_ID_OFFSET, sizeof(pte_bch11.retrieval_ref_num));
 
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_bch11
   FROM bch11
   WHERE( (device_id >= :pte_bch11.device_id AND merchant_id = :pte_bch11.merchant_id AND batch_nbr = :pte_bch11.batch_nbr) OR
   (batch_nbr > :pte_bch11.batch_nbr) )AND rownum =1;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH11 ,Fun_Name : db_select_bch11_by_batch_nbr , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if(SQLCODE == NO_DATA_FOUND)
         return(PTEMSG_NOT_FOUND);   
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch11_by_batch_nbr,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch11 (bch11_ptr);

   return PTEMSG_OK;
}

/*************************************************************************************/
/*************************************************************************************/
BYTE db_select_bch01_by_date (pBCH01  bch01_ptr, pBCH01  bch01_rec,
                                 pCHAR     ErrorMsg)
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   char open_date [9];
   char release_date [9];
   char open_time[7] ;
   char release_time [7] ;
   char device_id[9];
   char batch_nbr[7];
   char merchant_id[16];
   EXEC SQL END DECLARE SECTION;

   memset( &db_bch01, 0, sizeof( db_bch01) );
   
   strcpy ( open_date, bch01_ptr->open_date );
   strcpy ( release_date, bch01_ptr->release_date );
   strcpy ( release_time, bch01_ptr->release_time);
   strcpy ( open_time, bch01_ptr->open_time );

   strcpy( batch_nbr, bch01_ptr->primary_key.batch_nbr);
   strcpy( device_id, bch01_ptr->primary_key.device_id);
   strncpy( merchant_id, bch01_ptr->merchant_id, sizeof(merchant_id));

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE bch01_cursor CURSOR FOR
      SELECT *
      FROM bch01
      WHERE ( (batch_status <> 'A') AND
              (  (release_date  = :open_date AND release_time >= :open_time)
               OR (release_date = :release_date AND release_time < :release_time) )
              AND ( (merchant_id = :merchant_id AND device_id = :device_id AND batch_nbr > :batch_nbr)
                     OR (merchant_id = :merchant_id AND device_id > :device_id  ) OR (merchant_id > :merchant_id)  ))
            
      ORDER BY merchant_id, device_id, batch_nbr;
      
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_select_bch01_by_date , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   EXEC SQL WHENEVER SQLERROR goto sql_error;

   EXEC SQL OPEN  bch01_cursor;
   EXEC SQL WHENEVER SQLERROR goto sql_error2;

       memset(&db_bch01, 0x00, sizeof(db_bch01));
       EXEC SQL FETCH bch01_cursor
       INTO :db_bch01;

       sql_error2:
       if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
       {
	          SQL_CODE = SQLCODE;
	          EXEC SQL CLOSE bch01_cursor;
	          
			memset(er_buf,0x00,sizeof(er_buf));
			sprintf(er_buf,"In db_select_bch01_by_date,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;

       }
       db_to_bch01 (bch01_rec);
  
   EXEC SQL CLOSE bch01_cursor;

  sql_error:
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch01_by_date,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
 
   return PTEMSG_OK;
}
/*************************************************************************************/

/*************************************************************************************/
BYTE db_select_bch01_mp_by_date ( pBCH01_MP  bch01_mp_ptr, 
							      pBCH01_MP  bch01_mp_rec,
                                  pCHAR      ErrorMsg)
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   char open_date [9];
   char release_date [9];
   char open_time[7] ;
   char release_time [7] ;
   char device_id[9];
   char batch_nbr[7];
   char merchant_id[16];
   EXEC SQL END DECLARE SECTION;

   memset( &db_bch01_mp, 0, sizeof( db_bch01_mp) );
   
   strcpy ( open_date,    bch01_mp_ptr->open_date );
   strcpy ( release_date, bch01_mp_ptr->release_date );
   strcpy ( release_time, bch01_mp_ptr->release_time);
   strcpy ( open_time,    bch01_mp_ptr->open_time );

   strcpy( batch_nbr,     bch01_mp_ptr->primary_key.batch_nbr);
   strcpy( device_id,     bch01_mp_ptr->primary_key.device_id);
   strncpy( merchant_id,  bch01_mp_ptr->merchant_id, sizeof(merchant_id));

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE bch01_mp_cursor CURSOR FOR
      SELECT *
      FROM bch01_mp
      WHERE ( (batch_status <> 'A') AND
              (  (release_date  = :open_date AND release_time >= :open_time)
               OR (release_date = :release_date AND release_time < :release_time) )
              AND ( (merchant_id = :merchant_id AND device_id = :device_id AND batch_nbr > :batch_nbr)
                     OR (merchant_id = :merchant_id AND device_id > :device_id  ) OR (merchant_id > :merchant_id)  ))
            
      ORDER BY merchant_id, device_id, batch_nbr;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01_MP ,Fun_Name : db_select_bch01_mp_by_date , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   
   EXEC SQL WHENEVER SQLERROR goto sql_error;

   EXEC SQL OPEN  bch01_mp_cursor;
   EXEC SQL WHENEVER SQLERROR goto sql_error2;

       memset(&db_bch01_mp, 0x00, sizeof(db_bch01_mp));
       EXEC SQL FETCH bch01_mp_cursor
       INTO :db_bch01_mp;

       sql_error2:
       if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
       {
          SQL_CODE = SQLCODE;
          EXEC SQL CLOSE bch01_mp_cursor;
            
			memset(er_buf,0x00,sizeof(er_buf));
			sprintf(er_buf,"In db_select_bch01_mp_by_date,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
	
       }
       db_to_bch01_mp (bch01_mp_rec);
  
   EXEC SQL CLOSE bch01_mp_cursor;

  sql_error:
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch01_mp_by_date,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
 
   return PTEMSG_OK;
}
/*************************************************************************************/


/*************************************************************************************/
BYTE db_update_bch01_insert_bch10_insert_tlf01(pAUTH_TX auth_tx, pCHAR ErrorMsg)
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;

   char PrimaryKey[50];
   unsigned char rcode;
   int nCount;
   int nBCH01Amount, nTranAmount;
   char date_time[16] = "";

   EXEC SQL END DECLARE SECTION;

   memset(PrimaryKey, 0, sizeof(PrimaryKey));

   strncpy ( PrimaryKey,   auth_tx->TLF01_details.terminal_id, 9 );
   strcat ( PrimaryKey + 9,   "ACTIVE" );
   strncpy ( PrimaryKey + BCH01_MERCHANT_ID_OFFSET,   auth_tx->TLF01_details.merchant_id, 15 );
       PRINT(PrimaryKey ); 

   rcode = db_select_bch01 ( PrimaryKey, (pBCH01)&pte_bch01, ErrorMsg );
   PRINT("After select bch01" ); 


	if ( PTEMSG_OK == rcode )
	{   
       PRINT("Found bch01" ); 
       nCount = atoi(pte_bch01.total_credit_cnt);
       sprintf(pte_bch01.total_credit_cnt, "%04d", nCount+1);
	   nTranAmount = atoi ( auth_tx->TLF01_details.total_amount );
	   /*printf ( "\nBefore conversion %d",  nTranAmount);*/
       nBCH01Amount = atoi(pte_bch01.total_credit_amt) + nTranAmount;
	   /*printf ( "\nResult %d",  nBCH01Amount);*/
	   sprintf(pte_bch01.total_credit_amt, "%012d", nBCH01Amount);

       EXEC SQL WHENEVER SQLERROR CONTINUE;

      if ( db_error_statics_flag == true )
  	  {
      		start_time = ptetime_get_time();
  	  }
      /* Make sure we can access the record before attempting to update it. */
      EXEC SQL
         SELECT *
         INTO  :db_bch01
         FROM   BCH01
         WHERE  device_id = :pte_bch01.device_id           AND  
         		batch_nbr = :pte_bch01.batch_nbr           AND  
         		merchant_id = :pte_bch01.merchant_id       AND  
         		open_date = :pte_bch01.open_date           AND  
         		open_time = :pte_bch01.open_time           AND
         		rownum    = 1
         For Update NOWAIT;
         
      if ( db_error_statics_flag == true )
      {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_update_bch01_insert_bch10_insert_tlf01_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
      }
      
   	   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         /* Record is inaccessible. Return with error. */
  			memset(er_buf,0x00,sizeof(er_buf));
			sprintf(er_buf,"In db_update_bch01_insert_bch10_insert_tlf01,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
	
      }

      if ( db_error_statics_flag == true )
   	  {
      	  start_time = ptetime_get_time();
   	  }
   
	   EXEC SQL UPDATE bch01 
	   SET total_credit_cnt          = :pte_bch01.total_credit_cnt,           
		   total_credit_amt          = :pte_bch01.total_credit_amt               

	   WHERE device_id   = :pte_bch01.device_id   AND 
	   		 batch_nbr   = :pte_bch01.batch_nbr   AND 
	   		 merchant_id = :pte_bch01.merchant_id AND 
	   		 open_date   = :pte_bch01.open_date   AND 
	   		 open_time   = :pte_bch01.open_time; 
       
       if ( db_error_statics_flag == true )
       {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_update_bch01_insert_bch10_insert_tlf01_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
       }
	   if ( SQLCODE != 0  )
	   {
			memset(er_buf,0x00,sizeof(er_buf));
			sprintf(er_buf,"In db_update_bch01_insert_bch10_insert_tlf01,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
	   }
      PRINT("After update bch01" ); 
 
	}
	else if ( PTEMSG_NOT_FOUND == rcode )
	{
	   PRINT("After select bch01  111" ); 

          memset(&pte_bch10, 0, sizeof(BCH10));
		  strcpy(pte_bch10.device_id,auth_tx->TLF01_details.terminal_id);
	   	  strcpy(pte_bch10.batch_nbr , "ACTIVE");

          rcode = db_delete_active_bch10((pBCH10)&pte_bch10,ErrorMsg);
		  if ( rcode == PTEMSG_NOT_FOUND )
		  PRINT ( "\nNot found bch10 OK");
          
		  strcpy(pte_bch01.device_id,auth_tx->TLF01_details.terminal_id);
	   	  strcpy(pte_bch01.batch_nbr , "ACTIVE");
          strcpy(pte_bch01.total_credit_amt, auth_tx->TLF01_details.total_amount);
	      if(atoi(pte_bch01.total_credit_amt) != 0)
             strcpy(pte_bch01.total_credit_cnt, "0001");
          genutil_format_date(date_time);
          if(strlen(auth_tx->TLF01_details.date_yyyymmdd) != 0)
		  {
   			 strcpy(pte_bch01.open_date ,auth_tx->TLF01_details.date_yyyymmdd);
		  }
          else
          {
             memset(pte_bch01.open_date, 0, sizeof(pte_bch01.open_date));
   			 strncpy(pte_bch01.open_date ,date_time, 8);
          }
          if(strlen(auth_tx->TLF01_details.time_hhmmss) != 0)
		  {
   			 strcpy(pte_bch01.open_time ,auth_tx->TLF01_details.time_hhmmss);
		  }
          else
          {
             memset(pte_bch01.open_time, 0, sizeof(pte_bch01.open_time));
   			 strncpy(pte_bch01.open_time ,date_time + 8, 6);
          }
		  strcpy(pte_bch01.batch_status,"A");
		  strcpy(pte_bch01.merchant_id,auth_tx->TLF01_details.merchant_id);

		  PRINT("Before Insert into BCH01");    
		  rcode = db_insert_bch01((pBCH01)&pte_bch01,ErrorMsg);
          PRINT(ErrorMsg);
          PRINT("\nAfter Insert into BCH01");

		  if(rcode != PTEMSG_OK)
		  {
			memset(er_buf,0x00,sizeof(er_buf));
			sprintf(er_buf,"In db_update_bch01_insert_bch10_insert_tlf01,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
	   	}
		  /*else if(rcode == PTEMSG_OK)
		  {
              total=atol(pte_bch01.total_credit_amt)+atol(auth_tx->TLF01_details.total_amount);
              sprintf(pte_bch011.total_credit_amt, "%012d",total);
              if(atol(pte_bch01.total_credit_amt) != 0L)
                  cnt = atoi(pte_bch01.total_credit_cnt) + 1;
              sprintf(pte_bch01.total_credit_cnt, "%04d",cnt);
               copy values into temporary variables

              PRINT("Before update for BCH01");
		      if(rcode = db_update_bch01((pBCH01)&pte_bch01,ErrorMsg) != PTEMSG_OK)
                  return(PTEMSG_UPDATE_FAILED);
              PRINT("After update for BCH01");
		  }*/
	}

            memset(&pte_bch10, 0, sizeof(BCH10));
   			/*Insert into BCH10*/
			PRINT("Insert into BCH10" ); 

			strcpy(pte_bch10.device_id,auth_tx->TLF01_details.terminal_id);
			strcpy(pte_bch10.batch_nbr , "ACTIVE");
			strcpy(pte_bch10.retrieval_ref_num,auth_tx->TLF01_details.retrieval_ref_num);

            strcpy(pte_bch10.merchant_id,auth_tx->TLF01_details.merchant_id);
			strcpy(pte_bch10.processing_code,auth_tx->TLF01_details.processing_code);
			strcpy(pte_bch10.tran_amount,auth_tx->TLF01_details.total_amount);
			strcpy(pte_bch10.response_code,auth_tx->TLF01_details.response_code);
			strcpy(pte_bch10.auth_number,auth_tx->TLF01_details.auth_number);
            strcpy(pte_bch10.tran_date,auth_tx->TLF01_details.date_yyyymmdd);
            strcpy(pte_bch10.tran_time,auth_tx->TLF01_details.time_hhmmss);
            strcpy(pte_bch10.transaction_id,auth_tx->TLF01_details.primary_key.transaction_id);
            strcpy(pte_bch10.message_type,auth_tx->TLF01_details.message_type);
            strcpy(pte_bch10.card_nbr,auth_tx->TLF01_details.card_num);
            strcpy(pte_bch10.invoice_nbr,auth_tx->TLF01_details.invoice_number);
            strcpy(pte_bch10.settle_file_prefix,auth_tx->TLF01_details.settle_file_prefix);
            strcpy(pte_bch10.product_code,auth_tx->TLF01_details.product_code);
            strcpy(pte_bch10.odometer,auth_tx->TLF01_details.odometer);
            strcpy(pte_bch10.sys_trace_audit_num,auth_tx->TLF01_details.sys_trace_audit_num);
            pte_bch10.tx_key = auth_tx->TLF01_details.tx_key;
            pte_bch10.bin_type = auth_tx->bin_type;
			memcpy ( pte_bch10.nbr_of_prod_codes + 3, auth_tx->TLF01_details.product_codes, 460 );
            strcpy(pte_bch10.down_payment,auth_tx->TLF01_details.down_payment);
            strcpy(pte_bch10.period,auth_tx->TLF01_details.period);
            strcpy(pte_bch10.interest_rate,auth_tx->TLF01_details.interest_rate);
            strcpy(pte_bch10.total_interest,auth_tx->TLF01_details.total_interest);
            strcpy(pte_bch10.redemption_amount,auth_tx->TLF01_details.redemption_amount);
            strcpy(pte_bch10.vehicle_number,auth_tx->TLF01_details.vehicle_number);
            strcpy(pte_bch10.pos_entry_mode,auth_tx->TLF01_details.pos_entry_mode);
            strcpy(pte_bch10.profile,auth_tx->TLF01_details.profile);
            strcpy(pte_bch10.exp_date,auth_tx->TLF01_details.exp_date);
            strcpy(pte_bch10.ticket_nbr,auth_tx->TLF01_details.ticket_nbr);
            strcpy(pte_bch10.def_gross_amt,auth_tx->TLF01_details.def_gross_amt);
            strcpy(pte_bch10.term,auth_tx->TLF01_details.deferred_term_length);
            strcpy(pte_bch10.open_date,pte_bch01.open_date);
            strcpy(pte_bch10.open_time,pte_bch01.open_time);
	        /*Girija GB EFTPOS phase 2 */
            strcpy(pte_bch10.product6_amount,auth_tx->TLF01_details.pos_condition_code );
            strcat(pte_bch10.product6_amount,auth_tx->TLF01_details.service_code );
            
					
			if((rcode= db_insert_bch10((pBCH10)&pte_bch10,ErrorMsg))!= PTEMSG_OK)
              return(PTEMSG_INSERT_FAILED);
   
            if((rcode= db_insert_tlf01((pTLF01)auth_tx,ErrorMsg))!= PTEMSG_OK)
              return(PTEMSG_INSERT_FAILED);

   return PTEMSG_OK;
}



/*BYTE db_select_tlf01_by_stan (pTLF01   tlf01_record, 
                        pTLF01         tlf01_ptr, 
						pCHAR          ErrorMsg )
{
   memset( &db_tlf01, 0, sizeof( db_tlf01 ) );
   memset( &pte_bch10, 0, sizeof( pte_bch10 ) );
   strncpy( pte_bch10.sys_trace_audit_num, tlf01_record->sys_trace_audit_num, sizeof(pte_tlf01.sys_trace_audit_num) );

   EXEC SQL SELECT *
   INTO :db_bch10
   FROM bch10
   WHERE  sys_trace_audit_num = :pte_bch10.sys_trace_audit_num;
      
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_tlf01_by_stan,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_tlf01
   FROM tlf01
   WHERE transaction_id  = :pte_bch10.transaction_id;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_tlf01_by_stan , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }  
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_tlf01_by_stan,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_tlf01 (tlf01_ptr);

   return PTEMSG_OK;
}


BYTE db_select_tlf01_by_terminal_id (pTLF01   tlf01_record, 
                                     pTLF01   tlf01_ptr, 
                                     pCHAR    ErrorMsg )
{
   memset( &db_tlf01, 0, sizeof( db_tlf01 ) );
   memset( &pte_bch10, 0, sizeof( pte_bch10 ) );
   strncpy( pte_bch10.sys_trace_audit_num, tlf01_record->sys_trace_audit_num, sizeof(pte_tlf01.sys_trace_audit_num) );

   EXEC SQL SELECT *
   INTO :db_bch10
   FROM bch10
   WHERE  sys_trace_audit_num = :pte_bch10.sys_trace_audit_num;
      
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_tlf01_by_terminal_id,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_tlf01
   FROM tlf01
   WHERE transaction_id  = :pte_bch10.transaction_id;    
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_tlf01_by_terminal_id , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }  
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_tlf01_by_terminal_id,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_tlf01 (tlf01_ptr);

   return PTEMSG_OK;
}


BYTE db_select_tlf01_by_original_tran (pTLF01   tlf01_record,
                                    pTLF01         tlf01_ptr,  
                        			pCHAR          ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
        char response_code[3]="00";
   EXEC SQL END DECLARE SECTION;
   memset( &db_tlf01, 0, sizeof( db_tlf01 ) );
   strncpy( pte_tlf01.terminal_id, tlf01_record->terminal_id, sizeof(pte_tlf01.terminal_id) );
   strncpy( pte_tlf01.merchant_id, tlf01_record->merchant_id, sizeof(pte_tlf01.merchant_id) );
   strncpy( pte_tlf01.sys_trace_audit_num, tlf01_record->sys_trace_audit_num, sizeof(pte_tlf01.sys_trace_audit_num) );
   strncpy( pte_tlf01.card_num, tlf01_record->card_num, sizeof(pte_tlf01.card_num) );
   strncpy( pte_tlf01.invoice_number, tlf01_record->invoice_number, sizeof(pte_tlf01.invoice_number) );
   
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_tlf01
   FROM tlf01
   WHERE rownum = 1 AND terminal_id = :pte_tlf01.terminal_id AND merchant_id  = :pte_tlf01.merchant_id AND
   sys_trace_audit_num = :pte_tlf01.sys_trace_audit_num AND card_num = :pte_tlf01.card_num AND
   invoice_number = :pte_tlf01.invoice_number AND response_code = :response_code;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_tlf01_by_original_tran , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }  
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_tlf01_by_original_tran,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   
   db_to_tlf01 (tlf01_ptr);

   return PTEMSG_OK;
}


BYTE db_select_tlf01_by_reversed_tran (pTLF01   tlf01_record,
                                    pTLF01         tlf01_ptr, 
                        			pCHAR          ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
        char response_code[3]="00";
   EXEC SQL END DECLARE SECTION;
   memset( &db_tlf01, 0, sizeof( db_tlf01 ) );
   strncpy( pte_tlf01.terminal_id, tlf01_record->terminal_id, sizeof(pte_tlf01.terminal_id) );
   strncpy( pte_tlf01.merchant_id, tlf01_record->merchant_id, sizeof(pte_tlf01.merchant_id) );
   strncpy( pte_tlf01.sys_trace_audit_num, tlf01_record->sys_trace_audit_num, sizeof(pte_tlf01.sys_trace_audit_num) );
   strncpy( pte_tlf01.card_num, tlf01_record->card_num, sizeof(pte_tlf01.card_num) );
   strncpy( pte_tlf01.invoice_number, tlf01_record->invoice_number, sizeof(pte_tlf01.invoice_number) );
   
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_tlf01
   FROM tlf01
   WHERE rownum = 1 AND terminal_id = :pte_tlf01.terminal_id AND merchant_id  = :pte_tlf01.merchant_id AND
   sys_trace_audit_num = :pte_tlf01.sys_trace_audit_num AND card_num = :pte_tlf01.card_num AND
   invoice_number = :pte_tlf01.invoice_number AND response_code = :response_code and message_type LIKE '04%';
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_tlf01_by_reversed_tran , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }  
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_tlf01_by_reversed_tran,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   
   db_to_tlf01 (tlf01_ptr);

   return PTEMSG_OK;
}



BYTE db_select_tlf01_for_sales_completion (pTLF01   tlf01_record,
                                    pTLF01         tlf01_ptr, 
                        			pCHAR          ErrorMsg )
{
   EXEC SQL BEGIN DECLARE SECTION;
        char response_code[3]="00";
   EXEC SQL END DECLARE SECTION;

   memset( &db_tlf01, 0, sizeof( db_tlf01 ) );
   
   
   strncpy( pte_tlf01.card_num, tlf01_record->card_num, sizeof(pte_tlf01.card_num) );
   strncpy( pte_tlf01.auth_number, tlf01_record->auth_number, sizeof(pte_tlf01.auth_number) );
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_tlf01
   FROM tlf01
   WHERE rownum = 1 AND card_num = :pte_tlf01.card_num AND
   auth_number = :pte_tlf01.auth_number AND response_code = :response_code ;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_tlf01_for_sales_completion , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }   
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_tlf01_for_sales_completion,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   
   db_to_tlf01 (tlf01_ptr);

   return PTEMSG_OK;
}




BYTE db_select_tlf01_by_rrn (pTLF01    tlf01_record, 
                        pTLF01         tlf01_ptr, 
                        pCHAR          ErrorMsg )
{
   memset( &db_tlf01, 0, sizeof( db_tlf01 ) );
   strncpy( pte_tlf01.card_num, tlf01_record->card_num, sizeof(pte_tlf01.card_num) );
   strncpy( pte_tlf01.retrieval_ref_num, tlf01_record->retrieval_ref_num, sizeof(pte_tlf01.retrieval_ref_num) );
   strncpy( pte_tlf01.auth_number, tlf01_record->auth_number, sizeof(pte_tlf01.auth_number) );
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_tlf01
   FROM tlf01
   WHERE card_num = :pte_tlf01.card_num AND retrieval_ref_num = :pte_tlf01.retrieval_ref_num
                     AND auth_number = :pte_tlf01.auth_number;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_tlf01_by_rrn , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }   
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_tlf01_by_rrn,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_tlf01 (tlf01_ptr);

   return PTEMSG_OK;
}


BYTE db_select_tlf01_saf (pTLF01    tlf01_record, 
                        pTLF01         tlf01_ptr, 
                        pCHAR          ErrorMsg )
{
   memset( &db_tlf01, 0, sizeof( db_tlf01 ) );
   strncpy( pte_tlf01.authorizing_host_queue, tlf01_record->authorizing_host_queue, sizeof(pte_tlf01.authorizing_host_queue) );
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }

   EXEC SQL SELECT *
   INTO :db_tlf01
   FROM tlf01
   WHERE rownum = 1 AND 
         saf = 'Y' AND
         authorizing_host_queue = :pte_tlf01.authorizing_host_queue 
   ORDER BY date_yyyymmdd, time_hhmmss;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_tlf01_saf , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_tlf01_saf,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_tlf01 (tlf01_ptr);

   return PTEMSG_OK;
}
*/

/* This function will be transfered to  off line dataserver*/

/*BYTE db_get_tlf01_gui_list_dynamic (pTLF01_LIMITS    Tlf01_ptr, 
                        pTLF01_GUI_LIST Tlf01_Gui_List, 
                        pCHAR          ErrorMsg )
{
    EXEC SQL BEGIN DECLARE SECTION;
    char transaction_id [21];
	char card_num_min [21];
	char card_num_max [21];
	char date_yyyymmdd_start[9];
	char date_yyyymmdd_end[9];
	char time_hhmmss_start[7];
	char time_hhmmss_end[7];
	char acquirer_id[21];
	char issuer_id[21];
	char merchant_id_min[16];
	char merchant_id_max[16];
	char terminal_id_min[9];
	char terminal_id_max[9];
	char response_code_min[3];
	char response_code_max[3];
	char sys_trace_audit_num_min[9];
	char sys_trace_audit_num_max[9];
	char total_amount_min[13];
	char total_amount_max[13];
	char reversal_amount_min[13];
	char reversal_amount_max[13];
	char auth_number_min[7];
	char auth_number_max[7];
	char retrieval_ref_number_min[13];
	char retrieval_ref_number_max[13];

    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Tlf01_Gui_List, 0, sizeof(TLF01_GUI_LIST) );
   strcpy( Tlf01_Gui_List->num_returned,"0");
   strncpy( transaction_id,		     Tlf01_ptr->transaction_id,		sizeof(transaction_id) );
   strncpy( card_num_min,			 Tlf01_ptr->card_num_min,		sizeof(card_num_min) );
   strncpy( card_num_max,			 Tlf01_ptr->card_num_max,		sizeof(card_num_max) );
   strncpy( date_yyyymmdd_start,	 Tlf01_ptr->date_yyyymmdd_start,	sizeof(date_yyyymmdd_start) );
   strncpy( date_yyyymmdd_end,		 Tlf01_ptr->date_yyyymmdd_end,		sizeof(date_yyyymmdd_end) );
   strncpy( time_hhmmss_start,		 Tlf01_ptr->time_hhmmss_start,		sizeof(time_hhmmss_start) );
   strncpy( time_hhmmss_end,		 Tlf01_ptr->time_hhmmss_end,		sizeof(time_hhmmss_end) );
   strncpy( issuer_id,				 Tlf01_ptr->issuer_id,			sizeof(issuer_id) );
   strncpy( acquirer_id,			 Tlf01_ptr->acquirer_id,		sizeof(acquirer_id) );
   strncpy( merchant_id_min,		 Tlf01_ptr->merchant_id_min,	sizeof(merchant_id_min) );
   strncpy( merchant_id_max,		 Tlf01_ptr->merchant_id_max,	sizeof(merchant_id_max) );
   strncpy( terminal_id_min,		 Tlf01_ptr->terminal_id_min,	sizeof(terminal_id_min) );
   strncpy( terminal_id_max,		 Tlf01_ptr->terminal_id_max,	sizeof(terminal_id_max) );
   strncpy( response_code_min,		 Tlf01_ptr->response_code_min,	sizeof(response_code_min) );
   strncpy( response_code_max,		 Tlf01_ptr->response_code_max,	sizeof(response_code_max) );
   strncpy( sys_trace_audit_num_min, Tlf01_ptr->sys_trace_audit_num_min, sizeof(sys_trace_audit_num_min) );
   strncpy( sys_trace_audit_num_max, Tlf01_ptr->sys_trace_audit_num_max, sizeof(sys_trace_audit_num_max) );
   strncpy( total_amount_min,		 Tlf01_ptr->total_amount_min,	sizeof(total_amount_min) );
   strncpy( total_amount_max,		 Tlf01_ptr->total_amount_max,	sizeof(total_amount_max) );
   strncpy( reversal_amount_min,		 Tlf01_ptr->reversal_amount_min,	sizeof(reversal_amount_min) );
   strncpy( reversal_amount_max,		 Tlf01_ptr->reversal_amount_max,	sizeof(reversal_amount_max) );
   strncpy( auth_number_min,		 Tlf01_ptr->auth_number_min,	sizeof(auth_number_min) );
   strncpy( auth_number_max,		 Tlf01_ptr->auth_number_max,	sizeof(auth_number_max) );
   strncpy( retrieval_ref_number_min,		 Tlf01_ptr->retrieval_ref_number_min,	sizeof(retrieval_ref_number_min) );
   strncpy( retrieval_ref_number_max,		 Tlf01_ptr->retrieval_ref_number_max,	sizeof(retrieval_ref_number_max) );
 
   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }

   EXEC SQL DECLARE tlf01_cursor11 CURSOR FOR
         SELECT * from tlf01
         WHERE  transaction_id >= :transaction_id AND
				card_num >= :card_num_min AND card_num <= :card_num_max AND
				date_yyyymmdd >= :date_yyyymmdd_start AND date_yyyymmdd <= :date_yyyymmdd_end AND
				time_hhmmss >= :time_hhmmss_start AND time_hhmmss <= :time_hhmmss_end AND
				merchant_id >= :merchant_id_min AND merchant_id <= :merchant_id_max AND
				terminal_id >= :terminal_id_min AND terminal_id <= :terminal_id_max AND
				response_code >= :response_code_min AND response_code <= :response_code_max AND
				sys_trace_audit_num >= :sys_trace_audit_num_min AND sys_trace_audit_num <= :sys_trace_audit_num_max AND
				auth_number >= :auth_number_min AND auth_number <= :auth_number_max AND
				retrieval_ref_num >= :retrieval_ref_number_min AND retrieval_ref_num <= :retrieval_ref_number_max 

				ORDER BY transaction_id;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_get_tlf01_gui_list_dynamic , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   
   EXEC SQL WHENEVER SQLERROR goto sql_error;
      EXEC SQL OPEN tlf01_cursor11;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   temp = 0;
   while (  temp < GUI_MAX_LIST_SIZE  )
   {
      memset(&db_tlf01, 0x00, sizeof(db_tlf01));
      EXEC SQL FETCH tlf01_cursor11
      INTO :db_tlf01;
      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE tlf01_cursor11;

		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_tlf01_gui_list_dynamic,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
      }

	  db_to_tlf01(&Tlf01_Gui_List->tlf01_structure[temp]);
	  if ( strlen ( acquirer_id ) == 0  && strlen ( issuer_id ) == 0 )
	  {
		if ( strlen ( total_amount_min ) > 0 )
		{	  

	       if ( strcmp ( Tlf01_Gui_List->tlf01_structure[temp].total_amount, total_amount_min ) >= 0 && 
				strcmp ( Tlf01_Gui_List->tlf01_structure[temp].total_amount, total_amount_max ) <= 0)
		   {
		   		temp++;
				itoa(temp , Tlf01_Gui_List->num_returned, 10);
			}
		}
		else if ( strlen ( reversal_amount_min ) > 0 )
		{
	       if ( strcmp ( Tlf01_Gui_List->tlf01_structure[temp].reversal_amount, reversal_amount_min ) >= 0 && 
				strcmp ( Tlf01_Gui_List->tlf01_structure[temp].reversal_amount, reversal_amount_max ) <= 0)
		   {
		   		temp++;
				itoa(temp , Tlf01_Gui_List->num_returned, 10);
			}
		}
		else 
	    {
    		temp++;
			itoa(temp , Tlf01_Gui_List->num_returned, 10);
		}

	  }
	  else if ( strlen ( acquirer_id ) > 0  && strlen ( issuer_id ) == 0 )
	  {
	     if ( strcmp ( Tlf01_Gui_List->tlf01_structure[temp].acquirer_id, acquirer_id ) == 0 )
		 {
			if ( strlen ( total_amount_min ) > 0 )
			{
				if ( strcmp ( Tlf01_Gui_List->tlf01_structure[temp].total_amount, total_amount_min ) >= 0 && 
					strcmp ( Tlf01_Gui_List->tlf01_structure[temp].total_amount, total_amount_max ) <= 0)
			   {
		   		  temp++;
				  itoa(temp , Tlf01_Gui_List->num_returned, 10);
			   }
			}
			else if ( strlen ( reversal_amount_min ) > 0 )
			{
	       if ( strcmp ( Tlf01_Gui_List->tlf01_structure[temp].reversal_amount, reversal_amount_min ) >= 0 && 
				strcmp ( Tlf01_Gui_List->tlf01_structure[temp].reversal_amount, reversal_amount_max ) <= 0)
			   {
		   			temp++;
					itoa(temp , Tlf01_Gui_List->num_returned, 10);
			   }
			}
			else 
            {
		   		temp++;
				itoa(temp , Tlf01_Gui_List->num_returned, 10);
			}

		 }

	  }
	  else if ( strlen ( acquirer_id ) == 0  && strlen ( issuer_id ) > 0 )
	  {
	     if ( strcmp ( Tlf01_Gui_List->tlf01_structure[temp].issuer_id, issuer_id ) == 0 )
		 {
			if ( strlen ( total_amount_min ) > 0 )
			{
				if ( strcmp ( Tlf01_Gui_List->tlf01_structure[temp].total_amount, total_amount_min ) >= 0 && 
					strcmp ( Tlf01_Gui_List->tlf01_structure[temp].total_amount, total_amount_max ) <= 0)
			   {
		   	   	  temp++;
				  itoa(temp , Tlf01_Gui_List->num_returned, 10);
			   }
			}
			else if ( strlen ( reversal_amount_min ) > 0 )
			{
	       if ( strcmp ( Tlf01_Gui_List->tlf01_structure[temp].reversal_amount, reversal_amount_min ) >= 0 && 
				strcmp ( Tlf01_Gui_List->tlf01_structure[temp].reversal_amount, reversal_amount_max ) <= 0)
			   {
		   		  temp++;
				  itoa(temp , Tlf01_Gui_List->num_returned, 10);
			   }
			}
			else 
			{
		   		temp++;
				itoa(temp , Tlf01_Gui_List->num_returned, 10);
			}

		 }

	  }
	  else if ( strlen ( acquirer_id ) > 0  && strlen ( issuer_id ) > 0 )
	  {
	     if ( ( strcmp ( Tlf01_Gui_List->tlf01_structure[temp].acquirer_id, acquirer_id ) == 0 ) &&
		      ( strcmp ( Tlf01_Gui_List->tlf01_structure[temp].issuer_id, issuer_id ) == 0 ))
		 {
			if ( strlen ( total_amount_min ) > 0 )
			{
				if ( strcmp ( Tlf01_Gui_List->tlf01_structure[temp].total_amount, total_amount_min ) >= 0 && 
					strcmp ( Tlf01_Gui_List->tlf01_structure[temp].total_amount, total_amount_max ) <= 0)
			   {
		   		  temp++;
				  itoa(temp , Tlf01_Gui_List->num_returned, 10);
			   }
			}
			else if ( strlen ( reversal_amount_min ) > 0 )
			{
	       if ( strcmp ( Tlf01_Gui_List->tlf01_structure[temp].reversal_amount, reversal_amount_min ) >= 0 && 
				strcmp ( Tlf01_Gui_List->tlf01_structure[temp].reversal_amount, reversal_amount_max ) <= 0)
		       {
		   		  temp++;
				  itoa(temp , Tlf01_Gui_List->num_returned, 10);
			   }
			}
			else 
		    {
		   		temp++;
				itoa(temp , Tlf01_Gui_List->num_returned, 10);
			}

		 }

	  } 
   }

   EXEC SQL CLOSE tlf01_cursor11;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
	memset(er_buf,0x00,sizeof(er_buf));
	sprintf(er_buf,"In db_get_tlf01_gui_list_dynamic,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
	DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
	strcat(er_buf,ErrorMsg);
	Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
	return DB_rcode;
	

}

*/


/*******************************************************************************/

/*************************************************************************************/
BYTE db_update_bch01_mp_insert_bch10_insert_tlf01(pAUTH_TX auth_tx, pCHAR ErrorMsg)
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;

   char PrimaryKey[50];
   unsigned char rcode;
   int nCount;
   int nBCH01_MPAmount, nTranAmount;
   char date_time[16] = "";

   EXEC SQL END DECLARE SECTION;

   memset(PrimaryKey, 0, sizeof(PrimaryKey));

   strncpy ( PrimaryKey,   auth_tx->TLF01_details.terminal_id, 9 );
   strcat ( PrimaryKey + 9,   "ACTIVE" );
   strncpy ( PrimaryKey + BCH01_MP_MERCHANT_ID_OFFSET,   auth_tx->TLF01_details.merchant_id, 15 );
       PRINT(PrimaryKey ); 

   rcode = db_select_bch01_mp ( PrimaryKey, (pBCH01_MP)&pte_bch01_mp, ErrorMsg );
   PRINT("After select bch01_mp" ); 


	if ( PTEMSG_OK == rcode )
	{   
       PRINT("Found bch01_mp" ); 
       nCount = atoi(pte_bch01_mp.total_credit_cnt);
       sprintf(pte_bch01_mp.total_credit_cnt, "%04d", nCount+1);
	   nTranAmount = atoi ( auth_tx->TLF01_details.total_amount );
	   /*printf ( "\nBefore conversion %d",  nTranAmount);*/
       nBCH01_MPAmount = atoi(pte_bch01_mp.total_credit_amt) + nTranAmount;
	   /*printf ( "\nResult %d",  nBCH01_MPAmount);*/
	   sprintf(pte_bch01_mp.total_credit_amt, "%012d", nBCH01_MPAmount);

       EXEC SQL WHENEVER SQLERROR CONTINUE;

      if ( db_error_statics_flag == true )
  	  {
    		start_time = ptetime_get_time();
   	  }
      /* Make sure we can access the record before attempting to update it. */
      EXEC SQL
         SELECT *
         INTO  :db_bch01_mp
         FROM   BCH01_MP
         WHERE  device_id   = :pte_bch01_mp.device_id    AND  
         		merchant_id = :pte_bch01_mp.merchant_id  AND  
         		batch_nbr   = :pte_bch01_mp.batch_nbr    AND  
         		open_date   = :pte_bch01_mp.open_date    AND  
         		open_time   = :pte_bch01_mp.open_time	 AND
         		rownum      = 1
         For Update NOWAIT;
   
      if ( db_error_statics_flag == true )
   	  {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01_MP ,Fun_Name : db_update_bch01_mp_insert_bch10_insert_tlf01_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
     }
   	 if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         /* Record is inaccessible. Return with error. */
         	
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch01_mp_insert_bch10_insert_tlf01,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
      }

       if ( db_error_statics_flag == true )
  	  {
    		start_time = ptetime_get_time();
   	  }
	   EXEC SQL UPDATE bch01_mp 
	   SET total_credit_cnt          = :pte_bch01_mp.total_credit_cnt,           
		   total_credit_amt          = :pte_bch01_mp.total_credit_amt               

	   WHERE device_id   = :pte_bch01_mp.device_id 	 AND 
	   		 merchant_id = :pte_bch01_mp.merchant_id AND 
	   		 batch_nbr   = :pte_bch01_mp.batch_nbr   AND
			 open_date   = :pte_bch01_mp.open_date   AND 
			 open_time   = :pte_bch01_mp.open_time; 
       
       if ( db_error_statics_flag == true )
   	   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01_MP ,Fun_Name : db_update_bch01_mp_insert_bch10_insert_tlf01_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
       }
	   if ( SQLCODE != 0  )
	  {
			memset(er_buf,0x00,sizeof(er_buf));
			sprintf(er_buf,"In db_update_bch01_mp_insert_bch10_insert_tlf01,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
	 }
     PRINT("After update bch01_mp" ); 

 
	}
	else if ( PTEMSG_NOT_FOUND == rcode )
	{
	   PRINT("After select bch01_mp  111" ); 

          memset(&pte_bch10, 0, sizeof(BCH10));
		  strcpy(pte_bch10.device_id,auth_tx->TLF01_details.terminal_id);
	   	  strcpy(pte_bch10.batch_nbr , "ACTIVE");

          rcode = db_delete_active_bch10((pBCH10)&pte_bch10,ErrorMsg);
		  if ( rcode == PTEMSG_NOT_FOUND )
		  PRINT ( "\nNot found bch10 OK");
          
		  strcpy(pte_bch01_mp.device_id,auth_tx->TLF01_details.terminal_id);
	   	  strcpy(pte_bch01_mp.batch_nbr , "ACTIVE");
          strcpy(pte_bch01_mp.total_credit_amt, auth_tx->TLF01_details.total_amount);
	      if(atoi(pte_bch01_mp.total_credit_amt) != 0)
             strcpy(pte_bch01_mp.total_credit_cnt, "0001");
          genutil_format_date(date_time);
          if(strlen(auth_tx->TLF01_details.date_yyyymmdd) != 0)
		  {
   			 strcpy(pte_bch01_mp.open_date ,auth_tx->TLF01_details.date_yyyymmdd);
		  }
          else
          {
             memset(pte_bch01_mp.open_date, 0, sizeof(pte_bch01_mp.open_date));
   			 strncpy(pte_bch01_mp.open_date ,date_time, 8);
          }
          if(strlen(auth_tx->TLF01_details.time_hhmmss) != 0)
		  {
   			 strcpy(pte_bch01_mp.open_time ,auth_tx->TLF01_details.time_hhmmss);
		  }
          else
          {
             memset(pte_bch01_mp.open_time, 0, sizeof(pte_bch01_mp.open_time));
   			 strncpy(pte_bch01_mp.open_time ,date_time + 8, 6);
          }
		  strcpy(pte_bch01_mp.batch_status,"A");
		  strcpy(pte_bch01_mp.merchant_id,auth_tx->TLF01_details.merchant_id);

		  PRINT("Before Insert into BCH01_MP");    
		  rcode = db_insert_bch01_mp((pBCH01_MP)&pte_bch01_mp,ErrorMsg);
          PRINT(ErrorMsg);
          PRINT("\nAfter Insert into BCH01_MP");

		  if(rcode != PTEMSG_OK)
		  {
			memset(er_buf,0x00,sizeof(er_buf));
			sprintf(er_buf,"In db_update_bch01_mp_insert_bch10_insert_tlf01,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
		 }
		  /*else if(rcode == PTEMSG_OK)
		  {
              total=atol(pte_bch01_mp.total_credit_amt)+atol(auth_tx->TLF01_details.total_amount);
              sprintf(pte_bch01_mp1.total_credit_amt, "%012d",total);
              if(atol(pte_bch01_mp.total_credit_amt) != 0L)
                  cnt = atoi(pte_bch01_mp.total_credit_cnt) + 1;
              sprintf(pte_bch01_mp.total_credit_cnt, "%04d",cnt);
               copy values into temporary variables

              PRINT("Before update for BCH01_MP");
		      if(rcode = db_update_bch01_mp((pBCH01_MP)&pte_bch01_mp,ErrorMsg) != PTEMSG_OK)
                  return(PTEMSG_UPDATE_FAILED);
              PRINT("After update for BCH01_MP");
		  }*/
	}

            memset(&pte_bch10, 0, sizeof(BCH10));
   			/*Insert into BCH10*/
			PRINT("Insert into BCH10" ); 

			strcpy(pte_bch10.device_id,auth_tx->TLF01_details.terminal_id);
			strcpy(pte_bch10.batch_nbr , "ACTIVE");
			strcpy(pte_bch10.retrieval_ref_num,auth_tx->TLF01_details.retrieval_ref_num);

            strcpy(pte_bch10.merchant_id,auth_tx->TLF01_details.merchant_id);
			strcpy(pte_bch10.processing_code,auth_tx->TLF01_details.processing_code);
			strcpy(pte_bch10.tran_amount,auth_tx->TLF01_details.total_amount);
			strcpy(pte_bch10.response_code,auth_tx->TLF01_details.response_code);
			strcpy(pte_bch10.auth_number,auth_tx->TLF01_details.auth_number);
            strcpy(pte_bch10.tran_date,auth_tx->TLF01_details.date_yyyymmdd);
            strcpy(pte_bch10.tran_time,auth_tx->TLF01_details.time_hhmmss);
            strcpy(pte_bch10.transaction_id,auth_tx->TLF01_details.primary_key.transaction_id);
            strcpy(pte_bch10.message_type,auth_tx->TLF01_details.message_type);
            strcpy(pte_bch10.card_nbr,auth_tx->TLF01_details.card_num);
            strcpy(pte_bch10.invoice_nbr,auth_tx->TLF01_details.invoice_number);
            strcpy(pte_bch10.settle_file_prefix,auth_tx->TLF01_details.settle_file_prefix);
            strcpy(pte_bch10.product_code,auth_tx->TLF01_details.product_code);
            strcpy(pte_bch10.odometer,auth_tx->TLF01_details.odometer);
            strcpy(pte_bch10.sys_trace_audit_num,auth_tx->TLF01_details.sys_trace_audit_num);
            pte_bch10.tx_key = auth_tx->TLF01_details.tx_key;
            pte_bch10.bin_type = auth_tx->bin_type;
			memcpy ( pte_bch10.nbr_of_prod_codes + 3, auth_tx->TLF01_details.product_codes, 460 );
            strcpy(pte_bch10.down_payment,auth_tx->TLF01_details.down_payment);
            strcpy(pte_bch10.period,auth_tx->TLF01_details.period);
            strcpy(pte_bch10.interest_rate,auth_tx->TLF01_details.interest_rate);
            strcpy(pte_bch10.total_interest,auth_tx->TLF01_details.total_interest);
            strcpy(pte_bch10.redemption_amount,auth_tx->TLF01_details.redemption_amount);
            strcpy(pte_bch10.vehicle_number,auth_tx->TLF01_details.vehicle_number);
            strcpy(pte_bch10.pos_entry_mode,auth_tx->TLF01_details.pos_entry_mode);
            strcpy(pte_bch10.profile,auth_tx->TLF01_details.profile);
            strcpy(pte_bch10.exp_date,auth_tx->TLF01_details.exp_date);
            strcpy(pte_bch10.ticket_nbr,auth_tx->TLF01_details.ticket_nbr);
            strcpy(pte_bch10.def_gross_amt,auth_tx->TLF01_details.def_gross_amt);
            strcpy(pte_bch10.term,auth_tx->TLF01_details.deferred_term_length);
            strcpy(pte_bch10.open_date,pte_bch01_mp.open_date);
            strcpy(pte_bch10.open_time,pte_bch01_mp.open_time);
	        /*Girija GB EFTPOS phase 2 */
            strcpy(pte_bch10.product6_amount,auth_tx->TLF01_details.pos_condition_code );
            strcat(pte_bch10.product6_amount,auth_tx->TLF01_details.service_code );
            
					
			if((rcode= db_insert_bch10((pBCH10)&pte_bch10,ErrorMsg))!= PTEMSG_OK)
              return(PTEMSG_INSERT_FAILED);
   
            if((rcode= db_insert_tlf01((pTLF01)auth_tx,ErrorMsg))!= PTEMSG_OK)
              return(PTEMSG_INSERT_FAILED);

   return PTEMSG_OK;
}
/*************************************************************************************/
/*************************************************************************************/
BYTE db_update_mgf01( pMGF01 mgf01_ptr, pCHAR ErrorMsg )

{
   INT  retval;

   mgf01_to_db( mgf01_ptr );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   /* Make sure we can access the record before attempting to update it. */
   EXEC SQL
      SELECT *
      INTO  :db_mgf01
      FROM   mgf01
      WHERE  merchant_group_id     = :pte_mgf01.merchant_group_id AND
      		 rownum    			   = 1
       For Update NOWAIT;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : MGF01 ,Fun_Name : db_update_mgf01_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_mgf01,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
   }

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL UPDATE MGF01 
   SET  merchant_group_id					=:pte_mgf01.merchant_group_id, 	
		effective_date						=:pte_mgf01.effective_date,
		
		merchgrp_Amount_limit_1				=:pte_mgf01.merchgrp_Amount_limit_1,
		merchgrepint_nbr_of_months_1		=:pte_mgf01.merchgrepint_nbr_of_months_1,
		merchgrepint_INT_rate_1				=:pte_mgf01.merchgrepint_INT_rate_1,
		merchgrepint_MSF_rate_1				=:pte_mgf01.merchgrepint_MSF_rate_1,
		merchgrepint_nbr_of_months_2	   	=:pte_mgf01.merchgrepint_nbr_of_months_2,
		merchgrepint_INT_rate_2	   			=:pte_mgf01.merchgrepint_INT_rate_2,
		merchgrepint_MSF_rate_2	   			=:pte_mgf01.merchgrepint_MSF_rate_2,
		merchgrepint_nbr_of_months_3		=:pte_mgf01.merchgrepint_nbr_of_months_3,
		merchgrepint_INT_rate_3				=:pte_mgf01.merchgrepint_INT_rate_3,
		merchgrepint_MSF_rate_3				=:pte_mgf01.merchgrepint_MSF_rate_3,
		merchgrepint_nbr_of_months_4	   	=:pte_mgf01.merchgrepint_nbr_of_months_4,
		merchgrepint_INT_rate_4	   			=:pte_mgf01.merchgrepint_INT_rate_4,
		merchgrepint_MSF_rate_4	   			=:pte_mgf01.merchgrepint_MSF_rate_4,
		merchgrepint_nbr_of_months_5		=:pte_mgf01.merchgrepint_nbr_of_months_5,
		merchgrepint_INT_rate_5				=:pte_mgf01.merchgrepint_INT_rate_5,
		merchgrepint_MSF_rate_5				=:pte_mgf01.merchgrepint_MSF_rate_5,
		merchgrepint_nbr_of_months_6	   	=:pte_mgf01.merchgrepint_nbr_of_months_6,
		merchgrepint_INT_rate_6	   			=:pte_mgf01.merchgrepint_INT_rate_6,
		merchgrepint_MSF_rate_6	   			=:pte_mgf01.merchgrepint_MSF_rate_6,
		merchgrepint_nbr_of_months_7		=:pte_mgf01.merchgrepint_nbr_of_months_7,
		merchgrepint_INT_rate_7				=:pte_mgf01.merchgrepint_INT_rate_7,
		merchgrepint_MSF_rate_7				=:pte_mgf01.merchgrepint_MSF_rate_7,
		merchgrepint_nbr_of_months_8	   	=:pte_mgf01.merchgrepint_nbr_of_months_8,
		merchgrepint_INT_rate_8	  			=:pte_mgf01.merchgrepint_INT_rate_8,
		merchgrepint_MSF_rate_8	   			=:pte_mgf01.merchgrepint_MSF_rate_8,
		merchgrepint_nbr_of_months_9		=:pte_mgf01.merchgrepint_nbr_of_months_9,
		merchgrepint_INT_rate_9				=:pte_mgf01.merchgrepint_INT_rate_9,
		merchgrepint_MSF_rate_9				=:pte_mgf01.merchgrepint_MSF_rate_9,
		merchgrepint_nbr_of_months_10		=:pte_mgf01.merchgrepint_nbr_of_months_10,
		merchgrepint_INT_rate_10			=:pte_mgf01.merchgrepint_INT_rate_10,
		merchgrepint_MSF_rate_10			=:pte_mgf01.merchgrepint_MSF_rate_10,
		merchgrepint_nbr_of_months_10A		=:pte_mgf01.merchgrepint_nbr_of_months_10A,
		merchgrepint_INT_rate_10A			=:pte_mgf01.merchgrepint_INT_rate_10A,
		merchgrepint_MSF_rate_10A			=:pte_mgf01.merchgrepint_MSF_rate_10A,
		merchgrepint_nbr_of_months_10B		=:pte_mgf01.merchgrepint_nbr_of_months_10B,
		merchgrepint_INT_rate_10B			=:pte_mgf01.merchgrepint_INT_rate_10B,
		merchgrepint_MSF_rate_10B			=:pte_mgf01.merchgrepint_MSF_rate_10B,

		merchgrp_Amount_limit_2				= :pte_mgf01.merchgrp_Amount_limit_2,
		merchgrepint_nbr_of_months_11		=:pte_mgf01.merchgrepint_nbr_of_months_11,
		merchgrepint_INT_rate_11			=:pte_mgf01.merchgrepint_INT_rate_11,
		merchgrepint_MSF_rate_11			=:pte_mgf01.merchgrepint_MSF_rate_11,
		merchgrepint_nbr_of_months_12	   	=:pte_mgf01.merchgrepint_nbr_of_months_12,
		merchgrepint_INT_rate_12	   		=:pte_mgf01.merchgrepint_INT_rate_12,
		merchgrepint_MSF_rate_12	   		=:pte_mgf01.merchgrepint_MSF_rate_12,
		merchgrepint_nbr_of_months_13		=:pte_mgf01.merchgrepint_nbr_of_months_13,
		merchgrepint_INT_rate_13			=:pte_mgf01.merchgrepint_INT_rate_13,
		merchgrepint_MSF_rate_13			=:pte_mgf01.merchgrepint_MSF_rate_13,
		merchgrepint_nbr_of_months_14	   	=:pte_mgf01.merchgrepint_nbr_of_months_14,
		merchgrepint_INT_rate_14	   		=:pte_mgf01.merchgrepint_INT_rate_14,
		merchgrepint_MSF_rate_14	   		=:pte_mgf01.merchgrepint_MSF_rate_14,
		merchgrepint_nbr_of_months_15		=:pte_mgf01.merchgrepint_nbr_of_months_15,
		merchgrepint_INT_rate_15			=:pte_mgf01.merchgrepint_INT_rate_15,
		merchgrepint_MSF_rate_15			=:pte_mgf01.merchgrepint_MSF_rate_15,
		merchgrepint_nbr_of_months_16	   	=:pte_mgf01.merchgrepint_nbr_of_months_16,
		merchgrepint_INT_rate_16	   		=:pte_mgf01.merchgrepint_INT_rate_16,
		merchgrepint_MSF_rate_16	   		=:pte_mgf01.merchgrepint_MSF_rate_16,
		merchgrepint_nbr_of_months_17		=:pte_mgf01.merchgrepint_nbr_of_months_17,
		merchgrepint_INT_rate_17			=:pte_mgf01.merchgrepint_INT_rate_17,
		merchgrepint_MSF_rate_17			=:pte_mgf01.merchgrepint_MSF_rate_17,
		merchgrepint_nbr_of_months_18	   	=:pte_mgf01.merchgrepint_nbr_of_months_18,
		merchgrepint_INT_rate_18	   		=:pte_mgf01.merchgrepint_INT_rate_18,
		merchgrepint_MSF_rate_18	   		=:pte_mgf01.merchgrepint_MSF_rate_18,
		merchgrepint_nbr_of_months_19		=:pte_mgf01.merchgrepint_nbr_of_months_19,
		merchgrepint_INT_rate_19			=:pte_mgf01.merchgrepint_INT_rate_19,
		merchgrepint_MSF_rate_19			=:pte_mgf01.merchgrepint_MSF_rate_19,
		merchgrepint_nbr_of_months_20		=:pte_mgf01.merchgrepint_nbr_of_months_20,
		merchgrepint_INT_rate_20			=:pte_mgf01.merchgrepint_INT_rate_20,
		merchgrepint_MSF_rate_20			=:pte_mgf01.merchgrepint_MSF_rate_20,
		merchgrepint_nbr_of_months_20A		=:pte_mgf01.merchgrepint_nbr_of_months_20A,
		merchgrepint_INT_rate_20A			=:pte_mgf01.merchgrepint_INT_rate_20A,
		merchgrepint_MSF_rate_20A			=:pte_mgf01.merchgrepint_MSF_rate_20A,
		merchgrepint_nbr_of_months_20B		=:pte_mgf01.merchgrepint_nbr_of_months_20B,
		merchgrepint_INT_rate_20B			=:pte_mgf01.merchgrepint_INT_rate_20B,
		merchgrepint_MSF_rate_20B			=:pte_mgf01.merchgrepint_MSF_rate_20B,
		
		merchgrp_Amount_limit_3				= :pte_mgf01.merchgrp_Amount_limit_3,	
		merchgrepint_nbr_of_months_21		=:pte_mgf01.merchgrepint_nbr_of_months_21,
		merchgrepint_INT_rate_21			=:pte_mgf01.merchgrepint_INT_rate_21,
		merchgrepint_MSF_rate_21			=:pte_mgf01.merchgrepint_MSF_rate_21,
		merchgrepint_nbr_of_months_22	   	=:pte_mgf01.merchgrepint_nbr_of_months_22,
		merchgrepint_INT_rate_22	   		=:pte_mgf01.merchgrepint_INT_rate_22,
		merchgrepint_MSF_rate_22	   		=:pte_mgf01.merchgrepint_MSF_rate_22,
		merchgrepint_nbr_of_months_23		=:pte_mgf01.merchgrepint_nbr_of_months_23,
		merchgrepint_INT_rate_23			=:pte_mgf01.merchgrepint_INT_rate_23,
		merchgrepint_MSF_rate_23			=:pte_mgf01.merchgrepint_MSF_rate_23,
		merchgrepint_nbr_of_months_24	   	=:pte_mgf01.merchgrepint_nbr_of_months_24,
		merchgrepint_INT_rate_24	   		=:pte_mgf01.merchgrepint_INT_rate_24,
		merchgrepint_MSF_rate_24	   		=:pte_mgf01.merchgrepint_MSF_rate_24,
		merchgrepint_nbr_of_months_25		=:pte_mgf01.merchgrepint_nbr_of_months_25,
		merchgrepint_INT_rate_25			=:pte_mgf01.merchgrepint_INT_rate_25,
		merchgrepint_MSF_rate_25			=:pte_mgf01.merchgrepint_MSF_rate_25,
		merchgrepint_nbr_of_months_26	   	=:pte_mgf01.merchgrepint_nbr_of_months_26,
		merchgrepint_INT_rate_26	   		=:pte_mgf01.merchgrepint_INT_rate_26,
		merchgrepint_MSF_rate_26	   		=:pte_mgf01.merchgrepint_MSF_rate_26,
		merchgrepint_nbr_of_months_27		=:pte_mgf01.merchgrepint_nbr_of_months_27,
		merchgrepint_INT_rate_27			=:pte_mgf01.merchgrepint_INT_rate_27,
		merchgrepint_MSF_rate_27			=:pte_mgf01.merchgrepint_MSF_rate_27,
		merchgrepint_nbr_of_months_28	   	=:pte_mgf01.merchgrepint_nbr_of_months_28,
		merchgrepint_INT_rate_28	   		=:pte_mgf01.merchgrepint_INT_rate_28,
		merchgrepint_MSF_rate_28	   		=:pte_mgf01.merchgrepint_MSF_rate_28,
		merchgrepint_nbr_of_months_29		=:pte_mgf01.merchgrepint_nbr_of_months_29,
		merchgrepint_INT_rate_29			=:pte_mgf01.merchgrepint_INT_rate_29,
		merchgrepint_MSF_rate_29			=:pte_mgf01.merchgrepint_MSF_rate_29,
		merchgrepint_nbr_of_months_30		=:pte_mgf01.merchgrepint_nbr_of_months_30,
		merchgrepint_INT_rate_30			=:pte_mgf01.merchgrepint_INT_rate_30,
		merchgrepint_MSF_rate_30			=:pte_mgf01.merchgrepint_MSF_rate_30,
		merchgrepint_nbr_of_months_30A		=:pte_mgf01.merchgrepint_nbr_of_months_30A,
		merchgrepint_INT_rate_30A			=:pte_mgf01.merchgrepint_INT_rate_30A,
		merchgrepint_MSF_rate_30A			=:pte_mgf01.merchgrepint_MSF_rate_30A,
		merchgrepint_nbr_of_months_30B		=:pte_mgf01.merchgrepint_nbr_of_months_30B,
		merchgrepint_INT_rate_30B			=:pte_mgf01.merchgrepint_INT_rate_30B,
		merchgrepint_MSF_rate_30B			=:pte_mgf01.merchgrepint_MSF_rate_30B,
		
		merchgrp_Amount_limit_4				= :pte_mgf01.merchgrp_Amount_limit_4,			
		merchgrepint_nbr_of_months_31		=:pte_mgf01.merchgrepint_nbr_of_months_31,
		merchgrepint_INT_rate_31			=:pte_mgf01.merchgrepint_INT_rate_31,
		merchgrepint_MSF_rate_31			=:pte_mgf01.merchgrepint_MSF_rate_31,
		merchgrepint_nbr_of_months_32	   	=:pte_mgf01.merchgrepint_nbr_of_months_32,
		merchgrepint_INT_rate_32	   		=:pte_mgf01.merchgrepint_INT_rate_32,
		merchgrepint_MSF_rate_32	   		=:pte_mgf01.merchgrepint_MSF_rate_32,
		merchgrepint_nbr_of_months_33		=:pte_mgf01.merchgrepint_nbr_of_months_33,
		merchgrepint_INT_rate_33			=:pte_mgf01.merchgrepint_INT_rate_33,
		merchgrepint_MSF_rate_33			=:pte_mgf01.merchgrepint_MSF_rate_33,
		merchgrepint_nbr_of_months_34	   	=:pte_mgf01.merchgrepint_nbr_of_months_34,
		merchgrepint_INT_rate_34	   		=:pte_mgf01.merchgrepint_INT_rate_34,
		merchgrepint_MSF_rate_34	   		=:pte_mgf01.merchgrepint_MSF_rate_34,
		merchgrepint_nbr_of_months_35		=:pte_mgf01.merchgrepint_nbr_of_months_35,
		merchgrepint_INT_rate_35			=:pte_mgf01.merchgrepint_INT_rate_35,
		merchgrepint_MSF_rate_35			=:pte_mgf01.merchgrepint_MSF_rate_35,
		merchgrepint_nbr_of_months_36	   	=:pte_mgf01.merchgrepint_nbr_of_months_36,
		merchgrepint_INT_rate_36	   		=:pte_mgf01.merchgrepint_INT_rate_36,
		merchgrepint_MSF_rate_36	   		=:pte_mgf01.merchgrepint_MSF_rate_36,
		merchgrepint_nbr_of_months_37		=:pte_mgf01.merchgrepint_nbr_of_months_37,
		merchgrepint_INT_rate_37			=:pte_mgf01.merchgrepint_INT_rate_37,
		merchgrepint_MSF_rate_37			=:pte_mgf01.merchgrepint_MSF_rate_37,
		merchgrepint_nbr_of_months_38	   	=:pte_mgf01.merchgrepint_nbr_of_months_38,
		merchgrepint_INT_rate_38	   		=:pte_mgf01.merchgrepint_INT_rate_38,
		merchgrepint_MSF_rate_38	   		=:pte_mgf01.merchgrepint_MSF_rate_38,
		merchgrepint_nbr_of_months_39		=:pte_mgf01.merchgrepint_nbr_of_months_39,
		merchgrepint_INT_rate_39			=:pte_mgf01.merchgrepint_INT_rate_39,
		merchgrepint_MSF_rate_39			=:pte_mgf01.merchgrepint_MSF_rate_39,
		merchgrepint_nbr_of_months_40		=:pte_mgf01.merchgrepint_nbr_of_months_40,
		merchgrepint_INT_rate_40			=:pte_mgf01.merchgrepint_INT_rate_40,
		merchgrepint_MSF_rate_40			=:pte_mgf01.merchgrepint_MSF_rate_40,
		merchgrepint_nbr_of_months_40A		=:pte_mgf01.merchgrepint_nbr_of_months_40A,
		merchgrepint_INT_rate_40A			=:pte_mgf01.merchgrepint_INT_rate_40A,
		merchgrepint_MSF_rate_40A			=:pte_mgf01.merchgrepint_MSF_rate_40A,
		merchgrepint_nbr_of_months_40B		=:pte_mgf01.merchgrepint_nbr_of_months_40B,
		merchgrepint_INT_rate_40B			=:pte_mgf01.merchgrepint_INT_rate_40B,
		merchgrepint_MSF_rate_40B			=:pte_mgf01.merchgrepint_MSF_rate_40B
			

   WHERE merchant_group_id = :pte_mgf01.merchant_group_id ;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : MGF01 ,Fun_Name : db_update_mgf01_U , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }  
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_mgf01,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   return PTEMSG_OK;
}
/*************************************************************************************/


/*******************************************************************************/

BYTE db_select_tlf01_by_auth_nbr (pTLF01   tlf01_record, 
                        pTLF01         tlf01_ptr, 
						pCHAR          ErrorMsg )
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;

   char PrimaryKey[50];
   unsigned char rcode;
   int nCount;
   long nBCH01Amount, nTranAmount;
   char date_time[16] = "";

   EXEC SQL END DECLARE SECTION;


   memset( &db_tlf01, 0, sizeof( db_tlf01 ) );
   memset( &pte_bch10, 0, sizeof( pte_bch10 ) );
   strncpy( pte_bch10.card_nbr,		tlf01_record->card_num,			sizeof(pte_bch10.card_nbr) );
   strncpy( pte_bch10.tran_amount,	tlf01_record->reversal_amount,	sizeof(pte_bch10.tran_amount) );
   strncpy( pte_bch10.auth_number,	tlf01_record->auth_number,		sizeof(pte_bch10.auth_number) );
   strncpy( pte_bch10.processing_code, tlf01_record->processing_code, sizeof(pte_bch10.processing_code) );
   strncpy( pte_bch10.merchant_id,	tlf01_record->merchant_id,		sizeof(pte_bch10.merchant_id) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_bch10
   FROM bch10
   WHERE    card_nbr        = :pte_bch10.card_nbr        AND
            tran_amount     = :pte_bch10.tran_amount     AND 
            auth_number     = :pte_bch10.auth_number     AND
            processing_code = :pte_bch10.processing_code AND
            merchant_id     = :pte_bch10.merchant_id     AND 
            rownum          = 1;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_tlf01_by_auth_nbr_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }  
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_tlf01_by_auth_nbr,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch10 ((pBCH10)&pte_bch10);

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_tlf01
   FROM tlf01
   WHERE transaction_id  = :pte_bch10.transaction_id AND
   		 rownum          = 1;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_tlf01_by_auth_nbr , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }  
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_tlf01_by_auth_nbr,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_tlf01 (tlf01_ptr);

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DELETE FROM bch10
   WHERE card_nbr		 = :pte_bch10.card_nbr        AND
		 tran_amount 	 = :pte_bch10.tran_amount     AND 
		 auth_number 	 = :pte_bch10.auth_number     AND
		 processing_code = :pte_bch10.processing_code AND
		 merchant_id 	 = :pte_bch10.merchant_id ;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_tlf01_by_auth_nbr_D , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }  
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_tlf01_by_auth_nbr,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   PRINT("\n***********After select tlf01" ); 

	     memset(PrimaryKey, 0, sizeof(PrimaryKey));

   strncpy ( PrimaryKey,   tlf01_ptr->terminal_id, 9 );
   strcat ( PrimaryKey + 9,   "ACTIVE" );
   strncpy ( PrimaryKey + BCH01_MERCHANT_ID_OFFSET,   tlf01_ptr->merchant_id, 15 );
       PRINT(PrimaryKey ); 

   rcode = db_select_bch01 ( PrimaryKey, (pBCH01)&pte_bch01, ErrorMsg );
   PRINT("\n************After select bch01" ); 


	if ( PTEMSG_OK == rcode )
	{   
       PRINT("Found bch01" ); 
       nCount = atoi(pte_bch01.total_credit_cnt);
       sprintf(pte_bch01.total_credit_cnt, "%04d", nCount-1);
	   nTranAmount = atol ( pte_tlf01.total_amount );
	   /*printf ( "\nBefore conversion %d",  nTranAmount);*/
       nBCH01Amount = atol(pte_bch01.total_credit_amt) - nTranAmount;
	   /*printf ( "\nResult %d",  nBCH01Amount);*/
	   sprintf(pte_bch01.total_credit_amt, "%012d", nBCH01Amount);

       EXEC SQL WHENEVER SQLERROR CONTINUE;
       if ( db_error_statics_flag == true )
   	   {
      		start_time = ptetime_get_time();
       }
   
	   EXEC SQL UPDATE bch01 
	   SET total_credit_cnt          = :pte_bch01.total_credit_cnt,           
		   total_credit_amt          = :pte_bch01.total_credit_amt               

	   WHERE device_id   = :pte_bch01.device_id   AND 
	   		 merchant_id = :pte_bch01.merchant_id AND 
	   		 batch_nbr   = :pte_bch01.batch_nbr   AND
			 open_date   = :pte_bch01.open_date   AND 
			 open_time   = :pte_bch01.open_time; 
       
       if ( db_error_statics_flag == true )
       {
     	 	end_time = ptetime_get_time();
     	 	duration = end_time - start_time;
    	 	if(duration >= db_error_statics_value)
	     	{
	  		 	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_select_tlf01_by_auth_nbr , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 	}
       }  
	   if ( SQLCODE != 0  )
	   {
			memset(er_buf,0x00,sizeof(er_buf));
			sprintf(er_buf,"In db_select_tlf01_by_auth_nbr,ST1:%d,ST2:%d_4",DB_MsgSubtype1,DB_MsgSubtype2);
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
	  }
     PRINT("After update bch01" ); 

 
	}


   return PTEMSG_OK;
}
/***********************************************************************************/

/*******************************************************************************/

BYTE db_select_tlf01_mp_by_auth_nbr (pTLF01   tlf01_record, 
                        pTLF01         tlf01_ptr, 
						pCHAR          ErrorMsg )
{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;

   char PrimaryKey[50];
   unsigned char rcode;
   int nCount;
   long nBCH01_MPAmount, nTranAmount;
   char date_time[16] = "";

   EXEC SQL END DECLARE SECTION;


   memset( &db_tlf01, 0, sizeof( db_tlf01 ) );
   memset( &pte_bch10, 0, sizeof( pte_bch10 ) );
   strncpy( pte_bch10.card_nbr,		tlf01_record->card_num,			sizeof(pte_bch10.card_nbr) );
   strncpy( pte_bch10.tran_amount,	tlf01_record->reversal_amount,	sizeof(pte_bch10.tran_amount) );
   strncpy( pte_bch10.auth_number,	tlf01_record->auth_number,		sizeof(pte_bch10.auth_number) );
   strncpy( pte_bch10.processing_code, tlf01_record->processing_code, sizeof(pte_bch10.processing_code) );
   strncpy( pte_bch10.merchant_id,	tlf01_record->merchant_id,		sizeof(pte_bch10.merchant_id) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_bch10
   FROM bch10
   WHERE    card_nbr    	= :pte_bch10.card_nbr 		 AND
            tran_amount 	= :pte_bch10.tran_amount 	 AND 
            auth_number 	= :pte_bch10.auth_number 	 AND
            processing_code = :pte_bch10.processing_code AND
            merchant_id 	= :pte_bch10.merchant_id ;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_tlf01_mp_by_auth_nbr_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }  
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_tlf01_mp_by_auth_nbr,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch10 ((pBCH10)&pte_bch10);

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_tlf01
   FROM tlf01
   WHERE transaction_id  = :pte_bch10.transaction_id AND
   	     rownum          = 1;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_tlf01_mp_by_auth_nbr , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }     
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_tlf01_mp_by_auth_nbr,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_tlf01 (tlf01_ptr);

   EXEC SQL DELETE FROM bch10
   WHERE card_nbr		 = :pte_bch10.card_nbr 		  AND
		 tran_amount 	 = :pte_bch10.tran_amount	  AND 
		 auth_number 	 = :pte_bch10.auth_number 	  AND
		 processing_code = :pte_bch10.processing_code AND
		 merchant_id 	 = :pte_bch10.merchant_id ;
   
   if ( db_error_statics_flag == true )
   {
     	 end_time = ptetime_get_time();
     	 duration = end_time - start_time;
    	 if(duration >= db_error_statics_value)
	     {
	  		 memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_tlf01_mp_by_auth_nbr_D , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 }
   }  
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_tlf01_mp_by_auth_nbr,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   PRINT("\n***********After select tlf01" ); 

	     memset(PrimaryKey, 0, sizeof(PrimaryKey));

   strncpy ( PrimaryKey,   tlf01_ptr->terminal_id, 9 );
   strcat ( PrimaryKey + 9,   "ACTIVE" );
   strncpy ( PrimaryKey + BCH01_MP_MERCHANT_ID_OFFSET,   tlf01_ptr->merchant_id, 15 );
       PRINT(PrimaryKey ); 

   rcode = db_select_bch01_mp ( PrimaryKey, (pBCH01_MP)&pte_bch01_mp, ErrorMsg );
   PRINT("\n************After select bch01_mp" ); 


	if ( PTEMSG_OK == rcode )
	{   
       PRINT("Found bch01_mp" ); 
       nCount = atoi(pte_bch01_mp.total_credit_cnt);
       sprintf(pte_bch01_mp.total_credit_cnt, "%04d", nCount-1);
	   nTranAmount = atol ( pte_tlf01.total_amount );
	   /*printf ( "\nBefore conversion %d",  nTranAmount);*/
       nBCH01_MPAmount = atol(pte_bch01_mp.total_credit_amt) - nTranAmount;
	   /*printf ( "\nResult %d",  nBCH01_MPAmount);*/
	   sprintf(pte_bch01_mp.total_credit_amt, "%012d", nBCH01_MPAmount);

       EXEC SQL WHENEVER SQLERROR CONTINUE;
       
       if ( db_error_statics_flag == true )
   	   {
      		start_time = ptetime_get_time();
       }
       
	   EXEC SQL UPDATE bch01_mp 
	   SET total_credit_cnt          = :pte_bch01_mp.total_credit_cnt,           
		   total_credit_amt          = :pte_bch01_mp.total_credit_amt               

	   WHERE device_id   = :pte_bch01_mp.device_id   AND 
	         merchant_id = :pte_bch01_mp.merchant_id AND 
	         batch_nbr   = :pte_bch01_mp.batch_nbr   AND
			 open_date   = :pte_bch01_mp.open_date   AND 
			 open_time   = :pte_bch01_mp.open_time; 
       
       if ( db_error_statics_flag == true )
       {
     	 	end_time = ptetime_get_time();
     	 	duration = end_time - start_time;
    	 	if(duration >= db_error_statics_value)
	     	{
	  			memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			 	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10_MP ,Fun_Name : db_select_tlf01_mp_by_auth_nbr , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			 	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	 	}
       }  
	   if ( SQLCODE != 0  )
	   {
			memset(er_buf,0x00,sizeof(er_buf));
			sprintf(er_buf,"In db_select_tlf01_mp_by_auth_nbr,ST1:%d,ST2:%d_4",DB_MsgSubtype1,DB_MsgSubtype2);
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
	   }
     PRINT("After update bch01_mp" ); 

 
	}


   return PTEMSG_OK;
}

/*************************************************************************************/
BYTE db_select_mgf01 (  pCHAR          Primary_key, 
                        pMGF01         mgf01_ptr, 
                        pCHAR          ErrorMsg )

{
   INT  retval;
   memset( &db_mgf01, 0, sizeof( db_mgf01 ) );
   strncpy( pte_mgf01.merchant_group_id, Primary_key , sizeof(pte_mgf01.merchant_group_id) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_mgf01
   FROM mgf01
   WHERE merchant_group_id = :pte_mgf01.merchant_group_id ;
   
   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  	   memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		   sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : MGF01 ,Fun_Name : db_select_mgf01 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
		   Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }    
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_mgf01,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_mgf01 (mgf01_ptr);

   return PTEMSG_OK;
}
/*************************************************************************************/


/***********************************************************************************/


BYTE db_get_tlf01_gui_list_dynamic (pTLF01_LIMITS    Tlf01_ptr, 
                        pTLF01_GUI_LIST Tlf01_Gui_List, 
                        pCHAR          ErrorMsg )
{
   INT  retval;

    EXEC SQL BEGIN DECLARE SECTION;
    char transaction_id [21];
	char card_num_min [21];
	char card_num_max [21];
	char date_yyyymmdd_start[9];
	char date_yyyymmdd_end[9];
	char time_hhmmss_start[7];
	char time_hhmmss_end[7];
	char merchant_id_min[16];
	char merchant_id_max[16];
	char terminal_id_min[9];
	char terminal_id_max[9];

    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Tlf01_Gui_List, 0, sizeof(TLF01_GUI_LIST) );
   strcpy( Tlf01_Gui_List->num_returned,"0");
   strncpy( transaction_id,		     Tlf01_ptr->transaction_id,		sizeof(transaction_id) );
   strncpy( card_num_min,			 Tlf01_ptr->card_num_min,		sizeof(card_num_min) );
   strncpy( card_num_max,			 Tlf01_ptr->card_num_max,		sizeof(card_num_max) );
   strncpy( date_yyyymmdd_start,	 Tlf01_ptr->date_yyyymmdd_start,	sizeof(date_yyyymmdd_start) );
   strncpy( date_yyyymmdd_end,		 Tlf01_ptr->date_yyyymmdd_end,		sizeof(date_yyyymmdd_end) );
   strncpy( time_hhmmss_start,		 Tlf01_ptr->time_hhmmss_start,		sizeof(time_hhmmss_start) );
   strncpy( time_hhmmss_end,		 Tlf01_ptr->time_hhmmss_end,		sizeof(time_hhmmss_end) );
   strncpy( merchant_id_min,		 Tlf01_ptr->merchant_id_min,	sizeof(merchant_id_min) );
   strncpy( merchant_id_max,		 Tlf01_ptr->merchant_id_max,	sizeof(merchant_id_max) );
   strncpy( terminal_id_min,		 Tlf01_ptr->terminal_id_min,	sizeof(terminal_id_min) );
   strncpy( terminal_id_max,		 Tlf01_ptr->terminal_id_max,	sizeof(terminal_id_max) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   EXEC SQL DECLARE tlf01_cursor11 CURSOR FOR
         SELECT * from tlf01
         WHERE  transaction_id >= :transaction_id AND
				nvl(card_num,0) >= :card_num_min AND nvl(card_num,0) <= :card_num_max AND
				nvl(date_yyyymmdd,0) >= :date_yyyymmdd_start AND nvl(date_yyyymmdd,0) <= :date_yyyymmdd_end AND
				nvl(time_hhmmss,0) >= :time_hhmmss_start AND nvl(time_hhmmss,0) <= :time_hhmmss_end AND
				nvl(merchant_id,0) >= :merchant_id_min AND nvl(merchant_id,0) <= :merchant_id_max AND
				nvl(terminal_id,0) >= :terminal_id_min AND nvl(terminal_id,0) <= :terminal_id_max 

				ORDER BY transaction_id;

   if ( db_error_statics_flag == true )
   {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  	   memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		   sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_get_tlf01_gui_list_dynamic , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }    
   EXEC SQL WHENEVER SQLERROR goto sql_error;
      EXEC SQL OPEN tlf01_cursor11;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
      memset(&db_tlf01, 0x00, sizeof(db_tlf01));
      EXEC SQL FETCH tlf01_cursor11
      INTO :db_tlf01;

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         	SQL_CODE = SQLCODE;
         	EXEC SQL CLOSE tlf01_cursor11;
			memset(er_buf,0x00,sizeof(er_buf));
			sprintf(er_buf,"In db_get_tlf01_gui_list_dynamic,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
      }
	  db_to_tlf01(&Tlf01_Gui_List->tlf01_structure[temp]);
      itoa(temp + 1, Tlf01_Gui_List->num_returned, 10);
   }

   EXEC SQL CLOSE tlf01_cursor11;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_tlf01_gui_list_dynamic,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	

}

/*********************************************************************************************/
/*************************************************************************************/
BYTE db_get_mgf01_gui_list( pCHAR Primary_Key, BYTE Select_Flag,
                            pMGF01_GUI_LIST Mgf01_Gui_List,
                            pCHAR ErrorMsg )

{
   INT  retval;

   EXEC SQL BEGIN DECLARE SECTION;
   char merchant_group_id[16];
   varchar db_merchant_group_id[15];
   int temp;
   EXEC SQL END DECLARE SECTION;

   memset( Mgf01_Gui_List, 0, sizeof(MGF01_GUI_LIST) );
   strcpy( Mgf01_Gui_List->num_returned,"0");
   strncpy( merchant_group_id, Primary_Key , sizeof(merchant_group_id) );

   if(Select_Flag == 0)
   {

      if ( db_error_statics_flag == true )
      {
      	  start_time = ptetime_get_time();
   	  }
      EXEC SQL DECLARE mgf01_cursor1 CURSOR FOR
         SELECT merchant_group_id from mgf01
         WHERE  merchant_group_id >= :merchant_group_id
         ORDER BY merchant_group_id, merchant_group_id;
      if ( db_error_statics_flag == true )
      {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  	   memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		   sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : MGF01 ,Fun_Name : db_get_mgf01_gui_list , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }    
   }
   else
   {

      if ( db_error_statics_flag == true )
      {
      	  start_time = ptetime_get_time();
   	  }
      EXEC SQL DECLARE mgf01_cursor2 CURSOR FOR
         SELECT merchant_group_id from mgf01
         WHERE  merchant_group_id >= :merchant_group_id
         ORDER BY merchant_group_id, merchant_group_id;
      if ( db_error_statics_flag == true )
      {
     	end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  	   memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		   sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : MGF01 ,Fun_Name : db_get_mgf01_gui_list , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
      }   
   } 
   
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   if(Select_Flag == 0)
      EXEC SQL OPEN mgf01_cursor1;
   else
      EXEC SQL OPEN mgf01_cursor2;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < GUI_MAX_LIST_SIZE ; temp++ )
   {
      memset(&db_mgf01, 0x00, sizeof(db_mgf01));
      if(Select_Flag == 0)
      {
         EXEC SQL FETCH mgf01_cursor1
         INTO  db_merchant_group_id;
      }
      else
      {
         EXEC SQL FETCH mgf01_cursor2
         INTO db_merchant_group_id;
      }

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         if(Select_Flag == 0)
            EXEC SQL CLOSE mgf01_cursor1;
         else
            EXEC SQL CLOSE mgf01_cursor2;
         
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_mgf01_gui_list,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
      }
      memcpy( Mgf01_Gui_List->merchant_group_info[temp].merchant_group_id, db_merchant_group_id.arr, db_merchant_group_id.len );
      itoa(temp + 1, Mgf01_Gui_List->num_returned, 10);
   }

   if(Select_Flag == 0)
      EXEC SQL CLOSE mgf01_cursor1;
   else
      EXEC SQL CLOSE mgf01_cursor2;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_mgf01_gui_list,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
}

/*********************************************************************************************/
/*************************************************************************************/
BYTE db_get_mgf01_list( pMGF01_GUI_DROPLIST Mgf01_Gui_Droplist,
                        pCHAR ErrorMsg )
{

    EXEC SQL BEGIN DECLARE SECTION;
    int temp;
    EXEC SQL END DECLARE SECTION;

   memset( Mgf01_Gui_Droplist, 0, sizeof(MGF01_GUI_DROPLIST) );
   strcpy(Mgf01_Gui_Droplist->num_returned,"0");

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL DECLARE Mgf01_Gui_Droplist_cursor CURSOR FOR
      SELECT * from mgf01;
   
   if ( db_error_statics_flag == true )
   {
        end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  	   memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		   sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : MGF01 ,Fun_Name : db_get_mgf01_list , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
		   Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   } 
   
   EXEC SQL WHENEVER SQLERROR goto sql_error;
   EXEC SQL OPEN Mgf01_Gui_Droplist_cursor;

   EXEC SQL WHENEVER SQLERROR goto sql_error2;
   EXEC SQL WHENEVER NOTFOUND DO break;
   for ( temp = 0; temp < SERVICE_LIST_SIZE; temp++ )
   {
      EXEC SQL FETCH Mgf01_Gui_Droplist_cursor
      INTO :db_mgf01;

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE Mgf01_Gui_Droplist_cursor;
         
			memset(er_buf,0x00,sizeof(er_buf));
			sprintf(er_buf,"In db_get_mgf01_list,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
	
      }
      db_to_mgf01(&Mgf01_Gui_Droplist->merchant_group_info[temp]);
      itoa(temp + 1, Mgf01_Gui_Droplist->num_returned, 10);
   }

   EXEC SQL CLOSE Mgf01_Gui_Droplist_cursor;

   return PTEMSG_OK;

sql_error:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL WHENEVER NOTFOUND CONTINUE;
   		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_get_mgf01_list,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
}


/*************************************************************************************/

/*********************************************************************************************/

BYTE db_select_bch10_by_auth_nbr (pBCH10 bch10_record,
                                  pBCH10 bch10_ptr,
                                  pCHAR  ErrorMsg)
{
   INT  retval;

    EXEC SQL BEGIN DECLARE SECTION;

       char PrimaryKey[50];
       unsigned char rcode;
       int nCount;
       long nBCH01Amount, nTranAmount;
       char date_time[16] = "";

   EXEC SQL END DECLARE SECTION;


   memset( &db_bch10, 0, sizeof db_bch10) ;
   memset( &pte_bch10, 0, sizeof pte_bch10) ;

   strncpy (pte_bch10.card_nbr,         bch10_record->card_nbr,        sizeof pte_bch10.card_nbr) ;
   strncpy (pte_bch10.tran_amount,      bch10_record->tran_amount,     sizeof pte_bch10.tran_amount) ;
   strncpy (pte_bch10.auth_number,      bch10_record->auth_number,     sizeof pte_bch10.auth_number) ;
   strncpy (pte_bch10.processing_code,  bch10_record->processing_code, sizeof pte_bch10.processing_code) ;
   strncpy (pte_bch10.merchant_id,      bch10_record->merchant_id,     sizeof pte_bch10.merchant_id) ;

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_bch10
   FROM  bch10
   WHERE card_nbr 	 	 = :pte_bch10.card_nbr        AND 
   		 tran_amount 	 = :pte_bch10.tran_amount     AND 
   		 auth_number 	 = :pte_bch10.auth_number     AND 
   		 processing_code = :pte_bch10.processing_code AND 
   		 merchant_id 	 = :pte_bch10.merchant_id     AND 
   		 rownum 		 = 1 ;
   
   if ( db_error_statics_flag == true )
   {
        end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  	   memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		   sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_bch10_by_auth_nbr_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
		   Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   } 
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch10_by_auth_nbr,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch10 (bch10_ptr);

    if ( db_error_statics_flag == true )
    {
       start_time = ptetime_get_time();
    }
    EXEC SQL DELETE FROM bch10
    WHERE   card_nbr		= :pte_bch10.card_nbr 		 AND
		    tran_amount 	= :pte_bch10.tran_amount 	 AND 
			auth_number 	= :pte_bch10.auth_number 	 AND
			processing_code = :pte_bch10.processing_code AND
			merchant_id 	= :pte_bch10.merchant_id ;
			
    if ( db_error_statics_flag == true )
    {
        end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  	   memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		   sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_bch10_by_auth_nbr_D , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
		   Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
    } 
    if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch10_by_auth_nbr,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

    memset(PrimaryKey, 0, sizeof(PrimaryKey));

    strncpy (PrimaryKey,   bch10_record->primary_key.device_id, 9 );
    strcat  (PrimaryKey + 9,   "ACTIVE" );
    strncpy ( PrimaryKey + BCH01_MERCHANT_ID_OFFSET,   bch10_record->merchant_id, 15 );
   
    rcode = db_select_bch01 (PrimaryKey, (pBCH01)&pte_bch01, ErrorMsg );
   
    if (PTEMSG_OK == rcode )
	{   
       PRINT("Found bch01" ); 
       nCount = atoi(pte_bch01.total_credit_cnt);
       sprintf (pte_bch01.total_credit_cnt, "%04d", nCount-1);
	   nTranAmount = atol (pte_bch10.tran_amount );
	   nBCH01Amount = atol (pte_bch01.total_credit_amt) - nTranAmount;
	   sprintf (pte_bch01.total_credit_amt, "%012d", nBCH01Amount);

       EXEC SQL WHENEVER SQLERROR CONTINUE;
       
       if ( db_error_statics_flag == true )
       {
       		start_time = ptetime_get_time();
       }
    
	   EXEC SQL UPDATE bch01 
	   SET total_credit_cnt  = :pte_bch01.total_credit_cnt,           
		   total_credit_amt  = :pte_bch01.total_credit_amt               

	   WHERE device_id   = :pte_bch01.device_id   AND 
	   		 batch_nbr   = :pte_bch01.batch_nbr   AND 
	   		 merchant_id = :pte_bch01.merchant_id AND 
	   		 open_date   = :pte_bch01.open_date   AND 
	   		 open_time   = :pte_bch01.open_time; 
       
       if ( db_error_statics_flag == true )
       {
        	end_time = ptetime_get_time();
     		duration = end_time - start_time;
    		if(duration >= db_error_statics_value)
	    	{
	  	   		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		   		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_select_bch10_by_auth_nbr , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
		   		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
       } 
	   if ( SQLCODE != 0  )
		{
			memset(er_buf,0x00,sizeof(er_buf));
			sprintf(er_buf,"In db_select_bch10_by_auth_nbr,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
	    }
        PRINT("After update bch01" ); 
    }
    return PTEMSG_OK;
} /* db_select_bch10_by_auth_nbr */

/*************************************************************************************/

BYTE db_select_bch10_mp_by_auth_nbr (pBCH10 bch10_record,
                                  pBCH10 bch10_ptr,
                                  pCHAR  ErrorMsg)
{
   INT  retval;

    EXEC SQL BEGIN DECLARE SECTION;

       char PrimaryKey[50];
       unsigned char rcode;
       int nCount;
       long nBCH01_MPAmount, nTranAmount;
       char date_time[16] = "";

   EXEC SQL END DECLARE SECTION;


   memset( &db_bch10, 0, sizeof db_bch10) ;
   memset( &pte_bch10, 0, sizeof pte_bch10) ;

   strncpy (pte_bch10.card_nbr,         bch10_record->card_nbr,        sizeof pte_bch10.card_nbr) ;
   strncpy (pte_bch10.tran_amount,      bch10_record->tran_amount,     sizeof pte_bch10.tran_amount) ;
   strncpy (pte_bch10.auth_number,      bch10_record->auth_number,     sizeof pte_bch10.auth_number) ;
   strncpy (pte_bch10.processing_code,  bch10_record->processing_code, sizeof pte_bch10.processing_code) ;
   strncpy (pte_bch10.merchant_id,      bch10_record->merchant_id,     sizeof pte_bch10.merchant_id) ;

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_bch10
   FROM  bch10
   WHERE card_nbr 		 = :pte_bch10.card_nbr     		AND 
   		 tran_amount 	 = :pte_bch10.tran_amount     	AND 
   		 auth_number 	 = :pte_bch10.auth_number     	AND
   		 processing_code = :pte_bch10.processing_code   AND 
   		 merchant_id 	 = :pte_bch10.merchant_id     	AND
   		 rownum 		 = 1 ;
   
   if ( db_error_statics_flag == true )
   {
        end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  	   memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		   sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_bch10_mp_by_auth_nbr_S , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
		   Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   }  
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch10_mp_by_auth_nbr,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_bch10 (bch10_ptr);

    if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
    EXEC SQL DELETE FROM bch10
    WHERE   card_nbr		= :pte_bch10.card_nbr 		 AND
		    tran_amount 	= :pte_bch10.tran_amount 	 AND 
			auth_number 	= :pte_bch10.auth_number 	 AND
			processing_code = :pte_bch10.processing_code AND
			merchant_id 	= :pte_bch10.merchant_id ;
    
    if ( db_error_statics_flag == true )
    {
        end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  	   memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		   sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_bch10_mp_by_auth_nbr_D , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
		   Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
    }  
    if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
    {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch10_mp_by_auth_nbr,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

    memset(PrimaryKey, 0, sizeof(PrimaryKey));

    strncpy (PrimaryKey,   bch10_record->primary_key.device_id, 9 );
    strcat  (PrimaryKey + 9,   "ACTIVE" );
	strncpy ( PrimaryKey + BCH01_MERCHANT_ID_OFFSET,   bch10_record->merchant_id, 15 );
   
    rcode = db_select_bch01_mp (PrimaryKey, (pBCH01_MP)&pte_bch01_mp, ErrorMsg );
   
    if (PTEMSG_OK == rcode )
	{   
       PRINT("Found bch01_mp" ); 
       nCount = atoi(pte_bch01_mp.total_credit_cnt);
       sprintf (pte_bch01_mp.total_credit_cnt, "%04d", nCount-1);
	   nTranAmount = atol (pte_bch10.tran_amount );
	   nBCH01_MPAmount = atol (pte_bch01_mp.total_credit_amt) - nTranAmount;
	   sprintf (pte_bch01_mp.total_credit_amt, "%012d", nBCH01_MPAmount);

       EXEC SQL WHENEVER SQLERROR CONTINUE;
       if ( db_error_statics_flag == true )
   	   {
      		start_time = ptetime_get_time();
       }
       
	   EXEC SQL UPDATE bch01_mp 
	   SET total_credit_cnt  = :pte_bch01_mp.total_credit_cnt,           
		   total_credit_amt  = :pte_bch01_mp.total_credit_amt               

	   WHERE device_id   = :pte_bch01_mp.device_id   AND 
	   		 merchant_id = :pte_bch01_mp.merchant_id AND 
	   		 batch_nbr   = :pte_bch01_mp.batch_nbr   AND
			 open_date   = :pte_bch01_mp.open_date   AND 
			 open_time   = :pte_bch01_mp.open_time; 
       
       if ( db_error_statics_flag == true )
       {
        	end_time = ptetime_get_time();
     		duration = end_time - start_time;
    		if(duration >= db_error_statics_value)
	    	{
	  	   		memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		   		sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH01 ,Fun_Name : db_select_bch10_mp_by_auth_nbr , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
		   		Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  		}
       }  
	   if ( SQLCODE != 0  )
	   {
			memset(er_buf,0x00,sizeof(er_buf));
			sprintf(er_buf,"In db_select_bch10_mp_by_auth_nbr,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			strcat(er_buf,ErrorMsg);
			Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
			return DB_rcode;
	   }
        PRINT("After update bch01_mp" ); 
    }
    return PTEMSG_OK;
} /* db_select_bch10_by_auth_nbr */



/*************************************************************************************/

/************************************************************************************/

BYTE db_select_bch10_by_original_transaction (pBCH10 bch10_record,
                                              pBCH10 bch10_ptr,
                                              pCHAR  ErrorMsg)
{
   INT  retval;

   memset( &db_bch10, 0, sizeof db_bch10) ;
   memset( &pte_bch10, 0, sizeof pte_bch10) ;

   strncpy (pte_bch10.device_id, bch10_record->primary_key.device_id, sizeof pte_bch10.device_id) ;
   strncpy (pte_bch10.batch_nbr, bch10_record->primary_key.batch_nbr, sizeof pte_bch10.batch_nbr) ;
   strncpy (pte_bch10.sys_trace_audit_num, bch10_record->sys_trace_audit_num, sizeof pte_bch10.sys_trace_audit_num) ;
   strncpy (pte_bch10.merchant_id, bch10_record->merchant_id, sizeof pte_bch10.merchant_id) ;
   strncpy (pte_bch10.card_nbr, bch10_record->card_nbr, sizeof pte_bch10.card_nbr) ;
   strncpy (pte_bch10.tran_amount, bch10_record->tran_amount, sizeof pte_bch10.tran_amount) ;

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
   INTO :db_bch10
   FROM bch10
   WHERE 
   device_id 		   = :pte_bch10.device_id AND 
   merchant_id 		   = :pte_bch10.merchant_id AND
   batch_nbr 		   = :pte_bch10.batch_nbr AND
   sys_trace_audit_num = :pte_bch10.sys_trace_audit_num AND 
   card_nbr 		   = :pte_bch10.card_nbr AND
   tran_amount 		   = :pte_bch10.tran_amount AND
   rownum 			   = 1;
   
   if ( db_error_statics_flag == true )
   {
        end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  	   	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		   	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH10 ,Fun_Name : db_select_bch10_by_original_transaction , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
		   	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   } 
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch10_by_original_transaction,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
   
   db_to_bch10 (bch10_ptr);

   return PTEMSG_OK;

} /* db_select_bch10_by_original_transaction */


BYTE db_select_tlf01_by_auth_term_nbr (pTLF01    tlf01_record, 
									   pTLF01         tlf01_ptr, 
								       pCHAR          ErrorMsg )
{
   INT  retval;

   memset ( &db_tlf01, 0, sizeof( db_tlf01 ) );
   strncpy( pte_tlf01.merchant_id, tlf01_record->merchant_id, sizeof(pte_tlf01.merchant_id) );
   strncpy( pte_tlf01.total_amount,tlf01_record->total_amount, sizeof(pte_tlf01.total_amount) );
   strncpy( pte_tlf01.auth_number, tlf01_record->auth_number, sizeof(pte_tlf01.auth_number) );
   strncpy( pte_tlf01.card_num,    tlf01_record->card_num,    sizeof(pte_tlf01.card_num) );
   strncpy( pte_tlf01.deferred_term_length, tlf01_record->deferred_term_length, sizeof(pte_tlf01.deferred_term_length) );
   strncpy( pte_tlf01.response_code, tlf01_record->response_code, sizeof(pte_tlf01.response_code) );

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   /* Force usage of the card number index. */
   EXEC SQL SELECT /*+ index(TLF01 IDX_TLF01_CARD_NUM) */  *
   INTO :db_tlf01
   FROM tlf01
   WHERE card_num    = :pte_tlf01.card_num AND
         merchant_id = :pte_tlf01.merchant_id AND 
         total_amount = :pte_tlf01.total_amount AND 
         auth_number = :pte_tlf01.auth_number AND
         deferred_term_length = :pte_tlf01.deferred_term_length AND
         response_code = :pte_tlf01.response_code;

   if ( db_error_statics_flag == true )
   {
        end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  	   	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		   	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : TLF01 ,Fun_Name : db_select_tlf01_by_auth_term_nbr , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
		   	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   } 
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_tlf01_by_auth_term_nbr,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);		
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}

   db_to_tlf01 (tlf01_ptr);

   return PTEMSG_OK;
} /* end db_select_tlf01_by_auth_term_nbr*/


/******************************************************************************
 *
 *  NAME:         db_select_emvraw
 *
 *  DESCRIPTION:  This function makes the call to the database to select a
 *                record from EMV_RAW.
 *
 *  INPUTS:       emvraw_ptr - EMV_RAW structure
 *
 *  OUTPUTS:      ErrorMsg - Error message if database call failed.
 *
 *  RTRN VALUE:   A PTE code is returned:
 *                       PTEMSG_OK  if no errors else a code to identify
 *                       the reason for the failure.
 *
 ******************************************************************************/
BYTE db_select_emvraw( pCHAR     Primary_key, 
                       pEMV_RAW  emvraw_ptr, 
                       pCHAR     ErrorMsg )
{
   BYTE retval;

   memset( &db_emv_raw, 0x00, sizeof(db_emv_raw) );
   memset( &pte_tlf01,   0x00, sizeof(pte_tlf01 ) );
   memcpy( pte_tlf01.transaction_id, Primary_key, sizeof(pte_tlf01.transaction_id));

   if ( db_error_statics_flag == true )
   {
      start_time = ptetime_get_time();
   }
   
   EXEC SQL SELECT *
            INTO  :db_emv_raw
            FROM   EMV_RAW
            WHERE  transaction_id = :pte_tlf01.transaction_id;
   
   if ( db_error_statics_flag == true )
   {
        end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  	   	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		   	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : EMV_RAW ,Fun_Name : db_select_emvraw , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
		   	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   } 
   if ( SQLCODE != 0 )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_emvraw,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
	    dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);	
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
      	memset( emvraw_ptr, 0x00, sizeof(EMV_RAW));
      	retval = PTEMSG_NOT_FOUND;
   }
   else
   {
      memcpy( emvraw_ptr->transaction_id, db_emv_raw.tran_id,           sizeof(db_emv_raw.tran_id)  );   
      memcpy( emvraw_ptr->DATA_LENGTH,    db_emv_raw.len,               sizeof(db_emv_raw.len)      );
      memcpy( emvraw_ptr->RAW_DATA,      &db_emv_raw.emvblock.emv_data, sizeof(emvraw_ptr->RAW_DATA));
      memcpy( emvraw_ptr->system_date,    db_emv_raw.sys_date,          sizeof(db_emv_raw.sys_date) );
      retval = PTEMSG_OK;
   }
   return( retval );   
}



/*****************************************************************************
NAME:			Convert_Amt_To_Auth_Tx_String_Format
DESCRIPTION:	Converts from a double value to a string value
				
INPUTS:			
				nAmount:	the value to be converted in double
OUTPUTS:		strAmount	the pointer to the string that contains the converted amount
RETURNS:        false  if error
                true   if no error
AUTHOR:         Sanjoy Dasgupta
MODIFIED BY:	
*****************************************************************************/
int Convert_Amt_To_Auth_Tx_String_Format 
                              (double nAmount, char* strAmount)
{
	char strTemp[256] = {0} ;
	int  nStringLength = 0 ;
	int  nIndex = 0 ;

	gcvt (nAmount*100, 15, strTemp) ; // choice of 15 is arbitrary

	nStringLength = strlen (strTemp) ;
	// Discard all characters after the decimal point, if present
	for (nIndex = 0; nIndex < nStringLength ; nIndex++)
	{
		if ('.' == strTemp[nIndex])
		{
			strTemp[nIndex] = 0 ;
			break ;
		}
	}

	strcpy (strAmount, strTemp) ;
	return 1 ;
} /* Convert_Amt_To_Auth_Tx_String_Format */

/*************************************************************************************/
BYTE db_update_bch20_preauth_flag_by_card_num( pBCH20 bch20_ptr, pCHAR ErrorMsg)
{
  	bch20_to_db( bch20_ptr );

	EXEC SQL SELECT *
 	INTO  :db_bch20
  	FROM  BCH20
  	WHERE batch_nbr   = :pte_bch20.batch_nbr   AND 
  		  merchant_id = :pte_bch20.merchant_id AND 
  		  card_nbr    = :pte_bch20.card_nbr    AND 
  		  rownum      = 1
        FOR Update NOWAIT;
        
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch20_preauth_flag_by_card_num_S,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
      dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg);
		strcat(er_buf,ErrorMsg);	
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
      return PTEMSG_UPDATE_FAILED;
   }
   
   EXEC SQL UPDATE bch20
   SET product5_code = 'procsd'
   WHERE batch_nbr   = :pte_bch20.batch_nbr   AND 
   		 merchant_id = :pte_bch20.merchant_id AND 
   		 card_nbr    = :pte_bch20.card_nbr;

   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_update_bch20_preauth_flag_by_card_num_U,ST1:%d,ST2:%d",DB_MsgSubtype1,DB_MsgSubtype2);
     dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg);
		strcat(er_buf,ErrorMsg);	
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
      return PTEMSG_UPDATE_FAILED;
   }

   return PTEMSG_OK;
}
/******************************************************************************/


/*************************************************************************************/
BYTE db_update_bch20_preauth_flag_by_card_num_revers( pBCH20 bch20_ptr, pCHAR ErrorMsg)
{
  	bch20_to_db( bch20_ptr );

	EXEC SQL SELECT *
 	INTO  :db_bch20
  	FROM  BCH20
  	WHERE batch_nbr   = :pte_bch20.batch_nbr   AND 
  		  merchant_id = :pte_bch20.merchant_id AND 
  		  card_nbr    = :pte_bch20.card_nbr    AND 
  		  rownum      = 1
        FOR Update NOWAIT;
        
   if (SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA)
   {
      /* Record is inaccessible. Return with error. */
      dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg);
      return PTEMSG_UPDATE_FAILED;
   }
   
   EXEC SQL UPDATE bch20
   SET product5_code = 'revers'
   WHERE batch_nbr   = :pte_bch20.batch_nbr   AND 
   		 merchant_id = :pte_bch20.merchant_id AND 
   		 card_nbr    = :pte_bch20.card_nbr;

   if (( SQLCODE != 0 ) /*&& ( SQLCODE != NO_DATA_FOUND)*/)
   {
     dbcommon_oracle_to_pte_rcode(SQLCODE, ErrorMsg);
      return PTEMSG_UPDATE_FAILED;
   }

   return PTEMSG_OK;
}
/******************************************************************************/


int daytoJulian( int day,int month, int year) //takes calendar date and calculates its julian day within the year
{
	int count;
	int temp_date=day;
	for(count = 1; count < month; ++count)
	{
		temp_date = temp_date + daysInMonth(count, year);
	}
	return temp_date;
}

int daysInMonth(int month, int year) //takes a month and year and calculates how many days are in this particular month
{
	int numDays;
	switch(month)
	{
		case 1:
			numDays = 31;
			break;
		case 2:
			numDays = 28 + leapYear(year);
			break;
		case 3:
			numDays = 31;
			break;
		case 4:
			numDays = 30;
			break;
		case 5:
			numDays = 31;
			break;
		case 6:
			numDays = 30;
			break;
		case 7:
			numDays = 31;
			break;
		case 8:
			numDays = 31;
			break;
		case 9:
			numDays = 30;
			break;
		case 10:
			numDays = 31;
			break;
		case 11:
			numDays = 30;
			break;
		case 12:
			numDays = 31;
			break;
	}
	return numDays;
}

int leapYear(int year) //takes year and returns 1 if leap year otherwise 0
{
	if(year%4 == 0)
	{
		if( year%100 == 0) /* Checking for a century year */
		{
			if ( year%400 == 0)
			{
				return 1;
			}
			else
			{
				return 0;
			}
		}
		else
		{
			return 1;
		}
	}
	else
	{
		return 0;
	}
}


/*************************************************************/
BYTE JuliantoDay(int Julianday, int year, char* temp_date_YYYYMMDD)
{
	int transactionDD=0;
	int transactionMM=0;
	int Julian_Jan = 31;
	int Julina_feb = 59;
	int Julian_mar = 90;
	int Julian_apr = 120;
	int Julian_may = 151;
	int Julian_jun = 181;
	int Julian_jul = 212;
	int Julian_aug = 243;
	int Julian_sep = 273;
	int Julian_oct = 304;
	int Julian_nov = 334;
	int Julian_dec = 365;
	CHAR tempyear_YYYY[5]={0};  
	CHAR tempmonth_MM[3]={0};  
	CHAR tempdate_DD[3]={0};  
	
	if ( Julianday <= 31)
	{
		if ( Julianday == 31 )
		{
			transactionMM = 01;
			transactionDD = Julianday - 30;
		}
		else if ( Julianday < 31 )
		{
			transactionMM = 12;
			if(Julianday==0)
			{
				transactionDD = 31;
			}
			else
			{
				transactionDD  = Julianday + 1;
			} 
			year = year -1;
		}
	}
	
	else if(Julianday <= (Julina_feb +leapYear(year)))
	{
	
		transactionDD = Julianday - Julian_Jan;
		transactionMM=01;
		
	}
	else if(Julianday <= (Julian_mar +leapYear(year)))
	{
		transactionDD = Julianday - (Julina_feb +leapYear(year));
		if(transactionDD ==30)
		{
			if(leapYear(year))
			{
				transactionDD=29;
			}
			else
			{
				transactionDD=28;
			}
			transactionMM=02;
		}
		else if(transactionDD>30)
		{
			transactionMM = 03;
			transactionDD = transactionDD -30;
		}
		else
		{
			transactionMM=02;
		}
	}
	else if(Julianday <= (Julian_apr +leapYear(year)))
	{
		transactionDD = Julianday - (Julian_mar +leapYear(year)) ;
		if(transactionDD ==30)
		{
			transactionDD=31;
			transactionMM=03;
		}
		else
		{
			transactionMM=03;
		}
	}
	else if(Julianday <= (Julian_may +leapYear(year)))
	{
		transactionDD = Julianday - (Julian_apr +leapYear(year));
		if(transactionDD>30)
		{
			transactionMM = 05;
			transactionDD = transactionDD - 30;
		}
		else
		{
			transactionMM=04;
		}
	}
	else if(Julianday <= (Julian_jun +leapYear(year)))
	{
		transactionDD = Julianday - (Julian_may +leapYear(year));
		if(transactionDD ==30)
		{
			transactionDD=31;
		}
		transactionMM=05;
	}
	else if(Julianday <= (Julian_jul +leapYear(year)))
	{
		transactionDD = Julianday - (Julian_jun +leapYear(year));
		if(transactionDD>30)
		{
			transactionMM = 07;
			transactionDD = transactionDD - 30;
		}
		else
		{
			transactionMM=06;
		}
	}
	else if(Julianday <= (Julian_aug +leapYear(year)))
	{
		transactionDD = Julianday - (Julian_jul +leapYear(year));
		if(transactionDD ==30)
		{
			transactionDD=31;
			transactionMM = 07;
		}
		else if(transactionDD>30)
		{
			transactionMM = 8;
			transactionDD = transactionDD - 30;
		}
		else
		{
			transactionMM=07;
		}
	}
	else if(Julianday <= (Julian_sep +leapYear(year)))
	{
		transactionDD = Julianday - (Julian_aug +leapYear(year));
		if(transactionDD ==30)
		{
			transactionDD=31;
			transactionMM = 8;
		}
		else
		{
			transactionMM=8;
		}
	}
	else if(Julianday <= (Julian_oct +leapYear(year)))
	{
		transactionDD = Julianday - (Julian_sep +leapYear(year));
		if(transactionDD>30)
		{
			transactionMM = 10;
			transactionDD = transactionDD - 30;
		}
		else
		{
			transactionMM=9;
		}
	}
	else if(Julianday <= (Julian_nov +leapYear(year)))
	{
		transactionDD = Julianday - (Julian_oct +leapYear(year));
		if(transactionDD==30)
		{
			transactionDD = 31;
		}
		transactionMM=10;
	}
	else if(Julianday <= (Julian_dec +leapYear(year)))
	{
		transactionDD = Julianday - (Julian_nov +leapYear(year));
		if(transactionDD>30)
		{
			transactionMM = 12;
			transactionDD = transactionDD - 30;
		}
		else
		{
			transactionMM=11;
		}
	}
	
	  
	sprintf(tempyear_YYYY, "%04d",year);
	sprintf(tempmonth_MM, "%02d",transactionMM);
	sprintf(tempdate_DD, "%02d",transactionDD);
	 
    strncpy(temp_date_YYYYMMDD,tempyear_YYYY,(sizeof(tempyear_YYYY)-1));
    strncat(temp_date_YYYYMMDD,tempmonth_MM,(sizeof(tempmonth_MM)-1));
    strncat(temp_date_YYYYMMDD,tempdate_DD,(sizeof(tempmonth_MM)-1));
    printf("date befor 30 day for this julian date is : %d %s\n",Julianday,temp_date_YYYYMMDD);
    return 0;
}

/*************************************************************/


/*************************************************************/

BYTE db_select_bch20_for_incremental_preauth (pBCH20    bch20_record, 
                        pBCH20         bch20_ptr, 
                        pCHAR          ErrorMsg )
{
	INT  retval;
	char temp_date_YYYYMMDD[9]={0};
	BYTE strTransactionYYYY[5]={0};
	BYTE strTransactionMM[3]={0};
	BYTE strTransactionDD[3]={0};
	char temp_response_code[3]="00";
	char LErrorMsg[1000]={0};
	
	int  TransactionYYYY = 0;
	int  TransactionMM = 0;
	int  TransactionDD = 0 ;
	int  Transactionjulianday=0;
 
	memset( &db_bch20, 0, sizeof( db_bch20 ) );
    strncpy( pte_bch20.card_nbr, bch20_record->card_nbr, (sizeof(pte_bch20.card_nbr) -1));
    strncpy( pte_bch20.merchant_id, bch20_record->merchant_id, (sizeof(pte_bch20.merchant_id) -1));
    strncpy( pte_bch20.tran_date, bch20_record->tran_date, (sizeof(pte_bch20.tran_date) -1));
    strncpy( pte_bch20.processing_code, bch20_record->processing_code, (sizeof(pte_bch20.processing_code) -1));
    
	strncpy(strTransactionYYYY,pte_bch20.tran_date, 4);
	TransactionYYYY = atoi (strTransactionYYYY) ;
	
	strncpy(strTransactionMM,pte_bch20.tran_date+4, 2);
	TransactionMM = atoi (strTransactionMM) ;
	
	strncpy(strTransactionDD,pte_bch20.tran_date+6, 2);
	TransactionDD = atoi (strTransactionDD) ;
	
    Transactionjulianday=daytoJulian(TransactionDD,TransactionMM,TransactionYYYY);
    JuliantoDay(Transactionjulianday,TransactionYYYY,temp_date_YYYYMMDD);
    
    //Let us check if we are able to find incremental Pre Auth transaction 
    //For unprocessed Pre auth , product5_code should be null
    EXEC SQL SELECT *
    INTO :db_bch20
    FROM bch20
    WHERE   card_nbr    	= :pte_bch20.card_nbr  		  AND   
    		merchant_id 	= :pte_bch20.merchant_id  	  AND    
    		response_code	= :temp_response_code    	  AND    
    		processing_code	= :pte_bch20.processing_code  AND
    		product5_code is null                         AND
    		tran_date >= :temp_date_YYYYMMDD
     AND rownum = 1;

   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      return( dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) );
   }
   
   // We have found the incremental PreAuth  with this PreAuth transaction.
   db_to_bch20 (bch20_ptr);
   return PTEMSG_OK;

}
/*************************************************************************************/

/*************************************************************************************/
#if AMEX03B_APRIL2024
BYTE db_select_bch20_for_estimated_preauth (pBCH20    bch20_record, 
                        pBCH20         bch20_ptr, 
                        pCHAR          ErrorMsg )
{
	INT  retval;
	char LErrorMsg[1000]={0};
	CHAR transactionDate[9]={0};
	LONG  Transactionjulianday=0;
	CHAR  look_back_date[9]={0};
    LONG  lookback_julian_date=0;
    CHAR  fuunction_code[4]="101";
 
	memset( &db_bch20, 0, sizeof( db_bch20 ) );
    strncpy( pte_bch20.card_nbr, bch20_record->card_nbr, (sizeof(pte_bch20.card_nbr) -1));
    strncpy( pte_bch20.merchant_id, bch20_record->merchant_id, (sizeof(pte_bch20.merchant_id) -1));
    strncpy( transactionDate, bch20_record->tran_date, (sizeof(pte_bch20.tran_date) -1));

	Transactionjulianday =  Txutils_Calculate_Julian_Date (transactionDate);
	lookback_julian_date = Transactionjulianday - atoi(maximum_validity_of_preauth_in_days_for_AMEX);
    Txutils_Calculate_Gregorian_Date(lookback_julian_date,look_back_date);
    
    //Let us check if we are able to find incremental Pre Auth transaction 
    //For unprocessed Pre auth , product5_code should be null
    EXEC SQL SELECT *
    INTO :db_bch20
    FROM bch20
    WHERE   card_nbr    	= :pte_bch20.card_nbr  		  AND   
    		merchant_id 	= :pte_bch20.merchant_id  	  AND    
    		product5_code is null                         AND
    		(tran_date <= :transactionDate AND tran_date >= :look_back_date) AND
     		rownum = 1;

   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
      return( dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg ) );
   }
   
   // We have found the estimated or 1st PreAuth  for the second PreAuth transaction.
   db_to_bch20 (bch20_ptr);
   return PTEMSG_OK;

}

#endif

/*************************************************************************************/

/*************************************************************/

BYTE db_select_bch20_for_preauth (pBCH20    bch20_record, 
                        pBCH20         bch20_ptr, 
                        pCHAR          ErrorMsg )
{
	INT  retval;
	char temp_date_YYYYMMDD[9]={0};
	BYTE str_offline_auth_num[7]={0};
	LONG  Transactionjulianday=0;

	double amount = 0.0;
	double camount = 0.0;
	double offline_auth_amount=0.0;
	double Preauth_auth_amount=0.0;
    char temp_total_debit_amt[13]={0};
    BYTE temp_offline_auth_amount[13]={0};
    BYTE temp_Preauth_auth_amount[13]={0};
 
	char strmcard_bk[51]={0};
	char strsettle_date[5]={0};
	char strservice_code[4]={0};
	char strtransmission_timestamp[11]={0};
	
	char temp_response_code[3]="00";
	char LErrorMsg[1000]={0};
	BCH20 OrigBch20;

	CHAR transactionDate[9]={0};
	CHAR  look_back_date[9]={0};
    LONG  lookback_julian_date=0;
	   
	memset( &db_bch20, 0, sizeof( db_bch20 ) );
    strncpy( pte_bch20.card_nbr, bch20_record->card_nbr, (sizeof(pte_bch20.card_nbr) -1));
    strncpy( pte_bch20.merchant_id, bch20_record->merchant_id, (sizeof(pte_bch20.merchant_id) -1));
    strncpy( pte_bch20.auth_number, bch20_record->auth_number, (sizeof(pte_bch20.auth_number) -1));
    strncpy( pte_bch20.tran_date, bch20_record->tran_date, (sizeof(pte_bch20.tran_date) -1));
    strncpy( temp_offline_auth_amount, bch20_record->tran_amount, (sizeof(temp_offline_auth_amount) -1));
	strncpy(str_offline_auth_num,bch20_record->auth_number,6);

    if(true == devds_check_If_MC_Transaction(bch20_record->card_nbr))
    {
    	create_system_date(transactionDate );

		Transactionjulianday =  Txutils_Calculate_Julian_Date (transactionDate);
		if (0 == strncmp(bch20_record->product_codes[18].quantity ,"CF",2))
		{
			lookback_julian_date = Transactionjulianday - atoi(smcc_maximum_validity_of_preauth_in_days_for_MC);
		}
		else
		{
			lookback_julian_date = Transactionjulianday - atoi(maximum_validity_of_preauth_in_days_for_MC);
		}
	    Txutils_Calculate_Gregorian_Date(lookback_julian_date,look_back_date);
	    
	    strncpy(temp_date_YYYYMMDD ,look_back_date, 8);
    }
    else  if(true == devds_check_If_VISA_Transaction(bch20_record->card_nbr))
    {
    	create_system_date(transactionDate );

		Transactionjulianday =  Txutils_Calculate_Julian_Date (transactionDate);
		if (0 == strncmp(bch20_record->product_codes[18].quantity ,"CF",2))
		{
			lookback_julian_date = Transactionjulianday - atoi(smcc_maximum_validity_of_preauth_in_days_for_VISA);
		}
		else
		{
			lookback_julian_date = Transactionjulianday - atoi(maximum_validity_of_preauth_in_days_for_VISA);
		}
	    Txutils_Calculate_Gregorian_Date(lookback_julian_date,look_back_date);
	    
	    strncpy(temp_date_YYYYMMDD ,look_back_date, 8);
    }
    else  if(true == devds_check_If_AMEX_Transaction(bch20_record->card_nbr))
    {
    	create_system_date(transactionDate );

		Transactionjulianday =  Txutils_Calculate_Julian_Date (transactionDate);
		if (0 == strncmp(bch20_record->product_codes[18].quantity ,"CF",2))
		{
			lookback_julian_date = Transactionjulianday - atoi(smcc_maximum_validity_of_preauth_in_days_for_AMEX);
		}
		else
		{
			lookback_julian_date = Transactionjulianday - atoi(maximum_validity_of_preauth_in_days_for_AMEX);
	    }
	    Txutils_Calculate_Gregorian_Date(lookback_julian_date,look_back_date);
	    
	    strncpy(temp_date_YYYYMMDD ,look_back_date, 8);
    }
    else if (true == devds_check_If_DCI_Transaction(bch20_record->card_nbr))
    {
    	create_system_date(transactionDate );
	
		Transactionjulianday =  Txutils_Calculate_Julian_Date (transactionDate);
		if (0 == strncmp(bch20_record->product_codes[18].quantity ,"CF",2))
		{
			lookback_julian_date = Transactionjulianday - atoi(smcc_maximum_validity_of_preauth_in_days_for_DCI);
		}
		else
		{
			lookback_julian_date = Transactionjulianday - atoi(maximum_validity_of_preauth_in_days_for_DCI);
	    }
	    Txutils_Calculate_Gregorian_Date(lookback_julian_date,look_back_date);
	
	    strncpy(temp_date_YYYYMMDD ,look_back_date, 8);
    }
    else if (true == devds_check_If_JCB_Transaction(bch20_record->card_nbr))
    {
    	create_system_date(transactionDate );
	
		Transactionjulianday =  Txutils_Calculate_Julian_Date (transactionDate);
		if (0 == strncmp(bch20_record->product_codes[18].quantity ,"CF",2))
		{
			lookback_julian_date = Transactionjulianday - atoi(smcc_maximum_validity_of_preauth_in_days_for_JCB);
		}
		else
		{
			lookback_julian_date = Transactionjulianday - atoi(maximum_validity_of_preauth_in_days_for_JCB);
	    }
	    Txutils_Calculate_Gregorian_Date(lookback_julian_date,look_back_date);

	    strncpy(temp_date_YYYYMMDD ,look_back_date, 8);
    }
    else if (true == devds_Check_If_UPI_Transaction(bch20_record->card_nbr))
    {
    	create_system_date(transactionDate );

		Transactionjulianday =  Txutils_Calculate_Julian_Date (transactionDate);
		if (0 == strncmp(bch20_record->product_codes[18].quantity ,"CF",2))
		{
			lookback_julian_date = Transactionjulianday - atoi(smcc_maximum_validity_of_preauth_in_days_for_UPI);
		}
		else
		{
			lookback_julian_date = Transactionjulianday - atoi(maximum_validity_of_preauth_in_days_for_UPI);
	    }
	    Txutils_Calculate_Gregorian_Date(lookback_julian_date,look_back_date);
	    
	    strncpy(temp_date_YYYYMMDD ,look_back_date, 8);
    }

    if ( db_error_statics_flag == true )
    {
       start_time = ptetime_get_time();
    }
    //Let us check if we are able to find Pre Auth transaction from this Offline sale
    //For unprocessed Pre auth , product5_code should be null
    
      EXEC SQL SELECT * INTO :db_bch20 FROM
              ( SELECT *
       			FROM bch20
       			WHERE   card_nbr    = :pte_bch20.card_nbr     AND    
    		   			auth_number = :pte_bch20.auth_number  AND
    		  			merchant_id = :pte_bch20.merchant_id  AND    
    		  			(product5_code = 'prused'   		  OR
    		   			 product5_code is null )              AND
    		   			tran_date >= :temp_date_YYYYMMDD ORDER BY tran_date , tran_time ASC) where rownum = 1;
   
   if ( db_error_statics_flag == true )
   {
        end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  	   	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		   	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH20 ,Fun_Name : db_select_bch20_for_preauth_S1 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
		   	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
   } 
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch20_for_preauth,ST1:%d,ST2:%d_1",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);	
	   strcat(er_buf, ", fetching the record with beyond validity days to verify auto-reversed preauths");
	   Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		
	   if ( db_error_statics_flag == true )
	   {
		   start_time = ptetime_get_time();
	   }
	    
	   EXEC SQL SELECT * INTO :db_bch20 FROM
			  ( SELECT *
				FROM bch20
				WHERE   card_nbr    = :pte_bch20.card_nbr     AND    
						auth_number = :pte_bch20.auth_number  AND
						merchant_id = :pte_bch20.merchant_id  AND    
						product5_code = 'prused'			  AND
						tran_date < :temp_date_YYYYMMDD) where rownum = 1;
	      
	   if ( db_error_statics_flag == true )
	   {
	        end_time = ptetime_get_time();
	     	duration = end_time - start_time;
	    	if(duration >= db_error_statics_value)
		    {
		  	   	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
			   	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH20 ,Fun_Name : db_select_bch20_for_preauth_S1_new , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
			   	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
		  	}
	   }
	   
	   if ( SQLCODE == 0 || SQLCODE == NULL_COLUMN_DATA )
	   {
		   db_to_bch20 (bch20_ptr);
		   return PTEMSG_OK;
	   }
	   else
	   {
			memset(er_buf,0x00,sizeof(er_buf));
			sprintf(er_buf,"In db_select_bch20_for_preauth,ST1:%d,ST2:%d_new",DB_MsgSubtype1,DB_MsgSubtype2);
			DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
			strcat(er_buf,ErrorMsg);	
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	}
	}

   // We have found the Pre Auth Assosiated with this Offline.
   db_to_bch20 (bch20_ptr);
   
   
   offline_auth_amount = atoi(temp_offline_auth_amount);
   strncpy(temp_Preauth_auth_amount,bch20_ptr->tran_amount, (sizeof(temp_Preauth_auth_amount)-1));
   Preauth_auth_amount = atoi(temp_Preauth_auth_amount);
   strcpy (bch20_ptr->product_codes[4].amount, temp_Preauth_auth_amount) ;
   
   /* For MC check for other pre-auth even amount of sale is less or equal 
      Check for all cards whether incremental preauth is present or not      */
   if((0==strncmp(bch20_ptr->product_codes[7].code, INITIAL_PREAUTH_TRA, PREAUTH_TRA_LEN)) &&
	    (0==strncmp(bch20_ptr->product_codes[4].quantity, INITIAL_PREAUTH_TRA_WITHOUT_INCREMENTAL, PREAUTH_TRA_LEN_WITH_INCREMENTAL_FLAG)))
   {
   		return PTEMSG_OK;
   }
   
	if(devds_check_If_MC_Transaction(bch20_record->card_nbr) == true) 
	{
		OrigBch20 = *bch20_ptr;
	}
	//new cases for other card brands
	else if(devds_check_If_VISA_Transaction(bch20_record->card_nbr) == true)
	{
		OrigBch20 = *bch20_ptr;
	}
	else if(devds_check_If_JCB_Transaction(bch20_record->card_nbr) == true)
	{
		OrigBch20 = *bch20_ptr;
	}
	else if(devds_check_If_Amex_Transaction(bch20_record->card_nbr) == true)
	{
		OrigBch20 = *bch20_ptr;
	}
	else if(devds_check_If_DCI_Transaction(bch20_record->card_nbr) == true)
	{
		OrigBch20 = *bch20_ptr;
	}
	else if(devds_Check_If_UPI_Transaction(bch20_record->card_nbr) == true)
	{
		OrigBch20 = *bch20_ptr;
	}
	
	
   //Let us store these value so that we can send while sending the final data from this function
	memcpy(strmcard_bk,bch20_ptr->mcard_banknet,sizeof(strmcard_bk)-1);
	memcpy(strsettle_date,bch20_ptr->product_codes[19].code,sizeof(strsettle_date)-1);
	memcpy(strservice_code,bch20_ptr->product_codes[6].amount +2,sizeof(strservice_code)-1);
	memcpy(strtransmission_timestamp,bch20_ptr->transmission_timestamp,sizeof(strtransmission_timestamp)-1);
		
   // Pre Auth Amount is less than Off Line Amount , let us check if we have multiple preauth 
       
    EXEC SQL DECLARE bch20_cursor CURSOR FOR
    SELECT *
    FROM bch20
    WHERE merchant_id = :pte_bch20.merchant_id AND 
    	  card_nbr 	  = :pte_bch20.card_nbr    AND 
    	  product5_code is null				   AND
    	  tran_date > :temp_date_YYYYMMDD; 
    
    if ( db_error_statics_flag == true )
    {
        end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  	   	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		   	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH20 ,Fun_Name : db_select_bch20_for_preauth_S2 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
		   	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
    } 
    
    EXEC SQL WHENEVER SQLERROR goto sql_error;
    
    EXEC SQL OPEN bch20_cursor;

    EXEC SQL WHENEVER SQLERROR goto sql_error2;
    EXEC SQL WHENEVER NOTFOUND DO break;

    while(1)
    {
      memset(&db_bch20, 0x00, sizeof(db_bch20));
      EXEC SQL FETCH bch20_cursor
      INTO :db_bch20;

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE bch20_cursor;
         
        memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch20_for_preauth,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);		
		return DB_rcode;
	  }

      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch20_for_preauth,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
      }

      db_to_bch20 (bch20_ptr);
      // Add the total Auth Amount
      camount = strtod (bch20_ptr->tran_amount, 0) / 100;
      amount = amount  + camount;  
   }
  
   EXEC SQL CLOSE bch20_cursor;     
  
   sql_error:
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch20_for_preauth,ST1:%d,ST2:%d_4",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);		
		return DB_rcode;
   }
   
   Convert_Amt_To_Auth_Tx_String_Format(amount,temp_total_debit_amt);
   LeftFill_String_With_Character (sizeof temp_total_debit_amt-1, temp_total_debit_amt,'0') ;

   if(devds_check_If_MC_Transaction(bch20_record->card_nbr) == true ) 
   {
   		*bch20_ptr = OrigBch20;
   }
   //new cases for other card brands
   else if(devds_check_If_VISA_Transaction(bch20_record->card_nbr) == true)
   {
	    *bch20_ptr = OrigBch20;
   }
   else if(devds_check_If_JCB_Transaction(bch20_record->card_nbr) == true)
   {
	    *bch20_ptr = OrigBch20;
   }
   else if(devds_check_If_Amex_Transaction(bch20_record->card_nbr) == true)
   {
	    *bch20_ptr = OrigBch20;
   }
   else if(devds_check_If_DCI_Transaction(bch20_record->card_nbr) == true)
   {
	    *bch20_ptr = OrigBch20;
   }
   else if(devds_Check_If_UPI_Transaction(bch20_record->card_nbr) == true)
   {
	    *bch20_ptr = OrigBch20;
   }
   else
   {
   	// Do nothing
   }

		strncpy (bch20_ptr->product_codes[4].amount, temp_total_debit_amt,12) ;
	   memcpy(bch20_ptr->auth_number,str_offline_auth_num,sizeof(str_offline_auth_num)-1);
	   memcpy(bch20_ptr->mcard_banknet,strmcard_bk,sizeof(strmcard_bk)-1);
	   memcpy(bch20_ptr->product_codes[19].code,strsettle_date,sizeof(strsettle_date)-1);
	   memcpy(bch20_ptr->product_codes[6].amount + 2,strservice_code,sizeof(strservice_code)-1);
	   memcpy(bch20_ptr->transmission_timestamp,strtransmission_timestamp,sizeof(strtransmission_timestamp)-1);
		
   return PTEMSG_OK;

}
/*************************************************************************************/



BYTE db_select_bch20_for_preauth_total_amount (pBCH20    bch20_record, 
                        pBCH20         bch20_ptr, 
                        pCHAR          ErrorMsg )
{
	INT  retval;
	char temp_date_YYYYMMDD[9]={0};
	BYTE strTransactionYYYY[5]={0};
	BYTE strTransactionMM[3]={0};
	BYTE strTransactionDD[3]={0};
	BYTE str_offline_auth_num[7]={0};
	
	int  TransactionYYYY = 0;
	int  TransactionMM = 0;
	int  TransactionDD = 0 ;
	LONG  Transactionjulianday=0;

	double amount = 0.0;
	double camount = 0.0;
	double offline_auth_amount=0.0;
	double Preauth_auth_amount=0.0;
    char temp_total_debit_amt[13]={0};
    BYTE temp_offline_auth_amount[13]={0};
    BYTE temp_Preauth_auth_amount[13]={0};
 
	char strmcard_bk[51]={0};
	char strsettle_date[5]={0};
	char strservice_code[4]={0};
	char strtransmission_timestamp[11]={0};
	
	char temp_response_code[3]="00";
	char LErrorMsg[1000]={0};
	BCH20 OrigBch20;

	CHAR transactionDate[9]={0};
	CHAR  look_back_date[9]={0};
    LONG  lookback_julian_date=0;
	   
	memset( &db_bch20, 0, sizeof( db_bch20 ) );
   
   strncpy( pte_bch20.merchant_id, bch20_record->merchant_id, sizeof(pte_bch20.merchant_id) );
   strncpy( pte_bch20.auth_number, bch20_record->auth_number, sizeof(pte_bch20.auth_number) );
   strncpy( pte_bch20.card_nbr,    bch20_record->card_nbr,    sizeof(pte_bch20.card_nbr   ) );
   strncpy( pte_bch20.retrieval_ref_num, bch20_record->primary_key.retrieval_ref_num, sizeof(pte_bch20.retrieval_ref_num) );
   strncpy( pte_bch20.tran_date, bch20_record->tran_date, (sizeof(pte_bch20.tran_date) -1));

    if(true == devds_check_If_MC_Transaction(bch20_record->card_nbr))
    {
    	create_system_date(transactionDate );

		Transactionjulianday =  Txutils_Calculate_Julian_Date (transactionDate);
		if (0 == strncmp(bch20_record->product_codes[18].quantity ,"CF",2))
		{
			lookback_julian_date = Transactionjulianday - atoi(smcc_maximum_validity_of_preauth_in_days_for_MC);
		}
		else
		{
			lookback_julian_date = Transactionjulianday - atoi(maximum_validity_of_preauth_in_days_for_MC);
	    }
	    Txutils_Calculate_Gregorian_Date(lookback_julian_date,look_back_date);
	    
	    strncpy(temp_date_YYYYMMDD ,look_back_date, 8);
    }
    else  if(true == devds_check_If_VISA_Transaction(bch20_record->card_nbr))
    {
    	create_system_date(transactionDate );

		Transactionjulianday =  Txutils_Calculate_Julian_Date (transactionDate);
		if (0 == strncmp(bch20_record->product_codes[18].quantity ,"CF",2))
		{
			lookback_julian_date = Transactionjulianday - atoi(smcc_maximum_validity_of_preauth_in_days_for_VISA);
		}
		else
		{
			lookback_julian_date = Transactionjulianday - atoi(maximum_validity_of_preauth_in_days_for_VISA);
	    }
	    Txutils_Calculate_Gregorian_Date(lookback_julian_date,look_back_date);
	    
	    strncpy(temp_date_YYYYMMDD ,look_back_date, 8);
    }
    else  if(true == devds_check_If_AMEX_Transaction(bch20_record->card_nbr))
    {
    	create_system_date(transactionDate );

		Transactionjulianday =  Txutils_Calculate_Julian_Date (transactionDate);
		if (0 == strncmp(bch20_record->product_codes[18].quantity ,"CF",2))
		{
			lookback_julian_date = Transactionjulianday - atoi(smcc_maximum_validity_of_preauth_in_days_for_AMEX);
		}
		else
		{
			lookback_julian_date = Transactionjulianday - atoi(maximum_validity_of_preauth_in_days_for_AMEX);
	    }
	    Txutils_Calculate_Gregorian_Date(lookback_julian_date,look_back_date);
	    
	    strncpy(temp_date_YYYYMMDD ,look_back_date, 8);
    }
    else if (true == devds_check_If_DCI_Transaction(bch20_record->card_nbr))
    {
    	create_system_date(transactionDate );

		Transactionjulianday =  Txutils_Calculate_Julian_Date (transactionDate);
		if (0 == strncmp(bch20_record->product_codes[18].quantity ,"CF",2))
		{
			lookback_julian_date = Transactionjulianday - atoi(smcc_maximum_validity_of_preauth_in_days_for_DCI);
		}
		else
		{
			lookback_julian_date = Transactionjulianday - atoi(maximum_validity_of_preauth_in_days_for_DCI);
	    }
	    Txutils_Calculate_Gregorian_Date(lookback_julian_date,look_back_date);
	    
	    strncpy(temp_date_YYYYMMDD ,look_back_date, 8);
    }
    else if (true == devds_check_If_JCB_Transaction(bch20_record->card_nbr))
    {
    	create_system_date(transactionDate );

		Transactionjulianday =  Txutils_Calculate_Julian_Date (transactionDate);
		if (0 == strncmp(bch20_record->product_codes[18].quantity ,"CF",2))
		{
			lookback_julian_date = Transactionjulianday - atoi(smcc_maximum_validity_of_preauth_in_days_for_JCB);
		}
		else
		{
			lookback_julian_date = Transactionjulianday - atoi(maximum_validity_of_preauth_in_days_for_JCB);
		}
	    Txutils_Calculate_Gregorian_Date(lookback_julian_date,look_back_date);
	    
	    strncpy(temp_date_YYYYMMDD ,look_back_date, 8);
    }
 
    if ( db_error_statics_flag == true )
    {
       start_time = ptetime_get_time();
    }
	
   //Let us store these value so that we can send while sending the final data from this function
	memcpy(strmcard_bk,bch20_ptr->mcard_banknet,sizeof(strmcard_bk)-1);
	memcpy(strsettle_date,bch20_ptr->product_codes[19].code,sizeof(strsettle_date)-1);
	memcpy(strservice_code,bch20_ptr->product_codes[6].amount +2,sizeof(strservice_code)-1);
	memcpy(strtransmission_timestamp,bch20_ptr->transmission_timestamp,sizeof(strtransmission_timestamp)-1);
		   
    EXEC SQL DECLARE bch20_preauth_cursor_1 CURSOR FOR
    SELECT *
    FROM bch20
    WHERE merchant_id = :pte_bch20.merchant_id AND 
    	  card_nbr 	  = :pte_bch20.card_nbr    AND 
    	  product5_code is null				   AND
    	  tran_date > :temp_date_YYYYMMDD; 
    
    if ( db_error_statics_flag == true )
    {
        end_time = ptetime_get_time();
     	duration = end_time - start_time;
    	if(duration >= db_error_statics_value)
	    {
	  	   	memset(DB_Tmr_Lgng_Buf,0x00,sizeof(DB_Tmr_Lgng_Buf));
		   	sprintf(DB_Tmr_Lgng_Buf,"Exceeded Query: %s, ST1:%d,ST2:%d ,Data_Type : BCH20 ,Fun_Name : db_select_bch20_for_preauth_total_amount_S2 , Duration = %f",AppName,DB_MsgSubtype1,DB_MsgSubtype2,duration);
		   	Log_Db_Statics_And_Oracle_Db_Error_To_File(DB_Tmr_Lgng_Buf);
	  	}
    } 
    
    EXEC SQL WHENEVER SQLERROR goto sql_error;
    
    EXEC SQL OPEN bch20_preauth_cursor_1;

    EXEC SQL WHENEVER SQLERROR goto sql_error2;
    EXEC SQL WHENEVER NOTFOUND DO break;

    while(1)
    {
      memset(&db_bch20, 0x00, sizeof(db_bch20));
      EXEC SQL FETCH bch20_preauth_cursor_1
      INTO :db_bch20;

      sql_error2:
      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
         SQL_CODE = SQLCODE;
         EXEC SQL CLOSE bch20_preauth_cursor_1;
         
        memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"db_select_bch20_for_preauth_total_amount,ST1:%d,ST2:%d_2",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);		
		return DB_rcode;
	  }

      if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
      {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch20_for_preauth,ST1:%d,ST2:%d_3",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);
		return DB_rcode;
	
      }

      db_to_bch20 (bch20_ptr);
      // Add the total Auth Amount
      camount = strtod (bch20_ptr->tran_amount, 0) / 100;
      amount = amount  + camount;  
   }
  
   EXEC SQL CLOSE bch20_preauth_cursor_1;     
  
   sql_error:
   if ( SQLCODE != 0 && SQLCODE != NULL_COLUMN_DATA )
   {
		memset(er_buf,0x00,sizeof(er_buf));
		sprintf(er_buf,"In db_select_bch20_for_preauth_total_amount,ST1:%d,ST2:%d_4",DB_MsgSubtype1,DB_MsgSubtype2);
		DB_rcode = dbcommon_oracle_to_pte_rcode( SQLCODE, ErrorMsg );
		strcat(er_buf,ErrorMsg);
		Log_Db_Statics_And_Oracle_Db_Error_To_File(er_buf);		
		return DB_rcode;
   }
   
   Convert_Amt_To_Auth_Tx_String_Format(amount,temp_total_debit_amt);
   LeftFill_String_With_Character (sizeof temp_total_debit_amt-1, temp_total_debit_amt,'0') ;
   
   strncpy (bch20_ptr->product_codes[4].amount, temp_total_debit_amt,12) ;
   memcpy(bch20_ptr->auth_number,str_offline_auth_num,sizeof(str_offline_auth_num)-1);
   memcpy(bch20_ptr->mcard_banknet,strmcard_bk,sizeof(strmcard_bk)-1);
   memcpy(bch20_ptr->product_codes[19].code,strsettle_date,sizeof(strsettle_date)-1);
   memcpy(bch20_ptr->product_codes[6].amount + 2,strservice_code,sizeof(strservice_code)-1);
   memcpy(bch20_ptr->transmission_timestamp,strtransmission_timestamp,sizeof(strtransmission_timestamp)-1);
		
   return PTEMSG_OK;

}
/*************************************************************************************/
